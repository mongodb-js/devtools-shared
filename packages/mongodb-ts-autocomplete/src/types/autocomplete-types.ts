const files = {
  '/bson.ts':
    "/**\n * A class representation of the BSON Binary type.\n * @public\n * @category BSONType\n */\nexport declare class Binary extends BSONValue {\n    get _bsontype(): 'Binary';\n    /* Excluded from this release type: BSON_BINARY_SUBTYPE_DEFAULT */\n    /** Initial buffer default size */\n    static readonly BUFFER_SIZE = 256;\n    /** Default BSON type */\n    static readonly SUBTYPE_DEFAULT = 0;\n    /** Function BSON type */\n    static readonly SUBTYPE_FUNCTION = 1;\n    /** Byte Array BSON type */\n    static readonly SUBTYPE_BYTE_ARRAY = 2;\n    /** Deprecated UUID BSON type @deprecated Please use SUBTYPE_UUID */\n    static readonly SUBTYPE_UUID_OLD = 3;\n    /** UUID BSON type */\n    static readonly SUBTYPE_UUID = 4;\n    /** MD5 BSON type */\n    static readonly SUBTYPE_MD5 = 5;\n    /** Encrypted BSON type */\n    static readonly SUBTYPE_ENCRYPTED = 6;\n    /** Column BSON type */\n    static readonly SUBTYPE_COLUMN = 7;\n    /** Sensitive BSON type */\n    static readonly SUBTYPE_SENSITIVE = 8;\n    /** Vector BSON type */\n    static readonly SUBTYPE_VECTOR = 9;\n    /** User BSON type */\n    static readonly SUBTYPE_USER_DEFINED = 128;\n    /** datatype of a Binary Vector (subtype: 9) */\n    static readonly VECTOR_TYPE: Readonly<{\n        readonly Int8: 3;\n        readonly Float32: 39;\n        readonly PackedBit: 16;\n    }>;\n    /**\n     * The bytes of the Binary value.\n     *\n     * The format of a Binary value in BSON is defined as:\n     * ```txt\n     * binary\t::= int32 subtype (byte*)\n     * ```\n     *\n     * This `buffer` is the \"(byte*)\" segment.\n     *\n     * Unless the value is subtype 2, then deserialize will read the first 4 bytes as an int32 and set this to the remaining bytes.\n     *\n     * ```txt\n     * binary\t::= int32 unsigned_byte(2) int32 (byte*)\n     * ```\n     *\n     * @see https://bsonspec.org/spec.html\n     */\n    buffer: Uint8Array;\n    /**\n     * The binary subtype.\n     *\n     * Current defined values are:\n     *\n     * - `unsigned_byte(0)` Generic binary subtype\n     * - `unsigned_byte(1)` Function\n     * - `unsigned_byte(2)` Binary (Deprecated)\n     * - `unsigned_byte(3)` UUID (Deprecated)\n     * - `unsigned_byte(4)` UUID\n     * - `unsigned_byte(5)` MD5\n     * - `unsigned_byte(6)` Encrypted BSON value\n     * - `unsigned_byte(7)` Compressed BSON column\n     * - `unsigned_byte(8)` Sensitive\n     * - `unsigned_byte(9)` Vector\n     * - `unsigned_byte(128)` - `unsigned_byte(255)` User defined\n     */\n    sub_type: number;\n    /**\n     * The Binary's `buffer` can be larger than the Binary's content.\n     * This property is used to determine where the content ends in the buffer.\n     */\n    position: number;\n    /**\n     * Create a new Binary instance.\n     * @param buffer - a buffer object containing the binary data.\n     * @param subType - the option binary type.\n     */\n    constructor(buffer?: BinarySequence, subType?: number);\n    /**\n     * Updates this binary with byte_value.\n     *\n     * @param byteValue - a single byte we wish to write.\n     */\n    put(byteValue: string | number | Uint8Array | number[]): void;\n    /**\n     * Writes a buffer to the binary.\n     *\n     * @param sequence - a string or buffer to be written to the Binary BSON object.\n     * @param offset - specify the binary of where to write the content.\n     */\n    write(sequence: BinarySequence, offset: number): void;\n    /**\n     * Returns a view of **length** bytes starting at **position**.\n     *\n     * @param position - read from the given position in the Binary.\n     * @param length - the number of bytes to read.\n     */\n    read(position: number, length: number): Uint8Array;\n    /** returns a view of the binary value as a Uint8Array */\n    value(): Uint8Array;\n    /** the length of the binary sequence */\n    length(): number;\n    toJSON(): string;\n    toString(encoding?: 'hex' | 'base64' | 'utf8' | 'utf-8'): string;\n    /* Excluded from this release type: toExtendedJSON */\n    toUUID(): UUID;\n    /** Creates an Binary instance from a hex digit string */\n    static createFromHexString(hex: string, subType?: number): Binary;\n    /** Creates an Binary instance from a base64 string */\n    static createFromBase64(base64: string, subType?: number): Binary;\n    /* Excluded from this release type: fromExtendedJSON */\n    inspect(depth?: number, options?: unknown, inspect?: InspectFn): string;\n    /**\n     * If this Binary represents a Int8 Vector (`binary.buffer[0] === Binary.VECTOR_TYPE.Int8`),\n     * returns a copy of the bytes in a new Int8Array.\n     *\n     * If the Binary is not a Vector, or the datatype is not Int8, an error is thrown.\n     */\n    toInt8Array(): Int8Array;\n    /**\n     * If this Binary represents a Float32 Vector (`binary.buffer[0] === Binary.VECTOR_TYPE.Float32`),\n     * returns a copy of the bytes in a new Float32Array.\n     *\n     * If the Binary is not a Vector, or the datatype is not Float32, an error is thrown.\n     */\n    toFloat32Array(): Float32Array;\n    /**\n     * If this Binary represents packed bit Vector (`binary.buffer[0] === Binary.VECTOR_TYPE.PackedBit`),\n     * returns a copy of the bytes that are packed bits.\n     *\n     * Use `toBits` to get the unpacked bits.\n     *\n     * If the Binary is not a Vector, or the datatype is not PackedBit, an error is thrown.\n     */\n    toPackedBits(): Uint8Array;\n    /**\n     * If this Binary represents a Packed bit Vector (`binary.buffer[0] === Binary.VECTOR_TYPE.PackedBit`),\n     * returns a copy of the bit unpacked into a new Int8Array.\n     *\n     * Use `toPackedBits` to get the bits still in packed form.\n     *\n     * If the Binary is not a Vector, or the datatype is not PackedBit, an error is thrown.\n     */\n    toBits(): Int8Array;\n    /**\n     * Constructs a Binary representing an Int8 Vector.\n     * @param array - The array to store as a view on the Binary class\n     */\n    static fromInt8Array(array: Int8Array): Binary;\n    /** Constructs a Binary representing an Float32 Vector. */\n    static fromFloat32Array(array: Float32Array): Binary;\n    /**\n     * Constructs a Binary representing a packed bit Vector.\n     *\n     * Use `fromBits` to pack an array of 1s and 0s.\n     */\n    static fromPackedBits(array: Uint8Array, padding?: number): Binary;\n    /**\n     * Constructs a Binary representing an Packed Bit Vector.\n     * @param array - The array of 1s and 0s to pack into the Binary instance\n     */\n    static fromBits(bits: ArrayLike<number>): Binary;\n}\n\n/** @public */\nexport declare interface BinaryExtended {\n    $binary: {\n        subType: string;\n        base64: string;\n    };\n}\n\n/** @public */\nexport declare interface BinaryExtendedLegacy {\n    $type: string;\n    $binary: string;\n}\n\n/** @public */\nexport declare type BinarySequence = Uint8Array | number[];\n\ndeclare namespace BSON {\n    export {\n        setInternalBufferSize,\n        serialize,\n        serializeWithBufferAndIndex,\n        deserialize,\n        calculateObjectSize,\n        deserializeStream,\n        UUIDExtended,\n        BinaryExtended,\n        BinaryExtendedLegacy,\n        BinarySequence,\n        CodeExtended,\n        DBRefLike,\n        Decimal128Extended,\n        DoubleExtended,\n        EJSONOptions,\n        Int32Extended,\n        LongExtended,\n        MaxKeyExtended,\n        MinKeyExtended,\n        ObjectIdExtended,\n        ObjectIdLike,\n        BSONRegExpExtended,\n        BSONRegExpExtendedLegacy,\n        BSONSymbolExtended,\n        LongWithoutOverrides,\n        TimestampExtended,\n        TimestampOverrides,\n        LongWithoutOverridesClass,\n        SerializeOptions,\n        DeserializeOptions,\n        Code,\n        BSONSymbol,\n        DBRef,\n        Binary,\n        ObjectId,\n        UUID,\n        Long,\n        Timestamp,\n        Double,\n        Int32,\n        MinKey,\n        MaxKey,\n        BSONRegExp,\n        Decimal128,\n        BSONValue,\n        BSONError,\n        BSONVersionError,\n        BSONRuntimeError,\n        BSONOffsetError,\n        BSONType,\n        EJSON,\n        onDemand,\n        OnDemand,\n        Document,\n        CalculateObjectSizeOptions\n    }\n}\nexport { BSON }\n\n/* Excluded from this release type: BSON_MAJOR_VERSION */\n\n/* Excluded from this release type: BSON_VERSION_SYMBOL */\n\n/**\n * @public\n * @experimental\n */\ndeclare type BSONElement = [\ntype: number,\nnameOffset: number,\nnameLength: number,\noffset: number,\nlength: number\n];\n\n/**\n * @public\n * @category Error\n *\n * `BSONError` objects are thrown when BSON encounters an error.\n *\n * This is the parent class for all the other errors thrown by this library.\n */\nexport declare class BSONError extends Error {\n    /* Excluded from this release type: bsonError */\n    get name(): string;\n    constructor(message: string, options?: {\n        cause?: unknown;\n    });\n    /**\n     * @public\n     *\n     * All errors thrown from the BSON library inherit from `BSONError`.\n     * This method can assist with determining if an error originates from the BSON library\n     * even if it does not pass an `instanceof` check against this class' constructor.\n     *\n     * @param value - any javascript value that needs type checking\n     */\n    static isBSONError(value: unknown): value is BSONError;\n}\n\n/**\n * @public\n * @category Error\n *\n * @experimental\n *\n * An error generated when BSON bytes are invalid.\n * Reports the offset the parser was able to reach before encountering the error.\n */\nexport declare class BSONOffsetError extends BSONError {\n    get name(): 'BSONOffsetError';\n    offset: number;\n    constructor(message: string, offset: number, options?: {\n        cause?: unknown;\n    });\n}\n\n/**\n * A class representation of the BSON RegExp type.\n * @public\n * @category BSONType\n */\nexport declare class BSONRegExp extends BSONValue {\n    get _bsontype(): 'BSONRegExp';\n    pattern: string;\n    options: string;\n    /**\n     * @param pattern - The regular expression pattern to match\n     * @param options - The regular expression options\n     */\n    constructor(pattern: string, options?: string);\n    static parseOptions(options?: string): string;\n    /* Excluded from this release type: toExtendedJSON */\n    /* Excluded from this release type: fromExtendedJSON */\n    inspect(depth?: number, options?: unknown, inspect?: InspectFn): string;\n}\n\n/** @public */\nexport declare interface BSONRegExpExtended {\n    $regularExpression: {\n        pattern: string;\n        options: string;\n    };\n}\n\n/** @public */\nexport declare interface BSONRegExpExtendedLegacy {\n    $regex: string | BSONRegExp;\n    $options: string;\n}\n\n/**\n * @public\n * @category Error\n *\n * An error generated when BSON functions encounter an unexpected input\n * or reaches an unexpected/invalid internal state\n *\n */\nexport declare class BSONRuntimeError extends BSONError {\n    get name(): 'BSONRuntimeError';\n    constructor(message: string);\n}\n\n/**\n * A class representation of the BSON Symbol type.\n * @public\n * @category BSONType\n */\nexport declare class BSONSymbol extends BSONValue {\n    get _bsontype(): 'BSONSymbol';\n    value: string;\n    /**\n     * @param value - the string representing the symbol.\n     */\n    constructor(value: string);\n    /** Access the wrapped string value. */\n    valueOf(): string;\n    toString(): string;\n    toJSON(): string;\n    /* Excluded from this release type: toExtendedJSON */\n    /* Excluded from this release type: fromExtendedJSON */\n    inspect(depth?: number, options?: unknown, inspect?: InspectFn): string;\n}\n\n/** @public */\nexport declare interface BSONSymbolExtended {\n    $symbol: string;\n}\n\n/** @public */\nexport declare const BSONType: Readonly<{\n    readonly double: 1;\n    readonly string: 2;\n    readonly object: 3;\n    readonly array: 4;\n    readonly binData: 5;\n    readonly undefined: 6;\n    readonly objectId: 7;\n    readonly bool: 8;\n    readonly date: 9;\n    readonly null: 10;\n    readonly regex: 11;\n    readonly dbPointer: 12;\n    readonly javascript: 13;\n    readonly symbol: 14;\n    readonly javascriptWithScope: 15;\n    readonly int: 16;\n    readonly timestamp: 17;\n    readonly long: 18;\n    readonly decimal: 19;\n    readonly minKey: -1;\n    readonly maxKey: 127;\n}>;\n\n/** @public */\nexport declare type BSONType = (typeof BSONType)[keyof typeof BSONType];\n\n/** @public */\nexport declare abstract class BSONValue {\n    /** @public */\n    abstract get _bsontype(): string;\n    /* Excluded from this release type: [BSON_VERSION_SYMBOL] */\n    /**\n     * @public\n     * Prints a human-readable string of BSON value information\n     * If invoked manually without node.js.inspect function, this will default to a modified JSON.stringify\n     */\n    abstract inspect(depth?: number, options?: unknown, inspect?: InspectFn): string;\n    /* Excluded from this release type: toExtendedJSON */\n}\n\n/**\n * @public\n * @category Error\n */\nexport declare class BSONVersionError extends BSONError {\n    get name(): 'BSONVersionError';\n    constructor();\n}\n\n/**\n * @public\n * @experimental\n *\n * A collection of functions that help work with data in a Uint8Array.\n * ByteUtils is configured at load time to use Node.js or Web based APIs for the internal implementations.\n */\ndeclare type ByteUtils = {\n    /** Transforms the input to an instance of Buffer if running on node, otherwise Uint8Array */\n    toLocalBufferType: (buffer: Uint8Array | ArrayBufferView | ArrayBuffer) => Uint8Array;\n    /** Create empty space of size */\n    allocate: (size: number) => Uint8Array;\n    /** Create empty space of size, use pooled memory when available */\n    allocateUnsafe: (size: number) => Uint8Array;\n    /** Check if two Uint8Arrays are deep equal */\n    equals: (a: Uint8Array, b: Uint8Array) => boolean;\n    /** Check if two Uint8Arrays are deep equal */\n    fromNumberArray: (array: number[]) => Uint8Array;\n    /** Create a Uint8Array from a base64 string */\n    fromBase64: (base64: string) => Uint8Array;\n    /** Create a base64 string from bytes */\n    toBase64: (buffer: Uint8Array) => string;\n    /** **Legacy** binary strings are an outdated method of data transfer. Do not add public API support for interpreting this format */\n    fromISO88591: (codePoints: string) => Uint8Array;\n    /** **Legacy** binary strings are an outdated method of data transfer. Do not add public API support for interpreting this format */\n    toISO88591: (buffer: Uint8Array) => string;\n    /** Create a Uint8Array from a hex string */\n    fromHex: (hex: string) => Uint8Array;\n    /** Create a lowercase hex string from bytes */\n    toHex: (buffer: Uint8Array) => string;\n    /** Create a string from utf8 code units, fatal=true will throw an error if UTF-8 bytes are invalid, fatal=false will insert replacement characters */\n    toUTF8: (buffer: Uint8Array, start: number, end: number, fatal: boolean) => string;\n    /** Get the utf8 code unit count from a string if it were to be transformed to utf8 */\n    utf8ByteLength: (input: string) => number;\n    /** Encode UTF8 bytes generated from `source` string into `destination` at byteOffset. Returns the number of bytes encoded. */\n    encodeUTF8Into: (destination: Uint8Array, source: string, byteOffset: number) => number;\n    /** Generate a Uint8Array filled with random bytes with byteLength */\n    randomBytes: (byteLength: number) => Uint8Array;\n    /** Interprets `buffer` as an array of 32-bit values and swaps the byte order in-place. */\n    swap32: (buffer: Uint8Array) => Uint8Array;\n};\n\n/* Excluded declaration from this release type: ByteUtils */\n\n/**\n * Calculate the bson size for a passed in Javascript object.\n *\n * @param object - the Javascript object to calculate the BSON byte size for\n * @returns size of BSON object in bytes\n * @public\n */\nexport declare function calculateObjectSize(object: Document, options?: CalculateObjectSizeOptions): number;\n\n/** @public */\nexport declare type CalculateObjectSizeOptions = Pick<SerializeOptions, 'serializeFunctions' | 'ignoreUndefined'>;\n\n/**\n * A class representation of the BSON Code type.\n * @public\n * @category BSONType\n */\nexport declare class Code extends BSONValue {\n    get _bsontype(): 'Code';\n    code: string;\n    scope: Document | null;\n    /**\n     * @param code - a string or function.\n     * @param scope - an optional scope for the function.\n     */\n    constructor(code: string | Function, scope?: Document | null);\n    toJSON(): {\n        code: string;\n        scope?: Document;\n    };\n    /* Excluded from this release type: toExtendedJSON */\n    /* Excluded from this release type: fromExtendedJSON */\n    inspect(depth?: number, options?: unknown, inspect?: InspectFn): string;\n}\n\n/** @public */\nexport declare interface CodeExtended {\n    $code: string;\n    $scope?: Document;\n}\n\n/**\n * A class representation of the BSON DBRef type.\n * @public\n * @category BSONType\n */\nexport declare class DBRef extends BSONValue {\n    get _bsontype(): 'DBRef';\n    collection: string;\n    oid: ObjectId;\n    db?: string;\n    fields: Document;\n    /**\n     * @param collection - the collection name.\n     * @param oid - the reference ObjectId.\n     * @param db - optional db name, if omitted the reference is local to the current db.\n     */\n    constructor(collection: string, oid: ObjectId, db?: string, fields?: Document);\n    /* Excluded from this release type: namespace */\n    /* Excluded from this release type: namespace */\n    toJSON(): DBRefLike & Document;\n    /* Excluded from this release type: toExtendedJSON */\n    /* Excluded from this release type: fromExtendedJSON */\n    inspect(depth?: number, options?: unknown, inspect?: InspectFn): string;\n}\n\n/** @public */\nexport declare interface DBRefLike {\n    $ref: string;\n    $id: ObjectId;\n    $db?: string;\n}\n\n/**\n * A class representation of the BSON Decimal128 type.\n * @public\n * @category BSONType\n */\nexport declare class Decimal128 extends BSONValue {\n    get _bsontype(): 'Decimal128';\n    readonly bytes: Uint8Array;\n    /**\n     * @param bytes - a buffer containing the raw Decimal128 bytes in little endian order,\n     *                or a string representation as returned by .toString()\n     */\n    constructor(bytes: Uint8Array | string);\n    /**\n     * Create a Decimal128 instance from a string representation\n     *\n     * @param representation - a numeric string representation.\n     */\n    static fromString(representation: string): Decimal128;\n    /**\n     * Create a Decimal128 instance from a string representation, allowing for rounding to 34\n     * significant digits\n     *\n     * @example Example of a number that will be rounded\n     * ```ts\n     * > let d = Decimal128.fromString('37.499999999999999196428571428571375')\n     * Uncaught:\n     * BSONError: \"37.499999999999999196428571428571375\" is not a valid Decimal128 string - inexact rounding\n     * at invalidErr (/home/wajames/js-bson/lib/bson.cjs:1402:11)\n     * at Decimal128.fromStringInternal (/home/wajames/js-bson/lib/bson.cjs:1633:25)\n     * at Decimal128.fromString (/home/wajames/js-bson/lib/bson.cjs:1424:27)\n     *\n     * > d = Decimal128.fromStringWithRounding('37.499999999999999196428571428571375')\n     * new Decimal128(\"37.49999999999999919642857142857138\")\n     * ```\n     * @param representation - a numeric string representation.\n     */\n    static fromStringWithRounding(representation: string): Decimal128;\n    private static _fromString;\n    /** Create a string representation of the raw Decimal128 value */\n    toString(): string;\n    toJSON(): Decimal128Extended;\n    /* Excluded from this release type: toExtendedJSON */\n    /* Excluded from this release type: fromExtendedJSON */\n    inspect(depth?: number, options?: unknown, inspect?: InspectFn): string;\n}\n\n/** @public */\nexport declare interface Decimal128Extended {\n    $numberDecimal: string;\n}\n\n/**\n * Deserialize data as BSON.\n *\n * @param buffer - the buffer containing the serialized set of BSON documents.\n * @returns returns the deserialized Javascript Object.\n * @public\n */\nexport declare function deserialize(buffer: Uint8Array, options?: DeserializeOptions): Document;\n\n/** @public */\nexport declare interface DeserializeOptions {\n    /**\n     * when deserializing a Long return as a BigInt.\n     * @defaultValue `false`\n     */\n    useBigInt64?: boolean;\n    /**\n     * when deserializing a Long will fit it into a Number if it's smaller than 53 bits.\n     * @defaultValue `true`\n     */\n    promoteLongs?: boolean;\n    /**\n     * when deserializing a Binary will return it as a node.js Buffer instance.\n     * @defaultValue `false`\n     */\n    promoteBuffers?: boolean;\n    /**\n     * when deserializing will promote BSON values to their Node.js closest equivalent types.\n     * @defaultValue `true`\n     */\n    promoteValues?: boolean;\n    /**\n     * allow to specify if there what fields we wish to return as unserialized raw buffer.\n     * @defaultValue `null`\n     */\n    fieldsAsRaw?: Document;\n    /**\n     * return BSON regular expressions as BSONRegExp instances.\n     * @defaultValue `false`\n     */\n    bsonRegExp?: boolean;\n    /**\n     * allows the buffer to be larger than the parsed BSON object.\n     * @defaultValue `false`\n     */\n    allowObjectSmallerThanBufferSize?: boolean;\n    /**\n     * Offset into buffer to begin reading document from\n     * @defaultValue `0`\n     */\n    index?: number;\n    raw?: boolean;\n    /** Allows for opt-out utf-8 validation for all keys or\n     * specified keys. Must be all true or all false.\n     *\n     * @example\n     * ```js\n     * // disables validation on all keys\n     *  validation: { utf8: false }\n     *\n     * // enables validation only on specified keys a, b, and c\n     *  validation: { utf8: { a: true, b: true, c: true } }\n     *\n     *  // disables validation only on specified keys a, b\n     *  validation: { utf8: { a: false, b: false } }\n     * ```\n     */\n    validation?: {\n        utf8: boolean | Record<string, true> | Record<string, false>;\n    };\n}\n\n/**\n * Deserialize stream data as BSON documents.\n *\n * @param data - the buffer containing the serialized set of BSON documents.\n * @param startIndex - the start index in the data Buffer where the deserialization is to start.\n * @param numberOfDocuments - number of documents to deserialize.\n * @param documents - an array where to store the deserialized documents.\n * @param docStartIndex - the index in the documents array from where to start inserting documents.\n * @param options - additional options used for the deserialization.\n * @returns next index in the buffer after deserialization **x** numbers of documents.\n * @public\n */\nexport declare function deserializeStream(data: Uint8Array | ArrayBuffer, startIndex: number, numberOfDocuments: number, documents: Document[], docStartIndex: number, options: DeserializeOptions): number;\n\n/** @public */\nexport declare interface Document {\n    [key: string]: any;\n}\n\n/**\n * A class representation of the BSON Double type.\n * @public\n * @category BSONType\n */\nexport declare class Double extends BSONValue {\n    get _bsontype(): 'Double';\n    value: number;\n    /**\n     * Create a Double type\n     *\n     * @param value - the number we want to represent as a double.\n     */\n    constructor(value: number);\n    /**\n     * Attempt to create an double type from string.\n     *\n     * This method will throw a BSONError on any string input that is not representable as a IEEE-754 64-bit double.\n     * Notably, this method will also throw on the following string formats:\n     * - Strings in non-decimal and non-exponential formats (binary, hex, or octal digits)\n     * - Strings with characters other than numeric, floating point, or leading sign characters (Note: 'Infinity', '-Infinity', and 'NaN' input strings are still allowed)\n     * - Strings with leading and/or trailing whitespace\n     *\n     * Strings with leading zeros, however, are also allowed\n     *\n     * @param value - the string we want to represent as a double.\n     */\n    static fromString(value: string): Double;\n    /**\n     * Access the number value.\n     *\n     * @returns returns the wrapped double number.\n     */\n    valueOf(): number;\n    toJSON(): number;\n    toString(radix?: number): string;\n    /* Excluded from this release type: toExtendedJSON */\n    /* Excluded from this release type: fromExtendedJSON */\n    inspect(depth?: number, options?: unknown, inspect?: InspectFn): string;\n}\n\n/** @public */\nexport declare interface DoubleExtended {\n    $numberDouble: string;\n}\n\n/** @public */\nexport declare const EJSON: {\n    parse: typeof parse;\n    stringify: typeof stringify;\n    serialize: typeof EJSONserialize;\n    deserialize: typeof EJSONdeserialize;\n};\n\n/**\n * Deserializes an Extended JSON object into a plain JavaScript object with native/BSON types\n *\n * @param ejson - The Extended JSON object to deserialize\n * @param options - Optional settings passed to the parse method\n */\ndeclare function EJSONdeserialize(ejson: Document, options?: EJSONOptions): any;\n\n/** @public */\nexport declare type EJSONOptions = {\n    /**\n     * Output using the Extended JSON v1 spec\n     * @defaultValue `false`\n     */\n    legacy?: boolean;\n    /**\n     * Enable Extended JSON's `relaxed` mode, which attempts to return native JS types where possible, rather than BSON types\n     * @defaultValue `false` */\n    relaxed?: boolean;\n    /**\n     * Enable native bigint support\n     * @defaultValue `false`\n     */\n    useBigInt64?: boolean;\n};\n\n/**\n * Serializes an object to an Extended JSON string, and reparse it as a JavaScript object.\n *\n * @param value - The object to serialize\n * @param options - Optional settings passed to the `stringify` function\n */\ndeclare function EJSONserialize(value: any, options?: EJSONOptions): Document;\n\ndeclare type InspectFn = (x: unknown, options?: unknown) => string;\n\n/**\n * A class representation of a BSON Int32 type.\n * @public\n * @category BSONType\n */\nexport declare class Int32 extends BSONValue {\n    get _bsontype(): 'Int32';\n    value: number;\n    /**\n     * Create an Int32 type\n     *\n     * @param value - the number we want to represent as an int32.\n     */\n    constructor(value: number | string);\n    /**\n     * Attempt to create an Int32 type from string.\n     *\n     * This method will throw a BSONError on any string input that is not representable as an Int32.\n     * Notably, this method will also throw on the following string formats:\n     * - Strings in non-decimal formats (exponent notation, binary, hex, or octal digits)\n     * - Strings non-numeric and non-leading sign characters (ex: '2.0', '24,000')\n     * - Strings with leading and/or trailing whitespace\n     *\n     * Strings with leading zeros, however, are allowed.\n     *\n     * @param value - the string we want to represent as an int32.\n     */\n    static fromString(value: string): Int32;\n    /**\n     * Access the number value.\n     *\n     * @returns returns the wrapped int32 number.\n     */\n    valueOf(): number;\n    toString(radix?: number): string;\n    toJSON(): number;\n    /* Excluded from this release type: toExtendedJSON */\n    /* Excluded from this release type: fromExtendedJSON */\n    inspect(depth?: number, options?: unknown, inspect?: InspectFn): string;\n}\n\n/** @public */\nexport declare interface Int32Extended {\n    $numberInt: string;\n}\n\n/**\n * A class representing a 64-bit integer\n * @public\n * @category BSONType\n * @remarks\n * The internal representation of a long is the two given signed, 32-bit values.\n * We use 32-bit pieces because these are the size of integers on which\n * Javascript performs bit-operations.  For operations like addition and\n * multiplication, we split each number into 16 bit pieces, which can easily be\n * multiplied within Javascript's floating-point representation without overflow\n * or change in sign.\n * In the algorithms below, we frequently reduce the negative case to the\n * positive case by negating the input(s) and then post-processing the result.\n * Note that we must ALWAYS check specially whether those values are MIN_VALUE\n * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n * a positive number, it overflows back into a negative).  Not handling this\n * case would often result in infinite recursion.\n * Common constant values ZERO, ONE, NEG_ONE, etc. are found as static properties on this class.\n */\nexport declare class Long extends BSONValue {\n    get _bsontype(): 'Long';\n    /** An indicator used to reliably determine if an object is a Long or not. */\n    get __isLong__(): boolean;\n    /**\n     * The high 32 bits as a signed value.\n     */\n    high: number;\n    /**\n     * The low 32 bits as a signed value.\n     */\n    low: number;\n    /**\n     * Whether unsigned or not.\n     */\n    unsigned: boolean;\n    /**\n     * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n     *\n     * @param low - The low (signed) 32 bits of the long\n     * @param high - The high (signed) 32 bits of the long\n     * @param unsigned - Whether unsigned or not, defaults to signed\n     */\n    constructor(low: number, high?: number, unsigned?: boolean);\n    /**\n     * Constructs a 64 bit two's-complement integer, given a bigint representation.\n     *\n     * @param value - BigInt representation of the long value\n     * @param unsigned - Whether unsigned or not, defaults to signed\n     */\n    constructor(value: bigint, unsigned?: boolean);\n    /**\n     * Constructs a 64 bit two's-complement integer, given a string representation.\n     *\n     * @param value - String representation of the long value\n     * @param unsigned - Whether unsigned or not, defaults to signed\n     */\n    constructor(value: string, unsigned?: boolean);\n    static TWO_PWR_24: Long;\n    /** Maximum unsigned value. */\n    static MAX_UNSIGNED_VALUE: Long;\n    /** Signed zero */\n    static ZERO: Long;\n    /** Unsigned zero. */\n    static UZERO: Long;\n    /** Signed one. */\n    static ONE: Long;\n    /** Unsigned one. */\n    static UONE: Long;\n    /** Signed negative one. */\n    static NEG_ONE: Long;\n    /** Maximum signed value. */\n    static MAX_VALUE: Long;\n    /** Minimum signed value. */\n    static MIN_VALUE: Long;\n    /**\n     * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits.\n     * Each is assumed to use 32 bits.\n     * @param lowBits - The low 32 bits\n     * @param highBits - The high 32 bits\n     * @param unsigned - Whether unsigned or not, defaults to signed\n     * @returns The corresponding Long value\n     */\n    static fromBits(lowBits: number, highBits: number, unsigned?: boolean): Long;\n    /**\n     * Returns a Long representing the given 32 bit integer value.\n     * @param value - The 32 bit integer in question\n     * @param unsigned - Whether unsigned or not, defaults to signed\n     * @returns The corresponding Long value\n     */\n    static fromInt(value: number, unsigned?: boolean): Long;\n    /**\n     * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n     * @param value - The number in question\n     * @param unsigned - Whether unsigned or not, defaults to signed\n     * @returns The corresponding Long value\n     */\n    static fromNumber(value: number, unsigned?: boolean): Long;\n    /**\n     * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n     * @param value - The number in question\n     * @param unsigned - Whether unsigned or not, defaults to signed\n     * @returns The corresponding Long value\n     */\n    static fromBigInt(value: bigint, unsigned?: boolean): Long;\n    /* Excluded from this release type: _fromString */\n    /**\n     * Returns a signed Long representation of the given string, written using radix 10.\n     * Will throw an error if the given text is not exactly representable as a Long.\n     * Throws an error if any of the following conditions are true:\n     * - the string contains invalid characters for the radix 10\n     * - the string contains whitespace\n     * - the value the string represents is too large or too small to be a Long\n     * Unlike Long.fromString, this method does not coerce '+/-Infinity' and 'NaN' to Long.Zero\n     * @param str - The textual representation of the Long\n     * @returns The corresponding Long value\n     */\n    static fromStringStrict(str: string): Long;\n    /**\n     * Returns a Long representation of the given string, written using the radix 10.\n     * Will throw an error if the given parameters are not exactly representable as a Long.\n     * Throws an error if any of the following conditions are true:\n     * - the string contains invalid characters for the given radix\n     * - the string contains whitespace\n     * - the value the string represents is too large or too small to be a Long\n     * Unlike Long.fromString, this method does not coerce '+/-Infinity' and 'NaN' to Long.Zero\n     * @param str - The textual representation of the Long\n     * @param unsigned - Whether unsigned or not, defaults to signed\n     * @returns The corresponding Long value\n     */\n    static fromStringStrict(str: string, unsigned?: boolean): Long;\n    /**\n     * Returns a signed Long representation of the given string, written using the specified radix.\n     * Will throw an error if the given parameters are not exactly representable as a Long.\n     * Throws an error if any of the following conditions are true:\n     * - the string contains invalid characters for the given radix\n     * - the string contains whitespace\n     * - the value the string represents is too large or too small to be a Long\n     * Unlike Long.fromString, this method does not coerce '+/-Infinity' and 'NaN' to Long.Zero\n     * @param str - The textual representation of the Long\n     * @param radix - The radix in which the text is written (2-36), defaults to 10\n     * @returns The corresponding Long value\n     */\n    static fromStringStrict(str: string, radix?: boolean): Long;\n    /**\n     * Returns a Long representation of the given string, written using the specified radix.\n     * Will throw an error if the given parameters are not exactly representable as a Long.\n     * Throws an error if any of the following conditions are true:\n     * - the string contains invalid characters for the given radix\n     * - the string contains whitespace\n     * - the value the string represents is too large or too small to be a Long\n     * Unlike Long.fromString, this method does not coerce '+/-Infinity' and 'NaN' to Long.Zero\n     * @param str - The textual representation of the Long\n     * @param unsigned - Whether unsigned or not, defaults to signed\n     * @param radix - The radix in which the text is written (2-36), defaults to 10\n     * @returns The corresponding Long value\n     */\n    static fromStringStrict(str: string, unsigned?: boolean, radix?: number): Long;\n    /**\n     * Returns a signed Long representation of the given string, written using radix 10.\n     *\n     * If the input string is empty, this function will throw a BSONError.\n     *\n     * If input string does not have valid signed 64-bit Long representation, this method will return a coerced value:\n     * - inputs that overflow 64-bit signed long will be coerced to Long.MAX_VALUE and Long.MIN_VALUE respectively\n     * - 'NaN' or '+/-Infinity' are coerced to Long.ZERO\n     * - other invalid characters sequences have variable behavior\n     *\n     * @param str - The textual representation of the Long\n     * @returns The corresponding Long value\n     */\n    static fromString(str: string): Long;\n    /**\n     * Returns a signed Long representation of the given string, written using the provided radix.\n     *\n     * If the input string is empty or a provided radix is not within (2-36), this function will throw a BSONError.\n     *\n     * If input parameters do not have valid signed 64-bit Long representation, this method will return a coerced value:\n     * - inputs that overflow 64-bit signed long will be coerced to Long.MAX_VALUE and Long.MIN_VALUE respectively\n     * - if the radix is less than 24, 'NaN' is coerced to Long.ZERO\n     * - if the radix is less than 35, '+/-Infinity' inputs are coerced to Long.ZERO\n     * - other invalid characters sequences have variable behavior\n     * @param str - The textual representation of the Long\n     * @param radix - The radix in which the text is written (2-36), defaults to 10\n     * @returns The corresponding Long value\n     */\n    static fromString(str: string, radix?: number): Long;\n    /**\n     * Returns a Long representation of the given string, written using radix 10.\n     *\n     * If the input string is empty, this function will throw a BSONError.\n     *\n     * If input parameters do not have a valid 64-bit Long representation, this method will return a coerced value:\n     * - inputs that overflow 64-bit long will be coerced to max or min (if signed) values\n     * - if the radix is less than 24, 'NaN' is coerced to Long.ZERO\n     * - if the radix is less than 35, '+/-Infinity' inputs are coerced to Long.ZERO\n     * - other invalid characters sequences have variable behavior\n     * @param str - The textual representation of the Long\n     * @param unsigned - Whether unsigned or not, defaults to signed\n     * @returns The corresponding Long value\n     */\n    static fromString(str: string, unsigned?: boolean): Long;\n    /**\n     * Returns a Long representation of the given string, written using the specified radix.\n     *\n     * If the input string is empty or a provided radix is not within (2-36), this function will throw a BSONError.\n     *\n     * If input parameters do not have a valid 64-bit Long representation, this method will return a coerced value:\n     * - inputs that overflow 64-bit long will be coerced to max or min (if signed) values\n     * - if the radix is less than 24, 'NaN' is coerced to Long.ZERO\n     * - if the radix is less than 35, '+/-Infinity' inputs are coerced to Long.ZERO\n     * - other invalid characters sequences have variable behavior\n     * @param str - The textual representation of the Long\n     * @param unsigned - Whether unsigned or not, defaults to signed\n     * @param radix - The radix in which the text is written (2-36), defaults to 10\n     * @returns The corresponding Long value\n     */\n    static fromString(str: string, unsigned?: boolean, radix?: number): Long;\n    /**\n     * Creates a Long from its byte representation.\n     * @param bytes - Byte representation\n     * @param unsigned - Whether unsigned or not, defaults to signed\n     * @param le - Whether little or big endian, defaults to big endian\n     * @returns The corresponding Long value\n     */\n    static fromBytes(bytes: number[], unsigned?: boolean, le?: boolean): Long;\n    /**\n     * Creates a Long from its little endian byte representation.\n     * @param bytes - Little endian byte representation\n     * @param unsigned - Whether unsigned or not, defaults to signed\n     * @returns The corresponding Long value\n     */\n    static fromBytesLE(bytes: number[], unsigned?: boolean): Long;\n    /**\n     * Creates a Long from its big endian byte representation.\n     * @param bytes - Big endian byte representation\n     * @param unsigned - Whether unsigned or not, defaults to signed\n     * @returns The corresponding Long value\n     */\n    static fromBytesBE(bytes: number[], unsigned?: boolean): Long;\n    /**\n     * Tests if the specified object is a Long.\n     */\n    static isLong(value: unknown): value is Long;\n    /**\n     * Converts the specified value to a Long.\n     * @param unsigned - Whether unsigned or not, defaults to signed\n     */\n    static fromValue(val: number | string | {\n        low: number;\n        high: number;\n        unsigned?: boolean;\n    }, unsigned?: boolean): Long;\n    /** Returns the sum of this and the specified Long. */\n    add(addend: string | number | Long | Timestamp): Long;\n    /**\n     * Returns the sum of this and the specified Long.\n     * @returns Sum\n     */\n    and(other: string | number | Long | Timestamp): Long;\n    /**\n     * Compares this Long's value with the specified's.\n     * @returns 0 if they are the same, 1 if the this is greater and -1 if the given one is greater\n     */\n    compare(other: string | number | Long | Timestamp): 0 | 1 | -1;\n    /** This is an alias of {@link Long.compare} */\n    comp(other: string | number | Long | Timestamp): 0 | 1 | -1;\n    /**\n     * Returns this Long divided by the specified. The result is signed if this Long is signed or unsigned if this Long is unsigned.\n     * @returns Quotient\n     */\n    divide(divisor: string | number | Long | Timestamp): Long;\n    /**This is an alias of {@link Long.divide} */\n    div(divisor: string | number | Long | Timestamp): Long;\n    /**\n     * Tests if this Long's value equals the specified's.\n     * @param other - Other value\n     */\n    equals(other: string | number | Long | Timestamp): boolean;\n    /** This is an alias of {@link Long.equals} */\n    eq(other: string | number | Long | Timestamp): boolean;\n    /** Gets the high 32 bits as a signed integer. */\n    getHighBits(): number;\n    /** Gets the high 32 bits as an unsigned integer. */\n    getHighBitsUnsigned(): number;\n    /** Gets the low 32 bits as a signed integer. */\n    getLowBits(): number;\n    /** Gets the low 32 bits as an unsigned integer. */\n    getLowBitsUnsigned(): number;\n    /** Gets the number of bits needed to represent the absolute value of this Long. */\n    getNumBitsAbs(): number;\n    /** Tests if this Long's value is greater than the specified's. */\n    greaterThan(other: string | number | Long | Timestamp): boolean;\n    /** This is an alias of {@link Long.greaterThan} */\n    gt(other: string | number | Long | Timestamp): boolean;\n    /** Tests if this Long's value is greater than or equal the specified's. */\n    greaterThanOrEqual(other: string | number | Long | Timestamp): boolean;\n    /** This is an alias of {@link Long.greaterThanOrEqual} */\n    gte(other: string | number | Long | Timestamp): boolean;\n    /** This is an alias of {@link Long.greaterThanOrEqual} */\n    ge(other: string | number | Long | Timestamp): boolean;\n    /** Tests if this Long's value is even. */\n    isEven(): boolean;\n    /** Tests if this Long's value is negative. */\n    isNegative(): boolean;\n    /** Tests if this Long's value is odd. */\n    isOdd(): boolean;\n    /** Tests if this Long's value is positive. */\n    isPositive(): boolean;\n    /** Tests if this Long's value equals zero. */\n    isZero(): boolean;\n    /** Tests if this Long's value is less than the specified's. */\n    lessThan(other: string | number | Long | Timestamp): boolean;\n    /** This is an alias of {@link Long#lessThan}. */\n    lt(other: string | number | Long | Timestamp): boolean;\n    /** Tests if this Long's value is less than or equal the specified's. */\n    lessThanOrEqual(other: string | number | Long | Timestamp): boolean;\n    /** This is an alias of {@link Long.lessThanOrEqual} */\n    lte(other: string | number | Long | Timestamp): boolean;\n    /** Returns this Long modulo the specified. */\n    modulo(divisor: string | number | Long | Timestamp): Long;\n    /** This is an alias of {@link Long.modulo} */\n    mod(divisor: string | number | Long | Timestamp): Long;\n    /** This is an alias of {@link Long.modulo} */\n    rem(divisor: string | number | Long | Timestamp): Long;\n    /**\n     * Returns the product of this and the specified Long.\n     * @param multiplier - Multiplier\n     * @returns Product\n     */\n    multiply(multiplier: string | number | Long | Timestamp): Long;\n    /** This is an alias of {@link Long.multiply} */\n    mul(multiplier: string | number | Long | Timestamp): Long;\n    /** Returns the Negation of this Long's value. */\n    negate(): Long;\n    /** This is an alias of {@link Long.negate} */\n    neg(): Long;\n    /** Returns the bitwise NOT of this Long. */\n    not(): Long;\n    /** Tests if this Long's value differs from the specified's. */\n    notEquals(other: string | number | Long | Timestamp): boolean;\n    /** This is an alias of {@link Long.notEquals} */\n    neq(other: string | number | Long | Timestamp): boolean;\n    /** This is an alias of {@link Long.notEquals} */\n    ne(other: string | number | Long | Timestamp): boolean;\n    /**\n     * Returns the bitwise OR of this Long and the specified.\n     */\n    or(other: number | string | Long): Long;\n    /**\n     * Returns this Long with bits shifted to the left by the given amount.\n     * @param numBits - Number of bits\n     * @returns Shifted Long\n     */\n    shiftLeft(numBits: number | Long): Long;\n    /** This is an alias of {@link Long.shiftLeft} */\n    shl(numBits: number | Long): Long;\n    /**\n     * Returns this Long with bits arithmetically shifted to the right by the given amount.\n     * @param numBits - Number of bits\n     * @returns Shifted Long\n     */\n    shiftRight(numBits: number | Long): Long;\n    /** This is an alias of {@link Long.shiftRight} */\n    shr(numBits: number | Long): Long;\n    /**\n     * Returns this Long with bits logically shifted to the right by the given amount.\n     * @param numBits - Number of bits\n     * @returns Shifted Long\n     */\n    shiftRightUnsigned(numBits: Long | number): Long;\n    /** This is an alias of {@link Long.shiftRightUnsigned} */\n    shr_u(numBits: number | Long): Long;\n    /** This is an alias of {@link Long.shiftRightUnsigned} */\n    shru(numBits: number | Long): Long;\n    /**\n     * Returns the difference of this and the specified Long.\n     * @param subtrahend - Subtrahend\n     * @returns Difference\n     */\n    subtract(subtrahend: string | number | Long | Timestamp): Long;\n    /** This is an alias of {@link Long.subtract} */\n    sub(subtrahend: string | number | Long | Timestamp): Long;\n    /** Converts the Long to a 32 bit integer, assuming it is a 32 bit integer. */\n    toInt(): number;\n    /** Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa). */\n    toNumber(): number;\n    /** Converts the Long to a BigInt (arbitrary precision). */\n    toBigInt(): bigint;\n    /**\n     * Converts this Long to its byte representation.\n     * @param le - Whether little or big endian, defaults to big endian\n     * @returns Byte representation\n     */\n    toBytes(le?: boolean): number[];\n    /**\n     * Converts this Long to its little endian byte representation.\n     * @returns Little endian byte representation\n     */\n    toBytesLE(): number[];\n    /**\n     * Converts this Long to its big endian byte representation.\n     * @returns Big endian byte representation\n     */\n    toBytesBE(): number[];\n    /**\n     * Converts this Long to signed.\n     */\n    toSigned(): Long;\n    /**\n     * Converts the Long to a string written in the specified radix.\n     * @param radix - Radix (2-36), defaults to 10\n     * @throws RangeError If `radix` is out of range\n     */\n    toString(radix?: number): string;\n    /** Converts this Long to unsigned. */\n    toUnsigned(): Long;\n    /** Returns the bitwise XOR of this Long and the given one. */\n    xor(other: Long | number | string): Long;\n    /** This is an alias of {@link Long.isZero} */\n    eqz(): boolean;\n    /** This is an alias of {@link Long.lessThanOrEqual} */\n    le(other: string | number | Long | Timestamp): boolean;\n    toExtendedJSON(options?: EJSONOptions): number | LongExtended;\n    static fromExtendedJSON(doc: {\n        $numberLong: string;\n    }, options?: EJSONOptions): number | Long | bigint;\n    inspect(depth?: number, options?: unknown, inspect?: InspectFn): string;\n}\n\n/** @public */\nexport declare interface LongExtended {\n    $numberLong: string;\n}\n\n/** @public */\nexport declare type LongWithoutOverrides = new (low: unknown, high?: number | boolean, unsigned?: boolean) => {\n    [P in Exclude<keyof Long, TimestampOverrides>]: Long[P];\n};\n\n/** @public */\nexport declare const LongWithoutOverridesClass: LongWithoutOverrides;\n\n/**\n * A class representation of the BSON MaxKey type.\n * @public\n * @category BSONType\n */\nexport declare class MaxKey extends BSONValue {\n    get _bsontype(): 'MaxKey';\n    /* Excluded from this release type: toExtendedJSON */\n    /* Excluded from this release type: fromExtendedJSON */\n    inspect(): string;\n}\n\n/** @public */\nexport declare interface MaxKeyExtended {\n    $maxKey: 1;\n}\n\n/**\n * A class representation of the BSON MinKey type.\n * @public\n * @category BSONType\n */\nexport declare class MinKey extends BSONValue {\n    get _bsontype(): 'MinKey';\n    /* Excluded from this release type: toExtendedJSON */\n    /* Excluded from this release type: fromExtendedJSON */\n    inspect(): string;\n}\n\n/** @public */\nexport declare interface MinKeyExtended {\n    $minKey: 1;\n}\n\n/**\n * @experimental\n * @public\n *\n * A collection of functions that get or set various numeric types and bit widths from a Uint8Array.\n */\ndeclare type NumberUtils = {\n    /** Is true if the current system is big endian. */\n    isBigEndian: boolean;\n    /**\n     * Parses a signed int32 at offset. Throws a `RangeError` if value is negative.\n     */\n    getNonnegativeInt32LE: (source: Uint8Array, offset: number) => number;\n    getInt32LE: (source: Uint8Array, offset: number) => number;\n    getUint32LE: (source: Uint8Array, offset: number) => number;\n    getUint32BE: (source: Uint8Array, offset: number) => number;\n    getBigInt64LE: (source: Uint8Array, offset: number) => bigint;\n    getFloat64LE: (source: Uint8Array, offset: number) => number;\n    setInt32BE: (destination: Uint8Array, offset: number, value: number) => 4;\n    setInt32LE: (destination: Uint8Array, offset: number, value: number) => 4;\n    setBigInt64LE: (destination: Uint8Array, offset: number, value: bigint) => 8;\n    setFloat64LE: (destination: Uint8Array, offset: number, value: number) => 8;\n};\n\n/**\n * Number parsing and serializing utilities.\n *\n * @experimental\n * @public\n */\ndeclare const NumberUtils: NumberUtils;\n\n/**\n * A class representation of the BSON ObjectId type.\n * @public\n * @category BSONType\n */\nexport declare class ObjectId extends BSONValue {\n    get _bsontype(): 'ObjectId';\n    /* Excluded from this release type: index */\n    static cacheHexString: boolean;\n    /* Excluded from this release type: buffer */\n    /**\n     * Create ObjectId from a number.\n     *\n     * @param inputId - A number.\n     * @deprecated Instead, use `static createFromTime()` to set a numeric value for the new ObjectId.\n     */\n    constructor(inputId: number);\n    /**\n     * Create ObjectId from a 24 character hex string.\n     *\n     * @param inputId - A 24 character hex string.\n     */\n    constructor(inputId: string);\n    /**\n     * Create ObjectId from the BSON ObjectId type.\n     *\n     * @param inputId - The BSON ObjectId type.\n     */\n    constructor(inputId: ObjectId);\n    /**\n     * Create ObjectId from the object type that has the toHexString method.\n     *\n     * @param inputId - The ObjectIdLike type.\n     */\n    constructor(inputId: ObjectIdLike);\n    /**\n     * Create ObjectId from a 12 byte binary Buffer.\n     *\n     * @param inputId - A 12 byte binary Buffer.\n     */\n    constructor(inputId: Uint8Array);\n    /** To generate a new ObjectId, use ObjectId() with no argument. */\n    constructor();\n    /**\n     * Implementation overload.\n     *\n     * @param inputId - All input types that are used in the constructor implementation.\n     */\n    constructor(inputId?: string | number | ObjectId | ObjectIdLike | Uint8Array);\n    /**\n     * The ObjectId bytes\n     * @readonly\n     */\n    get id(): Uint8Array;\n    set id(value: Uint8Array);\n    /* Excluded from this release type: validateHexString */\n    /** Returns the ObjectId id as a 24 lowercase character hex string representation */\n    toHexString(): string;\n    /* Excluded from this release type: getInc */\n    /**\n     * Generate a 12 byte id buffer used in ObjectId's\n     *\n     * @param time - pass in a second based timestamp.\n     */\n    static generate(time?: number): Uint8Array;\n    /**\n     * Converts the id into a 24 character hex string for printing, unless encoding is provided.\n     * @param encoding - hex or base64\n     */\n    toString(encoding?: 'hex' | 'base64'): string;\n    /** Converts to its JSON the 24 character hex string representation. */\n    toJSON(): string;\n    /* Excluded from this release type: is */\n    /**\n     * Compares the equality of this ObjectId with `otherID`.\n     *\n     * @param otherId - ObjectId instance to compare against.\n     */\n    equals(otherId: string | ObjectId | ObjectIdLike | undefined | null): boolean;\n    /** Returns the generation date (accurate up to the second) that this ID was generated. */\n    getTimestamp(): Date;\n    /* Excluded from this release type: createPk */\n    /* Excluded from this release type: serializeInto */\n    /**\n     * Creates an ObjectId from a second based number, with the rest of the ObjectId zeroed out. Used for comparisons or sorting the ObjectId.\n     *\n     * @param time - an integer number representing a number of seconds.\n     */\n    static createFromTime(time: number): ObjectId;\n    /**\n     * Creates an ObjectId from a hex string representation of an ObjectId.\n     *\n     * @param hexString - create a ObjectId from a passed in 24 character hexstring.\n     */\n    static createFromHexString(hexString: string): ObjectId;\n    /** Creates an ObjectId instance from a base64 string */\n    static createFromBase64(base64: string): ObjectId;\n    /**\n     * Checks if a value can be used to create a valid bson ObjectId\n     * @param id - any JS value\n     */\n    static isValid(id: string | number | ObjectId | ObjectIdLike | Uint8Array): boolean;\n    /* Excluded from this release type: toExtendedJSON */\n    /* Excluded from this release type: fromExtendedJSON */\n    /* Excluded from this release type: isCached */\n    /**\n     * Converts to a string representation of this Id.\n     *\n     * @returns return the 24 character hex string representation.\n     */\n    inspect(depth?: number, options?: unknown, inspect?: InspectFn): string;\n}\n\n/** @public */\nexport declare interface ObjectIdExtended {\n    $oid: string;\n}\n\n/** @public */\nexport declare interface ObjectIdLike {\n    id: string | Uint8Array;\n    __id?: string;\n    toHexString(): string;\n}\n\n/**\n * @experimental\n * @public\n *\n * A new set of BSON APIs that are currently experimental and not intended for production use.\n */\nexport declare type OnDemand = {\n    parseToElements: (this: void, bytes: Uint8Array, startOffset?: number) => Iterable<BSONElement>;\n    BSONElement: BSONElement;\n    ByteUtils: ByteUtils;\n    NumberUtils: NumberUtils;\n};\n\n/**\n * @experimental\n * @public\n */\nexport declare const onDemand: OnDemand;\n\n/**\n * Parse an Extended JSON string, constructing the JavaScript value or object described by that\n * string.\n *\n * @example\n * ```js\n * const { EJSON } = require('/bson.ts');\n * const text = '{ \"int32\": { \"$numberInt\": \"10\" } }';\n *\n * // prints { int32: { [String: '10'] _bsontype: 'Int32', value: '10' } }\n * console.log(EJSON.parse(text, { relaxed: false }));\n *\n * // prints { int32: 10 }\n * console.log(EJSON.parse(text));\n * ```\n */\ndeclare function parse(text: string, options?: EJSONOptions): any;\n\n/**\n * Serialize a Javascript object.\n *\n * @param object - the Javascript object to serialize.\n * @returns Buffer object containing the serialized object.\n * @public\n */\nexport declare function serialize(object: Document, options?: SerializeOptions): Uint8Array;\n\n/** @public */\nexport declare interface SerializeOptions {\n    /**\n     * the serializer will check if keys are valid.\n     * @defaultValue `false`\n     */\n    checkKeys?: boolean;\n    /**\n     * serialize the javascript functions\n     * @defaultValue `false`\n     */\n    serializeFunctions?: boolean;\n    /**\n     * serialize will not emit undefined fields\n     * note that the driver sets this to `false`\n     * @defaultValue `true`\n     */\n    ignoreUndefined?: boolean;\n    /* Excluded from this release type: minInternalBufferSize */\n    /**\n     * the index in the buffer where we wish to start serializing into\n     * @defaultValue `0`\n     */\n    index?: number;\n}\n\n/**\n * Serialize a Javascript object using a predefined Buffer and index into the buffer,\n * useful when pre-allocating the space for serialization.\n *\n * @param object - the Javascript object to serialize.\n * @param finalBuffer - the Buffer you pre-allocated to store the serialized BSON object.\n * @returns the index pointing to the last written byte in the buffer.\n * @public\n */\nexport declare function serializeWithBufferAndIndex(object: Document, finalBuffer: Uint8Array, options?: SerializeOptions): number;\n\n/**\n * Sets the size of the internal serialization buffer.\n *\n * @param size - The desired size for the internal serialization buffer in bytes\n * @public\n */\nexport declare function setInternalBufferSize(size: number): void;\n\n/**\n * Converts a BSON document to an Extended JSON string, optionally replacing values if a replacer\n * function is specified or optionally including only the specified properties if a replacer array\n * is specified.\n *\n * @param value - The value to convert to extended JSON\n * @param replacer - A function that alters the behavior of the stringification process, or an array of String and Number objects that serve as a whitelist for selecting/filtering the properties of the value object to be included in the JSON string. If this value is null or not provided, all properties of the object are included in the resulting JSON string\n * @param space - A String or Number object that's used to insert white space into the output JSON string for readability purposes.\n * @param options - Optional settings\n *\n * @example\n * ```js\n * const { EJSON } = require('/bson.ts');\n * const Int32 = require('/mongodb.ts').Int32;\n * const doc = { int32: new Int32(10) };\n *\n * // prints '{\"int32\":{\"$numberInt\":\"10\"}}'\n * console.log(EJSON.stringify(doc, { relaxed: false }));\n *\n * // prints '{\"int32\":10}'\n * console.log(EJSON.stringify(doc));\n * ```\n */\ndeclare function stringify(value: any, replacer?: (number | string)[] | ((this: any, key: string, value: any) => any) | EJSONOptions, space?: string | number, options?: EJSONOptions): string;\n\n/**\n * @public\n * @category BSONType\n *\n * A special type for _internal_ MongoDB use and is **not** associated with the regular Date type.\n */\nexport declare class Timestamp extends LongWithoutOverridesClass {\n    get _bsontype(): 'Timestamp';\n    static readonly MAX_VALUE: Long;\n    /**\n     * An incrementing ordinal for operations within a given second.\n     */\n    get i(): number;\n    /**\n     * A `time_t` value measuring seconds since the Unix epoch\n     */\n    get t(): number;\n    /**\n     * @param int - A 64-bit bigint representing the Timestamp.\n     */\n    constructor(int: bigint);\n    /**\n     * @param long - A 64-bit Long representing the Timestamp.\n     */\n    constructor(long: Long);\n    /**\n     * @param value - A pair of two values indicating timestamp and increment.\n     */\n    constructor(value: {\n        t: number;\n        i: number;\n    });\n    toJSON(): {\n        $timestamp: string;\n    };\n    /** Returns a Timestamp represented by the given (32-bit) integer value. */\n    static fromInt(value: number): Timestamp;\n    /** Returns a Timestamp representing the given number value, provided that it is a finite number. Otherwise, zero is returned. */\n    static fromNumber(value: number): Timestamp;\n    /**\n     * Returns a Timestamp for the given high and low bits. Each is assumed to use 32 bits.\n     *\n     * @param lowBits - the low 32-bits.\n     * @param highBits - the high 32-bits.\n     */\n    static fromBits(lowBits: number, highBits: number): Timestamp;\n    /**\n     * Returns a Timestamp from the given string, optionally using the given radix.\n     *\n     * @param str - the textual representation of the Timestamp.\n     * @param optRadix - the radix in which the text is written.\n     */\n    static fromString(str: string, optRadix: number): Timestamp;\n    /* Excluded from this release type: toExtendedJSON */\n    /* Excluded from this release type: fromExtendedJSON */\n    inspect(depth?: number, options?: unknown, inspect?: InspectFn): string;\n}\n\n/** @public */\nexport declare interface TimestampExtended {\n    $timestamp: {\n        t: number;\n        i: number;\n    };\n}\n\n/** @public */\nexport declare type TimestampOverrides = '_bsontype' | 'toExtendedJSON' | 'fromExtendedJSON' | 'inspect';\n\n/**\n * A class representation of the BSON UUID type.\n * @public\n */\nexport declare class UUID extends Binary {\n    /**\n     * Create a UUID type\n     *\n     * When the argument to the constructor is omitted a random v4 UUID will be generated.\n     *\n     * @param input - Can be a 32 or 36 character hex string (dashes excluded/included) or a 16 byte binary Buffer.\n     */\n    constructor(input?: string | Uint8Array | UUID);\n    /**\n     * The UUID bytes\n     * @readonly\n     */\n    get id(): Uint8Array;\n    set id(value: Uint8Array);\n    /**\n     * Returns the UUID id as a 32 or 36 character hex string representation, excluding/including dashes (defaults to 36 character dash separated)\n     * @param includeDashes - should the string exclude dash-separators.\n     */\n    toHexString(includeDashes?: boolean): string;\n    /**\n     * Converts the id into a 36 character (dashes included) hex string, unless a encoding is specified.\n     */\n    toString(encoding?: 'hex' | 'base64'): string;\n    /**\n     * Converts the id into its JSON string representation.\n     * A 36 character (dashes included) hex string in the format: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n     */\n    toJSON(): string;\n    /**\n     * Compares the equality of this UUID with `otherID`.\n     *\n     * @param otherId - UUID instance to compare against.\n     */\n    equals(otherId: string | Uint8Array | UUID): boolean;\n    /**\n     * Creates a Binary instance from the current UUID.\n     */\n    toBinary(): Binary;\n    /**\n     * Generates a populated buffer containing a v4 uuid\n     */\n    static generate(): Uint8Array;\n    /**\n     * Checks if a value is a valid bson UUID\n     * @param input - UUID, string or Buffer to validate.\n     */\n    static isValid(input: string | Uint8Array | UUID | Binary): boolean;\n    /**\n     * Creates an UUID from a hex string representation of an UUID.\n     * @param hexString - 32 or 36 character hex string (dashes excluded/included).\n     */\n    static createFromHexString(hexString: string): UUID;\n    /** Creates an UUID from a base64 string representation of an UUID. */\n    static createFromBase64(base64: string): UUID;\n    /* Excluded from this release type: bytesFromString */\n    /* Excluded from this release type: isValidUUIDString */\n    /**\n     * Converts to a string representation of this Id.\n     *\n     * @returns return the 36 character hex string representation.\n     *\n     */\n    inspect(depth?: number, options?: unknown, inspect?: InspectFn): string;\n}\n\n/** @public */\nexport declare type UUIDExtended = {\n    $uuid: string;\n};\n\nexport { }\n",
  '/mongodb.ts':
    "import type { DeserializeOptions } from '/bson.ts';\nimport type { ObjectIdLike } from '/bson.ts';\nimport type { SerializeOptions } from '/bson.ts';\nimport { Binary } from '/bson.ts';\nimport { BSON } from '/bson.ts';\nimport { BSONRegExp } from '/bson.ts';\nimport { BSONSymbol } from '/bson.ts';\nimport { BSONType } from '/bson.ts';\nimport { Code } from '/bson.ts';\nimport { DBRef } from '/bson.ts';\nimport { Decimal128 } from '/bson.ts';\nimport { deserialize } from '/bson.ts';\nimport { Document } from '/bson.ts';\nimport { Double } from '/bson.ts';\nimport { Int32 } from '/bson.ts';\nimport { Long } from '/bson.ts';\nimport { MaxKey } from '/bson.ts';\nimport { MinKey } from '/bson.ts';\nimport { ObjectId } from '/bson.ts';\nimport { serialize } from '/bson.ts';\nimport { Timestamp } from '/bson.ts';\nimport { UUID } from '/bson.ts';\nimport type { SrvRecord } from 'dns';\nimport { EventEmitter } from 'events';\nimport type { Socket } from 'net';\nimport type { TcpNetConnectOpts } from 'net';\nimport { Readable } from 'stream';\nimport { Writable } from 'stream';\nimport type { ConnectionOptions as ConnectionOptions_2 } from 'tls';\nimport type { TLSSocket } from 'tls';\nimport type { TLSSocketOptions } from 'tls';\n\n/** @public */\nexport declare type Abortable = {\n    /**\n     * @experimental\n     * When provided, the corresponding `AbortController` can be used to abort an asynchronous action.\n     *\n     * The `signal.reason` value is used as the error thrown.\n     *\n     * @remarks\n     * **NOTE:** If an abort signal aborts an operation while the driver is writing to the underlying\n     * socket or reading the response from the server, the socket will be closed.\n     * If signals are aborted at a high rate during socket read/writes this can lead to a high rate of connection reestablishment.\n     *\n     * We plan to mitigate this in a future release, please follow NODE-6062 (`timeoutMS` expiration suffers the same limitation).\n     *\n     * AbortSignals are likely a best fit for human interactive interruption (ex. ctrl-C) where the frequency\n     * of cancellation is reasonably low. If a signal is programmatically aborted for 100s of operations you can empty\n     * the driver's connection pool.\n     *\n     * @example\n     * ```js\n     * const controller = new AbortController();\n     * const { signal } = controller;\n     * process.on('SIGINT', () => controller.abort(new Error('^C pressed')));\n     *\n     * try {\n     *   const res = await fetch('...', { signal });\n     *   await collection.findOne(await res.json(), { signal });\n     * catch (error) {\n     *   if (error === signal.reason) {\n     *     // signal abort error handling\n     *   }\n     * }\n     * ```\n     */\n    signal?: AbortSignal | undefined;\n};\n\n/** @public */\nexport declare abstract class AbstractCursor<TSchema = any, CursorEvents extends AbstractCursorEvents = AbstractCursorEvents> extends TypedEventEmitter<CursorEvents> implements AsyncDisposable_2 {\n    /* Excluded from this release type: cursorId */\n    /* Excluded from this release type: cursorSession */\n    /* Excluded from this release type: selectedServer */\n    /* Excluded from this release type: cursorNamespace */\n    /* Excluded from this release type: documents */\n    /* Excluded from this release type: cursorClient */\n    /* Excluded from this release type: transform */\n    /* Excluded from this release type: initialized */\n    /* Excluded from this release type: isClosed */\n    /* Excluded from this release type: isKilled */\n    /* Excluded from this release type: cursorOptions */\n    /* Excluded from this release type: timeoutContext */\n    /** @event */\n    static readonly CLOSE: \"close\";\n    /* Excluded from this release type: deserializationOptions */\n    protected signal: AbortSignal | undefined;\n    private abortListener;\n    /* Excluded from this release type: __constructor */\n    /**\n     * The cursor has no id until it receives a response from the initial cursor creating command.\n     *\n     * It is non-zero for as long as the database has an open cursor.\n     *\n     * The initiating command may receive a zero id if the entire result is in the `firstBatch`.\n     */\n    get id(): Long | undefined;\n    /* Excluded from this release type: isDead */\n    /* Excluded from this release type: client */\n    /* Excluded from this release type: server */\n    get namespace(): MongoDBNamespace;\n    get readPreference(): ReadPreference;\n    get readConcern(): ReadConcern | undefined;\n    /* Excluded from this release type: session */\n    /* Excluded from this release type: session */\n    /**\n     * The cursor is closed and all remaining locally buffered documents have been iterated.\n     */\n    get closed(): boolean;\n    /**\n     * A `killCursors` command was attempted on this cursor.\n     * This is performed if the cursor id is non zero.\n     */\n    get killed(): boolean;\n    get loadBalanced(): boolean;\n    /* Excluded from this release type: [Symbol.asyncDispose] */\n    /* Excluded from this release type: asyncDispose */\n    /** Adds cursor to client's tracking so it will be closed by MongoClient.close() */\n    private trackCursor;\n    /** Returns current buffered documents length */\n    bufferedCount(): number;\n    /** Returns current buffered documents */\n    readBufferedDocuments(number?: number): NonNullable<TSchema>[];\n    [Symbol.asyncIterator](): AsyncGenerator<TSchema, void, void>;\n    stream(options?: CursorStreamOptions): Readable & AsyncIterable<TSchema>;\n    hasNext(): Promise<boolean>;\n    /** Get the next available document from the cursor, returns null if no more documents are available. */\n    next(): Promise<TSchema | null>;\n    /**\n     * Try to get the next available document from the cursor or `null` if an empty batch is returned\n     */\n    tryNext(): Promise<TSchema | null>;\n    /**\n     * Iterates over all the documents for this cursor using the iterator, callback pattern.\n     *\n     * If the iterator returns `false`, iteration will stop.\n     *\n     * @param iterator - The iteration callback.\n     * @deprecated - Will be removed in a future release. Use for await...of instead.\n     */\n    forEach(iterator: (doc: TSchema) => boolean | void): Promise<void>;\n    /**\n     * Frees any client-side resources used by the cursor.\n     */\n    close(options?: {\n        timeoutMS?: number;\n    }): Promise<void>;\n    /**\n     * Returns an array of documents. The caller is responsible for making sure that there\n     * is enough memory to store the results. Note that the array only contains partial\n     * results when this cursor had been previously accessed. In that case,\n     * cursor.rewind() can be used to reset the cursor.\n     */\n    toArray(): Promise<TSchema[]>;\n    /**\n     * Add a cursor flag to the cursor\n     *\n     * @param flag - The flag to set, must be one of following ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial' -.\n     * @param value - The flag boolean value.\n     */\n    addCursorFlag(flag: CursorFlag, value: boolean): this;\n    /**\n     * Map all documents using the provided function\n     * If there is a transform set on the cursor, that will be called first and the result passed to\n     * this function's transform.\n     *\n     * @remarks\n     *\n     * **Note** Cursors use `null` internally to indicate that there are no more documents in the cursor. Providing a mapping\n     * function that maps values to `null` will result in the cursor closing itself before it has finished iterating\n     * all documents.  This will **not** result in a memory leak, just surprising behavior.  For example:\n     *\n     * ```typescript\n     * const cursor = collection.find({});\n     * cursor.map(() => null);\n     *\n     * const documents = await cursor.toArray();\n     * // documents is always [], regardless of how many documents are in the collection.\n     * ```\n     *\n     * Other falsey values are allowed:\n     *\n     * ```typescript\n     * const cursor = collection.find({});\n     * cursor.map(() => '');\n     *\n     * const documents = await cursor.toArray();\n     * // documents is now an array of empty strings\n     * ```\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling map,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: FindCursor<Document> = coll.find();\n     * const mappedCursor: FindCursor<number> = cursor.map(doc => Object.keys(doc).length);\n     * const keyCounts: number[] = await mappedCursor.toArray(); // cursor.toArray() still returns Document[]\n     * ```\n     * @param transform - The mapping transformation method.\n     */\n    map<T = any>(transform: (doc: TSchema) => T): AbstractCursor<T>;\n    /**\n     * Set the ReadPreference for the cursor.\n     *\n     * @param readPreference - The new read preference for the cursor.\n     */\n    withReadPreference(readPreference: ReadPreferenceLike): this;\n    /**\n     * Set the ReadPreference for the cursor.\n     *\n     * @param readPreference - The new read preference for the cursor.\n     */\n    withReadConcern(readConcern: ReadConcernLike): this;\n    /**\n     * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n     *\n     * @param value - Number of milliseconds to wait before aborting the query.\n     */\n    maxTimeMS(value: number): this;\n    /**\n     * Set the batch size for the cursor.\n     *\n     * @param value - The number of documents to return per batch. See {@link https://www.mongodb.com/docs/manual/reference/command/find/|find command documentation}.\n     */\n    batchSize(value: number): this;\n    /**\n     * Rewind this cursor to its uninitialized state. Any options that are present on the cursor will\n     * remain in effect. Iterating this cursor will cause new queries to be sent to the server, even\n     * if the resultant data has already been retrieved by this cursor.\n     */\n    rewind(): void;\n    /**\n     * Returns a new uninitialized copy of this cursor, with options matching those that have been set on the current instance\n     */\n    abstract clone(): AbstractCursor<TSchema>;\n    /* Excluded from this release type: _initialize */\n    /* Excluded from this release type: getMore */\n    /* Excluded from this release type: cursorInit */\n    /* Excluded from this release type: fetchBatch */\n    /* Excluded from this release type: cleanup */\n    /* Excluded from this release type: hasEmittedClose */\n    /* Excluded from this release type: emitClose */\n    /* Excluded from this release type: transformDocument */\n    /* Excluded from this release type: throwIfInitialized */\n}\n\n/** @public */\nexport declare type AbstractCursorEvents = {\n    [AbstractCursor.CLOSE](): void;\n};\n\n/** @public */\nexport declare interface AbstractCursorOptions extends BSONSerializeOptions {\n    session?: ClientSession;\n    readPreference?: ReadPreferenceLike;\n    readConcern?: ReadConcernLike;\n    /**\n     * Specifies the number of documents to return in each response from MongoDB\n     */\n    batchSize?: number;\n    /**\n     * When applicable `maxTimeMS` controls the amount of time the initial command\n     * that constructs a cursor should take. (ex. find, aggregate, listCollections)\n     */\n    maxTimeMS?: number;\n    /**\n     * When applicable `maxAwaitTimeMS` controls the amount of time subsequent getMores\n     * that a cursor uses to fetch more data should take. (ex. cursor.next())\n     */\n    maxAwaitTimeMS?: number;\n    /**\n     * Comment to apply to the operation.\n     *\n     * In server versions pre-4.4, 'comment' must be string.  A server\n     * error will be thrown if any other type is provided.\n     *\n     * In server versions 4.4 and above, 'comment' can be any valid BSON type.\n     */\n    comment?: unknown;\n    /**\n     * By default, MongoDB will automatically close a cursor when the\n     * client has exhausted all results in the cursor. However, for [capped collections](https://www.mongodb.com/docs/manual/core/capped-collections)\n     * you may use a Tailable Cursor that remains open after the client exhausts\n     * the results in the initial cursor.\n     */\n    tailable?: boolean;\n    /**\n     * If awaitData is set to true, when the cursor reaches the end of the capped collection,\n     * MongoDB blocks the query thread for a period of time waiting for new data to arrive.\n     * When new data is inserted into the capped collection, the blocked thread is signaled\n     * to wake up and return the next batch to the client.\n     */\n    awaitData?: boolean;\n    noCursorTimeout?: boolean;\n    /** Specifies the time an operation will run until it throws a timeout error. See {@link AbstractCursorOptions.timeoutMode} for more details on how this option applies to cursors. */\n    timeoutMS?: number;\n    /**\n     * @public\n     * @experimental\n     * Specifies how `timeoutMS` is applied to the cursor. Can be either `'cursorLifeTime'` or `'iteration'`\n     * When set to `'iteration'`, the deadline specified by `timeoutMS` applies to each call of\n     * `cursor.next()`.\n     * When set to `'cursorLifetime'`, the deadline applies to the life of the entire cursor.\n     *\n     * Depending on the type of cursor being used, this option has different default values.\n     * For non-tailable cursors, this value defaults to `'cursorLifetime'`\n     * For tailable cursors, this value defaults to `'iteration'` since tailable cursors, by\n     * definition can have an arbitrarily long lifetime.\n     *\n     * @example\n     * ```ts\n     * const cursor = collection.find({}, {timeoutMS: 100, timeoutMode: 'iteration'});\n     * for await (const doc of cursor) {\n     *  // process doc\n     *  // This will throw a timeout error if any of the iterator's `next()` calls takes more than 100ms, but\n     *  // will continue to iterate successfully otherwise, regardless of the number of batches.\n     * }\n     * ```\n     *\n     * @example\n     * ```ts\n     * const cursor = collection.find({}, { timeoutMS: 1000, timeoutMode: 'cursorLifetime' });\n     * const docs = await cursor.toArray(); // This entire line will throw a timeout error if all batches are not fetched and returned within 1000ms.\n     * ```\n     */\n    timeoutMode?: CursorTimeoutMode;\n    /* Excluded from this release type: timeoutContext */\n}\n\n/* Excluded from this release type: AbstractOperation */\n\n/** @public */\nexport declare type AcceptedFields<TSchema, FieldType, AssignableType> = {\n    readonly [key in KeysOfAType<TSchema, FieldType>]?: AssignableType;\n};\n\n/** @public */\nexport declare type AddToSetOperators<Type> = {\n    $each?: Array<Flatten<Type>>;\n};\n\n/**\n * The **Admin** class is an internal class that allows convenient access to\n * the admin functionality and commands for MongoDB.\n *\n * **ADMIN Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from '/mongodb.ts';\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const admin = client.db().admin();\n * const dbInfo = await admin.listDatabases();\n * for (const db of dbInfo.databases) {\n *   console.log(db.name);\n * }\n * ```\n */\nexport declare class Admin {\n    /* Excluded from this release type: s */\n    /* Excluded from this release type: __constructor */\n    /**\n     * Execute a command\n     *\n     * The driver will ensure the following fields are attached to the command sent to the server:\n     * - `lsid` - sourced from an implicit session or options.session\n     * - `$readPreference` - defaults to primary or can be configured by options.readPreference\n     * - `$db` - sourced from the name of this database\n     *\n     * If the client has a serverApi setting:\n     * - `apiVersion`\n     * - `apiStrict`\n     * - `apiDeprecationErrors`\n     *\n     * When in a transaction:\n     * - `readConcern` - sourced from readConcern set on the TransactionOptions\n     * - `writeConcern` - sourced from writeConcern set on the TransactionOptions\n     *\n     * Attaching any of the above fields to the command will have no effect as the driver will overwrite the value.\n     *\n     * @param command - The command to execute\n     * @param options - Optional settings for the command\n     */\n    command(command: Document, options?: RunCommandOptions): Promise<Document>;\n    /**\n     * Retrieve the server build information\n     *\n     * @param options - Optional settings for the command\n     */\n    buildInfo(options?: CommandOperationOptions): Promise<Document>;\n    /**\n     * Retrieve the server build information\n     *\n     * @param options - Optional settings for the command\n     */\n    serverInfo(options?: CommandOperationOptions): Promise<Document>;\n    /**\n     * Retrieve this db's server status.\n     *\n     * @param options - Optional settings for the command\n     */\n    serverStatus(options?: CommandOperationOptions): Promise<Document>;\n    /**\n     * Ping the MongoDB server and retrieve results\n     *\n     * @param options - Optional settings for the command\n     */\n    ping(options?: CommandOperationOptions): Promise<Document>;\n    /**\n     * Remove a user from a database\n     *\n     * @param username - The username to remove\n     * @param options - Optional settings for the command\n     */\n    removeUser(username: string, options?: RemoveUserOptions): Promise<boolean>;\n    /**\n     * Validate an existing collection\n     *\n     * @param collectionName - The name of the collection to validate.\n     * @param options - Optional settings for the command\n     */\n    validateCollection(collectionName: string, options?: ValidateCollectionOptions): Promise<Document>;\n    /**\n     * List the available databases\n     *\n     * @param options - Optional settings for the command\n     */\n    listDatabases(options?: ListDatabasesOptions): Promise<ListDatabasesResult>;\n    /**\n     * Get ReplicaSet status\n     *\n     * @param options - Optional settings for the command\n     */\n    replSetGetStatus(options?: CommandOperationOptions): Promise<Document>;\n}\n\n/* Excluded from this release type: AdminPrivate */\n\n/* Excluded from this release type: AggregateOperation */\n\n/** @public */\nexport declare interface AggregateOptions extends Omit<CommandOperationOptions, 'explain'> {\n    /** allowDiskUse lets the server know if it can use disk to store temporary results for the aggregation (requires mongodb 2.6 \\>). */\n    allowDiskUse?: boolean;\n    /** The number of documents to return per batch. See [aggregation documentation](https://www.mongodb.com/docs/manual/reference/command/aggregate). */\n    batchSize?: number;\n    /** Allow driver to bypass schema validation. */\n    bypassDocumentValidation?: boolean;\n    /** Return the query as cursor, on 2.6 \\> it returns as a real cursor on pre 2.6 it returns as an emulated cursor. */\n    cursor?: Document;\n    /**\n     * Specifies a cumulative time limit in milliseconds for processing operations on the cursor. MongoDB interrupts the operation at the earliest following interrupt point.\n     */\n    maxTimeMS?: number;\n    /** The maximum amount of time for the server to wait on new documents to satisfy a tailable cursor query. */\n    maxAwaitTimeMS?: number;\n    /** Specify collation. */\n    collation?: CollationOptions;\n    /** Add an index selection hint to an aggregation command */\n    hint?: Hint;\n    /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n    let?: Document;\n    out?: string;\n    /**\n     * Specifies the verbosity mode for the explain output.\n     * @deprecated This API is deprecated in favor of `collection.aggregate().explain()`\n     * or `db.aggregate().explain()`.\n     */\n    explain?: ExplainOptions['explain'];\n    /* Excluded from this release type: timeoutMode */\n}\n\n/**\n * The **AggregationCursor** class is an internal class that embodies an aggregation cursor on MongoDB\n * allowing for iteration over the results returned from the underlying query. It supports\n * one by one document iteration, conversion to an array or can be iterated as a Node 4.X\n * or higher stream\n * @public\n */\nexport declare class AggregationCursor<TSchema = any> extends ExplainableCursor<TSchema> {\n    readonly pipeline: Document[];\n    /* Excluded from this release type: aggregateOptions */\n    /* Excluded from this release type: __constructor */\n    clone(): AggregationCursor<TSchema>;\n    map<T>(transform: (doc: TSchema) => T): AggregationCursor<T>;\n    /* Excluded from this release type: _initialize */\n    /** Execute the explain for the cursor */\n    explain(): Promise<Document>;\n    explain(verbosity: ExplainVerbosityLike | ExplainCommandOptions): Promise<Document>;\n    explain(options: {\n        timeoutMS?: number;\n    }): Promise<Document>;\n    explain(verbosity: ExplainVerbosityLike | ExplainCommandOptions, options: {\n        timeoutMS?: number;\n    }): Promise<Document>;\n    /** Add a stage to the aggregation pipeline\n     * @example\n     * ```\n     * const documents = await users.aggregate().addStage({ $match: { name: /Mike/ } }).toArray();\n     * ```\n     * @example\n     * ```\n     * const documents = await users.aggregate()\n     *   .addStage<{ name: string }>({ $project: { name: true } })\n     *   .toArray(); // type of documents is { name: string }[]\n     * ```\n     */\n    addStage(stage: Document): this;\n    addStage<T = Document>(stage: Document): AggregationCursor<T>;\n    /** Add a group stage to the aggregation pipeline */\n    group<T = TSchema>($group: Document): AggregationCursor<T>;\n    /** Add a limit stage to the aggregation pipeline */\n    limit($limit: number): this;\n    /** Add a match stage to the aggregation pipeline */\n    match($match: Document): this;\n    /** Add an out stage to the aggregation pipeline */\n    out($out: {\n        db: string;\n        coll: string;\n    } | string): this;\n    /**\n     * Add a project stage to the aggregation pipeline\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * By default chaining a projection to your cursor changes the returned type to the generic {@link Document} type.\n     * You should specify a parameterized type to have assertions on your final results.\n     *\n     * @example\n     * ```typescript\n     * // Best way\n     * const docs: AggregationCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * // Flexible way\n     * const docs: AggregationCursor<Document> = cursor.project({ _id: 0, a: true });\n     * ```\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling project,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: AggregationCursor<{ a: number; b: string }> = coll.aggregate([]);\n     * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n     *\n     * // or always use chaining and save the final cursor\n     *\n     * const cursor = coll.aggregate().project<{ a: string }>({\n     *   _id: 0,\n     *   a: { $convert: { input: '$a', to: 'string' }\n     * }});\n     * ```\n     */\n    project<T extends Document = Document>($project: Document): AggregationCursor<T>;\n    /** Add a lookup stage to the aggregation pipeline */\n    lookup($lookup: Document): this;\n    /** Add a redact stage to the aggregation pipeline */\n    redact($redact: Document): this;\n    /** Add a skip stage to the aggregation pipeline */\n    skip($skip: number): this;\n    /** Add a sort stage to the aggregation pipeline */\n    sort($sort: Sort): this;\n    /** Add a unwind stage to the aggregation pipeline */\n    unwind($unwind: Document | string): this;\n    /** Add a geoNear stage to the aggregation pipeline */\n    geoNear($geoNear: Document): this;\n}\n\n/** @public */\nexport declare interface AggregationCursorOptions extends AbstractCursorOptions, AggregateOptions {\n}\n\n/**\n * It is possible to search using alternative types in mongodb e.g.\n * string types can be searched using a regex in mongo\n * array types can be searched using their element type\n * @public\n */\nexport declare type AlternativeType<T> = T extends ReadonlyArray<infer U> ? T | RegExpOrString<U> : RegExpOrString<T>;\n\n/** @public */\nexport declare type AnyBulkWriteOperation<TSchema extends Document = Document> = {\n    insertOne: InsertOneModel<TSchema>;\n} | {\n    replaceOne: ReplaceOneModel<TSchema>;\n} | {\n    updateOne: UpdateOneModel<TSchema>;\n} | {\n    updateMany: UpdateManyModel<TSchema>;\n} | {\n    deleteOne: DeleteOneModel<TSchema>;\n} | {\n    deleteMany: DeleteManyModel<TSchema>;\n};\n\n/**\n * Used to represent any of the client bulk write models that can be passed as an array\n * to MongoClient#bulkWrite.\n * @public\n */\nexport declare type AnyClientBulkWriteModel<TSchema extends Document> = ClientInsertOneModel<TSchema> | ClientReplaceOneModel<TSchema> | ClientUpdateOneModel<TSchema> | ClientUpdateManyModel<TSchema> | ClientDeleteOneModel<TSchema> | ClientDeleteManyModel<TSchema>;\n\n/** @public */\nexport declare type AnyError = MongoError | Error;\n\n/** @public */\nexport declare type ArrayElement<Type> = Type extends ReadonlyArray<infer Item> ? Item : never;\n\n/** @public */\nexport declare type ArrayOperator<Type> = {\n    $each?: Array<Flatten<Type>>;\n    $slice?: number;\n    $position?: number;\n    $sort?: Sort;\n};\n\n/**\n * @public\n */\ndeclare interface AsyncDisposable_2 {\n    /* Excluded from this release type: [Symbol.asyncDispose] */\n    /* Excluded from this release type: asyncDispose */\n}\nexport { AsyncDisposable_2 as AsyncDisposable }\n\n/** @public */\nexport declare interface Auth {\n    /** The username for auth */\n    username?: string;\n    /** The password for auth */\n    password?: string;\n}\n\n/* Excluded from this release type: AuthContext */\n\n/** @public */\nexport declare const AuthMechanism: Readonly<{\n    readonly MONGODB_AWS: \"MONGODB-AWS\";\n    readonly MONGODB_CR: \"MONGODB-CR\";\n    readonly MONGODB_DEFAULT: \"DEFAULT\";\n    readonly MONGODB_GSSAPI: \"GSSAPI\";\n    readonly MONGODB_PLAIN: \"PLAIN\";\n    readonly MONGODB_SCRAM_SHA1: \"SCRAM-SHA-1\";\n    readonly MONGODB_SCRAM_SHA256: \"SCRAM-SHA-256\";\n    readonly MONGODB_X509: \"MONGODB-X509\";\n    readonly MONGODB_OIDC: \"MONGODB-OIDC\";\n}>;\n\n/** @public */\nexport declare type AuthMechanism = (typeof AuthMechanism)[keyof typeof AuthMechanism];\n\n/** @public */\nexport declare interface AuthMechanismProperties extends Document {\n    SERVICE_HOST?: string;\n    SERVICE_NAME?: string;\n    SERVICE_REALM?: string;\n    CANONICALIZE_HOST_NAME?: GSSAPICanonicalizationValue;\n    AWS_SESSION_TOKEN?: string;\n    /** A user provided OIDC machine callback function. */\n    OIDC_CALLBACK?: OIDCCallbackFunction;\n    /** A user provided OIDC human interacted callback function. */\n    OIDC_HUMAN_CALLBACK?: OIDCCallbackFunction;\n    /** The OIDC environment. Note that 'test' is for internal use only. */\n    ENVIRONMENT?: 'test' | 'azure' | 'gcp' | 'k8s';\n    /** Allowed hosts that OIDC auth can connect to. */\n    ALLOWED_HOSTS?: string[];\n    /** The resource token for OIDC auth in Azure and GCP. */\n    TOKEN_RESOURCE?: string;\n    /**\n     * A custom AWS credential provider to use. An example using the AWS SDK default provider chain:\n     *\n     * ```ts\n     * const client = new MongoClient(process.env.MONGODB_URI, {\n     *   authMechanismProperties: {\n     *     AWS_CREDENTIAL_PROVIDER: fromNodeProviderChain()\n     *   }\n     * });\n     * ```\n     *\n     * Using a custom function that returns AWS credentials:\n     *\n     * ```ts\n     * const client = new MongoClient(process.env.MONGODB_URI, {\n     *   authMechanismProperties: {\n     *     AWS_CREDENTIAL_PROVIDER: async () => {\n     *       return {\n     *         accessKeyId: process.env.ACCESS_KEY_ID,\n     *         secretAccessKey: process.env.SECRET_ACCESS_KEY\n     *       }\n     *     }\n     *   }\n     * });\n     * ```\n     */\n    AWS_CREDENTIAL_PROVIDER?: AWSCredentialProvider;\n}\n\n/* Excluded from this release type: AuthProvider */\n\n/* Excluded from this release type: AutoEncrypter */\n\n/**\n * @public\n *\n * Extra options related to the mongocryptd process\n * \\* _Available in MongoDB 6.0 or higher._\n */\nexport declare type AutoEncryptionExtraOptions = NonNullable<AutoEncryptionOptions['extraOptions']>;\n\n/** @public */\nexport declare const AutoEncryptionLoggerLevel: Readonly<{\n    readonly FatalError: 0;\n    readonly Error: 1;\n    readonly Warning: 2;\n    readonly Info: 3;\n    readonly Trace: 4;\n}>;\n\n/**\n * @public\n * The level of severity of the log message\n *\n * | Value | Level |\n * |-------|-------|\n * | 0 | Fatal Error |\n * | 1 | Error |\n * | 2 | Warning |\n * | 3 | Info |\n * | 4 | Trace |\n */\nexport declare type AutoEncryptionLoggerLevel = (typeof AutoEncryptionLoggerLevel)[keyof typeof AutoEncryptionLoggerLevel];\n\n/** @public */\nexport declare interface AutoEncryptionOptions {\n    /* Excluded from this release type: metadataClient */\n    /** A `MongoClient` used to fetch keys from a key vault */\n    keyVaultClient?: MongoClient;\n    /** The namespace where keys are stored in the key vault */\n    keyVaultNamespace?: string;\n    /** Configuration options that are used by specific KMS providers during key generation, encryption, and decryption. */\n    kmsProviders?: KMSProviders;\n    /** Configuration options for custom credential providers. */\n    credentialProviders?: CredentialProviders;\n    /**\n     * A map of namespaces to a local JSON schema for encryption\n     *\n     * **NOTE**: Supplying options.schemaMap provides more security than relying on JSON Schemas obtained from the server.\n     * It protects against a malicious server advertising a false JSON Schema, which could trick the client into sending decrypted data that should be encrypted.\n     * Schemas supplied in the schemaMap only apply to configuring automatic encryption for Client-Side Field Level Encryption.\n     * Other validation rules in the JSON schema will not be enforced by the driver and will result in an error.\n     */\n    schemaMap?: Document;\n    /** Supply a schema for the encrypted fields in the document  */\n    encryptedFieldsMap?: Document;\n    /** Allows the user to bypass auto encryption, maintaining implicit decryption */\n    bypassAutoEncryption?: boolean;\n    /** Allows users to bypass query analysis */\n    bypassQueryAnalysis?: boolean;\n    options?: {\n        /** An optional hook to catch logging messages from the underlying encryption engine */\n        logger?: (level: AutoEncryptionLoggerLevel, message: string) => void;\n    };\n    extraOptions?: {\n        /**\n         * A local process the driver communicates with to determine how to encrypt values in a command.\n         * Defaults to \"mongodb://%2Fvar%2Fmongocryptd.sock\" if domain sockets are available or \"mongodb://localhost:27020\" otherwise\n         */\n        mongocryptdURI?: string;\n        /** If true, autoEncryption will not attempt to spawn a mongocryptd before connecting  */\n        mongocryptdBypassSpawn?: boolean;\n        /** The path to the mongocryptd executable on the system */\n        mongocryptdSpawnPath?: string;\n        /** Command line arguments to use when auto-spawning a mongocryptd */\n        mongocryptdSpawnArgs?: string[];\n        /**\n         * Full path to a MongoDB Crypt shared library to be used (instead of mongocryptd).\n         *\n         * This needs to be the path to the file itself, not a directory.\n         * It can be an absolute or relative path. If the path is relative and\n         * its first component is `$ORIGIN`, it will be replaced by the directory\n         * containing the mongodb-client-encryption native addon file. Otherwise,\n         * the path will be interpreted relative to the current working directory.\n         *\n         * Currently, loading different MongoDB Crypt shared library files from different\n         * MongoClients in the same process is not supported.\n         *\n         * If this option is provided and no MongoDB Crypt shared library could be loaded\n         * from the specified location, creating the MongoClient will fail.\n         *\n         * If this option is not provided and `cryptSharedLibRequired` is not specified,\n         * the AutoEncrypter will attempt to spawn and/or use mongocryptd according\n         * to the mongocryptd-specific `extraOptions` options.\n         *\n         * Specifying a path prevents mongocryptd from being used as a fallback.\n         *\n         * Requires the MongoDB Crypt shared library, available in MongoDB 6.0 or higher.\n         */\n        cryptSharedLibPath?: string;\n        /**\n         * If specified, never use mongocryptd and instead fail when the MongoDB Crypt\n         * shared library could not be loaded.\n         *\n         * This is always true when `cryptSharedLibPath` is specified.\n         *\n         * Requires the MongoDB Crypt shared library, available in MongoDB 6.0 or higher.\n         */\n        cryptSharedLibRequired?: boolean;\n        /* Excluded from this release type: cryptSharedLibSearchPaths */\n    };\n    proxyOptions?: ProxyOptions;\n    /** The TLS options to use connecting to the KMS provider */\n    tlsOptions?: CSFLEKMSTlsOptions;\n}\n\n/** @public **/\nexport declare type AWSCredentialProvider = () => Promise<AWSCredentials>;\n\n/**\n * @public\n * Copy of the AwsCredentialIdentityProvider interface from [`smithy/types`](https://socket.dev/npm/package/\\@smithy/types/files/1.1.1/dist-types/identity/awsCredentialIdentity.d.ts),\n * the return type of the aws-sdk's `fromNodeProviderChain().provider()`.\n */\nexport declare interface AWSCredentials {\n    accessKeyId: string;\n    secretAccessKey: string;\n    sessionToken?: string;\n    expiration?: Date;\n}\n\n/**\n * @public\n * Configuration options for making an AWS encryption key\n */\nexport declare interface AWSEncryptionKeyOptions {\n    /**\n     * The AWS region of the KMS\n     */\n    region: string;\n    /**\n     * The Amazon Resource Name (ARN) to the AWS customer master key (CMK)\n     */\n    key: string;\n    /**\n     * An alternate host to send KMS requests to. May include port number.\n     */\n    endpoint?: string | undefined;\n}\n\n/** @public */\nexport declare interface AWSKMSProviderConfiguration {\n    /**\n     * The access key used for the AWS KMS provider\n     */\n    accessKeyId: string;\n    /**\n     * The secret access key used for the AWS KMS provider\n     */\n    secretAccessKey: string;\n    /**\n     * An optional AWS session token that will be used as the\n     * X-Amz-Security-Token header for AWS requests.\n     */\n    sessionToken?: string;\n}\n\n/**\n * @public\n * Configuration options for making an Azure encryption key\n */\nexport declare interface AzureEncryptionKeyOptions {\n    /**\n     * Key name\n     */\n    keyName: string;\n    /**\n     * Key vault URL, typically `<name>.vault.azure.net`\n     */\n    keyVaultEndpoint: string;\n    /**\n     * Key version\n     */\n    keyVersion?: string | undefined;\n}\n\n/** @public */\nexport declare type AzureKMSProviderConfiguration = {\n    /**\n     * The tenant ID identifies the organization for the account\n     */\n    tenantId: string;\n    /**\n     * The client ID to authenticate a registered application\n     */\n    clientId: string;\n    /**\n     * The client secret to authenticate a registered application\n     */\n    clientSecret: string;\n    /**\n     * If present, a host with optional port. E.g. \"example.com\" or \"example.com:443\".\n     * This is optional, and only needed if customer is using a non-commercial Azure instance\n     * (e.g. a government or China account, which use different URLs).\n     * Defaults to \"login.microsoftonline.com\"\n     */\n    identityPlatformEndpoint?: string | undefined;\n} | {\n    /**\n     * If present, an access token to authenticate with Azure.\n     */\n    accessToken: string;\n};\n\n/**\n * Keeps the state of a unordered batch so we can rewrite the results\n * correctly after command execution\n *\n * @public\n */\nexport declare class Batch<T = Document> {\n    originalZeroIndex: number;\n    currentIndex: number;\n    originalIndexes: number[];\n    batchType: BatchType;\n    operations: T[];\n    size: number;\n    sizeBytes: number;\n    constructor(batchType: BatchType, originalZeroIndex: number);\n}\n\n/** @public */\nexport declare const BatchType: Readonly<{\n    readonly INSERT: 1;\n    readonly UPDATE: 2;\n    readonly DELETE: 3;\n}>;\n\n/** @public */\nexport declare type BatchType = (typeof BatchType)[keyof typeof BatchType];\n\nexport { Binary }\n\n/** @public */\nexport declare type BitwiseFilter = number /** numeric bit mask */ | Binary /** BinData bit mask */ | ReadonlyArray<number>;\n\nexport { BSON }\n\n/* Excluded from this release type: BSONElement */\nexport { BSONRegExp }\n\n/**\n * BSON Serialization options.\n * @public\n */\nexport declare interface BSONSerializeOptions extends Omit<SerializeOptions, 'index'>, Omit<DeserializeOptions, 'evalFunctions' | 'cacheFunctions' | 'cacheFunctionsCrc32' | 'allowObjectSmallerThanBufferSize' | 'index' | 'validation'> {\n    /**\n     * Enabling the raw option will return a [Node.js Buffer](https://nodejs.org/api/buffer.html)\n     * which is allocated using [allocUnsafe API](https://nodejs.org/api/buffer.html#static-method-bufferallocunsafesize).\n     * See this section from the [Node.js Docs here](https://nodejs.org/api/buffer.html#what-makes-bufferallocunsafe-and-bufferallocunsafeslow-unsafe)\n     * for more detail about what \"unsafe\" refers to in this context.\n     * If you need to maintain your own editable clone of the bytes returned for an extended life time of the process, it is recommended you allocate\n     * your own buffer and clone the contents:\n     *\n     * @example\n     * ```ts\n     * const raw = await collection.findOne({}, { raw: true });\n     * const myBuffer = Buffer.alloc(raw.byteLength);\n     * myBuffer.set(raw, 0);\n     * // Only save and use `myBuffer` beyond this point\n     * ```\n     *\n     * @remarks\n     * Please note there is a known limitation where this option cannot be used at the MongoClient level (see [NODE-3946](https://jira.mongodb.org/browse/NODE-3946)).\n     * It does correctly work at `Db`, `Collection`, and per operation the same as other BSON options work.\n     */\n    raw?: boolean;\n    /** Enable utf8 validation when deserializing BSON documents.  Defaults to true. */\n    enableUtf8Validation?: boolean;\n}\n\nexport { BSONSymbol }\n\nexport { BSONType }\n\n/** @public */\nexport declare type BSONTypeAlias = keyof typeof BSONType;\n\n/* Excluded from this release type: BufferPool */\n\n/** @public */\nexport declare abstract class BulkOperationBase {\n    private collection;\n    isOrdered: boolean;\n    /* Excluded from this release type: s */\n    operationId?: number;\n    /* Excluded from this release type: __constructor */\n    /**\n     * Add a single insert document to the bulk operation\n     *\n     * @example\n     * ```ts\n     * const bulkOp = collection.initializeOrderedBulkOp();\n     *\n     * // Adds three inserts to the bulkOp.\n     * bulkOp\n     *   .insert({ a: 1 })\n     *   .insert({ b: 2 })\n     *   .insert({ c: 3 });\n     * await bulkOp.execute();\n     * ```\n     */\n    insert(document: Document): BulkOperationBase;\n    /**\n     * Builds a find operation for an update/updateOne/delete/deleteOne/replaceOne.\n     * Returns a builder object used to complete the definition of the operation.\n     *\n     * @example\n     * ```ts\n     * const bulkOp = collection.initializeOrderedBulkOp();\n     *\n     * // Add an updateOne to the bulkOp\n     * bulkOp.find({ a: 1 }).updateOne({ $set: { b: 2 } });\n     *\n     * // Add an updateMany to the bulkOp\n     * bulkOp.find({ c: 3 }).update({ $set: { d: 4 } });\n     *\n     * // Add an upsert\n     * bulkOp.find({ e: 5 }).upsert().updateOne({ $set: { f: 6 } });\n     *\n     * // Add a deletion\n     * bulkOp.find({ g: 7 }).deleteOne();\n     *\n     * // Add a multi deletion\n     * bulkOp.find({ h: 8 }).delete();\n     *\n     * // Add a replaceOne\n     * bulkOp.find({ i: 9 }).replaceOne({writeConcern: { j: 10 }});\n     *\n     * // Update using a pipeline (requires Mongodb 4.2 or higher)\n     * bulk.find({ k: 11, y: { $exists: true }, z: { $exists: true } }).updateOne([\n     *   { $set: { total: { $sum: [ '$y', '$z' ] } } }\n     * ]);\n     *\n     * // All of the ops will now be executed\n     * await bulkOp.execute();\n     * ```\n     */\n    find(selector: Document): FindOperators;\n    /** Specifies a raw operation to perform in the bulk write. */\n    raw(op: AnyBulkWriteOperation): this;\n    get length(): number;\n    get bsonOptions(): BSONSerializeOptions;\n    get writeConcern(): WriteConcern | undefined;\n    get batches(): Batch[];\n    execute(options?: BulkWriteOptions): Promise<BulkWriteResult>;\n    /* Excluded from this release type: handleWriteError */\n    abstract addToOperationsList(batchType: BatchType, document: Document | UpdateStatement | DeleteStatement): this;\n    private shouldForceServerObjectId;\n}\n\n/* Excluded from this release type: BulkOperationPrivate */\n\n/* Excluded from this release type: BulkResult */\n\n/** @public */\nexport declare interface BulkWriteOperationError {\n    index: number;\n    code: number;\n    errmsg: string;\n    errInfo: Document;\n    op: Document | UpdateStatement | DeleteStatement;\n}\n\n/** @public */\nexport declare interface BulkWriteOptions extends CommandOperationOptions {\n    /**\n     * Allow driver to bypass schema validation.\n     * @defaultValue `false` - documents will be validated by default\n     **/\n    bypassDocumentValidation?: boolean;\n    /**\n     * If true, when an insert fails, don't execute the remaining writes.\n     * If false, continue with remaining inserts when one fails.\n     * @defaultValue `true` - inserts are ordered by default\n     */\n    ordered?: boolean;\n    /**\n     * Force server to assign _id values instead of driver.\n     * @defaultValue `false` - the driver generates `_id` fields by default\n     **/\n    forceServerObjectId?: boolean;\n    /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n    let?: Document;\n    /* Excluded from this release type: timeoutContext */\n}\n\n/**\n * @public\n * The result of a bulk write.\n */\nexport declare class BulkWriteResult {\n    private readonly result;\n    /** Number of documents inserted. */\n    readonly insertedCount: number;\n    /** Number of documents matched for update. */\n    readonly matchedCount: number;\n    /** Number of documents modified. */\n    readonly modifiedCount: number;\n    /** Number of documents deleted. */\n    readonly deletedCount: number;\n    /** Number of documents upserted. */\n    readonly upsertedCount: number;\n    /** Upserted document generated Id's, hash key is the index of the originating operation */\n    readonly upsertedIds: {\n        [key: number]: any;\n    };\n    /** Inserted document generated Id's, hash key is the index of the originating operation */\n    readonly insertedIds: {\n        [key: number]: any;\n    };\n    private static generateIdMap;\n    /* Excluded from this release type: __constructor */\n    /** Evaluates to true if the bulk operation correctly executes */\n    get ok(): number;\n    /* Excluded from this release type: getSuccessfullyInsertedIds */\n    /** Returns the upserted id at the given index */\n    getUpsertedIdAt(index: number): Document | undefined;\n    /** Returns raw internal result */\n    getRawResponse(): Document;\n    /** Returns true if the bulk operation contains a write error */\n    hasWriteErrors(): boolean;\n    /** Returns the number of write errors off the bulk operation */\n    getWriteErrorCount(): number;\n    /** Returns a specific write error object */\n    getWriteErrorAt(index: number): WriteError | undefined;\n    /** Retrieve all write errors */\n    getWriteErrors(): WriteError[];\n    /** Retrieve the write concern error if one exists */\n    getWriteConcernError(): WriteConcernError | undefined;\n    toString(): string;\n    isOk(): boolean;\n}\n\n/**\n * MongoDB Driver style callback\n * @public\n */\nexport declare type Callback<T = any> = (error?: AnyError, result?: T) => void;\n\n/** @public */\nexport declare class CancellationToken extends TypedEventEmitter<{\n    cancel(): void;\n}> {\n    constructor(...args: any[]);\n}\n\n/**\n * Creates a new Change Stream instance. Normally created using {@link Collection#watch|Collection.watch()}.\n * @public\n */\nexport declare class ChangeStream<TSchema extends Document = Document, TChange extends Document = ChangeStreamDocument<TSchema>> extends TypedEventEmitter<ChangeStreamEvents<TSchema, TChange>> implements AsyncDisposable_2 {\n    /* Excluded from this release type: [Symbol.asyncDispose] */\n    /* Excluded from this release type: asyncDispose */\n    pipeline: Document[];\n    /**\n     * @remarks WriteConcern can still be present on the options because\n     * we inherit options from the client/db/collection.  The\n     * key must be present on the options in order to delete it.\n     * This allows typescript to delete the key but will\n     * not allow a writeConcern to be assigned as a property on options.\n     */\n    options: ChangeStreamOptions & {\n        writeConcern?: never;\n    };\n    parent: MongoClient | Db | Collection;\n    namespace: MongoDBNamespace;\n    type: symbol;\n    /* Excluded from this release type: cursor */\n    streamOptions?: CursorStreamOptions;\n    /* Excluded from this release type: cursorStream */\n    /* Excluded from this release type: isClosed */\n    /* Excluded from this release type: mode */\n    /** @event */\n    static readonly RESPONSE: \"response\";\n    /** @event */\n    static readonly MORE: \"more\";\n    /** @event */\n    static readonly INIT: \"init\";\n    /** @event */\n    static readonly CLOSE: \"close\";\n    /**\n     * Fired for each new matching change in the specified namespace. Attaching a `change`\n     * event listener to a Change Stream will switch the stream into flowing mode. Data will\n     * then be passed as soon as it is available.\n     * @event\n     */\n    static readonly CHANGE: \"change\";\n    /** @event */\n    static readonly END: \"end\";\n    /** @event */\n    static readonly ERROR: \"error\";\n    /**\n     * Emitted each time the change stream stores a new resume token.\n     * @event\n     */\n    static readonly RESUME_TOKEN_CHANGED: \"resumeTokenChanged\";\n    private timeoutContext?;\n    /**\n     * Note that this property is here to uniquely identify a ChangeStream instance as the owner of\n     * the {@link CursorTimeoutContext} instance (see {@link ChangeStream._createChangeStreamCursor}) to ensure\n     * that {@link AbstractCursor.close} does not mutate the timeoutContext.\n     */\n    private contextOwner;\n    /* Excluded from this release type: __constructor */\n    /** The cached resume token that is used to resume after the most recently returned change. */\n    get resumeToken(): ResumeToken;\n    /** Check if there is any document still available in the Change Stream */\n    hasNext(): Promise<boolean>;\n    /** Get the next available document from the Change Stream. */\n    next(): Promise<TChange>;\n    /**\n     * Try to get the next available document from the Change Stream's cursor or `null` if an empty batch is returned\n     */\n    tryNext(): Promise<TChange | null>;\n    [Symbol.asyncIterator](): AsyncGenerator<TChange, void, void>;\n    /** Is the cursor closed */\n    get closed(): boolean;\n    /**\n     * Frees the internal resources used by the change stream.\n     */\n    close(): Promise<void>;\n    /**\n     * Return a modified Readable stream including a possible transform method.\n     *\n     * NOTE: When using a Stream to process change stream events, the stream will\n     * NOT automatically resume in the case a resumable error is encountered.\n     *\n     * @throws MongoChangeStreamError if the underlying cursor or the change stream is closed\n     */\n    stream(options?: CursorStreamOptions): Readable & AsyncIterable<TChange>;\n    /* Excluded from this release type: _setIsEmitter */\n    /* Excluded from this release type: _setIsIterator */\n    /* Excluded from this release type: _createChangeStreamCursor */\n    /* Excluded from this release type: _closeEmitterModeWithError */\n    /* Excluded from this release type: _streamEvents */\n    /* Excluded from this release type: _endStream */\n    /* Excluded from this release type: _processChange */\n    /* Excluded from this release type: _processErrorStreamMode */\n    /* Excluded from this release type: _processErrorIteratorMode */\n    private _resume;\n}\n\n/**\n * Only present when the `showExpandedEvents` flag is enabled.\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/modify/#mongodb-data-modify\n */\nexport declare interface ChangeStreamCollModDocument extends ChangeStreamDocumentCommon, ChangeStreamDocumentCollectionUUID {\n    /** Describes the type of operation represented in this change notification */\n    operationType: 'modify';\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/create/#mongodb-data-create\n */\nexport declare interface ChangeStreamCreateDocument extends ChangeStreamDocumentCommon, ChangeStreamDocumentCollectionUUID {\n    /** Describes the type of operation represented in this change notification */\n    operationType: 'create';\n    /**\n     * The type of the newly created object.\n     *\n     * @sinceServerVersion 8.1.0\n     */\n    nsType?: 'collection' | 'timeseries' | 'view';\n}\n\n/**\n * Only present when the `showExpandedEvents` flag is enabled.\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/createIndexes/#mongodb-data-createIndexes\n */\nexport declare interface ChangeStreamCreateIndexDocument extends ChangeStreamDocumentCommon, ChangeStreamDocumentCollectionUUID, ChangeStreamDocumentOperationDescription {\n    /** Describes the type of operation represented in this change notification */\n    operationType: 'createIndexes';\n}\n\n/* Excluded from this release type: ChangeStreamCursor */\n\n/* Excluded from this release type: ChangeStreamCursorOptions */\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#delete-event\n */\nexport declare interface ChangeStreamDeleteDocument<TSchema extends Document = Document> extends ChangeStreamDocumentCommon, ChangeStreamDocumentKey<TSchema>, ChangeStreamDocumentCollectionUUID {\n    /** Describes the type of operation represented in this change notification */\n    operationType: 'delete';\n    /** Namespace the delete event occurred on */\n    ns: ChangeStreamNameSpace;\n    /**\n     * Contains the pre-image of the modified or deleted document if the\n     * pre-image is available for the change event and either 'required' or\n     * 'whenAvailable' was specified for the 'fullDocumentBeforeChange' option\n     * when creating the change stream. If 'whenAvailable' was specified but the\n     * pre-image is unavailable, this will be explicitly set to null.\n     */\n    fullDocumentBeforeChange?: TSchema;\n}\n\n/** @public */\nexport declare type ChangeStreamDocument<TSchema extends Document = Document> = ChangeStreamInsertDocument<TSchema> | ChangeStreamUpdateDocument<TSchema> | ChangeStreamReplaceDocument<TSchema> | ChangeStreamDeleteDocument<TSchema> | ChangeStreamDropDocument | ChangeStreamRenameDocument | ChangeStreamDropDatabaseDocument | ChangeStreamInvalidateDocument | ChangeStreamCreateIndexDocument | ChangeStreamCreateDocument | ChangeStreamCollModDocument | ChangeStreamDropIndexDocument | ChangeStreamShardCollectionDocument | ChangeStreamReshardCollectionDocument | ChangeStreamRefineCollectionShardKeyDocument;\n\n/** @public */\nexport declare interface ChangeStreamDocumentCollectionUUID {\n    /**\n     * The UUID (Binary subtype 4) of the collection that the operation was performed on.\n     *\n     * Only present when the `showExpandedEvents` flag is enabled.\n     *\n     * **NOTE:** collectionUUID will be converted to a NodeJS Buffer if the promoteBuffers\n     *    flag is enabled.\n     *\n     * @sinceServerVersion 6.1.0\n     */\n    collectionUUID: Binary;\n}\n\n/** @public */\nexport declare interface ChangeStreamDocumentCommon {\n    /**\n     * The id functions as an opaque token for use when resuming an interrupted\n     * change stream.\n     */\n    _id: ResumeToken;\n    /**\n     * The timestamp from the oplog entry associated with the event.\n     * For events that happened as part of a multi-document transaction, the associated change stream\n     * notifications will have the same clusterTime value, namely the time when the transaction was committed.\n     * On a sharded cluster, events that occur on different shards can have the same clusterTime but be\n     * associated with different transactions or even not be associated with any transaction.\n     * To identify events for a single transaction, you can use the combination of lsid and txnNumber in the change stream event document.\n     */\n    clusterTime?: Timestamp;\n    /**\n     * The transaction number.\n     * Only present if the operation is part of a multi-document transaction.\n     *\n     * **NOTE:** txnNumber can be a Long if promoteLongs is set to false\n     */\n    txnNumber?: number;\n    /**\n     * The identifier for the session associated with the transaction.\n     * Only present if the operation is part of a multi-document transaction.\n     */\n    lsid?: ServerSessionId;\n    /**\n     * When the change stream's backing aggregation pipeline contains the $changeStreamSplitLargeEvent\n     * stage, events larger than 16MB will be split into multiple events and contain the\n     * following information about which fragment the current event is.\n     */\n    splitEvent?: ChangeStreamSplitEvent;\n}\n\n/** @public */\nexport declare interface ChangeStreamDocumentKey<TSchema extends Document = Document> {\n    /**\n     * For unsharded collections this contains a single field `_id`.\n     * For sharded collections, this will contain all the components of the shard key\n     */\n    documentKey: {\n        _id: InferIdType<TSchema>;\n        [shardKey: string]: any;\n    };\n}\n\n/** @public */\nexport declare interface ChangeStreamDocumentOperationDescription {\n    /**\n     * An description of the operation.\n     *\n     * Only present when the `showExpandedEvents` flag is enabled.\n     *\n     * @sinceServerVersion 6.1.0\n     */\n    operationDescription?: Document;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#dropdatabase-event\n */\nexport declare interface ChangeStreamDropDatabaseDocument extends ChangeStreamDocumentCommon {\n    /** Describes the type of operation represented in this change notification */\n    operationType: 'dropDatabase';\n    /** The database dropped */\n    ns: {\n        db: string;\n    };\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#drop-event\n */\nexport declare interface ChangeStreamDropDocument extends ChangeStreamDocumentCommon, ChangeStreamDocumentCollectionUUID {\n    /** Describes the type of operation represented in this change notification */\n    operationType: 'drop';\n    /** Namespace the drop event occurred on */\n    ns: ChangeStreamNameSpace;\n}\n\n/**\n * Only present when the `showExpandedEvents` flag is enabled.\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/dropIndexes/#mongodb-data-dropIndexes\n */\nexport declare interface ChangeStreamDropIndexDocument extends ChangeStreamDocumentCommon, ChangeStreamDocumentCollectionUUID, ChangeStreamDocumentOperationDescription {\n    /** Describes the type of operation represented in this change notification */\n    operationType: 'dropIndexes';\n}\n\n/** @public */\nexport declare type ChangeStreamEvents<TSchema extends Document = Document, TChange extends Document = ChangeStreamDocument<TSchema>> = {\n    resumeTokenChanged(token: ResumeToken): void;\n    init(response: any): void;\n    more(response?: any): void;\n    response(): void;\n    end(): void;\n    error(error: Error): void;\n    change(change: TChange): void;\n    /**\n     * @remarks Note that the `close` event is currently emitted whenever the internal `ChangeStreamCursor`\n     * instance is closed, which can occur multiple times for a given `ChangeStream` instance.\n     *\n     * TODO(NODE-6434): address this issue in NODE-6434\n     */\n    close(): void;\n};\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#insert-event\n */\nexport declare interface ChangeStreamInsertDocument<TSchema extends Document = Document> extends ChangeStreamDocumentCommon, ChangeStreamDocumentKey<TSchema>, ChangeStreamDocumentCollectionUUID {\n    /** Describes the type of operation represented in this change notification */\n    operationType: 'insert';\n    /** This key will contain the document being inserted */\n    fullDocument: TSchema;\n    /** Namespace the insert event occurred on */\n    ns: ChangeStreamNameSpace;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#invalidate-event\n */\nexport declare interface ChangeStreamInvalidateDocument extends ChangeStreamDocumentCommon {\n    /** Describes the type of operation represented in this change notification */\n    operationType: 'invalidate';\n}\n\n/** @public */\nexport declare interface ChangeStreamNameSpace {\n    db: string;\n    coll: string;\n}\n\n/**\n * Options that can be passed to a ChangeStream. Note that startAfter, resumeAfter, and startAtOperationTime are all mutually exclusive, and the server will error if more than one is specified.\n * @public\n */\nexport declare interface ChangeStreamOptions extends Omit<AggregateOptions, 'writeConcern'> {\n    /**\n     * Allowed values: 'updateLookup', 'whenAvailable', 'required'.\n     *\n     * When set to 'updateLookup', the change notification for partial updates\n     * will include both a delta describing the changes to the document as well\n     * as a copy of the entire document that was changed from some time after\n     * the change occurred.\n     *\n     * When set to 'whenAvailable', configures the change stream to return the\n     * post-image of the modified document for replace and update change events\n     * if the post-image for this event is available.\n     *\n     * When set to 'required', the same behavior as 'whenAvailable' except that\n     * an error is raised if the post-image is not available.\n     */\n    fullDocument?: string;\n    /**\n     * Allowed values: 'whenAvailable', 'required', 'off'.\n     *\n     * The default is to not send a value, which is equivalent to 'off'.\n     *\n     * When set to 'whenAvailable', configures the change stream to return the\n     * pre-image of the modified document for replace, update, and delete change\n     * events if it is available.\n     *\n     * When set to 'required', the same behavior as 'whenAvailable' except that\n     * an error is raised if the pre-image is not available.\n     */\n    fullDocumentBeforeChange?: string;\n    /** The maximum amount of time for the server to wait on new documents to satisfy a change stream query. */\n    maxAwaitTimeMS?: number;\n    /**\n     * Allows you to start a changeStream after a specified event.\n     * @see https://www.mongodb.com/docs/manual/changeStreams/#resumeafter-for-change-streams\n     */\n    resumeAfter?: ResumeToken;\n    /**\n     * Similar to resumeAfter, but will allow you to start after an invalidated event.\n     * @see https://www.mongodb.com/docs/manual/changeStreams/#startafter-for-change-streams\n     */\n    startAfter?: ResumeToken;\n    /** Will start the changeStream after the specified operationTime. */\n    startAtOperationTime?: OperationTime;\n    /**\n     * The number of documents to return per batch.\n     * @see https://www.mongodb.com/docs/manual/reference/command/aggregate\n     */\n    batchSize?: number;\n    /**\n     * When enabled, configures the change stream to include extra change events.\n     *\n     * - createIndexes\n     * - dropIndexes\n     * - modify\n     * - create\n     * - shardCollection\n     * - reshardCollection\n     * - refineCollectionShardKey\n     */\n    showExpandedEvents?: boolean;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/refineCollectionShardKey/#mongodb-data-refineCollectionShardKey\n */\nexport declare interface ChangeStreamRefineCollectionShardKeyDocument extends ChangeStreamDocumentCommon, ChangeStreamDocumentCollectionUUID, ChangeStreamDocumentOperationDescription {\n    /** Describes the type of operation represented in this change notification */\n    operationType: 'refineCollectionShardKey';\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#rename-event\n */\nexport declare interface ChangeStreamRenameDocument extends ChangeStreamDocumentCommon, ChangeStreamDocumentCollectionUUID {\n    /** Describes the type of operation represented in this change notification */\n    operationType: 'rename';\n    /** The new name for the `ns.coll` collection */\n    to: {\n        db: string;\n        coll: string;\n    };\n    /** The \"from\" namespace that the rename occurred on */\n    ns: ChangeStreamNameSpace;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#replace-event\n */\nexport declare interface ChangeStreamReplaceDocument<TSchema extends Document = Document> extends ChangeStreamDocumentCommon, ChangeStreamDocumentKey<TSchema> {\n    /** Describes the type of operation represented in this change notification */\n    operationType: 'replace';\n    /** The fullDocument of a replace event represents the document after the insert of the replacement document */\n    fullDocument: TSchema;\n    /** Namespace the replace event occurred on */\n    ns: ChangeStreamNameSpace;\n    /**\n     * Contains the pre-image of the modified or deleted document if the\n     * pre-image is available for the change event and either 'required' or\n     * 'whenAvailable' was specified for the 'fullDocumentBeforeChange' option\n     * when creating the change stream. If 'whenAvailable' was specified but the\n     * pre-image is unavailable, this will be explicitly set to null.\n     */\n    fullDocumentBeforeChange?: TSchema;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/reshardCollection/#mongodb-data-reshardCollection\n */\nexport declare interface ChangeStreamReshardCollectionDocument extends ChangeStreamDocumentCommon, ChangeStreamDocumentCollectionUUID, ChangeStreamDocumentOperationDescription {\n    /** Describes the type of operation represented in this change notification */\n    operationType: 'reshardCollection';\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/shardCollection/#mongodb-data-shardCollection\n */\nexport declare interface ChangeStreamShardCollectionDocument extends ChangeStreamDocumentCommon, ChangeStreamDocumentCollectionUUID, ChangeStreamDocumentOperationDescription {\n    /** Describes the type of operation represented in this change notification */\n    operationType: 'shardCollection';\n}\n\n/** @public */\nexport declare interface ChangeStreamSplitEvent {\n    /** Which fragment of the change this is. */\n    fragment: number;\n    /** The total number of fragments. */\n    of: number;\n}\n\n/**\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/change-events/#update-event\n */\nexport declare interface ChangeStreamUpdateDocument<TSchema extends Document = Document> extends ChangeStreamDocumentCommon, ChangeStreamDocumentKey<TSchema>, ChangeStreamDocumentCollectionUUID {\n    /** Describes the type of operation represented in this change notification */\n    operationType: 'update';\n    /**\n     * This is only set if `fullDocument` is set to `'updateLookup'`\n     * Contains the point-in-time post-image of the modified document if the\n     * post-image is available and either 'required' or 'whenAvailable' was\n     * specified for the 'fullDocument' option when creating the change stream.\n     */\n    fullDocument?: TSchema;\n    /** Contains a description of updated and removed fields in this operation */\n    updateDescription: UpdateDescription<TSchema>;\n    /** Namespace the update event occurred on */\n    ns: ChangeStreamNameSpace;\n    /**\n     * Contains the pre-image of the modified or deleted document if the\n     * pre-image is available for the change event and either 'required' or\n     * 'whenAvailable' was specified for the 'fullDocumentBeforeChange' option\n     * when creating the change stream. If 'whenAvailable' was specified but the\n     * pre-image is unavailable, this will be explicitly set to null.\n     */\n    fullDocumentBeforeChange?: TSchema;\n}\n\n/** @public */\nexport declare interface ClientBulkWriteError {\n    code: number;\n    message: string;\n}\n\n/**\n * A mapping of namespace strings to collections schemas.\n * @public\n *\n * @example\n * ```ts\n * type MongoDBSchemas = {\n *   'db.books': Book;\n *   'db.authors': Author;\n * }\n *\n * const model: ClientBulkWriteModel<MongoDBSchemas> = {\n *   namespace: 'db.books'\n *   name: 'insertOne',\n *   document: { title: 'Practical MongoDB Aggregations', authorName: 3 } // error `authorName` cannot be number\n * };\n * ```\n *\n * The type of the `namespace` field narrows other parts of the BulkWriteModel to use the correct schema for type assertions.\n *\n */\nexport declare type ClientBulkWriteModel<SchemaMap extends Record<string, Document> = Record<string, Document>> = {\n    [Namespace in keyof SchemaMap]: AnyClientBulkWriteModel<SchemaMap[Namespace]> & {\n        namespace: Namespace;\n    };\n}[keyof SchemaMap];\n\n/** @public */\nexport declare interface ClientBulkWriteOptions extends CommandOperationOptions {\n    /**\n     * If true, when an insert fails, don't execute the remaining writes.\n     * If false, continue with remaining inserts when one fails.\n     * @defaultValue `true` - inserts are ordered by default\n     */\n    ordered?: boolean;\n    /**\n     * Allow driver to bypass schema validation.\n     * @defaultValue `false` - documents will be validated by default\n     **/\n    bypassDocumentValidation?: boolean;\n    /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n    let?: Document;\n    /**\n     * Whether detailed results for each successful operation should be included in the returned\n     * BulkWriteResult.\n     */\n    verboseResults?: boolean;\n}\n\n/** @public */\nexport declare interface ClientBulkWriteResult {\n    /**\n     * Whether the bulk write was acknowledged.\n     */\n    readonly acknowledged: boolean;\n    /**\n     * The total number of documents inserted across all insert operations.\n     */\n    readonly insertedCount: number;\n    /**\n     * The total number of documents upserted across all update operations.\n     */\n    readonly upsertedCount: number;\n    /**\n     * The total number of documents matched across all update operations.\n     */\n    readonly matchedCount: number;\n    /**\n     * The total number of documents modified across all update operations.\n     */\n    readonly modifiedCount: number;\n    /**\n     * The total number of documents deleted across all delete operations.\n     */\n    readonly deletedCount: number;\n    /**\n     * The results of each individual insert operation that was successfully performed.\n     */\n    readonly insertResults?: ReadonlyMap<number, ClientInsertOneResult>;\n    /**\n     * The results of each individual update operation that was successfully performed.\n     */\n    readonly updateResults?: ReadonlyMap<number, ClientUpdateResult>;\n    /**\n     * The results of each individual delete operation that was successfully performed.\n     */\n    readonly deleteResults?: ReadonlyMap<number, ClientDeleteResult>;\n}\n\n/** @public */\nexport declare interface ClientDeleteManyModel<TSchema> extends ClientWriteModel {\n    name: 'deleteMany';\n    /**\n     * The filter used to determine if a document should be deleted.\n     * For a deleteMany operation, all matches are removed.\n     */\n    filter: Filter<TSchema>;\n    /** Specifies a collation. */\n    collation?: CollationOptions;\n    /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n    hint?: Hint;\n}\n\n/** @public */\nexport declare interface ClientDeleteOneModel<TSchema> extends ClientWriteModel {\n    name: 'deleteOne';\n    /**\n     * The filter used to determine if a document should be deleted.\n     * For a deleteOne operation, the first match is removed.\n     */\n    filter: Filter<TSchema>;\n    /** Specifies a collation. */\n    collation?: CollationOptions;\n    /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n    hint?: Hint;\n}\n\n/** @public */\nexport declare interface ClientDeleteResult {\n    /**\n     * The number of documents that were deleted.\n     */\n    deletedCount: number;\n}\n\n/**\n * @public\n * The public interface for explicit in-use encryption\n */\nexport declare class ClientEncryption {\n    /* Excluded from this release type: _client */\n    /* Excluded from this release type: _keyVaultNamespace */\n    /* Excluded from this release type: _keyVaultClient */\n    /* Excluded from this release type: _proxyOptions */\n    /* Excluded from this release type: _tlsOptions */\n    /* Excluded from this release type: _kmsProviders */\n    /* Excluded from this release type: _timeoutMS */\n    /* Excluded from this release type: _mongoCrypt */\n    /* Excluded from this release type: _credentialProviders */\n    /* Excluded from this release type: getMongoCrypt */\n    /**\n     * Create a new encryption instance\n     *\n     * @example\n     * ```ts\n     * new ClientEncryption(mongoClient, {\n     *   keyVaultNamespace: 'client.encryption',\n     *   kmsProviders: {\n     *     local: {\n     *       key: masterKey // The master key used for encryption/decryption. A 96-byte long Buffer\n     *     }\n     *   }\n     * });\n     * ```\n     *\n     * @example\n     * ```ts\n     * new ClientEncryption(mongoClient, {\n     *   keyVaultNamespace: 'client.encryption',\n     *   kmsProviders: {\n     *     aws: {\n     *       accessKeyId: AWS_ACCESS_KEY,\n     *       secretAccessKey: AWS_SECRET_KEY\n     *     }\n     *   }\n     * });\n     * ```\n     */\n    constructor(client: MongoClient, options: ClientEncryptionOptions);\n    /**\n     * Creates a data key used for explicit encryption and inserts it into the key vault namespace\n     *\n     * @example\n     * ```ts\n     * // Using async/await to create a local key\n     * const dataKeyId = await clientEncryption.createDataKey('local');\n     * ```\n     *\n     * @example\n     * ```ts\n     * // Using async/await to create an aws key\n     * const dataKeyId = await clientEncryption.createDataKey('aws', {\n     *   masterKey: {\n     *     region: 'us-east-1',\n     *     key: 'xxxxxxxxxxxxxx' // CMK ARN here\n     *   }\n     * });\n     * ```\n     *\n     * @example\n     * ```ts\n     * // Using async/await to create an aws key with a keyAltName\n     * const dataKeyId = await clientEncryption.createDataKey('aws', {\n     *   masterKey: {\n     *     region: 'us-east-1',\n     *     key: 'xxxxxxxxxxxxxx' // CMK ARN here\n     *   },\n     *   keyAltNames: [ 'mySpecialKey' ]\n     * });\n     * ```\n     */\n    createDataKey(provider: ClientEncryptionDataKeyProvider, options?: ClientEncryptionCreateDataKeyProviderOptions): Promise<UUID>;\n    /**\n     * Searches the keyvault for any data keys matching the provided filter.  If there are matches, rewrapManyDataKey then attempts to re-wrap the data keys using the provided options.\n     *\n     * If no matches are found, then no bulk write is performed.\n     *\n     * @example\n     * ```ts\n     * // rewrapping all data data keys (using a filter that matches all documents)\n     * const filter = {};\n     *\n     * const result = await clientEncryption.rewrapManyDataKey(filter);\n     * if (result.bulkWriteResult != null) {\n     *  // keys were re-wrapped, results will be available in the bulkWrite object.\n     * }\n     * ```\n     *\n     * @example\n     * ```ts\n     * // attempting to rewrap all data keys with no matches\n     * const filter = { _id: new Binary() } // assume _id matches no documents in the database\n     * const result = await clientEncryption.rewrapManyDataKey(filter);\n     *\n     * if (result.bulkWriteResult == null) {\n     *  // no keys matched, `bulkWriteResult` does not exist on the result object\n     * }\n     * ```\n     */\n    rewrapManyDataKey(filter: Filter<DataKey>, options: ClientEncryptionRewrapManyDataKeyProviderOptions): Promise<{\n        bulkWriteResult?: BulkWriteResult;\n    }>;\n    /**\n     * Deletes the key with the provided id from the keyvault, if it exists.\n     *\n     * @example\n     * ```ts\n     * // delete a key by _id\n     * const id = new Binary(); // id is a bson binary subtype 4 object\n     * const { deletedCount } = await clientEncryption.deleteKey(id);\n     *\n     * if (deletedCount != null && deletedCount > 0) {\n     *   // successful deletion\n     * }\n     * ```\n     *\n     */\n    deleteKey(_id: Binary): Promise<DeleteResult>;\n    /**\n     * Finds all the keys currently stored in the keyvault.\n     *\n     * This method will not throw.\n     *\n     * @returns a FindCursor over all keys in the keyvault.\n     * @example\n     * ```ts\n     * // fetching all keys\n     * const keys = await clientEncryption.getKeys().toArray();\n     * ```\n     */\n    getKeys(): FindCursor<DataKey>;\n    /**\n     * Finds a key in the keyvault with the specified _id.\n     *\n     * Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the id.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // getting a key by id\n     * const id = new Binary(); // id is a bson binary subtype 4 object\n     * const key = await clientEncryption.getKey(id);\n     * if (!key) {\n     *  // key is null if there was no matching key\n     * }\n     * ```\n     */\n    getKey(_id: Binary): Promise<DataKey | null>;\n    /**\n     * Finds a key in the keyvault which has the specified keyAltName.\n     *\n     * @param keyAltName - a keyAltName to search for a key\n     * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the keyAltName.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // get a key by alt name\n     * const keyAltName = 'keyAltName';\n     * const key = await clientEncryption.getKeyByAltName(keyAltName);\n     * if (!key) {\n     *  // key is null if there is no matching key\n     * }\n     * ```\n     */\n    getKeyByAltName(keyAltName: string): Promise<WithId<DataKey> | null>;\n    /**\n     * Adds a keyAltName to a key identified by the provided _id.\n     *\n     * This method resolves to/returns the *old* key value (prior to adding the new altKeyName).\n     *\n     * @param _id - The id of the document to update.\n     * @param keyAltName - a keyAltName to search for a key\n     * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the id.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // adding an keyAltName to a data key\n     * const id = new Binary();  // id is a bson binary subtype 4 object\n     * const keyAltName = 'keyAltName';\n     * const oldKey = await clientEncryption.addKeyAltName(id, keyAltName);\n     * if (!oldKey) {\n     *  // null is returned if there is no matching document with an id matching the supplied id\n     * }\n     * ```\n     */\n    addKeyAltName(_id: Binary, keyAltName: string): Promise<WithId<DataKey> | null>;\n    /**\n     * Adds a keyAltName to a key identified by the provided _id.\n     *\n     * This method resolves to/returns the *old* key value (prior to removing the new altKeyName).\n     *\n     * If the removed keyAltName is the last keyAltName for that key, the `altKeyNames` property is unset from the document.\n     *\n     * @param _id - The id of the document to update.\n     * @param keyAltName - a keyAltName to search for a key\n     * @returns Returns a promise that either resolves to a {@link DataKey} if a document matches the key or null if no documents\n     * match the id.  The promise rejects with an error if an error is thrown.\n     * @example\n     * ```ts\n     * // removing a key alt name from a data key\n     * const id = new Binary();  // id is a bson binary subtype 4 object\n     * const keyAltName = 'keyAltName';\n     * const oldKey = await clientEncryption.removeKeyAltName(id, keyAltName);\n     *\n     * if (!oldKey) {\n     *  // null is returned if there is no matching document with an id matching the supplied id\n     * }\n     * ```\n     */\n    removeKeyAltName(_id: Binary, keyAltName: string): Promise<WithId<DataKey> | null>;\n    /**\n     * A convenience method for creating an encrypted collection.\n     * This method will create data keys for any encryptedFields that do not have a `keyId` defined\n     * and then create a new collection with the full set of encryptedFields.\n     *\n     * @param db - A Node.js driver Db object with which to create the collection\n     * @param name - The name of the collection to be created\n     * @param options - Options for createDataKey and for createCollection\n     * @returns created collection and generated encryptedFields\n     * @throws MongoCryptCreateDataKeyError - If part way through the process a createDataKey invocation fails, an error will be rejected that has the partial `encryptedFields` that were created.\n     * @throws MongoCryptCreateEncryptedCollectionError - If creating the collection fails, an error will be rejected that has the entire `encryptedFields` that were created.\n     */\n    createEncryptedCollection<TSchema extends Document = Document>(db: Db, name: string, options: {\n        provider: ClientEncryptionDataKeyProvider;\n        createCollectionOptions: Omit<CreateCollectionOptions, 'encryptedFields'> & {\n            encryptedFields: Document;\n        };\n        masterKey?: AWSEncryptionKeyOptions | AzureEncryptionKeyOptions | GCPEncryptionKeyOptions;\n    }): Promise<{\n        collection: Collection<TSchema>;\n        encryptedFields: Document;\n    }>;\n    /**\n     * Explicitly encrypt a provided value. Note that either `options.keyId` or `options.keyAltName` must\n     * be specified. Specifying both `options.keyId` and `options.keyAltName` is considered an error.\n     *\n     * @param value - The value that you wish to serialize. Must be of a type that can be serialized into BSON\n     * @param options -\n     * @returns a Promise that either resolves with the encrypted value, or rejects with an error.\n     *\n     * @example\n     * ```ts\n     * // Encryption with async/await api\n     * async function encryptMyData(value) {\n     *   const keyId = await clientEncryption.createDataKey('local');\n     *   return clientEncryption.encrypt(value, { keyId, algorithm: 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic' });\n     * }\n     * ```\n     *\n     * @example\n     * ```ts\n     * // Encryption using a keyAltName\n     * async function encryptMyData(value) {\n     *   await clientEncryption.createDataKey('local', { keyAltNames: 'mySpecialKey' });\n     *   return clientEncryption.encrypt(value, { keyAltName: 'mySpecialKey', algorithm: 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic' });\n     * }\n     * ```\n     */\n    encrypt(value: unknown, options: ClientEncryptionEncryptOptions): Promise<Binary>;\n    /**\n     * Encrypts a Match Expression or Aggregate Expression to query a range index.\n     *\n     * Only supported when queryType is \"range\" and algorithm is \"Range\".\n     *\n     * @param expression - a BSON document of one of the following forms:\n     *  1. A Match Expression of this form:\n     *      `{$and: [{<field>: {$gt: <value1>}}, {<field>: {$lt: <value2> }}]}`\n     *  2. An Aggregate Expression of this form:\n     *      `{$and: [{$gt: [<fieldpath>, <value1>]}, {$lt: [<fieldpath>, <value2>]}]}`\n     *\n     *    `$gt` may also be `$gte`. `$lt` may also be `$lte`.\n     *\n     * @param options -\n     * @returns Returns a Promise that either resolves with the encrypted value or rejects with an error.\n     */\n    encryptExpression(expression: Document, options: ClientEncryptionEncryptOptions): Promise<Binary>;\n    /**\n     * Explicitly decrypt a provided encrypted value\n     *\n     * @param value - An encrypted value\n     * @returns a Promise that either resolves with the decrypted value, or rejects with an error\n     *\n     * @example\n     * ```ts\n     * // Decrypting value with async/await API\n     * async function decryptMyValue(value) {\n     *   return clientEncryption.decrypt(value);\n     * }\n     * ```\n     */\n    decrypt<T = any>(value: Binary): Promise<T>;\n    /* Excluded from this release type: askForKMSCredentials */\n    static get libmongocryptVersion(): string;\n    /* Excluded from this release type: _encrypt */\n}\n\n/**\n * @public\n * Options to provide when creating a new data key.\n */\nexport declare interface ClientEncryptionCreateDataKeyProviderOptions {\n    /**\n     * Identifies a new KMS-specific key used to encrypt the new data key\n     */\n    masterKey?: AWSEncryptionKeyOptions | AzureEncryptionKeyOptions | GCPEncryptionKeyOptions | KMIPEncryptionKeyOptions | undefined;\n    /**\n     * An optional list of string alternate names used to reference a key.\n     * If a key is created with alternate names, then encryption may refer to the key by the unique alternate name instead of by _id.\n     */\n    keyAltNames?: string[] | undefined;\n    /** @experimental */\n    keyMaterial?: Buffer | Binary;\n    /* Excluded from this release type: timeoutContext */\n}\n\n/**\n * @public\n *\n * A data key provider.  Allowed values:\n *\n * - aws, gcp, local, kmip or azure\n * - (`mongodb-client-encryption>=6.0.1` only) a named key, in the form of:\n *    `aws:<name>`, `gcp:<name>`, `local:<name>`, `kmip:<name>`, `azure:<name>`\n *  where `name` is an alphanumeric string, underscores allowed.\n */\nexport declare type ClientEncryptionDataKeyProvider = keyof KMSProviders;\n\n/**\n * @public\n * Options to provide when encrypting data.\n */\nexport declare interface ClientEncryptionEncryptOptions {\n    /**\n     * The algorithm to use for encryption.\n     */\n    algorithm: 'AEAD_AES_256_CBC_HMAC_SHA_512-Deterministic' | 'AEAD_AES_256_CBC_HMAC_SHA_512-Random' | 'Indexed' | 'Unindexed' | 'Range';\n    /**\n     * The id of the Binary dataKey to use for encryption\n     */\n    keyId?: Binary;\n    /**\n     * A unique string name corresponding to an already existing dataKey.\n     */\n    keyAltName?: string;\n    /** The contention factor. */\n    contentionFactor?: bigint | number;\n    /**\n     * The query type.\n     */\n    queryType?: 'equality' | 'range';\n    /** The index options for a Queryable Encryption field supporting \"range\" queries.*/\n    rangeOptions?: RangeOptions;\n}\n\n/**\n * @public\n * Additional settings to provide when creating a new `ClientEncryption` instance.\n */\nexport declare interface ClientEncryptionOptions {\n    /**\n     * The namespace of the key vault, used to store encryption keys\n     */\n    keyVaultNamespace: string;\n    /**\n     * A MongoClient used to fetch keys from a key vault. Defaults to client.\n     */\n    keyVaultClient?: MongoClient | undefined;\n    /**\n     * Options for specific KMS providers to use\n     */\n    kmsProviders?: KMSProviders;\n    /**\n     * Options for user provided custom credential providers.\n     */\n    credentialProviders?: CredentialProviders;\n    /**\n     * Options for specifying a Socks5 proxy to use for connecting to the KMS.\n     */\n    proxyOptions?: ProxyOptions;\n    /**\n     * TLS options for kms providers to use.\n     */\n    tlsOptions?: CSFLEKMSTlsOptions;\n    /**\n     * @experimental\n     *\n     * The timeout setting to be used for all the operations on ClientEncryption.\n     *\n     * When provided, `timeoutMS` is used as the timeout for each operation executed on\n     * the ClientEncryption object.  For example:\n     *\n     * ```typescript\n     * const clientEncryption = new ClientEncryption(client, {\n     *  timeoutMS: 1_000\n     *  kmsProviders: { local: { key: '<KEY>' } }\n     * });\n     *\n     * // `1_000` is used as the timeout for createDataKey call\n     * await clientEncryption.createDataKey('local');\n     * ```\n     *\n     * If `timeoutMS` is configured on the provided client, the client's `timeoutMS` value\n     * will be used unless `timeoutMS` is also provided as a client encryption option.\n     *\n     * ```typescript\n     * const client = new MongoClient('<uri>', { timeoutMS: 2_000 });\n     *\n     * // timeoutMS is set to 1_000 on clientEncryption\n     * const clientEncryption = new ClientEncryption(client, {\n     *  timeoutMS: 1_000\n     *  kmsProviders: { local: { key: '<KEY>' } }\n     * });\n     * ```\n     */\n    timeoutMS?: number;\n}\n\n/**\n * @public\n * @experimental\n */\nexport declare interface ClientEncryptionRewrapManyDataKeyProviderOptions {\n    provider: ClientEncryptionDataKeyProvider;\n    masterKey?: AWSEncryptionKeyOptions | AzureEncryptionKeyOptions | GCPEncryptionKeyOptions | KMIPEncryptionKeyOptions | undefined;\n}\n\n/**\n * @public\n * @experimental\n */\nexport declare interface ClientEncryptionRewrapManyDataKeyResult {\n    /** The result of rewrapping data keys. If unset, no keys matched the filter. */\n    bulkWriteResult?: BulkWriteResult;\n}\n\n/**\n * @public\n *\n * Socket options to use for KMS requests.\n */\nexport declare type ClientEncryptionSocketOptions = Pick<MongoClientOptions, 'autoSelectFamily' | 'autoSelectFamilyAttemptTimeout'>;\n\n/**\n * @public\n *\n * TLS options to use when connecting. The spec specifically calls out which insecure\n * tls options are not allowed:\n *\n *  - tlsAllowInvalidCertificates\n *  - tlsAllowInvalidHostnames\n *  - tlsInsecure\n *\n * These options are not included in the type, and are ignored if provided.\n */\nexport declare type ClientEncryptionTlsOptions = Pick<MongoClientOptions, 'tlsCAFile' | 'tlsCertificateKeyFile' | 'tlsCertificateKeyFilePassword'>;\n\n/** @public */\nexport declare interface ClientInsertOneModel<TSchema> extends ClientWriteModel {\n    name: 'insertOne';\n    /** The document to insert. */\n    document: OptionalId<TSchema>;\n}\n\n/** @public */\nexport declare interface ClientInsertOneResult {\n    /**\n     * The _id of the inserted document.\n     */\n    insertedId: any;\n}\n\n/**\n * @public\n * @see https://github.com/mongodb/specifications/blob/master/source/mongodb-handshake/handshake.md#hello-command\n */\nexport declare interface ClientMetadata {\n    driver: {\n        name: string;\n        version: string;\n    };\n    os: {\n        type: string;\n        name?: NodeJS.Platform;\n        architecture?: string;\n        version?: string;\n    };\n    platform: string;\n    application?: {\n        name: string;\n    };\n    /** FaaS environment information */\n    env?: {\n        name: 'aws.lambda' | 'gcp.func' | 'azure.func' | 'vercel';\n        timeout_sec?: Int32;\n        memory_mb?: Int32;\n        region?: string;\n        url?: string;\n    };\n}\n\n/** @public */\nexport declare interface ClientMetadataOptions {\n    driverInfo?: {\n        name?: string;\n        version?: string;\n        platform?: string;\n    };\n    appName?: string;\n}\n\n/** @public */\nexport declare interface ClientReplaceOneModel<TSchema> extends ClientWriteModel {\n    name: 'replaceOne';\n    /**\n     * The filter used to determine if a document should be replaced.\n     * For a replaceOne operation, the first match is replaced.\n     */\n    filter: Filter<TSchema>;\n    /** The document with which to replace the matched document. */\n    replacement: WithoutId<TSchema>;\n    /** Specifies a collation. */\n    collation?: CollationOptions;\n    /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n    hint?: Hint;\n    /** When true, creates a new document if no document matches the query. */\n    upsert?: boolean;\n}\n\n/**\n * A class representing a client session on the server\n *\n * NOTE: not meant to be instantiated directly.\n * @public\n */\nexport declare class ClientSession extends TypedEventEmitter<ClientSessionEvents> implements AsyncDisposable_2 {\n    /* Excluded from this release type: client */\n    /* Excluded from this release type: sessionPool */\n    hasEnded: boolean;\n    clientOptions: MongoOptions;\n    supports: {\n        causalConsistency: boolean;\n    };\n    clusterTime?: ClusterTime;\n    operationTime?: Timestamp;\n    explicit: boolean;\n    /* Excluded from this release type: owner */\n    defaultTransactionOptions: TransactionOptions;\n    transaction: Transaction;\n    /* Excluded from this release type: commitAttempted */\n    readonly snapshotEnabled: boolean;\n    /* Excluded from this release type: _serverSession */\n    /* Excluded from this release type: snapshotTime */\n    /* Excluded from this release type: pinnedConnection */\n    /* Excluded from this release type: txnNumberIncrement */\n    /**\n     * @experimental\n     * Specifies the time an operation in a given `ClientSession` will run until it throws a timeout error\n     */\n    timeoutMS?: number;\n    /* Excluded from this release type: timeoutContext */\n    /* Excluded from this release type: __constructor */\n    /** The server id associated with this session */\n    get id(): ServerSessionId | undefined;\n    get serverSession(): ServerSession;\n    get loadBalanced(): boolean;\n    /* Excluded from this release type: pin */\n    /* Excluded from this release type: unpin */\n    get isPinned(): boolean;\n    /**\n     * Frees any client-side resources held by the current session.  If a session is in a transaction,\n     * the transaction is aborted.\n     *\n     * Does not end the session on the server.\n     *\n     * @param options - Optional settings. Currently reserved for future use\n     */\n    endSession(options?: EndSessionOptions): Promise<void>;\n    /* Excluded from this release type: [Symbol.asyncDispose] */\n    /* Excluded from this release type: asyncDispose */\n    /**\n     * Advances the operationTime for a ClientSession.\n     *\n     * @param operationTime - the `BSON.Timestamp` of the operation type it is desired to advance to\n     */\n    advanceOperationTime(operationTime: Timestamp): void;\n    /**\n     * Advances the clusterTime for a ClientSession to the provided clusterTime of another ClientSession\n     *\n     * @param clusterTime - the $clusterTime returned by the server from another session in the form of a document containing the `BSON.Timestamp` clusterTime and signature\n     */\n    advanceClusterTime(clusterTime: ClusterTime): void;\n    /**\n     * Used to determine if this session equals another\n     *\n     * @param session - The session to compare to\n     */\n    equals(session: ClientSession): boolean;\n    /**\n     * Increment the transaction number on the internal ServerSession\n     *\n     * @privateRemarks\n     * This helper increments a value stored on the client session that will be\n     * added to the serverSession's txnNumber upon applying it to a command.\n     * This is because the serverSession is lazily acquired after a connection is obtained\n     */\n    incrementTransactionNumber(): void;\n    /** @returns whether this session is currently in a transaction or not */\n    inTransaction(): boolean;\n    /**\n     * Starts a new transaction with the given options.\n     *\n     * @remarks\n     * **IMPORTANT**: Running operations in parallel is not supported during a transaction. The use of `Promise.all`,\n     * `Promise.allSettled`, `Promise.race`, etc to parallelize operations inside a transaction is\n     * undefined behaviour.\n     *\n     * @param options - Options for the transaction\n     */\n    startTransaction(options?: TransactionOptions): void;\n    /**\n     * Commits the currently active transaction in this session.\n     *\n     * @param options - Optional options, can be used to override `defaultTimeoutMS`.\n     */\n    commitTransaction(options?: {\n        timeoutMS?: number;\n    }): Promise<void>;\n    /**\n     * Aborts the currently active transaction in this session.\n     *\n     * @param options - Optional options, can be used to override `defaultTimeoutMS`.\n     */\n    abortTransaction(options?: {\n        timeoutMS?: number;\n    }): Promise<void>;\n    /* Excluded from this release type: abortTransaction */\n    /**\n     * This is here to ensure that ClientSession is never serialized to BSON.\n     */\n    toBSON(): never;\n    /**\n     * Starts a transaction and runs a provided function, ensuring the commitTransaction is always attempted when all operations run in the function have completed.\n     *\n     * **IMPORTANT:** This method requires the function passed in to return a Promise. That promise must be made by `await`-ing all operations in such a way that rejections are propagated to the returned promise.\n     *\n     * **IMPORTANT:** Running operations in parallel is not supported during a transaction. The use of `Promise.all`,\n     * `Promise.allSettled`, `Promise.race`, etc to parallelize operations inside a transaction is\n     * undefined behaviour.\n     *\n     * **IMPORTANT:** When running an operation inside a `withTransaction` callback, if it is not\n     * provided the explicit session in its options, it will not be part of the transaction and it will not respect timeoutMS.\n     *\n     *\n     * @remarks\n     * - If all operations successfully complete and the `commitTransaction` operation is successful, then the provided function will return the result of the provided function.\n     * - If the transaction is unable to complete or an error is thrown from within the provided function, then the provided function will throw an error.\n     *   - If the transaction is manually aborted within the provided function it will not throw.\n     * - If the driver needs to attempt to retry the operations, the provided function may be called multiple times.\n     *\n     * Checkout a descriptive example here:\n     * @see https://www.mongodb.com/blog/post/quick-start-nodejs--mongodb--how-to-implement-transactions\n     *\n     * If a command inside withTransaction fails:\n     * - It may cause the transaction on the server to be aborted.\n     * - This situation is normally handled transparently by the driver.\n     * - However, if the application catches such an error and does not rethrow it, the driver will not be able to determine whether the transaction was aborted or not.\n     * - The driver will then retry the transaction indefinitely.\n     *\n     * To avoid this situation, the application must not silently handle errors within the provided function.\n     * If the application needs to handle errors within, it must await all operations such that if an operation is rejected it becomes the rejection of the callback function passed into withTransaction.\n     *\n     * @param fn - callback to run within a transaction\n     * @param options - optional settings for the transaction\n     * @returns A raw command response or undefined\n     */\n    withTransaction<T = any>(fn: WithTransactionCallback<T>, options?: TransactionOptions & {\n        /**\n         * Configures a timeoutMS expiry for the entire withTransactionCallback.\n         *\n         * @remarks\n         * - The remaining timeout will not be applied to callback operations that do not use the ClientSession.\n         * - Overriding timeoutMS for operations executed using the explicit session inside the provided callback will result in a client-side error.\n         */\n        timeoutMS?: number;\n    }): Promise<T>;\n}\n\n/** @public */\nexport declare type ClientSessionEvents = {\n    ended(session: ClientSession): void;\n};\n\n/** @public */\nexport declare interface ClientSessionOptions {\n    /** Whether causal consistency should be enabled on this session */\n    causalConsistency?: boolean;\n    /** Whether all read operations should be read from the same snapshot for this session (NOTE: not compatible with `causalConsistency=true`) */\n    snapshot?: boolean;\n    /** The default TransactionOptions to use for transactions started on this session. */\n    defaultTransactionOptions?: TransactionOptions;\n    /**\n     * @public\n     * @experimental\n     * An overriding timeoutMS value to use for a client-side timeout.\n     * If not provided the session uses the timeoutMS specified on the MongoClient.\n     */\n    defaultTimeoutMS?: number;\n    /* Excluded from this release type: owner */\n    /* Excluded from this release type: explicit */\n    /* Excluded from this release type: initialClusterTime */\n}\n\n/** @public */\nexport declare interface ClientUpdateManyModel<TSchema> extends ClientWriteModel {\n    name: 'updateMany';\n    /**\n     * The filter used to determine if a document should be updated.\n     * For an updateMany operation, all matches are updated.\n     */\n    filter: Filter<TSchema>;\n    /**\n     * The modifications to apply. The value can be either:\n     * UpdateFilter<Document> - A document that contains update operator expressions,\n     * Document[] - an aggregation pipeline.\n     */\n    update: UpdateFilter<TSchema> | Document[];\n    /** A set of filters specifying to which array elements an update should apply. */\n    arrayFilters?: Document[];\n    /** Specifies a collation. */\n    collation?: CollationOptions;\n    /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n    hint?: Hint;\n    /** When true, creates a new document if no document matches the query. */\n    upsert?: boolean;\n}\n\n/** @public */\nexport declare interface ClientUpdateOneModel<TSchema> extends ClientWriteModel {\n    name: 'updateOne';\n    /**\n     * The filter used to determine if a document should be updated.\n     * For an updateOne operation, the first match is updated.\n     */\n    filter: Filter<TSchema>;\n    /**\n     * The modifications to apply. The value can be either:\n     * UpdateFilter<Document> - A document that contains update operator expressions,\n     * Document[] - an aggregation pipeline.\n     */\n    update: UpdateFilter<TSchema> | Document[];\n    /** A set of filters specifying to which array elements an update should apply. */\n    arrayFilters?: Document[];\n    /** Specifies a collation. */\n    collation?: CollationOptions;\n    /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n    hint?: Hint;\n    /** When true, creates a new document if no document matches the query. */\n    upsert?: boolean;\n}\n\n/** @public */\nexport declare interface ClientUpdateResult {\n    /**\n     * The number of documents that matched the filter.\n     */\n    matchedCount: number;\n    /**\n     * The number of documents that were modified.\n     */\n    modifiedCount: number;\n    /**\n     * The _id field of the upserted document if an upsert occurred.\n     *\n     * It MUST be possible to discern between a BSON Null upserted ID value and this field being\n     * unset. If necessary, drivers MAY add a didUpsert boolean field to differentiate between\n     * these two cases.\n     */\n    upsertedId?: any;\n    /**\n     * Determines if the upsert did include an _id, which includes the case of the _id being null.\n     */\n    didUpsert: boolean;\n}\n\n/** @public */\nexport declare interface ClientWriteModel {\n    /**\n     * The namespace for the write.\n     *\n     * A namespace is a combination of the database name and the name of the collection: `<database-name>.<collection>`.\n     * All documents belong to a namespace.\n     *\n     * @see https://www.mongodb.com/docs/manual/reference/limits/#std-label-faq-dev-namespace\n     */\n    namespace: string;\n}\n\n/**\n * @public\n * @deprecated This interface is deprecated and will be removed in a future release as it is not used\n * in the driver\n */\nexport declare interface CloseOptions {\n    force?: boolean;\n}\n\n/** @public\n * Configuration options for clustered collections\n * @see https://www.mongodb.com/docs/manual/core/clustered-collections/\n */\nexport declare interface ClusteredCollectionOptions extends Document {\n    name?: string;\n    key: Document;\n    unique: boolean;\n}\n\n/**\n * @public\n * Gossiped in component for the cluster time tracking the state of user databases\n * across the cluster. It may optionally include a signature identifying the process that\n * generated such a value.\n */\nexport declare interface ClusterTime {\n    clusterTime: Timestamp;\n    /** Used to validate the identity of a request or response's ClusterTime. */\n    signature?: {\n        hash: Binary;\n        keyId: Long;\n    };\n}\n\nexport { Code }\n\n/** @public */\nexport declare interface CollationOptions {\n    locale: string;\n    caseLevel?: boolean;\n    caseFirst?: string;\n    strength?: number;\n    numericOrdering?: boolean;\n    alternate?: string;\n    maxVariable?: string;\n    backwards?: boolean;\n    normalization?: boolean;\n}\n\n/**\n * The **Collection** class is an internal class that embodies a MongoDB collection\n * allowing for insert/find/update/delete and other command operation on that MongoDB collection.\n *\n * **COLLECTION Cannot directly be instantiated**\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from '/mongodb.ts';\n *\n * interface Pet {\n *   name: string;\n *   kind: 'dog' | 'cat' | 'fish';\n * }\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const pets = client.db().collection<Pet>('pets');\n *\n * const petCursor = pets.find();\n *\n * for await (const pet of petCursor) {\n *   console.log(`${pet.name} is a ${pet.kind}!`);\n * }\n * ```\n */\nexport declare class Collection<TSchema extends Document = Document> {\n    /* Excluded from this release type: s */\n    /* Excluded from this release type: client */\n    /* Excluded from this release type: __constructor */\n    /**\n     * The name of the database this collection belongs to\n     */\n    get dbName(): string;\n    /**\n     * The name of this collection\n     */\n    get collectionName(): string;\n    /**\n     * The namespace of this collection, in the format `${this.dbName}.${this.collectionName}`\n     */\n    get namespace(): string;\n    /* Excluded from this release type: fullNamespace */\n    /**\n     * The current readConcern of the collection. If not explicitly defined for\n     * this collection, will be inherited from the parent DB\n     */\n    get readConcern(): ReadConcern | undefined;\n    /**\n     * The current readPreference of the collection. If not explicitly defined for\n     * this collection, will be inherited from the parent DB\n     */\n    get readPreference(): ReadPreference | undefined;\n    get bsonOptions(): BSONSerializeOptions;\n    /**\n     * The current writeConcern of the collection. If not explicitly defined for\n     * this collection, will be inherited from the parent DB\n     */\n    get writeConcern(): WriteConcern | undefined;\n    /** The current index hint for the collection */\n    get hint(): Hint | undefined;\n    set hint(v: Hint | undefined);\n    get timeoutMS(): number | undefined;\n    /**\n     * Inserts a single document into MongoDB. If documents passed in do not contain the **_id** field,\n     * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n     * can be overridden by setting the **forceServerObjectId** flag.\n     *\n     * @param doc - The document to insert\n     * @param options - Optional settings for the command\n     */\n    insertOne(doc: OptionalUnlessRequiredId<TSchema>, options?: InsertOneOptions): Promise<InsertOneResult<TSchema>>;\n    /**\n     * Inserts an array of documents into MongoDB. If documents passed in do not contain the **_id** field,\n     * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n     * can be overridden by setting the **forceServerObjectId** flag.\n     *\n     * @param docs - The documents to insert\n     * @param options - Optional settings for the command\n     */\n    insertMany(docs: ReadonlyArray<OptionalUnlessRequiredId<TSchema>>, options?: BulkWriteOptions): Promise<InsertManyResult<TSchema>>;\n    /**\n     * Perform a bulkWrite operation without a fluent API\n     *\n     * Legal operation types are\n     * - `insertOne`\n     * - `replaceOne`\n     * - `updateOne`\n     * - `updateMany`\n     * - `deleteOne`\n     * - `deleteMany`\n     *\n     * If documents passed in do not contain the **_id** field,\n     * one will be added to each of the documents missing it by the driver, mutating the document. This behavior\n     * can be overridden by setting the **forceServerObjectId** flag.\n     *\n     * @param operations - Bulk operations to perform\n     * @param options - Optional settings for the command\n     * @throws MongoDriverError if operations is not an array\n     */\n    bulkWrite(operations: ReadonlyArray<AnyBulkWriteOperation<TSchema>>, options?: BulkWriteOptions): Promise<BulkWriteResult>;\n    /**\n     * Update a single document in a collection\n     *\n     * The value of `update` can be either:\n     * - UpdateFilter<TSchema> - A document that contains update operator expressions,\n     * - Document[] - an aggregation pipeline.\n     *\n     * @param filter - The filter used to select the document to update\n     * @param update - The modifications to apply\n     * @param options - Optional settings for the command\n     */\n    updateOne(filter: Filter<TSchema>, update: UpdateFilter<TSchema> | Document[], options?: UpdateOptions): Promise<UpdateResult<TSchema>>;\n    /**\n     * Replace a document in a collection with another document\n     *\n     * @param filter - The filter used to select the document to replace\n     * @param replacement - The Document that replaces the matching document\n     * @param options - Optional settings for the command\n     */\n    replaceOne(filter: Filter<TSchema>, replacement: WithoutId<TSchema>, options?: ReplaceOptions): Promise<UpdateResult<TSchema>>;\n    /**\n     * Update multiple documents in a collection\n     *\n     * The value of `update` can be either:\n     * - UpdateFilter<TSchema> - A document that contains update operator expressions,\n     * - Document[] - an aggregation pipeline.\n     *\n     * @param filter - The filter used to select the document to update\n     * @param update - The modifications to apply\n     * @param options - Optional settings for the command\n     */\n    updateMany(filter: Filter<TSchema>, update: UpdateFilter<TSchema> | Document[], options?: UpdateOptions): Promise<UpdateResult<TSchema>>;\n    /**\n     * Delete a document from a collection\n     *\n     * @param filter - The filter used to select the document to remove\n     * @param options - Optional settings for the command\n     */\n    deleteOne(filter?: Filter<TSchema>, options?: DeleteOptions): Promise<DeleteResult>;\n    /**\n     * Delete multiple documents from a collection\n     *\n     * @param filter - The filter used to select the documents to remove\n     * @param options - Optional settings for the command\n     */\n    deleteMany(filter?: Filter<TSchema>, options?: DeleteOptions): Promise<DeleteResult>;\n    /**\n     * Rename the collection.\n     *\n     * @remarks\n     * This operation does not inherit options from the Db or MongoClient.\n     *\n     * @param newName - New name of of the collection.\n     * @param options - Optional settings for the command\n     */\n    rename(newName: string, options?: RenameOptions): Promise<Collection>;\n    /**\n     * Drop the collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    drop(options?: DropCollectionOptions): Promise<boolean>;\n    /**\n     * Fetches the first document that matches the filter\n     *\n     * @param filter - Query for find Operation\n     * @param options - Optional settings for the command\n     */\n    findOne(): Promise<WithId<TSchema> | null>;\n    findOne(filter: Filter<TSchema>): Promise<WithId<TSchema> | null>;\n    findOne(filter: Filter<TSchema>, options: Omit<FindOptions, 'timeoutMode'> & Abortable): Promise<WithId<TSchema> | null>;\n    findOne<T = TSchema>(): Promise<T | null>;\n    findOne<T = TSchema>(filter: Filter<TSchema>): Promise<T | null>;\n    findOne<T = TSchema>(filter: Filter<TSchema>, options?: Omit<FindOptions, 'timeoutMode'> & Abortable): Promise<T | null>;\n    /**\n     * Creates a cursor for a filter that can be used to iterate over results from MongoDB\n     *\n     * @param filter - The filter predicate. If unspecified, then all documents in the collection will match the predicate\n     */\n    find(): FindCursor<WithId<TSchema>>;\n    find(filter: Filter<TSchema>, options?: FindOptions & Abortable): FindCursor<WithId<TSchema>>;\n    find<T extends Document>(filter: Filter<TSchema>, options?: FindOptions & Abortable): FindCursor<T>;\n    /**\n     * Returns the options of the collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    options(options?: OperationOptions): Promise<Document>;\n    /**\n     * Returns if the collection is a capped collection\n     *\n     * @param options - Optional settings for the command\n     */\n    isCapped(options?: OperationOptions): Promise<boolean>;\n    /**\n     * Creates an index on the db and collection collection.\n     *\n     * @param indexSpec - The field name or index specification to create an index for\n     * @param options - Optional settings for the command\n     *\n     * @example\n     * ```ts\n     * const collection = client.db('foo').collection('bar');\n     *\n     * await collection.createIndex({ a: 1, b: -1 });\n     *\n     * // Alternate syntax for { c: 1, d: -1 } that ensures order of indexes\n     * await collection.createIndex([ [c, 1], [d, -1] ]);\n     *\n     * // Equivalent to { e: 1 }\n     * await collection.createIndex('e');\n     *\n     * // Equivalent to { f: 1, g: 1 }\n     * await collection.createIndex(['f', 'g'])\n     *\n     * // Equivalent to { h: 1, i: -1 }\n     * await collection.createIndex([ { h: 1 }, { i: -1 } ]);\n     *\n     * // Equivalent to { j: 1, k: -1, l: 2d }\n     * await collection.createIndex(['j', ['k', -1], { l: '2d' }])\n     * ```\n     */\n    createIndex(indexSpec: IndexSpecification, options?: CreateIndexesOptions): Promise<string>;\n    /**\n     * Creates multiple indexes in the collection, this method is only supported for\n     * MongoDB 2.6 or higher. Earlier version of MongoDB will throw a command not supported\n     * error.\n     *\n     * **Note**: Unlike {@link Collection#createIndex| createIndex}, this function takes in raw index specifications.\n     * Index specifications are defined {@link https://www.mongodb.com/docs/manual/reference/command/createIndexes/| here}.\n     *\n     * @param indexSpecs - An array of index specifications to be created\n     * @param options - Optional settings for the command\n     *\n     * @example\n     * ```ts\n     * const collection = client.db('foo').collection('bar');\n     * await collection.createIndexes([\n     *   // Simple index on field fizz\n     *   {\n     *     key: { fizz: 1 },\n     *   }\n     *   // wildcard index\n     *   {\n     *     key: { '$**': 1 }\n     *   },\n     *   // named index on darmok and jalad\n     *   {\n     *     key: { darmok: 1, jalad: -1 }\n     *     name: 'tanagra'\n     *   }\n     * ]);\n     * ```\n     */\n    createIndexes(indexSpecs: IndexDescription[], options?: CreateIndexesOptions): Promise<string[]>;\n    /**\n     * Drops an index from this collection.\n     *\n     * @param indexName - Name of the index to drop.\n     * @param options - Optional settings for the command\n     */\n    dropIndex(indexName: string, options?: DropIndexesOptions): Promise<Document>;\n    /**\n     * Drops all indexes from this collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    dropIndexes(options?: DropIndexesOptions): Promise<boolean>;\n    /**\n     * Get the list of all indexes information for the collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    listIndexes(options?: ListIndexesOptions): ListIndexesCursor;\n    /**\n     * Checks if one or more indexes exist on the collection, fails on first non-existing index\n     *\n     * @param indexes - One or more index names to check.\n     * @param options - Optional settings for the command\n     */\n    indexExists(indexes: string | string[], options?: ListIndexesOptions): Promise<boolean>;\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param options - Optional settings for the command\n     */\n    indexInformation(options: IndexInformationOptions & {\n        full: true;\n    }): Promise<IndexDescriptionInfo[]>;\n    indexInformation(options: IndexInformationOptions & {\n        full?: false;\n    }): Promise<IndexDescriptionCompact>;\n    indexInformation(options: IndexInformationOptions): Promise<IndexDescriptionCompact | IndexDescriptionInfo[]>;\n    indexInformation(): Promise<IndexDescriptionCompact>;\n    /**\n     * Gets an estimate of the count of documents in a collection using collection metadata.\n     * This will always run a count command on all server versions.\n     *\n     * due to an oversight in versions 5.0.0-5.0.8 of MongoDB, the count command,\n     * which estimatedDocumentCount uses in its implementation, was not included in v1 of\n     * the Stable API, and so users of the Stable API with estimatedDocumentCount are\n     * recommended to upgrade their server version to 5.0.9+ or set apiStrict: false to avoid\n     * encountering errors.\n     *\n     * @see {@link https://www.mongodb.com/docs/manual/reference/command/count/#behavior|Count: Behavior}\n     * @param options - Optional settings for the command\n     */\n    estimatedDocumentCount(options?: EstimatedDocumentCountOptions): Promise<number>;\n    /**\n     * Gets the number of documents matching the filter.\n     * For a fast count of the total documents in a collection see {@link Collection#estimatedDocumentCount| estimatedDocumentCount}.\n     *\n     * Due to countDocuments using the $match aggregation pipeline stage, certain query operators cannot be used in countDocuments. This includes the $where and $near query operators, among others. Details can be found in the documentation for the $match aggregation pipeline stage.\n     *\n     * **Note**: When migrating from {@link Collection#count| count} to {@link Collection#countDocuments| countDocuments}\n     * the following query operators must be replaced:\n     *\n     * | Operator | Replacement |\n     * | -------- | ----------- |\n     * | `$where`   | [`$expr`][1] |\n     * | `$near`    | [`$geoWithin`][2] with [`$center`][3] |\n     * | `$nearSphere` | [`$geoWithin`][2] with [`$centerSphere`][4] |\n     *\n     * [1]: https://www.mongodb.com/docs/manual/reference/operator/query/expr/\n     * [2]: https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/\n     * [3]: https://www.mongodb.com/docs/manual/reference/operator/query/center/#op._S_center\n     * [4]: https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/#op._S_centerSphere\n     *\n     * @param filter - The filter for the count\n     * @param options - Optional settings for the command\n     *\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/expr/\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/center/#op._S_center\n     * @see https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/#op._S_centerSphere\n     */\n    countDocuments(filter?: Filter<TSchema>, options?: CountDocumentsOptions & Abortable): Promise<number>;\n    /**\n     * The distinct command returns a list of distinct values for the given key across a collection.\n     *\n     * @param key - Field of the document to find distinct values for\n     * @param filter - The filter for filtering the set of documents to which we apply the distinct filter.\n     * @param options - Optional settings for the command\n     */\n    distinct<Key extends keyof WithId<TSchema>>(key: Key): Promise<Array<Flatten<WithId<TSchema>[Key]>>>;\n    distinct<Key extends keyof WithId<TSchema>>(key: Key, filter: Filter<TSchema>): Promise<Array<Flatten<WithId<TSchema>[Key]>>>;\n    distinct<Key extends keyof WithId<TSchema>>(key: Key, filter: Filter<TSchema>, options: DistinctOptions): Promise<Array<Flatten<WithId<TSchema>[Key]>>>;\n    distinct(key: string): Promise<any[]>;\n    distinct(key: string, filter: Filter<TSchema>): Promise<any[]>;\n    distinct(key: string, filter: Filter<TSchema>, options: DistinctOptions): Promise<any[]>;\n    /**\n     * Retrieve all the indexes on the collection.\n     *\n     * @param options - Optional settings for the command\n     */\n    indexes(options: IndexInformationOptions & {\n        full?: true;\n    }): Promise<IndexDescriptionInfo[]>;\n    indexes(options: IndexInformationOptions & {\n        full: false;\n    }): Promise<IndexDescriptionCompact>;\n    indexes(options: IndexInformationOptions): Promise<IndexDescriptionCompact | IndexDescriptionInfo[]>;\n    indexes(options?: ListIndexesOptions): Promise<IndexDescriptionInfo[]>;\n    /**\n     * Find a document and delete it in one atomic operation. Requires a write lock for the duration of the operation.\n     *\n     * @param filter - The filter used to select the document to remove\n     * @param options - Optional settings for the command\n     */\n    findOneAndDelete(filter: Filter<TSchema>, options: FindOneAndDeleteOptions & {\n        includeResultMetadata: true;\n    }): Promise<ModifyResult<TSchema>>;\n    findOneAndDelete(filter: Filter<TSchema>, options: FindOneAndDeleteOptions & {\n        includeResultMetadata: false;\n    }): Promise<WithId<TSchema> | null>;\n    findOneAndDelete(filter: Filter<TSchema>, options: FindOneAndDeleteOptions): Promise<WithId<TSchema> | null>;\n    findOneAndDelete(filter: Filter<TSchema>): Promise<WithId<TSchema> | null>;\n    /**\n     * Find a document and replace it in one atomic operation. Requires a write lock for the duration of the operation.\n     *\n     * @param filter - The filter used to select the document to replace\n     * @param replacement - The Document that replaces the matching document\n     * @param options - Optional settings for the command\n     */\n    findOneAndReplace(filter: Filter<TSchema>, replacement: WithoutId<TSchema>, options: FindOneAndReplaceOptions & {\n        includeResultMetadata: true;\n    }): Promise<ModifyResult<TSchema>>;\n    findOneAndReplace(filter: Filter<TSchema>, replacement: WithoutId<TSchema>, options: FindOneAndReplaceOptions & {\n        includeResultMetadata: false;\n    }): Promise<WithId<TSchema> | null>;\n    findOneAndReplace(filter: Filter<TSchema>, replacement: WithoutId<TSchema>, options: FindOneAndReplaceOptions): Promise<WithId<TSchema> | null>;\n    findOneAndReplace(filter: Filter<TSchema>, replacement: WithoutId<TSchema>): Promise<WithId<TSchema> | null>;\n    /**\n     * Find a document and update it in one atomic operation. Requires a write lock for the duration of the operation.\n     *\n     * The value of `update` can be either:\n     * - UpdateFilter<TSchema> - A document that contains update operator expressions,\n     * - Document[] - an aggregation pipeline consisting of the following stages:\n     *   - $addFields and its alias $set\n     *   - $project and its alias $unset\n     *   - $replaceRoot and its alias $replaceWith.\n     * See the [findAndModify command documentation](https://www.mongodb.com/docs/manual/reference/command/findAndModify) for details.\n     *\n     * @param filter - The filter used to select the document to update\n     * @param update - The modifications to apply\n     * @param options - Optional settings for the command\n     */\n    findOneAndUpdate(filter: Filter<TSchema>, update: UpdateFilter<TSchema> | Document[], options: FindOneAndUpdateOptions & {\n        includeResultMetadata: true;\n    }): Promise<ModifyResult<TSchema>>;\n    findOneAndUpdate(filter: Filter<TSchema>, update: UpdateFilter<TSchema> | Document[], options: FindOneAndUpdateOptions & {\n        includeResultMetadata: false;\n    }): Promise<WithId<TSchema> | null>;\n    findOneAndUpdate(filter: Filter<TSchema>, update: UpdateFilter<TSchema> | Document[], options: FindOneAndUpdateOptions): Promise<WithId<TSchema> | null>;\n    findOneAndUpdate(filter: Filter<TSchema>, update: UpdateFilter<TSchema> | Document[]): Promise<WithId<TSchema> | null>;\n    /**\n     * Execute an aggregation framework pipeline against the collection, needs MongoDB \\>= 2.2\n     *\n     * @param pipeline - An array of aggregation pipelines to execute\n     * @param options - Optional settings for the command\n     */\n    aggregate<T extends Document = Document>(pipeline?: Document[], options?: AggregateOptions & Abortable): AggregationCursor<T>;\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates, replacements, deletions, and invalidations) in this collection.\n     *\n     * @remarks\n     * watch() accepts two generic arguments for distinct use cases:\n     * - The first is to override the schema that may be defined for this specific collection\n     * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n     * @example\n     * By just providing the first argument I can type the change to be `ChangeStreamDocument<{ _id: number }>`\n     * ```ts\n     * collection.watch<{ _id: number }>()\n     *   .on('change', change => console.log(change._id.toFixed(4)));\n     * ```\n     *\n     * @example\n     * Passing a second argument provides a way to reflect the type changes caused by an advanced pipeline.\n     * Here, we are using a pipeline to have MongoDB filter for insert changes only and add a comment.\n     * No need start from scratch on the ChangeStreamInsertDocument type!\n     * By using an intersection we can save time and ensure defaults remain the same type!\n     * ```ts\n     * collection\n     *   .watch<Schema, ChangeStreamInsertDocument<Schema> & { comment: string }>([\n     *     { $addFields: { comment: 'big changes' } },\n     *     { $match: { operationType: 'insert' } }\n     *   ])\n     *   .on('change', change => {\n     *     change.comment.startsWith('big');\n     *     change.operationType === 'insert';\n     *     // No need to narrow in code because the generics did that for us!\n     *     expectType<Schema>(change.fullDocument);\n     *   });\n     * ```\n     *\n     * @remarks\n     * When `timeoutMS` is configured for a change stream, it will have different behaviour depending\n     * on whether the change stream is in iterator mode or emitter mode. In both cases, a change\n     * stream will time out if it does not receive a change event within `timeoutMS` of the last change\n     * event.\n     *\n     * Note that if a change stream is consistently timing out when watching a collection, database or\n     * client that is being changed, then this may be due to the server timing out before it can finish\n     * processing the existing oplog. To address this, restart the change stream with a higher\n     * `timeoutMS`.\n     *\n     * If the change stream times out the initial aggregate operation to establish the change stream on\n     * the server, then the client will close the change stream. If the getMore calls to the server\n     * time out, then the change stream will be left open, but will throw a MongoOperationTimeoutError\n     * when in iterator mode and emit an error event that returns a MongoOperationTimeoutError in\n     * emitter mode.\n     *\n     * To determine whether or not the change stream is still open following a timeout, check the\n     * {@link ChangeStream.closed} getter.\n     *\n     * @example\n     * In iterator mode, if a next() call throws a timeout error, it will attempt to resume the change stream.\n     * The next call can just be retried after this succeeds.\n     * ```ts\n     * const changeStream = collection.watch([], { timeoutMS: 100 });\n     * try {\n     *     await changeStream.next();\n     * } catch (e) {\n     *     if (e instanceof MongoOperationTimeoutError && !changeStream.closed) {\n     *       await changeStream.next();\n     *     }\n     *     throw e;\n     * }\n     * ```\n     *\n     * @example\n     * In emitter mode, if the change stream goes `timeoutMS` without emitting a change event, it will\n     * emit an error event that returns a MongoOperationTimeoutError, but will not close the change\n     * stream unless the resume attempt fails. There is no need to re-establish change listeners as\n     * this will automatically continue emitting change events once the resume attempt completes.\n     *\n     * ```ts\n     * const changeStream = collection.watch([], { timeoutMS: 100 });\n     * changeStream.on('change', console.log);\n     * changeStream.on('error', e => {\n     *     if (e instanceof MongoOperationTimeoutError && !changeStream.closed) {\n     *         // do nothing\n     *     } else {\n     *         changeStream.close();\n     *     }\n     * });\n     * ```\n     *\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options - Optional settings for the command\n     * @typeParam TLocal - Type of the data being detected by the change stream\n     * @typeParam TChange - Type of the whole change stream document emitted\n     */\n    watch<TLocal extends Document = TSchema, TChange extends Document = ChangeStreamDocument<TLocal>>(pipeline?: Document[], options?: ChangeStreamOptions): ChangeStream<TLocal, TChange>;\n    /**\n     * Initiate an Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n     *\n     * @throws MongoNotConnectedError\n     * @remarks\n     * **NOTE:** MongoClient must be connected prior to calling this method due to a known limitation in this legacy implementation.\n     * However, `collection.bulkWrite()` provides an equivalent API that does not require prior connecting.\n     */\n    initializeUnorderedBulkOp(options?: BulkWriteOptions): UnorderedBulkOperation;\n    /**\n     * Initiate an In order bulk write operation. Operations will be serially executed in the order they are added, creating a new operation for each switch in types.\n     *\n     * @throws MongoNotConnectedError\n     * @remarks\n     * **NOTE:** MongoClient must be connected prior to calling this method due to a known limitation in this legacy implementation.\n     * However, `collection.bulkWrite()` provides an equivalent API that does not require prior connecting.\n     */\n    initializeOrderedBulkOp(options?: BulkWriteOptions): OrderedBulkOperation;\n    /**\n     * An estimated count of matching documents in the db to a filter.\n     *\n     * **NOTE:** This method has been deprecated, since it does not provide an accurate count of the documents\n     * in a collection. To obtain an accurate count of documents in the collection, use {@link Collection#countDocuments| countDocuments}.\n     * To obtain an estimated count of all documents in the collection, use {@link Collection#estimatedDocumentCount| estimatedDocumentCount}.\n     *\n     * @deprecated use {@link Collection#countDocuments| countDocuments} or {@link Collection#estimatedDocumentCount| estimatedDocumentCount} instead\n     *\n     * @param filter - The filter for the count.\n     * @param options - Optional settings for the command\n     */\n    count(filter?: Filter<TSchema>, options?: CountOptions): Promise<number>;\n    /**\n     * Returns all search indexes for the current collection.\n     *\n     * @param options - The options for the list indexes operation.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     */\n    listSearchIndexes(options?: ListSearchIndexesOptions): ListSearchIndexesCursor;\n    /**\n     * Returns all search indexes for the current collection.\n     *\n     * @param name - The name of the index to search for.  Only indexes with matching index names will be returned.\n     * @param options - The options for the list indexes operation.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     */\n    listSearchIndexes(name: string, options?: ListSearchIndexesOptions): ListSearchIndexesCursor;\n    /**\n     * Creates a single search index for the collection.\n     *\n     * @param description - The index description for the new search index.\n     * @returns A promise that resolves to the name of the new search index.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     */\n    createSearchIndex(description: SearchIndexDescription): Promise<string>;\n    /**\n     * Creates multiple search indexes for the current collection.\n     *\n     * @param descriptions - An array of `SearchIndexDescription`s for the new search indexes.\n     * @returns A promise that resolves to an array of the newly created search index names.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     * @returns\n     */\n    createSearchIndexes(descriptions: SearchIndexDescription[]): Promise<string[]>;\n    /**\n     * Deletes a search index by index name.\n     *\n     * @param name - The name of the search index to be deleted.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     */\n    dropSearchIndex(name: string): Promise<void>;\n    /**\n     * Updates a search index by replacing the existing index definition with the provided definition.\n     *\n     * @param name - The name of the search index to update.\n     * @param definition - The new search index definition.\n     *\n     * @remarks Only available when used against a 7.0+ Atlas cluster.\n     */\n    updateSearchIndex(name: string, definition: Document): Promise<void>;\n}\n\n/** @public */\nexport declare interface CollectionInfo extends Document {\n    name: string;\n    type?: string;\n    options?: Document;\n    info?: {\n        readOnly?: false;\n        uuid?: Binary;\n    };\n    idIndex?: Document;\n}\n\n/** @public */\nexport declare interface CollectionOptions extends BSONSerializeOptions, WriteConcernOptions {\n    /** Specify a read concern for the collection. (only MongoDB 3.2 or higher supported) */\n    readConcern?: ReadConcernLike;\n    /** The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST). */\n    readPreference?: ReadPreferenceLike;\n    /**\n     * @experimental\n     * Specifies the time an operation will run until it throws a timeout error\n     */\n    timeoutMS?: number;\n}\n\n/* Excluded from this release type: CollectionPrivate */\n\n/* Excluded from this release type: COMMAND_FAILED */\n\n/* Excluded from this release type: COMMAND_STARTED */\n\n/* Excluded from this release type: COMMAND_SUCCEEDED */\n\n/**\n * An event indicating the failure of a given command\n * @public\n * @category Event\n */\nexport declare class CommandFailedEvent {\n    address: string;\n    /** Driver generated connection id */\n    connectionId?: string | number;\n    /**\n     * Server generated connection id\n     * Distinct from the connection id and is returned by the hello or legacy hello response as \"connectionId\" from the server on 4.2+.\n     */\n    serverConnectionId: bigint | null;\n    requestId: number;\n    duration: number;\n    commandName: string;\n    failure: Error;\n    serviceId?: ObjectId;\n    /* Excluded from this release type: name */\n    /* Excluded from this release type: __constructor */\n    get hasServiceId(): boolean;\n}\n\n/* Excluded from this release type: CommandOperation */\n\n/** @public */\nexport declare interface CommandOperationOptions extends OperationOptions, WriteConcernOptions, ExplainOptions {\n    /** Specify a read concern and level for the collection. (only MongoDB 3.2 or higher supported) */\n    readConcern?: ReadConcernLike;\n    /** Collation */\n    collation?: CollationOptions;\n    /**\n     * maxTimeMS is a server-side time limit in milliseconds for processing an operation.\n     */\n    maxTimeMS?: number;\n    /**\n     * Comment to apply to the operation.\n     *\n     * In server versions pre-4.4, 'comment' must be string.  A server\n     * error will be thrown if any other type is provided.\n     *\n     * In server versions 4.4 and above, 'comment' can be any valid BSON type.\n     */\n    comment?: unknown;\n    /** Should retry failed writes */\n    retryWrites?: boolean;\n    dbName?: string;\n    authdb?: string;\n    noResponse?: boolean;\n}\n\n/* Excluded from this release type: CommandOptions */\n\n/**\n * An event indicating the start of a given command\n * @public\n * @category Event\n */\nexport declare class CommandStartedEvent {\n    commandObj?: Document;\n    requestId: number;\n    databaseName: string;\n    commandName: string;\n    command: Document;\n    address: string;\n    /** Driver generated connection id */\n    connectionId?: string | number;\n    /**\n     * Server generated connection id\n     * Distinct from the connection id and is returned by the hello or legacy hello response as \"connectionId\"\n     * from the server on 4.2+.\n     */\n    serverConnectionId: bigint | null;\n    serviceId?: ObjectId;\n    /* Excluded from this release type: name */\n    /* Excluded from this release type: __constructor */\n    get hasServiceId(): boolean;\n}\n\n/**\n * An event indicating the success of a given command\n * @public\n * @category Event\n */\nexport declare class CommandSucceededEvent {\n    address: string;\n    /** Driver generated connection id */\n    connectionId?: string | number;\n    /**\n     * Server generated connection id\n     * Distinct from the connection id and is returned by the hello or legacy hello response as \"connectionId\" from the server on 4.2+.\n     */\n    serverConnectionId: bigint | null;\n    requestId: number;\n    duration: number;\n    commandName: string;\n    reply: unknown;\n    serviceId?: ObjectId;\n    /* Excluded from this release type: name */\n    /* Excluded from this release type: __constructor */\n    get hasServiceId(): boolean;\n}\n\n/** @public */\nexport declare type CommonEvents = 'newListener' | 'removeListener';\n\n/** @public */\nexport declare const Compressor: Readonly<{\n    readonly none: 0;\n    readonly snappy: 1;\n    readonly zlib: 2;\n    readonly zstd: 3;\n}>;\n\n/** @public */\nexport declare type Compressor = (typeof Compressor)[CompressorName];\n\n/** @public */\nexport declare type CompressorName = keyof typeof Compressor;\n\n/** @public */\nexport declare type Condition<T> = AlternativeType<T> | FilterOperators<AlternativeType<T>>;\n\n/* Excluded from this release type: configureExplicitResourceManagement */\n\n/* Excluded from this release type: Connection */\n\n/* Excluded from this release type: CONNECTION_CHECK_OUT_FAILED */\n\n/* Excluded from this release type: CONNECTION_CHECK_OUT_STARTED */\n\n/* Excluded from this release type: CONNECTION_CHECKED_IN */\n\n/* Excluded from this release type: CONNECTION_CHECKED_OUT */\n\n/* Excluded from this release type: CONNECTION_CLOSED */\n\n/* Excluded from this release type: CONNECTION_CREATED */\n\n/* Excluded from this release type: CONNECTION_POOL_CLEARED */\n\n/* Excluded from this release type: CONNECTION_POOL_CLOSED */\n\n/* Excluded from this release type: CONNECTION_POOL_CREATED */\n\n/* Excluded from this release type: CONNECTION_POOL_READY */\n\n/* Excluded from this release type: CONNECTION_READY */\n\n/**\n * An event published when a connection is checked into the connection pool\n * @public\n * @category Event\n */\nexport declare class ConnectionCheckedInEvent extends ConnectionPoolMonitoringEvent {\n    /** The id of the connection */\n    connectionId: number | '<monitor>';\n    /* Excluded from this release type: name */\n    /* Excluded from this release type: __constructor */\n}\n\n/**\n * An event published when a connection is checked out of the connection pool\n * @public\n * @category Event\n */\nexport declare class ConnectionCheckedOutEvent extends ConnectionPoolMonitoringEvent {\n    /** The id of the connection */\n    connectionId: number | '<monitor>';\n    /* Excluded from this release type: name */\n    /**\n     * The time it took to check out the connection.\n     * More specifically, the time elapsed between\n     * emitting a `ConnectionCheckOutStartedEvent`\n     * and emitting this event as part of the same checking out.\n     *\n     */\n    durationMS: number;\n    /* Excluded from this release type: __constructor */\n}\n\n/**\n * An event published when a request to check a connection out fails\n * @public\n * @category Event\n */\nexport declare class ConnectionCheckOutFailedEvent extends ConnectionPoolMonitoringEvent {\n    /** The reason the attempt to check out failed */\n    reason: string;\n    /* Excluded from this release type: error */\n    /* Excluded from this release type: name */\n    /**\n     * The time it took to check out the connection.\n     * More specifically, the time elapsed between\n     * emitting a `ConnectionCheckOutStartedEvent`\n     * and emitting this event as part of the same check out.\n     */\n    durationMS: number;\n    /* Excluded from this release type: __constructor */\n}\n\n/**\n * An event published when a request to check a connection out begins\n * @public\n * @category Event\n */\nexport declare class ConnectionCheckOutStartedEvent extends ConnectionPoolMonitoringEvent {\n    /* Excluded from this release type: name */\n    /* Excluded from this release type: __constructor */\n}\n\n/**\n * An event published when a connection is closed\n * @public\n * @category Event\n */\nexport declare class ConnectionClosedEvent extends ConnectionPoolMonitoringEvent {\n    /** The id of the connection */\n    connectionId: number | '<monitor>';\n    /** The reason the connection was closed */\n    reason: string;\n    serviceId?: ObjectId;\n    /* Excluded from this release type: name */\n    /* Excluded from this release type: error */\n    /* Excluded from this release type: __constructor */\n}\n\n/**\n * An event published when a connection pool creates a new connection\n * @public\n * @category Event\n */\nexport declare class ConnectionCreatedEvent extends ConnectionPoolMonitoringEvent {\n    /** A monotonically increasing, per-pool id for the newly created connection */\n    connectionId: number | '<monitor>';\n    /* Excluded from this release type: name */\n    /* Excluded from this release type: __constructor */\n}\n\n/** @public */\nexport declare type ConnectionEvents = {\n    commandStarted(event: CommandStartedEvent): void;\n    commandSucceeded(event: CommandSucceededEvent): void;\n    commandFailed(event: CommandFailedEvent): void;\n    clusterTimeReceived(clusterTime: Document): void;\n    close(): void;\n    pinned(pinType: string): void;\n    unpinned(pinType: string): void;\n};\n\n/** @public */\nexport declare interface ConnectionOptions extends SupportedNodeConnectionOptions, StreamDescriptionOptions, ProxyOptions {\n    id: number | '<monitor>';\n    generation: number;\n    hostAddress: HostAddress;\n    /* Excluded from this release type: autoEncrypter */\n    serverApi?: ServerApi;\n    monitorCommands: boolean;\n    /* Excluded from this release type: connectionType */\n    credentials?: MongoCredentials;\n    /* Excluded from this release type: authProviders */\n    connectTimeoutMS?: number;\n    tls: boolean;\n    noDelay?: boolean;\n    socketTimeoutMS?: number;\n    cancellationToken?: CancellationToken;\n    metadata: ClientMetadata;\n    /* Excluded from this release type: extendedMetadata */\n    /* Excluded from this release type: mongoLogger */\n}\n\n/* Excluded from this release type: ConnectionPool */\n\n/**\n * An event published when a connection pool is cleared\n * @public\n * @category Event\n */\nexport declare class ConnectionPoolClearedEvent extends ConnectionPoolMonitoringEvent {\n    /* Excluded from this release type: serviceId */\n    interruptInUseConnections?: boolean;\n    /* Excluded from this release type: name */\n    /* Excluded from this release type: __constructor */\n}\n\n/**\n * An event published when a connection pool is closed\n * @public\n * @category Event\n */\nexport declare class ConnectionPoolClosedEvent extends ConnectionPoolMonitoringEvent {\n    /* Excluded from this release type: name */\n    /* Excluded from this release type: __constructor */\n}\n\n/**\n * An event published when a connection pool is created\n * @public\n * @category Event\n */\nexport declare class ConnectionPoolCreatedEvent extends ConnectionPoolMonitoringEvent {\n    /** The options used to create this connection pool */\n    options: Pick<ConnectionPoolOptions, 'maxPoolSize' | 'minPoolSize' | 'maxConnecting' | 'maxIdleTimeMS' | 'waitQueueTimeoutMS'>;\n    /* Excluded from this release type: name */\n    /* Excluded from this release type: __constructor */\n}\n\n/** @public */\nexport declare type ConnectionPoolEvents = {\n    connectionPoolCreated(event: ConnectionPoolCreatedEvent): void;\n    connectionPoolReady(event: ConnectionPoolReadyEvent): void;\n    connectionPoolClosed(event: ConnectionPoolClosedEvent): void;\n    connectionPoolCleared(event: ConnectionPoolClearedEvent): void;\n    connectionCreated(event: ConnectionCreatedEvent): void;\n    connectionReady(event: ConnectionReadyEvent): void;\n    connectionClosed(event: ConnectionClosedEvent): void;\n    connectionCheckOutStarted(event: ConnectionCheckOutStartedEvent): void;\n    connectionCheckOutFailed(event: ConnectionCheckOutFailedEvent): void;\n    connectionCheckedOut(event: ConnectionCheckedOutEvent): void;\n    connectionCheckedIn(event: ConnectionCheckedInEvent): void;\n} & Omit<ConnectionEvents, 'close' | 'message'>;\n\n/* Excluded from this release type: ConnectionPoolMetrics */\n\n/**\n * The base export class for all monitoring events published from the connection pool\n * @public\n * @category Event\n */\nexport declare abstract class ConnectionPoolMonitoringEvent {\n    /** A timestamp when the event was created  */\n    time: Date;\n    /** The address (host/port pair) of the pool */\n    address: string;\n    /* Excluded from this release type: name */\n    /* Excluded from this release type: __constructor */\n}\n\n/** @public */\nexport declare interface ConnectionPoolOptions extends Omit<ConnectionOptions, 'id' | 'generation'> {\n    /** The maximum number of connections that may be associated with a pool at a given time. This includes in use and available connections. */\n    maxPoolSize: number;\n    /** The minimum number of connections that MUST exist at any moment in a single connection pool. */\n    minPoolSize: number;\n    /** The maximum number of connections that may be in the process of being established concurrently by the connection pool. */\n    maxConnecting: number;\n    /** The maximum amount of time a connection should remain idle in the connection pool before being marked idle. */\n    maxIdleTimeMS: number;\n    /** The maximum amount of time operation execution should wait for a connection to become available. The default is 0 which means there is no limit. */\n    waitQueueTimeoutMS: number;\n    /** If we are in load balancer mode. */\n    loadBalanced: boolean;\n    /* Excluded from this release type: minPoolSizeCheckFrequencyMS */\n}\n\n/**\n * An event published when a connection pool is ready\n * @public\n * @category Event\n */\nexport declare class ConnectionPoolReadyEvent extends ConnectionPoolMonitoringEvent {\n    /* Excluded from this release type: name */\n    /* Excluded from this release type: __constructor */\n}\n\n/**\n * An event published when a connection is ready for use\n * @public\n * @category Event\n */\nexport declare class ConnectionReadyEvent extends ConnectionPoolMonitoringEvent {\n    /** The id of the connection */\n    connectionId: number | '<monitor>';\n    /**\n     * The time it took to establish the connection.\n     * In accordance with the definition of establishment of a connection\n     * specified by `ConnectionPoolOptions.maxConnecting`,\n     * it is the time elapsed between emitting a `ConnectionCreatedEvent`\n     * and emitting this event as part of the same checking out.\n     *\n     * Naturally, when establishing a connection is part of checking out,\n     * this duration is not greater than\n     * `ConnectionCheckedOutEvent.duration`.\n     */\n    durationMS: number;\n    /* Excluded from this release type: name */\n    /* Excluded from this release type: __constructor */\n}\n\n/** @public */\nexport declare interface ConnectOptions {\n    readPreference?: ReadPreference;\n}\n\n/** @public */\nexport declare interface CountDocumentsOptions extends AggregateOptions {\n    /** The number of documents to skip. */\n    skip?: number;\n    /** The maximum amount of documents to consider. */\n    limit?: number;\n}\n\n/** @public */\nexport declare interface CountOptions extends CommandOperationOptions {\n    /** The number of documents to skip. */\n    skip?: number;\n    /** The maximum amounts to count before aborting. */\n    limit?: number;\n    /**\n     * Number of milliseconds to wait before aborting the query.\n     */\n    maxTimeMS?: number;\n    /** An index name hint for the query. */\n    hint?: string | Document;\n}\n\n/** @public */\nexport declare interface CreateCollectionOptions extends CommandOperationOptions {\n    /** Create a capped collection */\n    capped?: boolean;\n    /** @deprecated Create an index on the _id field of the document. This option is deprecated in MongoDB 3.2+ and will be removed once no longer supported by the server. */\n    autoIndexId?: boolean;\n    /** The size of the capped collection in bytes */\n    size?: number;\n    /** The maximum number of documents in the capped collection */\n    max?: number;\n    /** Available for the MMAPv1 storage engine only to set the usePowerOf2Sizes and the noPadding flag */\n    flags?: number;\n    /** Allows users to specify configuration to the storage engine on a per-collection basis when creating a collection */\n    storageEngine?: Document;\n    /** Allows users to specify validation rules or expressions for the collection. For more information, see Document Validation */\n    validator?: Document;\n    /** Determines how strictly MongoDB applies the validation rules to existing documents during an update */\n    validationLevel?: string;\n    /** Determines whether to error on invalid documents or just warn about the violations but allow invalid documents to be inserted */\n    validationAction?: string;\n    /** Allows users to specify a default configuration for indexes when creating a collection */\n    indexOptionDefaults?: Document;\n    /** The name of the source collection or view from which to create the view. The name is not the full namespace of the collection or view (i.e., does not include the database name and implies the same database as the view to create) */\n    viewOn?: string;\n    /** An array that consists of the aggregation pipeline stage. Creates the view by applying the specified pipeline to the viewOn collection or view */\n    pipeline?: Document[];\n    /** A primary key factory function for generation of custom _id keys. */\n    pkFactory?: PkFactory;\n    /** A document specifying configuration options for timeseries collections. */\n    timeseries?: TimeSeriesCollectionOptions;\n    /** A document specifying configuration options for clustered collections. For MongoDB 5.3 and above. */\n    clusteredIndex?: ClusteredCollectionOptions;\n    /** The number of seconds after which a document in a timeseries or clustered collection expires. */\n    expireAfterSeconds?: number;\n    /** @experimental */\n    encryptedFields?: Document;\n    /**\n     * If set, enables pre-update and post-update document events to be included for any\n     * change streams that listen on this collection.\n     */\n    changeStreamPreAndPostImages?: {\n        enabled: boolean;\n    };\n}\n\n/** @public */\nexport declare interface CreateIndexesOptions extends Omit<CommandOperationOptions, 'writeConcern'> {\n    /** Creates the index in the background, yielding whenever possible. */\n    background?: boolean;\n    /** Creates an unique index. */\n    unique?: boolean;\n    /** Override the autogenerated index name (useful if the resulting name is larger than 128 bytes) */\n    name?: string;\n    /** Creates a partial index based on the given filter object (MongoDB 3.2 or higher) */\n    partialFilterExpression?: Document;\n    /** Creates a sparse index. */\n    sparse?: boolean;\n    /** Allows you to expire data on indexes applied to a data (MongoDB 2.2 or higher) */\n    expireAfterSeconds?: number;\n    /** Allows users to configure the storage engine on a per-index basis when creating an index. (MongoDB 3.0 or higher) */\n    storageEngine?: Document;\n    /** (MongoDB 4.4. or higher) Specifies how many data-bearing members of a replica set, including the primary, must complete the index builds successfully before the primary marks the indexes as ready. This option accepts the same values for the \"w\" field in a write concern plus \"votingMembers\", which indicates all voting data-bearing nodes. */\n    commitQuorum?: number | string;\n    /** Specifies the index version number, either 0 or 1. */\n    version?: number;\n    weights?: Document;\n    default_language?: string;\n    language_override?: string;\n    textIndexVersion?: number;\n    '2dsphereIndexVersion'?: number;\n    bits?: number;\n    /** For geospatial indexes set the lower bound for the co-ordinates. */\n    min?: number;\n    /** For geospatial indexes set the high bound for the co-ordinates. */\n    max?: number;\n    bucketSize?: number;\n    wildcardProjection?: Document;\n    /** Specifies that the index should exist on the target collection but should not be used by the query planner when executing operations. (MongoDB 4.4 or higher) */\n    hidden?: boolean;\n}\n\n/**\n * @public\n * Configuration options for custom credential providers for KMS requests.\n */\nexport declare interface CredentialProviders {\n    aws?: AWSCredentialProvider;\n}\n\n/** @public */\nexport declare type CSFLEKMSTlsOptions = {\n    aws?: ClientEncryptionTlsOptions;\n    gcp?: ClientEncryptionTlsOptions;\n    kmip?: ClientEncryptionTlsOptions;\n    local?: ClientEncryptionTlsOptions;\n    azure?: ClientEncryptionTlsOptions;\n    [key: string]: ClientEncryptionTlsOptions | undefined;\n};\n\n/* Excluded from this release type: CSOTTimeoutContext */\n\n/* Excluded from this release type: CSOTTimeoutContextOptions */\n\n/** @public */\nexport declare const CURSOR_FLAGS: readonly [\"tailable\", \"oplogReplay\", \"noCursorTimeout\", \"awaitData\", \"exhaust\", \"partial\"];\n\n/** @public */\nexport declare type CursorFlag = (typeof CURSOR_FLAGS)[number];\n\n/* Excluded from this release type: CursorResponse */\n\n/** @public */\nexport declare interface CursorStreamOptions {\n    /** A transformation method applied to each document emitted by the stream */\n    transform?(this: void, doc: Document): Document;\n}\n\n/* Excluded from this release type: CursorTimeoutContext */\n\n/**\n * @public\n * @experimental\n * Specifies how `timeoutMS` is applied to the cursor. Can be either `'cursorLifeTime'` or `'iteration'`\n * When set to `'iteration'`, the deadline specified by `timeoutMS` applies to each call of\n * `cursor.next()`.\n * When set to `'cursorLifetime'`, the deadline applies to the life of the entire cursor.\n *\n * Depending on the type of cursor being used, this option has different default values.\n * For non-tailable cursors, this value defaults to `'cursorLifetime'`\n * For tailable cursors, this value defaults to `'iteration'` since tailable cursors, by\n * definition can have an arbitrarily long lifetime.\n *\n * @example\n * ```ts\n * const cursor = collection.find({}, {timeoutMS: 100, timeoutMode: 'iteration'});\n * for await (const doc of cursor) {\n *  // process doc\n *  // This will throw a timeout error if any of the iterator's `next()` calls takes more than 100ms, but\n *  // will continue to iterate successfully otherwise, regardless of the number of batches.\n * }\n * ```\n *\n * @example\n * ```ts\n * const cursor = collection.find({}, { timeoutMS: 1000, timeoutMode: 'cursorLifetime' });\n * const docs = await cursor.toArray(); // This entire line will throw a timeout error if all batches are not fetched and returned within 1000ms.\n * ```\n */\nexport declare const CursorTimeoutMode: Readonly<{\n    readonly ITERATION: \"iteration\";\n    readonly LIFETIME: \"cursorLifetime\";\n}>;\n\n/**\n * @public\n * @experimental\n */\nexport declare type CursorTimeoutMode = (typeof CursorTimeoutMode)[keyof typeof CursorTimeoutMode];\n\n/**\n * @public\n * The schema for a DataKey in the key vault collection.\n */\nexport declare interface DataKey {\n    _id: UUID;\n    version?: number;\n    keyAltNames?: string[];\n    keyMaterial: Binary;\n    creationDate: Date;\n    updateDate: Date;\n    status: number;\n    masterKey: Document;\n}\n\n/**\n * The **Db** class is a class that represents a MongoDB Database.\n * @public\n *\n * @example\n * ```ts\n * import { MongoClient } from '/mongodb.ts';\n *\n * interface Pet {\n *   name: string;\n *   kind: 'dog' | 'cat' | 'fish';\n * }\n *\n * const client = new MongoClient('mongodb://localhost:27017');\n * const db = client.db();\n *\n * // Create a collection that validates our union\n * await db.createCollection<Pet>('pets', {\n *   validator: { $expr: { $in: ['$kind', ['dog', 'cat', 'fish']] } }\n * })\n * ```\n */\nexport declare class Db {\n    /* Excluded from this release type: s */\n    /* Excluded from this release type: client */\n    static SYSTEM_NAMESPACE_COLLECTION: string;\n    static SYSTEM_INDEX_COLLECTION: string;\n    static SYSTEM_PROFILE_COLLECTION: string;\n    static SYSTEM_USER_COLLECTION: string;\n    static SYSTEM_COMMAND_COLLECTION: string;\n    static SYSTEM_JS_COLLECTION: string;\n    /**\n     * Creates a new Db instance.\n     *\n     * Db name cannot contain a dot, the server may apply more restrictions when an operation is run.\n     *\n     * @param client - The MongoClient for the database.\n     * @param databaseName - The name of the database this instance represents.\n     * @param options - Optional settings for Db construction.\n     */\n    constructor(client: MongoClient, databaseName: string, options?: DbOptions);\n    get databaseName(): string;\n    get options(): DbOptions | undefined;\n    /**\n     * Check if a secondary can be used (because the read preference is *not* set to primary)\n     */\n    get secondaryOk(): boolean;\n    get readConcern(): ReadConcern | undefined;\n    /**\n     * The current readPreference of the Db. If not explicitly defined for\n     * this Db, will be inherited from the parent MongoClient\n     */\n    get readPreference(): ReadPreference;\n    get bsonOptions(): BSONSerializeOptions;\n    get writeConcern(): WriteConcern | undefined;\n    get namespace(): string;\n    get timeoutMS(): number | undefined;\n    /**\n     * Create a new collection on a server with the specified options. Use this to create capped collections.\n     * More information about command options available at https://www.mongodb.com/docs/manual/reference/command/create/\n     *\n     * Collection namespace validation is performed server-side.\n     *\n     * @param name - The name of the collection to create\n     * @param options - Optional settings for the command\n     */\n    createCollection<TSchema extends Document = Document>(name: string, options?: CreateCollectionOptions): Promise<Collection<TSchema>>;\n    /**\n     * Execute a command\n     *\n     * @remarks\n     * This command does not inherit options from the MongoClient.\n     *\n     * The driver will ensure the following fields are attached to the command sent to the server:\n     * - `lsid` - sourced from an implicit session or options.session\n     * - `$readPreference` - defaults to primary or can be configured by options.readPreference\n     * - `$db` - sourced from the name of this database\n     *\n     * If the client has a serverApi setting:\n     * - `apiVersion`\n     * - `apiStrict`\n     * - `apiDeprecationErrors`\n     *\n     * When in a transaction:\n     * - `readConcern` - sourced from readConcern set on the TransactionOptions\n     * - `writeConcern` - sourced from writeConcern set on the TransactionOptions\n     *\n     * Attaching any of the above fields to the command will have no effect as the driver will overwrite the value.\n     *\n     * @param command - The command to run\n     * @param options - Optional settings for the command\n     */\n    command(command: Document, options?: RunCommandOptions & Abortable): Promise<Document>;\n    /**\n     * Execute an aggregation framework pipeline against the database.\n     *\n     * @param pipeline - An array of aggregation stages to be executed\n     * @param options - Optional settings for the command\n     */\n    aggregate<T extends Document = Document>(pipeline?: Document[], options?: AggregateOptions): AggregationCursor<T>;\n    /** Return the Admin db instance */\n    admin(): Admin;\n    /**\n     * Returns a reference to a MongoDB Collection. If it does not exist it will be created implicitly.\n     *\n     * Collection namespace validation is performed server-side.\n     *\n     * @param name - the collection name we wish to access.\n     * @returns return the new Collection instance\n     */\n    collection<TSchema extends Document = Document>(name: string, options?: CollectionOptions): Collection<TSchema>;\n    /**\n     * Get all the db statistics.\n     *\n     * @param options - Optional settings for the command\n     */\n    stats(options?: DbStatsOptions): Promise<Document>;\n    /**\n     * List all collections of this database with optional filter\n     *\n     * @param filter - Query to filter collections by\n     * @param options - Optional settings for the command\n     */\n    listCollections(filter: Document, options: Exclude<ListCollectionsOptions, 'nameOnly'> & {\n        nameOnly: true;\n    } & Abortable): ListCollectionsCursor<Pick<CollectionInfo, 'name' | 'type'>>;\n    listCollections(filter: Document, options: Exclude<ListCollectionsOptions, 'nameOnly'> & {\n        nameOnly: false;\n    } & Abortable): ListCollectionsCursor<CollectionInfo>;\n    listCollections<T extends Pick<CollectionInfo, 'name' | 'type'> | CollectionInfo = Pick<CollectionInfo, 'name' | 'type'> | CollectionInfo>(filter?: Document, options?: ListCollectionsOptions & Abortable): ListCollectionsCursor<T>;\n    /**\n     * Rename a collection.\n     *\n     * @remarks\n     * This operation does not inherit options from the MongoClient.\n     *\n     * @param fromCollection - Name of current collection to rename\n     * @param toCollection - New name of of the collection\n     * @param options - Optional settings for the command\n     */\n    renameCollection<TSchema extends Document = Document>(fromCollection: string, toCollection: string, options?: RenameOptions): Promise<Collection<TSchema>>;\n    /**\n     * Drop a collection from the database, removing it permanently. New accesses will create a new collection.\n     *\n     * @param name - Name of collection to drop\n     * @param options - Optional settings for the command\n     */\n    dropCollection(name: string, options?: DropCollectionOptions): Promise<boolean>;\n    /**\n     * Drop a database, removing it permanently from the server.\n     *\n     * @param options - Optional settings for the command\n     */\n    dropDatabase(options?: DropDatabaseOptions): Promise<boolean>;\n    /**\n     * Fetch all collections for the current db.\n     *\n     * @param options - Optional settings for the command\n     */\n    collections(options?: ListCollectionsOptions): Promise<Collection[]>;\n    /**\n     * Creates an index on the db and collection.\n     *\n     * @param name - Name of the collection to create the index on.\n     * @param indexSpec - Specify the field to index, or an index specification\n     * @param options - Optional settings for the command\n     */\n    createIndex(name: string, indexSpec: IndexSpecification, options?: CreateIndexesOptions): Promise<string>;\n    /**\n     * Remove a user from a database\n     *\n     * @param username - The username to remove\n     * @param options - Optional settings for the command\n     */\n    removeUser(username: string, options?: RemoveUserOptions): Promise<boolean>;\n    /**\n     * Set the current profiling level of MongoDB\n     *\n     * @param level - The new profiling level (off, slow_only, all).\n     * @param options - Optional settings for the command\n     */\n    setProfilingLevel(level: ProfilingLevel, options?: SetProfilingLevelOptions): Promise<ProfilingLevel>;\n    /**\n     * Retrieve the current profiling Level for MongoDB\n     *\n     * @param options - Optional settings for the command\n     */\n    profilingLevel(options?: ProfilingLevelOptions): Promise<string>;\n    /**\n     * Retrieves this collections index info.\n     *\n     * @param name - The name of the collection.\n     * @param options - Optional settings for the command\n     */\n    indexInformation(name: string, options: IndexInformationOptions & {\n        full: true;\n    }): Promise<IndexDescriptionInfo[]>;\n    indexInformation(name: string, options: IndexInformationOptions & {\n        full?: false;\n    }): Promise<IndexDescriptionCompact>;\n    indexInformation(name: string, options: IndexInformationOptions): Promise<IndexDescriptionCompact | IndexDescriptionInfo[]>;\n    indexInformation(name: string): Promise<IndexDescriptionCompact>;\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates,\n     * replacements, deletions, and invalidations) in this database. Will ignore all\n     * changes to system collections.\n     *\n     * @remarks\n     * watch() accepts two generic arguments for distinct use cases:\n     * - The first is to provide the schema that may be defined for all the collections within this database\n     * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n     *\n     * @remarks\n     * When `timeoutMS` is configured for a change stream, it will have different behaviour depending\n     * on whether the change stream is in iterator mode or emitter mode. In both cases, a change\n     * stream will time out if it does not receive a change event within `timeoutMS` of the last change\n     * event.\n     *\n     * Note that if a change stream is consistently timing out when watching a collection, database or\n     * client that is being changed, then this may be due to the server timing out before it can finish\n     * processing the existing oplog. To address this, restart the change stream with a higher\n     * `timeoutMS`.\n     *\n     * If the change stream times out the initial aggregate operation to establish the change stream on\n     * the server, then the client will close the change stream. If the getMore calls to the server\n     * time out, then the change stream will be left open, but will throw a MongoOperationTimeoutError\n     * when in iterator mode and emit an error event that returns a MongoOperationTimeoutError in\n     * emitter mode.\n     *\n     * To determine whether or not the change stream is still open following a timeout, check the\n     * {@link ChangeStream.closed} getter.\n     *\n     * @example\n     * In iterator mode, if a next() call throws a timeout error, it will attempt to resume the change stream.\n     * The next call can just be retried after this succeeds.\n     * ```ts\n     * const changeStream = collection.watch([], { timeoutMS: 100 });\n     * try {\n     *     await changeStream.next();\n     * } catch (e) {\n     *     if (e instanceof MongoOperationTimeoutError && !changeStream.closed) {\n     *       await changeStream.next();\n     *     }\n     *     throw e;\n     * }\n     * ```\n     *\n     * @example\n     * In emitter mode, if the change stream goes `timeoutMS` without emitting a change event, it will\n     * emit an error event that returns a MongoOperationTimeoutError, but will not close the change\n     * stream unless the resume attempt fails. There is no need to re-establish change listeners as\n     * this will automatically continue emitting change events once the resume attempt completes.\n     *\n     * ```ts\n     * const changeStream = collection.watch([], { timeoutMS: 100 });\n     * changeStream.on('change', console.log);\n     * changeStream.on('error', e => {\n     *     if (e instanceof MongoOperationTimeoutError && !changeStream.closed) {\n     *         // do nothing\n     *     } else {\n     *         changeStream.close();\n     *     }\n     * });\n     * ```\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options - Optional settings for the command\n     * @typeParam TSchema - Type of the data being detected by the change stream\n     * @typeParam TChange - Type of the whole change stream document emitted\n     */\n    watch<TSchema extends Document = Document, TChange extends Document = ChangeStreamDocument<TSchema>>(pipeline?: Document[], options?: ChangeStreamOptions): ChangeStream<TSchema, TChange>;\n    /**\n     * A low level cursor API providing basic driver functionality:\n     * - ClientSession management\n     * - ReadPreference for server selection\n     * - Running getMores automatically when a local batch is exhausted\n     *\n     * @param command - The command that will start a cursor on the server.\n     * @param options - Configurations for running the command, bson options will apply to getMores\n     */\n    runCursorCommand(command: Document, options?: RunCursorCommandOptions): RunCommandCursor;\n}\n\n/* Excluded from this release type: DB_AGGREGATE_COLLECTION */\n\n/** @public */\nexport declare interface DbOptions extends BSONSerializeOptions, WriteConcernOptions {\n    /** If the database authentication is dependent on another databaseName. */\n    authSource?: string;\n    /** Force server to assign _id values instead of driver. */\n    forceServerObjectId?: boolean;\n    /** The preferred read preference (ReadPreference.PRIMARY, ReadPreference.PRIMARY_PREFERRED, ReadPreference.SECONDARY, ReadPreference.SECONDARY_PREFERRED, ReadPreference.NEAREST). */\n    readPreference?: ReadPreferenceLike;\n    /** A primary key factory object for generation of custom _id keys. */\n    pkFactory?: PkFactory;\n    /** Specify a read concern for the collection. (only MongoDB 3.2 or higher supported) */\n    readConcern?: ReadConcern;\n    /** Should retry failed writes */\n    retryWrites?: boolean;\n    /**\n     * @experimental\n     * Specifies the time an operation will run until it throws a timeout error\n     */\n    timeoutMS?: number;\n}\n\n/* Excluded from this release type: DbPrivate */\nexport { DBRef }\n\n/** @public */\nexport declare interface DbStatsOptions extends CommandOperationOptions {\n    /** Divide the returned sizes by scale value. */\n    scale?: number;\n}\n\nexport { Decimal128 }\n\n/** @public */\nexport declare interface DeleteManyModel<TSchema extends Document = Document> {\n    /** The filter to limit the deleted documents. */\n    filter: Filter<TSchema>;\n    /** Specifies a collation. */\n    collation?: CollationOptions;\n    /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n    hint?: Hint;\n}\n\n/** @public */\nexport declare interface DeleteOneModel<TSchema extends Document = Document> {\n    /** The filter to limit the deleted documents. */\n    filter: Filter<TSchema>;\n    /** Specifies a collation. */\n    collation?: CollationOptions;\n    /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n    hint?: Hint;\n}\n\n/** @public */\nexport declare interface DeleteOptions extends CommandOperationOptions, WriteConcernOptions {\n    /** If true, when an insert fails, don't execute the remaining writes. If false, continue with remaining inserts when one fails. */\n    ordered?: boolean;\n    /** Specifies the collation to use for the operation */\n    collation?: CollationOptions;\n    /** Specify that the update query should only consider plans using the hinted index */\n    hint?: string | Document;\n    /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n    let?: Document;\n}\n\n/** @public */\nexport declare interface DeleteResult {\n    /** Indicates whether this write result was acknowledged. If not, then all other members of this result will be undefined. */\n    acknowledged: boolean;\n    /** The number of documents that were deleted */\n    deletedCount: number;\n}\n\n/** @public */\nexport declare interface DeleteStatement {\n    /** The query that matches documents to delete. */\n    q: Document;\n    /** The number of matching documents to delete. */\n    limit: number;\n    /** Specifies the collation to use for the operation. */\n    collation?: CollationOptions;\n    /** A document or string that specifies the index to use to support the query predicate. */\n    hint?: Hint;\n}\n\nexport { deserialize }\n\n/** @public */\nexport declare type DistinctOptions = CommandOperationOptions & {\n    /**\n     * @sinceServerVersion 7.1\n     *\n     * The index to use. Specify either the index name as a string or the index key pattern.\n     * If specified, then the query system will only consider plans using the hinted index.\n     *\n     * If provided as a string, `hint` must be index name for an index on the collection.\n     * If provided as an object, `hint` must be an index description for an index defined on the collection.\n     *\n     * See https://www.mongodb.com/docs/manual/reference/command/distinct/#command-fields.\n     */\n    hint?: Document | string;\n};\n\nexport { Document }\n\nexport { Double }\n\n/** @public */\nexport declare interface DriverInfo {\n    name?: string;\n    version?: string;\n    platform?: string;\n}\n\n/** @public */\nexport declare interface DropCollectionOptions extends CommandOperationOptions {\n    /** @experimental */\n    encryptedFields?: Document;\n}\n\n/** @public */\nexport declare type DropDatabaseOptions = CommandOperationOptions;\n\n/** @public */\nexport declare type DropIndexesOptions = CommandOperationOptions;\n\n/* Excluded from this release type: Encrypter */\n\n/* Excluded from this release type: EncrypterOptions */\n\n/** @public */\nexport declare interface EndSessionOptions {\n    /* Excluded from this release type: error */\n    force?: boolean;\n    forceClear?: boolean;\n    /** Specifies the time an operation will run until it throws a timeout error */\n    timeoutMS?: number;\n}\n\n/** TypeScript Omit (Exclude to be specific) does not work for objects with an \"any\" indexed type, and breaks discriminated unions @public */\nexport declare type EnhancedOmit<TRecordOrUnion, KeyUnion> = string extends keyof TRecordOrUnion ? TRecordOrUnion : TRecordOrUnion extends any ? Pick<TRecordOrUnion, Exclude<keyof TRecordOrUnion, KeyUnion>> : never;\n\n/** @public */\nexport declare interface ErrorDescription extends Document {\n    message?: string;\n    errmsg?: string;\n    $err?: string;\n    errorLabels?: string[];\n    errInfo?: Document;\n}\n\n/** @public */\nexport declare interface EstimatedDocumentCountOptions extends CommandOperationOptions {\n    /**\n     * The maximum amount of time to allow the operation to run.\n     *\n     * This option is sent only if the caller explicitly provides a value. The default is to not send a value.\n     */\n    maxTimeMS?: number;\n}\n\n/** @public */\nexport declare type EventEmitterWithState = {\n    /* Excluded from this release type: stateChanged */\n};\n\n/**\n * Event description type\n * @public\n */\nexport declare type EventsDescription = Record<string, GenericListener>;\n\n/* Excluded from this release type: Explain */\n\n/**\n * @public\n *\n * A base class for any cursors that have `explain()` methods.\n */\nexport declare abstract class ExplainableCursor<TSchema> extends AbstractCursor<TSchema> {\n    /** Execute the explain for the cursor */\n    abstract explain(): Promise<Document>;\n    abstract explain(verbosity: ExplainVerbosityLike | ExplainCommandOptions): Promise<Document>;\n    abstract explain(options: {\n        timeoutMS?: number;\n    }): Promise<Document>;\n    abstract explain(verbosity: ExplainVerbosityLike | ExplainCommandOptions, options: {\n        timeoutMS?: number;\n    }): Promise<Document>;\n    abstract explain(verbosity?: ExplainVerbosityLike | ExplainCommandOptions | {\n        timeoutMS?: number;\n    }, options?: {\n        timeoutMS?: number;\n    }): Promise<Document>;\n    protected resolveExplainTimeoutOptions(verbosity?: ExplainVerbosityLike | ExplainCommandOptions | {\n        timeoutMS?: number;\n    }, options?: {\n        timeoutMS?: number;\n    }): {\n        timeout?: {\n            timeoutMS?: number;\n        };\n        explain?: ExplainVerbosityLike | ExplainCommandOptions;\n    };\n}\n\n/** @public */\nexport declare interface ExplainCommandOptions {\n    /** The explain verbosity for the command. */\n    verbosity: ExplainVerbosity;\n    /** The maxTimeMS setting for the command. */\n    maxTimeMS?: number;\n}\n\n/**\n * @public\n *\n * When set, this configures an explain command.  Valid values are boolean (for legacy compatibility,\n * see {@link ExplainVerbosityLike}), a string containing the explain verbosity, or an object containing the verbosity and\n * an optional maxTimeMS.\n *\n * Examples of valid usage:\n *\n * ```typescript\n * collection.find({ name: 'john doe' }, { explain: true });\n * collection.find({ name: 'john doe' }, { explain: false });\n * collection.find({ name: 'john doe' }, { explain: 'queryPlanner' });\n * collection.find({ name: 'john doe' }, { explain: { verbosity: 'queryPlanner' } });\n * ```\n *\n * maxTimeMS can be configured to limit the amount of time the server\n * spends executing an explain by providing an object:\n *\n * ```typescript\n * // limits the `explain` command to no more than 2 seconds\n * collection.find({ name: 'john doe' }, {\n *   explain:  {\n *    verbosity: 'queryPlanner',\n *    maxTimeMS: 2000\n *  }\n * });\n * ```\n */\nexport declare interface ExplainOptions {\n    /** Specifies the verbosity mode for the explain output. */\n    explain?: ExplainVerbosityLike | ExplainCommandOptions;\n}\n\n/** @public */\nexport declare const ExplainVerbosity: Readonly<{\n    readonly queryPlanner: \"queryPlanner\";\n    readonly queryPlannerExtended: \"queryPlannerExtended\";\n    readonly executionStats: \"executionStats\";\n    readonly allPlansExecution: \"allPlansExecution\";\n}>;\n\n/** @public */\nexport declare type ExplainVerbosity = string;\n\n/**\n * For backwards compatibility, true is interpreted as \"allPlansExecution\"\n * and false as \"queryPlanner\".\n * @public\n */\nexport declare type ExplainVerbosityLike = ExplainVerbosity | boolean;\n\n/** A MongoDB filter can be some portion of the schema or a set of operators @public */\nexport declare type Filter<TSchema> = {\n    [P in keyof WithId<TSchema>]?: Condition<WithId<TSchema>[P]>;\n} & RootFilterOperators<WithId<TSchema>>;\n\n/** @public */\nexport declare type FilterOperations<T> = T extends Record<string, any> ? {\n    [key in keyof T]?: FilterOperators<T[key]>;\n} : FilterOperators<T>;\n\n/** @public */\nexport declare interface FilterOperators<TValue> extends NonObjectIdLikeDocument {\n    $eq?: TValue;\n    $gt?: TValue;\n    $gte?: TValue;\n    $in?: ReadonlyArray<TValue>;\n    $lt?: TValue;\n    $lte?: TValue;\n    $ne?: TValue;\n    $nin?: ReadonlyArray<TValue>;\n    $not?: TValue extends string ? FilterOperators<TValue> | RegExp : FilterOperators<TValue>;\n    /**\n     * When `true`, `$exists` matches the documents that contain the field,\n     * including documents where the field value is null.\n     */\n    $exists?: boolean;\n    $type?: BSONType | BSONTypeAlias;\n    $expr?: Record<string, any>;\n    $jsonSchema?: Record<string, any>;\n    $mod?: TValue extends number ? [number, number] : never;\n    $regex?: TValue extends string ? RegExp | BSONRegExp | string : never;\n    $options?: TValue extends string ? string : never;\n    $geoIntersects?: {\n        $geometry: Document;\n    };\n    $geoWithin?: Document;\n    $near?: Document;\n    $nearSphere?: Document;\n    $maxDistance?: number;\n    $all?: ReadonlyArray<any>;\n    $elemMatch?: Document;\n    $size?: TValue extends ReadonlyArray<any> ? number : never;\n    $bitsAllClear?: BitwiseFilter;\n    $bitsAllSet?: BitwiseFilter;\n    $bitsAnyClear?: BitwiseFilter;\n    $bitsAnySet?: BitwiseFilter;\n    $rand?: Record<string, never>;\n}\n\n/** @public */\nexport declare class FindCursor<TSchema = any> extends ExplainableCursor<TSchema> {\n    /* Excluded from this release type: cursorFilter */\n    /* Excluded from this release type: numReturned */\n    /* Excluded from this release type: findOptions */\n    /* Excluded from this release type: __constructor */\n    clone(): FindCursor<TSchema>;\n    map<T>(transform: (doc: TSchema) => T): FindCursor<T>;\n    /* Excluded from this release type: _initialize */\n    /* Excluded from this release type: getMore */\n    /**\n     * Get the count of documents for this cursor\n     * @deprecated Use `collection.estimatedDocumentCount` or `collection.countDocuments` instead\n     */\n    count(options?: CountOptions): Promise<number>;\n    /** Execute the explain for the cursor */\n    explain(): Promise<Document>;\n    explain(verbosity: ExplainVerbosityLike | ExplainCommandOptions): Promise<Document>;\n    explain(options: {\n        timeoutMS?: number;\n    }): Promise<Document>;\n    explain(verbosity: ExplainVerbosityLike | ExplainCommandOptions, options: {\n        timeoutMS?: number;\n    }): Promise<Document>;\n    /** Set the cursor query */\n    filter(filter: Document): this;\n    /**\n     * Set the cursor hint\n     *\n     * @param hint - If specified, then the query system will only consider plans using the hinted index.\n     */\n    hint(hint: Hint): this;\n    /**\n     * Set the cursor min\n     *\n     * @param min - Specify a $min value to specify the inclusive lower bound for a specific index in order to constrain the results of find(). The $min specifies the lower bound for all keys of a specific index in order.\n     */\n    min(min: Document): this;\n    /**\n     * Set the cursor max\n     *\n     * @param max - Specify a $max value to specify the exclusive upper bound for a specific index in order to constrain the results of find(). The $max specifies the upper bound for all keys of a specific index in order.\n     */\n    max(max: Document): this;\n    /**\n     * Set the cursor returnKey.\n     * If set to true, modifies the cursor to only return the index field or fields for the results of the query, rather than documents.\n     * If set to true and the query does not use an index to perform the read operation, the returned documents will not contain any fields.\n     *\n     * @param value - the returnKey value.\n     */\n    returnKey(value: boolean): this;\n    /**\n     * Modifies the output of a query by adding a field $recordId to matching documents. $recordId is the internal key which uniquely identifies a document in a collection.\n     *\n     * @param value - The $showDiskLoc option has now been deprecated and replaced with the showRecordId field. $showDiskLoc will still be accepted for OP_QUERY stye find.\n     */\n    showRecordId(value: boolean): this;\n    /**\n     * Add a query modifier to the cursor query\n     *\n     * @param name - The query modifier (must start with $, such as $orderby etc)\n     * @param value - The modifier value.\n     */\n    addQueryModifier(name: string, value: string | boolean | number | Document): this;\n    /**\n     * Add a comment to the cursor query allowing for tracking the comment in the log.\n     *\n     * @param value - The comment attached to this query.\n     */\n    comment(value: string): this;\n    /**\n     * Set a maxAwaitTimeMS on a tailing cursor query to allow to customize the timeout value for the option awaitData (Only supported on MongoDB 3.2 or higher, ignored otherwise)\n     *\n     * @param value - Number of milliseconds to wait before aborting the tailed query.\n     */\n    maxAwaitTimeMS(value: number): this;\n    /**\n     * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n     *\n     * @param value - Number of milliseconds to wait before aborting the query.\n     */\n    maxTimeMS(value: number): this;\n    /**\n     * Add a project stage to the aggregation pipeline\n     *\n     * @remarks\n     * In order to strictly type this function you must provide an interface\n     * that represents the effect of your projection on the result documents.\n     *\n     * By default chaining a projection to your cursor changes the returned type to the generic\n     * {@link Document} type.\n     * You should specify a parameterized type to have assertions on your final results.\n     *\n     * @example\n     * ```typescript\n     * // Best way\n     * const docs: FindCursor<{ a: number }> = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * // Flexible way\n     * const docs: FindCursor<Document> = cursor.project({ _id: 0, a: true });\n     * ```\n     *\n     * @remarks\n     *\n     * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n     * it **does not** return a new instance of a cursor. This means when calling project,\n     * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n     * Take note of the following example:\n     *\n     * @example\n     * ```typescript\n     * const cursor: FindCursor<{ a: number; b: string }> = coll.find();\n     * const projectCursor = cursor.project<{ a: number }>({ _id: 0, a: true });\n     * const aPropOnlyArray: {a: number}[] = await projectCursor.toArray();\n     *\n     * // or always use chaining and save the final cursor\n     *\n     * const cursor = coll.find().project<{ a: string }>({\n     *   _id: 0,\n     *   a: { $convert: { input: '$a', to: 'string' }\n     * }});\n     * ```\n     */\n    project<T extends Document = Document>(value: Document): FindCursor<T>;\n    /**\n     * Sets the sort order of the cursor query.\n     *\n     * @param sort - The key or keys set for the sort.\n     * @param direction - The direction of the sorting (1 or -1).\n     */\n    sort(sort: Sort | string, direction?: SortDirection): this;\n    /**\n     * Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher)\n     *\n     * @remarks\n     * {@link https://www.mongodb.com/docs/manual/reference/command/find/#find-cmd-allowdiskuse | find command allowDiskUse documentation}\n     */\n    allowDiskUse(allow?: boolean): this;\n    /**\n     * Set the collation options for the cursor.\n     *\n     * @param value - The cursor collation options (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields).\n     */\n    collation(value: CollationOptions): this;\n    /**\n     * Set the limit for the cursor.\n     *\n     * @param value - The limit for the cursor query.\n     */\n    limit(value: number): this;\n    /**\n     * Set the skip for the cursor.\n     *\n     * @param value - The skip for the cursor query.\n     */\n    skip(value: number): this;\n}\n\n/** @public */\nexport declare interface FindOneAndDeleteOptions extends CommandOperationOptions {\n    /** An optional hint for query optimization. See the {@link https://www.mongodb.com/docs/manual/reference/command/update/#update-command-hint|update command} reference for more information.*/\n    hint?: Document;\n    /** Limits the fields to return for all matching documents. */\n    projection?: Document;\n    /** Determines which document the operation modifies if the query selects multiple documents. */\n    sort?: Sort;\n    /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n    let?: Document;\n    /**\n     * Return the ModifyResult instead of the modified document. Defaults to false\n     */\n    includeResultMetadata?: boolean;\n}\n\n/** @public */\nexport declare interface FindOneAndReplaceOptions extends CommandOperationOptions {\n    /** Allow driver to bypass schema validation. */\n    bypassDocumentValidation?: boolean;\n    /** An optional hint for query optimization. See the {@link https://www.mongodb.com/docs/manual/reference/command/update/#update-command-hint|update command} reference for more information.*/\n    hint?: Document;\n    /** Limits the fields to return for all matching documents. */\n    projection?: Document;\n    /** When set to 'after', returns the updated document rather than the original. The default is 'before'.  */\n    returnDocument?: ReturnDocument;\n    /** Determines which document the operation modifies if the query selects multiple documents. */\n    sort?: Sort;\n    /** Upsert the document if it does not exist. */\n    upsert?: boolean;\n    /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n    let?: Document;\n    /**\n     * Return the ModifyResult instead of the modified document. Defaults to false\n     */\n    includeResultMetadata?: boolean;\n}\n\n/** @public */\nexport declare interface FindOneAndUpdateOptions extends CommandOperationOptions {\n    /** Optional list of array filters referenced in filtered positional operators */\n    arrayFilters?: Document[];\n    /** Allow driver to bypass schema validation. */\n    bypassDocumentValidation?: boolean;\n    /** An optional hint for query optimization. See the {@link https://www.mongodb.com/docs/manual/reference/command/update/#update-command-hint|update command} reference for more information.*/\n    hint?: Document;\n    /** Limits the fields to return for all matching documents. */\n    projection?: Document;\n    /** When set to 'after', returns the updated document rather than the original. The default is 'before'.  */\n    returnDocument?: ReturnDocument;\n    /** Determines which document the operation modifies if the query selects multiple documents. */\n    sort?: Sort;\n    /** Upsert the document if it does not exist. */\n    upsert?: boolean;\n    /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n    let?: Document;\n    /**\n     * Return the ModifyResult instead of the modified document. Defaults to false\n     */\n    includeResultMetadata?: boolean;\n}\n\n/**\n * A builder object that is returned from {@link BulkOperationBase#find}.\n * Is used to build a write operation that involves a query filter.\n *\n * @public\n */\nexport declare class FindOperators {\n    bulkOperation: BulkOperationBase;\n    /* Excluded from this release type: __constructor */\n    /** Add a multiple update operation to the bulk operation */\n    update(updateDocument: Document | Document[]): BulkOperationBase;\n    /** Add a single update operation to the bulk operation */\n    updateOne(updateDocument: Document | Document[]): BulkOperationBase;\n    /** Add a replace one operation to the bulk operation */\n    replaceOne(replacement: Document): BulkOperationBase;\n    /** Add a delete one operation to the bulk operation */\n    deleteOne(): BulkOperationBase;\n    /** Add a delete many operation to the bulk operation */\n    delete(): BulkOperationBase;\n    /** Upsert modifier for update bulk operation, noting that this operation is an upsert. */\n    upsert(): this;\n    /** Specifies the collation for the query condition. */\n    collation(collation: CollationOptions): this;\n    /** Specifies arrayFilters for UpdateOne or UpdateMany bulk operations. */\n    arrayFilters(arrayFilters: Document[]): this;\n    /** Specifies hint for the bulk operation. */\n    hint(hint: Hint): this;\n}\n\n/**\n * @public\n * @typeParam TSchema - Unused schema definition, deprecated usage, only specify `FindOptions` with no generic\n */\nexport declare interface FindOptions<TSchema extends Document = Document> extends Omit<CommandOperationOptions, 'writeConcern' | 'explain'>, AbstractCursorOptions {\n    /** Sets the limit of documents returned in the query. */\n    limit?: number;\n    /** Set to sort the documents coming back from the query. Array of indexes, `[['a', 1]]` etc. */\n    sort?: Sort;\n    /** The fields to return in the query. Object of fields to either include or exclude (one of, not both), `{'a':1, 'b': 1}` **or** `{'a': 0, 'b': 0}` */\n    projection?: Document;\n    /** Set to skip N documents ahead in your query (useful for pagination). */\n    skip?: number;\n    /** Tell the query to use specific indexes in the query. Object of indexes to use, `{'_id':1}` */\n    hint?: Hint;\n    /** Specify if the cursor can timeout. */\n    timeout?: boolean;\n    /** Specify if the cursor is tailable. */\n    tailable?: boolean;\n    /** Specify if the cursor is a tailable-await cursor. Requires `tailable` to be true */\n    awaitData?: boolean;\n    /** Set the batchSize for the getMoreCommand when iterating over the query results. */\n    batchSize?: number;\n    /** If true, returns only the index keys in the resulting documents. */\n    returnKey?: boolean;\n    /** The inclusive lower bound for a specific index */\n    min?: Document;\n    /** The exclusive upper bound for a specific index */\n    max?: Document;\n    /** Number of milliseconds to wait before aborting the query. */\n    maxTimeMS?: number;\n    /** The maximum amount of time for the server to wait on new documents to satisfy a tailable cursor query. Requires `tailable` and `awaitData` to be true */\n    maxAwaitTimeMS?: number;\n    /** The server normally times out idle cursors after an inactivity period (10 minutes) to prevent excess memory use. Set this option to prevent that. */\n    noCursorTimeout?: boolean;\n    /** Specify collation (MongoDB 3.4 or higher) settings for update operation (see 3.4 documentation for available fields). */\n    collation?: CollationOptions;\n    /** Allows disk use for blocking sort operations exceeding 100MB memory. (MongoDB 3.2 or higher) */\n    allowDiskUse?: boolean;\n    /** Determines whether to close the cursor after the first batch. Defaults to false. */\n    singleBatch?: boolean;\n    /** For queries against a sharded collection, allows the command (or subsequent getMore commands) to return partial results, rather than an error, if one or more queried shards are unavailable. */\n    allowPartialResults?: boolean;\n    /** Determines whether to return the record identifier for each document. If true, adds a field $recordId to the returned documents. */\n    showRecordId?: boolean;\n    /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n    let?: Document;\n    /**\n     * Option to enable an optimized code path for queries looking for a particular range of `ts` values in the oplog. Requires `tailable` to be true.\n     * @deprecated Starting from MongoDB 4.4 this flag is not needed and will be ignored.\n     */\n    oplogReplay?: boolean;\n    /**\n     * Specifies the verbosity mode for the explain output.\n     * @deprecated This API is deprecated in favor of `collection.find().explain()`.\n     */\n    explain?: ExplainOptions['explain'];\n    /* Excluded from this release type: timeoutMode */\n}\n\n/** @public */\nexport declare type Flatten<Type> = Type extends ReadonlyArray<infer Item> ? Item : Type;\n\n/**\n * @public\n * Configuration options for making an AWS encryption key\n */\nexport declare interface GCPEncryptionKeyOptions {\n    /**\n     * GCP project ID\n     */\n    projectId: string;\n    /**\n     * Location name (e.g. \"global\")\n     */\n    location: string;\n    /**\n     * Key ring name\n     */\n    keyRing: string;\n    /**\n     * Key name\n     */\n    keyName: string;\n    /**\n     * Key version\n     */\n    keyVersion?: string | undefined;\n    /**\n     * KMS URL, defaults to `https://www.googleapis.com/auth/cloudkms`\n     */\n    endpoint?: string | undefined;\n}\n\n/** @public */\nexport declare type GCPKMSProviderConfiguration = {\n    /**\n     * The service account email to authenticate\n     */\n    email: string;\n    /**\n     * A PKCS#8 encrypted key. This can either be a base64 string or a binary representation\n     */\n    privateKey: string | Buffer;\n    /**\n     * If present, a host with optional port. E.g. \"example.com\" or \"example.com:443\".\n     * Defaults to \"oauth2.googleapis.com\"\n     */\n    endpoint?: string | undefined;\n} | {\n    /**\n     * If present, an access token to authenticate with GCP.\n     */\n    accessToken: string;\n};\n\n/** @public */\nexport declare type GenericListener = (...args: any[]) => void;\n\n/**\n * Constructor for a streaming GridFS interface\n * @public\n */\nexport declare class GridFSBucket extends TypedEventEmitter<GridFSBucketEvents> {\n    /* Excluded from this release type: s */\n    /**\n     * When the first call to openUploadStream is made, the upload stream will\n     * check to see if it needs to create the proper indexes on the chunks and\n     * files collections. This event is fired either when 1) it determines that\n     * no index creation is necessary, 2) when it successfully creates the\n     * necessary indexes.\n     * @event\n     */\n    static readonly INDEX: \"index\";\n    constructor(db: Db, options?: GridFSBucketOptions);\n    /**\n     * Returns a writable stream (GridFSBucketWriteStream) for writing\n     * buffers to GridFS. The stream's 'id' property contains the resulting\n     * file's id.\n     *\n     * @param filename - The value of the 'filename' key in the files doc\n     * @param options - Optional settings.\n     */\n    openUploadStream(filename: string, options?: GridFSBucketWriteStreamOptions): GridFSBucketWriteStream;\n    /**\n     * Returns a writable stream (GridFSBucketWriteStream) for writing\n     * buffers to GridFS for a custom file id. The stream's 'id' property contains the resulting\n     * file's id.\n     */\n    openUploadStreamWithId(id: ObjectId, filename: string, options?: GridFSBucketWriteStreamOptions): GridFSBucketWriteStream;\n    /** Returns a readable stream (GridFSBucketReadStream) for streaming file data from GridFS. */\n    openDownloadStream(id: ObjectId, options?: GridFSBucketReadStreamOptions): GridFSBucketReadStream;\n    /**\n     * Deletes a file with the given id\n     *\n     * @param id - The id of the file doc\n     */\n    delete(id: ObjectId, options?: {\n        timeoutMS: number;\n    }): Promise<void>;\n    /** Convenience wrapper around find on the files collection */\n    find(filter?: Filter<GridFSFile>, options?: FindOptions): FindCursor<GridFSFile>;\n    /**\n     * Returns a readable stream (GridFSBucketReadStream) for streaming the\n     * file with the given name from GridFS. If there are multiple files with\n     * the same name, this will stream the most recent file with the given name\n     * (as determined by the `uploadDate` field). You can set the `revision`\n     * option to change this behavior.\n     */\n    openDownloadStreamByName(filename: string, options?: GridFSBucketReadStreamOptionsWithRevision): GridFSBucketReadStream;\n    /**\n     * Renames the file with the given _id to the given string\n     *\n     * @param id - the id of the file to rename\n     * @param filename - new name for the file\n     */\n    rename(id: ObjectId, filename: string, options?: {\n        timeoutMS: number;\n    }): Promise<void>;\n    /** Removes this bucket's files collection, followed by its chunks collection. */\n    drop(options?: {\n        timeoutMS: number;\n    }): Promise<void>;\n}\n\n/** @public */\nexport declare type GridFSBucketEvents = {\n    index(): void;\n};\n\n/** @public */\nexport declare interface GridFSBucketOptions extends WriteConcernOptions {\n    /** The 'files' and 'chunks' collections will be prefixed with the bucket name followed by a dot. */\n    bucketName?: string;\n    /** Number of bytes stored in each chunk. Defaults to 255KB */\n    chunkSizeBytes?: number;\n    /** Read preference to be passed to read operations */\n    readPreference?: ReadPreference;\n    /**\n     * @experimental\n     * Specifies the lifetime duration of a gridFS stream. If any async operations are in progress\n     * when this timeout expires, the stream will throw a timeout error.\n     */\n    timeoutMS?: number;\n}\n\n/* Excluded from this release type: GridFSBucketPrivate */\n\n/**\n * A readable stream that enables you to read buffers from GridFS.\n *\n * Do not instantiate this class directly. Use `openDownloadStream()` instead.\n * @public\n */\nexport declare class GridFSBucketReadStream extends Readable {\n    /* Excluded from this release type: s */\n    /**\n     * Fires when the stream loaded the file document corresponding to the provided id.\n     * @event\n     */\n    static readonly FILE: \"file\";\n    /* Excluded from this release type: __constructor */\n    /* Excluded from this release type: _read */\n    /**\n     * Sets the 0-based offset in bytes to start streaming from. Throws\n     * an error if this stream has entered flowing mode\n     * (e.g. if you've already called `on('data')`)\n     *\n     * @param start - 0-based offset in bytes to start streaming from\n     */\n    start(start?: number): this;\n    /**\n     * Sets the 0-based offset in bytes to start streaming from. Throws\n     * an error if this stream has entered flowing mode\n     * (e.g. if you've already called `on('data')`)\n     *\n     * @param end - Offset in bytes to stop reading at\n     */\n    end(end?: number): this;\n    /**\n     * Marks this stream as aborted (will never push another `data` event)\n     * and kills the underlying cursor. Will emit the 'end' event, and then\n     * the 'close' event once the cursor is successfully killed.\n     */\n    abort(): Promise<void>;\n}\n\n/** @public */\nexport declare interface GridFSBucketReadStreamOptions {\n    sort?: Sort;\n    skip?: number;\n    /**\n     * 0-indexed non-negative byte offset from the beginning of the file\n     */\n    start?: number;\n    /**\n     * 0-indexed non-negative byte offset to the end of the file contents\n     * to be returned by the stream. `end` is non-inclusive\n     */\n    end?: number;\n    /**\n     * @experimental\n     * Specifies the time an operation will run until it throws a timeout error\n     */\n    timeoutMS?: number;\n}\n\n/** @public */\nexport declare interface GridFSBucketReadStreamOptionsWithRevision extends GridFSBucketReadStreamOptions {\n    /** The revision number relative to the oldest file with the given filename. 0\n     * gets you the oldest file, 1 gets you the 2nd oldest, -1 gets you the\n     * newest. */\n    revision?: number;\n}\n\n/* Excluded from this release type: GridFSBucketReadStreamPrivate */\n\n/**\n * A writable stream that enables you to write buffers to GridFS.\n *\n * Do not instantiate this class directly. Use `openUploadStream()` instead.\n * @public\n */\nexport declare class GridFSBucketWriteStream extends Writable {\n    bucket: GridFSBucket;\n    /** A Collection instance where the file's chunks are stored */\n    chunks: Collection<GridFSChunk>;\n    /** A Collection instance where the file's GridFSFile document is stored */\n    files: Collection<GridFSFile>;\n    /** The name of the file */\n    filename: string;\n    /** Options controlling the metadata inserted along with the file */\n    options: GridFSBucketWriteStreamOptions;\n    /** Indicates the stream is finished uploading */\n    done: boolean;\n    /** The ObjectId used for the `_id` field on the GridFSFile document */\n    id: ObjectId;\n    /** The number of bytes that each chunk will be limited to */\n    chunkSizeBytes: number;\n    /** Space used to store a chunk currently being inserted */\n    bufToStore: Buffer;\n    /** Accumulates the number of bytes inserted as the stream uploads chunks */\n    length: number;\n    /** Accumulates the number of chunks inserted as the stream uploads file contents */\n    n: number;\n    /** Tracks the current offset into the buffered bytes being uploaded */\n    pos: number;\n    /** Contains a number of properties indicating the current state of the stream */\n    state: {\n        /** If set the stream has ended */\n        streamEnd: boolean;\n        /** Indicates the number of chunks that still need to be inserted to exhaust the current buffered data */\n        outstandingRequests: number;\n        /** If set an error occurred during insertion */\n        errored: boolean;\n        /** If set the stream was intentionally aborted */\n        aborted: boolean;\n    };\n    /** The write concern setting to be used with every insert operation */\n    writeConcern?: WriteConcern;\n    /**\n     * The document containing information about the inserted file.\n     * This property is defined _after_ the finish event has been emitted.\n     * It will remain `null` if an error occurs.\n     *\n     * @example\n     * ```ts\n     * fs.createReadStream('file.txt')\n     *   .pipe(bucket.openUploadStream('file.txt'))\n     *   .on('finish', function () {\n     *     console.log(this.gridFSFile)\n     *   })\n     * ```\n     */\n    gridFSFile: GridFSFile | null;\n    /* Excluded from this release type: timeoutContext */\n    /* Excluded from this release type: __constructor */\n    /* Excluded from this release type: _construct */\n    /* Excluded from this release type: _write */\n    /* Excluded from this release type: _final */\n    /**\n     * Places this write stream into an aborted state (all future writes fail)\n     * and deletes all chunks that have already been written.\n     */\n    abort(): Promise<void>;\n}\n\n/** @public */\nexport declare interface GridFSBucketWriteStreamOptions extends WriteConcernOptions {\n    /** Overwrite this bucket's chunkSizeBytes for this file */\n    chunkSizeBytes?: number;\n    /** Custom file id for the GridFS file. */\n    id?: ObjectId;\n    /** Object to store in the file document's `metadata` field */\n    metadata?: Document;\n    /**\n     * String to store in the file document's `contentType` field.\n     * @deprecated Will be removed in the next major version. Add a contentType field to the metadata document instead.\n     */\n    contentType?: string;\n    /**\n     * Array of strings to store in the file document's `aliases` field.\n     * @deprecated Will be removed in the next major version. Add an aliases field to the metadata document instead.\n     */\n    aliases?: string[];\n    /**\n     * @experimental\n     * Specifies the time an operation will run until it throws a timeout error\n     */\n    timeoutMS?: number;\n}\n\n/** @public */\nexport declare interface GridFSChunk {\n    _id: ObjectId;\n    files_id: ObjectId;\n    n: number;\n    data: Buffer | Uint8Array;\n}\n\n/** @public */\nexport declare interface GridFSFile {\n    _id: ObjectId;\n    length: number;\n    chunkSize: number;\n    filename: string;\n    metadata?: Document;\n    uploadDate: Date;\n    /** @deprecated Will be removed in the next major version. */\n    contentType?: string;\n    /** @deprecated Will be removed in the next major version. */\n    aliases?: string[];\n}\n\n/** @public */\nexport declare const GSSAPICanonicalizationValue: Readonly<{\n    readonly on: true;\n    readonly off: false;\n    readonly none: \"none\";\n    readonly forward: \"forward\";\n    readonly forwardAndReverse: \"forwardAndReverse\";\n}>;\n\n/** @public */\nexport declare type GSSAPICanonicalizationValue = (typeof GSSAPICanonicalizationValue)[keyof typeof GSSAPICanonicalizationValue];\n\n/* Excluded from this release type: HandshakeDocument */\n\n/** @public */\nexport declare interface HedgeOptions {\n    /** Explicitly enable or disable hedged reads. */\n    enabled?: boolean;\n}\n\n/** @public */\nexport declare type Hint = string | Document;\n\n/** @public */\nexport declare class HostAddress {\n    host: string | undefined;\n    port: number | undefined;\n    socketPath: string | undefined;\n    isIPv6: boolean;\n    constructor(hostString: string);\n    inspect(): string;\n    toString(): string;\n    static fromString(this: void, s: string): HostAddress;\n    static fromHostPort(host: string, port: number): HostAddress;\n    static fromSrvRecord({ name, port }: SrvRecord): HostAddress;\n    toHostPort(): {\n        host: string;\n        port: number;\n    };\n}\n\n/**\n * The information returned by the server on the IDP server.\n * @public\n */\nexport declare interface IdPInfo {\n    /**\n     * A URL which describes the Authentication Server. This identifier should\n     * be the iss of provided access tokens, and be viable for RFC8414 metadata\n     * discovery and RFC9207 identification.\n     */\n    issuer: string;\n    /** A unique client ID for this OIDC client. */\n    clientId: string;\n    /** A list of additional scopes to request from IdP. */\n    requestScopes?: string[];\n}\n\n/**\n * The response from the IdP server with the access token and\n * optional expiration time and refresh token.\n * @public\n */\nexport declare interface IdPServerResponse {\n    /** The OIDC access token. */\n    accessToken: string;\n    /** The time when the access token expires. For future use. */\n    expiresInSeconds?: number;\n    /** The refresh token, if applicable, to be used by the callback to request a new token from the issuer. */\n    refreshToken?: string;\n}\n\n/** @public */\nexport declare interface IndexDescription extends Pick<CreateIndexesOptions, 'background' | 'unique' | 'partialFilterExpression' | 'sparse' | 'hidden' | 'expireAfterSeconds' | 'storageEngine' | 'version' | 'weights' | 'default_language' | 'language_override' | 'textIndexVersion' | '2dsphereIndexVersion' | 'bits' | 'min' | 'max' | 'bucketSize' | 'wildcardProjection'> {\n    collation?: CollationOptions;\n    name?: string;\n    key: {\n        [key: string]: IndexDirection;\n    } | Map<string, IndexDirection>;\n}\n\n/** @public */\nexport declare type IndexDescriptionCompact = Record<string, [name: string, direction: IndexDirection][]>;\n\n/**\n * @public\n * The index information returned by the listIndexes command. https://www.mongodb.com/docs/manual/reference/command/listIndexes/#mongodb-dbcommand-dbcmd.listIndexes\n */\nexport declare type IndexDescriptionInfo = Omit<IndexDescription, 'key' | 'version'> & {\n    key: {\n        [key: string]: IndexDirection;\n    };\n    v?: IndexDescription['version'];\n} & Document;\n\n/** @public */\nexport declare type IndexDirection = -1 | 1 | '2d' | '2dsphere' | 'text' | 'geoHaystack' | 'hashed' | number;\n\n/** @public */\nexport declare interface IndexInformationOptions extends ListIndexesOptions {\n    /**\n     * When `true`, an array of index descriptions is returned.\n     * When `false`, the driver returns an object that with keys corresponding to index names with values\n     * corresponding to the entries of the indexes' key.\n     *\n     * For example, the given the following indexes:\n     * ```\n     * [ { name: 'a_1', key: { a: 1 } }, { name: 'b_1_c_1' , key: { b: 1, c: 1 } }]\n     * ```\n     *\n     * When `full` is `true`, the above array is returned.  When `full` is `false`, the following is returned:\n     * ```\n     * {\n     *   'a_1': [['a', 1]],\n     *   'b_1_c_1': [['b', 1], ['c', 1]],\n     * }\n     * ```\n     */\n    full?: boolean;\n}\n\n/** @public */\nexport declare type IndexSpecification = OneOrMore<string | [string, IndexDirection] | {\n    [key: string]: IndexDirection;\n} | Map<string, IndexDirection>>;\n\n/** Given an object shaped type, return the type of the _id field or default to ObjectId @public */\nexport declare type InferIdType<TSchema> = TSchema extends {\n    _id: infer IdType;\n} ? Record<any, never> extends IdType ? never : IdType : TSchema extends {\n    _id?: infer IdType;\n} ? unknown extends IdType ? ObjectId : IdType : ObjectId;\n\n/* Excluded from this release type: InitialCursorResponse */\n\n/** @public */\nexport declare interface InsertManyResult<TSchema = Document> {\n    /** Indicates whether this write result was acknowledged. If not, then all other members of this result will be undefined */\n    acknowledged: boolean;\n    /** The number of inserted documents for this operations */\n    insertedCount: number;\n    /** Map of the index of the inserted document to the id of the inserted document */\n    insertedIds: {\n        [key: number]: InferIdType<TSchema>;\n    };\n}\n\n/** @public */\nexport declare interface InsertOneModel<TSchema extends Document = Document> {\n    /** The document to insert. */\n    document: OptionalId<TSchema>;\n}\n\n/** @public */\nexport declare interface InsertOneOptions extends CommandOperationOptions {\n    /** Allow driver to bypass schema validation. */\n    bypassDocumentValidation?: boolean;\n    /** Force server to assign _id values instead of driver. */\n    forceServerObjectId?: boolean;\n}\n\n/** @public */\nexport declare interface InsertOneResult<TSchema = Document> {\n    /** Indicates whether this write result was acknowledged. If not, then all other members of this result will be undefined */\n    acknowledged: boolean;\n    /** The identifier that was inserted. If the server generated the identifier, this value will be null as the driver does not have access to that data */\n    insertedId: InferIdType<TSchema>;\n}\n\nexport { Int32 }\n\n/** @public */\nexport declare type IntegerType = number | Int32 | Long | bigint;\n\n/* Excluded from this release type: InternalAbstractCursorOptions */\n\n/** @public */\nexport declare type IsAny<Type, ResultIfAny, ResultIfNotAny> = true extends false & Type ? ResultIfAny : ResultIfNotAny;\n\n/**\n * Helper types for dot-notation filter attributes\n */\n/** @public */\nexport declare type Join<T extends unknown[], D extends string> = T extends [] ? '' : T extends [string | number] ? `${T[0]}` : T extends [string | number, ...infer R] ? `${T[0]}${D}${Join<R, D>}` : string;\n\n/* Excluded from this release type: JSTypeOf */\n\n/* Excluded from this release type: kDecorateResult */\n\n/** @public */\nexport declare type KeysOfAType<TSchema, Type> = {\n    [key in keyof TSchema]: NonNullable<TSchema[key]> extends Type ? key : never;\n}[keyof TSchema];\n\n/** @public */\nexport declare type KeysOfOtherType<TSchema, Type> = {\n    [key in keyof TSchema]: NonNullable<TSchema[key]> extends Type ? never : key;\n}[keyof TSchema];\n\n/**\n * @public\n * Configuration options for making a KMIP encryption key\n */\nexport declare interface KMIPEncryptionKeyOptions {\n    /**\n     * keyId is the KMIP Unique Identifier to a 96 byte KMIP Secret Data managed object.\n     *\n     * If keyId is omitted, a random 96 byte KMIP Secret Data managed object will be created.\n     */\n    keyId?: string;\n    /**\n     * Host with optional port.\n     */\n    endpoint?: string;\n    /**\n     * If true, this key should be decrypted by the KMIP server.\n     *\n     * Requires `mongodb-client-encryption>=6.0.1`.\n     */\n    delegated?: boolean;\n}\n\n/** @public */\nexport declare interface KMIPKMSProviderConfiguration {\n    /**\n     * The output endpoint string.\n     * The endpoint consists of a hostname and port separated by a colon.\n     * E.g. \"example.com:123\". A port is always present.\n     */\n    endpoint?: string;\n}\n\n/**\n * @public\n * Configuration options that are used by specific KMS providers during key generation, encryption, and decryption.\n *\n * Named KMS providers _are not supported_ for automatic KMS credential fetching.\n */\nexport declare interface KMSProviders {\n    /**\n     * Configuration options for using 'aws' as your KMS provider\n     */\n    aws?: AWSKMSProviderConfiguration | Record<string, never>;\n    [key: `aws:${string}`]: AWSKMSProviderConfiguration;\n    /**\n     * Configuration options for using 'local' as your KMS provider\n     */\n    local?: LocalKMSProviderConfiguration;\n    [key: `local:${string}`]: LocalKMSProviderConfiguration;\n    /**\n     * Configuration options for using 'kmip' as your KMS provider\n     */\n    kmip?: KMIPKMSProviderConfiguration;\n    [key: `kmip:${string}`]: KMIPKMSProviderConfiguration;\n    /**\n     * Configuration options for using 'azure' as your KMS provider\n     */\n    azure?: AzureKMSProviderConfiguration | Record<string, never>;\n    [key: `azure:${string}`]: AzureKMSProviderConfiguration;\n    /**\n     * Configuration options for using 'gcp' as your KMS provider\n     */\n    gcp?: GCPKMSProviderConfiguration | Record<string, never>;\n    [key: `gcp:${string}`]: GCPKMSProviderConfiguration;\n}\n\n/* Excluded from this release type: LegacyTimeoutContext */\n\n/* Excluded from this release type: LegacyTimeoutContextOptions */\n\n/** @public */\nexport declare const LEGAL_TCP_SOCKET_OPTIONS: readonly [\"autoSelectFamily\", \"autoSelectFamilyAttemptTimeout\", \"family\", \"hints\", \"localAddress\", \"localPort\", \"lookup\"];\n\n/** @public */\nexport declare const LEGAL_TLS_SOCKET_OPTIONS: readonly [\"allowPartialTrustChain\", \"ALPNProtocols\", \"ca\", \"cert\", \"checkServerIdentity\", \"ciphers\", \"crl\", \"ecdhCurve\", \"key\", \"minDHSize\", \"passphrase\", \"pfx\", \"rejectUnauthorized\", \"secureContext\", \"secureProtocol\", \"servername\", \"session\"];\n\n/* Excluded from this release type: List */\n\n/** @public */\nexport declare class ListCollectionsCursor<T extends Pick<CollectionInfo, 'name' | 'type'> | CollectionInfo = Pick<CollectionInfo, 'name' | 'type'> | CollectionInfo> extends AbstractCursor<T> {\n    parent: Db;\n    filter: Document;\n    options?: ListCollectionsOptions & Abortable;\n    constructor(db: Db, filter: Document, options?: ListCollectionsOptions & Abortable);\n    clone(): ListCollectionsCursor<T>;\n    /* Excluded from this release type: _initialize */\n}\n\n/** @public */\nexport declare interface ListCollectionsOptions extends Omit<CommandOperationOptions, 'writeConcern'>, Abortable {\n    /** Since 4.0: If true, will only return the collection name in the response, and will omit additional info */\n    nameOnly?: boolean;\n    /** Since 4.0: If true and nameOnly is true, allows a user without the required privilege (i.e. listCollections action on the database) to run the command when access control is enforced. */\n    authorizedCollections?: boolean;\n    /** The batchSize for the returned command cursor or if pre 2.8 the systems batch collection */\n    batchSize?: number;\n    /* Excluded from this release type: timeoutMode */\n    /* Excluded from this release type: timeoutContext */\n}\n\n/** @public */\nexport declare interface ListDatabasesOptions extends CommandOperationOptions {\n    /** A query predicate that determines which databases are listed */\n    filter?: Document;\n    /** A flag to indicate whether the command should return just the database names, or return both database names and size information */\n    nameOnly?: boolean;\n    /** A flag that determines which databases are returned based on the user privileges when access control is enabled */\n    authorizedDatabases?: boolean;\n}\n\n/** @public */\nexport declare interface ListDatabasesResult {\n    databases: ({\n        name: string;\n        sizeOnDisk?: number;\n        empty?: boolean;\n    } & Document)[];\n    totalSize?: number;\n    totalSizeMb?: number;\n    ok: 1 | 0;\n}\n\n/** @public */\nexport declare class ListIndexesCursor extends AbstractCursor {\n    parent: Collection;\n    options?: ListIndexesOptions;\n    constructor(collection: Collection, options?: ListIndexesOptions);\n    clone(): ListIndexesCursor;\n    /* Excluded from this release type: _initialize */\n}\n\n/** @public */\nexport declare type ListIndexesOptions = AbstractCursorOptions & {\n    /* Excluded from this release type: omitMaxTimeMS */\n};\n\n/** @public */\nexport declare class ListSearchIndexesCursor extends AggregationCursor<{\n    name: string;\n}> {\n    /* Excluded from this release type: __constructor */\n}\n\n/** @public */\nexport declare type ListSearchIndexesOptions = Omit<AggregateOptions, 'readConcern' | 'writeConcern'>;\n\n/** @public */\nexport declare interface LocalKMSProviderConfiguration {\n    /**\n     * The master key used to encrypt/decrypt data keys.\n     * A 96-byte long Buffer or base64 encoded string.\n     */\n    key: Binary | Uint8Array | string;\n}\n\n/** @public */\nexport declare interface Log extends Record<string, any> {\n    t: Date;\n    c: MongoLoggableComponent;\n    s: SeverityLevel;\n    message?: string;\n}\n\n/** @public */\nexport declare interface LogComponentSeveritiesClientOptions {\n    /** Optional severity level for command component */\n    command?: SeverityLevel;\n    /** Optional severity level for topology component */\n    topology?: SeverityLevel;\n    /** Optional severity level for server selection component */\n    serverSelection?: SeverityLevel;\n    /** Optional severity level for connection component */\n    connection?: SeverityLevel;\n    /** Optional severity level for client component */\n    client?: SeverityLevel;\n    /** Optional default severity level to be used if any of the above are unset */\n    default?: SeverityLevel;\n}\n\n/* Excluded from this release type: LogConvertible */\n\n/* Excluded from this release type: Loggable */\n\n/* Excluded from this release type: LoggableCommandFailedEvent */\n\n/* Excluded from this release type: LoggableCommandSucceededEvent */\n\n/* Excluded from this release type: LoggableEvent */\n\n/* Excluded from this release type: LoggableServerHeartbeatFailedEvent */\n\n/* Excluded from this release type: LoggableServerHeartbeatStartedEvent */\n\n/* Excluded from this release type: LoggableServerHeartbeatSucceededEvent */\nexport { Long }\n\n/** @public */\nexport declare type MatchKeysAndValues<TSchema> = Readonly<Partial<TSchema>> & Record<string, any>;\n\nexport { MaxKey }\n\n/* Excluded from this release type: MessageHeader */\nexport { MinKey }\n\n/** @public */\nexport declare interface ModifyResult<TSchema = Document> {\n    value: WithId<TSchema> | null;\n    lastErrorObject?: Document;\n    ok: 0 | 1;\n}\n\n/** @public */\nexport declare const MONGO_CLIENT_EVENTS: readonly [\"connectionPoolCreated\", \"connectionPoolReady\", \"connectionPoolCleared\", \"connectionPoolClosed\", \"connectionCreated\", \"connectionReady\", \"connectionClosed\", \"connectionCheckOutStarted\", \"connectionCheckOutFailed\", \"connectionCheckedOut\", \"connectionCheckedIn\", \"commandStarted\", \"commandSucceeded\", \"commandFailed\", \"serverOpening\", \"serverClosed\", \"serverDescriptionChanged\", \"topologyOpening\", \"topologyClosed\", \"topologyDescriptionChanged\", \"error\", \"timeout\", \"close\", \"serverHeartbeatStarted\", \"serverHeartbeatSucceeded\", \"serverHeartbeatFailed\"];\n\n/**\n * An error generated when the driver API is used incorrectly\n *\n * @privateRemarks\n * Should **never** be directly instantiated\n *\n * @public\n * @category Error\n */\nexport declare class MongoAPIError extends MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message: string, options?: {\n        cause?: Error;\n    });\n    get name(): string;\n}\n\n/**\n * A error generated when the user attempts to authenticate\n * via AWS, but fails\n *\n * @public\n * @category Error\n */\nexport declare class MongoAWSError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message: string, options?: {\n        cause?: Error;\n    });\n    get name(): string;\n}\n\n/**\n * A error generated when the user attempts to authenticate\n * via Azure, but fails.\n *\n * @public\n * @category Error\n */\nexport declare class MongoAzureError extends MongoOIDCError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message: string);\n    get name(): string;\n}\n\n/**\n * An error generated when a batch command is re-executed after one of the commands in the batch\n * has failed\n *\n * @public\n * @category Error\n */\nexport declare class MongoBatchReExecutionError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message?: string);\n    get name(): string;\n}\n\n/**\n * An error indicating an unsuccessful Bulk Write\n * @public\n * @category Error\n */\nexport declare class MongoBulkWriteError extends MongoServerError {\n    result: BulkWriteResult;\n    writeErrors: OneOrMore<WriteError>;\n    err?: WriteConcernError;\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(error: {\n        message: string;\n        code: number;\n        writeErrors?: WriteError[];\n    } | WriteConcernError | AnyError, result: BulkWriteResult);\n    get name(): string;\n    /** Number of documents inserted. */\n    get insertedCount(): number;\n    /** Number of documents matched for update. */\n    get matchedCount(): number;\n    /** Number of documents modified. */\n    get modifiedCount(): number;\n    /** Number of documents deleted. */\n    get deletedCount(): number;\n    /** Number of documents upserted. */\n    get upsertedCount(): number;\n    /** Inserted document generated Id's, hash key is the index of the originating operation */\n    get insertedIds(): {\n        [key: number]: any;\n    };\n    /** Upserted document generated Id's, hash key is the index of the originating operation */\n    get upsertedIds(): {\n        [key: number]: any;\n    };\n}\n\n/**\n * An error generated when a ChangeStream operation fails to execute.\n *\n * @public\n * @category Error\n */\nexport declare class MongoChangeStreamError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message: string);\n    get name(): string;\n}\n\n/**\n * The **MongoClient** class is a class that allows for making Connections to MongoDB.\n * @public\n *\n * @remarks\n * The programmatically provided options take precedence over the URI options.\n *\n * @example\n * ```ts\n * import { MongoClient } from '/mongodb.ts';\n *\n * // Enable command monitoring for debugging\n * const client = new MongoClient('mongodb://localhost:27017', { monitorCommands: true });\n *\n * client.on('commandStarted', started => console.log(started));\n * client.db().collection('pets');\n * await client.insertOne({ name: 'spot', kind: 'dog' });\n * ```\n */\nexport declare class MongoClient extends TypedEventEmitter<MongoClientEvents> implements AsyncDisposable_2 {\n    /* Excluded from this release type: s */\n    /* Excluded from this release type: topology */\n    /* Excluded from this release type: mongoLogger */\n    /* Excluded from this release type: connectionLock */\n    /* Excluded from this release type: closeLock */\n    /**\n     * The consolidate, parsed, transformed and merged options.\n     */\n    readonly options: Readonly<Omit<MongoOptions, 'monitorCommands' | 'ca' | 'crl' | 'key' | 'cert'>> & Pick<MongoOptions, 'monitorCommands' | 'ca' | 'crl' | 'key' | 'cert'>;\n    constructor(url: string, options?: MongoClientOptions);\n    /* Excluded from this release type: [Symbol.asyncDispose] */\n    /* Excluded from this release type: asyncDispose */\n    /* Excluded from this release type: checkForNonGenuineHosts */\n    get serverApi(): Readonly<ServerApi | undefined>;\n    /* Excluded from this release type: monitorCommands */\n    /* Excluded from this release type: monitorCommands */\n    /* Excluded from this release type: autoEncrypter */\n    get readConcern(): ReadConcern | undefined;\n    get writeConcern(): WriteConcern | undefined;\n    get readPreference(): ReadPreference;\n    get bsonOptions(): BSONSerializeOptions;\n    get timeoutMS(): number | undefined;\n    /**\n     * Executes a client bulk write operation, available on server 8.0+.\n     * @param models - The client bulk write models.\n     * @param options - The client bulk write options.\n     * @returns A ClientBulkWriteResult for acknowledged writes and ok: 1 for unacknowledged writes.\n     */\n    bulkWrite<SchemaMap extends Record<string, Document> = Record<string, Document>>(models: ReadonlyArray<ClientBulkWriteModel<SchemaMap>>, options?: ClientBulkWriteOptions): Promise<ClientBulkWriteResult>;\n    /**\n     * Connect to MongoDB using a url\n     *\n     * @remarks\n     * Calling `connect` is optional since the first operation you perform will call `connect` if it's needed.\n     * `timeoutMS` will bound the time any operation can take before throwing a timeout error.\n     * However, when the operation being run is automatically connecting your `MongoClient` the `timeoutMS` will not apply to the time taken to connect the MongoClient.\n     * This means the time to setup the `MongoClient` does not count against `timeoutMS`.\n     * If you are using `timeoutMS` we recommend connecting your client explicitly in advance of any operation to avoid this inconsistent execution time.\n     *\n     * @remarks\n     * The driver will look up corresponding SRV and TXT records if the connection string starts with `mongodb+srv://`.\n     * If those look ups throw a DNS Timeout error, the driver will retry the look up once.\n     *\n     * @see docs.mongodb.org/manual/reference/connection-string/\n     */\n    connect(): Promise<this>;\n    /* Excluded from this release type: _connect */\n    /**\n     * Cleans up client-side resources used by the MongoCLient and .  This includes:\n     *\n     * - Closes all open, unused connections (see note).\n     * - Ends all in-use sessions with {@link ClientSession#endSession|ClientSession.endSession()}.\n     * - Ends all unused sessions server-side.\n     * - Cleans up any resources being used for auto encryption if auto encryption is enabled.\n     *\n     * @remarks Any in-progress operations are not killed and any connections used by in progress operations\n     * will be cleaned up lazily as operations finish.\n     *\n     * @param force - Force close, emitting no events\n     */\n    close(force?: boolean): Promise<void>;\n    private _close;\n    /**\n     * Create a new Db instance sharing the current socket connections.\n     *\n     * @param dbName - The name of the database we want to use. If not provided, use database name from connection string.\n     * @param options - Optional settings for Db construction\n     */\n    db(dbName?: string, options?: DbOptions): Db;\n    /**\n     * Connect to MongoDB using a url\n     *\n     * @remarks\n     * Calling `connect` is optional since the first operation you perform will call `connect` if it's needed.\n     * `timeoutMS` will bound the time any operation can take before throwing a timeout error.\n     * However, when the operation being run is automatically connecting your `MongoClient` the `timeoutMS` will not apply to the time taken to connect the MongoClient.\n     * This means the time to setup the `MongoClient` does not count against `timeoutMS`.\n     * If you are using `timeoutMS` we recommend connecting your client explicitly in advance of any operation to avoid this inconsistent execution time.\n     *\n     * @remarks\n     * The programmatically provided options take precedence over the URI options.\n     *\n     * @remarks\n     * The driver will look up corresponding SRV and TXT records if the connection string starts with `mongodb+srv://`.\n     * If those look ups throw a DNS Timeout error, the driver will retry the look up once.\n     *\n     * @see https://www.mongodb.com/docs/manual/reference/connection-string/\n     */\n    static connect(url: string, options?: MongoClientOptions): Promise<MongoClient>;\n    /**\n     * Creates a new ClientSession. When using the returned session in an operation\n     * a corresponding ServerSession will be created.\n     *\n     * @remarks\n     * A ClientSession instance may only be passed to operations being performed on the same\n     * MongoClient it was started from.\n     */\n    startSession(options?: ClientSessionOptions): ClientSession;\n    /**\n     * A convenience method for creating and handling the clean up of a ClientSession.\n     * The session will always be ended when the executor finishes.\n     *\n     * @param executor - An executor function that all operations using the provided session must be invoked in\n     * @param options - optional settings for the session\n     */\n    withSession<T = any>(executor: WithSessionCallback<T>): Promise<T>;\n    withSession<T = any>(options: ClientSessionOptions, executor: WithSessionCallback<T>): Promise<T>;\n    /**\n     * Create a new Change Stream, watching for new changes (insertions, updates,\n     * replacements, deletions, and invalidations) in this cluster. Will ignore all\n     * changes to system collections, as well as the local, admin, and config databases.\n     *\n     * @remarks\n     * watch() accepts two generic arguments for distinct use cases:\n     * - The first is to provide the schema that may be defined for all the data within the current cluster\n     * - The second is to override the shape of the change stream document entirely, if it is not provided the type will default to ChangeStreamDocument of the first argument\n     *\n     * @remarks\n     * When `timeoutMS` is configured for a change stream, it will have different behaviour depending\n     * on whether the change stream is in iterator mode or emitter mode. In both cases, a change\n     * stream will time out if it does not receive a change event within `timeoutMS` of the last change\n     * event.\n     *\n     * Note that if a change stream is consistently timing out when watching a collection, database or\n     * client that is being changed, then this may be due to the server timing out before it can finish\n     * processing the existing oplog. To address this, restart the change stream with a higher\n     * `timeoutMS`.\n     *\n     * If the change stream times out the initial aggregate operation to establish the change stream on\n     * the server, then the client will close the change stream. If the getMore calls to the server\n     * time out, then the change stream will be left open, but will throw a MongoOperationTimeoutError\n     * when in iterator mode and emit an error event that returns a MongoOperationTimeoutError in\n     * emitter mode.\n     *\n     * To determine whether or not the change stream is still open following a timeout, check the\n     * {@link ChangeStream.closed} getter.\n     *\n     * @example\n     * In iterator mode, if a next() call throws a timeout error, it will attempt to resume the change stream.\n     * The next call can just be retried after this succeeds.\n     * ```ts\n     * const changeStream = collection.watch([], { timeoutMS: 100 });\n     * try {\n     *     await changeStream.next();\n     * } catch (e) {\n     *     if (e instanceof MongoOperationTimeoutError && !changeStream.closed) {\n     *       await changeStream.next();\n     *     }\n     *     throw e;\n     * }\n     * ```\n     *\n     * @example\n     * In emitter mode, if the change stream goes `timeoutMS` without emitting a change event, it will\n     * emit an error event that returns a MongoOperationTimeoutError, but will not close the change\n     * stream unless the resume attempt fails. There is no need to re-establish change listeners as\n     * this will automatically continue emitting change events once the resume attempt completes.\n     *\n     * ```ts\n     * const changeStream = collection.watch([], { timeoutMS: 100 });\n     * changeStream.on('change', console.log);\n     * changeStream.on('error', e => {\n     *     if (e instanceof MongoOperationTimeoutError && !changeStream.closed) {\n     *         // do nothing\n     *     } else {\n     *         changeStream.close();\n     *     }\n     * });\n     * ```\n     * @param pipeline - An array of {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation-pipeline/|aggregation pipeline stages} through which to pass change stream documents. This allows for filtering (using $match) and manipulating the change stream documents.\n     * @param options - Optional settings for the command\n     * @typeParam TSchema - Type of the data being detected by the change stream\n     * @typeParam TChange - Type of the whole change stream document emitted\n     */\n    watch<TSchema extends Document = Document, TChange extends Document = ChangeStreamDocument<TSchema>>(pipeline?: Document[], options?: ChangeStreamOptions): ChangeStream<TSchema, TChange>;\n}\n\n/* Excluded from this release type: MongoClientAuthProviders */\n\n/**\n * An error indicating that an error occurred when processing bulk write results.\n *\n * @public\n * @category Error\n */\nexport declare class MongoClientBulkWriteCursorError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message: string);\n    get name(): string;\n}\n\n/**\n * An error indicating that an error occurred when executing the bulk write.\n *\n * @public\n * @category Error\n */\nexport declare class MongoClientBulkWriteError extends MongoServerError {\n    /**\n     * Write concern errors that occurred while executing the bulk write. This list may have\n     * multiple items if more than one server command was required to execute the bulk write.\n     */\n    writeConcernErrors: Document[];\n    /**\n     * Errors that occurred during the execution of individual write operations. This map will\n     * contain at most one entry if the bulk write was ordered.\n     */\n    writeErrors: Map<number, ClientBulkWriteError>;\n    /**\n     * The results of any successful operations that were performed before the error was\n     * encountered.\n     */\n    partialResult?: ClientBulkWriteResult;\n    /**\n     * Initialize the client bulk write error.\n     * @param message - The error message.\n     */\n    constructor(message: ErrorDescription);\n    get name(): string;\n}\n\n/**\n * An error indicating that an error occurred on the client when executing a client bulk write.\n *\n * @public\n * @category Error\n */\nexport declare class MongoClientBulkWriteExecutionError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message: string);\n    get name(): string;\n}\n\n/** @public */\nexport declare type MongoClientEvents = Pick<TopologyEvents, (typeof MONGO_CLIENT_EVENTS)[number]> & {\n    open(mongoClient: MongoClient): void;\n};\n\n/**\n * Describes all possible URI query options for the mongo client\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/connection-string\n */\nexport declare interface MongoClientOptions extends BSONSerializeOptions, SupportedNodeConnectionOptions {\n    /** Specifies the name of the replica set, if the mongod is a member of a replica set. */\n    replicaSet?: string;\n    /**\n     * @experimental\n     * Specifies the time an operation will run until it throws a timeout error\n     */\n    timeoutMS?: number;\n    /** Enables or disables TLS/SSL for the connection. */\n    tls?: boolean;\n    /** A boolean to enable or disables TLS/SSL for the connection. (The ssl option is equivalent to the tls option.) */\n    ssl?: boolean;\n    /** Specifies the location of a local .pem file that contains either the client's TLS/SSL certificate and key. */\n    tlsCertificateKeyFile?: string;\n    /** Specifies the password to de-crypt the tlsCertificateKeyFile. */\n    tlsCertificateKeyFilePassword?: string;\n    /** Specifies the location of a local .pem file that contains the root certificate chain from the Certificate Authority. This file is used to validate the certificate presented by the mongod/mongos instance. */\n    tlsCAFile?: string;\n    /** Specifies the location of a local CRL .pem file that contains the client revokation list. */\n    tlsCRLFile?: string;\n    /** Bypasses validation of the certificates presented by the mongod/mongos instance */\n    tlsAllowInvalidCertificates?: boolean;\n    /** Disables hostname validation of the certificate presented by the mongod/mongos instance. */\n    tlsAllowInvalidHostnames?: boolean;\n    /** Disables various certificate validations. */\n    tlsInsecure?: boolean;\n    /** The time in milliseconds to attempt a connection before timing out. */\n    connectTimeoutMS?: number;\n    /** The time in milliseconds to attempt a send or receive on a socket before the attempt times out. */\n    socketTimeoutMS?: number;\n    /** An array or comma-delimited string of compressors to enable network compression for communication between this client and a mongod/mongos instance. */\n    compressors?: CompressorName[] | string;\n    /** An integer that specifies the compression level if using zlib for network compression. */\n    zlibCompressionLevel?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | undefined;\n    /** The maximum number of hosts to connect to when using an srv connection string, a setting of `0` means unlimited hosts */\n    srvMaxHosts?: number;\n    /**\n     * Modifies the srv URI to look like:\n     *\n     * `_{srvServiceName}._tcp.{hostname}.{domainname}`\n     *\n     * Querying this DNS URI is expected to respond with SRV records\n     */\n    srvServiceName?: string;\n    /** The maximum number of connections in the connection pool. */\n    maxPoolSize?: number;\n    /** The minimum number of connections in the connection pool. */\n    minPoolSize?: number;\n    /** The maximum number of connections that may be in the process of being established concurrently by the connection pool. */\n    maxConnecting?: number;\n    /** The maximum number of milliseconds that a connection can remain idle in the pool before being removed and closed. */\n    maxIdleTimeMS?: number;\n    /** The maximum time in milliseconds that a thread can wait for a connection to become available. */\n    waitQueueTimeoutMS?: number;\n    /** Specify a read concern for the collection (only MongoDB 3.2 or higher supported) */\n    readConcern?: ReadConcernLike;\n    /** The level of isolation */\n    readConcernLevel?: ReadConcernLevel;\n    /** Specifies the read preferences for this connection */\n    readPreference?: ReadPreferenceMode | ReadPreference;\n    /** Specifies, in seconds, how stale a secondary can be before the client stops using it for read operations. */\n    maxStalenessSeconds?: number;\n    /** Specifies the tags document as a comma-separated list of colon-separated key-value pairs.  */\n    readPreferenceTags?: TagSet[];\n    /** The auth settings for when connection to server. */\n    auth?: Auth;\n    /** Specify the database name associated with the user’s credentials. */\n    authSource?: string;\n    /** Specify the authentication mechanism that MongoDB will use to authenticate the connection. */\n    authMechanism?: AuthMechanism;\n    /** Specify properties for the specified authMechanism as a comma-separated list of colon-separated key-value pairs. */\n    authMechanismProperties?: AuthMechanismProperties;\n    /** The size (in milliseconds) of the latency window for selecting among multiple suitable MongoDB instances. */\n    localThresholdMS?: number;\n    /** Specifies how long (in milliseconds) to block for server selection before throwing an exception.  */\n    serverSelectionTimeoutMS?: number;\n    /** heartbeatFrequencyMS controls when the driver checks the state of the MongoDB deployment. Specify the interval (in milliseconds) between checks, counted from the end of the previous check until the beginning of the next one. */\n    heartbeatFrequencyMS?: number;\n    /** Sets the minimum heartbeat frequency. In the event that the driver has to frequently re-check a server's availability, it will wait at least this long since the previous check to avoid wasted effort. */\n    minHeartbeatFrequencyMS?: number;\n    /** The name of the application that created this MongoClient instance. MongoDB 3.4 and newer will print this value in the server log upon establishing each connection. It is also recorded in the slow query log and profile collections */\n    appName?: string;\n    /** Enables retryable reads. */\n    retryReads?: boolean;\n    /** Enable retryable writes. */\n    retryWrites?: boolean;\n    /** Allow a driver to force a Single topology type with a connection string containing one host */\n    directConnection?: boolean;\n    /** Instruct the driver it is connecting to a load balancer fronting a mongos like service */\n    loadBalanced?: boolean;\n    /**\n     * The write concern w value\n     * @deprecated Please use the `writeConcern` option instead\n     */\n    w?: W;\n    /**\n     * The write concern timeout\n     * @deprecated Please use the `writeConcern` option instead\n     */\n    wtimeoutMS?: number;\n    /**\n     * The journal write concern\n     * @deprecated Please use the `writeConcern` option instead\n     */\n    journal?: boolean;\n    /**\n     * A MongoDB WriteConcern, which describes the level of acknowledgement\n     * requested from MongoDB for write operations.\n     *\n     * @see https://www.mongodb.com/docs/manual/reference/write-concern/\n     */\n    writeConcern?: WriteConcern | WriteConcernSettings;\n    /** TCP Connection no delay */\n    noDelay?: boolean;\n    /** Force server to assign `_id` values instead of driver */\n    forceServerObjectId?: boolean;\n    /** A primary key factory function for generation of custom `_id` keys */\n    pkFactory?: PkFactory;\n    /** Enable command monitoring for this client */\n    monitorCommands?: boolean;\n    /** Server API version */\n    serverApi?: ServerApi | ServerApiVersion;\n    /**\n     * Optionally enable in-use auto encryption\n     *\n     * @remarks\n     *  Automatic encryption is an enterprise only feature that only applies to operations on a collection. Automatic encryption is not supported for operations on a database or view, and operations that are not bypassed will result in error\n     *  (see [libmongocrypt: Auto Encryption Allow-List](https://github.com/mongodb/specifications/blob/master/source/client-side-encryption/client-side-encryption.md#libmongocrypt-auto-encryption-allow-list)). To bypass automatic encryption for all operations, set bypassAutoEncryption=true in AutoEncryptionOpts.\n     *\n     *  Automatic encryption requires the authenticated user to have the [listCollections privilege action](https://www.mongodb.com/docs/manual/reference/command/listCollections/#dbcmd.listCollections).\n     *\n     *  If a MongoClient with a limited connection pool size (i.e a non-zero maxPoolSize) is configured with AutoEncryptionOptions, a separate internal MongoClient is created if any of the following are true:\n     *  - AutoEncryptionOptions.keyVaultClient is not passed.\n     *  - AutoEncryptionOptions.bypassAutomaticEncryption is false.\n     *\n     * If an internal MongoClient is created, it is configured with the same options as the parent MongoClient except minPoolSize is set to 0 and AutoEncryptionOptions is omitted.\n     */\n    autoEncryption?: AutoEncryptionOptions;\n    /** Allows a wrapping driver to amend the client metadata generated by the driver to include information about the wrapping driver */\n    driverInfo?: DriverInfo;\n    /** Configures a Socks5 proxy host used for creating TCP connections. */\n    proxyHost?: string;\n    /** Configures a Socks5 proxy port used for creating TCP connections. */\n    proxyPort?: number;\n    /** Configures a Socks5 proxy username when the proxy in proxyHost requires username/password authentication. */\n    proxyUsername?: string;\n    /** Configures a Socks5 proxy password when the proxy in proxyHost requires username/password authentication. */\n    proxyPassword?: string;\n    /** Instructs the driver monitors to use a specific monitoring mode */\n    serverMonitoringMode?: ServerMonitoringMode;\n    /**\n     * @public\n     * Specifies the destination of the driver's logging. The default is stderr.\n     */\n    mongodbLogPath?: 'stderr' | 'stdout' | MongoDBLogWritable;\n    /**\n     * @public\n     * Enable logging level per component or use `default` to control any unset components.\n     */\n    mongodbLogComponentSeverities?: LogComponentSeveritiesClientOptions;\n    /**\n     * @public\n     * All BSON documents are stringified to EJSON. This controls the maximum length of those strings.\n     * It is defaulted to 1000.\n     */\n    mongodbLogMaxDocumentLength?: number;\n    /* Excluded from this release type: srvPoller */\n    /* Excluded from this release type: connectionType */\n    /* Excluded from this release type: __skipPingOnConnect */\n}\n\n/* Excluded from this release type: MongoClientPrivate */\n\n/**\n * An error generated when a feature that is not enabled or allowed for the current server\n * configuration is used\n *\n *\n * @public\n * @category Error\n */\nexport declare class MongoCompatibilityError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message: string);\n    get name(): string;\n}\n\n/**\n * A representation of the credentials used by MongoDB\n * @public\n */\nexport declare class MongoCredentials {\n    /** The username used for authentication */\n    readonly username: string;\n    /** The password used for authentication */\n    readonly password: string;\n    /** The database that the user should authenticate against */\n    readonly source: string;\n    /** The method used to authenticate */\n    readonly mechanism: AuthMechanism;\n    /** Special properties used by some types of auth mechanisms */\n    readonly mechanismProperties: AuthMechanismProperties;\n    constructor(options: MongoCredentialsOptions);\n    /** Determines if two MongoCredentials objects are equivalent */\n    equals(other: MongoCredentials): boolean;\n    /**\n     * If the authentication mechanism is set to \"default\", resolves the authMechanism\n     * based on the server version and server supported sasl mechanisms.\n     *\n     * @param hello - A hello response from the server\n     */\n    resolveAuthMechanism(hello: Document | null): MongoCredentials;\n    validate(): void;\n    static merge(creds: MongoCredentials | undefined, options: Partial<MongoCredentialsOptions>): MongoCredentials;\n}\n\n/** @public */\nexport declare interface MongoCredentialsOptions {\n    username?: string;\n    password: string;\n    source: string;\n    db?: string;\n    mechanism?: AuthMechanism;\n    mechanismProperties: AuthMechanismProperties;\n}\n\n/**\n * @public\n * An error indicating that mongodb-client-encryption failed to auto-refresh Azure KMS credentials.\n */\nexport declare class MongoCryptAzureKMSRequestError extends MongoCryptError {\n    /** The body of the http response that failed, if present. */\n    body?: Document;\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message: string, body?: Document);\n    get name(): string;\n}\n\n/**\n * @public\n * An error indicating that `ClientEncryption.createEncryptedCollection()` failed to create data keys\n */\nexport declare class MongoCryptCreateDataKeyError extends MongoCryptError {\n    encryptedFields: Document;\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(encryptedFields: Document, { cause }: {\n        cause: Error;\n    });\n    get name(): string;\n}\n\n/**\n * @public\n * An error indicating that `ClientEncryption.createEncryptedCollection()` failed to create a collection\n */\nexport declare class MongoCryptCreateEncryptedCollectionError extends MongoCryptError {\n    encryptedFields: Document;\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(encryptedFields: Document, { cause }: {\n        cause: Error;\n    });\n    get name(): string;\n}\n\n/* Excluded from this release type: MongocryptdManager */\n\n/**\n * @public\n * An error indicating that something went wrong specifically with MongoDB Client Encryption\n */\nexport declare class MongoCryptError extends MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message: string, options?: {\n        cause?: Error;\n    });\n    get name(): string;\n}\n\n/**\n * @public\n *\n * An error indicating an invalid argument was provided to an encryption API.\n */\nexport declare class MongoCryptInvalidArgumentError extends MongoCryptError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message: string);\n    get name(): string;\n}\n\n/** @public */\nexport declare class MongoCryptKMSRequestNetworkTimeoutError extends MongoCryptError {\n    get name(): string;\n}\n\n/**\n * An error thrown when an attempt is made to read from a cursor that has been exhausted\n *\n * @public\n * @category Error\n */\nexport declare class MongoCursorExhaustedError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message?: string);\n    get name(): string;\n}\n\n/**\n * An error thrown when the user attempts to add options to a cursor that has already been\n * initialized\n *\n * @public\n * @category Error\n */\nexport declare class MongoCursorInUseError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message?: string);\n    get name(): string;\n}\n\n/**\n * @public\n *\n * A class representing a collection's namespace.  This class enforces (through Typescript) that\n * the `collection` portion of the namespace is defined and should only be\n * used in scenarios where this can be guaranteed.\n */\nexport declare class MongoDBCollectionNamespace extends MongoDBNamespace {\n    collection: string;\n    constructor(db: string, collection: string);\n    static fromString(namespace?: string): MongoDBCollectionNamespace;\n}\n\n/**\n * @public\n *\n * A custom destination for structured logging messages.\n */\nexport declare interface MongoDBLogWritable {\n    /**\n     * This function will be called for every enabled log message.\n     *\n     * It can be sync or async:\n     * - If it is synchronous it will block the driver from proceeding until this method returns.\n     * - If it is asynchronous the driver will not await the returned promise. It will attach fulfillment handling (`.then`).\n     *   If the promise rejects the logger will write an error message to stderr and stop functioning.\n     *   If the promise resolves the driver proceeds to the next log message (or waits for new ones to occur).\n     *\n     * Tips:\n     * - We recommend writing an async `write` function that _never_ rejects.\n     *   Instead handle logging errors as necessary to your use case and make the write function a noop, until it can be recovered.\n     * - The Log messages are structured but **subject to change** since the intended purpose is informational.\n     *   Program against this defensively and err on the side of stringifying whatever is passed in to write in some form or another.\n     *\n     */\n    write(log: Log): PromiseLike<unknown> | unknown;\n}\n\n/** @public */\nexport declare class MongoDBNamespace {\n    db: string;\n    collection?: string | undefined;\n    /**\n     * Create a namespace object\n     *\n     * @param db - database name\n     * @param collection - collection name\n     */\n    constructor(db: string, collection?: string | undefined);\n    toString(): string;\n    withCollection(collection: string): MongoDBCollectionNamespace;\n    static fromString(namespace?: string): MongoDBNamespace;\n}\n\n/* Excluded from this release type: MongoDBResponse */\n\n/* Excluded from this release type: MongoDBResponseConstructor */\n\n/**\n * An error generated when the driver fails to decompress\n * data received from the server.\n *\n * @public\n * @category Error\n */\nexport declare class MongoDecompressionError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message: string);\n    get name(): string;\n}\n\n/**\n * An error generated by the driver\n *\n * @public\n * @category Error\n */\nexport declare class MongoDriverError extends MongoError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message: string, options?: {\n        cause?: Error;\n    });\n    get name(): string;\n}\n\n/**\n * @public\n * @category Error\n *\n * @privateRemarks\n * mongodb-client-encryption has a dependency on this error, it uses the constructor with a string argument\n */\nexport declare class MongoError extends Error {\n    /* Excluded from this release type: errorLabelSet */\n    get errorLabels(): string[];\n    /**\n     * This is a number in MongoServerError and a string in MongoDriverError\n     * @privateRemarks\n     * Define the type override on the subclasses when we can use the override keyword\n     */\n    code?: number | string;\n    topologyVersion?: TopologyVersion;\n    connectionGeneration?: number;\n    cause?: Error;\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message: string, options?: {\n        cause?: Error;\n    });\n    /* Excluded from this release type: buildErrorMessage */\n    get name(): string;\n    /** Legacy name for server error responses */\n    get errmsg(): string;\n    /**\n     * Checks the error to see if it has an error label\n     *\n     * @param label - The error label to check for\n     * @returns returns true if the error has the provided error label\n     */\n    hasErrorLabel(label: string): boolean;\n    addErrorLabel(label: string): void;\n}\n\n/** @public */\nexport declare const MongoErrorLabel: Readonly<{\n    readonly RetryableWriteError: \"RetryableWriteError\";\n    readonly TransientTransactionError: \"TransientTransactionError\";\n    readonly UnknownTransactionCommitResult: \"UnknownTransactionCommitResult\";\n    readonly ResumableChangeStreamError: \"ResumableChangeStreamError\";\n    readonly HandshakeError: \"HandshakeError\";\n    readonly ResetPool: \"ResetPool\";\n    readonly PoolRequstedRetry: \"PoolRequstedRetry\";\n    readonly InterruptInUseConnections: \"InterruptInUseConnections\";\n    readonly NoWritesPerformed: \"NoWritesPerformed\";\n}>;\n\n/** @public */\nexport declare type MongoErrorLabel = (typeof MongoErrorLabel)[keyof typeof MongoErrorLabel];\n\n/**\n * An error generated when the user attempts to operate\n * on a session that has expired or has been closed.\n *\n * @public\n * @category Error\n */\nexport declare class MongoExpiredSessionError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message?: string);\n    get name(): string;\n}\n\n/**\n * A error generated when the user attempts to authenticate\n * via GCP, but fails.\n *\n * @public\n * @category Error\n */\nexport declare class MongoGCPError extends MongoOIDCError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message: string);\n    get name(): string;\n}\n\n/**\n * An error generated when a malformed or invalid chunk is\n * encountered when reading from a GridFSStream.\n *\n * @public\n * @category Error\n */\nexport declare class MongoGridFSChunkError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message: string);\n    get name(): string;\n}\n\n/** An error generated when a GridFSStream operation fails to execute.\n *\n * @public\n * @category Error\n */\nexport declare class MongoGridFSStreamError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message: string);\n    get name(): string;\n}\n\n/**\n * An error generated when the user supplies malformed or unexpected arguments\n * or when a required argument or field is not provided.\n *\n *\n * @public\n * @category Error\n */\nexport declare class MongoInvalidArgumentError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message: string, options?: {\n        cause?: Error;\n    });\n    get name(): string;\n}\n\n/**\n * A error generated when the user attempts to authenticate\n * via Kerberos, but fails to connect to the Kerberos client.\n *\n * @public\n * @category Error\n */\nexport declare class MongoKerberosError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message: string);\n    get name(): string;\n}\n\n/** @public */\nexport declare const MongoLoggableComponent: Readonly<{\n    readonly COMMAND: \"command\";\n    readonly TOPOLOGY: \"topology\";\n    readonly SERVER_SELECTION: \"serverSelection\";\n    readonly CONNECTION: \"connection\";\n    readonly CLIENT: \"client\";\n}>;\n\n/** @public */\nexport declare type MongoLoggableComponent = (typeof MongoLoggableComponent)[keyof typeof MongoLoggableComponent];\n\n/* Excluded from this release type: MongoLogger */\n\n/* Excluded from this release type: MongoLoggerEnvOptions */\n\n/* Excluded from this release type: MongoLoggerMongoClientOptions */\n\n/* Excluded from this release type: MongoLoggerOptions */\n\n/**\n * An error generated when the user fails to provide authentication credentials before attempting\n * to connect to a mongo server instance.\n *\n *\n * @public\n * @category Error\n */\nexport declare class MongoMissingCredentialsError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message: string);\n    get name(): string;\n}\n\n/**\n * An error generated when a required module or dependency is not present in the local environment\n *\n * @public\n * @category Error\n */\nexport declare class MongoMissingDependencyError extends MongoAPIError {\n    dependencyName: string;\n    /** @remarks This property is assigned in the `Error` constructor. */\n    cause: Error;\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message: string, options: {\n        cause: Error;\n        dependencyName: string;\n    });\n    get name(): string;\n}\n\n/**\n * An error indicating an issue with the network, including TCP errors and timeouts.\n * @public\n * @category Error\n */\nexport declare class MongoNetworkError extends MongoError {\n    /* Excluded from this release type: beforeHandshake */\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message: string, options?: MongoNetworkErrorOptions);\n    get name(): string;\n}\n\n/** @public */\nexport declare interface MongoNetworkErrorOptions {\n    /** Indicates the timeout happened before a connection handshake completed */\n    beforeHandshake?: boolean;\n    cause?: Error;\n}\n\n/**\n * An error indicating a network timeout occurred\n * @public\n * @category Error\n *\n * @privateRemarks\n * mongodb-client-encryption has a dependency on this error with an instanceof check\n */\nexport declare class MongoNetworkTimeoutError extends MongoNetworkError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message: string, options?: MongoNetworkErrorOptions);\n    get name(): string;\n}\n\n/**\n * An error thrown when the user attempts to operate on a database or collection through a MongoClient\n * that has not yet successfully called the \"connect\" method\n *\n * @public\n * @category Error\n */\nexport declare class MongoNotConnectedError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message: string);\n    get name(): string;\n}\n\n/**\n * A error generated when the user attempts to authenticate\n * via OIDC callbacks, but fails.\n *\n * @public\n * @category Error\n */\nexport declare class MongoOIDCError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message: string);\n    get name(): string;\n}\n\n/**\n * @public\n * @category Error\n *\n * The `MongoOperationTimeoutError` class represents an error that occurs when an operation could not be completed within the specified `timeoutMS`.\n * It is generated by the driver in support of the \"client side operation timeout\" feature so inherits from `MongoDriverError`.\n * When `timeoutMS` is enabled `MongoServerError`s relating to `MaxTimeExpired` errors will be converted to `MongoOperationTimeoutError`\n *\n * @example\n * ```ts\n * try {\n *   await blogs.insertOne(blogPost, { timeoutMS: 60_000 })\n * } catch (error) {\n *   if (error instanceof MongoOperationTimeoutError) {\n *     console.log(`Oh no! writer's block!`, error);\n *   }\n * }\n * ```\n */\nexport declare class MongoOperationTimeoutError extends MongoDriverError {\n    get name(): string;\n}\n\n/**\n * Parsed Mongo Client Options.\n *\n * User supplied options are documented by `MongoClientOptions`.\n *\n * **NOTE:** The client's options parsing is subject to change to support new features.\n * This type is provided to aid with inspection of options after parsing, it should not be relied upon programmatically.\n *\n * Options are sourced from:\n * - connection string\n * - options object passed to the MongoClient constructor\n * - file system (ex. tls settings)\n * - environment variables\n * - DNS SRV records and TXT records\n *\n * Not all options may be present after client construction as some are obtained from asynchronous operations.\n *\n * @public\n */\nexport declare interface MongoOptions extends Required<Pick<MongoClientOptions, 'autoEncryption' | 'connectTimeoutMS' | 'directConnection' | 'driverInfo' | 'forceServerObjectId' | 'minHeartbeatFrequencyMS' | 'heartbeatFrequencyMS' | 'localThresholdMS' | 'maxConnecting' | 'maxIdleTimeMS' | 'maxPoolSize' | 'minPoolSize' | 'monitorCommands' | 'noDelay' | 'pkFactory' | 'raw' | 'replicaSet' | 'retryReads' | 'retryWrites' | 'serverSelectionTimeoutMS' | 'socketTimeoutMS' | 'srvMaxHosts' | 'srvServiceName' | 'tlsAllowInvalidCertificates' | 'tlsAllowInvalidHostnames' | 'tlsInsecure' | 'waitQueueTimeoutMS' | 'zlibCompressionLevel'>>, SupportedNodeConnectionOptions {\n    appName?: string;\n    hosts: HostAddress[];\n    srvHost?: string;\n    credentials?: MongoCredentials;\n    readPreference: ReadPreference;\n    readConcern: ReadConcern;\n    loadBalanced: boolean;\n    directConnection: boolean;\n    serverApi: ServerApi;\n    compressors: CompressorName[];\n    writeConcern: WriteConcern;\n    dbName: string;\n    metadata: ClientMetadata;\n    /* Excluded from this release type: extendedMetadata */\n    /* Excluded from this release type: autoEncrypter */\n    /* Excluded from this release type: tokenCache */\n    proxyHost?: string;\n    proxyPort?: number;\n    proxyUsername?: string;\n    proxyPassword?: string;\n    serverMonitoringMode: ServerMonitoringMode;\n    /* Excluded from this release type: connectionType */\n    /* Excluded from this release type: authProviders */\n    /* Excluded from this release type: encrypter */\n    /* Excluded from this release type: userSpecifiedAuthSource */\n    /* Excluded from this release type: userSpecifiedReplicaSet */\n    /**\n     * # NOTE ABOUT TLS Options\n     *\n     * If `tls` is provided as an option, it is equivalent to setting the `ssl` option.\n     *\n     * NodeJS native TLS options are passed through to the socket and retain their original types.\n     *\n     * ### Additional options:\n     *\n     * | nodejs native option  | driver spec equivalent option name            | driver option type |\n     * |:----------------------|:----------------------------------------------|:-------------------|\n     * | `ca`                  | `tlsCAFile`                                   | `string`           |\n     * | `crl`                 | `tlsCRLFile`                                  | `string`           |\n     * | `cert`                | `tlsCertificateKeyFile`                       | `string`           |\n     * | `key`                 | `tlsCertificateKeyFile`                       | `string`           |\n     * | `passphrase`          | `tlsCertificateKeyFilePassword`               | `string`           |\n     * | `rejectUnauthorized`  | `tlsAllowInvalidCertificates`                 | `boolean`          |\n     * | `checkServerIdentity` | `tlsAllowInvalidHostnames`                    | `boolean`          |\n     * | see note below        | `tlsInsecure`                                 | `boolean`          |\n     *\n     * If `tlsInsecure` is set to `true`, then it will set the node native options `checkServerIdentity`\n     * to a no-op and `rejectUnauthorized` to `false`.\n     *\n     * If `tlsInsecure` is set to `false`, then it will set the node native options `checkServerIdentity`\n     * to a no-op and `rejectUnauthorized` to the inverse value of `tlsAllowInvalidCertificates`. If\n     * `tlsAllowInvalidCertificates` is not set, then `rejectUnauthorized` will be set to `true`.\n     *\n     * ### Note on `tlsCAFile`, `tlsCertificateKeyFile` and `tlsCRLFile`\n     *\n     * The files specified by the paths passed in to the `tlsCAFile`, `tlsCertificateKeyFile` and `tlsCRLFile`\n     * fields are read lazily on the first call to `MongoClient.connect`. Once these files have been read and\n     * the `ca`, `cert`, `crl` and `key` fields are populated, they will not be read again on subsequent calls to\n     * `MongoClient.connect`. As a result, until the first call to `MongoClient.connect`, the `ca`,\n     * `cert`, `crl` and `key` fields will be undefined.\n     */\n    tls: boolean;\n    tlsCAFile?: string;\n    tlsCRLFile?: string;\n    tlsCertificateKeyFile?: string;\n    /* Excluded from this release type: mongoLoggerOptions */\n    /* Excluded from this release type: mongodbLogPath */\n    timeoutMS?: number;\n    /* Excluded from this release type: __skipPingOnConnect */\n}\n\n/**\n * An error used when attempting to parse a value (like a connection string)\n * @public\n * @category Error\n */\nexport declare class MongoParseError extends MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message: string);\n    get name(): string;\n}\n\n/**\n * An error generated when the driver encounters unexpected input\n * or reaches an unexpected/invalid internal state.\n *\n * @privateRemarks\n * Should **never** be directly instantiated.\n *\n * @public\n * @category Error\n */\nexport declare class MongoRuntimeError extends MongoDriverError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message: string, options?: {\n        cause?: Error;\n    });\n    get name(): string;\n}\n\n/**\n * An error generated when an attempt is made to operate\n * on a closed/closing server.\n *\n * @public\n * @category Error\n */\nexport declare class MongoServerClosedError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message?: string);\n    get name(): string;\n}\n\n/**\n * An error coming from the mongo server\n *\n * @public\n * @category Error\n */\nexport declare class MongoServerError extends MongoError {\n    /** Raw error result document returned by server. */\n    errorResponse: ErrorDescription;\n    codeName?: string;\n    writeConcernError?: Document;\n    errInfo?: Document;\n    ok?: number;\n    [key: string]: any;\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message: ErrorDescription);\n    get name(): string;\n}\n\n/**\n * An error signifying a client-side server selection error\n * @public\n * @category Error\n */\nexport declare class MongoServerSelectionError extends MongoSystemError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message: string, reason: TopologyDescription);\n    get name(): string;\n}\n\n/**\n * An error generated when a primary server is marked stale, never directly thrown\n *\n * @public\n * @category Error\n */\nexport declare class MongoStalePrimaryError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message: string, options?: {\n        cause?: Error;\n    });\n    get name(): string;\n}\n\n/**\n * An error signifying a general system issue\n * @public\n * @category Error\n */\nexport declare class MongoSystemError extends MongoError {\n    /** An optional reason context, such as an error saved during flow of monitoring and selecting servers */\n    reason?: TopologyDescription;\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message: string, reason: TopologyDescription);\n    get name(): string;\n}\n\n/**\n * An error thrown when the user calls a function or method not supported on a tailable cursor\n *\n * @public\n * @category Error\n */\nexport declare class MongoTailableCursorError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message?: string);\n    get name(): string;\n}\n\n/**\n * An error generated when an attempt is made to operate on a\n * dropped, or otherwise unavailable, database.\n *\n * @public\n * @category Error\n */\nexport declare class MongoTopologyClosedError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message?: string);\n    get name(): string;\n}\n\n/**\n * An error generated when the user makes a mistake in the usage of transactions.\n * (e.g. attempting to commit a transaction with a readPreference other than primary)\n *\n * @public\n * @category Error\n */\nexport declare class MongoTransactionError extends MongoAPIError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message: string);\n    get name(): string;\n}\n\n/**\n * An error generated when a **parsable** unexpected response comes from the server.\n * This is generally an error where the driver in a state expecting a certain behavior to occur in\n * the next message from MongoDB but it receives something else.\n * This error **does not** represent an issue with wire message formatting.\n *\n * #### Example\n * When an operation fails, it is the driver's job to retry it. It must perform serverSelection\n * again to make sure that it attempts the operation against a server in a good state. If server\n * selection returns a server that does not support retryable operations, this error is used.\n * This scenario is unlikely as retryable support would also have been determined on the first attempt\n * but it is possible the state change could report a selectable server that does not support retries.\n *\n * @public\n * @category Error\n */\nexport declare class MongoUnexpectedServerResponseError extends MongoRuntimeError {\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(message: string, options?: {\n        cause?: Error;\n    });\n    get name(): string;\n}\n\n/**\n * An error thrown when the server reports a writeConcernError\n * @public\n * @category Error\n */\nexport declare class MongoWriteConcernError extends MongoServerError {\n    /** The result document */\n    result: Document;\n    /**\n     * **Do not use this constructor!**\n     *\n     * Meant for internal use only.\n     *\n     * @remarks\n     * This class is only meant to be constructed within the driver. This constructor is\n     * not subject to semantic versioning compatibility guarantees and may change at any time.\n     *\n     * @public\n     **/\n    constructor(result: WriteConcernErrorResult);\n    get name(): string;\n}\n\n/* Excluded from this release type: Monitor */\n\n/** @public */\nexport declare type MonitorEvents = {\n    serverHeartbeatStarted(event: ServerHeartbeatStartedEvent): void;\n    serverHeartbeatSucceeded(event: ServerHeartbeatSucceededEvent): void;\n    serverHeartbeatFailed(event: ServerHeartbeatFailedEvent): void;\n    resetServer(error?: MongoError): void;\n    resetConnectionPool(): void;\n    close(): void;\n} & EventEmitterWithState;\n\n/* Excluded from this release type: MonitorInterval */\n\n/* Excluded from this release type: MonitorIntervalOptions */\n\n/** @public */\nexport declare interface MonitorOptions extends Omit<ConnectionOptions, 'id' | 'generation' | 'hostAddress'> {\n    connectTimeoutMS: number;\n    heartbeatFrequencyMS: number;\n    minHeartbeatFrequencyMS: number;\n    serverMonitoringMode: ServerMonitoringMode;\n}\n\n/* Excluded from this release type: MonitorPrivate */\n\n/**\n * @public\n * returns tuple of strings (keys to be joined on '.') that represent every path into a schema\n * https://www.mongodb.com/docs/manual/tutorial/query-embedded-documents/\n *\n * @remarks\n * Through testing we determined that a depth of 8 is safe for the typescript compiler\n * and provides reasonable compilation times. This number is otherwise not special and\n * should be changed if issues are found with this level of checking. Beyond this\n * depth any helpers that make use of NestedPaths should devolve to not asserting any\n * type safety on the input.\n */\nexport declare type NestedPaths<Type, Depth extends number[]> = Depth['length'] extends 8 ? [] : Type extends string | number | bigint | boolean | Date | RegExp | Buffer | Uint8Array | ((...args: any[]) => any) | {\n    _bsontype: string;\n} ? [] : Type extends ReadonlyArray<infer ArrayType> ? [] | [number, ...NestedPaths<ArrayType, [...Depth, 1]>] : Type extends Map<string, any> ? [string] : Type extends object ? {\n    [Key in Extract<keyof Type, string>]: Type[Key] extends Type ? [Key] : Type extends Type[Key] ? [Key] : Type[Key] extends ReadonlyArray<infer ArrayType> ? Type extends ArrayType ? [Key] : ArrayType extends Type ? [Key] : [\n    Key,\n    ...NestedPaths<Type[Key], [...Depth, 1]>\n    ] : // child is not structured the same as the parent\n    [\n    Key,\n    ...NestedPaths<Type[Key], [...Depth, 1]>\n    ] | [Key];\n}[Extract<keyof Type, string>] : [];\n\n/**\n * @public\n * returns keys (strings) for every path into a schema with a value of type\n * https://www.mongodb.com/docs/manual/tutorial/query-embedded-documents/\n */\nexport declare type NestedPathsOfType<TSchema, Type> = KeysOfAType<{\n    [Property in Join<NestedPaths<TSchema, []>, '.'>]: PropertyType<TSchema, Property>;\n}, Type>;\n\n/**\n * @public\n * A type that extends Document but forbids anything that \"looks like\" an object id.\n */\nexport declare type NonObjectIdLikeDocument = {\n    [key in keyof ObjectIdLike]?: never;\n} & Document;\n\n/** It avoids using fields with not acceptable types @public */\nexport declare type NotAcceptedFields<TSchema, FieldType> = {\n    readonly [key in KeysOfOtherType<TSchema, FieldType>]?: never;\n};\n\n/** @public */\nexport declare type NumericType = IntegerType | Decimal128 | Double;\n\nexport { ObjectId }\n\n/**\n * The signature of the human or machine callback functions.\n * @public\n */\nexport declare type OIDCCallbackFunction = (params: OIDCCallbackParams) => Promise<OIDCResponse>;\n\n/**\n * The parameters that the driver provides to the user supplied\n * human or machine callback.\n *\n * The version number is used to communicate callback API changes that are not breaking but that\n * users may want to know about and review their implementation. Users may wish to check the version\n * number and throw an error if their expected version number and the one provided do not match.\n * @public\n */\nexport declare interface OIDCCallbackParams {\n    /** Optional username. */\n    username?: string;\n    /** The context in which to timeout the OIDC callback. */\n    timeoutContext: AbortSignal;\n    /** The current OIDC API version. */\n    version: 1;\n    /** The IdP information returned from the server. */\n    idpInfo?: IdPInfo;\n    /** The refresh token, if applicable, to be used by the callback to request a new token from the issuer. */\n    refreshToken?: string;\n}\n\n/**\n * The response required to be returned from the machine or\n * human callback workflows' callback.\n * @public\n */\nexport declare interface OIDCResponse {\n    /** The OIDC access token. */\n    accessToken: string;\n    /** The time when the access token expires. For future use. */\n    expiresInSeconds?: number;\n    /** The refresh token, if applicable, to be used by the callback to request a new token from the issuer. */\n    refreshToken?: string;\n}\n\n/* Excluded from this release type: OnDemandDocument */\n\n/* Excluded from this release type: OnDemandDocumentDeserializeOptions */\n\n/** @public */\nexport declare type OneOrMore<T> = T | ReadonlyArray<T>;\n\n/** @public */\nexport declare type OnlyFieldsOfType<TSchema, FieldType = any, AssignableType = FieldType> = IsAny<TSchema[keyof TSchema], AssignableType extends FieldType ? Record<string, FieldType> : Record<string, AssignableType>, AcceptedFields<TSchema, FieldType, AssignableType> & NotAcceptedFields<TSchema, FieldType> & Record<string, AssignableType>>;\n\n/* Excluded from this release type: OpCompressedRequest */\n\n/** @public */\nexport declare interface OperationOptions extends BSONSerializeOptions {\n    /** Specify ClientSession for this command */\n    session?: ClientSession;\n    willRetryWrite?: boolean;\n    /** The preferred read preference (ReadPreference.primary, ReadPreference.primary_preferred, ReadPreference.secondary, ReadPreference.secondary_preferred, ReadPreference.nearest). */\n    readPreference?: ReadPreferenceLike;\n    /* Excluded from this release type: bypassPinningCheck */\n    omitReadPreference?: boolean;\n    /* Excluded from this release type: omitMaxTimeMS */\n    /**\n     * @experimental\n     * Specifies the time an operation will run until it throws a timeout error\n     */\n    timeoutMS?: number;\n}\n\n/* Excluded from this release type: OperationParent */\n\n/**\n * Represents a specific point in time on a server. Can be retrieved by using `db.command()`\n * @public\n * @see https://www.mongodb.com/docs/manual/reference/method/db.runCommand/#response\n */\nexport declare type OperationTime = Timestamp;\n\n/* Excluded from this release type: OpMsgOptions */\n\n/* Excluded from this release type: OpMsgRequest */\n\n/* Excluded from this release type: OpMsgResponse */\n\n/* Excluded from this release type: OpQueryOptions */\n\n/* Excluded from this release type: OpQueryRequest */\n\n/* Excluded from this release type: OpReply */\n\n/**\n * Add an optional _id field to an object shaped type\n * @public\n */\nexport declare type OptionalId<TSchema> = EnhancedOmit<TSchema, '_id'> & {\n    _id?: InferIdType<TSchema>;\n};\n\n/**\n * Adds an optional _id field to an object shaped type, unless the _id field is required on that type.\n * In the case _id is required, this method continues to require_id.\n *\n * @public\n *\n * @privateRemarks\n * `ObjectId extends TSchema['_id']` is a confusing ordering at first glance. Rather than ask\n * `TSchema['_id'] extends ObjectId` which translated to \"Is the _id property ObjectId?\"\n * we instead ask \"Does ObjectId look like (have the same shape) as the _id?\"\n */\nexport declare type OptionalUnlessRequiredId<TSchema> = TSchema extends {\n    _id: any;\n} ? TSchema : OptionalId<TSchema>;\n\n/** @public */\nexport declare class OrderedBulkOperation extends BulkOperationBase {\n    /* Excluded from this release type: __constructor */\n    addToOperationsList(batchType: BatchType, document: Document | UpdateStatement | DeleteStatement): this;\n}\n\n/** @public */\nexport declare interface PkFactory {\n    createPk(): any;\n}\n\n/* Excluded from this release type: PoolState */\n\n/** @public */\nexport declare const ProfilingLevel: Readonly<{\n    readonly off: \"off\";\n    readonly slowOnly: \"slow_only\";\n    readonly all: \"all\";\n}>;\n\n/** @public */\nexport declare type ProfilingLevel = (typeof ProfilingLevel)[keyof typeof ProfilingLevel];\n\n/** @public */\nexport declare type ProfilingLevelOptions = CommandOperationOptions;\n\n/** @public */\nexport declare type PropertyType<Type, Property extends string> = string extends Property ? unknown : Property extends keyof Type ? Type[Property] : Property extends `${number}` ? Type extends ReadonlyArray<infer ArrayType> ? ArrayType : unknown : Property extends `${infer Key}.${infer Rest}` ? Key extends `${number}` ? Type extends ReadonlyArray<infer ArrayType> ? PropertyType<ArrayType, Rest> : unknown : Key extends keyof Type ? Type[Key] extends Map<string, infer MapType> ? MapType : PropertyType<Type[Key], Rest> : unknown : unknown;\n\n/** @public */\nexport declare interface ProxyOptions {\n    proxyHost?: string;\n    proxyPort?: number;\n    proxyUsername?: string;\n    proxyPassword?: string;\n}\n\n/** @public */\nexport declare type PullAllOperator<TSchema> = ({\n    readonly [key in KeysOfAType<TSchema, ReadonlyArray<any>>]?: TSchema[key];\n} & NotAcceptedFields<TSchema, ReadonlyArray<any>>) & {\n    readonly [key: string]: ReadonlyArray<any>;\n};\n\n/** @public */\nexport declare type PullOperator<TSchema> = ({\n    readonly [key in KeysOfAType<TSchema, ReadonlyArray<any>>]?: Partial<Flatten<TSchema[key]>> | FilterOperations<Flatten<TSchema[key]>>;\n} & NotAcceptedFields<TSchema, ReadonlyArray<any>>) & {\n    readonly [key: string]: FilterOperators<any> | any;\n};\n\n/** @public */\nexport declare type PushOperator<TSchema> = ({\n    readonly [key in KeysOfAType<TSchema, ReadonlyArray<any>>]?: Flatten<TSchema[key]> | ArrayOperator<Array<Flatten<TSchema[key]>>>;\n} & NotAcceptedFields<TSchema, ReadonlyArray<any>>) & {\n    readonly [key: string]: ArrayOperator<any> | any;\n};\n\n/**\n * @public\n * RangeOptions specifies index options for a Queryable Encryption field supporting \"range\" queries.\n * min, max, sparsity, trimFactor and range must match the values set in the encryptedFields of the destination collection.\n * For double and decimal128, min/max/precision must all be set, or all be unset.\n */\nexport declare interface RangeOptions {\n    /** min is the minimum value for the encrypted index. Required if precision is set. */\n    min?: any;\n    /** max is the minimum value for the encrypted index. Required if precision is set. */\n    max?: any;\n    /** sparsity may be used to tune performance. must be non-negative. When omitted, a default value is used. */\n    sparsity?: Long | bigint;\n    /** trimFactor may be used to tune performance. must be non-negative. When omitted, a default value is used. */\n    trimFactor?: Int32 | number;\n    precision?: number;\n}\n\n/**\n * The MongoDB ReadConcern, which allows for control of the consistency and isolation properties\n * of the data read from replica sets and replica set shards.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/reference/read-concern/index.html\n */\nexport declare class ReadConcern {\n    level: ReadConcernLevel | string;\n    /** Constructs a ReadConcern from the read concern level.*/\n    constructor(level: ReadConcernLevel);\n    /**\n     * Construct a ReadConcern given an options object.\n     *\n     * @param options - The options object from which to extract the write concern.\n     */\n    static fromOptions(options?: {\n        readConcern?: ReadConcernLike;\n        level?: ReadConcernLevel;\n    }): ReadConcern | undefined;\n    static get MAJORITY(): 'majority';\n    static get AVAILABLE(): 'available';\n    static get LINEARIZABLE(): 'linearizable';\n    static get SNAPSHOT(): 'snapshot';\n    toJSON(): Document;\n}\n\n/** @public */\nexport declare const ReadConcernLevel: Readonly<{\n    readonly local: \"local\";\n    readonly majority: \"majority\";\n    readonly linearizable: \"linearizable\";\n    readonly available: \"available\";\n    readonly snapshot: \"snapshot\";\n}>;\n\n/** @public */\nexport declare type ReadConcernLevel = (typeof ReadConcernLevel)[keyof typeof ReadConcernLevel];\n\n/** @public */\nexport declare type ReadConcernLike = ReadConcern | {\n    level: ReadConcernLevel;\n} | ReadConcernLevel;\n\n/**\n * The **ReadPreference** class is a class that represents a MongoDB ReadPreference and is\n * used to construct connections.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/core/read-preference/\n */\nexport declare class ReadPreference {\n    mode: ReadPreferenceMode;\n    tags?: TagSet[];\n    hedge?: HedgeOptions;\n    maxStalenessSeconds?: number;\n    minWireVersion?: number;\n    static PRIMARY: \"primary\";\n    static PRIMARY_PREFERRED: \"primaryPreferred\";\n    static SECONDARY: \"secondary\";\n    static SECONDARY_PREFERRED: \"secondaryPreferred\";\n    static NEAREST: \"nearest\";\n    static primary: ReadPreference;\n    static primaryPreferred: ReadPreference;\n    static secondary: ReadPreference;\n    static secondaryPreferred: ReadPreference;\n    static nearest: ReadPreference;\n    /**\n     * @param mode - A string describing the read preference mode (primary|primaryPreferred|secondary|secondaryPreferred|nearest)\n     * @param tags - A tag set used to target reads to members with the specified tag(s). tagSet is not available if using read preference mode primary.\n     * @param options - Additional read preference options\n     */\n    constructor(mode: ReadPreferenceMode, tags?: TagSet[], options?: ReadPreferenceOptions);\n    get preference(): ReadPreferenceMode;\n    static fromString(mode: string): ReadPreference;\n    /**\n     * Construct a ReadPreference given an options object.\n     *\n     * @param options - The options object from which to extract the read preference.\n     */\n    static fromOptions(options?: ReadPreferenceFromOptions): ReadPreference | undefined;\n    /**\n     * Replaces options.readPreference with a ReadPreference instance\n     */\n    static translate(options: ReadPreferenceLikeOptions): ReadPreferenceLikeOptions;\n    /**\n     * Validate if a mode is legal\n     *\n     * @param mode - The string representing the read preference mode.\n     */\n    static isValid(mode: string): boolean;\n    /**\n     * Validate if a mode is legal\n     *\n     * @param mode - The string representing the read preference mode.\n     */\n    isValid(mode?: string): boolean;\n    /**\n     * Indicates that this readPreference needs the \"SecondaryOk\" bit when sent over the wire\n     * @see https://www.mongodb.com/docs/manual/reference/mongodb-wire-protocol/#op-query\n     */\n    secondaryOk(): boolean;\n    /**\n     * Check if the two ReadPreferences are equivalent\n     *\n     * @param readPreference - The read preference with which to check equality\n     */\n    equals(readPreference: ReadPreference): boolean;\n    /** Return JSON representation */\n    toJSON(): Document;\n}\n\n/** @public */\nexport declare interface ReadPreferenceFromOptions extends ReadPreferenceLikeOptions {\n    session?: ClientSession;\n    readPreferenceTags?: TagSet[];\n    hedge?: HedgeOptions;\n}\n\n/** @public */\nexport declare type ReadPreferenceLike = ReadPreference | ReadPreferenceMode;\n\n/** @public */\nexport declare interface ReadPreferenceLikeOptions extends ReadPreferenceOptions {\n    readPreference?: ReadPreferenceLike | {\n        mode?: ReadPreferenceMode;\n        preference?: ReadPreferenceMode;\n        tags?: TagSet[];\n        maxStalenessSeconds?: number;\n    };\n}\n\n/** @public */\nexport declare const ReadPreferenceMode: Readonly<{\n    readonly primary: \"primary\";\n    readonly primaryPreferred: \"primaryPreferred\";\n    readonly secondary: \"secondary\";\n    readonly secondaryPreferred: \"secondaryPreferred\";\n    readonly nearest: \"nearest\";\n}>;\n\n/** @public */\nexport declare type ReadPreferenceMode = (typeof ReadPreferenceMode)[keyof typeof ReadPreferenceMode];\n\n/** @public */\nexport declare interface ReadPreferenceOptions {\n    /** Max secondary read staleness in seconds, Minimum value is 90 seconds.*/\n    maxStalenessSeconds?: number;\n    /** Server mode in which the same query is dispatched in parallel to multiple replica set members. */\n    hedge?: HedgeOptions;\n}\n\n/** @public */\nexport declare type RegExpOrString<T> = T extends string ? BSONRegExp | RegExp | T : T;\n\n/** @public */\nexport declare type RemoveUserOptions = CommandOperationOptions;\n\n/** @public */\nexport declare interface RenameOptions extends CommandOperationOptions {\n    /** Drop the target name collection if it previously exists. */\n    dropTarget?: boolean;\n    /** Unclear */\n    new_collection?: boolean;\n}\n\n/** @public */\nexport declare interface ReplaceOneModel<TSchema extends Document = Document> {\n    /** The filter to limit the replaced document. */\n    filter: Filter<TSchema>;\n    /** The document with which to replace the matched document. */\n    replacement: WithoutId<TSchema>;\n    /** Specifies a collation. */\n    collation?: CollationOptions;\n    /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n    hint?: Hint;\n    /** When true, creates a new document if no document matches the query. */\n    upsert?: boolean;\n}\n\n/** @public */\nexport declare interface ReplaceOptions extends CommandOperationOptions {\n    /** If true, allows the write to opt-out of document level validation */\n    bypassDocumentValidation?: boolean;\n    /** Specifies a collation */\n    collation?: CollationOptions;\n    /** Specify that the update query should only consider plans using the hinted index */\n    hint?: string | Document;\n    /** When true, creates a new document if no document matches the query */\n    upsert?: boolean;\n    /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n    let?: Document;\n}\n\n/**\n * @public\n * @deprecated Please use the ChangeStreamCursorOptions type instead.\n */\nexport declare interface ResumeOptions {\n    startAtOperationTime?: Timestamp;\n    batchSize?: number;\n    maxAwaitTimeMS?: number;\n    collation?: CollationOptions;\n    readPreference?: ReadPreference;\n    resumeAfter?: ResumeToken;\n    startAfter?: ResumeToken;\n    fullDocument?: string;\n}\n\n/**\n * Represents the logical starting point for a new ChangeStream or resuming a ChangeStream on the server.\n * @see https://www.mongodb.com/docs/manual/changeStreams/#std-label-change-stream-resume\n * @public\n */\nexport declare type ResumeToken = unknown;\n\n/** @public */\nexport declare const ReturnDocument: Readonly<{\n    readonly BEFORE: \"before\";\n    readonly AFTER: \"after\";\n}>;\n\n/** @public */\nexport declare type ReturnDocument = (typeof ReturnDocument)[keyof typeof ReturnDocument];\n\n/** @public */\nexport declare interface RootFilterOperators<TSchema> extends Document {\n    $and?: Filter<TSchema>[];\n    $nor?: Filter<TSchema>[];\n    $or?: Filter<TSchema>[];\n    $text?: {\n        $search: string;\n        $language?: string;\n        $caseSensitive?: boolean;\n        $diacriticSensitive?: boolean;\n    };\n    $where?: string | ((this: TSchema) => boolean);\n    $comment?: string | Document;\n}\n\n/* Excluded from this release type: RTTPinger */\n\n/* Excluded from this release type: RTTPingerOptions */\n\n/* Excluded from this release type: RTTSampler */\n\n/** @public */\nexport declare class RunCommandCursor extends AbstractCursor {\n    readonly command: Readonly<Record<string, any>>;\n    readonly getMoreOptions: {\n        comment?: any;\n        maxAwaitTimeMS?: number;\n        batchSize?: number;\n    };\n    /**\n     * Controls the `getMore.comment` field\n     * @param comment - any BSON value\n     */\n    setComment(comment: any): this;\n    /**\n     * Controls the `getMore.maxTimeMS` field. Only valid when cursor is tailable await\n     * @param maxTimeMS - the number of milliseconds to wait for new data\n     */\n    setMaxTimeMS(maxTimeMS: number): this;\n    /**\n     * Controls the `getMore.batchSize` field\n     * @param batchSize - the number documents to return in the `nextBatch`\n     */\n    setBatchSize(batchSize: number): this;\n    /** Unsupported for RunCommandCursor */\n    clone(): never;\n    /** Unsupported for RunCommandCursor: readConcern must be configured directly on command document */\n    withReadConcern(_: ReadConcernLike): never;\n    /** Unsupported for RunCommandCursor: various cursor flags must be configured directly on command document */\n    addCursorFlag(_: string, __: boolean): never;\n    /**\n     * Unsupported for RunCommandCursor: maxTimeMS must be configured directly on command document\n     */\n    maxTimeMS(_: number): never;\n    /** Unsupported for RunCommandCursor: batchSize must be configured directly on command document */\n    batchSize(_: number): never;\n    /* Excluded from this release type: db */\n    /* Excluded from this release type: __constructor */\n    /* Excluded from this release type: _initialize */\n    /* Excluded from this release type: getMore */\n}\n\n/** @public */\nexport declare type RunCommandOptions = {\n    /** Specify ClientSession for this command */\n    session?: ClientSession;\n    /** The read preference */\n    readPreference?: ReadPreferenceLike;\n    /**\n     * @experimental\n     * Specifies the time an operation will run until it throws a timeout error\n     */\n    timeoutMS?: number;\n    /* Excluded from this release type: omitMaxTimeMS */\n} & BSONSerializeOptions;\n\n/** @public */\nexport declare type RunCursorCommandOptions = {\n    readPreference?: ReadPreferenceLike;\n    session?: ClientSession;\n    /**\n     * @experimental\n     * Specifies the time an operation will run until it throws a timeout error. Note that if\n     * `maxTimeMS` is provided in the command in addition to setting `timeoutMS` in the options, then\n     * the original value of `maxTimeMS` will be overwritten.\n     */\n    timeoutMS?: number;\n    /**\n     * @public\n     * @experimental\n     * Specifies how `timeoutMS` is applied to the cursor. Can be either `'cursorLifeTime'` or `'iteration'`\n     * When set to `'iteration'`, the deadline specified by `timeoutMS` applies to each call of\n     * `cursor.next()`.\n     * When set to `'cursorLifetime'`, the deadline applies to the life of the entire cursor.\n     *\n     * Depending on the type of cursor being used, this option has different default values.\n     * For non-tailable cursors, this value defaults to `'cursorLifetime'`\n     * For tailable cursors, this value defaults to `'iteration'` since tailable cursors, by\n     * definition can have an arbitrarily long lifetime.\n     *\n     * @example\n     * ```ts\n     * const cursor = collection.find({}, {timeoutMS: 100, timeoutMode: 'iteration'});\n     * for await (const doc of cursor) {\n     *  // process doc\n     *  // This will throw a timeout error if any of the iterator's `next()` calls takes more than 100ms, but\n     *  // will continue to iterate successfully otherwise, regardless of the number of batches.\n     * }\n     * ```\n     *\n     * @example\n     * ```ts\n     * const cursor = collection.find({}, { timeoutMS: 1000, timeoutMode: 'cursorLifetime' });\n     * const docs = await cursor.toArray(); // This entire line will throw a timeout error if all batches are not fetched and returned within 1000ms.\n     * ```\n     */\n    timeoutMode?: CursorTimeoutMode;\n    tailable?: boolean;\n    awaitData?: boolean;\n} & BSONSerializeOptions;\n\n/** @public */\nexport declare type SchemaMember<T, V> = {\n    [P in keyof T]?: V;\n} | {\n    [key: string]: V;\n};\n\n/**\n * @public\n */\nexport declare interface SearchIndexDescription extends Document {\n    /** The name of the index. */\n    name?: string;\n    /** The index definition. */\n    definition: Document;\n    /** The type of the index.  Currently `search` or `vectorSearch` are supported. */\n    type?: string;\n}\n\n/** @public */\nexport declare interface SelectServerOptions {\n    readPreference?: ReadPreferenceLike;\n    /** How long to block for server selection before throwing an error */\n    serverSelectionTimeoutMS?: number;\n    session?: ClientSession;\n    operationName: string;\n    previousServer?: ServerDescription;\n    /* Excluded from this release type: timeoutContext */\n}\n\nexport { serialize }\n\n/* Excluded from this release type: Server */\n\n/* Excluded from this release type: SERVER_CLOSED */\n\n/* Excluded from this release type: SERVER_DESCRIPTION_CHANGED */\n\n/* Excluded from this release type: SERVER_HEARTBEAT_FAILED */\n\n/* Excluded from this release type: SERVER_HEARTBEAT_STARTED */\n\n/* Excluded from this release type: SERVER_HEARTBEAT_SUCCEEDED */\n\n/* Excluded from this release type: SERVER_OPENING */\n\n/* Excluded from this release type: SERVER_SELECTION_FAILED */\n\n/* Excluded from this release type: SERVER_SELECTION_STARTED */\n\n/* Excluded from this release type: SERVER_SELECTION_SUCCEEDED */\n\n/** @public */\nexport declare interface ServerApi {\n    version: ServerApiVersion;\n    strict?: boolean;\n    deprecationErrors?: boolean;\n}\n\n/** @public */\nexport declare const ServerApiVersion: Readonly<{\n    readonly v1: \"1\";\n}>;\n\n/** @public */\nexport declare type ServerApiVersion = (typeof ServerApiVersion)[keyof typeof ServerApiVersion];\n\n/** @public */\nexport declare class ServerCapabilities {\n    maxWireVersion: number;\n    minWireVersion: number;\n    constructor(hello: Document);\n    get hasAggregationCursor(): boolean;\n    get hasWriteCommands(): boolean;\n    get hasTextSearch(): boolean;\n    get hasAuthCommands(): boolean;\n    get hasListCollectionsCommand(): boolean;\n    get hasListIndexesCommand(): boolean;\n    get supportsSnapshotReads(): boolean;\n    get commandsTakeWriteConcern(): boolean;\n    get commandsTakeCollation(): boolean;\n}\n\n/**\n * Emitted when server is closed.\n * @public\n * @category Event\n */\nexport declare class ServerClosedEvent {\n    /** A unique identifier for the topology */\n    topologyId: number;\n    /** The address (host/port pair) of the server */\n    address: string;\n    /* Excluded from this release type: name */\n    /* Excluded from this release type: __constructor */\n}\n\n/* Excluded from this release type: ServerCommandOptions */\n\n/**\n * The client's view of a single server, based on the most recent hello outcome.\n *\n * Internal type, not meant to be directly instantiated\n * @public\n */\nexport declare class ServerDescription {\n    address: string;\n    type: ServerType;\n    hosts: string[];\n    passives: string[];\n    arbiters: string[];\n    tags: TagSet;\n    error: MongoError | null;\n    topologyVersion: TopologyVersion | null;\n    minWireVersion: number;\n    maxWireVersion: number;\n    roundTripTime: number;\n    /** The minimum measurement of the last 10 measurements of roundTripTime that have been collected */\n    minRoundTripTime: number;\n    lastUpdateTime: number;\n    lastWriteDate: number;\n    me: string | null;\n    primary: string | null;\n    setName: string | null;\n    setVersion: number | null;\n    electionId: ObjectId | null;\n    logicalSessionTimeoutMinutes: number | null;\n    /** The max message size in bytes for the server. */\n    maxMessageSizeBytes: number | null;\n    /** The max number of writes in a bulk write command. */\n    maxWriteBatchSize: number | null;\n    /** The max bson object size. */\n    maxBsonObjectSize: number | null;\n    /** Indicates server is a mongocryptd instance. */\n    iscryptd: boolean;\n    $clusterTime?: ClusterTime;\n    /* Excluded from this release type: __constructor */\n    get hostAddress(): HostAddress;\n    get allHosts(): string[];\n    /** Is this server available for reads*/\n    get isReadable(): boolean;\n    /** Is this server data bearing */\n    get isDataBearing(): boolean;\n    /** Is this server available for writes */\n    get isWritable(): boolean;\n    get host(): string;\n    get port(): number;\n    /**\n     * Determines if another `ServerDescription` is equal to this one per the rules defined in the SDAM specification.\n     * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.md\n     */\n    equals(other?: ServerDescription | null): boolean;\n}\n\n/**\n * Emitted when server description changes, but does NOT include changes to the RTT.\n * @public\n * @category Event\n */\nexport declare class ServerDescriptionChangedEvent {\n    /** A unique identifier for the topology */\n    topologyId: number;\n    /** The address (host/port pair) of the server */\n    address: string;\n    /** The previous server description */\n    previousDescription: ServerDescription;\n    /** The new server description */\n    newDescription: ServerDescription;\n    name: \"serverDescriptionChanged\";\n    /* Excluded from this release type: __constructor */\n}\n\n/* Excluded from this release type: ServerDescriptionOptions */\n\n/** @public */\nexport declare type ServerEvents = {\n    serverHeartbeatStarted(event: ServerHeartbeatStartedEvent): void;\n    serverHeartbeatSucceeded(event: ServerHeartbeatSucceededEvent): void;\n    serverHeartbeatFailed(event: ServerHeartbeatFailedEvent): void;\n    /* Excluded from this release type: connect */\n    descriptionReceived(description: ServerDescription): void;\n    closed(): void;\n    ended(): void;\n} & ConnectionPoolEvents & EventEmitterWithState;\n\n/**\n * Emitted when the server monitor’s hello fails, either with an “ok: 0” or a socket exception.\n * @public\n * @category Event\n */\nexport declare class ServerHeartbeatFailedEvent {\n    /** The connection id for the command */\n    connectionId: string;\n    /** The execution time of the event in ms */\n    duration: number;\n    /** The command failure */\n    failure: Error;\n    /** Is true when using the streaming protocol */\n    awaited: boolean;\n    /* Excluded from this release type: name */\n    /* Excluded from this release type: __constructor */\n}\n\n/**\n * Emitted when the server monitor’s hello command is started - immediately before\n * the hello command is serialized into raw BSON and written to the socket.\n *\n * @public\n * @category Event\n */\nexport declare class ServerHeartbeatStartedEvent {\n    /** The connection id for the command */\n    connectionId: string;\n    /** Is true when using the streaming protocol */\n    awaited: boolean;\n    /* Excluded from this release type: name */\n    /* Excluded from this release type: __constructor */\n}\n\n/**\n * Emitted when the server monitor’s hello succeeds.\n * @public\n * @category Event\n */\nexport declare class ServerHeartbeatSucceededEvent {\n    /** The connection id for the command */\n    connectionId: string;\n    /** The execution time of the event in ms */\n    duration: number;\n    /** The command reply */\n    reply: Document;\n    /** Is true when using the streaming protocol */\n    awaited: boolean;\n    /* Excluded from this release type: name */\n    /* Excluded from this release type: __constructor */\n}\n\n/** @public */\nexport declare const ServerMonitoringMode: Readonly<{\n    readonly auto: \"auto\";\n    readonly poll: \"poll\";\n    readonly stream: \"stream\";\n}>;\n\n/** @public */\nexport declare type ServerMonitoringMode = (typeof ServerMonitoringMode)[keyof typeof ServerMonitoringMode];\n\n/**\n * Emitted when server is initialized.\n * @public\n * @category Event\n */\nexport declare class ServerOpeningEvent {\n    /** A unique identifier for the topology */\n    topologyId: number;\n    /** The address (host/port pair) of the server */\n    address: string;\n    /* Excluded from this release type: name */\n    /* Excluded from this release type: __constructor */\n}\n\n/* Excluded from this release type: ServerOptions */\n\n/* Excluded from this release type: ServerPrivate */\n\n/* Excluded from this release type: ServerSelectionCallback */\n\n/* Excluded from this release type: ServerSelectionEvent */\n\n/* Excluded from this release type: ServerSelectionFailedEvent */\n\n/* Excluded from this release type: ServerSelectionRequest */\n\n/* Excluded from this release type: ServerSelectionStartedEvent */\n\n/* Excluded from this release type: ServerSelectionSucceededEvent */\n\n/* Excluded from this release type: ServerSelector */\n\n/**\n * Reflects the existence of a session on the server. Can be reused by the session pool.\n * WARNING: not meant to be instantiated directly. For internal use only.\n * @public\n */\nexport declare class ServerSession {\n    id: ServerSessionId;\n    lastUse: number;\n    txnNumber: number;\n    isDirty: boolean;\n    /* Excluded from this release type: __constructor */\n    /**\n     * Determines if the server session has timed out.\n     *\n     * @param sessionTimeoutMinutes - The server's \"logicalSessionTimeoutMinutes\"\n     */\n    hasTimedOut(sessionTimeoutMinutes: number): boolean;\n}\n\n/** @public */\nexport declare type ServerSessionId = {\n    id: Binary;\n};\n\n/* Excluded from this release type: ServerSessionPool */\n\n/**\n * An enumeration of server types we know about\n * @public\n */\nexport declare const ServerType: Readonly<{\n    readonly Standalone: \"Standalone\";\n    readonly Mongos: \"Mongos\";\n    readonly PossiblePrimary: \"PossiblePrimary\";\n    readonly RSPrimary: \"RSPrimary\";\n    readonly RSSecondary: \"RSSecondary\";\n    readonly RSArbiter: \"RSArbiter\";\n    readonly RSOther: \"RSOther\";\n    readonly RSGhost: \"RSGhost\";\n    readonly Unknown: \"Unknown\";\n    readonly LoadBalancer: \"LoadBalancer\";\n}>;\n\n/** @public */\nexport declare type ServerType = (typeof ServerType)[keyof typeof ServerType];\n\n/** @public */\nexport declare type SetFields<TSchema> = ({\n    readonly [key in KeysOfAType<TSchema, ReadonlyArray<any> | undefined>]?: OptionalId<Flatten<TSchema[key]>> | AddToSetOperators<Array<OptionalId<Flatten<TSchema[key]>>>>;\n} & IsAny<TSchema[keyof TSchema], object, NotAcceptedFields<TSchema, ReadonlyArray<any> | undefined>>) & {\n    readonly [key: string]: AddToSetOperators<any> | any;\n};\n\n/** @public */\nexport declare type SetProfilingLevelOptions = CommandOperationOptions;\n\n/**\n * @public\n * Severity levels align with unix syslog.\n * Most typical driver functions will log to debug.\n */\nexport declare const SeverityLevel: Readonly<{\n    readonly EMERGENCY: \"emergency\";\n    readonly ALERT: \"alert\";\n    readonly CRITICAL: \"critical\";\n    readonly ERROR: \"error\";\n    readonly WARNING: \"warn\";\n    readonly NOTICE: \"notice\";\n    readonly INFORMATIONAL: \"info\";\n    readonly DEBUG: \"debug\";\n    readonly TRACE: \"trace\";\n    readonly OFF: \"off\";\n}>;\n\n/** @public */\nexport declare type SeverityLevel = (typeof SeverityLevel)[keyof typeof SeverityLevel];\n\n/** @public */\nexport declare type Sort = string | Exclude<SortDirection, {\n    $meta: string;\n}> | string[] | {\n    [key: string]: SortDirection;\n} | Map<string, SortDirection> | [string, SortDirection][] | [string, SortDirection];\n\n/** @public */\nexport declare type SortDirection = 1 | -1 | 'asc' | 'desc' | 'ascending' | 'descending' | {\n    $meta: string;\n};\n\n/* Excluded from this release type: SortDirectionForCmd */\n\n/* Excluded from this release type: SortForCmd */\n\n/* Excluded from this release type: SrvPoller */\n\n/* Excluded from this release type: SrvPollerEvents */\n\n/* Excluded from this release type: SrvPollerOptions */\n\n/* Excluded from this release type: SrvPollingEvent */\n\n/* Excluded from this release type: StateMachineExecutable */\n\n/** @public */\nexport declare type Stream = Socket | TLSSocket;\n\n/** @public */\nexport declare class StreamDescription {\n    address: string;\n    type: ServerType;\n    minWireVersion?: number;\n    maxWireVersion?: number;\n    maxBsonObjectSize: number;\n    maxMessageSizeBytes: number;\n    maxWriteBatchSize: number;\n    compressors: CompressorName[];\n    compressor?: CompressorName;\n    logicalSessionTimeoutMinutes?: number;\n    loadBalanced: boolean;\n    __nodejs_mock_server__?: boolean;\n    zlibCompressionLevel?: number;\n    serverConnectionId: bigint | null;\n    hello: Document | null;\n    constructor(address: string, options?: StreamDescriptionOptions);\n    receiveResponse(response: Document | null): void;\n    parseServerConnectionID(serverConnectionId: number | Double | bigint | Long): bigint;\n}\n\n/** @public */\nexport declare interface StreamDescriptionOptions {\n    compressors?: CompressorName[];\n    logicalSessionTimeoutMinutes?: number;\n    loadBalanced: boolean;\n}\n\n/**\n * @public\n * @experimental\n */\nexport declare type StrictFilter<TSchema> = Partial<TSchema> | ({\n    [Property in Join<NestedPaths<WithId<TSchema>, []>, '.'>]?: Condition<PropertyType<WithId<TSchema>, Property>>;\n} & RootFilterOperators<WithId<TSchema>>);\n\n/**\n * @public\n * @experimental\n */\nexport declare type StrictMatchKeysAndValues<TSchema> = Readonly<{\n    [Property in Join<NestedPaths<TSchema, []>, '.'>]?: PropertyType<TSchema, Property>;\n} & {\n    [Property in `${NestedPathsOfType<TSchema, any[]>}.$${`[${string}]` | ''}`]?: ArrayElement<PropertyType<TSchema, Property extends `${infer Key}.$${string}` ? Key : never>>;\n} & {\n    [Property in `${NestedPathsOfType<TSchema, Record<string, any>[]>}.$${`[${string}]` | ''}.${string}`]?: any;\n} & Document>;\n\n/**\n * @public\n * @experimental\n */\nexport declare type StrictUpdateFilter<TSchema> = {\n    $currentDate?: OnlyFieldsOfType<TSchema, Date | Timestamp, true | {\n        $type: 'date' | 'timestamp';\n    }>;\n    $inc?: OnlyFieldsOfType<TSchema, NumericType | undefined>;\n    $min?: StrictMatchKeysAndValues<TSchema>;\n    $max?: StrictMatchKeysAndValues<TSchema>;\n    $mul?: OnlyFieldsOfType<TSchema, NumericType | undefined>;\n    $rename?: Record<string, string>;\n    $set?: StrictMatchKeysAndValues<TSchema>;\n    $setOnInsert?: StrictMatchKeysAndValues<TSchema>;\n    $unset?: OnlyFieldsOfType<TSchema, any, '' | true | 1>;\n    $addToSet?: SetFields<TSchema>;\n    $pop?: OnlyFieldsOfType<TSchema, ReadonlyArray<any>, 1 | -1>;\n    $pull?: PullOperator<TSchema>;\n    $push?: PushOperator<TSchema>;\n    $pullAll?: PullAllOperator<TSchema>;\n    $bit?: OnlyFieldsOfType<TSchema, NumericType | undefined, {\n        and: IntegerType;\n    } | {\n        or: IntegerType;\n    } | {\n        xor: IntegerType;\n    }>;\n} & Document;\n\n/** @public */\nexport declare type SupportedNodeConnectionOptions = SupportedTLSConnectionOptions & SupportedTLSSocketOptions & SupportedSocketOptions;\n\n/** @public */\nexport declare type SupportedSocketOptions = Pick<TcpNetConnectOpts & {\n    autoSelectFamily?: boolean;\n    autoSelectFamilyAttemptTimeout?: number;\n}, (typeof LEGAL_TCP_SOCKET_OPTIONS)[number]>;\n\n/** @public */\nexport declare type SupportedTLSConnectionOptions = Pick<ConnectionOptions_2 & {\n    allowPartialTrustChain?: boolean;\n}, (typeof LEGAL_TLS_SOCKET_OPTIONS)[number]>;\n\n/** @public */\nexport declare type SupportedTLSSocketOptions = Pick<TLSSocketOptions, Extract<keyof TLSSocketOptions, (typeof LEGAL_TLS_SOCKET_OPTIONS)[number]>>;\n\n/** @public */\nexport declare type TagSet = {\n    [key: string]: string;\n};\n\n/* Excluded from this release type: Timeout */\n\n/* Excluded from this release type: TimeoutContext */\n\n/* Excluded from this release type: TimeoutContextOptions */\n\n/** @public\n * Configuration options for timeseries collections\n * @see https://www.mongodb.com/docs/manual/core/timeseries-collections/\n */\nexport declare interface TimeSeriesCollectionOptions extends Document {\n    timeField: string;\n    metaField?: string;\n    granularity?: 'seconds' | 'minutes' | 'hours' | string;\n    bucketMaxSpanSeconds?: number;\n    bucketRoundingSeconds?: number;\n}\n\nexport { Timestamp }\n\n/* Excluded from this release type: TokenCache */\n\n/* Excluded from this release type: Topology */\n\n/* Excluded from this release type: TOPOLOGY_CLOSED */\n\n/* Excluded from this release type: TOPOLOGY_DESCRIPTION_CHANGED */\n\n/* Excluded from this release type: TOPOLOGY_OPENING */\n\n/**\n * Emitted when topology is closed.\n * @public\n * @category Event\n */\nexport declare class TopologyClosedEvent {\n    /** A unique identifier for the topology */\n    topologyId: number;\n    /* Excluded from this release type: name */\n    /* Excluded from this release type: __constructor */\n}\n\n/**\n * Representation of a deployment of servers\n * @public\n */\nexport declare class TopologyDescription {\n    type: TopologyType;\n    setName: string | null;\n    maxSetVersion: number | null;\n    maxElectionId: ObjectId | null;\n    servers: Map<string, ServerDescription>;\n    stale: boolean;\n    compatible: boolean;\n    compatibilityError?: string;\n    logicalSessionTimeoutMinutes: number | null;\n    heartbeatFrequencyMS: number;\n    localThresholdMS: number;\n    commonWireVersion: number;\n    /**\n     * Create a TopologyDescription\n     */\n    constructor(topologyType: TopologyType, serverDescriptions?: Map<string, ServerDescription> | null, setName?: string | null, maxSetVersion?: number | null, maxElectionId?: ObjectId | null, commonWireVersion?: number | null, options?: TopologyDescriptionOptions | null);\n    /* Excluded from this release type: updateFromSrvPollingEvent */\n    /* Excluded from this release type: update */\n    get error(): MongoError | null;\n    /**\n     * Determines if the topology description has any known servers\n     */\n    get hasKnownServers(): boolean;\n    /**\n     * Determines if this topology description has a data-bearing server available.\n     */\n    get hasDataBearingServers(): boolean;\n    /* Excluded from this release type: hasServer */\n    /**\n     * Returns a JSON-serializable representation of the TopologyDescription.  This is primarily\n     * intended for use with JSON.stringify().\n     *\n     * This method will not throw.\n     */\n    toJSON(): Document;\n}\n\n/**\n * Emitted when topology description changes.\n * @public\n * @category Event\n */\nexport declare class TopologyDescriptionChangedEvent {\n    /** A unique identifier for the topology */\n    topologyId: number;\n    /** The old topology description */\n    previousDescription: TopologyDescription;\n    /** The new topology description */\n    newDescription: TopologyDescription;\n    /* Excluded from this release type: name */\n    /* Excluded from this release type: __constructor */\n}\n\n/** @public */\nexport declare interface TopologyDescriptionOptions {\n    heartbeatFrequencyMS?: number;\n    localThresholdMS?: number;\n}\n\n/** @public */\nexport declare type TopologyEvents = {\n    /* Excluded from this release type: connect */\n    serverOpening(event: ServerOpeningEvent): void;\n    serverClosed(event: ServerClosedEvent): void;\n    serverDescriptionChanged(event: ServerDescriptionChangedEvent): void;\n    topologyClosed(event: TopologyClosedEvent): void;\n    topologyOpening(event: TopologyOpeningEvent): void;\n    topologyDescriptionChanged(event: TopologyDescriptionChangedEvent): void;\n    error(error: Error): void;\n    /* Excluded from this release type: open */\n    close(): void;\n    timeout(): void;\n} & Omit<ServerEvents, 'connect'> & ConnectionPoolEvents & ConnectionEvents & EventEmitterWithState;\n\n/**\n * Emitted when topology is initialized.\n * @public\n * @category Event\n */\nexport declare class TopologyOpeningEvent {\n    /** A unique identifier for the topology */\n    topologyId: number;\n    /* Excluded from this release type: name */\n    /* Excluded from this release type: __constructor */\n}\n\n/* Excluded from this release type: TopologyOptions */\n\n/* Excluded from this release type: TopologyPrivate */\n\n/**\n * An enumeration of topology types we know about\n * @public\n */\nexport declare const TopologyType: Readonly<{\n    readonly Single: \"Single\";\n    readonly ReplicaSetNoPrimary: \"ReplicaSetNoPrimary\";\n    readonly ReplicaSetWithPrimary: \"ReplicaSetWithPrimary\";\n    readonly Sharded: \"Sharded\";\n    readonly Unknown: \"Unknown\";\n    readonly LoadBalanced: \"LoadBalanced\";\n}>;\n\n/** @public */\nexport declare type TopologyType = (typeof TopologyType)[keyof typeof TopologyType];\n\n/** @public */\nexport declare interface TopologyVersion {\n    processId: ObjectId;\n    counter: Long;\n}\n\n/**\n * @public\n * A class maintaining state related to a server transaction. Internal Only\n */\nexport declare class Transaction {\n    /* Excluded from this release type: state */\n    options: TransactionOptions;\n    /* Excluded from this release type: _pinnedServer */\n    /* Excluded from this release type: _recoveryToken */\n    /* Excluded from this release type: __constructor */\n    /* Excluded from this release type: server */\n    get recoveryToken(): Document | undefined;\n    get isPinned(): boolean;\n    /** @returns Whether the transaction has started */\n    get isStarting(): boolean;\n    /**\n     * @returns Whether this session is presently in a transaction\n     */\n    get isActive(): boolean;\n    get isCommitted(): boolean;\n    /* Excluded from this release type: transition */\n    /* Excluded from this release type: pinServer */\n    /* Excluded from this release type: unpinServer */\n}\n\n/**\n * Configuration options for a transaction.\n * @public\n */\nexport declare interface TransactionOptions extends Omit<CommandOperationOptions, 'timeoutMS'> {\n    /** A default read concern for commands in this transaction */\n    readConcern?: ReadConcernLike;\n    /** A default writeConcern for commands in this transaction */\n    writeConcern?: WriteConcern;\n    /** A default read preference for commands in this transaction */\n    readPreference?: ReadPreferenceLike;\n    /** Specifies the maximum amount of time to allow a commit action on a transaction to run in milliseconds */\n    maxCommitTimeMS?: number;\n}\n\n/* Excluded from this release type: TxnState */\n\n/**\n * Typescript type safe event emitter\n * @public\n */\nexport declare interface TypedEventEmitter<Events extends EventsDescription> extends EventEmitter {\n    addListener<EventKey extends keyof Events>(event: EventKey, listener: Events[EventKey]): this;\n    addListener(event: CommonEvents, listener: (eventName: string | symbol, listener: GenericListener) => void): this;\n    addListener(event: string | symbol, listener: GenericListener): this;\n    on<EventKey extends keyof Events>(event: EventKey, listener: Events[EventKey]): this;\n    on(event: CommonEvents, listener: (eventName: string | symbol, listener: GenericListener) => void): this;\n    on(event: string | symbol, listener: GenericListener): this;\n    once<EventKey extends keyof Events>(event: EventKey, listener: Events[EventKey]): this;\n    once(event: CommonEvents, listener: (eventName: string | symbol, listener: GenericListener) => void): this;\n    once(event: string | symbol, listener: GenericListener): this;\n    removeListener<EventKey extends keyof Events>(event: EventKey, listener: Events[EventKey]): this;\n    removeListener(event: CommonEvents, listener: (eventName: string | symbol, listener: GenericListener) => void): this;\n    removeListener(event: string | symbol, listener: GenericListener): this;\n    off<EventKey extends keyof Events>(event: EventKey, listener: Events[EventKey]): this;\n    off(event: CommonEvents, listener: (eventName: string | symbol, listener: GenericListener) => void): this;\n    off(event: string | symbol, listener: GenericListener): this;\n    removeAllListeners<EventKey extends keyof Events>(event?: EventKey | CommonEvents | symbol | string): this;\n    listeners<EventKey extends keyof Events>(event: EventKey | CommonEvents | symbol | string): Events[EventKey][];\n    rawListeners<EventKey extends keyof Events>(event: EventKey | CommonEvents | symbol | string): Events[EventKey][];\n    emit<EventKey extends keyof Events>(event: EventKey | symbol, ...args: Parameters<Events[EventKey]>): boolean;\n    listenerCount<EventKey extends keyof Events>(type: EventKey | CommonEvents | symbol | string): number;\n    prependListener<EventKey extends keyof Events>(event: EventKey, listener: Events[EventKey]): this;\n    prependListener(event: CommonEvents, listener: (eventName: string | symbol, listener: GenericListener) => void): this;\n    prependListener(event: string | symbol, listener: GenericListener): this;\n    prependOnceListener<EventKey extends keyof Events>(event: EventKey, listener: Events[EventKey]): this;\n    prependOnceListener(event: CommonEvents, listener: (eventName: string | symbol, listener: GenericListener) => void): this;\n    prependOnceListener(event: string | symbol, listener: GenericListener): this;\n    eventNames(): string[];\n    getMaxListeners(): number;\n    setMaxListeners(n: number): this;\n}\n\n/**\n * Typescript type safe event emitter\n * @public\n */\nexport declare class TypedEventEmitter<Events extends EventsDescription> extends EventEmitter {\n    /* Excluded from this release type: mongoLogger */\n    /* Excluded from this release type: component */\n    /* Excluded from this release type: emitAndLog */\n    /* Excluded from this release type: emitAndLogHeartbeat */\n    /* Excluded from this release type: emitAndLogCommand */\n}\n\n/** @public */\nexport declare class UnorderedBulkOperation extends BulkOperationBase {\n    /* Excluded from this release type: __constructor */\n    handleWriteError(writeResult: BulkWriteResult): void;\n    addToOperationsList(batchType: BatchType, document: Document | UpdateStatement | DeleteStatement): this;\n}\n\n/** @public */\nexport declare interface UpdateDescription<TSchema extends Document = Document> {\n    /**\n     * A document containing key:value pairs of names of the fields that were\n     * changed, and the new value for those fields.\n     */\n    updatedFields?: Partial<TSchema>;\n    /**\n     * An array of field names that were removed from the document.\n     */\n    removedFields?: string[];\n    /**\n     * An array of documents which record array truncations performed with pipeline-based updates using one or more of the following stages:\n     * - $addFields\n     * - $set\n     * - $replaceRoot\n     * - $replaceWith\n     */\n    truncatedArrays?: Array<{\n        /** The name of the truncated field. */\n        field: string;\n        /** The number of elements in the truncated array. */\n        newSize: number;\n    }>;\n    /**\n     * A document containing additional information about any ambiguous update paths from the update event.  The document\n     * maps the full ambiguous update path to an array containing the actual resolved components of the path.  For example,\n     * given a document shaped like `{ a: { '0': 0 } }`, and an update of `{ $inc: 'a.0' }`, disambiguated paths would look like\n     * the following:\n     *\n     * ```\n     *   {\n     *     'a.0': ['a', '0']\n     *   }\n     * ```\n     *\n     * This field is only present when there are ambiguous paths that are updated as a part of the update event.\n     *\n     * On \\<8.2.0 servers, this field is only present when `showExpandedEvents` is set to true.\n     * is enabled for the change stream.\n     *\n     * On 8.2.0+ servers, this field is present for update events regardless of whether `showExpandedEvents` is enabled.\n     * @sinceServerVersion 6.1.0\n     */\n    disambiguatedPaths?: Document;\n}\n\n/** @public */\nexport declare type UpdateFilter<TSchema> = {\n    $currentDate?: OnlyFieldsOfType<TSchema, Date | Timestamp, true | {\n        $type: 'date' | 'timestamp';\n    }>;\n    $inc?: OnlyFieldsOfType<TSchema, NumericType | undefined>;\n    $min?: MatchKeysAndValues<TSchema>;\n    $max?: MatchKeysAndValues<TSchema>;\n    $mul?: OnlyFieldsOfType<TSchema, NumericType | undefined>;\n    $rename?: Record<string, string>;\n    $set?: MatchKeysAndValues<TSchema>;\n    $setOnInsert?: MatchKeysAndValues<TSchema>;\n    $unset?: OnlyFieldsOfType<TSchema, any, '' | true | 1>;\n    $addToSet?: SetFields<TSchema>;\n    $pop?: OnlyFieldsOfType<TSchema, ReadonlyArray<any>, 1 | -1>;\n    $pull?: PullOperator<TSchema>;\n    $push?: PushOperator<TSchema>;\n    $pullAll?: PullAllOperator<TSchema>;\n    $bit?: OnlyFieldsOfType<TSchema, NumericType | undefined, {\n        and: IntegerType;\n    } | {\n        or: IntegerType;\n    } | {\n        xor: IntegerType;\n    }>;\n} & Document;\n\n/** @public */\nexport declare interface UpdateManyModel<TSchema extends Document = Document> {\n    /** The filter to limit the updated documents. */\n    filter: Filter<TSchema>;\n    /**\n     * The modifications to apply. The value can be either:\n     * UpdateFilter<TSchema> - A document that contains update operator expressions,\n     * Document[] - an aggregation pipeline.\n     */\n    update: UpdateFilter<TSchema> | Document[];\n    /** A set of filters specifying to which array elements an update should apply. */\n    arrayFilters?: Document[];\n    /** Specifies a collation. */\n    collation?: CollationOptions;\n    /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n    hint?: Hint;\n    /** When true, creates a new document if no document matches the query. */\n    upsert?: boolean;\n}\n\n/** @public */\nexport declare interface UpdateOneModel<TSchema extends Document = Document> {\n    /** The filter to limit the updated documents. */\n    filter: Filter<TSchema>;\n    /**\n     * The modifications to apply. The value can be either:\n     * UpdateFilter<TSchema> - A document that contains update operator expressions,\n     * Document[] - an aggregation pipeline.\n     */\n    update: UpdateFilter<TSchema> | Document[];\n    /** A set of filters specifying to which array elements an update should apply. */\n    arrayFilters?: Document[];\n    /** Specifies a collation. */\n    collation?: CollationOptions;\n    /** The index to use. If specified, then the query system will only consider plans using the hinted index. */\n    hint?: Hint;\n    /** When true, creates a new document if no document matches the query. */\n    upsert?: boolean;\n}\n\n/** @public */\nexport declare interface UpdateOptions extends CommandOperationOptions {\n    /** A set of filters specifying to which array elements an update should apply */\n    arrayFilters?: Document[];\n    /** If true, allows the write to opt-out of document level validation */\n    bypassDocumentValidation?: boolean;\n    /** Specifies a collation */\n    collation?: CollationOptions;\n    /** Specify that the update query should only consider plans using the hinted index */\n    hint?: Hint;\n    /** When true, creates a new document if no document matches the query */\n    upsert?: boolean;\n    /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n    let?: Document;\n}\n\n/**\n * @public\n * `TSchema` is the schema of the collection\n */\nexport declare interface UpdateResult<TSchema extends Document = Document> {\n    /** Indicates whether this write result was acknowledged. If not, then all other members of this result will be undefined */\n    acknowledged: boolean;\n    /** The number of documents that matched the filter */\n    matchedCount: number;\n    /** The number of documents that were modified */\n    modifiedCount: number;\n    /** The number of documents that were upserted */\n    upsertedCount: number;\n    /** The identifier of the inserted document if an upsert took place */\n    upsertedId: InferIdType<TSchema> | null;\n}\n\n/** @public */\nexport declare interface UpdateStatement {\n    /** The query that matches documents to update. */\n    q: Document;\n    /** The modifications to apply. */\n    u: Document | Document[];\n    /**  If true, perform an insert if no documents match the query. */\n    upsert?: boolean;\n    /** If true, updates all documents that meet the query criteria. */\n    multi?: boolean;\n    /** Specifies the collation to use for the operation. */\n    collation?: CollationOptions;\n    /** An array of filter documents that determines which array elements to modify for an update operation on an array field. */\n    arrayFilters?: Document[];\n    /** A document or string that specifies the index to use to support the query predicate. */\n    hint?: Hint;\n}\n\nexport { UUID }\n\n/** @public */\nexport declare interface ValidateCollectionOptions extends CommandOperationOptions {\n    /** Validates a collection in the background, without interrupting read or write traffic (only in MongoDB 4.4+) */\n    background?: boolean;\n}\n\n/** @public */\nexport declare type W = number | 'majority';\n\n/* Excluded from this release type: WAITING_FOR_SUITABLE_SERVER */\n\n/* Excluded from this release type: WaitingForSuitableServerEvent */\n\n/* Excluded from this release type: WaitQueueMember */\n\n/* Excluded from this release type: WithConnectionCallback */\n\n/** Add an _id field to an object shaped type @public */\nexport declare type WithId<TSchema> = EnhancedOmit<TSchema, '_id'> & {\n    _id: InferIdType<TSchema>;\n};\n\n/** Remove the _id field from an object shaped type @public */\nexport declare type WithoutId<TSchema> = Omit<TSchema, '_id'>;\n\n/** @public */\nexport declare type WithSessionCallback<T = unknown> = (session: ClientSession) => Promise<T>;\n\n/** @public */\nexport declare type WithTransactionCallback<T = any> = (session: ClientSession) => Promise<T>;\n\n/* Excluded from this release type: Workflow */\n\n/**\n * A MongoDB WriteConcern, which describes the level of acknowledgement\n * requested from MongoDB for write operations.\n * @public\n *\n * @see https://www.mongodb.com/docs/manual/reference/write-concern/\n */\nexport declare class WriteConcern {\n    /**\n     * Request acknowledgment that the write operation has propagated to a specified number of mongod instances or to mongod instances with specified tags.\n     * If w is 0 and is set on a write operation, the server will not send a response.\n     */\n    readonly w?: W;\n    /** Request acknowledgment that the write operation has been written to the on-disk journal */\n    readonly journal?: boolean;\n    /**\n     * Specify a time limit to prevent write operations from blocking indefinitely.\n     */\n    readonly wtimeoutMS?: number;\n    /**\n     * Specify a time limit to prevent write operations from blocking indefinitely.\n     * @deprecated Will be removed in the next major version. Please use wtimeoutMS.\n     */\n    wtimeout?: number;\n    /**\n     * Request acknowledgment that the write operation has been written to the on-disk journal.\n     * @deprecated Will be removed in the next major version. Please use journal.\n     */\n    j?: boolean;\n    /**\n     * Equivalent to the j option.\n     * @deprecated Will be removed in the next major version. Please use journal.\n     */\n    fsync?: boolean | 1;\n    /**\n     * Constructs a WriteConcern from the write concern properties.\n     * @param w - request acknowledgment that the write operation has propagated to a specified number of mongod instances or to mongod instances with specified tags.\n     * @param wtimeoutMS - specify a time limit to prevent write operations from blocking indefinitely\n     * @param journal - request acknowledgment that the write operation has been written to the on-disk journal\n     * @param fsync - equivalent to the j option. Is deprecated and will be removed in the next major version.\n     */\n    constructor(w?: W, wtimeoutMS?: number, journal?: boolean, fsync?: boolean | 1);\n    /**\n     * Apply a write concern to a command document. Will modify and return the command.\n     */\n    static apply(command: Document, writeConcern: WriteConcern): Document;\n    /** Construct a WriteConcern given an options object. */\n    static fromOptions(options?: WriteConcernOptions | WriteConcern | W, inherit?: WriteConcernOptions | WriteConcern): WriteConcern | undefined;\n}\n\n/**\n * An error representing a failure by the server to apply the requested write concern to the bulk operation.\n * @public\n * @category Error\n */\nexport declare class WriteConcernError {\n    /* Excluded from this release type: serverError */\n    constructor(error: WriteConcernErrorData);\n    /** Write concern error code. */\n    get code(): number | undefined;\n    /** Write concern error message. */\n    get errmsg(): string | undefined;\n    /** Write concern error info. */\n    get errInfo(): Document | undefined;\n    toJSON(): WriteConcernErrorData;\n    toString(): string;\n}\n\n/** @public */\nexport declare interface WriteConcernErrorData {\n    code: number;\n    errmsg: string;\n    errInfo?: Document;\n}\n\n/**\n * The type of the result property of MongoWriteConcernError\n * @public\n */\nexport declare interface WriteConcernErrorResult {\n    writeConcernError: {\n        code: number;\n        errmsg: string;\n        codeName?: string;\n        errInfo?: Document;\n    };\n    ok: number;\n    code?: number;\n    errorLabels?: string[];\n    [x: string | number]: unknown;\n}\n\n/** @public */\nexport declare interface WriteConcernOptions {\n    /** Write Concern as an object */\n    writeConcern?: WriteConcern | WriteConcernSettings;\n}\n\n/** @public */\nexport declare interface WriteConcernSettings {\n    /** The write concern */\n    w?: W;\n    /**\n     * The write concern timeout.\n     */\n    wtimeoutMS?: number;\n    /** The journal write concern */\n    journal?: boolean;\n    /**\n     * The journal write concern.\n     * @deprecated Will be removed in the next major version. Please use the journal option.\n     */\n    j?: boolean;\n    /**\n     * The write concern timeout.\n     */\n    wtimeout?: number;\n    /**\n     * The file sync write concern.\n     * @deprecated Will be removed in the next major version. Please use the journal option.\n     */\n    fsync?: boolean | 1;\n}\n\n/**\n * An error that occurred during a BulkWrite on the server.\n * @public\n * @category Error\n */\nexport declare class WriteError {\n    err: BulkWriteOperationError;\n    constructor(err: BulkWriteOperationError);\n    /** WriteError code. */\n    get code(): number;\n    /** WriteError original bulk operation index. */\n    get index(): number;\n    /** WriteError message. */\n    get errmsg(): string | undefined;\n    /** WriteError details. */\n    get errInfo(): Document | undefined;\n    /** Returns the underlying operation that caused the error */\n    getOperation(): Document;\n    toJSON(): {\n        code: number;\n        index: number;\n        errmsg?: string;\n        op: Document;\n    };\n    toString(): string;\n}\n\n/* Excluded from this release type: WriteProtocolMessageType */\n\nexport { }\n",
  '/mql.ts':
    "/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport type * as bson from '/bson.ts';\nimport type { FilterOperators } from '/mongodb.ts';\n\ntype Condition<T> = AlternativeType<T> | FilterOperators<T> | QueryOperator<T>;\ntype AlternativeType<T> =\n  T extends ReadonlyArray<infer U> ? T | RegExpOrString<U> : RegExpOrString<T>;\ntype RegExpOrString<T> = T extends string ? Regex | T : T;\ntype KeysOfAType<T, Type> = {\n  [k in keyof T]: Extract<T[k], Type> extends never ? never : k;\n}[keyof T];\ntype RecordWithStaticFields<T extends Record<string, any>, TValue> = T & {\n  [key: string]: TValue | T[keyof T];\n};\n\n// TBD: Nested fields\ntype AFieldPath<S, Type> = KeysOfAType<S, Type> & string;\ntype FieldExpression<T> = { [k: string]: FieldPath<T> };\n\ntype MultiAnalyzerSpec<T> = {\n  value: KeysOfAType<T, string>;\n  multi: string;\n};\nexport namespace Aggregation.Accumulator {\n  /**\n   * A type describing the `$accumulator` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/accumulator/}\n   */\n  export interface $accumulator<S> {\n    /**\n     * Defines a custom accumulator function.\n     * New in MongoDB 4.4.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/accumulator/}\n     */\n    $accumulator: {\n      /**\n       * Function used to initialize the state. The init function receives its arguments from the initArgs array expression. You can specify the function definition as either BSON type Code or String.\n       */\n      init: Javascript;\n\n      /**\n       * Arguments passed to the init function.\n       */\n      initArgs?: ResolvesToArray<S>;\n\n      /**\n       * Function used to accumulate documents. The accumulate function receives its arguments from the current state and accumulateArgs array expression. The result of the accumulate function becomes the new state. You can specify the function definition as either BSON type Code or String.\n       */\n      accumulate: Javascript;\n\n      /**\n       * Arguments passed to the accumulate function. You can use accumulateArgs to specify what field value(s) to pass to the accumulate function.\n       */\n      accumulateArgs: ResolvesToArray<S>;\n\n      /**\n       * Function used to merge two internal states. merge must be either a String or Code BSON type. merge returns the combined result of the two merged states. For information on when the merge function is called, see Merge Two States with $merge.\n       */\n      merge: Javascript;\n\n      /**\n       * Function used to update the result of the accumulation.\n       */\n      finalize?: Javascript;\n\n      /**\n       * The language used in the $accumulator code.\n       */\n      lang: string;\n    };\n  }\n\n  /**\n   * A type describing the `$addToSet` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/addToSet/}\n   */\n  export interface $addToSet<S> {\n    /**\n     * Returns an array of unique expression values for each group. Order of the array elements is undefined.\n     * Changed in MongoDB 5.0: Available in the $setWindowFields stage.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/addToSet/}\n     */\n    $addToSet: Expression<S>;\n  }\n\n  /**\n   * A type describing the `$avg` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/avg/}\n   */\n  export interface $avg<S> {\n    /**\n     * Returns an average of numerical values. Ignores non-numeric values.\n     * Changed in MongoDB 5.0: Available in the $setWindowFields stage.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/avg/}\n     */\n    $avg: ResolvesToNumber<S>;\n  }\n\n  /**\n   * A type describing the `$bottom` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/bottom/}\n   */\n  export interface $bottom<S> {\n    /**\n     * Returns the bottom element within a group according to the specified sort order.\n     * New in MongoDB 5.2: Available in the $group and $setWindowFields stages.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/bottom/}\n     */\n    $bottom: {\n      /**\n       * Specifies the order of results, with syntax similar to $sort.\n       */\n      sortBy: SortBy;\n\n      /**\n       * Represents the output for each element in the group and can be any expression.\n       */\n      output: Expression<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$bottomN` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/bottomN/}\n   */\n  export interface $bottomN<S> {\n    /**\n     * Returns an aggregation of the bottom n elements within a group, according to the specified sort order. If the group contains fewer than n elements, $bottomN returns all elements in the group.\n     * New in MongoDB 5.2.\n     * Available in the $group and $setWindowFields stages.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/bottomN/}\n     */\n    $bottomN: {\n      /**\n       * Limits the number of results per group and has to be a positive integral expression that is either a constant or depends on the _id value for $group.\n       */\n      n: ResolvesToInt<S>;\n\n      /**\n       * Specifies the order of results, with syntax similar to $sort.\n       */\n      sortBy: SortBy;\n\n      /**\n       * Represents the output for each element in the group and can be any expression.\n       */\n      output: Expression<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$count` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/count-accumulator/}\n   */\n  export interface $count<S> {\n    /**\n     * Returns the number of documents in the group or window.\n     * Distinct from the $count pipeline stage.\n     * New in MongoDB 5.0.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/count-accumulator/}\n     */\n    $count: Record<string, never>;\n  }\n\n  /**\n   * A type describing the `$covariancePop` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/covariancePop/}\n   */\n  export interface $covariancePop<S> {\n    /**\n     * Returns the population covariance of two numeric expressions.\n     * New in MongoDB 5.0.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/covariancePop/}\n     */\n    $covariancePop: [\n      expression1: ResolvesToNumber<S>,\n      expression2: ResolvesToNumber<S>,\n    ];\n  }\n\n  /**\n   * A type describing the `$covarianceSamp` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/covarianceSamp/}\n   */\n  export interface $covarianceSamp<S> {\n    /**\n     * Returns the sample covariance of two numeric expressions.\n     * New in MongoDB 5.0.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/covarianceSamp/}\n     */\n    $covarianceSamp: [\n      expression1: ResolvesToNumber<S>,\n      expression2: ResolvesToNumber<S>,\n    ];\n  }\n\n  /**\n   * A type describing the `$denseRank` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/denseRank/}\n   */\n  export interface $denseRank<S> {\n    /**\n     * Returns the document position (known as the rank) relative to other documents in the $setWindowFields stage partition. There are no gaps in the ranks. Ties receive the same rank.\n     * New in MongoDB 5.0.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/denseRank/}\n     */\n    $denseRank: Record<string, never>;\n  }\n\n  /**\n   * A type describing the `$derivative` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/derivative/}\n   */\n  export interface $derivative<S> {\n    /**\n     * Returns the average rate of change within the specified window.\n     * New in MongoDB 5.0.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/derivative/}\n     */\n    $derivative: {\n      input: ResolvesToNumber<S> | ResolvesToDate<S>;\n\n      /**\n       * A string that specifies the time unit. Use one of these strings: \"week\", \"day\",\"hour\", \"minute\", \"second\", \"millisecond\".\n       * If the sortBy field is not a date, you must omit a unit. If you specify a unit, you must specify a date in the sortBy field.\n       */\n      unit?: TimeUnit;\n    };\n  }\n\n  /**\n   * A type describing the `$documentNumber` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/documentNumber/}\n   */\n  export interface $documentNumber<S> {\n    /**\n     * Returns the position of a document (known as the document number) in the $setWindowFields stage partition. Ties result in different adjacent document numbers.\n     * New in MongoDB 5.0.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/documentNumber/}\n     */\n    $documentNumber: Record<string, never>;\n  }\n\n  /**\n   * A type describing the `$expMovingAvg` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/expMovingAvg/}\n   */\n  export interface $expMovingAvg<S> {\n    /**\n     * Returns the exponential moving average for the numeric expression.\n     * New in MongoDB 5.0.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/expMovingAvg/}\n     */\n    $expMovingAvg: {\n      input: ResolvesToNumber<S>;\n\n      /**\n       * An integer that specifies the number of historical documents that have a significant mathematical weight in the exponential moving average calculation, with the most recent documents contributing the most weight.\n       * You must specify either N or alpha. You cannot specify both.\n       * The N value is used in this formula to calculate the current result based on the expression value from the current document being read and the previous result of the calculation:\n       */\n      N?: Int;\n\n      /**\n       * A double that specifies the exponential decay value to use in the exponential moving average calculation. A higher alpha value assigns a lower mathematical significance to previous results from the calculation.\n       * You must specify either N or alpha. You cannot specify both.\n       */\n      alpha?: Double;\n    };\n  }\n\n  /**\n   * A type describing the `$first` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/first/}\n   */\n  export interface $first<S> {\n    /**\n     * Returns the result of an expression for the first document in a group or window.\n     * Changed in MongoDB 5.0: Available in the $setWindowFields stage.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/first/}\n     */\n    $first: Expression<S>;\n  }\n\n  /**\n   * A type describing the `$firstN` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/firstN/}\n   */\n  export interface $firstN<S> {\n    /**\n     * Returns an aggregation of the first n elements within a group.\n     * The elements returned are meaningful only if in a specified sort order.\n     * If the group contains fewer than n elements, $firstN returns all elements in the group.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/firstN/}\n     */\n    $firstN: {\n      /**\n       * An expression that resolves to the array from which to return n elements.\n       */\n      input: Expression<S>;\n\n      /**\n       * A positive integral expression that is either a constant or depends on the _id value for $group.\n       */\n      n: ResolvesToInt<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$integral` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/integral/}\n   */\n  export interface $integral<S> {\n    /**\n     * Returns the approximation of the area under a curve.\n     * New in MongoDB 5.0.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/integral/}\n     */\n    $integral: {\n      input: ResolvesToNumber<S> | ResolvesToDate<S>;\n\n      /**\n       * A string that specifies the time unit. Use one of these strings: \"week\", \"day\",\"hour\", \"minute\", \"second\", \"millisecond\".\n       * If the sortBy field is not a date, you must omit a unit. If you specify a unit, you must specify a date in the sortBy field.\n       */\n      unit?: TimeUnit;\n    };\n  }\n\n  /**\n   * A type describing the `$last` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/last/}\n   */\n  export interface $last<S> {\n    /**\n     * Returns the result of an expression for the last document in a group or window.\n     * Changed in MongoDB 5.0: Available in the $setWindowFields stage.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/last/}\n     */\n    $last: Expression<S>;\n  }\n\n  /**\n   * A type describing the `$lastN` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/lastN/}\n   */\n  export interface $lastN<S> {\n    /**\n     * Returns an aggregation of the last n elements within a group.\n     * The elements returned are meaningful only if in a specified sort order.\n     * If the group contains fewer than n elements, $lastN returns all elements in the group.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/lastN/}\n     */\n    $lastN: {\n      /**\n       * An expression that resolves to the array from which to return n elements.\n       */\n      input: Expression<S>;\n\n      /**\n       * An expression that resolves to a positive integer. The integer specifies the number of array elements that $firstN returns.\n       */\n      n: ResolvesToInt<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$linearFill` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/linearFill/}\n   */\n  export interface $linearFill<S> {\n    /**\n     * Fills null and missing fields in a window using linear interpolation based on surrounding field values.\n     * Available in the $setWindowFields stage.\n     * New in MongoDB 5.3.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/linearFill/}\n     */\n    $linearFill: ResolvesToNumber<S>;\n  }\n\n  /**\n   * A type describing the `$locf` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/locf/}\n   */\n  export interface $locf<S> {\n    /**\n     * Last observation carried forward. Sets values for null and missing fields in a window to the last non-null value for the field.\n     * Available in the $setWindowFields stage.\n     * New in MongoDB 5.2.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/locf/}\n     */\n    $locf: Expression<S>;\n  }\n\n  /**\n   * A type describing the `$max` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/max/}\n   */\n  export interface $max<S> {\n    /**\n     * Returns the maximum value that results from applying an expression to each document.\n     * Changed in MongoDB 5.0: Available in the $setWindowFields stage.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/max/}\n     */\n    $max: Expression<S>;\n  }\n\n  /**\n   * A type describing the `$maxN` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/maxN/}\n   */\n  export interface $maxN<S> {\n    /**\n     * Returns the n largest values in an array. Distinct from the $maxN accumulator.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/maxN/}\n     */\n    $maxN: {\n      /**\n       * An expression that resolves to the array from which to return the maximal n elements.\n       */\n      input: ResolvesToArray<S>;\n\n      /**\n       * An expression that resolves to a positive integer. The integer specifies the number of array elements that $maxN returns.\n       */\n      n: ResolvesToInt<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$median` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/median/}\n   */\n  export interface $median<S> {\n    /**\n     * Returns an approximation of the median, the 50th percentile, as a scalar value.\n     * New in MongoDB 7.0.\n     * This operator is available as an accumulator in these stages:\n     * $group\n     * $setWindowFields\n     * It is also available as an aggregation expression.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/median/}\n     */\n    $median: {\n      /**\n       * $median calculates the 50th percentile value of this data. input must be a field name or an expression that evaluates to a numeric type. If the expression cannot be converted to a numeric type, the $median calculation ignores it.\n       */\n      input: ResolvesToNumber<S>;\n\n      /**\n       * The method that mongod uses to calculate the 50th percentile value. The method must be 'approximate'.\n       */\n      method: AccumulatorPercentile;\n    };\n  }\n\n  /**\n   * A type describing the `$mergeObjects` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/mergeObjects/}\n   */\n  export interface $mergeObjects<S> {\n    /**\n     * Combines multiple documents into a single document.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/mergeObjects/}\n     */\n    $mergeObjects: ResolvesToObject<S>;\n  }\n\n  /**\n   * A type describing the `$min` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/min/}\n   */\n  export interface $min<S> {\n    /**\n     * Returns the minimum value that results from applying an expression to each document.\n     * Changed in MongoDB 5.0: Available in the $setWindowFields stage.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/min/}\n     */\n    $min: Expression<S>;\n  }\n\n  /**\n   * A type describing the `$minN` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/minN/}\n   */\n  export interface $minN<S> {\n    /**\n     * Returns the n smallest values in an array. Distinct from the $minN accumulator.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/minN/}\n     */\n    $minN: {\n      /**\n       * An expression that resolves to the array from which to return the maximal n elements.\n       */\n      input: ResolvesToArray<S>;\n\n      /**\n       * An expression that resolves to a positive integer. The integer specifies the number of array elements that $maxN returns.\n       */\n      n: ResolvesToInt<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$percentile` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/percentile/}\n   */\n  export interface $percentile<S> {\n    /**\n     * Returns an array of scalar values that correspond to specified percentile values.\n     * New in MongoDB 7.0.\n     * This operator is available as an accumulator in these stages:\n     * $group\n     * $setWindowFields\n     * It is also available as an aggregation expression.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/percentile/}\n     */\n    $percentile: {\n      /**\n       * $percentile calculates the percentile values of this data. input must be a field name or an expression that evaluates to a numeric type. If the expression cannot be converted to a numeric type, the $percentile calculation ignores it.\n       */\n      input: ResolvesToNumber<S>;\n\n      /**\n       * $percentile calculates a percentile value for each element in p. The elements represent percentages and must evaluate to numeric values in the range 0.0 to 1.0, inclusive.\n       * $percentile returns results in the same order as the elements in p.\n       */\n      p: ResolvesToArray<S>;\n\n      /**\n       * The method that mongod uses to calculate the percentile value. The method must be 'approximate'.\n       */\n      method: AccumulatorPercentile;\n    };\n  }\n\n  /**\n   * A type describing the `$push` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/push/}\n   */\n  export interface $push<S> {\n    /**\n     * Returns an array of values that result from applying an expression to each document.\n     * Changed in MongoDB 5.0: Available in the $setWindowFields stage.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/push/}\n     */\n    $push: Expression<S>;\n  }\n\n  /**\n   * A type describing the `$rank` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/rank/}\n   */\n  export interface $rank<S> {\n    /**\n     * Returns the document position (known as the rank) relative to other documents in the $setWindowFields stage partition.\n     * New in MongoDB 5.0.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/rank/}\n     */\n    $rank: Record<string, never>;\n  }\n\n  /**\n   * A type describing the `$shift` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/shift/}\n   */\n  export interface $shift<S> {\n    /**\n     * Returns the value from an expression applied to a document in a specified position relative to the current document in the $setWindowFields stage partition.\n     * New in MongoDB 5.0.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/shift/}\n     */\n    $shift: {\n      /**\n       * Specifies an expression to evaluate and return in the output.\n       */\n      output: Expression<S>;\n\n      /**\n       * Specifies an integer with a numeric document position relative to the current document in the output.\n       * For example:\n       * 1 specifies the document position after the current document.\n       * -1 specifies the document position before the current document.\n       * -2 specifies the document position that is two positions before the current document.\n       */\n      by: Int;\n\n      /**\n       * Specifies an optional default expression to evaluate if the document position is outside of the implicit $setWindowFields stage window. The implicit window contains all the documents in the partition.\n       * The default expression must evaluate to a constant value.\n       * If you do not specify a default expression, $shift returns null for documents whose positions are outside of the implicit $setWindowFields stage window.\n       */\n      default: Expression<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$stdDevPop` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/stdDevPop/}\n   */\n  export interface $stdDevPop<S> {\n    /**\n     * Calculates the population standard deviation of the input values. Use if the values encompass the entire population of data you want to represent and do not wish to generalize about a larger population. $stdDevPop ignores non-numeric values.\n     * If the values represent only a sample of a population of data from which to generalize about the population, use $stdDevSamp instead.\n     * Changed in MongoDB 5.0: Available in the $setWindowFields stage.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/stdDevPop/}\n     */\n    $stdDevPop: ResolvesToNumber<S>;\n  }\n\n  /**\n   * A type describing the `$stdDevSamp` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/stdDevSamp/}\n   */\n  export interface $stdDevSamp<S> {\n    /**\n     * Calculates the sample standard deviation of the input values. Use if the values encompass a sample of a population of data from which to generalize about the population. $stdDevSamp ignores non-numeric values.\n     * If the values represent the entire population of data or you do not wish to generalize about a larger population, use $stdDevPop instead.\n     * Changed in MongoDB 5.0: Available in the $setWindowFields stage.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/stdDevSamp/}\n     */\n    $stdDevSamp: ResolvesToNumber<S>;\n  }\n\n  /**\n   * A type describing the `$sum` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/sum/}\n   */\n  export interface $sum<S> {\n    /**\n     * Returns a sum of numerical values. Ignores non-numeric values.\n     * Changed in MongoDB 5.0: Available in the $setWindowFields stage.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/sum/}\n     */\n    $sum: ResolvesToNumber<S>;\n  }\n\n  /**\n   * A type describing the `$top` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/top/}\n   */\n  export interface $top<S> {\n    /**\n     * Returns the top element within a group according to the specified sort order.\n     * New in MongoDB 5.2.\n     * Available in the $group and $setWindowFields stages.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/top/}\n     */\n    $top: {\n      /**\n       * Specifies the order of results, with syntax similar to $sort.\n       */\n      sortBy: SortBy;\n\n      /**\n       * Represents the output for each element in the group and can be any expression.\n       */\n      output: Expression<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$topN` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/topN/}\n   */\n  export interface $topN<S> {\n    /**\n     * Returns an aggregation of the top n fields within a group, according to the specified sort order.\n     * New in MongoDB 5.2.\n     * Available in the $group and $setWindowFields stages.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/topN/}\n     */\n    $topN: {\n      /**\n       * limits the number of results per group and has to be a positive integral expression that is either a constant or depends on the _id value for $group.\n       */\n      n: ResolvesToInt<S>;\n\n      /**\n       * Specifies the order of results, with syntax similar to $sort.\n       */\n      sortBy: SortBy;\n\n      /**\n       * Represents the output for each element in the group and can be any expression.\n       */\n      output: Expression<S>;\n    };\n  }\n}\nexport namespace Aggregation.Expression {\n  /**\n   * A type describing the `$abs` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/abs/}\n   */\n  export interface $abs<S> {\n    /**\n     * Returns the absolute value of a number.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/abs/}\n     */\n    $abs: ResolvesToNumber<S>;\n  }\n\n  /**\n   * A type describing the `$acos` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/acos/}\n   */\n  export interface $acos<S> {\n    /**\n     * Returns the inverse cosine (arc cosine) of a value in radians.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/acos/}\n     */\n    $acos: ResolvesToNumber<S>;\n  }\n\n  /**\n   * A type describing the `$acosh` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/acosh/}\n   */\n  export interface $acosh<S> {\n    /**\n     * Returns the inverse hyperbolic cosine (hyperbolic arc cosine) of a value in radians.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/acosh/}\n     */\n    $acosh: ResolvesToNumber<S>;\n  }\n\n  /**\n   * A type describing the `$add` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/add/}\n   */\n  export interface $add<S> {\n    /**\n     * Adds numbers to return the sum, or adds numbers and a date to return a new date. If adding numbers and a date, treats the numbers as milliseconds. Accepts any number of argument expressions, but at most, one expression can resolve to a date.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/add/}\n     */\n    $add: [\n      /**\n       * The arguments can be any valid expression as long as they resolve to either all numbers or to numbers and a date.\n       */\n      ...(ResolvesToNumber<S> | ResolvesToDate<S>)[],\n    ];\n  }\n\n  /**\n   * A type describing the `$allElementsTrue` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/allElementsTrue/}\n   */\n  export interface $allElementsTrue<S> {\n    /**\n     * Returns true if no element of a set evaluates to false, otherwise, returns false. Accepts a single argument expression.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/allElementsTrue/}\n     */\n    $allElementsTrue: [expression: ResolvesToArray<S>];\n  }\n\n  /**\n   * A type describing the `$and` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/and/}\n   */\n  export interface $and<S> {\n    /**\n     * Returns true only when all its expressions evaluate to true. Accepts any number of argument expressions.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/and/}\n     */\n    $and: [\n      ...(\n        | Expression<S>\n        | ResolvesToBool<S>\n        | ResolvesToNumber<S>\n        | ResolvesToString<S>\n        | ResolvesToNull<S>\n      )[],\n    ];\n  }\n\n  /**\n   * A type describing the `$anyElementTrue` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/anyElementTrue/}\n   */\n  export interface $anyElementTrue<S> {\n    /**\n     * Returns true if any elements of a set evaluate to true; otherwise, returns false. Accepts a single argument expression.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/anyElementTrue/}\n     */\n    $anyElementTrue: [expression: ResolvesToArray<S>];\n  }\n\n  /**\n   * A type describing the `$arrayElemAt` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/arrayElemAt/}\n   */\n  export interface $arrayElemAt<S> {\n    /**\n     * Returns the element at the specified array index.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/arrayElemAt/}\n     */\n    $arrayElemAt: [array: ResolvesToArray<S>, idx: ResolvesToInt<S>];\n  }\n\n  /**\n   * A type describing the `$arrayToObject` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/arrayToObject/}\n   */\n  export interface $arrayToObject<S> {\n    /**\n     * Converts an array of key value pairs to a document.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/arrayToObject/}\n     */\n    $arrayToObject: [array: ResolvesToArray<S>];\n  }\n\n  /**\n   * A type describing the `$asin` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/asin/}\n   */\n  export interface $asin<S> {\n    /**\n     * Returns the inverse sin (arc sine) of a value in radians.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/asin/}\n     */\n    $asin: ResolvesToNumber<S>;\n  }\n\n  /**\n   * A type describing the `$asinh` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/asinh/}\n   */\n  export interface $asinh<S> {\n    /**\n     * Returns the inverse hyperbolic sine (hyperbolic arc sine) of a value in radians.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/asinh/}\n     */\n    $asinh: ResolvesToNumber<S>;\n  }\n\n  /**\n   * A type describing the `$atan` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/atan/}\n   */\n  export interface $atan<S> {\n    /**\n     * Returns the inverse tangent (arc tangent) of a value in radians.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/atan/}\n     */\n    $atan: ResolvesToNumber<S>;\n  }\n\n  /**\n   * A type describing the `$atan2` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/atan2/}\n   */\n  export interface $atan2<S> {\n    /**\n     * Returns the inverse tangent (arc tangent) of y / x in radians, where y and x are the first and second values passed to the expression respectively.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/atan2/}\n     */\n    $atan2: [\n      /**\n       * $atan2 takes any valid expression that resolves to a number.\n       * $atan2 returns values in radians. Use $radiansToDegrees operator to convert the output value from radians to degrees.\n       * By default $atan returns values as a double. $atan2 can also return values as a 128-bit decimal as long as the expression resolves to a 128-bit decimal value.\n       */\n      y: ResolvesToNumber<S>,\n      x: ResolvesToNumber<S>,\n    ];\n  }\n\n  /**\n   * A type describing the `$atanh` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/atanh/}\n   */\n  export interface $atanh<S> {\n    /**\n     * Returns the inverse hyperbolic tangent (hyperbolic arc tangent) of a value in radians.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/atanh/}\n     */\n    $atanh: ResolvesToNumber<S>;\n  }\n\n  /**\n   * A type describing the `$avg` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/avg/}\n   */\n  export interface $avg<S> {\n    /**\n     * Returns an average of numerical values. Ignores non-numeric values.\n     * Changed in MongoDB 5.0: Available in the $setWindowFields stage.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/avg/}\n     */\n    $avg: [...ResolvesToNumber<S>[]];\n  }\n\n  /**\n   * A type describing the `$binarySize` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/binarySize/}\n   */\n  export interface $binarySize<S> {\n    /**\n     * Returns the size of a given string or binary data value's content in bytes.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/binarySize/}\n     */\n    $binarySize: ResolvesToString<S> | ResolvesToBinData<S> | ResolvesToNull<S>;\n  }\n\n  /**\n   * A type describing the `$bitAnd` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/bitAnd/}\n   */\n  export interface $bitAnd<S> {\n    /**\n     * Returns the result of a bitwise and operation on an array of int or long values.\n     * New in MongoDB 6.3.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/bitAnd/}\n     */\n    $bitAnd: [...(ResolvesToInt<S> | ResolvesToLong<S>)[]];\n  }\n\n  /**\n   * A type describing the `$bitNot` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/bitNot/}\n   */\n  export interface $bitNot<S> {\n    /**\n     * Returns the result of a bitwise not operation on a single argument or an array that contains a single int or long value.\n     * New in MongoDB 6.3.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/bitNot/}\n     */\n    $bitNot: ResolvesToInt<S> | ResolvesToLong<S>;\n  }\n\n  /**\n   * A type describing the `$bitOr` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/bitOr/}\n   */\n  export interface $bitOr<S> {\n    /**\n     * Returns the result of a bitwise or operation on an array of int or long values.\n     * New in MongoDB 6.3.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/bitOr/}\n     */\n    $bitOr: [...(ResolvesToInt<S> | ResolvesToLong<S>)[]];\n  }\n\n  /**\n   * A type describing the `$bitXor` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/bitXor/}\n   */\n  export interface $bitXor<S> {\n    /**\n     * Returns the result of a bitwise xor (exclusive or) operation on an array of int and long values.\n     * New in MongoDB 6.3.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/bitXor/}\n     */\n    $bitXor: [...(ResolvesToInt<S> | ResolvesToLong<S>)[]];\n  }\n\n  /**\n   * A type describing the `$bsonSize` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/bsonSize/}\n   */\n  export interface $bsonSize<S> {\n    /**\n     * Returns the size in bytes of a given document (i.e. BSON type Object) when encoded as BSON.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/bsonSize/}\n     */\n    $bsonSize: ResolvesToObject<S> | ResolvesToNull<S>;\n  }\n\n  /**\n   * A type describing the `$case` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/switch/}\n   */\n  export interface $case<S> {\n    /**\n     * Represents a single case in a $switch expression\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/switch/}\n     */\n    $case: {\n      /**\n       * Can be any valid expression that resolves to a boolean. If the result is not a boolean, it is coerced to a boolean value. More information about how MongoDB evaluates expressions as either true or false can be found here.\n       */\n      case: ResolvesToBool<S>;\n\n      /**\n       * Can be any valid expression.\n       */\n      then: Expression<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$ceil` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/ceil/}\n   */\n  export interface $ceil<S> {\n    /**\n     * Returns the smallest integer greater than or equal to the specified number.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/ceil/}\n     */\n    $ceil: ResolvesToNumber<S>;\n  }\n\n  /**\n   * A type describing the `$cmp` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/cmp/}\n   */\n  export interface $cmp<S> {\n    /**\n     * Returns 0 if the two values are equivalent, 1 if the first value is greater than the second, and -1 if the first value is less than the second.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/cmp/}\n     */\n    $cmp: [expression1: Expression<S>, expression2: Expression<S>];\n  }\n\n  /**\n   * A type describing the `$concat` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/concat/}\n   */\n  export interface $concat<S> {\n    /**\n     * Concatenates any number of strings.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/concat/}\n     */\n    $concat: [...ResolvesToString<S>[]];\n  }\n\n  /**\n   * A type describing the `$concatArrays` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/concatArrays/}\n   */\n  export interface $concatArrays<S> {\n    /**\n     * Concatenates arrays to return the concatenated array.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/concatArrays/}\n     */\n    $concatArrays: [...ResolvesToArray<S>[]];\n  }\n\n  /**\n   * A type describing the `$cond` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/cond/}\n   */\n  export interface $cond<S> {\n    /**\n     * A ternary operator that evaluates one expression, and depending on the result, returns the value of one of the other two expressions. Accepts either three expressions in an ordered list or three named parameters.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/cond/}\n     */\n    $cond: { if: ResolvesToBool<S>; then: Expression<S>; else: Expression<S> };\n  }\n\n  /**\n   * A type describing the `$convert` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/convert/}\n   */\n  export interface $convert<S> {\n    /**\n     * Converts a value to a specified type.\n     * New in MongoDB 4.0.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/convert/}\n     */\n    $convert: {\n      input: Expression<S>;\n      to: ResolvesToString<S> | ResolvesToInt<S>;\n\n      /**\n       * The value to return on encountering an error during conversion, including unsupported type conversions. The arguments can be any valid expression.\n       * If unspecified, the operation throws an error upon encountering an error and stops.\n       */\n      onError?: Expression<S>;\n\n      /**\n       * The value to return if the input is null or missing. The arguments can be any valid expression.\n       * If unspecified, $convert returns null if the input is null or missing.\n       */\n      onNull?: Expression<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$cos` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/cos/}\n   */\n  export interface $cos<S> {\n    /**\n     * Returns the cosine of a value that is measured in radians.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/cos/}\n     */\n    $cos: ResolvesToNumber<S>;\n  }\n\n  /**\n   * A type describing the `$cosh` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/cosh/}\n   */\n  export interface $cosh<S> {\n    /**\n     * Returns the hyperbolic cosine of a value that is measured in radians.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/cosh/}\n     */\n    $cosh: ResolvesToNumber<S>;\n  }\n\n  /**\n   * A type describing the `$dateAdd` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/dateAdd/}\n   */\n  export interface $dateAdd<S> {\n    /**\n     * Adds a number of time units to a date object.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/dateAdd/}\n     */\n    $dateAdd: {\n      /**\n       * The beginning date, in UTC, for the addition operation. The startDate can be any expression that resolves to a Date, a Timestamp, or an ObjectID.\n       */\n      startDate:\n        | ResolvesToDate<S>\n        | ResolvesToTimestamp<S>\n        | ResolvesToObjectId<S>;\n\n      /**\n       * The unit used to measure the amount of time added to the startDate.\n       */\n      unit: TimeUnit;\n      amount: ResolvesToInt<S> | ResolvesToLong<S>;\n\n      /**\n       * The timezone to carry out the operation. $timezone must be a valid expression that resolves to a string formatted as either an Olson Timezone Identifier or a UTC Offset. If no timezone is provided, the result is displayed in UTC.\n       */\n      timezone?: ResolvesToString<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$dateDiff` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/dateDiff/}\n   */\n  export interface $dateDiff<S> {\n    /**\n     * Returns the difference between two dates.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/dateDiff/}\n     */\n    $dateDiff: {\n      /**\n       * The start of the time period. The startDate can be any expression that resolves to a Date, a Timestamp, or an ObjectID.\n       */\n      startDate:\n        | ResolvesToDate<S>\n        | ResolvesToTimestamp<S>\n        | ResolvesToObjectId<S>;\n\n      /**\n       * The end of the time period. The endDate can be any expression that resolves to a Date, a Timestamp, or an ObjectID.\n       */\n      endDate:\n        | ResolvesToDate<S>\n        | ResolvesToTimestamp<S>\n        | ResolvesToObjectId<S>;\n\n      /**\n       * The time measurement unit between the startDate and endDate\n       */\n      unit: TimeUnit;\n\n      /**\n       * The timezone to carry out the operation. $timezone must be a valid expression that resolves to a string formatted as either an Olson Timezone Identifier or a UTC Offset. If no timezone is provided, the result is displayed in UTC.\n       */\n      timezone?: ResolvesToString<S>;\n\n      /**\n       * Used when the unit is equal to week. Defaults to Sunday. The startOfWeek parameter is an expression that resolves to a case insensitive string\n       */\n      startOfWeek?: ResolvesToString<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$dateFromParts` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/dateFromParts/}\n   */\n  export interface $dateFromParts<S> {\n    /**\n     * Constructs a BSON Date object given the date's constituent parts.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/dateFromParts/}\n     */\n    $dateFromParts: {\n      /**\n       * Calendar year. Can be any expression that evaluates to a number.\n       */\n      year?: ResolvesToNumber<S>;\n\n      /**\n       * ISO Week Date Year. Can be any expression that evaluates to a number.\n       */\n      isoWeekYear?: ResolvesToNumber<S>;\n\n      /**\n       * Month. Defaults to 1.\n       */\n      month?: ResolvesToNumber<S>;\n\n      /**\n       * Week of year. Defaults to 1.\n       */\n      isoWeek?: ResolvesToNumber<S>;\n\n      /**\n       * Day of month. Defaults to 1.\n       */\n      day?: ResolvesToNumber<S>;\n\n      /**\n       * Day of week (Monday 1 - Sunday 7). Defaults to 1.\n       */\n      isoDayOfWeek?: ResolvesToNumber<S>;\n\n      /**\n       * Hour. Defaults to 0.\n       */\n      hour?: ResolvesToNumber<S>;\n\n      /**\n       * Minute. Defaults to 0.\n       */\n      minute?: ResolvesToNumber<S>;\n\n      /**\n       * Second. Defaults to 0.\n       */\n      second?: ResolvesToNumber<S>;\n\n      /**\n       * Millisecond. Defaults to 0.\n       */\n      millisecond?: ResolvesToNumber<S>;\n\n      /**\n       * The timezone to carry out the operation. $timezone must be a valid expression that resolves to a string formatted as either an Olson Timezone Identifier or a UTC Offset. If no timezone is provided, the result is displayed in UTC.\n       */\n      timezone?: ResolvesToString<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$dateFromString` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/dateFromString/}\n   */\n  export interface $dateFromString<S> {\n    /**\n     * Converts a date/time string to a date object.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/dateFromString/}\n     */\n    $dateFromString: {\n      /**\n       * The date/time string to convert to a date object.\n       */\n      dateString: ResolvesToString<S>;\n\n      /**\n       * The date format specification of the dateString. The format can be any expression that evaluates to a string literal, containing 0 or more format specifiers.\n       * If unspecified, $dateFromString uses \"%Y-%m-%dT%H:%M:%S.%LZ\" as the default format but accepts a variety of formats and attempts to parse the dateString if possible.\n       */\n      format?: ResolvesToString<S>;\n\n      /**\n       * The time zone to use to format the date.\n       */\n      timezone?: ResolvesToString<S>;\n\n      /**\n       * If $dateFromString encounters an error while parsing the given dateString, it outputs the result value of the provided onError expression. This result value can be of any type.\n       * If you do not specify onError, $dateFromString throws an error if it cannot parse dateString.\n       */\n      onError?: Expression<S>;\n\n      /**\n       * If the dateString provided to $dateFromString is null or missing, it outputs the result value of the provided onNull expression. This result value can be of any type.\n       * If you do not specify onNull and dateString is null or missing, then $dateFromString outputs null.\n       */\n      onNull?: Expression<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$dateSubtract` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/dateSubtract/}\n   */\n  export interface $dateSubtract<S> {\n    /**\n     * Subtracts a number of time units from a date object.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/dateSubtract/}\n     */\n    $dateSubtract: {\n      /**\n       * The beginning date, in UTC, for the addition operation. The startDate can be any expression that resolves to a Date, a Timestamp, or an ObjectID.\n       */\n      startDate:\n        | ResolvesToDate<S>\n        | ResolvesToTimestamp<S>\n        | ResolvesToObjectId<S>;\n\n      /**\n       * The unit used to measure the amount of time added to the startDate.\n       */\n      unit: TimeUnit;\n      amount: ResolvesToInt<S> | ResolvesToLong<S>;\n\n      /**\n       * The timezone to carry out the operation. $timezone must be a valid expression that resolves to a string formatted as either an Olson Timezone Identifier or a UTC Offset. If no timezone is provided, the result is displayed in UTC.\n       */\n      timezone?: ResolvesToString<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$dateToParts` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/dateToParts/}\n   */\n  export interface $dateToParts<S> {\n    /**\n     * Returns a document containing the constituent parts of a date.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/dateToParts/}\n     */\n    $dateToParts: {\n      /**\n       * The input date for which to return parts. date can be any expression that resolves to a Date, a Timestamp, or an ObjectID.\n       */\n      date: ResolvesToDate<S> | ResolvesToTimestamp<S> | ResolvesToObjectId<S>;\n\n      /**\n       * The timezone to carry out the operation. $timezone must be a valid expression that resolves to a string formatted as either an Olson Timezone Identifier or a UTC Offset. If no timezone is provided, the result is displayed in UTC.\n       */\n      timezone?: ResolvesToString<S>;\n\n      /**\n       * If set to true, modifies the output document to use ISO week date fields. Defaults to false.\n       */\n      iso8601?: boolean;\n    };\n  }\n\n  /**\n   * A type describing the `$dateToString` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/dateToString/}\n   */\n  export interface $dateToString<S> {\n    /**\n     * Returns the date as a formatted string.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/dateToString/}\n     */\n    $dateToString: {\n      /**\n       * The date to convert to string. Must be a valid expression that resolves to a Date, a Timestamp, or an ObjectID.\n       */\n      date: ResolvesToDate<S> | ResolvesToTimestamp<S> | ResolvesToObjectId<S>;\n\n      /**\n       * The date format specification of the dateString. The format can be any expression that evaluates to a string literal, containing 0 or more format specifiers.\n       * If unspecified, $dateFromString uses \"%Y-%m-%dT%H:%M:%S.%LZ\" as the default format but accepts a variety of formats and attempts to parse the dateString if possible.\n       */\n      format?: ResolvesToString<S>;\n\n      /**\n       * The time zone to use to format the date.\n       */\n      timezone?: ResolvesToString<S>;\n\n      /**\n       * The value to return if the date is null or missing.\n       * If unspecified, $dateToString returns null if the date is null or missing.\n       */\n      onNull?: Expression<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$dateTrunc` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/dateTrunc/}\n   */\n  export interface $dateTrunc<S> {\n    /**\n     * Truncates a date.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/dateTrunc/}\n     */\n    $dateTrunc: {\n      /**\n       * The date to truncate, specified in UTC. The date can be any expression that resolves to a Date, a Timestamp, or an ObjectID.\n       */\n      date: ResolvesToDate<S> | ResolvesToTimestamp<S> | ResolvesToObjectId<S>;\n\n      /**\n       * The unit of time, specified as an expression that must resolve to one of these strings: year, quarter, week, month, day, hour, minute, second.\n       * Together, binSize and unit specify the time period used in the $dateTrunc calculation.\n       */\n      unit: TimeUnit;\n\n      /**\n       * The numeric time value, specified as an expression that must resolve to a positive non-zero number. Defaults to 1.\n       * Together, binSize and unit specify the time period used in the $dateTrunc calculation.\n       */\n      binSize?: ResolvesToNumber<S>;\n\n      /**\n       * The timezone to carry out the operation. $timezone must be a valid expression that resolves to a string formatted as either an Olson Timezone Identifier or a UTC Offset. If no timezone is provided, the result is displayed in UTC.\n       */\n      timezone?: ResolvesToString<S>;\n\n      /**\n       * The start of the week. Used when\n       * unit is week. Defaults to Sunday.\n       */\n      startOfWeek?: string;\n    };\n  }\n\n  /**\n   * A type describing the `$dayOfMonth` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/dayOfMonth/}\n   */\n  export interface $dayOfMonth<S> {\n    /**\n     * Returns the day of the month for a date as a number between 1 and 31.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/dayOfMonth/}\n     */\n    $dayOfMonth: {\n      /**\n       * The date to which the operator is applied. date must be a valid expression that resolves to a Date, a Timestamp, or an ObjectID.\n       */\n      date: ResolvesToDate<S> | ResolvesToTimestamp<S> | ResolvesToObjectId<S>;\n\n      /**\n       * The timezone of the operation result. timezone must be a valid expression that resolves to a string formatted as either an Olson Timezone Identifier or a UTC Offset. If no timezone is provided, the result is displayed in UTC.\n       */\n      timezone?: ResolvesToString<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$dayOfWeek` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/dayOfWeek/}\n   */\n  export interface $dayOfWeek<S> {\n    /**\n     * Returns the day of the week for a date as a number between 1 (Sunday) and 7 (Saturday).\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/dayOfWeek/}\n     */\n    $dayOfWeek: {\n      /**\n       * The date to which the operator is applied. date must be a valid expression that resolves to a Date, a Timestamp, or an ObjectID.\n       */\n      date: ResolvesToDate<S> | ResolvesToTimestamp<S> | ResolvesToObjectId<S>;\n\n      /**\n       * The timezone of the operation result. timezone must be a valid expression that resolves to a string formatted as either an Olson Timezone Identifier or a UTC Offset. If no timezone is provided, the result is displayed in UTC.\n       */\n      timezone?: ResolvesToString<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$dayOfYear` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/dayOfYear/}\n   */\n  export interface $dayOfYear<S> {\n    /**\n     * Returns the day of the year for a date as a number between 1 and 366 (leap year).\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/dayOfYear/}\n     */\n    $dayOfYear: {\n      /**\n       * The date to which the operator is applied. date must be a valid expression that resolves to a Date, a Timestamp, or an ObjectID.\n       */\n      date: ResolvesToDate<S> | ResolvesToTimestamp<S> | ResolvesToObjectId<S>;\n\n      /**\n       * The timezone of the operation result. timezone must be a valid expression that resolves to a string formatted as either an Olson Timezone Identifier or a UTC Offset. If no timezone is provided, the result is displayed in UTC.\n       */\n      timezone?: ResolvesToString<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$degreesToRadians` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/degreesToRadians/}\n   */\n  export interface $degreesToRadians<S> {\n    /**\n     * Converts a value from degrees to radians.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/degreesToRadians/}\n     */\n    $degreesToRadians: ResolvesToNumber<S>;\n  }\n\n  /**\n   * A type describing the `$divide` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/divide/}\n   */\n  export interface $divide<S> {\n    /**\n     * Returns the result of dividing the first number by the second. Accepts two argument expressions.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/divide/}\n     */\n    $divide: [\n      /**\n       * The first argument is the dividend, and the second argument is the divisor; i.e. the first argument is divided by the second argument.\n       */\n      dividend: ResolvesToNumber<S>,\n      divisor: ResolvesToNumber<S>,\n    ];\n  }\n\n  /**\n   * A type describing the `$eq` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/eq/}\n   */\n  export interface $eq<S> {\n    /**\n     * Returns true if the values are equivalent.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/eq/}\n     */\n    $eq: [expression1: Expression<S>, expression2: Expression<S>];\n  }\n\n  /**\n   * A type describing the `$exp` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/exp/}\n   */\n  export interface $exp<S> {\n    /**\n     * Raises e to the specified exponent.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/exp/}\n     */\n    $exp: ResolvesToNumber<S>;\n  }\n\n  /**\n   * A type describing the `$filter` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/filter/}\n   */\n  export interface $filter<S> {\n    /**\n     * Selects a subset of the array to return an array with only the elements that match the filter condition.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/filter/}\n     */\n    $filter: {\n      input: ResolvesToArray<S>;\n\n      /**\n       * An expression that resolves to a boolean value used to determine if an element should be included in the output array. The expression references each element of the input array individually with the variable name specified in as.\n       */\n      cond: ResolvesToBool<S>;\n\n      /**\n       * A name for the variable that represents each individual element of the input array. If no name is specified, the variable name defaults to this.\n       */\n      as?: string;\n\n      /**\n       * A number expression that restricts the number of matching array elements that $filter returns. You cannot specify a limit less than 1. The matching array elements are returned in the order they appear in the input array.\n       * If the specified limit is greater than the number of matching array elements, $filter returns all matching array elements. If the limit is null, $filter returns all matching array elements.\n       */\n      limit?: ResolvesToInt<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$first` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/first/}\n   */\n  export interface $first<S> {\n    /**\n     * Returns the result of an expression for the first document in an array.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/first/}\n     */\n    $first: ResolvesToArray<S>;\n  }\n\n  /**\n   * A type describing the `$firstN` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/firstN-array-element/}\n   */\n  export interface $firstN<S> {\n    /**\n     * Returns a specified number of elements from the beginning of an array.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/firstN-array-element/}\n     */\n    $firstN: {\n      /**\n       * An expression that resolves to a positive integer. The integer specifies the number of array elements that $firstN returns.\n       */\n      n: ResolvesToInt<S>;\n\n      /**\n       * An expression that resolves to the array from which to return n elements.\n       */\n      input: ResolvesToArray<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$floor` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/floor/}\n   */\n  export interface $floor<S> {\n    /**\n     * Returns the largest integer less than or equal to the specified number.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/floor/}\n     */\n    $floor: ResolvesToNumber<S>;\n  }\n\n  /**\n   * A type describing the `$function` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/function/}\n   */\n  export interface $function<S> {\n    /**\n     * Defines a custom function.\n     * New in MongoDB 4.4.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/function/}\n     */\n    $function: {\n      /**\n       * The function definition. You can specify the function definition as either BSON\\JavaScript or string.\n       * function(arg1, arg2, ...) { ... }\n       */\n      body: Javascript;\n\n      /**\n       * Arguments passed to the function body. If the body function does not take an argument, you can specify an empty array [ ].\n       */\n      args: unknown[];\n      lang: string;\n    };\n  }\n\n  /**\n   * A type describing the `$getField` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/getField/}\n   */\n  export interface $getField<S> {\n    /**\n     * Returns the value of a specified field from a document. You can use $getField to retrieve the value of fields with names that contain periods (.) or start with dollar signs ($).\n     * New in MongoDB 5.0.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/getField/}\n     */\n    $getField: {\n      /**\n       * Field in the input object for which you want to return a value. field can be any valid expression that resolves to a string constant.\n       * If field begins with a dollar sign ($), place the field name inside of a $literal expression to return its value.\n       */\n      field: ResolvesToString<S>;\n\n      /**\n       * Default: $$CURRENT\n       * A valid expression that contains the field for which you want to return a value. input must resolve to an object, missing, null, or undefined. If omitted, defaults to the document currently being processed in the pipeline ($$CURRENT).\n       */\n      input?: Expression<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$gt` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/gt/}\n   */\n  export interface $gt<S> {\n    /**\n     * Returns true if the first value is greater than the second.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/gt/}\n     */\n    $gt: [expression1: Expression<S>, expression2: Expression<S>];\n  }\n\n  /**\n   * A type describing the `$gte` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/gte/}\n   */\n  export interface $gte<S> {\n    /**\n     * Returns true if the first value is greater than or equal to the second.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/gte/}\n     */\n    $gte: [expression1: Expression<S>, expression2: Expression<S>];\n  }\n\n  /**\n   * A type describing the `$hour` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/hour/}\n   */\n  export interface $hour<S> {\n    /**\n     * Returns the hour for a date as a number between 0 and 23.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/hour/}\n     */\n    $hour: {\n      /**\n       * The date to which the operator is applied. date must be a valid expression that resolves to a Date, a Timestamp, or an ObjectID.\n       */\n      date: ResolvesToDate<S> | ResolvesToTimestamp<S> | ResolvesToObjectId<S>;\n\n      /**\n       * The timezone of the operation result. timezone must be a valid expression that resolves to a string formatted as either an Olson Timezone Identifier or a UTC Offset. If no timezone is provided, the result is displayed in UTC.\n       */\n      timezone?: ResolvesToString<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$ifNull` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/ifNull/}\n   */\n  export interface $ifNull<S> {\n    /**\n     * Returns either the non-null result of the first expression or the result of the second expression if the first expression results in a null result. Null result encompasses instances of undefined values or missing fields. Accepts two expressions as arguments. The result of the second expression can be null.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/ifNull/}\n     */\n    $ifNull: [...Expression<S>[]];\n  }\n\n  /**\n   * A type describing the `$in` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/in/}\n   */\n  export interface $in<S> {\n    /**\n     * Returns a boolean indicating whether a specified value is in an array.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/in/}\n     */\n    $in: [\n      /**\n       * Any valid expression expression.\n       */\n      expression: Expression<S>,\n\n      /**\n       * Any valid expression that resolves to an array.\n       */\n      array: ResolvesToArray<S>,\n    ];\n  }\n\n  /**\n   * A type describing the `$indexOfArray` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/indexOfArray/}\n   */\n  export interface $indexOfArray<S> {\n    /**\n     * Searches an array for an occurrence of a specified value and returns the array index of the first occurrence. Array indexes start at zero.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/indexOfArray/}\n     */\n    $indexOfArray: [\n      /**\n       * Can be any valid expression as long as it resolves to an array.\n       * If the array expression resolves to a value of null or refers to a field that is missing, $indexOfArray returns null.\n       * If the array expression does not resolve to an array or null nor refers to a missing field, $indexOfArray returns an error.\n       */\n      array: ResolvesToArray<S>,\n      search: Expression<S>,\n\n      /**\n       * An integer, or a number that can be represented as integers (such as 2.0), that specifies the starting index position for the search. Can be any valid expression that resolves to a non-negative integral number.\n       * If unspecified, the starting index position for the search is the beginning of the string.\n       */\n      start?: ResolvesToInt<S>,\n\n      /**\n       * An integer, or a number that can be represented as integers (such as 2.0), that specifies the ending index position for the search. Can be any valid expression that resolves to a non-negative integral number. If you specify a <end> index value, you should also specify a <start> index value; otherwise, $indexOfArray uses the <end> value as the <start> index value instead of the <end> value.\n       * If unspecified, the ending index position for the search is the end of the string.\n       */\n      end?: ResolvesToInt<S>,\n    ];\n  }\n\n  /**\n   * A type describing the `$indexOfBytes` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/indexOfBytes/}\n   */\n  export interface $indexOfBytes<S> {\n    /**\n     * Searches a string for an occurrence of a substring and returns the UTF-8 byte index of the first occurrence. If the substring is not found, returns -1.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/indexOfBytes/}\n     */\n    $indexOfBytes: [\n      /**\n       * Can be any valid expression as long as it resolves to a string.\n       * If the string expression resolves to a value of null or refers to a field that is missing, $indexOfBytes returns null.\n       * If the string expression does not resolve to a string or null nor refers to a missing field, $indexOfBytes returns an error.\n       */\n      string: ResolvesToString<S>,\n\n      /**\n       * Can be any valid expression as long as it resolves to a string.\n       */\n      substring: ResolvesToString<S>,\n\n      /**\n       * An integer, or a number that can be represented as integers (such as 2.0), that specifies the starting index position for the search. Can be any valid expression that resolves to a non-negative integral number.\n       * If unspecified, the starting index position for the search is the beginning of the string.\n       */\n      start?: ResolvesToInt<S>,\n\n      /**\n       * An integer, or a number that can be represented as integers (such as 2.0), that specifies the ending index position for the search. Can be any valid expression that resolves to a non-negative integral number. If you specify a <end> index value, you should also specify a <start> index value; otherwise, $indexOfArray uses the <end> value as the <start> index value instead of the <end> value.\n       * If unspecified, the ending index position for the search is the end of the string.\n       */\n      end?: ResolvesToInt<S>,\n    ];\n  }\n\n  /**\n   * A type describing the `$indexOfCP` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/indexOfCP/}\n   */\n  export interface $indexOfCP<S> {\n    /**\n     * Searches a string for an occurrence of a substring and returns the UTF-8 code point index of the first occurrence. If the substring is not found, returns -1\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/indexOfCP/}\n     */\n    $indexOfCP: [\n      /**\n       * Can be any valid expression as long as it resolves to a string.\n       * If the string expression resolves to a value of null or refers to a field that is missing, $indexOfCP returns null.\n       * If the string expression does not resolve to a string or null nor refers to a missing field, $indexOfCP returns an error.\n       */\n      string: ResolvesToString<S>,\n\n      /**\n       * Can be any valid expression as long as it resolves to a string.\n       */\n      substring: ResolvesToString<S>,\n\n      /**\n       * An integer, or a number that can be represented as integers (such as 2.0), that specifies the starting index position for the search. Can be any valid expression that resolves to a non-negative integral number.\n       * If unspecified, the starting index position for the search is the beginning of the string.\n       */\n      start?: ResolvesToInt<S>,\n\n      /**\n       * An integer, or a number that can be represented as integers (such as 2.0), that specifies the ending index position for the search. Can be any valid expression that resolves to a non-negative integral number. If you specify a <end> index value, you should also specify a <start> index value; otherwise, $indexOfArray uses the <end> value as the <start> index value instead of the <end> value.\n       * If unspecified, the ending index position for the search is the end of the string.\n       */\n      end?: ResolvesToInt<S>,\n    ];\n  }\n\n  /**\n   * A type describing the `$isArray` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/isArray/}\n   */\n  export interface $isArray<S> {\n    /**\n     * Determines if the operand is an array. Returns a boolean.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/isArray/}\n     */\n    $isArray: [expression: Expression<S>];\n  }\n\n  /**\n   * A type describing the `$isNumber` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/isNumber/}\n   */\n  export interface $isNumber<S> {\n    /**\n     * Returns boolean true if the specified expression resolves to an integer, decimal, double, or long.\n     * Returns boolean false if the expression resolves to any other BSON type, null, or a missing field.\n     * New in MongoDB 4.4.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/isNumber/}\n     */\n    $isNumber: Expression<S>;\n  }\n\n  /**\n   * A type describing the `$isoDayOfWeek` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/isoDayOfWeek/}\n   */\n  export interface $isoDayOfWeek<S> {\n    /**\n     * Returns the weekday number in ISO 8601 format, ranging from 1 (for Monday) to 7 (for Sunday).\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/isoDayOfWeek/}\n     */\n    $isoDayOfWeek: {\n      /**\n       * The date to which the operator is applied. date must be a valid expression that resolves to a Date, a Timestamp, or an ObjectID.\n       */\n      date: ResolvesToDate<S> | ResolvesToTimestamp<S> | ResolvesToObjectId<S>;\n\n      /**\n       * The timezone of the operation result. timezone must be a valid expression that resolves to a string formatted as either an Olson Timezone Identifier or a UTC Offset. If no timezone is provided, the result is displayed in UTC.\n       */\n      timezone?: ResolvesToString<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$isoWeek` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/isoWeek/}\n   */\n  export interface $isoWeek<S> {\n    /**\n     * Returns the week number in ISO 8601 format, ranging from 1 to 53. Week numbers start at 1 with the week (Monday through Sunday) that contains the year's first Thursday.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/isoWeek/}\n     */\n    $isoWeek: {\n      /**\n       * The date to which the operator is applied. date must be a valid expression that resolves to a Date, a Timestamp, or an ObjectID.\n       */\n      date: ResolvesToDate<S> | ResolvesToTimestamp<S> | ResolvesToObjectId<S>;\n\n      /**\n       * The timezone of the operation result. timezone must be a valid expression that resolves to a string formatted as either an Olson Timezone Identifier or a UTC Offset. If no timezone is provided, the result is displayed in UTC.\n       */\n      timezone?: ResolvesToString<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$isoWeekYear` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/isoWeekYear/}\n   */\n  export interface $isoWeekYear<S> {\n    /**\n     * Returns the year number in ISO 8601 format. The year starts with the Monday of week 1 (ISO 8601) and ends with the Sunday of the last week (ISO 8601).\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/isoWeekYear/}\n     */\n    $isoWeekYear: {\n      /**\n       * The date to which the operator is applied. date must be a valid expression that resolves to a Date, a Timestamp, or an ObjectID.\n       */\n      date: ResolvesToDate<S> | ResolvesToTimestamp<S> | ResolvesToObjectId<S>;\n\n      /**\n       * The timezone of the operation result. timezone must be a valid expression that resolves to a string formatted as either an Olson Timezone Identifier or a UTC Offset. If no timezone is provided, the result is displayed in UTC.\n       */\n      timezone?: ResolvesToString<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$last` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/last/}\n   */\n  export interface $last<S> {\n    /**\n     * Returns the result of an expression for the last document in an array.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/last/}\n     */\n    $last: ResolvesToArray<S>;\n  }\n\n  /**\n   * A type describing the `$lastN` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/lastN/#array-operator}\n   */\n  export interface $lastN<S> {\n    /**\n     * Returns a specified number of elements from the end of an array.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/lastN/#array-operator}\n     */\n    $lastN: {\n      /**\n       * An expression that resolves to a positive integer. The integer specifies the number of array elements that $firstN returns.\n       */\n      n: ResolvesToInt<S>;\n\n      /**\n       * An expression that resolves to the array from which to return n elements.\n       */\n      input: ResolvesToArray<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$let` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/let/}\n   */\n  export interface $let<S> {\n    /**\n     * Defines variables for use within the scope of a subexpression and returns the result of the subexpression. Accepts named parameters.\n     * Accepts any number of argument expressions.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/let/}\n     */\n    $let: {\n      /**\n       * Assignment block for the variables accessible in the in expression. To assign a variable, specify a string for the variable name and assign a valid expression for the value.\n       * The variable assignments have no meaning outside the in expression, not even within the vars block itself.\n       */\n      vars: ExpressionMap<S>;\n\n      /**\n       * The expression to evaluate.\n       */\n      in: Expression<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$literal` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/literal/}\n   */\n  export interface $literal<S> {\n    /**\n     * Return a value without parsing. Use for values that the aggregation pipeline may interpret as an expression. For example, use a $literal expression to a string that starts with a dollar sign ($) to avoid parsing as a field path.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/literal/}\n     */\n    $literal: any;\n  }\n\n  /**\n   * A type describing the `$ln` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/ln/}\n   */\n  export interface $ln<S> {\n    /**\n     * Calculates the natural log of a number.\n     * $ln is equivalent to $log: [ <number>, Math.E ] expression, where Math.E is a JavaScript representation for Euler's number e.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/ln/}\n     */\n    $ln: ResolvesToNumber<S>;\n  }\n\n  /**\n   * A type describing the `$log` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/log/}\n   */\n  export interface $log<S> {\n    /**\n     * Calculates the log of a number in the specified base.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/log/}\n     */\n    $log: [\n      /**\n       * Any valid expression as long as it resolves to a non-negative number.\n       */\n      number: ResolvesToNumber<S>,\n\n      /**\n       * Any valid expression as long as it resolves to a positive number greater than 1.\n       */\n      base: ResolvesToNumber<S>,\n    ];\n  }\n\n  /**\n   * A type describing the `$log10` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/log10/}\n   */\n  export interface $log10<S> {\n    /**\n     * Calculates the log base 10 of a number.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/log10/}\n     */\n    $log10: ResolvesToNumber<S>;\n  }\n\n  /**\n   * A type describing the `$lt` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/lt/}\n   */\n  export interface $lt<S> {\n    /**\n     * Returns true if the first value is less than the second.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/lt/}\n     */\n    $lt: [expression1: Expression<S>, expression2: Expression<S>];\n  }\n\n  /**\n   * A type describing the `$lte` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/lte/}\n   */\n  export interface $lte<S> {\n    /**\n     * Returns true if the first value is less than or equal to the second.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/lte/}\n     */\n    $lte: [expression1: Expression<S>, expression2: Expression<S>];\n  }\n\n  /**\n   * A type describing the `$ltrim` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/ltrim/}\n   */\n  export interface $ltrim<S> {\n    /**\n     * Removes whitespace or the specified characters from the beginning of a string.\n     * New in MongoDB 4.0.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/ltrim/}\n     */\n    $ltrim: {\n      /**\n       * The string to trim. The argument can be any valid expression that resolves to a string.\n       */\n      input: ResolvesToString<S>;\n\n      /**\n       * The character(s) to trim from the beginning of the input.\n       * The argument can be any valid expression that resolves to a string. The $ltrim operator breaks down the string into individual UTF code point to trim from input.\n       * If unspecified, $ltrim removes whitespace characters, including the null character.\n       */\n      chars?: ResolvesToString<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$map` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/map/}\n   */\n  export interface $map<S> {\n    /**\n     * Applies a subexpression to each element of an array and returns the array of resulting values in order. Accepts named parameters.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/map/}\n     */\n    $map: {\n      /**\n       * An expression that resolves to an array.\n       */\n      input: ResolvesToArray<S>;\n\n      /**\n       * A name for the variable that represents each individual element of the input array. If no name is specified, the variable name defaults to this.\n       */\n      as?: ResolvesToString<S>;\n\n      /**\n       * An expression that is applied to each element of the input array. The expression references each element individually with the variable name specified in as.\n       */\n      in: Expression<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$max` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/max/}\n   */\n  export interface $max<S> {\n    /**\n     * Returns the maximum value that results from applying an expression to each document.\n     * Changed in MongoDB 5.0: Available in the $setWindowFields stage.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/max/}\n     */\n    $max: [...Expression<S>[]];\n  }\n\n  /**\n   * A type describing the `$maxN` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/maxN-array-element/}\n   */\n  export interface $maxN<S> {\n    /**\n     * Returns the n largest values in an array. Distinct from the $maxN accumulator.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/maxN-array-element/}\n     */\n    $maxN: {\n      /**\n       * An expression that resolves to the array from which to return the maximal n elements.\n       */\n      input: ResolvesToArray<S>;\n\n      /**\n       * An expression that resolves to a positive integer. The integer specifies the number of array elements that $maxN returns.\n       */\n      n: ResolvesToInt<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$median` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/median/}\n   */\n  export interface $median<S> {\n    /**\n     * Returns an approximation of the median, the 50th percentile, as a scalar value.\n     * New in MongoDB 7.0.\n     * This operator is available as an accumulator in these stages:\n     * $group\n     * $setWindowFields\n     * It is also available as an aggregation expression.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/median/}\n     */\n    $median: {\n      /**\n       * $median calculates the 50th percentile value of this data. input must be a field name or an expression that evaluates to a numeric type. If the expression cannot be converted to a numeric type, the $median calculation ignores it.\n       */\n      input: ResolvesToNumber<S> | ResolvesToNumber<S>[];\n\n      /**\n       * The method that mongod uses to calculate the 50th percentile value. The method must be 'approximate'.\n       */\n      method: AccumulatorPercentile;\n    };\n  }\n\n  /**\n   * A type describing the `$mergeObjects` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/mergeObjects/}\n   */\n  export interface $mergeObjects<S> {\n    /**\n     * Combines multiple documents into a single document.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/mergeObjects/}\n     */\n    $mergeObjects: [\n      /**\n       * Any valid expression that resolves to a document.\n       */\n      ...ResolvesToObject<S>[],\n    ];\n  }\n\n  /**\n   * A type describing the `$meta` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/meta/}\n   */\n  export interface $meta<S> {\n    /**\n     * Access available per-document metadata related to the aggregation operation.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/meta/}\n     */\n    $meta: string;\n  }\n\n  /**\n   * A type describing the `$millisecond` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/millisecond/}\n   */\n  export interface $millisecond<S> {\n    /**\n     * Returns the milliseconds of a date as a number between 0 and 999.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/millisecond/}\n     */\n    $millisecond: {\n      /**\n       * The date to which the operator is applied. date must be a valid expression that resolves to a Date, a Timestamp, or an ObjectID.\n       */\n      date: ResolvesToDate<S> | ResolvesToTimestamp<S> | ResolvesToObjectId<S>;\n\n      /**\n       * The timezone of the operation result. timezone must be a valid expression that resolves to a string formatted as either an Olson Timezone Identifier or a UTC Offset. If no timezone is provided, the result is displayed in UTC.\n       */\n      timezone?: ResolvesToString<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$min` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/min/}\n   */\n  export interface $min<S> {\n    /**\n     * Returns the minimum value that results from applying an expression to each document.\n     * Changed in MongoDB 5.0: Available in the $setWindowFields stage.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/min/}\n     */\n    $min: [...Expression<S>[]];\n  }\n\n  /**\n   * A type describing the `$minN` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/minN-array-element/}\n   */\n  export interface $minN<S> {\n    /**\n     * Returns the n smallest values in an array. Distinct from the $minN accumulator.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/minN-array-element/}\n     */\n    $minN: {\n      /**\n       * An expression that resolves to the array from which to return the maximal n elements.\n       */\n      input: ResolvesToArray<S>;\n\n      /**\n       * An expression that resolves to a positive integer. The integer specifies the number of array elements that $maxN returns.\n       */\n      n: ResolvesToInt<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$minute` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/minute/}\n   */\n  export interface $minute<S> {\n    /**\n     * Returns the minute for a date as a number between 0 and 59.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/minute/}\n     */\n    $minute: {\n      /**\n       * The date to which the operator is applied. date must be a valid expression that resolves to a Date, a Timestamp, or an ObjectID.\n       */\n      date: ResolvesToDate<S> | ResolvesToTimestamp<S> | ResolvesToObjectId<S>;\n\n      /**\n       * The timezone of the operation result. timezone must be a valid expression that resolves to a string formatted as either an Olson Timezone Identifier or a UTC Offset. If no timezone is provided, the result is displayed in UTC.\n       */\n      timezone?: ResolvesToString<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$mod` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/mod/}\n   */\n  export interface $mod<S> {\n    /**\n     * Returns the remainder of the first number divided by the second. Accepts two argument expressions.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/mod/}\n     */\n    $mod: [\n      /**\n       * The first argument is the dividend, and the second argument is the divisor; i.e. first argument is divided by the second argument.\n       */\n      dividend: ResolvesToNumber<S>,\n      divisor: ResolvesToNumber<S>,\n    ];\n  }\n\n  /**\n   * A type describing the `$month` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/month/}\n   */\n  export interface $month<S> {\n    /**\n     * Returns the month for a date as a number between 1 (January) and 12 (December).\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/month/}\n     */\n    $month: {\n      /**\n       * The date to which the operator is applied. date must be a valid expression that resolves to a Date, a Timestamp, or an ObjectID.\n       */\n      date: ResolvesToDate<S> | ResolvesToTimestamp<S> | ResolvesToObjectId<S>;\n\n      /**\n       * The timezone of the operation result. timezone must be a valid expression that resolves to a string formatted as either an Olson Timezone Identifier or a UTC Offset. If no timezone is provided, the result is displayed in UTC.\n       */\n      timezone?: ResolvesToString<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$multiply` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/multiply/}\n   */\n  export interface $multiply<S> {\n    /**\n     * Multiplies numbers to return the product. Accepts any number of argument expressions.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/multiply/}\n     */\n    $multiply: [\n      /**\n       * The arguments can be any valid expression as long as they resolve to numbers.\n       * Starting in MongoDB 6.1 you can optimize the $multiply operation. To improve performance, group references at the end of the argument list.\n       */\n      ...ResolvesToNumber<S>[],\n    ];\n  }\n\n  /**\n   * A type describing the `$ne` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/ne/}\n   */\n  export interface $ne<S> {\n    /**\n     * Returns true if the values are not equivalent.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/ne/}\n     */\n    $ne: [expression1: Expression<S>, expression2: Expression<S>];\n  }\n\n  /**\n   * A type describing the `$not` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/not/}\n   */\n  export interface $not<S> {\n    /**\n     * Returns the boolean value that is the opposite of its argument expression. Accepts a single argument expression.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/not/}\n     */\n    $not: [expression: Expression<S> | ResolvesToBool<S>];\n  }\n\n  /**\n   * A type describing the `$objectToArray` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/objectToArray/}\n   */\n  export interface $objectToArray<S> {\n    /**\n     * Converts a document to an array of documents representing key-value pairs.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/objectToArray/}\n     */\n    $objectToArray: ResolvesToObject<S>;\n  }\n\n  /**\n   * A type describing the `$or` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/or/}\n   */\n  export interface $or<S> {\n    /**\n     * Returns true when any of its expressions evaluates to true. Accepts any number of argument expressions.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/or/}\n     */\n    $or: [...(Expression<S> | ResolvesToBool<S>)[]];\n  }\n\n  /**\n   * A type describing the `$percentile` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/percentile/}\n   */\n  export interface $percentile<S> {\n    /**\n     * Returns an array of scalar values that correspond to specified percentile values.\n     * New in MongoDB 7.0.\n     * This operator is available as an accumulator in these stages:\n     * $group\n     * $setWindowFields\n     * It is also available as an aggregation expression.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/percentile/}\n     */\n    $percentile: {\n      /**\n       * $percentile calculates the percentile values of this data. input must be a field name or an expression that evaluates to a numeric type. If the expression cannot be converted to a numeric type, the $percentile calculation ignores it.\n       */\n      input: ResolvesToNumber<S> | ResolvesToNumber<S>[];\n\n      /**\n       * $percentile calculates a percentile value for each element in p. The elements represent percentages and must evaluate to numeric values in the range 0.0 to 1.0, inclusive.\n       * $percentile returns results in the same order as the elements in p.\n       */\n      p: ResolvesToArray<S>;\n\n      /**\n       * The method that mongod uses to calculate the percentile value. The method must be 'approximate'.\n       */\n      method: AccumulatorPercentile;\n    };\n  }\n\n  /**\n   * A type describing the `$pow` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/pow/}\n   */\n  export interface $pow<S> {\n    /**\n     * Raises a number to the specified exponent.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/pow/}\n     */\n    $pow: [number: ResolvesToNumber<S>, exponent: ResolvesToNumber<S>];\n  }\n\n  /**\n   * A type describing the `$radiansToDegrees` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/radiansToDegrees/}\n   */\n  export interface $radiansToDegrees<S> {\n    /**\n     * Converts a value from radians to degrees.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/radiansToDegrees/}\n     */\n    $radiansToDegrees: ResolvesToNumber<S>;\n  }\n\n  /**\n   * A type describing the `$rand` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/rand/}\n   */\n  export interface $rand<S> {\n    /**\n     * Returns a random float between 0 and 1\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/rand/}\n     */\n    $rand: Record<string, never>;\n  }\n\n  /**\n   * A type describing the `$range` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/range/}\n   */\n  export interface $range<S> {\n    /**\n     * Outputs an array containing a sequence of integers according to user-defined inputs.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/range/}\n     */\n    $range: [\n      /**\n       * An integer that specifies the start of the sequence. Can be any valid expression that resolves to an integer.\n       */\n      start: ResolvesToInt<S>,\n\n      /**\n       * An integer that specifies the exclusive upper limit of the sequence. Can be any valid expression that resolves to an integer.\n       */\n      end: ResolvesToInt<S>,\n\n      /**\n       * An integer that specifies the increment value. Can be any valid expression that resolves to a non-zero integer. Defaults to 1.\n       */\n      step?: ResolvesToInt<S>,\n    ];\n  }\n\n  /**\n   * A type describing the `$reduce` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/reduce/}\n   */\n  export interface $reduce<S> {\n    /**\n     * Applies an expression to each element in an array and combines them into a single value.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/reduce/}\n     */\n    $reduce: {\n      /**\n       * Can be any valid expression that resolves to an array.\n       * If the argument resolves to a value of null or refers to a missing field, $reduce returns null.\n       * If the argument does not resolve to an array or null nor refers to a missing field, $reduce returns an error.\n       */\n      input: ResolvesToArray<S>;\n\n      /**\n       * The initial cumulative value set before in is applied to the first element of the input array.\n       */\n      initialValue: Expression<S>;\n\n      /**\n       * A valid expression that $reduce applies to each element in the input array in left-to-right order. Wrap the input value with $reverseArray to yield the equivalent of applying the combining expression from right-to-left.\n       * During evaluation of the in expression, two variables will be available:\n       * - value is the variable that represents the cumulative value of the expression.\n       * - this is the variable that refers to the element being processed.\n       */\n      in:\n        | Expression<\n            S & {\n              /**\n               * The variable that represents the cumulative value of the expression.\n               */\n              $this: any;\n\n              /**\n               * The variable that refers to the element being processed.\n               */\n              $value: any;\n            }\n          >\n        | ExpressionMap<\n            S & {\n              /**\n               * The variable that represents the cumulative value of the expression.\n               */\n              $this: any;\n\n              /**\n               * The variable that refers to the element being processed.\n               */\n              $value: any;\n            }\n          >;\n    };\n  }\n\n  /**\n   * A type describing the `$regexFind` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/regexFind/}\n   */\n  export interface $regexFind<S> {\n    /**\n     * Applies a regular expression (regex) to a string and returns information on the first matched substring.\n     * New in MongoDB 4.2.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/regexFind/}\n     */\n    $regexFind: {\n      /**\n       * The string on which you wish to apply the regex pattern. Can be a string or any valid expression that resolves to a string.\n       */\n      input: ResolvesToString<S>;\n\n      /**\n       * The regex pattern to apply. Can be any valid expression that resolves to either a string or regex pattern /<pattern>/. When using the regex /<pattern>/, you can also specify the regex options i and m (but not the s or x options)\n       */\n      regex: ResolvesToString<S> | Regex;\n      options?: string;\n    };\n  }\n\n  /**\n   * A type describing the `$regexFindAll` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/regexFindAll/}\n   */\n  export interface $regexFindAll<S> {\n    /**\n     * Applies a regular expression (regex) to a string and returns information on the all matched substrings.\n     * New in MongoDB 4.2.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/regexFindAll/}\n     */\n    $regexFindAll: {\n      /**\n       * The string on which you wish to apply the regex pattern. Can be a string or any valid expression that resolves to a string.\n       */\n      input: ResolvesToString<S>;\n\n      /**\n       * The regex pattern to apply. Can be any valid expression that resolves to either a string or regex pattern /<pattern>/. When using the regex /<pattern>/, you can also specify the regex options i and m (but not the s or x options)\n       */\n      regex: ResolvesToString<S> | Regex;\n      options?: string;\n    };\n  }\n\n  /**\n   * A type describing the `$regexMatch` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/regexMatch/}\n   */\n  export interface $regexMatch<S> {\n    /**\n     * Applies a regular expression (regex) to a string and returns a boolean that indicates if a match is found or not.\n     * New in MongoDB 4.2.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/regexMatch/}\n     */\n    $regexMatch: {\n      /**\n       * The string on which you wish to apply the regex pattern. Can be a string or any valid expression that resolves to a string.\n       */\n      input: ResolvesToString<S>;\n\n      /**\n       * The regex pattern to apply. Can be any valid expression that resolves to either a string or regex pattern /<pattern>/. When using the regex /<pattern>/, you can also specify the regex options i and m (but not the s or x options)\n       */\n      regex: ResolvesToString<S> | Regex;\n      options?: string;\n    };\n  }\n\n  /**\n   * A type describing the `$replaceAll` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/replaceAll/}\n   */\n  export interface $replaceAll<S> {\n    /**\n     * Replaces all instances of a search string in an input string with a replacement string.\n     * $replaceAll is both case-sensitive and diacritic-sensitive, and ignores any collation present on a collection.\n     * New in MongoDB 4.4.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/replaceAll/}\n     */\n    $replaceAll: {\n      /**\n       * The string on which you wish to apply the find. Can be any valid expression that resolves to a string or a null. If input refers to a field that is missing, $replaceAll returns null.\n       */\n      input: ResolvesToString<S> | ResolvesToNull<S>;\n\n      /**\n       * The string to search for within the given input. Can be any valid expression that resolves to a string or a null. If find refers to a field that is missing, $replaceAll returns null.\n       */\n      find: ResolvesToString<S> | ResolvesToNull<S>;\n\n      /**\n       * The string to use to replace all matched instances of find in input. Can be any valid expression that resolves to a string or a null.\n       */\n      replacement: ResolvesToString<S> | ResolvesToNull<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$replaceOne` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/replaceOne/}\n   */\n  export interface $replaceOne<S> {\n    /**\n     * Replaces the first instance of a matched string in a given input.\n     * New in MongoDB 4.4.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/replaceOne/}\n     */\n    $replaceOne: {\n      /**\n       * The string on which you wish to apply the find. Can be any valid expression that resolves to a string or a null. If input refers to a field that is missing, $replaceAll returns null.\n       */\n      input: ResolvesToString<S> | ResolvesToNull<S>;\n\n      /**\n       * The string to search for within the given input. Can be any valid expression that resolves to a string or a null. If find refers to a field that is missing, $replaceAll returns null.\n       */\n      find: ResolvesToString<S> | ResolvesToNull<S>;\n\n      /**\n       * The string to use to replace all matched instances of find in input. Can be any valid expression that resolves to a string or a null.\n       */\n      replacement: ResolvesToString<S> | ResolvesToNull<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$reverseArray` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/reverseArray/}\n   */\n  export interface $reverseArray<S> {\n    /**\n     * Returns an array with the elements in reverse order.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/reverseArray/}\n     */\n    $reverseArray: ResolvesToArray<S>;\n  }\n\n  /**\n   * A type describing the `$round` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/round/}\n   */\n  export interface $round<S> {\n    /**\n     * Rounds a number to a whole integer or to a specified decimal place.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/round/}\n     */\n    $round: [\n      /**\n       * Can be any valid expression that resolves to a number. Specifically, the expression must resolve to an integer, double, decimal, or long.\n       * $round returns an error if the expression resolves to a non-numeric data type.\n       */\n      number: ResolvesToNumber<S>,\n\n      /**\n       * Can be any valid expression that resolves to an integer between -20 and 100, exclusive.\n       */\n      place?: ResolvesToInt<S>,\n    ];\n  }\n\n  /**\n   * A type describing the `$rtrim` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/rtrim/}\n   */\n  export interface $rtrim<S> {\n    /**\n     * Removes whitespace characters, including null, or the specified characters from the end of a string.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/rtrim/}\n     */\n    $rtrim: {\n      /**\n       * The string to trim. The argument can be any valid expression that resolves to a string.\n       */\n      input: ResolvesToString<S>;\n\n      /**\n       * The character(s) to trim from the beginning of the input.\n       * The argument can be any valid expression that resolves to a string. The $ltrim operator breaks down the string into individual UTF code point to trim from input.\n       * If unspecified, $ltrim removes whitespace characters, including the null character.\n       */\n      chars?: ResolvesToString<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$second` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/second/}\n   */\n  export interface $second<S> {\n    /**\n     * Returns the seconds for a date as a number between 0 and 60 (leap seconds).\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/second/}\n     */\n    $second: {\n      /**\n       * The date to which the operator is applied. date must be a valid expression that resolves to a Date, a Timestamp, or an ObjectID.\n       */\n      date: ResolvesToDate<S> | ResolvesToTimestamp<S> | ResolvesToObjectId<S>;\n\n      /**\n       * The timezone of the operation result. timezone must be a valid expression that resolves to a string formatted as either an Olson Timezone Identifier or a UTC Offset. If no timezone is provided, the result is displayed in UTC.\n       */\n      timezone?: ResolvesToString<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$setDifference` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/setDifference/}\n   */\n  export interface $setDifference<S> {\n    /**\n     * Returns a set with elements that appear in the first set but not in the second set; i.e. performs a relative complement of the second set relative to the first. Accepts exactly two argument expressions.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/setDifference/}\n     */\n    $setDifference: [\n      /**\n       * The arguments can be any valid expression as long as they each resolve to an array.\n       */\n      expression1: ResolvesToArray<S>,\n\n      /**\n       * The arguments can be any valid expression as long as they each resolve to an array.\n       */\n      expression2: ResolvesToArray<S>,\n    ];\n  }\n\n  /**\n   * A type describing the `$setEquals` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/setEquals/}\n   */\n  export interface $setEquals<S> {\n    /**\n     * Returns true if the input sets have the same distinct elements. Accepts two or more argument expressions.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/setEquals/}\n     */\n    $setEquals: [...ResolvesToArray<S>[]];\n  }\n\n  /**\n   * A type describing the `$setField` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/setField/}\n   */\n  export interface $setField<S> {\n    /**\n     * Adds, updates, or removes a specified field in a document. You can use $setField to add, update, or remove fields with names that contain periods (.) or start with dollar signs ($).\n     * New in MongoDB 5.0.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/setField/}\n     */\n    $setField: {\n      /**\n       * Field in the input object that you want to add, update, or remove. field can be any valid expression that resolves to a string constant.\n       */\n      field: ResolvesToString<S>;\n\n      /**\n       * Document that contains the field that you want to add or update. input must resolve to an object, missing, null, or undefined.\n       */\n      input: ResolvesToObject<S>;\n\n      /**\n       * The value that you want to assign to field. value can be any valid expression.\n       * Set to $$REMOVE to remove field from the input document.\n       */\n      value: Expression<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$setIntersection` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/setIntersection/}\n   */\n  export interface $setIntersection<S> {\n    /**\n     * Returns a set with elements that appear in all of the input sets. Accepts any number of argument expressions.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/setIntersection/}\n     */\n    $setIntersection: [...ResolvesToArray<S>[]];\n  }\n\n  /**\n   * A type describing the `$setIsSubset` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/setIsSubset/}\n   */\n  export interface $setIsSubset<S> {\n    /**\n     * Returns true if all elements of the first set appear in the second set, including when the first set equals the second set; i.e. not a strict subset. Accepts exactly two argument expressions.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/setIsSubset/}\n     */\n    $setIsSubset: [\n      expression1: ResolvesToArray<S>,\n      expression2: ResolvesToArray<S>,\n    ];\n  }\n\n  /**\n   * A type describing the `$setUnion` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/setUnion/}\n   */\n  export interface $setUnion<S> {\n    /**\n     * Returns a set with elements that appear in any of the input sets.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/setUnion/}\n     */\n    $setUnion: [...ResolvesToArray<S>[]];\n  }\n\n  /**\n   * A type describing the `$sin` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/sin/}\n   */\n  export interface $sin<S> {\n    /**\n     * Returns the sine of a value that is measured in radians.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/sin/}\n     */\n    $sin: ResolvesToNumber<S>;\n  }\n\n  /**\n   * A type describing the `$sinh` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/sinh/}\n   */\n  export interface $sinh<S> {\n    /**\n     * Returns the hyperbolic sine of a value that is measured in radians.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/sinh/}\n     */\n    $sinh: ResolvesToNumber<S>;\n  }\n\n  /**\n   * A type describing the `$size` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/size/}\n   */\n  export interface $size<S> {\n    /**\n     * Returns the number of elements in the array. Accepts a single expression as argument.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/size/}\n     */\n    $size: ResolvesToArray<S>;\n  }\n\n  /**\n   * A type describing the `$slice` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/slice/}\n   */\n  export interface $slice<S> {\n    /**\n     * Returns a subset of an array.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/slice/}\n     */\n    $slice:\n      | [\n          /**\n           * Any valid expression as long as it resolves to an array.\n           */\n          expression: ResolvesToArray<S>,\n\n          /**\n           * Any valid expression as long as it resolves to an integer. If position is specified, n must resolve to a positive integer.\n           * If positive, $slice returns up to the first n elements in the array. If the position is specified, $slice returns the first n elements starting from the position.\n           * If negative, $slice returns up to the last n elements in the array. n cannot resolve to a negative number if <position> is specified.\n           */\n          n: ResolvesToInt<S>,\n        ]\n      | [\n          /**\n           * Any valid expression as long as it resolves to an array.\n           */\n          expression: ResolvesToArray<S>,\n\n          /**\n           * Any valid expression as long as it resolves to an integer.\n           * If positive, $slice determines the starting position from the start of the array. If position is greater than the number of elements, the $slice returns an empty array.\n           * If negative, $slice determines the starting position from the end of the array. If the absolute value of the <position> is greater than the number of elements, the starting position is the start of the array.\n           */\n          position: ResolvesToInt<S>,\n\n          /**\n           * Any valid expression as long as it resolves to an integer. If position is specified, n must resolve to a positive integer.\n           * If positive, $slice returns up to the first n elements in the array. If the position is specified, $slice returns the first n elements starting from the position.\n           * If negative, $slice returns up to the last n elements in the array. n cannot resolve to a negative number if <position> is specified.\n           */\n          n: ResolvesToInt<S>,\n        ];\n  }\n\n  /**\n   * A type describing the `$sortArray` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/sortArray/}\n   */\n  export interface $sortArray<S> {\n    /**\n     * Sorts the elements of an array.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/sortArray/}\n     */\n    $sortArray: {\n      /**\n       * The array to be sorted.\n       * The result is null if the expression: is missing, evaluates to null, or evaluates to undefined\n       * If the expression evaluates to any other non-array value, the document returns an error.\n       */\n      input: ResolvesToArray<S>;\n\n      /**\n       * The document specifies a sort ordering.\n       */\n      sortBy: Int | SortSpec | SortBy;\n    };\n  }\n\n  /**\n   * A type describing the `$split` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/split/}\n   */\n  export interface $split<S> {\n    /**\n     * Splits a string into substrings based on a delimiter. Returns an array of substrings. If the delimiter is not found within the string, returns an array containing the original string.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/split/}\n     */\n    $split: [\n      /**\n       * The string to be split. string expression can be any valid expression as long as it resolves to a string.\n       */\n      string: ResolvesToString<S>,\n\n      /**\n       * The delimiter to use when splitting the string expression. delimiter can be any valid expression as long as it resolves to a string.\n       */\n      delimiter: ResolvesToString<S>,\n    ];\n  }\n\n  /**\n   * A type describing the `$sqrt` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/sqrt/}\n   */\n  export interface $sqrt<S> {\n    /**\n     * Calculates the square root.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/sqrt/}\n     */\n    $sqrt: ResolvesToNumber<S>;\n  }\n\n  /**\n   * A type describing the `$stdDevPop` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/stdDevPop/}\n   */\n  export interface $stdDevPop<S> {\n    /**\n     * Calculates the population standard deviation of the input values. Use if the values encompass the entire population of data you want to represent and do not wish to generalize about a larger population. $stdDevPop ignores non-numeric values.\n     * If the values represent only a sample of a population of data from which to generalize about the population, use $stdDevSamp instead.\n     * Changed in MongoDB 5.0: Available in the $setWindowFields stage.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/stdDevPop/}\n     */\n    $stdDevPop: [...ResolvesToNumber<S>[]];\n  }\n\n  /**\n   * A type describing the `$stdDevSamp` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/stdDevSamp/}\n   */\n  export interface $stdDevSamp<S> {\n    /**\n     * Calculates the sample standard deviation of the input values. Use if the values encompass a sample of a population of data from which to generalize about the population. $stdDevSamp ignores non-numeric values.\n     * If the values represent the entire population of data or you do not wish to generalize about a larger population, use $stdDevPop instead.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/stdDevSamp/}\n     */\n    $stdDevSamp: [...ResolvesToNumber<S>[]];\n  }\n\n  /**\n   * A type describing the `$strLenBytes` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/strLenBytes/}\n   */\n  export interface $strLenBytes<S> {\n    /**\n     * Returns the number of UTF-8 encoded bytes in a string.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/strLenBytes/}\n     */\n    $strLenBytes: ResolvesToString<S>;\n  }\n\n  /**\n   * A type describing the `$strLenCP` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/strLenCP/}\n   */\n  export interface $strLenCP<S> {\n    /**\n     * Returns the number of UTF-8 code points in a string.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/strLenCP/}\n     */\n    $strLenCP: ResolvesToString<S>;\n  }\n\n  /**\n   * A type describing the `$strcasecmp` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/strcasecmp/}\n   */\n  export interface $strcasecmp<S> {\n    /**\n     * Performs case-insensitive string comparison and returns: 0 if two strings are equivalent, 1 if the first string is greater than the second, and -1 if the first string is less than the second.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/strcasecmp/}\n     */\n    $strcasecmp: [\n      expression1: ResolvesToString<S>,\n      expression2: ResolvesToString<S>,\n    ];\n  }\n\n  /**\n   * A type describing the `$substr` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/substr/}\n   */\n  export interface $substr<S> {\n    /**\n     * Deprecated. Use $substrBytes or $substrCP.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/substr/}\n     */\n    $substr: [\n      string: ResolvesToString<S>,\n\n      /**\n       * If start is a negative number, $substr returns an empty string \"\".\n       */\n      start: ResolvesToInt<S>,\n\n      /**\n       * If length is a negative number, $substr returns a substring that starts at the specified index and includes the rest of the string.\n       */\n      length: ResolvesToInt<S>,\n    ];\n  }\n\n  /**\n   * A type describing the `$substrBytes` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/substrBytes/}\n   */\n  export interface $substrBytes<S> {\n    /**\n     * Returns the substring of a string. Starts with the character at the specified UTF-8 byte index (zero-based) in the string and continues for the specified number of bytes.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/substrBytes/}\n     */\n    $substrBytes: [\n      string: ResolvesToString<S>,\n\n      /**\n       * If start is a negative number, $substr returns an empty string \"\".\n       */\n      start: ResolvesToInt<S>,\n\n      /**\n       * If length is a negative number, $substr returns a substring that starts at the specified index and includes the rest of the string.\n       */\n      length: ResolvesToInt<S>,\n    ];\n  }\n\n  /**\n   * A type describing the `$substrCP` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/substrCP/}\n   */\n  export interface $substrCP<S> {\n    /**\n     * Returns the substring of a string. Starts with the character at the specified UTF-8 code point (CP) index (zero-based) in the string and continues for the number of code points specified.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/substrCP/}\n     */\n    $substrCP: [\n      string: ResolvesToString<S>,\n\n      /**\n       * If start is a negative number, $substr returns an empty string \"\".\n       */\n      start: ResolvesToInt<S>,\n\n      /**\n       * If length is a negative number, $substr returns a substring that starts at the specified index and includes the rest of the string.\n       */\n      length: ResolvesToInt<S>,\n    ];\n  }\n\n  /**\n   * A type describing the `$subtract` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/subtract/}\n   */\n  export interface $subtract<S> {\n    /**\n     * Returns the result of subtracting the second value from the first. If the two values are numbers, return the difference. If the two values are dates, return the difference in milliseconds. If the two values are a date and a number in milliseconds, return the resulting date. Accepts two argument expressions. If the two values are a date and a number, specify the date argument first as it is not meaningful to subtract a date from a number.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/subtract/}\n     */\n    $subtract: [\n      expression1: ResolvesToNumber<S> | ResolvesToDate<S>,\n      expression2: ResolvesToNumber<S> | ResolvesToDate<S>,\n    ];\n  }\n\n  /**\n   * A type describing the `$sum` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/sum/}\n   */\n  export interface $sum<S> {\n    /**\n     * Returns a sum of numerical values. Ignores non-numeric values.\n     * Changed in MongoDB 5.0: Available in the $setWindowFields stage.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/sum/}\n     */\n    $sum: [...(ResolvesToNumber<S> | ResolvesToArray<S>)[]];\n  }\n\n  /**\n   * A type describing the `$switch` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/switch/}\n   */\n  export interface $switch<S> {\n    /**\n     * Evaluates a series of case expressions. When it finds an expression which evaluates to true, $switch executes a specified expression and breaks out of the control flow.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/switch/}\n     */\n    $switch: {\n      /**\n       * An array of control branch documents. Each branch is a document with the following fields:\n       * - case Can be any valid expression that resolves to a boolean. If the result is not a boolean, it is coerced to a boolean value. More information about how MongoDB evaluates expressions as either true or false can be found here.\n       * - then Can be any valid expression.\n       * The branches array must contain at least one branch document.\n       */\n      branches: unknown[];\n\n      /**\n       * The path to take if no branch case expression evaluates to true.\n       * Although optional, if default is unspecified and no branch case evaluates to true, $switch returns an error.\n       */\n      default?: Expression<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$tan` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/tan/}\n   */\n  export interface $tan<S> {\n    /**\n     * Returns the tangent of a value that is measured in radians.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/tan/}\n     */\n    $tan: ResolvesToNumber<S>;\n  }\n\n  /**\n   * A type describing the `$tanh` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/tanh/}\n   */\n  export interface $tanh<S> {\n    /**\n     * Returns the hyperbolic tangent of a value that is measured in radians.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/tanh/}\n     */\n    $tanh: ResolvesToNumber<S>;\n  }\n\n  /**\n   * A type describing the `$toBool` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/toBool/}\n   */\n  export interface $toBool<S> {\n    /**\n     * Converts value to a boolean.\n     * New in MongoDB 4.0.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/toBool/}\n     */\n    $toBool: Expression<S>;\n  }\n\n  /**\n   * A type describing the `$toDate` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/toDate/}\n   */\n  export interface $toDate<S> {\n    /**\n     * Converts value to a Date.\n     * New in MongoDB 4.0.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/toDate/}\n     */\n    $toDate: Expression<S>;\n  }\n\n  /**\n   * A type describing the `$toDecimal` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/toDecimal/}\n   */\n  export interface $toDecimal<S> {\n    /**\n     * Converts value to a Decimal128.\n     * New in MongoDB 4.0.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/toDecimal/}\n     */\n    $toDecimal: Expression<S>;\n  }\n\n  /**\n   * A type describing the `$toDouble` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/toDouble/}\n   */\n  export interface $toDouble<S> {\n    /**\n     * Converts value to a double.\n     * New in MongoDB 4.0.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/toDouble/}\n     */\n    $toDouble: Expression<S>;\n  }\n\n  /**\n   * A type describing the `$toHashedIndexKey` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/toHashedIndexKey/}\n   */\n  export interface $toHashedIndexKey<S> {\n    /**\n     * Computes and returns the hash value of the input expression using the same hash function that MongoDB uses to create a hashed index. A hash function maps a key or string to a fixed-size numeric value.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/toHashedIndexKey/}\n     */\n    $toHashedIndexKey: Expression<S>;\n  }\n\n  /**\n   * A type describing the `$toInt` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/toInt/}\n   */\n  export interface $toInt<S> {\n    /**\n     * Converts value to an integer.\n     * New in MongoDB 4.0.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/toInt/}\n     */\n    $toInt: Expression<S>;\n  }\n\n  /**\n   * A type describing the `$toLong` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/toLong/}\n   */\n  export interface $toLong<S> {\n    /**\n     * Converts value to a long.\n     * New in MongoDB 4.0.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/toLong/}\n     */\n    $toLong: Expression<S>;\n  }\n\n  /**\n   * A type describing the `$toLower` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/toLower/}\n   */\n  export interface $toLower<S> {\n    /**\n     * Converts a string to lowercase. Accepts a single argument expression.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/toLower/}\n     */\n    $toLower: ResolvesToString<S>;\n  }\n\n  /**\n   * A type describing the `$toObjectId` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/toObjectId/}\n   */\n  export interface $toObjectId<S> {\n    /**\n     * Converts value to an ObjectId.\n     * New in MongoDB 4.0.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/toObjectId/}\n     */\n    $toObjectId: Expression<S>;\n  }\n\n  /**\n   * A type describing the `$toString` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/toString/}\n   */\n  export interface $toString<S> {\n    /**\n     * Converts value to a string.\n     * New in MongoDB 4.0.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/toString/}\n     */\n    $toString: Expression<S>;\n  }\n\n  /**\n   * A type describing the `$toUpper` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/toUpper/}\n   */\n  export interface $toUpper<S> {\n    /**\n     * Converts a string to uppercase. Accepts a single argument expression.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/toUpper/}\n     */\n    $toUpper: ResolvesToString<S>;\n  }\n\n  /**\n   * A type describing the `$trim` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/trim/}\n   */\n  export interface $trim<S> {\n    /**\n     * Removes whitespace or the specified characters from the beginning and end of a string.\n     * New in MongoDB 4.0.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/trim/}\n     */\n    $trim: {\n      /**\n       * The string to trim. The argument can be any valid expression that resolves to a string.\n       */\n      input: ResolvesToString<S>;\n\n      /**\n       * The character(s) to trim from the beginning of the input.\n       * The argument can be any valid expression that resolves to a string. The $ltrim operator breaks down the string into individual UTF code point to trim from input.\n       * If unspecified, $ltrim removes whitespace characters, including the null character.\n       */\n      chars?: ResolvesToString<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$trunc` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/trunc/}\n   */\n  export interface $trunc<S> {\n    /**\n     * Truncates a number to a whole integer or to a specified decimal place.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/trunc/}\n     */\n    $trunc: [\n      /**\n       * Can be any valid expression that resolves to a number. Specifically, the expression must resolve to an integer, double, decimal, or long.\n       * $trunc returns an error if the expression resolves to a non-numeric data type.\n       */\n      number: ResolvesToNumber<S>,\n\n      /**\n       * Can be any valid expression that resolves to an integer between -20 and 100, exclusive. e.g. -20 < place < 100. Defaults to 0.\n       */\n      place?: ResolvesToInt<S>,\n    ];\n  }\n\n  /**\n   * A type describing the `$tsIncrement` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/tsIncrement/}\n   */\n  export interface $tsIncrement<S> {\n    /**\n     * Returns the incrementing ordinal from a timestamp as a long.\n     * New in MongoDB 5.1.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/tsIncrement/}\n     */\n    $tsIncrement: ResolvesToTimestamp<S>;\n  }\n\n  /**\n   * A type describing the `$tsSecond` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/tsSecond/}\n   */\n  export interface $tsSecond<S> {\n    /**\n     * Returns the seconds from a timestamp as a long.\n     * New in MongoDB 5.1.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/tsSecond/}\n     */\n    $tsSecond: ResolvesToTimestamp<S>;\n  }\n\n  /**\n   * A type describing the `$type` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/type/}\n   */\n  export interface $type<S> {\n    /**\n     * Return the BSON data type of the field.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/type/}\n     */\n    $type: Expression<S>;\n  }\n\n  /**\n   * A type describing the `$unsetField` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/unsetField/}\n   */\n  export interface $unsetField<S> {\n    /**\n     * You can use $unsetField to remove fields with names that contain periods (.) or that start with dollar signs ($).\n     * $unsetField is an alias for $setField using $$REMOVE to remove fields.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/unsetField/}\n     */\n    $unsetField: {\n      /**\n       * Field in the input object that you want to add, update, or remove. field can be any valid expression that resolves to a string constant.\n       */\n      field: ResolvesToString<S>;\n\n      /**\n       * Document that contains the field that you want to add or update. input must resolve to an object, missing, null, or undefined.\n       */\n      input: ResolvesToObject<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$week` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/week/}\n   */\n  export interface $week<S> {\n    /**\n     * Returns the week number for a date as a number between 0 (the partial week that precedes the first Sunday of the year) and 53 (leap year).\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/week/}\n     */\n    $week: {\n      /**\n       * The date to which the operator is applied. date must be a valid expression that resolves to a Date, a Timestamp, or an ObjectID.\n       */\n      date: ResolvesToDate<S> | ResolvesToTimestamp<S> | ResolvesToObjectId<S>;\n\n      /**\n       * The timezone of the operation result. timezone must be a valid expression that resolves to a string formatted as either an Olson Timezone Identifier or a UTC Offset. If no timezone is provided, the result is displayed in UTC.\n       */\n      timezone?: ResolvesToString<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$year` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/year/}\n   */\n  export interface $year<S> {\n    /**\n     * Returns the year for a date as a number (e.g. 2014).\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/year/}\n     */\n    $year: {\n      /**\n       * The date to which the operator is applied. date must be a valid expression that resolves to a Date, a Timestamp, or an ObjectID.\n       */\n      date: ResolvesToDate<S> | ResolvesToTimestamp<S> | ResolvesToObjectId<S>;\n\n      /**\n       * The timezone of the operation result. timezone must be a valid expression that resolves to a string formatted as either an Olson Timezone Identifier or a UTC Offset. If no timezone is provided, the result is displayed in UTC.\n       */\n      timezone?: ResolvesToString<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$zip` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/zip/}\n   */\n  export interface $zip<S> {\n    /**\n     * Merge two arrays together.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/zip/}\n     */\n    $zip: {\n      /**\n       * An array of expressions that resolve to arrays. The elements of these input arrays combine to form the arrays of the output array.\n       * If any of the inputs arrays resolves to a value of null or refers to a missing field, $zip returns null.\n       * If any of the inputs arrays does not resolve to an array or null nor refers to a missing field, $zip returns an error.\n       */\n      inputs: ResolvesToArray<S>;\n\n      /**\n       * A boolean which specifies whether the length of the longest array determines the number of arrays in the output array.\n       * The default value is false: the shortest array length determines the number of arrays in the output array.\n       */\n      useLongestLength?: boolean;\n\n      /**\n       * An array of default element values to use if the input arrays have different lengths. You must specify useLongestLength: true along with this field, or else $zip will return an error.\n       * If useLongestLength: true but defaults is empty or not specified, $zip uses null as the default value.\n       * If specifying a non-empty defaults, you must specify a default for each input array or else $zip will return an error.\n       */\n      defaults?: unknown[];\n    };\n  }\n}\nexport namespace Aggregation.Query {\n  /**\n   * A type describing the `$all` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/all/}\n   */\n  export interface $all<S> {\n    /**\n     * Matches arrays that contain all elements specified in the query.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/all/}\n     */\n    $all: [...FieldQuery<S>[]];\n  }\n\n  /**\n   * A type describing the `$and` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/and/}\n   */\n  export interface $and<S> {\n    /**\n     * Joins query clauses with a logical AND returns all documents that match the conditions of both clauses.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/and/}\n     */\n    $and: [Query<S>, ...Query<S>[]];\n  }\n\n  /**\n   * A type describing the `$bitsAllClear` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/bitsAllClear/}\n   */\n  export interface $bitsAllClear<S> {\n    /**\n     * Matches numeric or binary values in which a set of bit positions all have a value of 0.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/bitsAllClear/}\n     */\n    $bitsAllClear: (Int | bson.Binary) | (Int | bson.Binary)[];\n  }\n\n  /**\n   * A type describing the `$bitsAllSet` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/bitsAllSet/}\n   */\n  export interface $bitsAllSet<S> {\n    /**\n     * Matches numeric or binary values in which a set of bit positions all have a value of 1.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/bitsAllSet/}\n     */\n    $bitsAllSet: (Int | bson.Binary) | (Int | bson.Binary)[];\n  }\n\n  /**\n   * A type describing the `$bitsAnyClear` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/bitsAnyClear/}\n   */\n  export interface $bitsAnyClear<S> {\n    /**\n     * Matches numeric or binary values in which any bit from a set of bit positions has a value of 0.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/bitsAnyClear/}\n     */\n    $bitsAnyClear: (Int | bson.Binary) | (Int | bson.Binary)[];\n  }\n\n  /**\n   * A type describing the `$bitsAnySet` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/bitsAnySet/}\n   */\n  export interface $bitsAnySet<S> {\n    /**\n     * Matches numeric or binary values in which any bit from a set of bit positions has a value of 1.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/bitsAnySet/}\n     */\n    $bitsAnySet: (Int | bson.Binary) | (Int | bson.Binary)[];\n  }\n\n  /**\n   * A type describing the `$box` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/box/}\n   */\n  export interface $box<S> {\n    /**\n     * Specifies a rectangular box using legacy coordinate pairs for $geoWithin queries. The 2d index supports $box.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/box/}\n     */\n    $box: unknown[];\n  }\n\n  /**\n   * A type describing the `$center` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/center/}\n   */\n  export interface $center<S> {\n    /**\n     * Specifies a circle using legacy coordinate pairs to $geoWithin queries when using planar geometry. The 2d index supports $center.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/center/}\n     */\n    $center: unknown[];\n  }\n\n  /**\n   * A type describing the `$centerSphere` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/}\n   */\n  export interface $centerSphere<S> {\n    /**\n     * Specifies a circle using either legacy coordinate pairs or GeoJSON format for $geoWithin queries when using spherical geometry. The 2dsphere and 2d indexes support $centerSphere.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/centerSphere/}\n     */\n    $centerSphere: unknown[];\n  }\n\n  /**\n   * A type describing the `$elemMatch` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/elemMatch/}\n   */\n  export interface $elemMatch<S> {\n    /**\n     * The $elemMatch operator matches documents that contain an array field with at least one element that matches all the specified query criteria.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/elemMatch/}\n     */\n    $elemMatch: Query<S> | FieldQuery<S>;\n  }\n\n  /**\n   * A type describing the `$eq` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/eq/}\n   */\n  export interface $eq<S> {\n    /**\n     * Matches values that are equal to a specified value.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/eq/}\n     */\n    $eq: Expression<S>;\n  }\n\n  /**\n   * A type describing the `$exists` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/exists/}\n   */\n  export interface $exists<S> {\n    /**\n     * Matches documents that have the specified field.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/exists/}\n     */\n    $exists: boolean;\n  }\n\n  /**\n   * A type describing the `$expr` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/expr/}\n   */\n  export interface $expr<S> {\n    /**\n     * Allows use of aggregation expressions within the query language.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/expr/}\n     */\n    $expr: Expression<S>;\n  }\n\n  /**\n   * A type describing the `$geoIntersects` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/geoIntersects/}\n   */\n  export interface $geoIntersects<S> {\n    /**\n     * Selects geometries that intersect with a GeoJSON geometry. The 2dsphere index supports $geoIntersects.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/geoIntersects/}\n     */\n    $geoIntersects: Geometry<S> & {};\n  }\n\n  /**\n   * A type describing the `$geoWithin` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/}\n   */\n  export interface $geoWithin<S> {\n    /**\n     * Selects geometries within a bounding GeoJSON geometry. The 2dsphere and 2d indexes support $geoWithin.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/geoWithin/}\n     */\n    $geoWithin: Geometry<S> & {};\n  }\n\n  /**\n   * A type describing the `$geometry` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/geometry/}\n   */\n  export interface $geometry<S> {\n    /**\n     * Specifies a geometry in GeoJSON format to geospatial query operators.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/geometry/}\n     */\n    $geometry: {\n      type: string;\n      coordinates: unknown[];\n      crs?: Record<string, unknown>;\n    };\n  }\n\n  /**\n   * A type describing the `$gt` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/gt/}\n   */\n  export interface $gt<S> {\n    /**\n     * Matches values that are greater than a specified value.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/gt/}\n     */\n    $gt: any;\n  }\n\n  /**\n   * A type describing the `$gte` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/gte/}\n   */\n  export interface $gte<S> {\n    /**\n     * Matches values that are greater than or equal to a specified value.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/gte/}\n     */\n    $gte: any;\n  }\n\n  /**\n   * A type describing the `$in` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/in/}\n   */\n  export interface $in<S> {\n    /**\n     * Matches any of the values specified in an array.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/in/}\n     */\n    $in: unknown[];\n  }\n\n  /**\n   * A type describing the `$jsonSchema` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/jsonSchema/}\n   */\n  export interface $jsonSchema<S> {\n    /**\n     * Validate documents against the given JSON Schema.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/jsonSchema/}\n     */\n    $jsonSchema: Record<string, unknown>;\n  }\n\n  /**\n   * A type describing the `$lt` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/lt/}\n   */\n  export interface $lt<S> {\n    /**\n     * Matches values that are less than a specified value.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/lt/}\n     */\n    $lt: any;\n  }\n\n  /**\n   * A type describing the `$lte` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/lte/}\n   */\n  export interface $lte<S> {\n    /**\n     * Matches values that are less than or equal to a specified value.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/lte/}\n     */\n    $lte: any;\n  }\n\n  /**\n   * A type describing the `$maxDistance` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/maxDistance/}\n   */\n  export interface $maxDistance<S> {\n    /**\n     * Specifies a maximum distance to limit the results of $near and $nearSphere queries. The 2dsphere and 2d indexes support $maxDistance.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/maxDistance/}\n     */\n    $maxDistance: Number;\n  }\n\n  /**\n   * A type describing the `$minDistance` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/minDistance/}\n   */\n  export interface $minDistance<S> {\n    /**\n     * Specifies a minimum distance to limit the results of $near and $nearSphere queries. For use with 2dsphere index only.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/minDistance/}\n     */\n    $minDistance: Int | Double;\n  }\n\n  /**\n   * A type describing the `$mod` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/mod/}\n   */\n  export interface $mod<S> {\n    /**\n     * Performs a modulo operation on the value of a field and selects documents with a specified result.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/mod/}\n     */\n    $mod: [divisor: Number, remainder: Number];\n  }\n\n  /**\n   * A type describing the `$ne` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/ne/}\n   */\n  export interface $ne<S> {\n    /**\n     * Matches all values that are not equal to a specified value.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/ne/}\n     */\n    $ne: any;\n  }\n\n  /**\n   * A type describing the `$near` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/near/}\n   */\n  export interface $near<S> {\n    /**\n     * Returns geospatial objects in proximity to a point. Requires a geospatial index. The 2dsphere and 2d indexes support $near.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/near/}\n     */\n    $near: Geometry<S> & {\n      /**\n       * Distance in meters. Limits the results to those documents that are at most the specified distance from the center point.\n       */\n      $maxDistance?: Number;\n\n      /**\n       * Distance in meters. Limits the results to those documents that are at least the specified distance from the center point.\n       */\n      $minDistance?: Number;\n    };\n  }\n\n  /**\n   * A type describing the `$nearSphere` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/nearSphere/}\n   */\n  export interface $nearSphere<S> {\n    /**\n     * Returns geospatial objects in proximity to a point on a sphere. Requires a geospatial index. The 2dsphere and 2d indexes support $nearSphere.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/nearSphere/}\n     */\n    $nearSphere: Geometry<S> & {\n      /**\n       * Distance in meters.\n       */\n      $maxDistance?: Number;\n\n      /**\n       * Distance in meters. Limits the results to those documents that are at least the specified distance from the center point.\n       */\n      $minDistance?: Number;\n    };\n  }\n\n  /**\n   * A type describing the `$nin` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/nin/}\n   */\n  export interface $nin<S> {\n    /**\n     * Matches none of the values specified in an array.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/nin/}\n     */\n    $nin: unknown[];\n  }\n\n  /**\n   * A type describing the `$nor` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/nor/}\n   */\n  export interface $nor<S> {\n    /**\n     * Joins query clauses with a logical NOR returns all documents that fail to match both clauses.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/nor/}\n     */\n    $nor: [Query<S>, ...Query<S>[]];\n  }\n\n  /**\n   * A type describing the `$not` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/not/}\n   */\n  export interface $not<S> {\n    /**\n     * Inverts the effect of a query expression and returns documents that do not match the query expression.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/not/}\n     */\n    $not: FieldQuery<S>;\n  }\n\n  /**\n   * A type describing the `$or` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/or/}\n   */\n  export interface $or<S> {\n    /**\n     * Joins query clauses with a logical OR returns all documents that match the conditions of either clause.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/or/}\n     */\n    $or: [Query<S>, ...Query<S>[]];\n  }\n\n  /**\n   * A type describing the `$polygon` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/polygon/}\n   */\n  export interface $polygon<S> {\n    /**\n     * Specifies a polygon to using legacy coordinate pairs for $geoWithin queries. The 2d index supports $center.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/polygon/}\n     */\n    $polygon: unknown[];\n  }\n\n  /**\n   * A type describing the `$rand` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/rand/}\n   */\n  export interface $rand<S> {\n    /**\n     * Generates a random float between 0 and 1.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/rand/}\n     */\n    $rand: Record<string, never>;\n  }\n\n  /**\n   * A type describing the `$regex` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/regex/}\n   */\n  export interface $regex<S> {\n    /**\n     * Selects documents where values match a specified regular expression.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/regex/}\n     */\n    $regex: Regex;\n  }\n\n  /**\n   * A type describing the `$sampleRate` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/sampleRate/}\n   */\n  export interface $sampleRate<S> {\n    /**\n     * Randomly select documents at a given rate. Although the exact number of documents selected varies on each run, the quantity chosen approximates the sample rate expressed as a percentage of the total number of documents.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/sampleRate/}\n     */\n    $sampleRate: ResolvesToDouble<S>;\n  }\n\n  /**\n   * A type describing the `$size` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/size/}\n   */\n  export interface $size<S> {\n    /**\n     * Selects documents if the array field is a specified size.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/size/}\n     */\n    $size: Int;\n  }\n\n  /**\n   * A type describing the `$text` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/text/}\n   */\n  export interface $text<S> {\n    /**\n     * Performs text search.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/text/}\n     */\n    $text: {\n      /**\n       * A string of terms that MongoDB parses and uses to query the text index. MongoDB performs a logical OR search of the terms unless specified as a phrase.\n       */\n      $search: string;\n\n      /**\n       * The language that determines the list of stop words for the search and the rules for the stemmer and tokenizer. If not specified, the search uses the default language of the index.\n       * If you specify a default_language value of none, then the text index parses through each word in the field, including stop words, and ignores suffix stemming.\n       */\n      $language?: string;\n\n      /**\n       * A boolean flag to enable or disable case sensitive search. Defaults to false; i.e. the search defers to the case insensitivity of the text index.\n       */\n      $caseSensitive?: boolean;\n\n      /**\n       * A boolean flag to enable or disable diacritic sensitive search against version 3 text indexes. Defaults to false; i.e. the search defers to the diacritic insensitivity of the text index.\n       * Text searches against earlier versions of the text index are inherently diacritic sensitive and cannot be diacritic insensitive. As such, the $diacriticSensitive option has no effect with earlier versions of the text index.\n       */\n      $diacriticSensitive?: boolean;\n    };\n  }\n\n  /**\n   * A type describing the `$type` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/type/}\n   */\n  export interface $type<S> {\n    /**\n     * Selects documents if a field is of the specified type.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/type/}\n     */\n    $type: [...(Int | string)[]];\n  }\n\n  /**\n   * A type describing the `$where` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/where/}\n   */\n  export interface $where<S> {\n    /**\n     * Matches documents that satisfy a JavaScript expression.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/query/where/}\n     */\n    $where: Javascript;\n  }\n}\nexport namespace Aggregation.Search {\n  /**\n   * A type describing the `autocomplete` operator.\n   * @see {@link https://www.mongodb.com/docs/atlas/atlas-search/autocomplete/}\n   */\n  export interface Autocomplete<S> {\n    /**\n     * The autocomplete operator performs a search for a word or phrase that\n     * contains a sequence of characters from an incomplete input string. The\n     * fields that you intend to query with the autocomplete operator must be\n     * indexed with the autocomplete data type in the collection's index definition.\n     * @see {@link https://www.mongodb.com/docs/atlas/atlas-search/autocomplete/}\n     */\n    autocomplete: {\n      path: SearchPath<S>;\n      query: string;\n      tokenOrder?: string;\n      fuzzy?: Record<string, unknown>;\n      score?: SearchScore;\n    };\n  }\n\n  /**\n   * A type describing the `compound` operator.\n   * @see {@link https://www.mongodb.com/docs/atlas/atlas-search/compound/}\n   */\n  export interface Compound<S> {\n    /**\n     * The compound operator combines two or more operators into a single query.\n     * Each element of a compound query is called a clause, and each clause\n     * consists of one or more sub-queries.\n     * @see {@link https://www.mongodb.com/docs/atlas/atlas-search/compound/}\n     */\n    compound: {\n      must?: SearchOperator<S> | SearchOperator<S>[];\n      mustNot?: SearchOperator<S> | SearchOperator<S>[];\n      should?: SearchOperator<S> | SearchOperator<S>[];\n      filter?: SearchOperator<S> | SearchOperator<S>[];\n      minimumShouldMatch?: Int;\n      score?: SearchScore;\n    };\n  }\n\n  /**\n   * A type describing the `embeddedDocument` operator.\n   * @see {@link https://www.mongodb.com/docs/atlas/atlas-search/embedded-document/}\n   */\n  export interface EmbeddedDocument<S> {\n    /**\n     * The embeddedDocument operator is similar to $elemMatch operator.\n     * It constrains multiple query predicates to be satisfied from a single\n     * element of an array of embedded documents. embeddedDocument can be used only\n     * for queries over fields of the embeddedDocuments\n     * @see {@link https://www.mongodb.com/docs/atlas/atlas-search/embedded-document/}\n     */\n    embeddedDocument: {\n      path: SearchPath<S>;\n      operator: SearchOperator<S>;\n      score?: SearchScore;\n    };\n  }\n\n  /**\n   * A type describing the `equals` operator.\n   * @see {@link https://www.mongodb.com/docs/atlas/atlas-search/equals/}\n   */\n  export interface Equals<S> {\n    /**\n     * The equals operator checks whether a field matches a value you specify.\n     * @see {@link https://www.mongodb.com/docs/atlas/atlas-search/equals/}\n     */\n    equals: {\n      path: SearchPath<S>;\n      value:\n        | bson.Binary\n        | boolean\n        | Date\n        | bson.ObjectId\n        | null\n        | Number\n        | string;\n      score?: SearchScore;\n    };\n  }\n\n  /**\n   * A type describing the `exists` operator.\n   * @see {@link https://www.mongodb.com/docs/atlas/atlas-search/exists/}\n   */\n  export interface Exists<S> {\n    /**\n     * The exists operator tests if a path to a specified indexed field name exists in a document.\n     * @see {@link https://www.mongodb.com/docs/atlas/atlas-search/exists/}\n     */\n    exists: { path: SearchPath<S>; score?: SearchScore };\n  }\n\n  /**\n   * A type describing the `facet` operator.\n   * @see {@link https://www.mongodb.com/docs/atlas/atlas-search/facet/}\n   */\n  export interface Facet<S> {\n    /**\n     * The facet collector groups results by values or ranges in the specified\n     * faceted fields and returns the count for each of those groups.\n     * @see {@link https://www.mongodb.com/docs/atlas/atlas-search/facet/}\n     */\n    facet: { facets: Record<string, unknown>; operator?: SearchOperator<S> };\n  }\n\n  /**\n   * A type describing the `geoShape` operator.\n   * @see {@link https://www.mongodb.com/docs/atlas/atlas-search/geoShape/}\n   */\n  export interface GeoShape<S> {\n    /**\n     * The geoShape operator supports querying shapes with a relation to a given\n     * geometry if indexShapes is set to true in the index definition.\n     * @see {@link https://www.mongodb.com/docs/atlas/atlas-search/geoShape/}\n     */\n    geoShape: {\n      path: SearchPath<S>;\n      relation: string;\n      geometry: Geometry<S>;\n      score?: SearchScore;\n    };\n  }\n\n  /**\n   * A type describing the `geoWithin` operator.\n   * @see {@link https://www.mongodb.com/docs/atlas/atlas-search/geoWithin/}\n   */\n  export interface GeoWithin<S> {\n    /**\n     * The geoWithin operator supports querying geographic points within a given\n     * geometry. Only points are returned, even if indexShapes value is true in\n     * the index definition.\n     * @see {@link https://www.mongodb.com/docs/atlas/atlas-search/geoWithin/}\n     */\n    geoWithin: {\n      path: SearchPath<S>;\n      box?: Record<string, unknown>;\n      circle?: Record<string, unknown>;\n      geometry?: Geometry<S>;\n      score?: SearchScore;\n    };\n  }\n\n  /**\n   * A type describing the `in` operator.\n   * @see {@link https://www.mongodb.com/docs/atlas/atlas-search/in/}\n   */\n  export interface In<S> {\n    /**\n     * The in operator performs a search for an array of BSON values in a field.\n     * @see {@link https://www.mongodb.com/docs/atlas/atlas-search/in/}\n     */\n    in: { path: SearchPath<S>; value: any | any[]; score?: SearchScore };\n  }\n\n  /**\n   * A type describing the `moreLikeThis` operator.\n   * @see {@link https://www.mongodb.com/docs/atlas/atlas-search/moreLikeThis/}\n   */\n  export interface MoreLikeThis<S> {\n    /**\n     * The moreLikeThis operator returns documents similar to input documents.\n     * The moreLikeThis operator allows you to build features for your applications\n     * that display similar or alternative results based on one or more given documents.\n     * @see {@link https://www.mongodb.com/docs/atlas/atlas-search/moreLikeThis/}\n     */\n    moreLikeThis: {\n      like: Record<string, unknown> | Record<string, unknown>[];\n      score?: SearchScore;\n    };\n  }\n\n  /**\n   * A type describing the `near` operator.\n   * @see {@link https://www.mongodb.com/docs/atlas/atlas-search/near/}\n   */\n  export interface Near<S> {\n    /**\n     * The near operator supports querying and scoring numeric, date, and GeoJSON point values.\n     * @see {@link https://www.mongodb.com/docs/atlas/atlas-search/near/}\n     */\n    near: {\n      path: SearchPath<S>;\n      origin: Date | Number | Geometry<S>;\n      pivot: Number;\n      score?: SearchScore;\n    };\n  }\n\n  /**\n   * A type describing the `phrase` operator.\n   * @see {@link https://www.mongodb.com/docs/atlas/atlas-search/phrase/}\n   */\n  export interface Phrase<S> {\n    /**\n     * The phrase operator performs search for documents containing an ordered sequence of terms using the analyzer specified in the index configuration.\n     * @see {@link https://www.mongodb.com/docs/atlas/atlas-search/phrase/}\n     */\n    phrase: {\n      path: SearchPath<S>;\n      query: string | string[];\n      slop?: Int;\n      synonyms?: string;\n      score?: SearchScore;\n    };\n  }\n\n  /**\n   * A type describing the `queryString` operator.\n   * @see {@link https://www.mongodb.com/docs/atlas/atlas-search/queryString/}\n   */\n  export interface QueryString<S> {\n    queryString: { defaultPath: SearchPath<S>; query: string };\n  }\n\n  /**\n   * A type describing the `range` operator.\n   * @see {@link https://www.mongodb.com/docs/atlas/atlas-search/range/}\n   */\n  export interface Range<S> {\n    /**\n     * The range operator supports querying and scoring numeric, date, and string values.\n     * You can use this operator to find results that are within a given numeric, date, objectId, or letter (from the English alphabet) range.\n     * @see {@link https://www.mongodb.com/docs/atlas/atlas-search/range/}\n     */\n    range: {\n      path: SearchPath<S>;\n      gt?: Date | Number | string | bson.ObjectId;\n      gte?: Date | Number | string | bson.ObjectId;\n      lt?: Date | Number | string | bson.ObjectId;\n      lte?: Date | Number | string | bson.ObjectId;\n      score?: SearchScore;\n    };\n  }\n\n  /**\n   * A type describing the `regex` operator.\n   * @see {@link https://www.mongodb.com/docs/atlas/atlas-search/regex/}\n   */\n  export interface Regex<S> {\n    /**\n     * regex interprets the query field as a regular expression.\n     * regex is a term-level operator, meaning that the query field isn't analyzed.\n     * @see {@link https://www.mongodb.com/docs/atlas/atlas-search/regex/}\n     */\n    regex: {\n      path: SearchPath<S>;\n      query: string;\n      allowAnalyzedField?: boolean;\n      score?: SearchScore;\n    };\n  }\n\n  /**\n   * A type describing the `text` operator.\n   * @see {@link https://www.mongodb.com/docs/atlas/atlas-search/text/}\n   */\n  export interface Text<S> {\n    /**\n     * The text operator performs a full-text search using the analyzer that you specify in the index configuration.\n     * If you omit an analyzer, the text operator uses the default standard analyzer.\n     * @see {@link https://www.mongodb.com/docs/atlas/atlas-search/text/}\n     */\n    text: {\n      path: SearchPath<S>;\n      query: string;\n      fuzzy?: Record<string, unknown>;\n      matchCriteria?: string;\n      synonyms?: string;\n      score?: SearchScore;\n    };\n  }\n\n  /**\n   * A type describing the `wildcard` operator.\n   * @see {@link https://www.mongodb.com/docs/atlas/atlas-search/wildcard/}\n   */\n  export interface Wildcard<S> {\n    /**\n     * The wildcard operator enables queries which use special characters in the search string that can match any character.\n     * @see {@link https://www.mongodb.com/docs/atlas/atlas-search/wildcard/}\n     */\n    wildcard: {\n      path: SearchPath<S>;\n      query: string;\n      allowAnalyzedField?: boolean;\n      score?: SearchScore;\n    };\n  }\n}\nexport namespace Aggregation.Stage {\n  /**\n   * A type describing the `$addFields` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/addFields/}\n   */\n  export interface $addFields<S> {\n    /**\n     * Adds new fields to documents. Outputs documents that contain all existing fields from the input documents and newly added fields.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/addFields/}\n     */\n    $addFields: {\n      /**\n       * Specify the name of each field to add and set its value to an aggregation expression or an empty object.\n       */\n    } & { [expression: string]: Expression<S> };\n  }\n\n  /**\n   * A type describing the `$bucket` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/bucket/}\n   */\n  export interface $bucket<S> {\n    /**\n     * Categorizes incoming documents into groups, called buckets, based on a specified expression and bucket boundaries.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/bucket/}\n     */\n    $bucket: {\n      /**\n       * An expression to group documents by. To specify a field path, prefix the field name with a dollar sign $ and enclose it in quotes.\n       * Unless $bucket includes a default specification, each input document must resolve the groupBy field path or expression to a value that falls within one of the ranges specified by the boundaries.\n       */\n      groupBy: Expression<S>;\n\n      /**\n       * An array of values based on the groupBy expression that specify the boundaries for each bucket. Each adjacent pair of values acts as the inclusive lower boundary and the exclusive upper boundary for the bucket. You must specify at least two boundaries.\n       * The specified values must be in ascending order and all of the same type. The exception is if the values are of mixed numeric types, such as:\n       */\n      boundaries: unknown[];\n\n      /**\n       * A literal that specifies the _id of an additional bucket that contains all documents whose groupBy expression result does not fall into a bucket specified by boundaries.\n       * If unspecified, each input document must resolve the groupBy expression to a value within one of the bucket ranges specified by boundaries or the operation throws an error.\n       * The default value must be less than the lowest boundaries value, or greater than or equal to the highest boundaries value.\n       * The default value can be of a different type than the entries in boundaries.\n       */\n      default?: Expression<S>;\n\n      /**\n       * A document that specifies the fields to include in the output documents in addition to the _id field. To specify the field to include, you must use accumulator expressions.\n       * If you do not specify an output document, the operation returns a count field containing the number of documents in each bucket.\n       * If you specify an output document, only the fields specified in the document are returned; i.e. the count field is not returned unless it is explicitly included in the output document.\n       */\n      output?: Record<string, unknown>;\n    };\n  }\n\n  /**\n   * A type describing the `$bucketAuto` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/bucketAuto/}\n   */\n  export interface $bucketAuto<S> {\n    /**\n     * Categorizes incoming documents into a specific number of groups, called buckets, based on a specified expression. Bucket boundaries are automatically determined in an attempt to evenly distribute the documents into the specified number of buckets.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/bucketAuto/}\n     */\n    $bucketAuto: {\n      /**\n       * An expression to group documents by. To specify a field path, prefix the field name with a dollar sign $ and enclose it in quotes.\n       */\n      groupBy: Expression<S>;\n\n      /**\n       * A positive 32-bit integer that specifies the number of buckets into which input documents are grouped.\n       */\n      buckets: Int;\n\n      /**\n       * A document that specifies the fields to include in the output documents in addition to the _id field. To specify the field to include, you must use accumulator expressions.\n       * The default count field is not included in the output document when output is specified. Explicitly specify the count expression as part of the output document to include it.\n       */\n      output?: Record<string, unknown>;\n\n      /**\n       * A string that specifies the preferred number series to use to ensure that the calculated boundary edges end on preferred round numbers or their powers of 10.\n       * Available only if the all groupBy values are numeric and none of them are NaN.\n       */\n      granularity?: Granularity;\n    };\n  }\n\n  /**\n   * A type describing the `$changeStream` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/changeStream/}\n   */\n  export interface $changeStream<S> {\n    /**\n     * Returns a Change Stream cursor for the collection or database. This stage can only occur once in an aggregation pipeline and it must occur as the first stage.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/changeStream/}\n     */\n    $changeStream: {\n      /**\n       * A flag indicating whether the stream should report all changes that occur on the deployment, aside from those on internal databases or collections.\n       */\n      allChangesForCluster?: boolean;\n\n      /**\n       * Specifies whether change notifications include a copy of the full document when modified by update operations.\n       */\n      fullDocument?: FullDocument;\n\n      /**\n       * Valid values are \"off\", \"whenAvailable\", or \"required\". If set to \"off\", the \"fullDocumentBeforeChange\" field of the output document is always omitted. If set to \"whenAvailable\", the \"fullDocumentBeforeChange\" field will be populated with the pre-image of the document modified by the current change event if such a pre-image is available, and will be omitted otherwise. If set to \"required\", then the \"fullDocumentBeforeChange\" field is always populated and an exception is thrown if the pre-image is not              available.\n       */\n      fullDocumentBeforeChange?: FullDocumentBeforeChange;\n\n      /**\n       * Specifies a resume token as the logical starting point for the change stream. Cannot be used with startAfter or startAtOperationTime fields.\n       */\n      resumeAfter?: Int;\n\n      /**\n       * Specifies whether to include additional change events, such as such as DDL and index operations.\n       * New in MongoDB 6.0.\n       */\n      showExpandedEvents?: boolean;\n\n      /**\n       * Specifies a resume token as the logical starting point for the change stream. Cannot be used with resumeAfter or startAtOperationTime fields.\n       */\n      startAfter?: Record<string, unknown>;\n\n      /**\n       * Specifies a time as the logical starting point for the change stream. Cannot be used with resumeAfter or startAfter fields.\n       */\n      startAtOperationTime?: bson.Timestamp;\n    };\n  }\n\n  /**\n   * A type describing the `$changeStreamSplitLargeEvent` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/changeStreamSplitLargeEvent/}\n   */\n  export interface $changeStreamSplitLargeEvent<S> {\n    /**\n     * Splits large change stream events that exceed 16 MB into smaller fragments returned in a change stream cursor.\n     * You can only use $changeStreamSplitLargeEvent in a $changeStream pipeline and it must be the final stage in the pipeline.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/changeStreamSplitLargeEvent/}\n     */\n    $changeStreamSplitLargeEvent: Record<string, never>;\n  }\n\n  /**\n   * A type describing the `$collStats` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/collStats/}\n   */\n  export interface $collStats<S> {\n    /**\n     * Returns statistics regarding a collection or view.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/collStats/}\n     */\n    $collStats: {\n      latencyStats?: Record<string, unknown>;\n      storageStats?: Record<string, unknown>;\n      count?: Record<string, unknown>;\n      queryExecStats?: Record<string, unknown>;\n    };\n  }\n\n  /**\n   * A type describing the `$count` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/count/}\n   */\n  export interface $count<S> {\n    /**\n     * Returns a count of the number of documents at this stage of the aggregation pipeline.\n     * Distinct from the $count aggregation accumulator.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/count/}\n     */\n    $count: string;\n  }\n\n  /**\n   * A type describing the `$currentOp` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/currentOp/}\n   */\n  export interface $currentOp<S> {\n    /**\n     * Returns information on active and/or dormant operations for the MongoDB deployment. To run, use the db.aggregate() method.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/currentOp/}\n     */\n    $currentOp: {\n      allUsers?: boolean;\n      idleConnections?: boolean;\n      idleCursors?: boolean;\n      idleSessions?: boolean;\n      localOps?: boolean;\n    };\n  }\n\n  /**\n   * A type describing the `$densify` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/densify/}\n   */\n  export interface $densify<S> {\n    /**\n     * Creates new documents in a sequence of documents where certain values in a field are missing.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/densify/}\n     */\n    $densify: {\n      /**\n       * The field to densify. The values of the specified field must either be all numeric values or all dates.\n       * Documents that do not contain the specified field continue through the pipeline unmodified.\n       * To specify a <field> in an embedded document or in an array, use dot notation.\n       */\n      field: string;\n\n      /**\n       * The field(s) that will be used as the partition keys.\n       */\n      partitionByFields?: unknown[];\n\n      /**\n       * Specification for range based densification.\n       */\n      range: Range;\n    };\n  }\n\n  /**\n   * A type describing the `$documents` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/documents/}\n   */\n  export interface $documents<S> {\n    /**\n     * Returns literal documents from input values.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/documents/}\n     */\n    $documents: ResolvesToArray<S>;\n  }\n\n  /**\n   * A type describing the `$facet` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/facet/}\n   */\n  export interface $facet<S> {\n    /**\n     * Processes multiple aggregation pipelines within a single stage on the same set of input documents. Enables the creation of multi-faceted aggregations capable of characterizing data across multiple dimensions, or facets, in a single stage.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/facet/}\n     */\n    $facet: {} & { [facet: string]: Pipeline<S> };\n  }\n\n  /**\n   * A type describing the `$fill` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/fill/}\n   */\n  export interface $fill<S> {\n    /**\n     * Populates null and missing field values within documents.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/fill/}\n     */\n    $fill: {\n      /**\n       * Specifies an expression to group the documents. In the $fill stage, a group of documents is known as a partition.\n       * If you omit partitionBy and partitionByFields, $fill uses one partition for the entire collection.\n       * partitionBy and partitionByFields are mutually exclusive.\n       */\n      partitionBy?: Record<string, unknown> | string;\n\n      /**\n       * Specifies an array of fields as the compound key to group the documents. In the $fill stage, each group of documents is known as a partition.\n       * If you omit partitionBy and partitionByFields, $fill uses one partition for the entire collection.\n       * partitionBy and partitionByFields are mutually exclusive.\n       */\n      partitionByFields?: unknown[];\n\n      /**\n       * Specifies the field or fields to sort the documents within each partition. Uses the same syntax as the $sort stage.\n       */\n      sortBy?: SortBy;\n\n      /**\n       * Specifies an object containing each field for which to fill missing values. You can specify multiple fields in the output object.\n       * The object name is the name of the field to fill. The object value specifies how the field is filled.\n       */\n      output: Record<string, unknown>;\n    };\n  }\n\n  /**\n   * A type describing the `$geoNear` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/geoNear/}\n   */\n  export interface $geoNear<S> {\n    /**\n     * Returns an ordered stream of documents based on the proximity to a geospatial point. Incorporates the functionality of $match, $sort, and $limit for geospatial data. The output documents include an additional distance field and can include a location identifier field.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/geoNear/}\n     */\n    $geoNear: {\n      /**\n       * The output field that contains the calculated distance. To specify a field within an embedded document, use dot notation.\n       */\n      distanceField?: string;\n\n      /**\n       * The factor to multiply all distances returned by the query. For example, use the distanceMultiplier to convert radians, as returned by a spherical query, to kilometers by multiplying by the radius of the Earth.\n       */\n      distanceMultiplier?: Number;\n\n      /**\n       * This specifies the output field that identifies the location used to calculate the distance. This option is useful when a location field contains multiple locations. To specify a field within an embedded document, use dot notation.\n       */\n      includeLocs?: string;\n\n      /**\n       * Specify the geospatial indexed field to use when calculating the distance.\n       */\n      key?: string;\n\n      /**\n       * The maximum distance from the center point that the documents can be. MongoDB limits the results to those documents that fall within the specified distance from the center point.\n       * Specify the distance in meters if the specified point is GeoJSON and in radians if the specified point is legacy coordinate pairs.\n       */\n      maxDistance?: Number;\n\n      /**\n       * The minimum distance from the center point that the documents can be. MongoDB limits the results to those documents that fall outside the specified distance from the center point.\n       * Specify the distance in meters for GeoJSON data and in radians for legacy coordinate pairs.\n       */\n      minDistance?: Number;\n\n      /**\n       * The point for which to find the closest documents.\n       */\n      near: GeoPoint | ResolvesToObject<S>;\n\n      /**\n       * Limits the results to the documents that match the query. The query syntax is the usual MongoDB read operation query syntax.\n       * You cannot specify a $near predicate in the query field of the $geoNear stage.\n       */\n      query?: Query<S>;\n\n      /**\n       * Determines how MongoDB calculates the distance between two points:\n       * - When true, MongoDB uses $nearSphere semantics and calculates distances using spherical geometry.\n       * - When false, MongoDB uses $near semantics: spherical geometry for 2dsphere indexes and planar geometry for 2d indexes.\n       * Default: false.\n       */\n      spherical?: boolean;\n    };\n  }\n\n  /**\n   * A type describing the `$graphLookup` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/graphLookup/}\n   */\n  export interface $graphLookup<S> {\n    /**\n     * Performs a recursive search on a collection. To each output document, adds a new array field that contains the traversal results of the recursive search for that document.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/graphLookup/}\n     */\n    $graphLookup: {\n      /**\n       * Target collection for the $graphLookup operation to search, recursively matching the connectFromField to the connectToField. The from collection must be in the same database as any other collections used in the operation.\n       * Starting in MongoDB 5.1, the collection specified in the from parameter can be sharded.\n       */\n      from: string;\n\n      /**\n       * Expression that specifies the value of the connectFromField with which to start the recursive search. Optionally, startWith may be array of values, each of which is individually followed through the traversal process.\n       */\n      startWith: Expression<S> | Expression<S>[];\n\n      /**\n       * Field name whose value $graphLookup uses to recursively match against the connectToField of other documents in the collection. If the value is an array, each element is individually followed through the traversal process.\n       */\n      connectFromField: string;\n\n      /**\n       * Field name in other documents against which to match the value of the field specified by the connectFromField parameter.\n       */\n      connectToField: string;\n\n      /**\n       * Name of the array field added to each output document. Contains the documents traversed in the $graphLookup stage to reach the document.\n       */\n      as: string;\n\n      /**\n       * Non-negative integral number specifying the maximum recursion depth.\n       */\n      maxDepth?: Int;\n\n      /**\n       * Name of the field to add to each traversed document in the search path. The value of this field is the recursion depth for the document, represented as a NumberLong. Recursion depth value starts at zero, so the first lookup corresponds to zero depth.\n       */\n      depthField?: string;\n\n      /**\n       * A document specifying additional conditions for the recursive search. The syntax is identical to query filter syntax.\n       */\n      restrictSearchWithMatch?: Query<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$group` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/group/}\n   */\n  export interface $group<S> {\n    /**\n     * Groups input documents by a specified identifier expression and applies the accumulator expression(s), if specified, to each group. Consumes all input documents and outputs one document per each distinct group. The output documents only contain the identifier field and, if specified, accumulated fields.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/group/}\n     */\n    $group: RecordWithStaticFields<\n      {\n        /**\n         * The _id expression specifies the group key. If you specify an _id value of null, or any other constant value, the $group stage returns a single document that aggregates values across all of the input documents.\n         */\n        _id: Expression<S> | ExpressionMap<S>;\n      },\n      /**\n       * Computed using the accumulator operators.\n       */\n      Accumulator<S>\n    >;\n  }\n\n  /**\n   * A type describing the `$indexStats` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/indexStats/}\n   */\n  export interface $indexStats<S> {\n    /**\n     * Returns statistics regarding the use of each index for the collection.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/indexStats/}\n     */\n    $indexStats: Record<string, never>;\n  }\n\n  /**\n   * A type describing the `$limit` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/limit/}\n   */\n  export interface $limit<S> {\n    /**\n     * Passes the first n documents unmodified to the pipeline where n is the specified limit. For each input document, outputs either one document (for the first n documents) or zero documents (after the first n documents).\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/limit/}\n     */\n    $limit: Int;\n  }\n\n  /**\n   * A type describing the `$listLocalSessions` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/listLocalSessions/}\n   */\n  export interface $listLocalSessions<S> {\n    /**\n     * Lists all active sessions recently in use on the currently connected mongos or mongod instance. These sessions may have not yet propagated to the system.sessions collection.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/listLocalSessions/}\n     */\n    $listLocalSessions: {\n      /**\n       * Returns all sessions for the specified users. If running with access control, the authenticated user must have privileges with listSessions action on the cluster to list sessions for other users.\n       */\n      users?: unknown[];\n\n      /**\n       * Returns all sessions for all users. If running with access control, the authenticated user must have privileges with listSessions action on the cluster.\n       */\n      allUsers?: boolean;\n    };\n  }\n\n  /**\n   * A type describing the `$listSampledQueries` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/listSampledQueries/}\n   */\n  export interface $listSampledQueries<S> {\n    /**\n     * Lists sampled queries for all collections or a specific collection.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/listSampledQueries/}\n     */\n    $listSampledQueries: { namespace?: string };\n  }\n\n  /**\n   * A type describing the `$listSearchIndexes` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/listSearchIndexes/}\n   */\n  export interface $listSearchIndexes<S> {\n    /**\n     * Returns information about existing Atlas Search indexes on a specified collection.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/listSearchIndexes/}\n     */\n    $listSearchIndexes: {\n      /**\n       * The id of the index to return information about.\n       */\n      id?: string;\n\n      /**\n       * The name of the index to return information about.\n       */\n      name?: string;\n    };\n  }\n\n  /**\n   * A type describing the `$listSessions` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/listSessions/}\n   */\n  export interface $listSessions<S> {\n    /**\n     * Lists all sessions that have been active long enough to propagate to the system.sessions collection.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/listSessions/}\n     */\n    $listSessions: {\n      /**\n       * Returns all sessions for the specified users. If running with access control, the authenticated user must have privileges with listSessions action on the cluster to list sessions for other users.\n       */\n      users?: unknown[];\n\n      /**\n       * Returns all sessions for all users. If running with access control, the authenticated user must have privileges with listSessions action on the cluster.\n       */\n      allUsers?: boolean;\n    };\n  }\n\n  /**\n   * A type describing the `$lookup` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/lookup/}\n   */\n  export interface $lookup<S> {\n    /**\n     * Performs a left outer join to another collection in the same database to filter in documents from the \"joined\" collection for processing.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/lookup/}\n     */\n    $lookup: {\n      /**\n       * Specifies the collection in the same database to perform the join with.\n       * from is optional, you can use a $documents stage in a $lookup stage instead. For an example, see Use a $documents Stage in a $lookup Stage.\n       * Starting in MongoDB 5.1, the collection specified in the from parameter can be sharded.\n       */\n      from?: string;\n\n      /**\n       * Specifies the field from the documents input to the $lookup stage. $lookup performs an equality match on the localField to the foreignField from the documents of the from collection. If an input document does not contain the localField, the $lookup treats the field as having a value of null for matching purposes.\n       */\n      localField?: string;\n\n      /**\n       * Specifies the field from the documents in the from collection. $lookup performs an equality match on the foreignField to the localField from the input documents. If a document in the from collection does not contain the foreignField, the $lookup treats the value as null for matching purposes.\n       */\n      foreignField?: string;\n\n      /**\n       * Specifies variables to use in the pipeline stages. Use the variable expressions to access the fields from the joined collection's documents that are input to the pipeline.\n       */\n      let?: Record<string, unknown>;\n\n      /**\n       * Specifies the pipeline to run on the joined collection. The pipeline determines the resulting documents from the joined collection. To return all documents, specify an empty pipeline [].\n       * The pipeline cannot include the $out stage or the $merge stage. Starting in v6.0, the pipeline can contain the Atlas Search $search stage as the first stage inside the pipeline.\n       * The pipeline cannot directly access the joined document fields. Instead, define variables for the joined document fields using the let option and then reference the variables in the pipeline stages.\n       */\n      pipeline?: UntypedPipeline;\n\n      /**\n       * Specifies the name of the new array field to add to the input documents. The new array field contains the matching documents from the from collection. If the specified name already exists in the input document, the existing field is overwritten.\n       */\n      as: string;\n    };\n  }\n\n  /**\n   * A type describing the `$match` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/match/}\n   */\n  export interface $match<S> {\n    /**\n     * Filters the document stream to allow only matching documents to pass unmodified into the next pipeline stage. $match uses standard MongoDB queries. For each input document, outputs either one document (a match) or zero documents (no match).\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/match/}\n     */\n    $match: Query<S>;\n  }\n\n  /**\n   * A type describing the `$merge` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/merge/}\n   */\n  export interface $merge<S> {\n    /**\n     * Writes the resulting documents of the aggregation pipeline to a collection. The stage can incorporate (insert new documents, merge documents, replace documents, keep existing documents, fail the operation, process documents with a custom update pipeline) the results into an output collection. To use the $merge stage, it must be the last stage in the pipeline.\n     * New in MongoDB 4.2.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/merge/}\n     */\n    $merge: {\n      /**\n       * The output collection.\n       */\n      into: string | OutCollection;\n\n      /**\n       * Field or fields that act as a unique identifier for a document. The identifier determines if a results document matches an existing document in the output collection.\n       */\n      on?: string | string[];\n\n      /**\n       * Specifies variables for use in the whenMatched pipeline.\n       */\n      let?: Record<string, unknown>;\n\n      /**\n       * The behavior of $merge if a result document and an existing document in the collection have the same value for the specified on field(s).\n       */\n      whenMatched?: WhenMatched | UntypedPipeline;\n\n      /**\n       * The behavior of $merge if a result document does not match an existing document in the out collection.\n       */\n      whenNotMatched?: WhenNotMatched;\n    };\n  }\n\n  /**\n   * A type describing the `$out` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/out/}\n   */\n  export interface $out<S> {\n    /**\n     * Writes the resulting documents of the aggregation pipeline to a collection. To use the $out stage, it must be the last stage in the pipeline.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/out/}\n     */\n    $out: string | OutCollection;\n  }\n\n  /**\n   * A type describing the `$planCacheStats` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/planCacheStats/}\n   */\n  export interface $planCacheStats<S> {\n    /**\n     * Returns plan cache information for a collection.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/planCacheStats/}\n     */\n    $planCacheStats: Record<string, never>;\n  }\n\n  /**\n   * A type describing the `$project` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/project/}\n   */\n  export interface $project<S> {\n    /**\n     * Reshapes each document in the stream, such as by adding new fields or removing existing fields. For each input document, outputs one document.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/project/}\n     */\n    $project: {} & {\n      [specification: string]: Expression<S> | ExpressionMap<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$redact` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/redact/}\n   */\n  export interface $redact<S> {\n    /**\n     * Reshapes each document in the stream by restricting the content for each document based on information stored in the documents themselves. Incorporates the functionality of $project and $match. Can be used to implement field level redaction. For each input document, outputs either one or zero documents.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/redact/}\n     */\n    $redact: Expression<S>;\n  }\n\n  /**\n   * A type describing the `$replaceRoot` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/replaceRoot/}\n   */\n  export interface $replaceRoot<S> {\n    /**\n     * Replaces a document with the specified embedded document. The operation replaces all existing fields in the input document, including the _id field. Specify a document embedded in the input document to promote the embedded document to the top level.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/replaceRoot/}\n     */\n    $replaceRoot: { newRoot: ResolvesToObject<S> };\n  }\n\n  /**\n   * A type describing the `$replaceWith` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/replaceWith/}\n   */\n  export interface $replaceWith<S> {\n    /**\n     * Replaces a document with the specified embedded document. The operation replaces all existing fields in the input document, including the _id field. Specify a document embedded in the input document to promote the embedded document to the top level.\n     * Alias for $replaceRoot.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/replaceWith/}\n     */\n    $replaceWith: ResolvesToObject<S>;\n  }\n\n  /**\n   * A type describing the `$sample` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/sample/}\n   */\n  export interface $sample<S> {\n    /**\n     * Randomly selects the specified number of documents from its input.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/sample/}\n     */\n    $sample: {\n      /**\n       * The number of documents to randomly select.\n       */\n      size: Int;\n    };\n  }\n\n  /**\n   * A type describing the `$search` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/search/}\n   */\n  export interface $search<S> {\n    /**\n     * Performs a full-text search of the field or fields in an Atlas collection.\n     * NOTE: $search is only available for MongoDB Atlas clusters, and is not available for self-managed deployments.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/search/}\n     */\n    $search: SearchOperator<S> & {\n      /**\n       * Name of the Atlas Search index to use. If omitted, defaults to \"default\".\n       */\n      index?: string;\n\n      /**\n       * Specifies the highlighting options for displaying search terms in their original context.\n       */\n      highlight?: SearchHighlight<S>;\n\n      /**\n       * Parallelize search across segments on dedicated search nodes.\n       * If you don't have separate search nodes on your cluster,\n       * Atlas Search ignores this flag. If omitted, defaults to false.\n       */\n      concurrent?: boolean;\n\n      /**\n       * Document that specifies the count options for retrieving a count of the results.\n       */\n      count?: Record<string, unknown>;\n\n      /**\n       * Reference point for retrieving results. searchAfter returns documents starting immediately following the specified reference point.\n       */\n      searchAfter?: string;\n\n      /**\n       * Reference point for retrieving results. searchBefore returns documents starting immediately before the specified reference point.\n       */\n      searchBefore?: string;\n\n      /**\n       * Flag that specifies whether to retrieve a detailed breakdown of the score for the documents in the results. If omitted, defaults to false.\n       */\n      scoreDetails?: boolean;\n\n      /**\n       * Document that specifies the fields to sort the Atlas Search results by in ascending or descending order.\n       */\n      sort?: Record<string, unknown>;\n\n      /**\n       * Flag that specifies whether to perform a full document lookup on the backend database or return only stored source fields directly from Atlas Search.\n       */\n      returnStoredSource?: boolean;\n\n      /**\n       * Document that specifies the tracking option to retrieve analytics information on the search terms.\n       */\n      tracking?: Record<string, unknown>;\n    };\n  }\n\n  /**\n   * A type describing the `$searchMeta` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/searchMeta/}\n   */\n  export interface $searchMeta<S> {\n    /**\n     * Returns different types of metadata result documents for the Atlas Search query against an Atlas collection.\n     * NOTE: $searchMeta is only available for MongoDB Atlas clusters running MongoDB v4.4.9 or higher, and is not available for self-managed deployments.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/searchMeta/}\n     */\n    $searchMeta: SearchOperator<S> & {\n      /**\n       * Name of the Atlas Search index to use. If omitted, defaults to default.\n       */\n      index?: string;\n\n      /**\n       * Document that specifies the count options for retrieving a count of the results.\n       */\n      count?: Record<string, unknown>;\n    };\n  }\n\n  /**\n   * A type describing the `$set` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/set/}\n   */\n  export interface $set<S> {\n    /**\n     * Adds new fields to documents. Outputs documents that contain all existing fields from the input documents and newly added fields.\n     * Alias for $addFields.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/set/}\n     */\n    $set: {} & { [field: string]: Expression<S> };\n  }\n\n  /**\n   * A type describing the `$setWindowFields` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/setWindowFields/}\n   */\n  export interface $setWindowFields<S> {\n    /**\n     * Groups documents into windows and applies one or more operators to the documents in each window.\n     * New in MongoDB 5.0.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/setWindowFields/}\n     */\n    $setWindowFields: {\n      /**\n       * Specifies the field(s) to sort the documents by in the partition. Uses the same syntax as the $sort stage. Default is no sorting.\n       */\n      sortBy: SortBy;\n\n      /**\n       * Specifies the field(s) to append to the documents in the output returned by the $setWindowFields stage. Each field is set to the result returned by the window operator.\n       * A field can contain dots to specify embedded document fields and array fields. The semantics for the embedded document dotted notation in the $setWindowFields stage are the same as the $addFields and $set stages.\n       */\n      output: Record<string, unknown>;\n\n      /**\n       * Specifies an expression to group the documents. In the $setWindowFields stage, the group of documents is known as a partition. Default is one partition for the entire collection.\n       */\n      partitionBy?: Expression<S>;\n    };\n  }\n\n  /**\n   * A type describing the `$shardedDataDistribution` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/shardedDataDistribution/}\n   */\n  export interface $shardedDataDistribution<S> {\n    /**\n     * Provides data and size distribution information on sharded collections.\n     * New in MongoDB 6.0.3.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/shardedDataDistribution/}\n     */\n    $shardedDataDistribution: Record<string, never>;\n  }\n\n  /**\n   * A type describing the `$skip` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/skip/}\n   */\n  export interface $skip<S> {\n    /**\n     * Skips the first n documents where n is the specified skip number and passes the remaining documents unmodified to the pipeline. For each input document, outputs either zero documents (for the first n documents) or one document (if after the first n documents).\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/skip/}\n     */\n    $skip: Int;\n  }\n\n  /**\n   * A type describing the `$sort` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/sort/}\n   */\n  export interface $sort<S> {\n    /**\n     * Reorders the document stream by a specified sort key. Only the order changes; the documents remain unmodified. For each input document, outputs one document.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/sort/}\n     */\n    $sort: {} & { [sort: string]: Expression<S> | SortSpec };\n  }\n\n  /**\n   * A type describing the `$sortByCount` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/sortByCount/}\n   */\n  export interface $sortByCount<S> {\n    /**\n     * Groups incoming documents based on the value of a specified expression, then computes the count of documents in each distinct group.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/sortByCount/}\n     */\n    $sortByCount: Expression<S>;\n  }\n\n  /**\n   * A type describing the `$unionWith` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/unionWith/}\n   */\n  export interface $unionWith<S> {\n    /**\n     * Performs a union of two collections; i.e. combines pipeline results from two collections into a single result set.\n     * New in MongoDB 4.4.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/unionWith/}\n     */\n    $unionWith: {\n      /**\n       * The collection or view whose pipeline results you wish to include in the result set.\n       */\n      coll: string;\n\n      /**\n       * An aggregation pipeline to apply to the specified coll.\n       * The pipeline cannot include the $out and $merge stages. Starting in v6.0, the pipeline can contain the Atlas Search $search stage as the first stage inside the pipeline.\n       */\n      pipeline?: UntypedPipeline;\n    };\n  }\n\n  /**\n   * A type describing the `$unset` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/unset/}\n   */\n  export interface $unset<S> {\n    /**\n     * Removes or excludes fields from documents.\n     * Alias for $project stage that removes or excludes fields.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/unset/}\n     */\n    $unset: [...UnprefixedFieldPath<S>[]];\n  }\n\n  /**\n   * A type describing the `$unwind` operator.\n   * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/unwind/}\n   */\n  export interface $unwind<S> {\n    /**\n     * Deconstructs an array field from the input documents to output a document for each element. Each output document replaces the array with an element value. For each input document, outputs n documents where n is the number of array elements and can be zero for an empty array.\n     * @see {@link https://www.mongodb.com/docs/manual/reference/operator/aggregation/unwind/}\n     */\n    $unwind: {\n      /**\n       * Field path to an array field.\n       */\n      path: ArrayFieldPath<S>;\n\n      /**\n       * The name of a new field to hold the array index of the element. The name cannot start with a dollar sign $.\n       */\n      includeArrayIndex?: string;\n\n      /**\n       * If true, if the path is null, missing, or an empty array, $unwind outputs the document.\n       * If false, if path is null, missing, or an empty array, $unwind does not output a document.\n       * The default value is false.\n       */\n      preserveNullAndEmptyArrays?: boolean;\n    };\n  }\n\n  /**\n   * A type describing the `$vectorSearch` operator.\n   * @see {@link https://www.mongodb.com/docs/atlas/atlas-vector-search/vector-search-stage/}\n   */\n  export interface $vectorSearch<S> {\n    /**\n     * The $vectorSearch stage performs an ANN or ENN search on a vector in the specified field.\n     * @see {@link https://www.mongodb.com/docs/atlas/atlas-vector-search/vector-search-stage/}\n     */\n    $vectorSearch: {\n      /**\n       * Name of the Atlas Vector Search index to use.\n       */\n      index: string;\n\n      /**\n       * Number of documents to return in the results. This value can't exceed the value of numCandidates if you specify numCandidates.\n       */\n      limit: Int;\n\n      /**\n       * Indexed vector type field to search.\n       */\n      path: string;\n\n      /**\n       * Array of numbers that represent the query vector. The number type must match the indexed field value type.\n       */\n      queryVector: unknown[];\n\n      /**\n       * This is required if numCandidates is omitted. false to run ANN search. true to run ENN search.\n       */\n      exact?: boolean;\n\n      /**\n       * Any match query that compares an indexed field with a boolean, date, objectId, number (not decimals), string, or UUID to use as a pre-filter.\n       */\n      filter?: Query<S>;\n\n      /**\n       * This field is required if exact is false or omitted.\n       * Number of nearest neighbors to use during the search. Value must be less than or equal to (<=) 10000. You can't specify a number less than the number of documents to return (limit).\n       */\n      numCandidates?: Int;\n    };\n  }\n}\n\nexport type Int = number | bson.Int32;\nexport type Double = number | bson.Double;\nexport type Decimal = bson.Decimal128;\nexport type Regex = RegExp | bson.BSONRegExp;\nexport type Long = bigint | bson.Long;\nexport type Javascript = bson.Code | Function | string;\nexport type Geometry<S> =\n  | { type: 'Point'; coordinates: number[] }\n  | { type: 'MultiPoint'; coordinates: number[][] }\n  | { type: 'LineString'; coordinates: number[][] }\n  | { type: 'MultiLineString'; coordinates: number[][][] }\n  | { type: 'Polygon'; coordinates: number[][][] }\n  | { type: 'MultiPolygon'; coordinates: number[][][][] }\n  | Aggregation.Query.$box<S>\n  | Aggregation.Query.$center<S>\n  | Aggregation.Query.$centerSphere<S>\n  | Aggregation.Query.$geometry<S>\n  | Aggregation.Query.$polygon<S>;\nexport type Number = Int | Long | Double | Decimal;\nexport type BsonPrimitive =\n  | Number\n  | bson.Binary\n  | bson.ObjectId\n  | string\n  | boolean\n  | Date\n  | null\n  | Regex\n  | Javascript\n  | bson.Timestamp;\nexport type SearchPath<S> =\n  | UnprefixedFieldPath<S>\n  | UnprefixedFieldPath<S>[]\n  | { wildcard: string };\nexport type SearchScore = unknown;\nexport type Granularity = string;\nexport type FullDocument = string;\nexport type FullDocumentBeforeChange = string;\nexport type AccumulatorPercentile = string;\nexport type Range = unknown;\nexport type SortBy = unknown;\nexport type GeoPoint = unknown;\nexport type SortSpec = -1 | 1;\nexport type TimeUnit =\n  | 'year'\n  | 'quarter'\n  | 'month'\n  | 'week'\n  | 'day'\n  | 'hour'\n  | 'minute'\n  | 'second'\n  | 'millisecond';\nexport type OutCollection = unknown;\nexport type WhenMatched = string;\nexport type WhenNotMatched = string;\nexport type Expression<S> =\n  | ExpressionOperator<S>\n  | FieldPath<S>\n  | BsonPrimitive\n  | FieldExpression<S>\n  | FieldPath<S>[];\nexport type ExpressionMap<S> = {\n  [k: string]: Expression<S> | ExpressionMap<S>;\n};\nexport type Stage<S> =\n  | StageOperator<S>\n  | Aggregation.Stage.$addFields<S>\n  | Aggregation.Stage.$bucket<S>\n  | Aggregation.Stage.$bucketAuto<S>\n  | Aggregation.Stage.$changeStream<S>\n  | Aggregation.Stage.$changeStreamSplitLargeEvent<S>\n  | Aggregation.Stage.$collStats<S>\n  | Aggregation.Stage.$count<S>\n  | Aggregation.Stage.$currentOp<S>\n  | Aggregation.Stage.$densify<S>\n  | Aggregation.Stage.$documents<S>\n  | Aggregation.Stage.$facet<S>\n  | Aggregation.Stage.$fill<S>\n  | Aggregation.Stage.$geoNear<S>\n  | Aggregation.Stage.$graphLookup<S>\n  | Aggregation.Stage.$group<S>\n  | Aggregation.Stage.$indexStats<S>\n  | Aggregation.Stage.$limit<S>\n  | Aggregation.Stage.$listLocalSessions<S>\n  | Aggregation.Stage.$listSampledQueries<S>\n  | Aggregation.Stage.$listSearchIndexes<S>\n  | Aggregation.Stage.$listSessions<S>\n  | Aggregation.Stage.$lookup<S>\n  | Aggregation.Stage.$match<S>\n  | Aggregation.Stage.$merge<S>\n  | Aggregation.Stage.$out<S>\n  | Aggregation.Stage.$planCacheStats<S>\n  | Aggregation.Stage.$project<S>\n  | Aggregation.Stage.$redact<S>\n  | Aggregation.Stage.$replaceRoot<S>\n  | Aggregation.Stage.$replaceWith<S>\n  | Aggregation.Stage.$sample<S>\n  | Aggregation.Stage.$search<S>\n  | Aggregation.Stage.$searchMeta<S>\n  | Aggregation.Stage.$set<S>\n  | Aggregation.Stage.$setWindowFields<S>\n  | Aggregation.Stage.$shardedDataDistribution<S>\n  | Aggregation.Stage.$skip<S>\n  | Aggregation.Stage.$sort<S>\n  | Aggregation.Stage.$sortByCount<S>\n  | Aggregation.Stage.$unionWith<S>\n  | Aggregation.Stage.$unset<S>\n  | Aggregation.Stage.$unwind<S>\n  | Aggregation.Stage.$vectorSearch<S>;\nexport type Pipeline<S> = Stage<S>[];\nexport type UntypedPipeline = Pipeline<any>;\nexport type Query<S> =\n  | QueryOperator<S>\n  | Partial<{ [k in keyof S]: Condition<S[k]> }>\n  | Aggregation.Query.$and<S>\n  | Aggregation.Query.$expr<S>\n  | Aggregation.Query.$jsonSchema<S>\n  | Aggregation.Query.$nor<S>\n  | Aggregation.Query.$or<S>\n  | Aggregation.Query.$sampleRate<S>\n  | Aggregation.Query.$text<S>\n  | Aggregation.Query.$where<S>;\nexport type Accumulator<S> =\n  | Aggregation.Accumulator.$accumulator<S>\n  | Aggregation.Accumulator.$addToSet<S>\n  | Aggregation.Accumulator.$avg<S>\n  | Aggregation.Accumulator.$bottom<S>\n  | Aggregation.Accumulator.$bottomN<S>\n  | Aggregation.Accumulator.$count<S>\n  | Aggregation.Accumulator.$first<S>\n  | Aggregation.Accumulator.$firstN<S>\n  | Aggregation.Accumulator.$last<S>\n  | Aggregation.Accumulator.$lastN<S>\n  | Aggregation.Accumulator.$max<S>\n  | Aggregation.Accumulator.$maxN<S>\n  | Aggregation.Accumulator.$median<S>\n  | Aggregation.Accumulator.$mergeObjects<S>\n  | Aggregation.Accumulator.$min<S>\n  | Aggregation.Accumulator.$minN<S>\n  | Aggregation.Accumulator.$percentile<S>\n  | Aggregation.Accumulator.$push<S>\n  | Aggregation.Accumulator.$stdDevPop<S>\n  | Aggregation.Accumulator.$stdDevSamp<S>\n  | Aggregation.Accumulator.$sum<S>\n  | Aggregation.Accumulator.$top<S>\n  | Aggregation.Accumulator.$topN<S>;\nexport type SearchHighlight<S> = {\n  path:\n    | UnprefixedFieldPath<S>\n    | UnprefixedFieldPath<S>[]\n    | { wildcard: string }\n    | '*'\n    | MultiAnalyzerSpec<S>\n    | (UnprefixedFieldPath<S> | MultiAnalyzerSpec<S>)[];\n\n  maxCharsToExamine?: number;\n  maxNumPassages?: number;\n};\nexport type FieldPath<S> = `$${AFieldPath<S, any>}`;\nexport type UnprefixedFieldPath<S> = AFieldPath<S, any>;\nexport type NumberFieldPath<S> = `$${AFieldPath<S, Number>}`;\nexport type DoubleFieldPath<S> = `$${AFieldPath<S, Double>}`;\nexport type StringFieldPath<S> = `$${AFieldPath<S, string>}`;\nexport type ObjectFieldPath<S> = `$${AFieldPath<S, Record<string, unknown>>}`;\nexport type ArrayFieldPath<S> = `$${AFieldPath<S, unknown[]>}`;\nexport type BinDataFieldPath<S> = `$${AFieldPath<S, bson.Binary>}`;\nexport type ObjectIdFieldPath<S> = `$${AFieldPath<S, bson.ObjectId>}`;\nexport type BoolFieldPath<S> = `$${AFieldPath<S, boolean>}`;\nexport type DateFieldPath<S> = `$${AFieldPath<S, Date>}`;\nexport type NullFieldPath<S> = `$${AFieldPath<S, null>}`;\nexport type RegexFieldPath<S> = `$${AFieldPath<S, Regex>}`;\nexport type JavascriptFieldPath<S> = `$${AFieldPath<S, Javascript>}`;\nexport type IntFieldPath<S> = `$${AFieldPath<S, Int>}`;\nexport type TimestampFieldPath<S> = `$${AFieldPath<S, bson.Timestamp>}`;\nexport type LongFieldPath<S> = `$${AFieldPath<S, Long>}`;\nexport type DecimalFieldPath<S> = `$${AFieldPath<S, Decimal>}`;\nexport type ResolvesToNumber<S> =\n  | ResolvesToAny<S>\n  | NumberFieldPath<S>\n  | Number\n  | ResolvesToInt<S>\n  | ResolvesToDouble<S>\n  | ResolvesToLong<S>\n  | ResolvesToDecimal<S>\n  | Aggregation.Expression.$abs<S>\n  | Aggregation.Expression.$avg<S>\n  | Aggregation.Expression.$pow<S>\n  | Aggregation.Expression.$sum<S>;\nexport type ResolvesToDouble<S> =\n  | ResolvesToAny<S>\n  | DoubleFieldPath<S>\n  | Double\n  | Aggregation.Expression.$acos<S>\n  | Aggregation.Expression.$acosh<S>\n  | Aggregation.Expression.$add<S>\n  | Aggregation.Expression.$asin<S>\n  | Aggregation.Expression.$asinh<S>\n  | Aggregation.Expression.$atan<S>\n  | Aggregation.Expression.$atan2<S>\n  | Aggregation.Expression.$atanh<S>\n  | Aggregation.Expression.$cos<S>\n  | Aggregation.Expression.$cosh<S>\n  | Aggregation.Expression.$degreesToRadians<S>\n  | Aggregation.Expression.$divide<S>\n  | Aggregation.Expression.$exp<S>\n  | Aggregation.Expression.$ln<S>\n  | Aggregation.Expression.$log<S>\n  | Aggregation.Expression.$log10<S>\n  | Aggregation.Expression.$median<S>\n  | Aggregation.Expression.$radiansToDegrees<S>\n  | Aggregation.Expression.$rand<S>\n  | Aggregation.Expression.$round<S>\n  | Aggregation.Expression.$sin<S>\n  | Aggregation.Expression.$sinh<S>\n  | Aggregation.Expression.$sqrt<S>\n  | Aggregation.Expression.$stdDevPop<S>\n  | Aggregation.Expression.$stdDevSamp<S>\n  | Aggregation.Expression.$subtract<S>\n  | Aggregation.Expression.$tan<S>\n  | Aggregation.Expression.$tanh<S>\n  | Aggregation.Expression.$toDouble<S>\n  | Aggregation.Query.$rand<S>;\nexport type ResolvesToString<S> =\n  | ResolvesToAny<S>\n  | StringFieldPath<S>\n  | string\n  | Aggregation.Expression.$concat<S>\n  | Aggregation.Expression.$dateToString<S>\n  | Aggregation.Expression.$ltrim<S>\n  | Aggregation.Expression.$replaceAll<S>\n  | Aggregation.Expression.$replaceOne<S>\n  | Aggregation.Expression.$rtrim<S>\n  | Aggregation.Expression.$substr<S>\n  | Aggregation.Expression.$substrBytes<S>\n  | Aggregation.Expression.$substrCP<S>\n  | Aggregation.Expression.$toLower<S>\n  | Aggregation.Expression.$toString<S>\n  | Aggregation.Expression.$toUpper<S>\n  | Aggregation.Expression.$trim<S>\n  | Aggregation.Expression.$trunc<S>\n  | Aggregation.Expression.$type<S>;\nexport type ResolvesToObject<S> =\n  | '$$ROOT'\n  | ResolvesToAny<S>\n  | ObjectFieldPath<S>\n  | Record<string, unknown>\n  | Aggregation.Expression.$arrayToObject<S>\n  | Aggregation.Expression.$dateToParts<S>\n  | Aggregation.Expression.$mergeObjects<S>\n  | Aggregation.Expression.$regexFind<S>\n  | Aggregation.Expression.$setField<S>\n  | Aggregation.Expression.$unsetField<S>;\nexport type ResolvesToArray<S> =\n  | ResolvesToAny<S>\n  | ArrayFieldPath<S>\n  | unknown[]\n  | Aggregation.Expression.$concatArrays<S>\n  | Aggregation.Expression.$filter<S>\n  | Aggregation.Expression.$firstN<S>\n  | Aggregation.Expression.$lastN<S>\n  | Aggregation.Expression.$map<S>\n  | Aggregation.Expression.$maxN<S>\n  | Aggregation.Expression.$minN<S>\n  | Aggregation.Expression.$objectToArray<S>\n  | Aggregation.Expression.$percentile<S>\n  | Aggregation.Expression.$range<S>\n  | Aggregation.Expression.$regexFindAll<S>\n  | Aggregation.Expression.$reverseArray<S>\n  | Aggregation.Expression.$setDifference<S>\n  | Aggregation.Expression.$setIntersection<S>\n  | Aggregation.Expression.$setUnion<S>\n  | Aggregation.Expression.$slice<S>\n  | Aggregation.Expression.$sortArray<S>\n  | Aggregation.Expression.$split<S>\n  | Aggregation.Expression.$zip<S>;\nexport type ResolvesToBinData<S> =\n  | ResolvesToAny<S>\n  | BinDataFieldPath<S>\n  | bson.Binary;\nexport type ResolvesToObjectId<S> =\n  | ResolvesToAny<S>\n  | ObjectIdFieldPath<S>\n  | bson.ObjectId\n  | Aggregation.Expression.$toObjectId<S>;\nexport type ResolvesToBool<S> =\n  | ResolvesToAny<S>\n  | BoolFieldPath<S>\n  | boolean\n  | Aggregation.Expression.$allElementsTrue<S>\n  | Aggregation.Expression.$and<S>\n  | Aggregation.Expression.$anyElementTrue<S>\n  | Aggregation.Expression.$eq<S>\n  | Aggregation.Expression.$gt<S>\n  | Aggregation.Expression.$gte<S>\n  | Aggregation.Expression.$in<S>\n  | Aggregation.Expression.$isArray<S>\n  | Aggregation.Expression.$isNumber<S>\n  | Aggregation.Expression.$lt<S>\n  | Aggregation.Expression.$lte<S>\n  | Aggregation.Expression.$ne<S>\n  | Aggregation.Expression.$not<S>\n  | Aggregation.Expression.$or<S>\n  | Aggregation.Expression.$regexMatch<S>\n  | Aggregation.Expression.$setEquals<S>\n  | Aggregation.Expression.$setIsSubset<S>\n  | Aggregation.Expression.$toBool<S>;\nexport type ResolvesToDate<S> =\n  | '$$NOW'\n  | ResolvesToAny<S>\n  | DateFieldPath<S>\n  | Date\n  | Aggregation.Expression.$add<S>\n  | Aggregation.Expression.$dateAdd<S>\n  | Aggregation.Expression.$dateFromParts<S>\n  | Aggregation.Expression.$dateFromString<S>\n  | Aggregation.Expression.$dateSubtract<S>\n  | Aggregation.Expression.$dateTrunc<S>\n  | Aggregation.Expression.$subtract<S>\n  | Aggregation.Expression.$toDate<S>;\nexport type ResolvesToNull<S> = ResolvesToAny<S> | NullFieldPath<S> | null;\nexport type ResolvesToRegex<S> = ResolvesToAny<S> | RegexFieldPath<S> | Regex;\nexport type ResolvesToJavascript<S> =\n  | ResolvesToAny<S>\n  | JavascriptFieldPath<S>\n  | Javascript;\nexport type ResolvesToInt<S> =\n  | ResolvesToAny<S>\n  | IntFieldPath<S>\n  | Int\n  | Aggregation.Expression.$add<S>\n  | Aggregation.Expression.$binarySize<S>\n  | Aggregation.Expression.$bitAnd<S>\n  | Aggregation.Expression.$bitNot<S>\n  | Aggregation.Expression.$bitOr<S>\n  | Aggregation.Expression.$bitXor<S>\n  | Aggregation.Expression.$bsonSize<S>\n  | Aggregation.Expression.$ceil<S>\n  | Aggregation.Expression.$cmp<S>\n  | Aggregation.Expression.$dateDiff<S>\n  | Aggregation.Expression.$dayOfMonth<S>\n  | Aggregation.Expression.$dayOfWeek<S>\n  | Aggregation.Expression.$dayOfYear<S>\n  | Aggregation.Expression.$floor<S>\n  | Aggregation.Expression.$hour<S>\n  | Aggregation.Expression.$indexOfArray<S>\n  | Aggregation.Expression.$indexOfBytes<S>\n  | Aggregation.Expression.$indexOfCP<S>\n  | Aggregation.Expression.$isoDayOfWeek<S>\n  | Aggregation.Expression.$isoWeek<S>\n  | Aggregation.Expression.$isoWeekYear<S>\n  | Aggregation.Expression.$millisecond<S>\n  | Aggregation.Expression.$minute<S>\n  | Aggregation.Expression.$mod<S>\n  | Aggregation.Expression.$month<S>\n  | Aggregation.Expression.$round<S>\n  | Aggregation.Expression.$second<S>\n  | Aggregation.Expression.$size<S>\n  | Aggregation.Expression.$strLenBytes<S>\n  | Aggregation.Expression.$strLenCP<S>\n  | Aggregation.Expression.$strcasecmp<S>\n  | Aggregation.Expression.$subtract<S>\n  | Aggregation.Expression.$toInt<S>\n  | Aggregation.Expression.$week<S>\n  | Aggregation.Expression.$year<S>;\nexport type ResolvesToTimestamp<S> =\n  | ResolvesToAny<S>\n  | TimestampFieldPath<S>\n  | bson.Timestamp\n  | '$clusterTime';\nexport type ResolvesToLong<S> =\n  | ResolvesToAny<S>\n  | LongFieldPath<S>\n  | Long\n  | Aggregation.Expression.$add<S>\n  | Aggregation.Expression.$bitAnd<S>\n  | Aggregation.Expression.$bitNot<S>\n  | Aggregation.Expression.$bitOr<S>\n  | Aggregation.Expression.$bitXor<S>\n  | Aggregation.Expression.$round<S>\n  | Aggregation.Expression.$subtract<S>\n  | Aggregation.Expression.$toHashedIndexKey<S>\n  | Aggregation.Expression.$toLong<S>\n  | Aggregation.Expression.$tsIncrement<S>\n  | Aggregation.Expression.$tsSecond<S>;\nexport type ResolvesToDecimal<S> =\n  | ResolvesToAny<S>\n  | DecimalFieldPath<S>\n  | Decimal\n  | Aggregation.Expression.$acos<S>\n  | Aggregation.Expression.$acosh<S>\n  | Aggregation.Expression.$add<S>\n  | Aggregation.Expression.$asin<S>\n  | Aggregation.Expression.$asinh<S>\n  | Aggregation.Expression.$atan<S>\n  | Aggregation.Expression.$atan2<S>\n  | Aggregation.Expression.$atanh<S>\n  | Aggregation.Expression.$cos<S>\n  | Aggregation.Expression.$cosh<S>\n  | Aggregation.Expression.$degreesToRadians<S>\n  | Aggregation.Expression.$multiply<S>\n  | Aggregation.Expression.$radiansToDegrees<S>\n  | Aggregation.Expression.$round<S>\n  | Aggregation.Expression.$sin<S>\n  | Aggregation.Expression.$sinh<S>\n  | Aggregation.Expression.$subtract<S>\n  | Aggregation.Expression.$tan<S>\n  | Aggregation.Expression.$tanh<S>\n  | Aggregation.Expression.$toDecimal<S>;\nexport type AccumulatorOperator<S> =\n  | Aggregation.Accumulator.$accumulator<S>\n  | Aggregation.Accumulator.$addToSet<S>\n  | Aggregation.Accumulator.$avg<S>\n  | Aggregation.Accumulator.$bottom<S>\n  | Aggregation.Accumulator.$bottomN<S>\n  | Aggregation.Accumulator.$count<S>\n  | Aggregation.Accumulator.$covariancePop<S>\n  | Aggregation.Accumulator.$covarianceSamp<S>\n  | Aggregation.Accumulator.$denseRank<S>\n  | Aggregation.Accumulator.$derivative<S>\n  | Aggregation.Accumulator.$documentNumber<S>\n  | Aggregation.Accumulator.$expMovingAvg<S>\n  | Aggregation.Accumulator.$first<S>\n  | Aggregation.Accumulator.$firstN<S>\n  | Aggregation.Accumulator.$integral<S>\n  | Aggregation.Accumulator.$last<S>\n  | Aggregation.Accumulator.$lastN<S>\n  | Aggregation.Accumulator.$linearFill<S>\n  | Aggregation.Accumulator.$locf<S>\n  | Aggregation.Accumulator.$max<S>\n  | Aggregation.Accumulator.$maxN<S>\n  | Aggregation.Accumulator.$median<S>\n  | Aggregation.Accumulator.$mergeObjects<S>\n  | Aggregation.Accumulator.$min<S>\n  | Aggregation.Accumulator.$minN<S>\n  | Aggregation.Accumulator.$percentile<S>\n  | Aggregation.Accumulator.$push<S>\n  | Aggregation.Accumulator.$rank<S>\n  | Aggregation.Accumulator.$shift<S>\n  | Aggregation.Accumulator.$stdDevPop<S>\n  | Aggregation.Accumulator.$stdDevSamp<S>\n  | Aggregation.Accumulator.$sum<S>\n  | Aggregation.Accumulator.$top<S>\n  | Aggregation.Accumulator.$topN<S>;\nexport type Window<S> =\n  | Aggregation.Accumulator.$addToSet<S>\n  | Aggregation.Accumulator.$avg<S>\n  | Aggregation.Accumulator.$bottom<S>\n  | Aggregation.Accumulator.$bottomN<S>\n  | Aggregation.Accumulator.$count<S>\n  | Aggregation.Accumulator.$covariancePop<S>\n  | Aggregation.Accumulator.$covarianceSamp<S>\n  | Aggregation.Accumulator.$denseRank<S>\n  | Aggregation.Accumulator.$derivative<S>\n  | Aggregation.Accumulator.$documentNumber<S>\n  | Aggregation.Accumulator.$expMovingAvg<S>\n  | Aggregation.Accumulator.$first<S>\n  | Aggregation.Accumulator.$firstN<S>\n  | Aggregation.Accumulator.$integral<S>\n  | Aggregation.Accumulator.$last<S>\n  | Aggregation.Accumulator.$lastN<S>\n  | Aggregation.Accumulator.$linearFill<S>\n  | Aggregation.Accumulator.$locf<S>\n  | Aggregation.Accumulator.$max<S>\n  | Aggregation.Accumulator.$maxN<S>\n  | Aggregation.Accumulator.$median<S>\n  | Aggregation.Accumulator.$min<S>\n  | Aggregation.Accumulator.$minN<S>\n  | Aggregation.Accumulator.$percentile<S>\n  | Aggregation.Accumulator.$push<S>\n  | Aggregation.Accumulator.$rank<S>\n  | Aggregation.Accumulator.$shift<S>\n  | Aggregation.Accumulator.$stdDevPop<S>\n  | Aggregation.Accumulator.$stdDevSamp<S>\n  | Aggregation.Accumulator.$sum<S>;\nexport type ExpressionOperator<S> =\n  | Aggregation.Expression.$abs<S>\n  | Aggregation.Expression.$acos<S>\n  | Aggregation.Expression.$acosh<S>\n  | Aggregation.Expression.$add<S>\n  | Aggregation.Expression.$allElementsTrue<S>\n  | Aggregation.Expression.$and<S>\n  | Aggregation.Expression.$anyElementTrue<S>\n  | Aggregation.Expression.$arrayElemAt<S>\n  | Aggregation.Expression.$arrayToObject<S>\n  | Aggregation.Expression.$asin<S>\n  | Aggregation.Expression.$asinh<S>\n  | Aggregation.Expression.$atan<S>\n  | Aggregation.Expression.$atan2<S>\n  | Aggregation.Expression.$atanh<S>\n  | Aggregation.Expression.$avg<S>\n  | Aggregation.Expression.$binarySize<S>\n  | Aggregation.Expression.$bitAnd<S>\n  | Aggregation.Expression.$bitNot<S>\n  | Aggregation.Expression.$bitOr<S>\n  | Aggregation.Expression.$bitXor<S>\n  | Aggregation.Expression.$bsonSize<S>\n  | Aggregation.Expression.$case<S>\n  | Aggregation.Expression.$ceil<S>\n  | Aggregation.Expression.$cmp<S>\n  | Aggregation.Expression.$concat<S>\n  | Aggregation.Expression.$concatArrays<S>\n  | Aggregation.Expression.$cond<S>\n  | Aggregation.Expression.$convert<S>\n  | Aggregation.Expression.$cos<S>\n  | Aggregation.Expression.$cosh<S>\n  | Aggregation.Expression.$dateAdd<S>\n  | Aggregation.Expression.$dateDiff<S>\n  | Aggregation.Expression.$dateFromParts<S>\n  | Aggregation.Expression.$dateFromString<S>\n  | Aggregation.Expression.$dateSubtract<S>\n  | Aggregation.Expression.$dateToParts<S>\n  | Aggregation.Expression.$dateToString<S>\n  | Aggregation.Expression.$dateTrunc<S>\n  | Aggregation.Expression.$dayOfMonth<S>\n  | Aggregation.Expression.$dayOfWeek<S>\n  | Aggregation.Expression.$dayOfYear<S>\n  | Aggregation.Expression.$degreesToRadians<S>\n  | Aggregation.Expression.$divide<S>\n  | Aggregation.Expression.$eq<S>\n  | Aggregation.Expression.$exp<S>\n  | Aggregation.Expression.$filter<S>\n  | Aggregation.Expression.$first<S>\n  | Aggregation.Expression.$firstN<S>\n  | Aggregation.Expression.$floor<S>\n  | Aggregation.Expression.$function<S>\n  | Aggregation.Expression.$getField<S>\n  | Aggregation.Expression.$gt<S>\n  | Aggregation.Expression.$gte<S>\n  | Aggregation.Expression.$hour<S>\n  | Aggregation.Expression.$ifNull<S>\n  | Aggregation.Expression.$in<S>\n  | Aggregation.Expression.$indexOfArray<S>\n  | Aggregation.Expression.$indexOfBytes<S>\n  | Aggregation.Expression.$indexOfCP<S>\n  | Aggregation.Expression.$isArray<S>\n  | Aggregation.Expression.$isNumber<S>\n  | Aggregation.Expression.$isoDayOfWeek<S>\n  | Aggregation.Expression.$isoWeek<S>\n  | Aggregation.Expression.$isoWeekYear<S>\n  | Aggregation.Expression.$last<S>\n  | Aggregation.Expression.$lastN<S>\n  | Aggregation.Expression.$let<S>\n  | Aggregation.Expression.$literal<S>\n  | Aggregation.Expression.$ln<S>\n  | Aggregation.Expression.$log<S>\n  | Aggregation.Expression.$log10<S>\n  | Aggregation.Expression.$lt<S>\n  | Aggregation.Expression.$lte<S>\n  | Aggregation.Expression.$ltrim<S>\n  | Aggregation.Expression.$map<S>\n  | Aggregation.Expression.$max<S>\n  | Aggregation.Expression.$maxN<S>\n  | Aggregation.Expression.$median<S>\n  | Aggregation.Expression.$mergeObjects<S>\n  | Aggregation.Expression.$meta<S>\n  | Aggregation.Expression.$millisecond<S>\n  | Aggregation.Expression.$min<S>\n  | Aggregation.Expression.$minN<S>\n  | Aggregation.Expression.$minute<S>\n  | Aggregation.Expression.$mod<S>\n  | Aggregation.Expression.$month<S>\n  | Aggregation.Expression.$multiply<S>\n  | Aggregation.Expression.$ne<S>\n  | Aggregation.Expression.$not<S>\n  | Aggregation.Expression.$objectToArray<S>\n  | Aggregation.Expression.$or<S>\n  | Aggregation.Expression.$percentile<S>\n  | Aggregation.Expression.$pow<S>\n  | Aggregation.Expression.$radiansToDegrees<S>\n  | Aggregation.Expression.$rand<S>\n  | Aggregation.Expression.$range<S>\n  | Aggregation.Expression.$reduce<S>\n  | Aggregation.Expression.$regexFind<S>\n  | Aggregation.Expression.$regexFindAll<S>\n  | Aggregation.Expression.$regexMatch<S>\n  | Aggregation.Expression.$replaceAll<S>\n  | Aggregation.Expression.$replaceOne<S>\n  | Aggregation.Expression.$reverseArray<S>\n  | Aggregation.Expression.$round<S>\n  | Aggregation.Expression.$rtrim<S>\n  | Aggregation.Expression.$second<S>\n  | Aggregation.Expression.$setDifference<S>\n  | Aggregation.Expression.$setEquals<S>\n  | Aggregation.Expression.$setField<S>\n  | Aggregation.Expression.$setIntersection<S>\n  | Aggregation.Expression.$setIsSubset<S>\n  | Aggregation.Expression.$setUnion<S>\n  | Aggregation.Expression.$sin<S>\n  | Aggregation.Expression.$sinh<S>\n  | Aggregation.Expression.$size<S>\n  | Aggregation.Expression.$slice<S>\n  | Aggregation.Expression.$sortArray<S>\n  | Aggregation.Expression.$split<S>\n  | Aggregation.Expression.$sqrt<S>\n  | Aggregation.Expression.$stdDevPop<S>\n  | Aggregation.Expression.$stdDevSamp<S>\n  | Aggregation.Expression.$strLenBytes<S>\n  | Aggregation.Expression.$strLenCP<S>\n  | Aggregation.Expression.$strcasecmp<S>\n  | Aggregation.Expression.$substr<S>\n  | Aggregation.Expression.$substrBytes<S>\n  | Aggregation.Expression.$substrCP<S>\n  | Aggregation.Expression.$subtract<S>\n  | Aggregation.Expression.$sum<S>\n  | Aggregation.Expression.$switch<S>\n  | Aggregation.Expression.$tan<S>\n  | Aggregation.Expression.$tanh<S>\n  | Aggregation.Expression.$toBool<S>\n  | Aggregation.Expression.$toDate<S>\n  | Aggregation.Expression.$toDecimal<S>\n  | Aggregation.Expression.$toDouble<S>\n  | Aggregation.Expression.$toHashedIndexKey<S>\n  | Aggregation.Expression.$toInt<S>\n  | Aggregation.Expression.$toLong<S>\n  | Aggregation.Expression.$toLower<S>\n  | Aggregation.Expression.$toObjectId<S>\n  | Aggregation.Expression.$toString<S>\n  | Aggregation.Expression.$toUpper<S>\n  | Aggregation.Expression.$trim<S>\n  | Aggregation.Expression.$trunc<S>\n  | Aggregation.Expression.$tsIncrement<S>\n  | Aggregation.Expression.$tsSecond<S>\n  | Aggregation.Expression.$type<S>\n  | Aggregation.Expression.$unsetField<S>\n  | Aggregation.Expression.$week<S>\n  | Aggregation.Expression.$year<S>\n  | Aggregation.Expression.$zip<S>;\nexport type ResolvesToAny<S> =\n  | Aggregation.Expression.$arrayElemAt<S>\n  | Aggregation.Expression.$cond<S>\n  | Aggregation.Expression.$convert<S>\n  | Aggregation.Expression.$first<S>\n  | Aggregation.Expression.$function<S>\n  | Aggregation.Expression.$getField<S>\n  | Aggregation.Expression.$ifNull<S>\n  | Aggregation.Expression.$last<S>\n  | Aggregation.Expression.$let<S>\n  | Aggregation.Expression.$literal<S>\n  | Aggregation.Expression.$max<S>\n  | Aggregation.Expression.$meta<S>\n  | Aggregation.Expression.$min<S>\n  | Aggregation.Expression.$reduce<S>\n  | Aggregation.Expression.$switch<S>;\nexport type SwitchBranch<S> = Aggregation.Expression.$case<S>;\nexport type FieldQuery<S> =\n  | Aggregation.Query.$all<S>\n  | Aggregation.Query.$bitsAllClear<S>\n  | Aggregation.Query.$bitsAllSet<S>\n  | Aggregation.Query.$bitsAnyClear<S>\n  | Aggregation.Query.$bitsAnySet<S>\n  | Aggregation.Query.$elemMatch<S>\n  | Aggregation.Query.$eq<S>\n  | Aggregation.Query.$exists<S>\n  | Aggregation.Query.$geoIntersects<S>\n  | Aggregation.Query.$geoWithin<S>\n  | Aggregation.Query.$gt<S>\n  | Aggregation.Query.$gte<S>\n  | Aggregation.Query.$in<S>\n  | Aggregation.Query.$lt<S>\n  | Aggregation.Query.$lte<S>\n  | Aggregation.Query.$maxDistance<S>\n  | Aggregation.Query.$minDistance<S>\n  | Aggregation.Query.$mod<S>\n  | Aggregation.Query.$ne<S>\n  | Aggregation.Query.$near<S>\n  | Aggregation.Query.$nearSphere<S>\n  | Aggregation.Query.$nin<S>\n  | Aggregation.Query.$not<S>\n  | Aggregation.Query.$regex<S>\n  | Aggregation.Query.$size<S>\n  | Aggregation.Query.$type<S>;\nexport type QueryOperator<S> =\n  | Aggregation.Query.$all<S>\n  | Aggregation.Query.$and<S>\n  | Aggregation.Query.$bitsAllClear<S>\n  | Aggregation.Query.$bitsAllSet<S>\n  | Aggregation.Query.$bitsAnyClear<S>\n  | Aggregation.Query.$bitsAnySet<S>\n  | Aggregation.Query.$box<S>\n  | Aggregation.Query.$center<S>\n  | Aggregation.Query.$centerSphere<S>\n  | Aggregation.Query.$elemMatch<S>\n  | Aggregation.Query.$eq<S>\n  | Aggregation.Query.$exists<S>\n  | Aggregation.Query.$expr<S>\n  | Aggregation.Query.$geoIntersects<S>\n  | Aggregation.Query.$geoWithin<S>\n  | Aggregation.Query.$geometry<S>\n  | Aggregation.Query.$gt<S>\n  | Aggregation.Query.$gte<S>\n  | Aggregation.Query.$in<S>\n  | Aggregation.Query.$jsonSchema<S>\n  | Aggregation.Query.$lt<S>\n  | Aggregation.Query.$lte<S>\n  | Aggregation.Query.$maxDistance<S>\n  | Aggregation.Query.$minDistance<S>\n  | Aggregation.Query.$mod<S>\n  | Aggregation.Query.$ne<S>\n  | Aggregation.Query.$near<S>\n  | Aggregation.Query.$nearSphere<S>\n  | Aggregation.Query.$nin<S>\n  | Aggregation.Query.$nor<S>\n  | Aggregation.Query.$not<S>\n  | Aggregation.Query.$or<S>\n  | Aggregation.Query.$polygon<S>\n  | Aggregation.Query.$rand<S>\n  | Aggregation.Query.$regex<S>\n  | Aggregation.Query.$sampleRate<S>\n  | Aggregation.Query.$size<S>\n  | Aggregation.Query.$text<S>\n  | Aggregation.Query.$type<S>\n  | Aggregation.Query.$where<S>;\nexport type SearchOperator<S> =\n  | Aggregation.Search.Autocomplete<S>\n  | Aggregation.Search.Compound<S>\n  | Aggregation.Search.EmbeddedDocument<S>\n  | Aggregation.Search.Equals<S>\n  | Aggregation.Search.Exists<S>\n  | Aggregation.Search.Facet<S>\n  | Aggregation.Search.GeoShape<S>\n  | Aggregation.Search.GeoWithin<S>\n  | Aggregation.Search.In<S>\n  | Aggregation.Search.MoreLikeThis<S>\n  | Aggregation.Search.Near<S>\n  | Aggregation.Search.Phrase<S>\n  | Aggregation.Search.QueryString<S>\n  | Aggregation.Search.Range<S>\n  | Aggregation.Search.Regex<S>\n  | Aggregation.Search.Text<S>\n  | Aggregation.Search.Wildcard<S>;\nexport type StageOperator<S> =\n  | Aggregation.Stage.$addFields<S>\n  | Aggregation.Stage.$bucket<S>\n  | Aggregation.Stage.$bucketAuto<S>\n  | Aggregation.Stage.$changeStream<S>\n  | Aggregation.Stage.$changeStreamSplitLargeEvent<S>\n  | Aggregation.Stage.$collStats<S>\n  | Aggregation.Stage.$count<S>\n  | Aggregation.Stage.$currentOp<S>\n  | Aggregation.Stage.$densify<S>\n  | Aggregation.Stage.$documents<S>\n  | Aggregation.Stage.$facet<S>\n  | Aggregation.Stage.$fill<S>\n  | Aggregation.Stage.$geoNear<S>\n  | Aggregation.Stage.$graphLookup<S>\n  | Aggregation.Stage.$group<S>\n  | Aggregation.Stage.$indexStats<S>\n  | Aggregation.Stage.$limit<S>\n  | Aggregation.Stage.$listLocalSessions<S>\n  | Aggregation.Stage.$listSampledQueries<S>\n  | Aggregation.Stage.$listSearchIndexes<S>\n  | Aggregation.Stage.$listSessions<S>\n  | Aggregation.Stage.$lookup<S>\n  | Aggregation.Stage.$match<S>\n  | Aggregation.Stage.$merge<S>\n  | Aggregation.Stage.$out<S>\n  | Aggregation.Stage.$planCacheStats<S>\n  | Aggregation.Stage.$project<S>\n  | Aggregation.Stage.$redact<S>\n  | Aggregation.Stage.$replaceRoot<S>\n  | Aggregation.Stage.$replaceWith<S>\n  | Aggregation.Stage.$sample<S>\n  | Aggregation.Stage.$search<S>\n  | Aggregation.Stage.$searchMeta<S>\n  | Aggregation.Stage.$set<S>\n  | Aggregation.Stage.$setWindowFields<S>\n  | Aggregation.Stage.$shardedDataDistribution<S>\n  | Aggregation.Stage.$skip<S>\n  | Aggregation.Stage.$sort<S>\n  | Aggregation.Stage.$sortByCount<S>\n  | Aggregation.Stage.$unionWith<S>\n  | Aggregation.Stage.$unset<S>\n  | Aggregation.Stage.$unwind<S>\n  | Aggregation.Stage.$vectorSearch<S>;\n",
  '@mongodb-js/mongodb-ts-autocomplete/package.json':
    '{\n  "name": "@mongodb-js/mongodb-ts-autocomplete",\n  "description": "Provide MongoDB-specific autocompletion support",\n  "author": {\n    "name": "MongoDB Inc",\n    "email": "compass@mongodb.com"\n  },\n  "publishConfig": {\n    "access": "public"\n  },\n  "bugs": {\n    "url": "https://jira.mongodb.org/projects/COMPASS/issues",\n    "email": "compass@mongodb.com"\n  },\n  "homepage": "https://github.com/mongodb-js/devtools-shared",\n  "version": "0.4.1",\n  "repository": {\n    "type": "git",\n    "url": "https://github.com/mongodb-js/devtools-shared.git"\n  },\n  "files": [\n    "dist"\n  ],\n  "license": "Apache-2.0",\n  "main": "dist/index.js",\n  "types": "./dist/index.d.ts",\n  "exports": {\n    "require": {\n      "default": "./dist/index.js",\n      "types": "./dist/index.d.ts"\n    },\n    "import": {\n      "default": "./dist/.esm-wrapper.mjs",\n      "types": "./dist/index.d.ts"\n    }\n  },\n  "scripts": {\n    "bootstrap": "npm run compile",\n    "prepublishOnly": "npm run compile",\n    "compile": "npm run extract-types && tsc -p tsconfig.json && gen-esm-wrapper . ./dist/.esm-wrapper.mjs",\n    "typecheck": "tsc --noEmit",\n    "eslint": "eslint",\n    "prettier": "prettier",\n    "lint": "npm run eslint . && npm run prettier -- --check .",\n    "depcheck": "depcheck",\n    "check": "npm run typecheck && npm run lint && npm run depcheck",\n    "check-ci": "npm run check",\n    "test": "mocha",\n    "test-cov": "nyc -x \\"**/*.spec.*\\" --reporter=lcov --reporter=text --reporter=html npm run test",\n    "test-watch": "npm run test -- --watch",\n    "test-ci": "npm run test-cov",\n    "reformat": "npm run prettier -- --write .",\n    "extract-types": "ts-node scripts/extract-types.ts"\n  },\n  "dependencies": {\n    "@mongodb-js/ts-autocomplete": "^0.4.1",\n    "@mongosh/shell-api": "^3.16.2",\n    "mongodb-schema": "^12.6.2",\n    "node-cache": "^5.1.2",\n    "typescript": "^5.0.4",\n    "debug": "^4.4.0",\n    "lodash": "^4.17.21"\n  },\n  "devDependencies": {\n    "@mongodb-js/eslint-config-devtools": "0.9.11",\n    "@mongodb-js/mocha-config-devtools": "^1.0.5",\n    "@mongodb-js/prettier-config-devtools": "^1.0.2",\n    "@mongodb-js/tsconfig-devtools": "^1.0.3",\n    "@mongodb-js/mql-typescript": "^0.2.3",\n    "@types/chai": "^4.2.21",\n    "@types/mocha": "^9.1.1",\n    "@types/node": "^22.15.30",\n    "@types/sinon-chai": "^3.2.5",\n    "bson": "^6.10.3",\n    "mongodb": "^6.9.0",\n    "chai": "^4.5.0",\n    "depcheck": "^1.4.7",\n    "eslint": "^7.25.0",\n    "gen-esm-wrapper": "^1.1.3",\n    "mocha": "^8.4.0",\n    "nyc": "^15.1.0",\n    "prettier": "^3.5.3",\n    "sinon": "^9.2.3",\n    "ts-node": "^10.9.2"\n  }\n}\n',
  '@types/node/package.json':
    '{\n    "name": "@types/node",\n    "version": "22.15.31",\n    "description": "TypeScript definitions for node",\n    "homepage": "https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/node",\n    "license": "MIT",\n    "contributors": [\n        {\n            "name": "Microsoft TypeScript",\n            "githubUsername": "Microsoft",\n            "url": "https://github.com/Microsoft"\n        },\n        {\n            "name": "Alberto Schiabel",\n            "githubUsername": "jkomyno",\n            "url": "https://github.com/jkomyno"\n        },\n        {\n            "name": "Alvis HT Tang",\n            "githubUsername": "alvis",\n            "url": "https://github.com/alvis"\n        },\n        {\n            "name": "Andrew Makarov",\n            "githubUsername": "r3nya",\n            "url": "https://github.com/r3nya"\n        },\n        {\n            "name": "Benjamin Toueg",\n            "githubUsername": "btoueg",\n            "url": "https://github.com/btoueg"\n        },\n        {\n            "name": "Chigozirim C.",\n            "githubUsername": "smac89",\n            "url": "https://github.com/smac89"\n        },\n        {\n            "name": "David Junger",\n            "githubUsername": "touffy",\n            "url": "https://github.com/touffy"\n        },\n        {\n            "name": "Deividas Bakanas",\n            "githubUsername": "DeividasBakanas",\n            "url": "https://github.com/DeividasBakanas"\n        },\n        {\n            "name": "Eugene Y. Q. Shen",\n            "githubUsername": "eyqs",\n            "url": "https://github.com/eyqs"\n        },\n        {\n            "name": "Hannes Magnusson",\n            "githubUsername": "Hannes-Magnusson-CK",\n            "url": "https://github.com/Hannes-Magnusson-CK"\n        },\n        {\n            "name": "Huw",\n            "githubUsername": "hoo29",\n            "url": "https://github.com/hoo29"\n        },\n        {\n            "name": "Kelvin Jin",\n            "githubUsername": "kjin",\n            "url": "https://github.com/kjin"\n        },\n        {\n            "name": "Klaus Meinhardt",\n            "githubUsername": "ajafff",\n            "url": "https://github.com/ajafff"\n        },\n        {\n            "name": "Lishude",\n            "githubUsername": "islishude",\n            "url": "https://github.com/islishude"\n        },\n        {\n            "name": "Mariusz Wiktorczyk",\n            "githubUsername": "mwiktorczyk",\n            "url": "https://github.com/mwiktorczyk"\n        },\n        {\n            "name": "Mohsen Azimi",\n            "githubUsername": "mohsen1",\n            "url": "https://github.com/mohsen1"\n        },\n        {\n            "name": "Nikita Galkin",\n            "githubUsername": "galkin",\n            "url": "https://github.com/galkin"\n        },\n        {\n            "name": "Parambir Singh",\n            "githubUsername": "parambirs",\n            "url": "https://github.com/parambirs"\n        },\n        {\n            "name": "Sebastian Silbermann",\n            "githubUsername": "eps1lon",\n            "url": "https://github.com/eps1lon"\n        },\n        {\n            "name": "Thomas den Hollander",\n            "githubUsername": "ThomasdenH",\n            "url": "https://github.com/ThomasdenH"\n        },\n        {\n            "name": "Wilco Bakker",\n            "githubUsername": "WilcoBakker",\n            "url": "https://github.com/WilcoBakker"\n        },\n        {\n            "name": "wwwy3y3",\n            "githubUsername": "wwwy3y3",\n            "url": "https://github.com/wwwy3y3"\n        },\n        {\n            "name": "Samuel Ainsworth",\n            "githubUsername": "samuela",\n            "url": "https://github.com/samuela"\n        },\n        {\n            "name": "Kyle Uehlein",\n            "githubUsername": "kuehlein",\n            "url": "https://github.com/kuehlein"\n        },\n        {\n            "name": "Thanik Bhongbhibhat",\n            "githubUsername": "bhongy",\n            "url": "https://github.com/bhongy"\n        },\n        {\n            "name": "Marcin Kopacz",\n            "githubUsername": "chyzwar",\n            "url": "https://github.com/chyzwar"\n        },\n        {\n            "name": "Trivikram Kamat",\n            "githubUsername": "trivikr",\n            "url": "https://github.com/trivikr"\n        },\n        {\n            "name": "Junxiao Shi",\n            "githubUsername": "yoursunny",\n            "url": "https://github.com/yoursunny"\n        },\n        {\n            "name": "Ilia Baryshnikov",\n            "githubUsername": "qwelias",\n            "url": "https://github.com/qwelias"\n        },\n        {\n            "name": "ExE Boss",\n            "githubUsername": "ExE-Boss",\n            "url": "https://github.com/ExE-Boss"\n        },\n        {\n            "name": "Piotr Błażejewicz",\n            "githubUsername": "peterblazejewicz",\n            "url": "https://github.com/peterblazejewicz"\n        },\n        {\n            "name": "Anna Henningsen",\n            "githubUsername": "addaleax",\n            "url": "https://github.com/addaleax"\n        },\n        {\n            "name": "Victor Perin",\n            "githubUsername": "victorperin",\n            "url": "https://github.com/victorperin"\n        },\n        {\n            "name": "NodeJS Contributors",\n            "githubUsername": "NodeJS",\n            "url": "https://github.com/NodeJS"\n        },\n        {\n            "name": "Linus Unnebäck",\n            "githubUsername": "LinusU",\n            "url": "https://github.com/LinusU"\n        },\n        {\n            "name": "wafuwafu13",\n            "githubUsername": "wafuwafu13",\n            "url": "https://github.com/wafuwafu13"\n        },\n        {\n            "name": "Matteo Collina",\n            "githubUsername": "mcollina",\n            "url": "https://github.com/mcollina"\n        },\n        {\n            "name": "Dmitry Semigradsky",\n            "githubUsername": "Semigradsky",\n            "url": "https://github.com/Semigradsky"\n        },\n        {\n            "name": "René",\n            "githubUsername": "Renegade334",\n            "url": "https://github.com/Renegade334"\n        }\n    ],\n    "main": "",\n    "types": "index.d.ts",\n    "typesVersions": {\n        "<=5.6": {\n            "*": [\n                "ts5.6/*"\n            ]\n        }\n    },\n    "repository": {\n        "type": "git",\n        "url": "https://github.com/DefinitelyTyped/DefinitelyTyped.git",\n        "directory": "types/node"\n    },\n    "scripts": {},\n    "dependencies": {\n        "undici-types": "~6.21.0"\n    },\n    "peerDependencies": {},\n    "typesPublisherContentHash": "1ba9213adf63443b1d408206cd7fef06bfb41aa3b67219d0ec8b8d922e74c9bc",\n    "typeScriptVersion": "5.1"\n}',
  '@types/node/assert.d.ts':
    "/**\n * The `node:assert` module provides a set of assertion functions for verifying\n * invariants.\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/assert.js)\n */\ndeclare module \"assert\" {\n    /**\n     * An alias of {@link ok}.\n     * @since v0.5.9\n     * @param value The input that is checked for being truthy.\n     */\n    function assert(value: unknown, message?: string | Error): asserts value;\n    namespace assert {\n        /**\n         * Indicates the failure of an assertion. All errors thrown by the `node:assert` module will be instances of the `AssertionError` class.\n         */\n        class AssertionError extends Error {\n            /**\n             * Set to the `actual` argument for methods such as {@link assert.strictEqual()}.\n             */\n            actual: unknown;\n            /**\n             * Set to the `expected` argument for methods such as {@link assert.strictEqual()}.\n             */\n            expected: unknown;\n            /**\n             * Set to the passed in operator value.\n             */\n            operator: string;\n            /**\n             * Indicates if the message was auto-generated (`true`) or not.\n             */\n            generatedMessage: boolean;\n            /**\n             * Value is always `ERR_ASSERTION` to show that the error is an assertion error.\n             */\n            code: \"ERR_ASSERTION\";\n            constructor(options?: {\n                /** If provided, the error message is set to this value. */\n                message?: string | undefined;\n                /** The `actual` property on the error instance. */\n                actual?: unknown | undefined;\n                /** The `expected` property on the error instance. */\n                expected?: unknown | undefined;\n                /** The `operator` property on the error instance. */\n                operator?: string | undefined;\n                /** If provided, the generated stack trace omits frames before this function. */\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n                stackStartFn?: Function | undefined;\n            });\n        }\n        /**\n         * This feature is deprecated and will be removed in a future version.\n         * Please consider using alternatives such as the `mock` helper function.\n         * @since v14.2.0, v12.19.0\n         * @deprecated Deprecated\n         */\n        class CallTracker {\n            /**\n             * The wrapper function is expected to be called exactly `exact` times. If the\n             * function has not been called exactly `exact` times when `tracker.verify()` is called, then `tracker.verify()` will throw an\n             * error.\n             *\n             * ```js\n             * import assert from 'node:assert';\n             *\n             * // Creates call tracker.\n             * const tracker = new assert.CallTracker();\n             *\n             * function func() {}\n             *\n             * // Returns a function that wraps func() that must be called exact times\n             * // before tracker.verify().\n             * const callsfunc = tracker.calls(func);\n             * ```\n             * @since v14.2.0, v12.19.0\n             * @param [fn='A no-op function']\n             * @param [exact=1]\n             * @return A function that wraps `fn`.\n             */\n            calls(exact?: number): () => void;\n            calls<Func extends (...args: any[]) => any>(fn?: Func, exact?: number): Func;\n            /**\n             * Example:\n             *\n             * ```js\n             * import assert from 'node:assert';\n             *\n             * const tracker = new assert.CallTracker();\n             *\n             * function func() {}\n             * const callsfunc = tracker.calls(func);\n             * callsfunc(1, 2, 3);\n             *\n             * assert.deepStrictEqual(tracker.getCalls(callsfunc),\n             *                        [{ thisArg: undefined, arguments: [1, 2, 3] }]);\n             * ```\n             * @since v18.8.0, v16.18.0\n             * @return An array with all the calls to a tracked function.\n             */\n            getCalls(fn: Function): CallTrackerCall[];\n            /**\n             * The arrays contains information about the expected and actual number of calls of\n             * the functions that have not been called the expected number of times.\n             *\n             * ```js\n             * import assert from 'node:assert';\n             *\n             * // Creates call tracker.\n             * const tracker = new assert.CallTracker();\n             *\n             * function func() {}\n             *\n             * // Returns a function that wraps func() that must be called exact times\n             * // before tracker.verify().\n             * const callsfunc = tracker.calls(func, 2);\n             *\n             * // Returns an array containing information on callsfunc()\n             * console.log(tracker.report());\n             * // [\n             * //  {\n             * //    message: 'Expected the func function to be executed 2 time(s) but was\n             * //    executed 0 time(s).',\n             * //    actual: 0,\n             * //    expected: 2,\n             * //    operator: 'func',\n             * //    stack: stack trace\n             * //  }\n             * // ]\n             * ```\n             * @since v14.2.0, v12.19.0\n             * @return An array of objects containing information about the wrapper functions returned by {@link tracker.calls()}.\n             */\n            report(): CallTrackerReportInformation[];\n            /**\n             * Reset calls of the call tracker. If a tracked function is passed as an argument, the calls will be reset for it.\n             * If no arguments are passed, all tracked functions will be reset.\n             *\n             * ```js\n             * import assert from 'node:assert';\n             *\n             * const tracker = new assert.CallTracker();\n             *\n             * function func() {}\n             * const callsfunc = tracker.calls(func);\n             *\n             * callsfunc();\n             * // Tracker was called once\n             * assert.strictEqual(tracker.getCalls(callsfunc).length, 1);\n             *\n             * tracker.reset(callsfunc);\n             * assert.strictEqual(tracker.getCalls(callsfunc).length, 0);\n             * ```\n             * @since v18.8.0, v16.18.0\n             * @param fn a tracked function to reset.\n             */\n            reset(fn?: Function): void;\n            /**\n             * Iterates through the list of functions passed to {@link tracker.calls()} and will throw an error for functions that\n             * have not been called the expected number of times.\n             *\n             * ```js\n             * import assert from 'node:assert';\n             *\n             * // Creates call tracker.\n             * const tracker = new assert.CallTracker();\n             *\n             * function func() {}\n             *\n             * // Returns a function that wraps func() that must be called exact times\n             * // before tracker.verify().\n             * const callsfunc = tracker.calls(func, 2);\n             *\n             * callsfunc();\n             *\n             * // Will throw an error since callsfunc() was only called once.\n             * tracker.verify();\n             * ```\n             * @since v14.2.0, v12.19.0\n             */\n            verify(): void;\n        }\n        interface CallTrackerCall {\n            thisArg: object;\n            arguments: unknown[];\n        }\n        interface CallTrackerReportInformation {\n            message: string;\n            /** The actual number of times the function was called. */\n            actual: number;\n            /** The number of times the function was expected to be called. */\n            expected: number;\n            /** The name of the function that is wrapped. */\n            operator: string;\n            /** A stack trace of the function. */\n            stack: object;\n        }\n        type AssertPredicate = RegExp | (new() => object) | ((thrown: unknown) => boolean) | object | Error;\n        /**\n         * Throws an `AssertionError` with the provided error message or a default\n         * error message. If the `message` parameter is an instance of an `Error` then\n         * it will be thrown instead of the `AssertionError`.\n         *\n         * ```js\n         * import assert from 'node:assert/strict';\n         *\n         * assert.fail();\n         * // AssertionError [ERR_ASSERTION]: Failed\n         *\n         * assert.fail('boom');\n         * // AssertionError [ERR_ASSERTION]: boom\n         *\n         * assert.fail(new TypeError('need array'));\n         * // TypeError: need array\n         * ```\n         *\n         * Using `assert.fail()` with more than two arguments is possible but deprecated.\n         * See below for further details.\n         * @since v0.1.21\n         * @param [message='Failed']\n         */\n        function fail(message?: string | Error): never;\n        /** @deprecated since v10.0.0 - use fail([message]) or other assert functions instead. */\n        function fail(\n            actual: unknown,\n            expected: unknown,\n            message?: string | Error,\n            operator?: string,\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n            stackStartFn?: Function,\n        ): never;\n        /**\n         * Tests if `value` is truthy. It is equivalent to `assert.equal(!!value, true, message)`.\n         *\n         * If `value` is not truthy, an `AssertionError` is thrown with a `message` property set equal to the value of the `message` parameter. If the `message` parameter is `undefined`, a default\n         * error message is assigned. If the `message` parameter is an instance of an `Error` then it will be thrown instead of the `AssertionError`.\n         * If no arguments are passed in at all `message` will be set to the string:`` 'No value argument passed to `assert.ok()`' ``.\n         *\n         * Be aware that in the `repl` the error message will be different to the one\n         * thrown in a file! See below for further details.\n         *\n         * ```js\n         * import assert from 'node:assert/strict';\n         *\n         * assert.ok(true);\n         * // OK\n         * assert.ok(1);\n         * // OK\n         *\n         * assert.ok();\n         * // AssertionError: No value argument passed to `assert.ok()`\n         *\n         * assert.ok(false, 'it\\'s false');\n         * // AssertionError: it's false\n         *\n         * // In the repl:\n         * assert.ok(typeof 123 === 'string');\n         * // AssertionError: false == true\n         *\n         * // In a file (e.g. test.js):\n         * assert.ok(typeof 123 === 'string');\n         * // AssertionError: The expression evaluated to a falsy value:\n         * //\n         * //   assert.ok(typeof 123 === 'string')\n         *\n         * assert.ok(false);\n         * // AssertionError: The expression evaluated to a falsy value:\n         * //\n         * //   assert.ok(false)\n         *\n         * assert.ok(0);\n         * // AssertionError: The expression evaluated to a falsy value:\n         * //\n         * //   assert.ok(0)\n         * ```\n         *\n         * ```js\n         * import assert from 'node:assert/strict';\n         *\n         * // Using `assert()` works the same:\n         * assert(0);\n         * // AssertionError: The expression evaluated to a falsy value:\n         * //\n         * //   assert(0)\n         * ```\n         * @since v0.1.21\n         */\n        function ok(value: unknown, message?: string | Error): asserts value;\n        /**\n         * **Strict assertion mode**\n         *\n         * An alias of {@link strictEqual}.\n         *\n         * **Legacy assertion mode**\n         *\n         * > Stability: 3 - Legacy: Use {@link strictEqual} instead.\n         *\n         * Tests shallow, coercive equality between the `actual` and `expected` parameters\n         * using the [`==` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality). `NaN` is specially handled\n         * and treated as being identical if both sides are `NaN`.\n         *\n         * ```js\n         * import assert from 'node:assert';\n         *\n         * assert.equal(1, 1);\n         * // OK, 1 == 1\n         * assert.equal(1, '1');\n         * // OK, 1 == '1'\n         * assert.equal(NaN, NaN);\n         * // OK\n         *\n         * assert.equal(1, 2);\n         * // AssertionError: 1 == 2\n         * assert.equal({ a: { b: 1 } }, { a: { b: 1 } });\n         * // AssertionError: { a: { b: 1 } } == { a: { b: 1 } }\n         * ```\n         *\n         * If the values are not equal, an `AssertionError` is thrown with a `message` property set equal to the value of the `message` parameter. If the `message` parameter is undefined, a default\n         * error message is assigned. If the `message` parameter is an instance of an `Error` then it will be thrown instead of the `AssertionError`.\n         * @since v0.1.21\n         */\n        function equal(actual: unknown, expected: unknown, message?: string | Error): void;\n        /**\n         * **Strict assertion mode**\n         *\n         * An alias of {@link notStrictEqual}.\n         *\n         * **Legacy assertion mode**\n         *\n         * > Stability: 3 - Legacy: Use {@link notStrictEqual} instead.\n         *\n         * Tests shallow, coercive inequality with the [`!=` operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Inequality). `NaN` is\n         * specially handled and treated as being identical if both sides are `NaN`.\n         *\n         * ```js\n         * import assert from 'node:assert';\n         *\n         * assert.notEqual(1, 2);\n         * // OK\n         *\n         * assert.notEqual(1, 1);\n         * // AssertionError: 1 != 1\n         *\n         * assert.notEqual(1, '1');\n         * // AssertionError: 1 != '1'\n         * ```\n         *\n         * If the values are equal, an `AssertionError` is thrown with a `message` property set equal to the value of the `message` parameter. If the `message` parameter is undefined, a default error\n         * message is assigned. If the `message` parameter is an instance of an `Error` then it will be thrown instead of the `AssertionError`.\n         * @since v0.1.21\n         */\n        function notEqual(actual: unknown, expected: unknown, message?: string | Error): void;\n        /**\n         * **Strict assertion mode**\n         *\n         * An alias of {@link deepStrictEqual}.\n         *\n         * **Legacy assertion mode**\n         *\n         * > Stability: 3 - Legacy: Use {@link deepStrictEqual} instead.\n         *\n         * Tests for deep equality between the `actual` and `expected` parameters. Consider\n         * using {@link deepStrictEqual} instead. {@link deepEqual} can have\n         * surprising results.\n         *\n         * _Deep equality_ means that the enumerable \"own\" properties of child objects\n         * are also recursively evaluated by the following rules.\n         * @since v0.1.21\n         */\n        function deepEqual(actual: unknown, expected: unknown, message?: string | Error): void;\n        /**\n         * **Strict assertion mode**\n         *\n         * An alias of {@link notDeepStrictEqual}.\n         *\n         * **Legacy assertion mode**\n         *\n         * > Stability: 3 - Legacy: Use {@link notDeepStrictEqual} instead.\n         *\n         * Tests for any deep inequality. Opposite of {@link deepEqual}.\n         *\n         * ```js\n         * import assert from 'node:assert';\n         *\n         * const obj1 = {\n         *   a: {\n         *     b: 1,\n         *   },\n         * };\n         * const obj2 = {\n         *   a: {\n         *     b: 2,\n         *   },\n         * };\n         * const obj3 = {\n         *   a: {\n         *     b: 1,\n         *   },\n         * };\n         * const obj4 = { __proto__: obj1 };\n         *\n         * assert.notDeepEqual(obj1, obj1);\n         * // AssertionError: { a: { b: 1 } } notDeepEqual { a: { b: 1 } }\n         *\n         * assert.notDeepEqual(obj1, obj2);\n         * // OK\n         *\n         * assert.notDeepEqual(obj1, obj3);\n         * // AssertionError: { a: { b: 1 } } notDeepEqual { a: { b: 1 } }\n         *\n         * assert.notDeepEqual(obj1, obj4);\n         * // OK\n         * ```\n         *\n         * If the values are deeply equal, an `AssertionError` is thrown with a `message` property set equal to the value of the `message` parameter. If the `message` parameter is undefined, a default\n         * error message is assigned. If the `message` parameter is an instance of an `Error` then it will be thrown\n         * instead of the `AssertionError`.\n         * @since v0.1.21\n         */\n        function notDeepEqual(actual: unknown, expected: unknown, message?: string | Error): void;\n        /**\n         * Tests strict equality between the `actual` and `expected` parameters as\n         * determined by [`Object.is()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n         *\n         * ```js\n         * import assert from 'node:assert/strict';\n         *\n         * assert.strictEqual(1, 2);\n         * // AssertionError [ERR_ASSERTION]: Expected inputs to be strictly equal:\n         * //\n         * // 1 !== 2\n         *\n         * assert.strictEqual(1, 1);\n         * // OK\n         *\n         * assert.strictEqual('Hello foobar', 'Hello World!');\n         * // AssertionError [ERR_ASSERTION]: Expected inputs to be strictly equal:\n         * // + actual - expected\n         * //\n         * // + 'Hello foobar'\n         * // - 'Hello World!'\n         * //          ^\n         *\n         * const apples = 1;\n         * const oranges = 2;\n         * assert.strictEqual(apples, oranges, `apples ${apples} !== oranges ${oranges}`);\n         * // AssertionError [ERR_ASSERTION]: apples 1 !== oranges 2\n         *\n         * assert.strictEqual(1, '1', new TypeError('Inputs are not identical'));\n         * // TypeError: Inputs are not identical\n         * ```\n         *\n         * If the values are not strictly equal, an `AssertionError` is thrown with a `message` property set equal to the value of the `message` parameter. If the `message` parameter is undefined, a\n         * default error message is assigned. If the `message` parameter is an instance of an `Error` then it will be thrown\n         * instead of the `AssertionError`.\n         * @since v0.1.21\n         */\n        function strictEqual<T>(actual: unknown, expected: T, message?: string | Error): asserts actual is T;\n        /**\n         * Tests strict inequality between the `actual` and `expected` parameters as\n         * determined by [`Object.is()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is).\n         *\n         * ```js\n         * import assert from 'node:assert/strict';\n         *\n         * assert.notStrictEqual(1, 2);\n         * // OK\n         *\n         * assert.notStrictEqual(1, 1);\n         * // AssertionError [ERR_ASSERTION]: Expected \"actual\" to be strictly unequal to:\n         * //\n         * // 1\n         *\n         * assert.notStrictEqual(1, '1');\n         * // OK\n         * ```\n         *\n         * If the values are strictly equal, an `AssertionError` is thrown with a `message` property set equal to the value of the `message` parameter. If the `message` parameter is undefined, a\n         * default error message is assigned. If the `message` parameter is an instance of an `Error` then it will be thrown\n         * instead of the `AssertionError`.\n         * @since v0.1.21\n         */\n        function notStrictEqual(actual: unknown, expected: unknown, message?: string | Error): void;\n        /**\n         * Tests for deep equality between the `actual` and `expected` parameters.\n         * \"Deep\" equality means that the enumerable \"own\" properties of child objects\n         * are recursively evaluated also by the following rules.\n         * @since v1.2.0\n         */\n        function deepStrictEqual<T>(actual: unknown, expected: T, message?: string | Error): asserts actual is T;\n        /**\n         * Tests for deep strict inequality. Opposite of {@link deepStrictEqual}.\n         *\n         * ```js\n         * import assert from 'node:assert/strict';\n         *\n         * assert.notDeepStrictEqual({ a: 1 }, { a: '1' });\n         * // OK\n         * ```\n         *\n         * If the values are deeply and strictly equal, an `AssertionError` is thrown\n         * with a `message` property set equal to the value of the `message` parameter. If\n         * the `message` parameter is undefined, a default error message is assigned. If\n         * the `message` parameter is an instance of an `Error` then it will be thrown\n         * instead of the `AssertionError`.\n         * @since v1.2.0\n         */\n        function notDeepStrictEqual(actual: unknown, expected: unknown, message?: string | Error): void;\n        /**\n         * Expects the function `fn` to throw an error.\n         *\n         * If specified, `error` can be a [`Class`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes),\n         * [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions), a validation function,\n         * a validation object where each property will be tested for strict deep equality,\n         * or an instance of error where each property will be tested for strict deep\n         * equality including the non-enumerable `message` and `name` properties. When\n         * using an object, it is also possible to use a regular expression, when\n         * validating against a string property. See below for examples.\n         *\n         * If specified, `message` will be appended to the message provided by the `AssertionError` if the `fn` call fails to throw or in case the error validation\n         * fails.\n         *\n         * Custom validation object/error instance:\n         *\n         * ```js\n         * import assert from 'node:assert/strict';\n         *\n         * const err = new TypeError('Wrong value');\n         * err.code = 404;\n         * err.foo = 'bar';\n         * err.info = {\n         *   nested: true,\n         *   baz: 'text',\n         * };\n         * err.reg = /abc/i;\n         *\n         * assert.throws(\n         *   () => {\n         *     throw err;\n         *   },\n         *   {\n         *     name: 'TypeError',\n         *     message: 'Wrong value',\n         *     info: {\n         *       nested: true,\n         *       baz: 'text',\n         *     },\n         *     // Only properties on the validation object will be tested for.\n         *     // Using nested objects requires all properties to be present. Otherwise\n         *     // the validation is going to fail.\n         *   },\n         * );\n         *\n         * // Using regular expressions to validate error properties:\n         * assert.throws(\n         *   () => {\n         *     throw err;\n         *   },\n         *   {\n         *     // The `name` and `message` properties are strings and using regular\n         *     // expressions on those will match against the string. If they fail, an\n         *     // error is thrown.\n         *     name: /^TypeError$/,\n         *     message: /Wrong/,\n         *     foo: 'bar',\n         *     info: {\n         *       nested: true,\n         *       // It is not possible to use regular expressions for nested properties!\n         *       baz: 'text',\n         *     },\n         *     // The `reg` property contains a regular expression and only if the\n         *     // validation object contains an identical regular expression, it is going\n         *     // to pass.\n         *     reg: /abc/i,\n         *   },\n         * );\n         *\n         * // Fails due to the different `message` and `name` properties:\n         * assert.throws(\n         *   () => {\n         *     const otherErr = new Error('Not found');\n         *     // Copy all enumerable properties from `err` to `otherErr`.\n         *     for (const [key, value] of Object.entries(err)) {\n         *       otherErr[key] = value;\n         *     }\n         *     throw otherErr;\n         *   },\n         *   // The error's `message` and `name` properties will also be checked when using\n         *   // an error as validation object.\n         *   err,\n         * );\n         * ```\n         *\n         * Validate instanceof using constructor:\n         *\n         * ```js\n         * import assert from 'node:assert/strict';\n         *\n         * assert.throws(\n         *   () => {\n         *     throw new Error('Wrong value');\n         *   },\n         *   Error,\n         * );\n         * ```\n         *\n         * Validate error message using [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions):\n         *\n         * Using a regular expression runs `.toString` on the error object, and will\n         * therefore also include the error name.\n         *\n         * ```js\n         * import assert from 'node:assert/strict';\n         *\n         * assert.throws(\n         *   () => {\n         *     throw new Error('Wrong value');\n         *   },\n         *   /^Error: Wrong value$/,\n         * );\n         * ```\n         *\n         * Custom error validation:\n         *\n         * The function must return `true` to indicate all internal validations passed.\n         * It will otherwise fail with an `AssertionError`.\n         *\n         * ```js\n         * import assert from 'node:assert/strict';\n         *\n         * assert.throws(\n         *   () => {\n         *     throw new Error('Wrong value');\n         *   },\n         *   (err) => {\n         *     assert(err instanceof Error);\n         *     assert(/value/.test(err));\n         *     // Avoid returning anything from validation functions besides `true`.\n         *     // Otherwise, it's not clear what part of the validation failed. Instead,\n         *     // throw an error about the specific validation that failed (as done in this\n         *     // example) and add as much helpful debugging information to that error as\n         *     // possible.\n         *     return true;\n         *   },\n         *   'unexpected error',\n         * );\n         * ```\n         *\n         * `error` cannot be a string. If a string is provided as the second\n         * argument, then `error` is assumed to be omitted and the string will be used for `message` instead. This can lead to easy-to-miss mistakes. Using the same\n         * message as the thrown error message is going to result in an `ERR_AMBIGUOUS_ARGUMENT` error. Please read the example below carefully if using\n         * a string as the second argument gets considered:\n         *\n         * ```js\n         * import assert from 'node:assert/strict';\n         *\n         * function throwingFirst() {\n         *   throw new Error('First');\n         * }\n         *\n         * function throwingSecond() {\n         *   throw new Error('Second');\n         * }\n         *\n         * function notThrowing() {}\n         *\n         * // The second argument is a string and the input function threw an Error.\n         * // The first case will not throw as it does not match for the error message\n         * // thrown by the input function!\n         * assert.throws(throwingFirst, 'Second');\n         * // In the next example the message has no benefit over the message from the\n         * // error and since it is not clear if the user intended to actually match\n         * // against the error message, Node.js throws an `ERR_AMBIGUOUS_ARGUMENT` error.\n         * assert.throws(throwingSecond, 'Second');\n         * // TypeError [ERR_AMBIGUOUS_ARGUMENT]\n         *\n         * // The string is only used (as message) in case the function does not throw:\n         * assert.throws(notThrowing, 'Second');\n         * // AssertionError [ERR_ASSERTION]: Missing expected exception: Second\n         *\n         * // If it was intended to match for the error message do this instead:\n         * // It does not throw because the error messages match.\n         * assert.throws(throwingSecond, /Second$/);\n         *\n         * // If the error message does not match, an AssertionError is thrown.\n         * assert.throws(throwingFirst, /Second$/);\n         * // AssertionError [ERR_ASSERTION]\n         * ```\n         *\n         * Due to the confusing error-prone notation, avoid a string as the second\n         * argument.\n         * @since v0.1.21\n         */\n        function throws(block: () => unknown, message?: string | Error): void;\n        function throws(block: () => unknown, error: AssertPredicate, message?: string | Error): void;\n        /**\n         * Asserts that the function `fn` does not throw an error.\n         *\n         * Using `assert.doesNotThrow()` is actually not useful because there\n         * is no benefit in catching an error and then rethrowing it. Instead, consider\n         * adding a comment next to the specific code path that should not throw and keep\n         * error messages as expressive as possible.\n         *\n         * When `assert.doesNotThrow()` is called, it will immediately call the `fn` function.\n         *\n         * If an error is thrown and it is the same type as that specified by the `error` parameter, then an `AssertionError` is thrown. If the error is of a\n         * different type, or if the `error` parameter is undefined, the error is\n         * propagated back to the caller.\n         *\n         * If specified, `error` can be a [`Class`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes),\n         * [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions), or a validation\n         * function. See {@link throws} for more details.\n         *\n         * The following, for instance, will throw the `TypeError` because there is no\n         * matching error type in the assertion:\n         *\n         * ```js\n         * import assert from 'node:assert/strict';\n         *\n         * assert.doesNotThrow(\n         *   () => {\n         *     throw new TypeError('Wrong value');\n         *   },\n         *   SyntaxError,\n         * );\n         * ```\n         *\n         * However, the following will result in an `AssertionError` with the message\n         * 'Got unwanted exception...':\n         *\n         * ```js\n         * import assert from 'node:assert/strict';\n         *\n         * assert.doesNotThrow(\n         *   () => {\n         *     throw new TypeError('Wrong value');\n         *   },\n         *   TypeError,\n         * );\n         * ```\n         *\n         * If an `AssertionError` is thrown and a value is provided for the `message` parameter, the value of `message` will be appended to the `AssertionError` message:\n         *\n         * ```js\n         * import assert from 'node:assert/strict';\n         *\n         * assert.doesNotThrow(\n         *   () => {\n         *     throw new TypeError('Wrong value');\n         *   },\n         *   /Wrong value/,\n         *   'Whoops',\n         * );\n         * // Throws: AssertionError: Got unwanted exception: Whoops\n         * ```\n         * @since v0.1.21\n         */\n        function doesNotThrow(block: () => unknown, message?: string | Error): void;\n        function doesNotThrow(block: () => unknown, error: AssertPredicate, message?: string | Error): void;\n        /**\n         * Throws `value` if `value` is not `undefined` or `null`. This is useful when\n         * testing the `error` argument in callbacks. The stack trace contains all frames\n         * from the error passed to `ifError()` including the potential new frames for `ifError()` itself.\n         *\n         * ```js\n         * import assert from 'node:assert/strict';\n         *\n         * assert.ifError(null);\n         * // OK\n         * assert.ifError(0);\n         * // AssertionError [ERR_ASSERTION]: ifError got unwanted exception: 0\n         * assert.ifError('error');\n         * // AssertionError [ERR_ASSERTION]: ifError got unwanted exception: 'error'\n         * assert.ifError(new Error());\n         * // AssertionError [ERR_ASSERTION]: ifError got unwanted exception: Error\n         *\n         * // Create some random error frames.\n         * let err;\n         * (function errorFrame() {\n         *   err = new Error('test error');\n         * })();\n         *\n         * (function ifErrorFrame() {\n         *   assert.ifError(err);\n         * })();\n         * // AssertionError [ERR_ASSERTION]: ifError got unwanted exception: test error\n         * //     at ifErrorFrame\n         * //     at errorFrame\n         * ```\n         * @since v0.1.97\n         */\n        function ifError(value: unknown): asserts value is null | undefined;\n        /**\n         * Awaits the `asyncFn` promise or, if `asyncFn` is a function, immediately\n         * calls the function and awaits the returned promise to complete. It will then\n         * check that the promise is rejected.\n         *\n         * If `asyncFn` is a function and it throws an error synchronously, `assert.rejects()` will return a rejected `Promise` with that error. If the\n         * function does not return a promise, `assert.rejects()` will return a rejected `Promise` with an [ERR_INVALID_RETURN_VALUE](https://nodejs.org/docs/latest-v22.x/api/errors.html#err_invalid_return_value)\n         * error. In both cases the error handler is skipped.\n         *\n         * Besides the async nature to await the completion behaves identically to {@link throws}.\n         *\n         * If specified, `error` can be a [`Class`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes),\n         * [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions), a validation function,\n         * an object where each property will be tested for, or an instance of error where\n         * each property will be tested for including the non-enumerable `message` and `name` properties.\n         *\n         * If specified, `message` will be the message provided by the `{@link AssertionError}` if the `asyncFn` fails to reject.\n         *\n         * ```js\n         * import assert from 'node:assert/strict';\n         *\n         * await assert.rejects(\n         *   async () => {\n         *     throw new TypeError('Wrong value');\n         *   },\n         *   {\n         *     name: 'TypeError',\n         *     message: 'Wrong value',\n         *   },\n         * );\n         * ```\n         *\n         * ```js\n         * import assert from 'node:assert/strict';\n         *\n         * await assert.rejects(\n         *   async () => {\n         *     throw new TypeError('Wrong value');\n         *   },\n         *   (err) => {\n         *     assert.strictEqual(err.name, 'TypeError');\n         *     assert.strictEqual(err.message, 'Wrong value');\n         *     return true;\n         *   },\n         * );\n         * ```\n         *\n         * ```js\n         * import assert from 'node:assert/strict';\n         *\n         * assert.rejects(\n         *   Promise.reject(new Error('Wrong value')),\n         *   Error,\n         * ).then(() => {\n         *   // ...\n         * });\n         * ```\n         *\n         * `error` cannot be a string. If a string is provided as the second argument, then `error` is assumed to\n         * be omitted and the string will be used for `message` instead. This can lead to easy-to-miss mistakes. Please read the\n         * example in {@link throws} carefully if using a string as the second argument gets considered.\n         * @since v10.0.0\n         */\n        function rejects(block: (() => Promise<unknown>) | Promise<unknown>, message?: string | Error): Promise<void>;\n        function rejects(\n            block: (() => Promise<unknown>) | Promise<unknown>,\n            error: AssertPredicate,\n            message?: string | Error,\n        ): Promise<void>;\n        /**\n         * Awaits the `asyncFn` promise or, if `asyncFn` is a function, immediately\n         * calls the function and awaits the returned promise to complete. It will then\n         * check that the promise is not rejected.\n         *\n         * If `asyncFn` is a function and it throws an error synchronously, `assert.doesNotReject()` will return a rejected `Promise` with that error. If\n         * the function does not return a promise, `assert.doesNotReject()` will return a\n         * rejected `Promise` with an [ERR_INVALID_RETURN_VALUE](https://nodejs.org/docs/latest-v22.x/api/errors.html#err_invalid_return_value) error. In both cases\n         * the error handler is skipped.\n         *\n         * Using `assert.doesNotReject()` is actually not useful because there is little\n         * benefit in catching a rejection and then rejecting it again. Instead, consider\n         * adding a comment next to the specific code path that should not reject and keep\n         * error messages as expressive as possible.\n         *\n         * If specified, `error` can be a [`Class`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes),\n         * [`RegExp`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions), or a validation\n         * function. See {@link throws} for more details.\n         *\n         * Besides the async nature to await the completion behaves identically to {@link doesNotThrow}.\n         *\n         * ```js\n         * import assert from 'node:assert/strict';\n         *\n         * await assert.doesNotReject(\n         *   async () => {\n         *     throw new TypeError('Wrong value');\n         *   },\n         *   SyntaxError,\n         * );\n         * ```\n         *\n         * ```js\n         * import assert from 'node:assert/strict';\n         *\n         * assert.doesNotReject(Promise.reject(new TypeError('Wrong value')))\n         *   .then(() => {\n         *     // ...\n         *   });\n         * ```\n         * @since v10.0.0\n         */\n        function doesNotReject(\n            block: (() => Promise<unknown>) | Promise<unknown>,\n            message?: string | Error,\n        ): Promise<void>;\n        function doesNotReject(\n            block: (() => Promise<unknown>) | Promise<unknown>,\n            error: AssertPredicate,\n            message?: string | Error,\n        ): Promise<void>;\n        /**\n         * Expects the `string` input to match the regular expression.\n         *\n         * ```js\n         * import assert from 'node:assert/strict';\n         *\n         * assert.match('I will fail', /pass/);\n         * // AssertionError [ERR_ASSERTION]: The input did not match the regular ...\n         *\n         * assert.match(123, /pass/);\n         * // AssertionError [ERR_ASSERTION]: The \"string\" argument must be of type string.\n         *\n         * assert.match('I will pass', /pass/);\n         * // OK\n         * ```\n         *\n         * If the values do not match, or if the `string` argument is of another type than `string`, an `{@link AssertionError}` is thrown with a `message` property set equal\n         * to the value of the `message` parameter. If the `message` parameter is\n         * undefined, a default error message is assigned. If the `message` parameter is an\n         * instance of an [Error](https://nodejs.org/docs/latest-v22.x/api/errors.html#class-error) then it will be thrown instead of the `{@link AssertionError}`.\n         * @since v13.6.0, v12.16.0\n         */\n        function match(value: string, regExp: RegExp, message?: string | Error): void;\n        /**\n         * Expects the `string` input not to match the regular expression.\n         *\n         * ```js\n         * import assert from 'node:assert/strict';\n         *\n         * assert.doesNotMatch('I will fail', /fail/);\n         * // AssertionError [ERR_ASSERTION]: The input was expected to not match the ...\n         *\n         * assert.doesNotMatch(123, /pass/);\n         * // AssertionError [ERR_ASSERTION]: The \"string\" argument must be of type string.\n         *\n         * assert.doesNotMatch('I will pass', /different/);\n         * // OK\n         * ```\n         *\n         * If the values do match, or if the `string` argument is of another type than `string`, an `{@link AssertionError}` is thrown with a `message` property set equal\n         * to the value of the `message` parameter. If the `message` parameter is\n         * undefined, a default error message is assigned. If the `message` parameter is an\n         * instance of an [Error](https://nodejs.org/docs/latest-v22.x/api/errors.html#class-error) then it will be thrown instead of the `{@link AssertionError}`.\n         * @since v13.6.0, v12.16.0\n         */\n        function doesNotMatch(value: string, regExp: RegExp, message?: string | Error): void;\n        /**\n         * Tests for partial deep equality between the `actual` and `expected` parameters.\n         * \"Deep\" equality means that the enumerable \"own\" properties of child objects\n         * are recursively evaluated also by the following rules. \"Partial\" equality means\n         * that only properties that exist on the `expected` parameter are going to be\n         * compared.\n         *\n         * This method always passes the same test cases as `assert.deepStrictEqual()`,\n         * behaving as a super set of it.\n         * @since v22.13.0\n         */\n        function partialDeepStrictEqual(actual: unknown, expected: unknown, message?: string | Error): void;\n        /**\n         * In strict assertion mode, non-strict methods behave like their corresponding strict methods. For example,\n         * {@link deepEqual} will behave like {@link deepStrictEqual}.\n         *\n         * In strict assertion mode, error messages for objects display a diff. In legacy assertion mode, error\n         * messages for objects display the objects, often truncated.\n         *\n         * To use strict assertion mode:\n         *\n         * ```js\n         * import { strict as assert } from 'node:assert';\n         * import assert from 'node:assert/strict';\n         * ```\n         *\n         * Example error diff:\n         *\n         * ```js\n         * import { strict as assert } from 'node:assert';\n         *\n         * assert.deepEqual([[[1, 2, 3]], 4, 5], [[[1, 2, '3']], 4, 5]);\n         * // AssertionError: Expected inputs to be strictly deep-equal:\n         * // + actual - expected ... Lines skipped\n         * //\n         * //   [\n         * //     [\n         * // ...\n         * //       2,\n         * // +     3\n         * // -     '3'\n         * //     ],\n         * // ...\n         * //     5\n         * //   ]\n         * ```\n         *\n         * To deactivate the colors, use the `NO_COLOR` or `NODE_DISABLE_COLORS` environment variables. This will also\n         * deactivate the colors in the REPL. For more on color support in terminal environments, read the tty\n         * `getColorDepth()` documentation.\n         *\n         * @since v15.0.0, v13.9.0, v12.16.2, v9.9.0\n         */\n        namespace strict {\n            type AssertionError = assert.AssertionError;\n            type AssertPredicate = assert.AssertPredicate;\n            type CallTrackerCall = assert.CallTrackerCall;\n            type CallTrackerReportInformation = assert.CallTrackerReportInformation;\n        }\n        const strict:\n            & Omit<\n                typeof assert,\n                | \"equal\"\n                | \"notEqual\"\n                | \"deepEqual\"\n                | \"notDeepEqual\"\n                | \"ok\"\n                | \"strictEqual\"\n                | \"deepStrictEqual\"\n                | \"ifError\"\n                | \"strict\"\n                | \"AssertionError\"\n            >\n            & {\n                (value: unknown, message?: string | Error): asserts value;\n                equal: typeof strictEqual;\n                notEqual: typeof notStrictEqual;\n                deepEqual: typeof deepStrictEqual;\n                notDeepEqual: typeof notDeepStrictEqual;\n                // Mapped types and assertion functions are incompatible?\n                // TS2775: Assertions require every name in the call target\n                // to be declared with an explicit type annotation.\n                ok: typeof ok;\n                strictEqual: typeof strictEqual;\n                deepStrictEqual: typeof deepStrictEqual;\n                ifError: typeof ifError;\n                strict: typeof strict;\n                AssertionError: typeof AssertionError;\n            };\n    }\n    export = assert;\n}\ndeclare module \"node:assert\" {\n    import assert = require(\"assert\");\n    export = assert;\n}\n",
  '@types/node/assert/strict.d.ts':
    'declare module "assert/strict" {\n    import { strict } from "node:assert";\n    export = strict;\n}\ndeclare module "node:assert/strict" {\n    import { strict } from "node:assert";\n    export = strict;\n}\n',
  '@types/node/async_hooks.d.ts':
    "/**\n * We strongly discourage the use of the `async_hooks` API.\n * Other APIs that can cover most of its use cases include:\n *\n * * [`AsyncLocalStorage`](https://nodejs.org/docs/latest-v22.x/api/async_context.html#class-asynclocalstorage) tracks async context\n * * [`process.getActiveResourcesInfo()`](https://nodejs.org/docs/latest-v22.x/api/process.html#processgetactiveresourcesinfo) tracks active resources\n *\n * The `node:async_hooks` module provides an API to track asynchronous resources.\n * It can be accessed using:\n *\n * ```js\n * import async_hooks from 'node:async_hooks';\n * ```\n * @experimental\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/async_hooks.js)\n */\ndeclare module \"async_hooks\" {\n    /**\n     * ```js\n     * import { executionAsyncId } from 'node:async_hooks';\n     * import fs from 'node:fs';\n     *\n     * console.log(executionAsyncId());  // 1 - bootstrap\n     * const path = '.';\n     * fs.open(path, 'r', (err, fd) => {\n     *   console.log(executionAsyncId());  // 6 - open()\n     * });\n     * ```\n     *\n     * The ID returned from `executionAsyncId()` is related to execution timing, not\n     * causality (which is covered by `triggerAsyncId()`):\n     *\n     * ```js\n     * const server = net.createServer((conn) => {\n     *   // Returns the ID of the server, not of the new connection, because the\n     *   // callback runs in the execution scope of the server's MakeCallback().\n     *   async_hooks.executionAsyncId();\n     *\n     * }).listen(port, () => {\n     *   // Returns the ID of a TickObject (process.nextTick()) because all\n     *   // callbacks passed to .listen() are wrapped in a nextTick().\n     *   async_hooks.executionAsyncId();\n     * });\n     * ```\n     *\n     * Promise contexts may not get precise `executionAsyncIds` by default.\n     * See the section on [promise execution tracking](https://nodejs.org/docs/latest-v22.x/api/async_hooks.html#promise-execution-tracking).\n     * @since v8.1.0\n     * @return The `asyncId` of the current execution context. Useful to track when something calls.\n     */\n    function executionAsyncId(): number;\n    /**\n     * Resource objects returned by `executionAsyncResource()` are most often internal\n     * Node.js handle objects with undocumented APIs. Using any functions or properties\n     * on the object is likely to crash your application and should be avoided.\n     *\n     * Using `executionAsyncResource()` in the top-level execution context will\n     * return an empty object as there is no handle or request object to use,\n     * but having an object representing the top-level can be helpful.\n     *\n     * ```js\n     * import { open } from 'node:fs';\n     * import { executionAsyncId, executionAsyncResource } from 'node:async_hooks';\n     *\n     * console.log(executionAsyncId(), executionAsyncResource());  // 1 {}\n     * open(new URL(import.meta.url), 'r', (err, fd) => {\n     *   console.log(executionAsyncId(), executionAsyncResource());  // 7 FSReqWrap\n     * });\n     * ```\n     *\n     * This can be used to implement continuation local storage without the\n     * use of a tracking `Map` to store the metadata:\n     *\n     * ```js\n     * import { createServer } from 'node:http';\n     * import {\n     *   executionAsyncId,\n     *   executionAsyncResource,\n     *   createHook,\n     * } from 'node:async_hooks';\n     * const sym = Symbol('state'); // Private symbol to avoid pollution\n     *\n     * createHook({\n     *   init(asyncId, type, triggerAsyncId, resource) {\n     *     const cr = executionAsyncResource();\n     *     if (cr) {\n     *       resource[sym] = cr[sym];\n     *     }\n     *   },\n     * }).enable();\n     *\n     * const server = createServer((req, res) => {\n     *   executionAsyncResource()[sym] = { state: req.url };\n     *   setTimeout(function() {\n     *     res.end(JSON.stringify(executionAsyncResource()[sym]));\n     *   }, 100);\n     * }).listen(3000);\n     * ```\n     * @since v13.9.0, v12.17.0\n     * @return The resource representing the current execution. Useful to store data within the resource.\n     */\n    function executionAsyncResource(): object;\n    /**\n     * ```js\n     * const server = net.createServer((conn) => {\n     *   // The resource that caused (or triggered) this callback to be called\n     *   // was that of the new connection. Thus the return value of triggerAsyncId()\n     *   // is the asyncId of \"conn\".\n     *   async_hooks.triggerAsyncId();\n     *\n     * }).listen(port, () => {\n     *   // Even though all callbacks passed to .listen() are wrapped in a nextTick()\n     *   // the callback itself exists because the call to the server's .listen()\n     *   // was made. So the return value would be the ID of the server.\n     *   async_hooks.triggerAsyncId();\n     * });\n     * ```\n     *\n     * Promise contexts may not get valid `triggerAsyncId`s by default. See\n     * the section on [promise execution tracking](https://nodejs.org/docs/latest-v22.x/api/async_hooks.html#promise-execution-tracking).\n     * @return The ID of the resource responsible for calling the callback that is currently being executed.\n     */\n    function triggerAsyncId(): number;\n    interface HookCallbacks {\n        /**\n         * Called when a class is constructed that has the possibility to emit an asynchronous event.\n         * @param asyncId A unique ID for the async resource\n         * @param type The type of the async resource\n         * @param triggerAsyncId The unique ID of the async resource in whose execution context this async resource was created\n         * @param resource Reference to the resource representing the async operation, needs to be released during destroy\n         */\n        init?(asyncId: number, type: string, triggerAsyncId: number, resource: object): void;\n        /**\n         * When an asynchronous operation is initiated or completes a callback is called to notify the user.\n         * The before callback is called just before said callback is executed.\n         * @param asyncId the unique identifier assigned to the resource about to execute the callback.\n         */\n        before?(asyncId: number): void;\n        /**\n         * Called immediately after the callback specified in `before` is completed.\n         *\n         * If an uncaught exception occurs during execution of the callback, then `after` will run after the `'uncaughtException'` event is emitted or a `domain`'s handler runs.\n         * @param asyncId the unique identifier assigned to the resource which has executed the callback.\n         */\n        after?(asyncId: number): void;\n        /**\n         * Called when a promise has resolve() called. This may not be in the same execution id\n         * as the promise itself.\n         * @param asyncId the unique id for the promise that was resolve()d.\n         */\n        promiseResolve?(asyncId: number): void;\n        /**\n         * Called after the resource corresponding to asyncId is destroyed\n         * @param asyncId a unique ID for the async resource\n         */\n        destroy?(asyncId: number): void;\n    }\n    interface AsyncHook {\n        /**\n         * Enable the callbacks for a given AsyncHook instance. If no callbacks are provided enabling is a noop.\n         */\n        enable(): this;\n        /**\n         * Disable the callbacks for a given AsyncHook instance from the global pool of AsyncHook callbacks to be executed. Once a hook has been disabled it will not be called again until enabled.\n         */\n        disable(): this;\n    }\n    /**\n     * Registers functions to be called for different lifetime events of each async\n     * operation.\n     *\n     * The callbacks `init()`/`before()`/`after()`/`destroy()` are called for the\n     * respective asynchronous event during a resource's lifetime.\n     *\n     * All callbacks are optional. For example, if only resource cleanup needs to\n     * be tracked, then only the `destroy` callback needs to be passed. The\n     * specifics of all functions that can be passed to `callbacks` is in the `Hook Callbacks` section.\n     *\n     * ```js\n     * import { createHook } from 'node:async_hooks';\n     *\n     * const asyncHook = createHook({\n     *   init(asyncId, type, triggerAsyncId, resource) { },\n     *   destroy(asyncId) { },\n     * });\n     * ```\n     *\n     * The callbacks will be inherited via the prototype chain:\n     *\n     * ```js\n     * class MyAsyncCallbacks {\n     *   init(asyncId, type, triggerAsyncId, resource) { }\n     *   destroy(asyncId) {}\n     * }\n     *\n     * class MyAddedCallbacks extends MyAsyncCallbacks {\n     *   before(asyncId) { }\n     *   after(asyncId) { }\n     * }\n     *\n     * const asyncHook = async_hooks.createHook(new MyAddedCallbacks());\n     * ```\n     *\n     * Because promises are asynchronous resources whose lifecycle is tracked\n     * via the async hooks mechanism, the `init()`, `before()`, `after()`, and`destroy()` callbacks _must not_ be async functions that return promises.\n     * @since v8.1.0\n     * @param callbacks The `Hook Callbacks` to register\n     * @return Instance used for disabling and enabling hooks\n     */\n    function createHook(callbacks: HookCallbacks): AsyncHook;\n    interface AsyncResourceOptions {\n        /**\n         * The ID of the execution context that created this async event.\n         * @default executionAsyncId()\n         */\n        triggerAsyncId?: number | undefined;\n        /**\n         * Disables automatic `emitDestroy` when the object is garbage collected.\n         * This usually does not need to be set (even if `emitDestroy` is called\n         * manually), unless the resource's `asyncId` is retrieved and the\n         * sensitive API's `emitDestroy` is called with it.\n         * @default false\n         */\n        requireManualDestroy?: boolean | undefined;\n    }\n    /**\n     * The class `AsyncResource` is designed to be extended by the embedder's async\n     * resources. Using this, users can easily trigger the lifetime events of their\n     * own resources.\n     *\n     * The `init` hook will trigger when an `AsyncResource` is instantiated.\n     *\n     * The following is an overview of the `AsyncResource` API.\n     *\n     * ```js\n     * import { AsyncResource, executionAsyncId } from 'node:async_hooks';\n     *\n     * // AsyncResource() is meant to be extended. Instantiating a\n     * // new AsyncResource() also triggers init. If triggerAsyncId is omitted then\n     * // async_hook.executionAsyncId() is used.\n     * const asyncResource = new AsyncResource(\n     *   type, { triggerAsyncId: executionAsyncId(), requireManualDestroy: false },\n     * );\n     *\n     * // Run a function in the execution context of the resource. This will\n     * // * establish the context of the resource\n     * // * trigger the AsyncHooks before callbacks\n     * // * call the provided function `fn` with the supplied arguments\n     * // * trigger the AsyncHooks after callbacks\n     * // * restore the original execution context\n     * asyncResource.runInAsyncScope(fn, thisArg, ...args);\n     *\n     * // Call AsyncHooks destroy callbacks.\n     * asyncResource.emitDestroy();\n     *\n     * // Return the unique ID assigned to the AsyncResource instance.\n     * asyncResource.asyncId();\n     *\n     * // Return the trigger ID for the AsyncResource instance.\n     * asyncResource.triggerAsyncId();\n     * ```\n     */\n    class AsyncResource {\n        /**\n         * AsyncResource() is meant to be extended. Instantiating a\n         * new AsyncResource() also triggers init. If triggerAsyncId is omitted then\n         * async_hook.executionAsyncId() is used.\n         * @param type The type of async event.\n         * @param triggerAsyncId The ID of the execution context that created\n         *   this async event (default: `executionAsyncId()`), or an\n         *   AsyncResourceOptions object (since v9.3.0)\n         */\n        constructor(type: string, triggerAsyncId?: number | AsyncResourceOptions);\n        /**\n         * Binds the given function to the current execution context.\n         * @since v14.8.0, v12.19.0\n         * @param fn The function to bind to the current execution context.\n         * @param type An optional name to associate with the underlying `AsyncResource`.\n         */\n        static bind<Func extends (this: ThisArg, ...args: any[]) => any, ThisArg>(\n            fn: Func,\n            type?: string,\n            thisArg?: ThisArg,\n        ): Func;\n        /**\n         * Binds the given function to execute to this `AsyncResource`'s scope.\n         * @since v14.8.0, v12.19.0\n         * @param fn The function to bind to the current `AsyncResource`.\n         */\n        bind<Func extends (...args: any[]) => any>(fn: Func): Func;\n        /**\n         * Call the provided function with the provided arguments in the execution context\n         * of the async resource. This will establish the context, trigger the AsyncHooks\n         * before callbacks, call the function, trigger the AsyncHooks after callbacks, and\n         * then restore the original execution context.\n         * @since v9.6.0\n         * @param fn The function to call in the execution context of this async resource.\n         * @param thisArg The receiver to be used for the function call.\n         * @param args Optional arguments to pass to the function.\n         */\n        runInAsyncScope<This, Result>(\n            fn: (this: This, ...args: any[]) => Result,\n            thisArg?: This,\n            ...args: any[]\n        ): Result;\n        /**\n         * Call all `destroy` hooks. This should only ever be called once. An error will\n         * be thrown if it is called more than once. This **must** be manually called. If\n         * the resource is left to be collected by the GC then the `destroy` hooks will\n         * never be called.\n         * @return A reference to `asyncResource`.\n         */\n        emitDestroy(): this;\n        /**\n         * @return The unique `asyncId` assigned to the resource.\n         */\n        asyncId(): number;\n        /**\n         * @return The same `triggerAsyncId` that is passed to the `AsyncResource` constructor.\n         */\n        triggerAsyncId(): number;\n    }\n    /**\n     * This class creates stores that stay coherent through asynchronous operations.\n     *\n     * While you can create your own implementation on top of the `node:async_hooks` module, `AsyncLocalStorage` should be preferred as it is a performant and memory\n     * safe implementation that involves significant optimizations that are non-obvious\n     * to implement.\n     *\n     * The following example uses `AsyncLocalStorage` to build a simple logger\n     * that assigns IDs to incoming HTTP requests and includes them in messages\n     * logged within each request.\n     *\n     * ```js\n     * import http from 'node:http';\n     * import { AsyncLocalStorage } from 'node:async_hooks';\n     *\n     * const asyncLocalStorage = new AsyncLocalStorage();\n     *\n     * function logWithId(msg) {\n     *   const id = asyncLocalStorage.getStore();\n     *   console.log(`${id !== undefined ? id : '-'}:`, msg);\n     * }\n     *\n     * let idSeq = 0;\n     * http.createServer((req, res) => {\n     *   asyncLocalStorage.run(idSeq++, () => {\n     *     logWithId('start');\n     *     // Imagine any chain of async operations here\n     *     setImmediate(() => {\n     *       logWithId('finish');\n     *       res.end();\n     *     });\n     *   });\n     * }).listen(8080);\n     *\n     * http.get('http://localhost:8080');\n     * http.get('http://localhost:8080');\n     * // Prints:\n     * //   0: start\n     * //   1: start\n     * //   0: finish\n     * //   1: finish\n     * ```\n     *\n     * Each instance of `AsyncLocalStorage` maintains an independent storage context.\n     * Multiple instances can safely exist simultaneously without risk of interfering\n     * with each other's data.\n     * @since v13.10.0, v12.17.0\n     */\n    class AsyncLocalStorage<T> {\n        /**\n         * Binds the given function to the current execution context.\n         * @since v19.8.0\n         * @param fn The function to bind to the current execution context.\n         * @return A new function that calls `fn` within the captured execution context.\n         */\n        static bind<Func extends (...args: any[]) => any>(fn: Func): Func;\n        /**\n         * Captures the current execution context and returns a function that accepts a\n         * function as an argument. Whenever the returned function is called, it\n         * calls the function passed to it within the captured context.\n         *\n         * ```js\n         * const asyncLocalStorage = new AsyncLocalStorage();\n         * const runInAsyncScope = asyncLocalStorage.run(123, () => AsyncLocalStorage.snapshot());\n         * const result = asyncLocalStorage.run(321, () => runInAsyncScope(() => asyncLocalStorage.getStore()));\n         * console.log(result);  // returns 123\n         * ```\n         *\n         * AsyncLocalStorage.snapshot() can replace the use of AsyncResource for simple\n         * async context tracking purposes, for example:\n         *\n         * ```js\n         * class Foo {\n         *   #runInAsyncScope = AsyncLocalStorage.snapshot();\n         *\n         *   get() { return this.#runInAsyncScope(() => asyncLocalStorage.getStore()); }\n         * }\n         *\n         * const foo = asyncLocalStorage.run(123, () => new Foo());\n         * console.log(asyncLocalStorage.run(321, () => foo.get())); // returns 123\n         * ```\n         * @since v19.8.0\n         * @return A new function with the signature `(fn: (...args) : R, ...args) : R`.\n         */\n        static snapshot(): <R, TArgs extends any[]>(fn: (...args: TArgs) => R, ...args: TArgs) => R;\n        /**\n         * Disables the instance of `AsyncLocalStorage`. All subsequent calls\n         * to `asyncLocalStorage.getStore()` will return `undefined` until `asyncLocalStorage.run()` or `asyncLocalStorage.enterWith()` is called again.\n         *\n         * When calling `asyncLocalStorage.disable()`, all current contexts linked to the\n         * instance will be exited.\n         *\n         * Calling `asyncLocalStorage.disable()` is required before the `asyncLocalStorage` can be garbage collected. This does not apply to stores\n         * provided by the `asyncLocalStorage`, as those objects are garbage collected\n         * along with the corresponding async resources.\n         *\n         * Use this method when the `asyncLocalStorage` is not in use anymore\n         * in the current process.\n         * @since v13.10.0, v12.17.0\n         * @experimental\n         */\n        disable(): void;\n        /**\n         * Returns the current store.\n         * If called outside of an asynchronous context initialized by\n         * calling `asyncLocalStorage.run()` or `asyncLocalStorage.enterWith()`, it\n         * returns `undefined`.\n         * @since v13.10.0, v12.17.0\n         */\n        getStore(): T | undefined;\n        /**\n         * Runs a function synchronously within a context and returns its\n         * return value. The store is not accessible outside of the callback function.\n         * The store is accessible to any asynchronous operations created within the\n         * callback.\n         *\n         * The optional `args` are passed to the callback function.\n         *\n         * If the callback function throws an error, the error is thrown by `run()` too.\n         * The stacktrace is not impacted by this call and the context is exited.\n         *\n         * Example:\n         *\n         * ```js\n         * const store = { id: 2 };\n         * try {\n         *   asyncLocalStorage.run(store, () => {\n         *     asyncLocalStorage.getStore(); // Returns the store object\n         *     setTimeout(() => {\n         *       asyncLocalStorage.getStore(); // Returns the store object\n         *     }, 200);\n         *     throw new Error();\n         *   });\n         * } catch (e) {\n         *   asyncLocalStorage.getStore(); // Returns undefined\n         *   // The error will be caught here\n         * }\n         * ```\n         * @since v13.10.0, v12.17.0\n         */\n        run<R>(store: T, callback: () => R): R;\n        run<R, TArgs extends any[]>(store: T, callback: (...args: TArgs) => R, ...args: TArgs): R;\n        /**\n         * Runs a function synchronously outside of a context and returns its\n         * return value. The store is not accessible within the callback function or\n         * the asynchronous operations created within the callback. Any `getStore()` call done within the callback function will always return `undefined`.\n         *\n         * The optional `args` are passed to the callback function.\n         *\n         * If the callback function throws an error, the error is thrown by `exit()` too.\n         * The stacktrace is not impacted by this call and the context is re-entered.\n         *\n         * Example:\n         *\n         * ```js\n         * // Within a call to run\n         * try {\n         *   asyncLocalStorage.getStore(); // Returns the store object or value\n         *   asyncLocalStorage.exit(() => {\n         *     asyncLocalStorage.getStore(); // Returns undefined\n         *     throw new Error();\n         *   });\n         * } catch (e) {\n         *   asyncLocalStorage.getStore(); // Returns the same object or value\n         *   // The error will be caught here\n         * }\n         * ```\n         * @since v13.10.0, v12.17.0\n         * @experimental\n         */\n        exit<R, TArgs extends any[]>(callback: (...args: TArgs) => R, ...args: TArgs): R;\n        /**\n         * Transitions into the context for the remainder of the current\n         * synchronous execution and then persists the store through any following\n         * asynchronous calls.\n         *\n         * Example:\n         *\n         * ```js\n         * const store = { id: 1 };\n         * // Replaces previous store with the given store object\n         * asyncLocalStorage.enterWith(store);\n         * asyncLocalStorage.getStore(); // Returns the store object\n         * someAsyncOperation(() => {\n         *   asyncLocalStorage.getStore(); // Returns the same object\n         * });\n         * ```\n         *\n         * This transition will continue for the _entire_ synchronous execution.\n         * This means that if, for example, the context is entered within an event\n         * handler subsequent event handlers will also run within that context unless\n         * specifically bound to another context with an `AsyncResource`. That is why `run()` should be preferred over `enterWith()` unless there are strong reasons\n         * to use the latter method.\n         *\n         * ```js\n         * const store = { id: 1 };\n         *\n         * emitter.on('my-event', () => {\n         *   asyncLocalStorage.enterWith(store);\n         * });\n         * emitter.on('my-event', () => {\n         *   asyncLocalStorage.getStore(); // Returns the same object\n         * });\n         *\n         * asyncLocalStorage.getStore(); // Returns undefined\n         * emitter.emit('my-event');\n         * asyncLocalStorage.getStore(); // Returns the same object\n         * ```\n         * @since v13.11.0, v12.17.0\n         * @experimental\n         */\n        enterWith(store: T): void;\n    }\n    /**\n     * @since v17.2.0, v16.14.0\n     * @return A map of provider types to the corresponding numeric id.\n     * This map contains all the event types that might be emitted by the `async_hooks.init()` event.\n     */\n    namespace asyncWrapProviders {\n        const NONE: number;\n        const DIRHANDLE: number;\n        const DNSCHANNEL: number;\n        const ELDHISTOGRAM: number;\n        const FILEHANDLE: number;\n        const FILEHANDLECLOSEREQ: number;\n        const FIXEDSIZEBLOBCOPY: number;\n        const FSEVENTWRAP: number;\n        const FSREQCALLBACK: number;\n        const FSREQPROMISE: number;\n        const GETADDRINFOREQWRAP: number;\n        const GETNAMEINFOREQWRAP: number;\n        const HEAPSNAPSHOT: number;\n        const HTTP2SESSION: number;\n        const HTTP2STREAM: number;\n        const HTTP2PING: number;\n        const HTTP2SETTINGS: number;\n        const HTTPINCOMINGMESSAGE: number;\n        const HTTPCLIENTREQUEST: number;\n        const JSSTREAM: number;\n        const JSUDPWRAP: number;\n        const MESSAGEPORT: number;\n        const PIPECONNECTWRAP: number;\n        const PIPESERVERWRAP: number;\n        const PIPEWRAP: number;\n        const PROCESSWRAP: number;\n        const PROMISE: number;\n        const QUERYWRAP: number;\n        const SHUTDOWNWRAP: number;\n        const SIGNALWRAP: number;\n        const STATWATCHER: number;\n        const STREAMPIPE: number;\n        const TCPCONNECTWRAP: number;\n        const TCPSERVERWRAP: number;\n        const TCPWRAP: number;\n        const TTYWRAP: number;\n        const UDPSENDWRAP: number;\n        const UDPWRAP: number;\n        const SIGINTWATCHDOG: number;\n        const WORKER: number;\n        const WORKERHEAPSNAPSHOT: number;\n        const WRITEWRAP: number;\n        const ZLIB: number;\n        const CHECKPRIMEREQUEST: number;\n        const PBKDF2REQUEST: number;\n        const KEYPAIRGENREQUEST: number;\n        const KEYGENREQUEST: number;\n        const KEYEXPORTREQUEST: number;\n        const CIPHERREQUEST: number;\n        const DERIVEBITSREQUEST: number;\n        const HASHREQUEST: number;\n        const RANDOMBYTESREQUEST: number;\n        const RANDOMPRIMEREQUEST: number;\n        const SCRYPTREQUEST: number;\n        const SIGNREQUEST: number;\n        const TLSWRAP: number;\n        const VERIFYREQUEST: number;\n    }\n}\ndeclare module \"node:async_hooks\" {\n    export * from \"async_hooks\";\n}\n",
  '@types/node/buffer.buffer.d.ts':
    "declare module \"buffer\" {\n    type ImplicitArrayBuffer<T extends WithImplicitCoercion<ArrayBufferLike>> = T extends\n        { valueOf(): infer V extends ArrayBufferLike } ? V : T;\n    global {\n        interface BufferConstructor {\n            // see buffer.d.ts for implementation shared with all TypeScript versions\n\n            /**\n             * Allocates a new buffer containing the given {str}.\n             *\n             * @param str String to store in buffer.\n             * @param encoding encoding to use, optional.  Default is 'utf8'\n             * @deprecated since v10.0.0 - Use `Buffer.from(string[, encoding])` instead.\n             */\n            new(str: string, encoding?: BufferEncoding): Buffer<ArrayBuffer>;\n            /**\n             * Allocates a new buffer of {size} octets.\n             *\n             * @param size count of octets to allocate.\n             * @deprecated since v10.0.0 - Use `Buffer.alloc()` instead (also see `Buffer.allocUnsafe()`).\n             */\n            new(size: number): Buffer<ArrayBuffer>;\n            /**\n             * Allocates a new buffer containing the given {array} of octets.\n             *\n             * @param array The octets to store.\n             * @deprecated since v10.0.0 - Use `Buffer.from(array)` instead.\n             */\n            new(array: ArrayLike<number>): Buffer<ArrayBuffer>;\n            /**\n             * Produces a Buffer backed by the same allocated memory as\n             * the given {ArrayBuffer}/{SharedArrayBuffer}.\n             *\n             * @param arrayBuffer The ArrayBuffer with which to share memory.\n             * @deprecated since v10.0.0 - Use `Buffer.from(arrayBuffer[, byteOffset[, length]])` instead.\n             */\n            new<TArrayBuffer extends ArrayBufferLike = ArrayBuffer>(arrayBuffer: TArrayBuffer): Buffer<TArrayBuffer>;\n            /**\n             * Allocates a new `Buffer` using an `array` of bytes in the range `0` – `255`.\n             * Array entries outside that range will be truncated to fit into it.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * // Creates a new Buffer containing the UTF-8 bytes of the string 'buffer'.\n             * const buf = Buffer.from([0x62, 0x75, 0x66, 0x66, 0x65, 0x72]);\n             * ```\n             *\n             * If `array` is an `Array`-like object (that is, one with a `length` property of\n             * type `number`), it is treated as if it is an array, unless it is a `Buffer` or\n             * a `Uint8Array`. This means all other `TypedArray` variants get treated as an\n             * `Array`. To create a `Buffer` from the bytes backing a `TypedArray`, use\n             * `Buffer.copyBytesFrom()`.\n             *\n             * A `TypeError` will be thrown if `array` is not an `Array` or another type\n             * appropriate for `Buffer.from()` variants.\n             *\n             * `Buffer.from(array)` and `Buffer.from(string)` may also use the internal\n             * `Buffer` pool like `Buffer.allocUnsafe()` does.\n             * @since v5.10.0\n             */\n            from(array: WithImplicitCoercion<ArrayLike<number>>): Buffer<ArrayBuffer>;\n            /**\n             * This creates a view of the `ArrayBuffer` without copying the underlying\n             * memory. For example, when passed a reference to the `.buffer` property of a\n             * `TypedArray` instance, the newly created `Buffer` will share the same\n             * allocated memory as the `TypedArray`'s underlying `ArrayBuffer`.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const arr = new Uint16Array(2);\n             *\n             * arr[0] = 5000;\n             * arr[1] = 4000;\n             *\n             * // Shares memory with `arr`.\n             * const buf = Buffer.from(arr.buffer);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer 88 13 a0 0f>\n             *\n             * // Changing the original Uint16Array changes the Buffer also.\n             * arr[1] = 6000;\n             *\n             * console.log(buf);\n             * // Prints: <Buffer 88 13 70 17>\n             * ```\n             *\n             * The optional `byteOffset` and `length` arguments specify a memory range within\n             * the `arrayBuffer` that will be shared by the `Buffer`.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const ab = new ArrayBuffer(10);\n             * const buf = Buffer.from(ab, 0, 2);\n             *\n             * console.log(buf.length);\n             * // Prints: 2\n             * ```\n             *\n             * A `TypeError` will be thrown if `arrayBuffer` is not an `ArrayBuffer` or a\n             * `SharedArrayBuffer` or another type appropriate for `Buffer.from()`\n             * variants.\n             *\n             * It is important to remember that a backing `ArrayBuffer` can cover a range\n             * of memory that extends beyond the bounds of a `TypedArray` view. A new\n             * `Buffer` created using the `buffer` property of a `TypedArray` may extend\n             * beyond the range of the `TypedArray`:\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const arrA = Uint8Array.from([0x63, 0x64, 0x65, 0x66]); // 4 elements\n             * const arrB = new Uint8Array(arrA.buffer, 1, 2); // 2 elements\n             * console.log(arrA.buffer === arrB.buffer); // true\n             *\n             * const buf = Buffer.from(arrB.buffer);\n             * console.log(buf);\n             * // Prints: <Buffer 63 64 65 66>\n             * ```\n             * @since v5.10.0\n             * @param arrayBuffer An `ArrayBuffer`, `SharedArrayBuffer`, for example the\n             * `.buffer` property of a `TypedArray`.\n             * @param byteOffset Index of first byte to expose. **Default:** `0`.\n             * @param length Number of bytes to expose. **Default:**\n             * `arrayBuffer.byteLength - byteOffset`.\n             */\n            from<TArrayBuffer extends WithImplicitCoercion<ArrayBufferLike>>(\n                arrayBuffer: TArrayBuffer,\n                byteOffset?: number,\n                length?: number,\n            ): Buffer<ImplicitArrayBuffer<TArrayBuffer>>;\n            /**\n             * Creates a new `Buffer` containing `string`. The `encoding` parameter identifies\n             * the character encoding to be used when converting `string` into bytes.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf1 = Buffer.from('this is a tést');\n             * const buf2 = Buffer.from('7468697320697320612074c3a97374', 'hex');\n             *\n             * console.log(buf1.toString());\n             * // Prints: this is a tést\n             * console.log(buf2.toString());\n             * // Prints: this is a tést\n             * console.log(buf1.toString('latin1'));\n             * // Prints: this is a tÃ©st\n             * ```\n             *\n             * A `TypeError` will be thrown if `string` is not a string or another type\n             * appropriate for `Buffer.from()` variants.\n             *\n             * `Buffer.from(string)` may also use the internal `Buffer` pool like\n             * `Buffer.allocUnsafe()` does.\n             * @since v5.10.0\n             * @param string A string to encode.\n             * @param encoding The encoding of `string`. **Default:** `'utf8'`.\n             */\n            from(string: WithImplicitCoercion<string>, encoding?: BufferEncoding): Buffer<ArrayBuffer>;\n            from(arrayOrString: WithImplicitCoercion<ArrayLike<number> | string>): Buffer<ArrayBuffer>;\n            /**\n             * Creates a new Buffer using the passed {data}\n             * @param values to create a new Buffer\n             */\n            of(...items: number[]): Buffer<ArrayBuffer>;\n            /**\n             * Returns a new `Buffer` which is the result of concatenating all the `Buffer` instances in the `list` together.\n             *\n             * If the list has no items, or if the `totalLength` is 0, then a new zero-length `Buffer` is returned.\n             *\n             * If `totalLength` is not provided, it is calculated from the `Buffer` instances\n             * in `list` by adding their lengths.\n             *\n             * If `totalLength` is provided, it is coerced to an unsigned integer. If the\n             * combined length of the `Buffer`s in `list` exceeds `totalLength`, the result is\n             * truncated to `totalLength`. If the combined length of the `Buffer`s in `list` is\n             * less than `totalLength`, the remaining space is filled with zeros.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * // Create a single `Buffer` from a list of three `Buffer` instances.\n             *\n             * const buf1 = Buffer.alloc(10);\n             * const buf2 = Buffer.alloc(14);\n             * const buf3 = Buffer.alloc(18);\n             * const totalLength = buf1.length + buf2.length + buf3.length;\n             *\n             * console.log(totalLength);\n             * // Prints: 42\n             *\n             * const bufA = Buffer.concat([buf1, buf2, buf3], totalLength);\n             *\n             * console.log(bufA);\n             * // Prints: <Buffer 00 00 00 00 ...>\n             * console.log(bufA.length);\n             * // Prints: 42\n             * ```\n             *\n             * `Buffer.concat()` may also use the internal `Buffer` pool like `Buffer.allocUnsafe()` does.\n             * @since v0.7.11\n             * @param list List of `Buffer` or {@link Uint8Array} instances to concatenate.\n             * @param totalLength Total length of the `Buffer` instances in `list` when concatenated.\n             */\n            concat(list: readonly Uint8Array[], totalLength?: number): Buffer<ArrayBuffer>;\n            /**\n             * Copies the underlying memory of `view` into a new `Buffer`.\n             *\n             * ```js\n             * const u16 = new Uint16Array([0, 0xffff]);\n             * const buf = Buffer.copyBytesFrom(u16, 1, 1);\n             * u16[1] = 0;\n             * console.log(buf.length); // 2\n             * console.log(buf[0]); // 255\n             * console.log(buf[1]); // 255\n             * ```\n             * @since v19.8.0\n             * @param view The {TypedArray} to copy.\n             * @param [offset=0] The starting offset within `view`.\n             * @param [length=view.length - offset] The number of elements from `view` to copy.\n             */\n            copyBytesFrom(view: NodeJS.TypedArray, offset?: number, length?: number): Buffer<ArrayBuffer>;\n            /**\n             * Allocates a new `Buffer` of `size` bytes. If `fill` is `undefined`, the`Buffer` will be zero-filled.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.alloc(5);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer 00 00 00 00 00>\n             * ```\n             *\n             * If `size` is larger than {@link constants.MAX_LENGTH} or smaller than 0, `ERR_OUT_OF_RANGE` is thrown.\n             *\n             * If `fill` is specified, the allocated `Buffer` will be initialized by calling `buf.fill(fill)`.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.alloc(5, 'a');\n             *\n             * console.log(buf);\n             * // Prints: <Buffer 61 61 61 61 61>\n             * ```\n             *\n             * If both `fill` and `encoding` are specified, the allocated `Buffer` will be\n             * initialized by calling `buf.fill(fill, encoding)`.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.alloc(11, 'aGVsbG8gd29ybGQ=', 'base64');\n             *\n             * console.log(buf);\n             * // Prints: <Buffer 68 65 6c 6c 6f 20 77 6f 72 6c 64>\n             * ```\n             *\n             * Calling `Buffer.alloc()` can be measurably slower than the alternative `Buffer.allocUnsafe()` but ensures that the newly created `Buffer` instance\n             * contents will never contain sensitive data from previous allocations, including\n             * data that might not have been allocated for `Buffer`s.\n             *\n             * A `TypeError` will be thrown if `size` is not a number.\n             * @since v5.10.0\n             * @param size The desired length of the new `Buffer`.\n             * @param [fill=0] A value to pre-fill the new `Buffer` with.\n             * @param [encoding='utf8'] If `fill` is a string, this is its encoding.\n             */\n            alloc(size: number, fill?: string | Uint8Array | number, encoding?: BufferEncoding): Buffer<ArrayBuffer>;\n            /**\n             * Allocates a new `Buffer` of `size` bytes. If `size` is larger than {@link constants.MAX_LENGTH} or smaller than 0, `ERR_OUT_OF_RANGE` is thrown.\n             *\n             * The underlying memory for `Buffer` instances created in this way is _not_\n             * _initialized_. The contents of the newly created `Buffer` are unknown and _may contain sensitive data_. Use `Buffer.alloc()` instead to initialize`Buffer` instances with zeroes.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.allocUnsafe(10);\n             *\n             * console.log(buf);\n             * // Prints (contents may vary): <Buffer a0 8b 28 3f 01 00 00 00 50 32>\n             *\n             * buf.fill(0);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer 00 00 00 00 00 00 00 00 00 00>\n             * ```\n             *\n             * A `TypeError` will be thrown if `size` is not a number.\n             *\n             * The `Buffer` module pre-allocates an internal `Buffer` instance of\n             * size `Buffer.poolSize` that is used as a pool for the fast allocation of new `Buffer` instances created using `Buffer.allocUnsafe()`, `Buffer.from(array)`,\n             * and `Buffer.concat()` only when `size` is less than `Buffer.poolSize >>> 1` (floor of `Buffer.poolSize` divided by two).\n             *\n             * Use of this pre-allocated internal memory pool is a key difference between\n             * calling `Buffer.alloc(size, fill)` vs. `Buffer.allocUnsafe(size).fill(fill)`.\n             * Specifically, `Buffer.alloc(size, fill)` will _never_ use the internal `Buffer`pool, while `Buffer.allocUnsafe(size).fill(fill)`_will_ use the internal`Buffer` pool if `size` is less\n             * than or equal to half `Buffer.poolSize`. The\n             * difference is subtle but can be important when an application requires the\n             * additional performance that `Buffer.allocUnsafe()` provides.\n             * @since v5.10.0\n             * @param size The desired length of the new `Buffer`.\n             */\n            allocUnsafe(size: number): Buffer<ArrayBuffer>;\n            /**\n             * Allocates a new `Buffer` of `size` bytes. If `size` is larger than {@link constants.MAX_LENGTH} or smaller than 0, `ERR_OUT_OF_RANGE` is thrown. A zero-length `Buffer` is created if\n             * `size` is 0.\n             *\n             * The underlying memory for `Buffer` instances created in this way is _not_\n             * _initialized_. The contents of the newly created `Buffer` are unknown and _may contain sensitive data_. Use `buf.fill(0)` to initialize\n             * such `Buffer` instances with zeroes.\n             *\n             * When using `Buffer.allocUnsafe()` to allocate new `Buffer` instances,\n             * allocations under 4 KiB are sliced from a single pre-allocated `Buffer`. This\n             * allows applications to avoid the garbage collection overhead of creating many\n             * individually allocated `Buffer` instances. This approach improves both\n             * performance and memory usage by eliminating the need to track and clean up as\n             * many individual `ArrayBuffer` objects.\n             *\n             * However, in the case where a developer may need to retain a small chunk of\n             * memory from a pool for an indeterminate amount of time, it may be appropriate\n             * to create an un-pooled `Buffer` instance using `Buffer.allocUnsafeSlow()` and\n             * then copying out the relevant bits.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * // Need to keep around a few small chunks of memory.\n             * const store = [];\n             *\n             * socket.on('readable', () => {\n             *   let data;\n             *   while (null !== (data = readable.read())) {\n             *     // Allocate for retained data.\n             *     const sb = Buffer.allocUnsafeSlow(10);\n             *\n             *     // Copy the data into the new allocation.\n             *     data.copy(sb, 0, 0, 10);\n             *\n             *     store.push(sb);\n             *   }\n             * });\n             * ```\n             *\n             * A `TypeError` will be thrown if `size` is not a number.\n             * @since v5.12.0\n             * @param size The desired length of the new `Buffer`.\n             */\n            allocUnsafeSlow(size: number): Buffer<ArrayBuffer>;\n        }\n        interface Buffer<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> extends Uint8Array<TArrayBuffer> {\n            // see buffer.d.ts for implementation shared with all TypeScript versions\n\n            /**\n             * Returns a new `Buffer` that references the same memory as the original, but\n             * offset and cropped by the `start` and `end` indices.\n             *\n             * This method is not compatible with the `Uint8Array.prototype.slice()`,\n             * which is a superclass of `Buffer`. To copy the slice, use`Uint8Array.prototype.slice()`.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.from('buffer');\n             *\n             * const copiedBuf = Uint8Array.prototype.slice.call(buf);\n             * copiedBuf[0]++;\n             * console.log(copiedBuf.toString());\n             * // Prints: cuffer\n             *\n             * console.log(buf.toString());\n             * // Prints: buffer\n             *\n             * // With buf.slice(), the original buffer is modified.\n             * const notReallyCopiedBuf = buf.slice();\n             * notReallyCopiedBuf[0]++;\n             * console.log(notReallyCopiedBuf.toString());\n             * // Prints: cuffer\n             * console.log(buf.toString());\n             * // Also prints: cuffer (!)\n             * ```\n             * @since v0.3.0\n             * @deprecated Use `subarray` instead.\n             * @param [start=0] Where the new `Buffer` will start.\n             * @param [end=buf.length] Where the new `Buffer` will end (not inclusive).\n             */\n            slice(start?: number, end?: number): Buffer<ArrayBuffer>;\n            /**\n             * Returns a new `Buffer` that references the same memory as the original, but\n             * offset and cropped by the `start` and `end` indices.\n             *\n             * Specifying `end` greater than `buf.length` will return the same result as\n             * that of `end` equal to `buf.length`.\n             *\n             * This method is inherited from [`TypedArray.prototype.subarray()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray).\n             *\n             * Modifying the new `Buffer` slice will modify the memory in the original `Buffer`because the allocated memory of the two objects overlap.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * // Create a `Buffer` with the ASCII alphabet, take a slice, and modify one byte\n             * // from the original `Buffer`.\n             *\n             * const buf1 = Buffer.allocUnsafe(26);\n             *\n             * for (let i = 0; i < 26; i++) {\n             *   // 97 is the decimal ASCII value for 'a'.\n             *   buf1[i] = i + 97;\n             * }\n             *\n             * const buf2 = buf1.subarray(0, 3);\n             *\n             * console.log(buf2.toString('ascii', 0, buf2.length));\n             * // Prints: abc\n             *\n             * buf1[0] = 33;\n             *\n             * console.log(buf2.toString('ascii', 0, buf2.length));\n             * // Prints: !bc\n             * ```\n             *\n             * Specifying negative indexes causes the slice to be generated relative to the\n             * end of `buf` rather than the beginning.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.from('buffer');\n             *\n             * console.log(buf.subarray(-6, -1).toString());\n             * // Prints: buffe\n             * // (Equivalent to buf.subarray(0, 5).)\n             *\n             * console.log(buf.subarray(-6, -2).toString());\n             * // Prints: buff\n             * // (Equivalent to buf.subarray(0, 4).)\n             *\n             * console.log(buf.subarray(-5, -2).toString());\n             * // Prints: uff\n             * // (Equivalent to buf.subarray(1, 4).)\n             * ```\n             * @since v3.0.0\n             * @param [start=0] Where the new `Buffer` will start.\n             * @param [end=buf.length] Where the new `Buffer` will end (not inclusive).\n             */\n            subarray(start?: number, end?: number): Buffer<TArrayBuffer>;\n        }\n        type NonSharedBuffer = Buffer<ArrayBuffer>;\n        type AllowSharedBuffer = Buffer<ArrayBufferLike>;\n    }\n    /** @deprecated Use `Buffer.allocUnsafeSlow()` instead. */\n    var SlowBuffer: {\n        /** @deprecated Use `Buffer.allocUnsafeSlow()` instead. */\n        new(size: number): Buffer<ArrayBuffer>;\n        prototype: Buffer;\n    };\n}\n",
  '@types/node/buffer.d.ts':
    "// If lib.dom.d.ts or lib.webworker.d.ts is loaded, then use the global types.\n// Otherwise, use the types from node.\ntype _Blob = typeof globalThis extends { onmessage: any; Blob: any } ? {} : import(\"buffer\").Blob;\ntype _File = typeof globalThis extends { onmessage: any; File: any } ? {} : import(\"buffer\").File;\n\n/**\n * `Buffer` objects are used to represent a fixed-length sequence of bytes. Many\n * Node.js APIs support `Buffer`s.\n *\n * The `Buffer` class is a subclass of JavaScript's [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) class and\n * extends it with methods that cover additional use cases. Node.js APIs accept\n * plain [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) s wherever `Buffer`s are supported as well.\n *\n * While the `Buffer` class is available within the global scope, it is still\n * recommended to explicitly reference it via an import or require statement.\n *\n * ```js\n * import { Buffer } from 'node:buffer';\n *\n * // Creates a zero-filled Buffer of length 10.\n * const buf1 = Buffer.alloc(10);\n *\n * // Creates a Buffer of length 10,\n * // filled with bytes which all have the value `1`.\n * const buf2 = Buffer.alloc(10, 1);\n *\n * // Creates an uninitialized buffer of length 10.\n * // This is faster than calling Buffer.alloc() but the returned\n * // Buffer instance might contain old data that needs to be\n * // overwritten using fill(), write(), or other functions that fill the Buffer's\n * // contents.\n * const buf3 = Buffer.allocUnsafe(10);\n *\n * // Creates a Buffer containing the bytes [1, 2, 3].\n * const buf4 = Buffer.from([1, 2, 3]);\n *\n * // Creates a Buffer containing the bytes [1, 1, 1, 1] – the entries\n * // are all truncated using `(value &#x26; 255)` to fit into the range 0–255.\n * const buf5 = Buffer.from([257, 257.5, -255, '1']);\n *\n * // Creates a Buffer containing the UTF-8-encoded bytes for the string 'tést':\n * // [0x74, 0xc3, 0xa9, 0x73, 0x74] (in hexadecimal notation)\n * // [116, 195, 169, 115, 116] (in decimal notation)\n * const buf6 = Buffer.from('tést');\n *\n * // Creates a Buffer containing the Latin-1 bytes [0x74, 0xe9, 0x73, 0x74].\n * const buf7 = Buffer.from('tést', 'latin1');\n * ```\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/buffer.js)\n */\ndeclare module \"buffer\" {\n    import { BinaryLike } from \"node:crypto\";\n    import { ReadableStream as WebReadableStream } from \"node:stream/web\";\n    /**\n     * This function returns `true` if `input` contains only valid UTF-8-encoded data,\n     * including the case in which `input` is empty.\n     *\n     * Throws if the `input` is a detached array buffer.\n     * @since v19.4.0, v18.14.0\n     * @param input The input to validate.\n     */\n    export function isUtf8(input: Buffer | ArrayBuffer | NodeJS.TypedArray): boolean;\n    /**\n     * This function returns `true` if `input` contains only valid ASCII-encoded data,\n     * including the case in which `input` is empty.\n     *\n     * Throws if the `input` is a detached array buffer.\n     * @since v19.6.0, v18.15.0\n     * @param input The input to validate.\n     */\n    export function isAscii(input: Buffer | ArrayBuffer | NodeJS.TypedArray): boolean;\n    export let INSPECT_MAX_BYTES: number;\n    export const kMaxLength: number;\n    export const kStringMaxLength: number;\n    export const constants: {\n        MAX_LENGTH: number;\n        MAX_STRING_LENGTH: number;\n    };\n    export type TranscodeEncoding =\n        | \"ascii\"\n        | \"utf8\"\n        | \"utf-8\"\n        | \"utf16le\"\n        | \"utf-16le\"\n        | \"ucs2\"\n        | \"ucs-2\"\n        | \"latin1\"\n        | \"binary\";\n    /**\n     * Re-encodes the given `Buffer` or `Uint8Array` instance from one character\n     * encoding to another. Returns a new `Buffer` instance.\n     *\n     * Throws if the `fromEnc` or `toEnc` specify invalid character encodings or if\n     * conversion from `fromEnc` to `toEnc` is not permitted.\n     *\n     * Encodings supported by `buffer.transcode()` are: `'ascii'`, `'utf8'`, `'utf16le'`, `'ucs2'`, `'latin1'`, and `'binary'`.\n     *\n     * The transcoding process will use substitution characters if a given byte\n     * sequence cannot be adequately represented in the target encoding. For instance:\n     *\n     * ```js\n     * import { Buffer, transcode } from 'node:buffer';\n     *\n     * const newBuf = transcode(Buffer.from('€'), 'utf8', 'ascii');\n     * console.log(newBuf.toString('ascii'));\n     * // Prints: '?'\n     * ```\n     *\n     * Because the Euro (`€`) sign is not representable in US-ASCII, it is replaced\n     * with `?` in the transcoded `Buffer`.\n     * @since v7.1.0\n     * @param source A `Buffer` or `Uint8Array` instance.\n     * @param fromEnc The current encoding.\n     * @param toEnc To target encoding.\n     */\n    export function transcode(source: Uint8Array, fromEnc: TranscodeEncoding, toEnc: TranscodeEncoding): Buffer;\n    /**\n     * Resolves a `'blob:nodedata:...'` an associated `Blob` object registered using\n     * a prior call to `URL.createObjectURL()`.\n     * @since v16.7.0\n     * @experimental\n     * @param id A `'blob:nodedata:...` URL string returned by a prior call to `URL.createObjectURL()`.\n     */\n    export function resolveObjectURL(id: string): Blob | undefined;\n    export { type AllowSharedBuffer, Buffer, type NonSharedBuffer };\n    /**\n     * @experimental\n     */\n    export interface BlobOptions {\n        /**\n         * One of either `'transparent'` or `'native'`. When set to `'native'`, line endings in string source parts\n         * will be converted to the platform native line-ending as specified by `import { EOL } from 'node:os'`.\n         */\n        endings?: \"transparent\" | \"native\";\n        /**\n         * The Blob content-type. The intent is for `type` to convey\n         * the MIME media type of the data, however no validation of the type format\n         * is performed.\n         */\n        type?: string | undefined;\n    }\n    /**\n     * A [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) encapsulates immutable, raw data that can be safely shared across\n     * multiple worker threads.\n     * @since v15.7.0, v14.18.0\n     */\n    export class Blob {\n        /**\n         * The total size of the `Blob` in bytes.\n         * @since v15.7.0, v14.18.0\n         */\n        readonly size: number;\n        /**\n         * The content-type of the `Blob`.\n         * @since v15.7.0, v14.18.0\n         */\n        readonly type: string;\n        /**\n         * Creates a new `Blob` object containing a concatenation of the given sources.\n         *\n         * {ArrayBuffer}, {TypedArray}, {DataView}, and {Buffer} sources are copied into\n         * the 'Blob' and can therefore be safely modified after the 'Blob' is created.\n         *\n         * String sources are also copied into the `Blob`.\n         */\n        constructor(sources: Array<ArrayBuffer | BinaryLike | Blob>, options?: BlobOptions);\n        /**\n         * Returns a promise that fulfills with an [ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) containing a copy of\n         * the `Blob` data.\n         * @since v15.7.0, v14.18.0\n         */\n        arrayBuffer(): Promise<ArrayBuffer>;\n        /**\n         * The `blob.bytes()` method returns the byte of the `Blob` object as a `Promise<Uint8Array>`.\n         *\n         * ```js\n         * const blob = new Blob(['hello']);\n         * blob.bytes().then((bytes) => {\n         *   console.log(bytes); // Outputs: Uint8Array(5) [ 104, 101, 108, 108, 111 ]\n         * });\n         * ```\n         */\n        bytes(): Promise<Uint8Array>;\n        /**\n         * Creates and returns a new `Blob` containing a subset of this `Blob` objects\n         * data. The original `Blob` is not altered.\n         * @since v15.7.0, v14.18.0\n         * @param start The starting index.\n         * @param end The ending index.\n         * @param type The content-type for the new `Blob`\n         */\n        slice(start?: number, end?: number, type?: string): Blob;\n        /**\n         * Returns a promise that fulfills with the contents of the `Blob` decoded as a\n         * UTF-8 string.\n         * @since v15.7.0, v14.18.0\n         */\n        text(): Promise<string>;\n        /**\n         * Returns a new `ReadableStream` that allows the content of the `Blob` to be read.\n         * @since v16.7.0\n         */\n        stream(): WebReadableStream;\n    }\n    export interface FileOptions {\n        /**\n         * One of either `'transparent'` or `'native'`. When set to `'native'`, line endings in string source parts will be\n         * converted to the platform native line-ending as specified by `import { EOL } from 'node:os'`.\n         */\n        endings?: \"native\" | \"transparent\";\n        /** The File content-type. */\n        type?: string;\n        /** The last modified date of the file. `Default`: Date.now(). */\n        lastModified?: number;\n    }\n    /**\n     * A [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File) provides information about files.\n     * @since v19.2.0, v18.13.0\n     */\n    export class File extends Blob {\n        constructor(sources: Array<BinaryLike | Blob>, fileName: string, options?: FileOptions);\n        /**\n         * The name of the `File`.\n         * @since v19.2.0, v18.13.0\n         */\n        readonly name: string;\n        /**\n         * The last modified date of the `File`.\n         * @since v19.2.0, v18.13.0\n         */\n        readonly lastModified: number;\n    }\n    export import atob = globalThis.atob;\n    export import btoa = globalThis.btoa;\n    export type WithImplicitCoercion<T> =\n        | T\n        | { valueOf(): T }\n        | (T extends string ? { [Symbol.toPrimitive](hint: \"string\"): T } : never);\n    global {\n        namespace NodeJS {\n            export { BufferEncoding };\n        }\n        // Buffer class\n        type BufferEncoding =\n            | \"ascii\"\n            | \"utf8\"\n            | \"utf-8\"\n            | \"utf16le\"\n            | \"utf-16le\"\n            | \"ucs2\"\n            | \"ucs-2\"\n            | \"base64\"\n            | \"base64url\"\n            | \"latin1\"\n            | \"binary\"\n            | \"hex\";\n        /**\n         * Raw data is stored in instances of the Buffer class.\n         * A Buffer is similar to an array of integers but corresponds to a raw memory allocation outside the V8 heap.  A Buffer cannot be resized.\n         * Valid string encodings: 'ascii'|'utf8'|'utf16le'|'ucs2'(alias of 'utf16le')|'base64'|'base64url'|'binary'(deprecated)|'hex'\n         */\n        interface BufferConstructor {\n            // see buffer.buffer.d.ts for implementation specific to TypeScript 5.7 and later\n            // see ts5.6/buffer.buffer.d.ts for implementation specific to TypeScript 5.6 and earlier\n\n            /**\n             * Returns `true` if `obj` is a `Buffer`, `false` otherwise.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * Buffer.isBuffer(Buffer.alloc(10)); // true\n             * Buffer.isBuffer(Buffer.from('foo')); // true\n             * Buffer.isBuffer('a string'); // false\n             * Buffer.isBuffer([]); // false\n             * Buffer.isBuffer(new Uint8Array(1024)); // false\n             * ```\n             * @since v0.1.101\n             */\n            isBuffer(obj: any): obj is Buffer;\n            /**\n             * Returns `true` if `encoding` is the name of a supported character encoding,\n             * or `false` otherwise.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * console.log(Buffer.isEncoding('utf8'));\n             * // Prints: true\n             *\n             * console.log(Buffer.isEncoding('hex'));\n             * // Prints: true\n             *\n             * console.log(Buffer.isEncoding('utf/8'));\n             * // Prints: false\n             *\n             * console.log(Buffer.isEncoding(''));\n             * // Prints: false\n             * ```\n             * @since v0.9.1\n             * @param encoding A character encoding name to check.\n             */\n            isEncoding(encoding: string): encoding is BufferEncoding;\n            /**\n             * Returns the byte length of a string when encoded using `encoding`.\n             * This is not the same as [`String.prototype.length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length), which does not account\n             * for the encoding that is used to convert the string into bytes.\n             *\n             * For `'base64'`, `'base64url'`, and `'hex'`, this function assumes valid input.\n             * For strings that contain non-base64/hex-encoded data (e.g. whitespace), the\n             * return value might be greater than the length of a `Buffer` created from the\n             * string.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const str = '\\u00bd + \\u00bc = \\u00be';\n             *\n             * console.log(`${str}: ${str.length} characters, ` +\n             *             `${Buffer.byteLength(str, 'utf8')} bytes`);\n             * // Prints: ½ + ¼ = ¾: 9 characters, 12 bytes\n             * ```\n             *\n             * When `string` is a\n             * `Buffer`/[`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView)/[`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/-\n             * Reference/Global_Objects/TypedArray)/[`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer)/[`SharedArrayBuffer`](https://develop-\n             * er.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer), the byte length as reported by `.byteLength`is returned.\n             * @since v0.1.90\n             * @param string A value to calculate the length of.\n             * @param [encoding='utf8'] If `string` is a string, this is its encoding.\n             * @return The number of bytes contained within `string`.\n             */\n            byteLength(\n                string: string | Buffer | NodeJS.ArrayBufferView | ArrayBuffer | SharedArrayBuffer,\n                encoding?: BufferEncoding,\n            ): number;\n            /**\n             * Compares `buf1` to `buf2`, typically for the purpose of sorting arrays of `Buffer` instances. This is equivalent to calling `buf1.compare(buf2)`.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf1 = Buffer.from('1234');\n             * const buf2 = Buffer.from('0123');\n             * const arr = [buf1, buf2];\n             *\n             * console.log(arr.sort(Buffer.compare));\n             * // Prints: [ <Buffer 30 31 32 33>, <Buffer 31 32 33 34> ]\n             * // (This result is equal to: [buf2, buf1].)\n             * ```\n             * @since v0.11.13\n             * @return Either `-1`, `0`, or `1`, depending on the result of the comparison. See `compare` for details.\n             */\n            compare(buf1: Uint8Array, buf2: Uint8Array): -1 | 0 | 1;\n            /**\n             * This is the size (in bytes) of pre-allocated internal `Buffer` instances used\n             * for pooling. This value may be modified.\n             * @since v0.11.3\n             */\n            poolSize: number;\n        }\n        interface Buffer {\n            // see buffer.buffer.d.ts for implementation specific to TypeScript 5.7 and later\n            // see ts5.6/buffer.buffer.d.ts for implementation specific to TypeScript 5.6 and earlier\n\n            /**\n             * Writes `string` to `buf` at `offset` according to the character encoding in`encoding`. The `length` parameter is the number of bytes to write. If `buf` did\n             * not contain enough space to fit the entire string, only part of `string` will be\n             * written. However, partially encoded characters will not be written.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.alloc(256);\n             *\n             * const len = buf.write('\\u00bd + \\u00bc = \\u00be', 0);\n             *\n             * console.log(`${len} bytes: ${buf.toString('utf8', 0, len)}`);\n             * // Prints: 12 bytes: ½ + ¼ = ¾\n             *\n             * const buffer = Buffer.alloc(10);\n             *\n             * const length = buffer.write('abcd', 8);\n             *\n             * console.log(`${length} bytes: ${buffer.toString('utf8', 8, 10)}`);\n             * // Prints: 2 bytes : ab\n             * ```\n             * @since v0.1.90\n             * @param string String to write to `buf`.\n             * @param [offset=0] Number of bytes to skip before starting to write `string`.\n             * @param [length=buf.length - offset] Maximum number of bytes to write (written bytes will not exceed `buf.length - offset`).\n             * @param [encoding='utf8'] The character encoding of `string`.\n             * @return Number of bytes written.\n             */\n            write(string: string, encoding?: BufferEncoding): number;\n            write(string: string, offset: number, encoding?: BufferEncoding): number;\n            write(string: string, offset: number, length: number, encoding?: BufferEncoding): number;\n            /**\n             * Decodes `buf` to a string according to the specified character encoding in`encoding`. `start` and `end` may be passed to decode only a subset of `buf`.\n             *\n             * If `encoding` is `'utf8'` and a byte sequence in the input is not valid UTF-8,\n             * then each invalid byte is replaced with the replacement character `U+FFFD`.\n             *\n             * The maximum length of a string instance (in UTF-16 code units) is available\n             * as {@link constants.MAX_STRING_LENGTH}.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf1 = Buffer.allocUnsafe(26);\n             *\n             * for (let i = 0; i < 26; i++) {\n             *   // 97 is the decimal ASCII value for 'a'.\n             *   buf1[i] = i + 97;\n             * }\n             *\n             * console.log(buf1.toString('utf8'));\n             * // Prints: abcdefghijklmnopqrstuvwxyz\n             * console.log(buf1.toString('utf8', 0, 5));\n             * // Prints: abcde\n             *\n             * const buf2 = Buffer.from('tést');\n             *\n             * console.log(buf2.toString('hex'));\n             * // Prints: 74c3a97374\n             * console.log(buf2.toString('utf8', 0, 3));\n             * // Prints: té\n             * console.log(buf2.toString(undefined, 0, 3));\n             * // Prints: té\n             * ```\n             * @since v0.1.90\n             * @param [encoding='utf8'] The character encoding to use.\n             * @param [start=0] The byte offset to start decoding at.\n             * @param [end=buf.length] The byte offset to stop decoding at (not inclusive).\n             */\n            toString(encoding?: BufferEncoding, start?: number, end?: number): string;\n            /**\n             * Returns a JSON representation of `buf`. [`JSON.stringify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify) implicitly calls\n             * this function when stringifying a `Buffer` instance.\n             *\n             * `Buffer.from()` accepts objects in the format returned from this method.\n             * In particular, `Buffer.from(buf.toJSON())` works like `Buffer.from(buf)`.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5]);\n             * const json = JSON.stringify(buf);\n             *\n             * console.log(json);\n             * // Prints: {\"type\":\"Buffer\",\"data\":[1,2,3,4,5]}\n             *\n             * const copy = JSON.parse(json, (key, value) => {\n             *   return value &#x26;&#x26; value.type === 'Buffer' ?\n             *     Buffer.from(value) :\n             *     value;\n             * });\n             *\n             * console.log(copy);\n             * // Prints: <Buffer 01 02 03 04 05>\n             * ```\n             * @since v0.9.2\n             */\n            toJSON(): {\n                type: \"Buffer\";\n                data: number[];\n            };\n            /**\n             * Returns `true` if both `buf` and `otherBuffer` have exactly the same bytes,`false` otherwise. Equivalent to `buf.compare(otherBuffer) === 0`.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf1 = Buffer.from('ABC');\n             * const buf2 = Buffer.from('414243', 'hex');\n             * const buf3 = Buffer.from('ABCD');\n             *\n             * console.log(buf1.equals(buf2));\n             * // Prints: true\n             * console.log(buf1.equals(buf3));\n             * // Prints: false\n             * ```\n             * @since v0.11.13\n             * @param otherBuffer A `Buffer` or {@link Uint8Array} with which to compare `buf`.\n             */\n            equals(otherBuffer: Uint8Array): boolean;\n            /**\n             * Compares `buf` with `target` and returns a number indicating whether `buf`comes before, after, or is the same as `target` in sort order.\n             * Comparison is based on the actual sequence of bytes in each `Buffer`.\n             *\n             * * `0` is returned if `target` is the same as `buf`\n             * * `1` is returned if `target` should come _before_`buf` when sorted.\n             * * `-1` is returned if `target` should come _after_`buf` when sorted.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf1 = Buffer.from('ABC');\n             * const buf2 = Buffer.from('BCD');\n             * const buf3 = Buffer.from('ABCD');\n             *\n             * console.log(buf1.compare(buf1));\n             * // Prints: 0\n             * console.log(buf1.compare(buf2));\n             * // Prints: -1\n             * console.log(buf1.compare(buf3));\n             * // Prints: -1\n             * console.log(buf2.compare(buf1));\n             * // Prints: 1\n             * console.log(buf2.compare(buf3));\n             * // Prints: 1\n             * console.log([buf1, buf2, buf3].sort(Buffer.compare));\n             * // Prints: [ <Buffer 41 42 43>, <Buffer 41 42 43 44>, <Buffer 42 43 44> ]\n             * // (This result is equal to: [buf1, buf3, buf2].)\n             * ```\n             *\n             * The optional `targetStart`, `targetEnd`, `sourceStart`, and `sourceEnd` arguments can be used to limit the comparison to specific ranges within `target` and `buf` respectively.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf1 = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n             * const buf2 = Buffer.from([5, 6, 7, 8, 9, 1, 2, 3, 4]);\n             *\n             * console.log(buf1.compare(buf2, 5, 9, 0, 4));\n             * // Prints: 0\n             * console.log(buf1.compare(buf2, 0, 6, 4));\n             * // Prints: -1\n             * console.log(buf1.compare(buf2, 5, 6, 5));\n             * // Prints: 1\n             * ```\n             *\n             * `ERR_OUT_OF_RANGE` is thrown if `targetStart < 0`, `sourceStart < 0`, `targetEnd > target.byteLength`, or `sourceEnd > source.byteLength`.\n             * @since v0.11.13\n             * @param target A `Buffer` or {@link Uint8Array} with which to compare `buf`.\n             * @param [targetStart=0] The offset within `target` at which to begin comparison.\n             * @param [targetEnd=target.length] The offset within `target` at which to end comparison (not inclusive).\n             * @param [sourceStart=0] The offset within `buf` at which to begin comparison.\n             * @param [sourceEnd=buf.length] The offset within `buf` at which to end comparison (not inclusive).\n             */\n            compare(\n                target: Uint8Array,\n                targetStart?: number,\n                targetEnd?: number,\n                sourceStart?: number,\n                sourceEnd?: number,\n            ): -1 | 0 | 1;\n            /**\n             * Copies data from a region of `buf` to a region in `target`, even if the `target`memory region overlaps with `buf`.\n             *\n             * [`TypedArray.prototype.set()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set) performs the same operation, and is available\n             * for all TypedArrays, including Node.js `Buffer`s, although it takes\n             * different function arguments.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * // Create two `Buffer` instances.\n             * const buf1 = Buffer.allocUnsafe(26);\n             * const buf2 = Buffer.allocUnsafe(26).fill('!');\n             *\n             * for (let i = 0; i < 26; i++) {\n             *   // 97 is the decimal ASCII value for 'a'.\n             *   buf1[i] = i + 97;\n             * }\n             *\n             * // Copy `buf1` bytes 16 through 19 into `buf2` starting at byte 8 of `buf2`.\n             * buf1.copy(buf2, 8, 16, 20);\n             * // This is equivalent to:\n             * // buf2.set(buf1.subarray(16, 20), 8);\n             *\n             * console.log(buf2.toString('ascii', 0, 25));\n             * // Prints: !!!!!!!!qrst!!!!!!!!!!!!!\n             * ```\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * // Create a `Buffer` and copy data from one region to an overlapping region\n             * // within the same `Buffer`.\n             *\n             * const buf = Buffer.allocUnsafe(26);\n             *\n             * for (let i = 0; i < 26; i++) {\n             *   // 97 is the decimal ASCII value for 'a'.\n             *   buf[i] = i + 97;\n             * }\n             *\n             * buf.copy(buf, 0, 4, 10);\n             *\n             * console.log(buf.toString());\n             * // Prints: efghijghijklmnopqrstuvwxyz\n             * ```\n             * @since v0.1.90\n             * @param target A `Buffer` or {@link Uint8Array} to copy into.\n             * @param [targetStart=0] The offset within `target` at which to begin writing.\n             * @param [sourceStart=0] The offset within `buf` from which to begin copying.\n             * @param [sourceEnd=buf.length] The offset within `buf` at which to stop copying (not inclusive).\n             * @return The number of bytes copied.\n             */\n            copy(target: Uint8Array, targetStart?: number, sourceStart?: number, sourceEnd?: number): number;\n            /**\n             * Writes `value` to `buf` at the specified `offset` as big-endian.\n             *\n             * `value` is interpreted and written as a two's complement signed integer.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.allocUnsafe(8);\n             *\n             * buf.writeBigInt64BE(0x0102030405060708n, 0);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer 01 02 03 04 05 06 07 08>\n             * ```\n             * @since v12.0.0, v10.20.0\n             * @param value Number to be written to `buf`.\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy: `0 <= offset <= buf.length - 8`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeBigInt64BE(value: bigint, offset?: number): number;\n            /**\n             * Writes `value` to `buf` at the specified `offset` as little-endian.\n             *\n             * `value` is interpreted and written as a two's complement signed integer.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.allocUnsafe(8);\n             *\n             * buf.writeBigInt64LE(0x0102030405060708n, 0);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer 08 07 06 05 04 03 02 01>\n             * ```\n             * @since v12.0.0, v10.20.0\n             * @param value Number to be written to `buf`.\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy: `0 <= offset <= buf.length - 8`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeBigInt64LE(value: bigint, offset?: number): number;\n            /**\n             * Writes `value` to `buf` at the specified `offset` as big-endian.\n             *\n             * This function is also available under the `writeBigUint64BE` alias.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.allocUnsafe(8);\n             *\n             * buf.writeBigUInt64BE(0xdecafafecacefaden, 0);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer de ca fa fe ca ce fa de>\n             * ```\n             * @since v12.0.0, v10.20.0\n             * @param value Number to be written to `buf`.\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy: `0 <= offset <= buf.length - 8`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeBigUInt64BE(value: bigint, offset?: number): number;\n            /**\n             * @alias Buffer.writeBigUInt64BE\n             * @since v14.10.0, v12.19.0\n             */\n            writeBigUint64BE(value: bigint, offset?: number): number;\n            /**\n             * Writes `value` to `buf` at the specified `offset` as little-endian\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.allocUnsafe(8);\n             *\n             * buf.writeBigUInt64LE(0xdecafafecacefaden, 0);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer de fa ce ca fe fa ca de>\n             * ```\n             *\n             * This function is also available under the `writeBigUint64LE` alias.\n             * @since v12.0.0, v10.20.0\n             * @param value Number to be written to `buf`.\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy: `0 <= offset <= buf.length - 8`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeBigUInt64LE(value: bigint, offset?: number): number;\n            /**\n             * @alias Buffer.writeBigUInt64LE\n             * @since v14.10.0, v12.19.0\n             */\n            writeBigUint64LE(value: bigint, offset?: number): number;\n            /**\n             * Writes `byteLength` bytes of `value` to `buf` at the specified `offset`as little-endian. Supports up to 48 bits of accuracy. Behavior is undefined\n             * when `value` is anything other than an unsigned integer.\n             *\n             * This function is also available under the `writeUintLE` alias.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.allocUnsafe(6);\n             *\n             * buf.writeUIntLE(0x1234567890ab, 0, 6);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer ab 90 78 56 34 12>\n             * ```\n             * @since v0.5.5\n             * @param value Number to be written to `buf`.\n             * @param offset Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - byteLength`.\n             * @param byteLength Number of bytes to write. Must satisfy `0 < byteLength <= 6`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeUIntLE(value: number, offset: number, byteLength: number): number;\n            /**\n             * @alias Buffer.writeUIntLE\n             * @since v14.9.0, v12.19.0\n             */\n            writeUintLE(value: number, offset: number, byteLength: number): number;\n            /**\n             * Writes `byteLength` bytes of `value` to `buf` at the specified `offset`as big-endian. Supports up to 48 bits of accuracy. Behavior is undefined\n             * when `value` is anything other than an unsigned integer.\n             *\n             * This function is also available under the `writeUintBE` alias.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.allocUnsafe(6);\n             *\n             * buf.writeUIntBE(0x1234567890ab, 0, 6);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer 12 34 56 78 90 ab>\n             * ```\n             * @since v0.5.5\n             * @param value Number to be written to `buf`.\n             * @param offset Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - byteLength`.\n             * @param byteLength Number of bytes to write. Must satisfy `0 < byteLength <= 6`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeUIntBE(value: number, offset: number, byteLength: number): number;\n            /**\n             * @alias Buffer.writeUIntBE\n             * @since v14.9.0, v12.19.0\n             */\n            writeUintBE(value: number, offset: number, byteLength: number): number;\n            /**\n             * Writes `byteLength` bytes of `value` to `buf` at the specified `offset`as little-endian. Supports up to 48 bits of accuracy. Behavior is undefined\n             * when `value` is anything other than a signed integer.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.allocUnsafe(6);\n             *\n             * buf.writeIntLE(0x1234567890ab, 0, 6);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer ab 90 78 56 34 12>\n             * ```\n             * @since v0.11.15\n             * @param value Number to be written to `buf`.\n             * @param offset Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - byteLength`.\n             * @param byteLength Number of bytes to write. Must satisfy `0 < byteLength <= 6`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeIntLE(value: number, offset: number, byteLength: number): number;\n            /**\n             * Writes `byteLength` bytes of `value` to `buf` at the specified `offset`as big-endian. Supports up to 48 bits of accuracy. Behavior is undefined when`value` is anything other than a\n             * signed integer.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.allocUnsafe(6);\n             *\n             * buf.writeIntBE(0x1234567890ab, 0, 6);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer 12 34 56 78 90 ab>\n             * ```\n             * @since v0.11.15\n             * @param value Number to be written to `buf`.\n             * @param offset Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - byteLength`.\n             * @param byteLength Number of bytes to write. Must satisfy `0 < byteLength <= 6`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeIntBE(value: number, offset: number, byteLength: number): number;\n            /**\n             * Reads an unsigned, big-endian 64-bit integer from `buf` at the specified`offset`.\n             *\n             * This function is also available under the `readBigUint64BE` alias.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.from([0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff]);\n             *\n             * console.log(buf.readBigUInt64BE(0));\n             * // Prints: 4294967295n\n             * ```\n             * @since v12.0.0, v10.20.0\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy: `0 <= offset <= buf.length - 8`.\n             */\n            readBigUInt64BE(offset?: number): bigint;\n            /**\n             * @alias Buffer.readBigUInt64BE\n             * @since v14.10.0, v12.19.0\n             */\n            readBigUint64BE(offset?: number): bigint;\n            /**\n             * Reads an unsigned, little-endian 64-bit integer from `buf` at the specified`offset`.\n             *\n             * This function is also available under the `readBigUint64LE` alias.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.from([0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff]);\n             *\n             * console.log(buf.readBigUInt64LE(0));\n             * // Prints: 18446744069414584320n\n             * ```\n             * @since v12.0.0, v10.20.0\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy: `0 <= offset <= buf.length - 8`.\n             */\n            readBigUInt64LE(offset?: number): bigint;\n            /**\n             * @alias Buffer.readBigUInt64LE\n             * @since v14.10.0, v12.19.0\n             */\n            readBigUint64LE(offset?: number): bigint;\n            /**\n             * Reads a signed, big-endian 64-bit integer from `buf` at the specified `offset`.\n             *\n             * Integers read from a `Buffer` are interpreted as two's complement signed\n             * values.\n             * @since v12.0.0, v10.20.0\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy: `0 <= offset <= buf.length - 8`.\n             */\n            readBigInt64BE(offset?: number): bigint;\n            /**\n             * Reads a signed, little-endian 64-bit integer from `buf` at the specified`offset`.\n             *\n             * Integers read from a `Buffer` are interpreted as two's complement signed\n             * values.\n             * @since v12.0.0, v10.20.0\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy: `0 <= offset <= buf.length - 8`.\n             */\n            readBigInt64LE(offset?: number): bigint;\n            /**\n             * Reads `byteLength` number of bytes from `buf` at the specified `offset` and interprets the result as an unsigned, little-endian integer supporting\n             * up to 48 bits of accuracy.\n             *\n             * This function is also available under the `readUintLE` alias.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\n             *\n             * console.log(buf.readUIntLE(0, 6).toString(16));\n             * // Prints: ab9078563412\n             * ```\n             * @since v0.11.15\n             * @param offset Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - byteLength`.\n             * @param byteLength Number of bytes to read. Must satisfy `0 < byteLength <= 6`.\n             */\n            readUIntLE(offset: number, byteLength: number): number;\n            /**\n             * @alias Buffer.readUIntLE\n             * @since v14.9.0, v12.19.0\n             */\n            readUintLE(offset: number, byteLength: number): number;\n            /**\n             * Reads `byteLength` number of bytes from `buf` at the specified `offset` and interprets the result as an unsigned big-endian integer supporting\n             * up to 48 bits of accuracy.\n             *\n             * This function is also available under the `readUintBE` alias.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\n             *\n             * console.log(buf.readUIntBE(0, 6).toString(16));\n             * // Prints: 1234567890ab\n             * console.log(buf.readUIntBE(1, 6).toString(16));\n             * // Throws ERR_OUT_OF_RANGE.\n             * ```\n             * @since v0.11.15\n             * @param offset Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - byteLength`.\n             * @param byteLength Number of bytes to read. Must satisfy `0 < byteLength <= 6`.\n             */\n            readUIntBE(offset: number, byteLength: number): number;\n            /**\n             * @alias Buffer.readUIntBE\n             * @since v14.9.0, v12.19.0\n             */\n            readUintBE(offset: number, byteLength: number): number;\n            /**\n             * Reads `byteLength` number of bytes from `buf` at the specified `offset` and interprets the result as a little-endian, two's complement signed value\n             * supporting up to 48 bits of accuracy.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\n             *\n             * console.log(buf.readIntLE(0, 6).toString(16));\n             * // Prints: -546f87a9cbee\n             * ```\n             * @since v0.11.15\n             * @param offset Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - byteLength`.\n             * @param byteLength Number of bytes to read. Must satisfy `0 < byteLength <= 6`.\n             */\n            readIntLE(offset: number, byteLength: number): number;\n            /**\n             * Reads `byteLength` number of bytes from `buf` at the specified `offset` and interprets the result as a big-endian, two's complement signed value\n             * supporting up to 48 bits of accuracy.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.from([0x12, 0x34, 0x56, 0x78, 0x90, 0xab]);\n             *\n             * console.log(buf.readIntBE(0, 6).toString(16));\n             * // Prints: 1234567890ab\n             * console.log(buf.readIntBE(1, 6).toString(16));\n             * // Throws ERR_OUT_OF_RANGE.\n             * console.log(buf.readIntBE(1, 0).toString(16));\n             * // Throws ERR_OUT_OF_RANGE.\n             * ```\n             * @since v0.11.15\n             * @param offset Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - byteLength`.\n             * @param byteLength Number of bytes to read. Must satisfy `0 < byteLength <= 6`.\n             */\n            readIntBE(offset: number, byteLength: number): number;\n            /**\n             * Reads an unsigned 8-bit integer from `buf` at the specified `offset`.\n             *\n             * This function is also available under the `readUint8` alias.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.from([1, -2]);\n             *\n             * console.log(buf.readUInt8(0));\n             * // Prints: 1\n             * console.log(buf.readUInt8(1));\n             * // Prints: 254\n             * console.log(buf.readUInt8(2));\n             * // Throws ERR_OUT_OF_RANGE.\n             * ```\n             * @since v0.5.0\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 1`.\n             */\n            readUInt8(offset?: number): number;\n            /**\n             * @alias Buffer.readUInt8\n             * @since v14.9.0, v12.19.0\n             */\n            readUint8(offset?: number): number;\n            /**\n             * Reads an unsigned, little-endian 16-bit integer from `buf` at the specified `offset`.\n             *\n             * This function is also available under the `readUint16LE` alias.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.from([0x12, 0x34, 0x56]);\n             *\n             * console.log(buf.readUInt16LE(0).toString(16));\n             * // Prints: 3412\n             * console.log(buf.readUInt16LE(1).toString(16));\n             * // Prints: 5634\n             * console.log(buf.readUInt16LE(2).toString(16));\n             * // Throws ERR_OUT_OF_RANGE.\n             * ```\n             * @since v0.5.5\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 2`.\n             */\n            readUInt16LE(offset?: number): number;\n            /**\n             * @alias Buffer.readUInt16LE\n             * @since v14.9.0, v12.19.0\n             */\n            readUint16LE(offset?: number): number;\n            /**\n             * Reads an unsigned, big-endian 16-bit integer from `buf` at the specified`offset`.\n             *\n             * This function is also available under the `readUint16BE` alias.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.from([0x12, 0x34, 0x56]);\n             *\n             * console.log(buf.readUInt16BE(0).toString(16));\n             * // Prints: 1234\n             * console.log(buf.readUInt16BE(1).toString(16));\n             * // Prints: 3456\n             * ```\n             * @since v0.5.5\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 2`.\n             */\n            readUInt16BE(offset?: number): number;\n            /**\n             * @alias Buffer.readUInt16BE\n             * @since v14.9.0, v12.19.0\n             */\n            readUint16BE(offset?: number): number;\n            /**\n             * Reads an unsigned, little-endian 32-bit integer from `buf` at the specified`offset`.\n             *\n             * This function is also available under the `readUint32LE` alias.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.from([0x12, 0x34, 0x56, 0x78]);\n             *\n             * console.log(buf.readUInt32LE(0).toString(16));\n             * // Prints: 78563412\n             * console.log(buf.readUInt32LE(1).toString(16));\n             * // Throws ERR_OUT_OF_RANGE.\n             * ```\n             * @since v0.5.5\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`.\n             */\n            readUInt32LE(offset?: number): number;\n            /**\n             * @alias Buffer.readUInt32LE\n             * @since v14.9.0, v12.19.0\n             */\n            readUint32LE(offset?: number): number;\n            /**\n             * Reads an unsigned, big-endian 32-bit integer from `buf` at the specified`offset`.\n             *\n             * This function is also available under the `readUint32BE` alias.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.from([0x12, 0x34, 0x56, 0x78]);\n             *\n             * console.log(buf.readUInt32BE(0).toString(16));\n             * // Prints: 12345678\n             * ```\n             * @since v0.5.5\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`.\n             */\n            readUInt32BE(offset?: number): number;\n            /**\n             * @alias Buffer.readUInt32BE\n             * @since v14.9.0, v12.19.0\n             */\n            readUint32BE(offset?: number): number;\n            /**\n             * Reads a signed 8-bit integer from `buf` at the specified `offset`.\n             *\n             * Integers read from a `Buffer` are interpreted as two's complement signed values.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.from([-1, 5]);\n             *\n             * console.log(buf.readInt8(0));\n             * // Prints: -1\n             * console.log(buf.readInt8(1));\n             * // Prints: 5\n             * console.log(buf.readInt8(2));\n             * // Throws ERR_OUT_OF_RANGE.\n             * ```\n             * @since v0.5.0\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 1`.\n             */\n            readInt8(offset?: number): number;\n            /**\n             * Reads a signed, little-endian 16-bit integer from `buf` at the specified`offset`.\n             *\n             * Integers read from a `Buffer` are interpreted as two's complement signed values.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.from([0, 5]);\n             *\n             * console.log(buf.readInt16LE(0));\n             * // Prints: 1280\n             * console.log(buf.readInt16LE(1));\n             * // Throws ERR_OUT_OF_RANGE.\n             * ```\n             * @since v0.5.5\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 2`.\n             */\n            readInt16LE(offset?: number): number;\n            /**\n             * Reads a signed, big-endian 16-bit integer from `buf` at the specified `offset`.\n             *\n             * Integers read from a `Buffer` are interpreted as two's complement signed values.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.from([0, 5]);\n             *\n             * console.log(buf.readInt16BE(0));\n             * // Prints: 5\n             * ```\n             * @since v0.5.5\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 2`.\n             */\n            readInt16BE(offset?: number): number;\n            /**\n             * Reads a signed, little-endian 32-bit integer from `buf` at the specified`offset`.\n             *\n             * Integers read from a `Buffer` are interpreted as two's complement signed values.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.from([0, 0, 0, 5]);\n             *\n             * console.log(buf.readInt32LE(0));\n             * // Prints: 83886080\n             * console.log(buf.readInt32LE(1));\n             * // Throws ERR_OUT_OF_RANGE.\n             * ```\n             * @since v0.5.5\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`.\n             */\n            readInt32LE(offset?: number): number;\n            /**\n             * Reads a signed, big-endian 32-bit integer from `buf` at the specified `offset`.\n             *\n             * Integers read from a `Buffer` are interpreted as two's complement signed values.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.from([0, 0, 0, 5]);\n             *\n             * console.log(buf.readInt32BE(0));\n             * // Prints: 5\n             * ```\n             * @since v0.5.5\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`.\n             */\n            readInt32BE(offset?: number): number;\n            /**\n             * Reads a 32-bit, little-endian float from `buf` at the specified `offset`.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.from([1, 2, 3, 4]);\n             *\n             * console.log(buf.readFloatLE(0));\n             * // Prints: 1.539989614439558e-36\n             * console.log(buf.readFloatLE(1));\n             * // Throws ERR_OUT_OF_RANGE.\n             * ```\n             * @since v0.11.15\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`.\n             */\n            readFloatLE(offset?: number): number;\n            /**\n             * Reads a 32-bit, big-endian float from `buf` at the specified `offset`.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.from([1, 2, 3, 4]);\n             *\n             * console.log(buf.readFloatBE(0));\n             * // Prints: 2.387939260590663e-38\n             * ```\n             * @since v0.11.15\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 4`.\n             */\n            readFloatBE(offset?: number): number;\n            /**\n             * Reads a 64-bit, little-endian double from `buf` at the specified `offset`.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8]);\n             *\n             * console.log(buf.readDoubleLE(0));\n             * // Prints: 5.447603722011605e-270\n             * console.log(buf.readDoubleLE(1));\n             * // Throws ERR_OUT_OF_RANGE.\n             * ```\n             * @since v0.11.15\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 8`.\n             */\n            readDoubleLE(offset?: number): number;\n            /**\n             * Reads a 64-bit, big-endian double from `buf` at the specified `offset`.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.from([1, 2, 3, 4, 5, 6, 7, 8]);\n             *\n             * console.log(buf.readDoubleBE(0));\n             * // Prints: 8.20788039913184e-304\n             * ```\n             * @since v0.11.15\n             * @param [offset=0] Number of bytes to skip before starting to read. Must satisfy `0 <= offset <= buf.length - 8`.\n             */\n            readDoubleBE(offset?: number): number;\n            reverse(): this;\n            /**\n             * Interprets `buf` as an array of unsigned 16-bit integers and swaps the\n             * byte order _in-place_. Throws `ERR_INVALID_BUFFER_SIZE` if `buf.length` is not a multiple of 2.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);\n             *\n             * console.log(buf1);\n             * // Prints: <Buffer 01 02 03 04 05 06 07 08>\n             *\n             * buf1.swap16();\n             *\n             * console.log(buf1);\n             * // Prints: <Buffer 02 01 04 03 06 05 08 07>\n             *\n             * const buf2 = Buffer.from([0x1, 0x2, 0x3]);\n             *\n             * buf2.swap16();\n             * // Throws ERR_INVALID_BUFFER_SIZE.\n             * ```\n             *\n             * One convenient use of `buf.swap16()` is to perform a fast in-place conversion\n             * between UTF-16 little-endian and UTF-16 big-endian:\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.from('This is little-endian UTF-16', 'utf16le');\n             * buf.swap16(); // Convert to big-endian UTF-16 text.\n             * ```\n             * @since v5.10.0\n             * @return A reference to `buf`.\n             */\n            swap16(): this;\n            /**\n             * Interprets `buf` as an array of unsigned 32-bit integers and swaps the\n             * byte order _in-place_. Throws `ERR_INVALID_BUFFER_SIZE` if `buf.length` is not a multiple of 4.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);\n             *\n             * console.log(buf1);\n             * // Prints: <Buffer 01 02 03 04 05 06 07 08>\n             *\n             * buf1.swap32();\n             *\n             * console.log(buf1);\n             * // Prints: <Buffer 04 03 02 01 08 07 06 05>\n             *\n             * const buf2 = Buffer.from([0x1, 0x2, 0x3]);\n             *\n             * buf2.swap32();\n             * // Throws ERR_INVALID_BUFFER_SIZE.\n             * ```\n             * @since v5.10.0\n             * @return A reference to `buf`.\n             */\n            swap32(): this;\n            /**\n             * Interprets `buf` as an array of 64-bit numbers and swaps byte order _in-place_.\n             * Throws `ERR_INVALID_BUFFER_SIZE` if `buf.length` is not a multiple of 8.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf1 = Buffer.from([0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8]);\n             *\n             * console.log(buf1);\n             * // Prints: <Buffer 01 02 03 04 05 06 07 08>\n             *\n             * buf1.swap64();\n             *\n             * console.log(buf1);\n             * // Prints: <Buffer 08 07 06 05 04 03 02 01>\n             *\n             * const buf2 = Buffer.from([0x1, 0x2, 0x3]);\n             *\n             * buf2.swap64();\n             * // Throws ERR_INVALID_BUFFER_SIZE.\n             * ```\n             * @since v6.3.0\n             * @return A reference to `buf`.\n             */\n            swap64(): this;\n            /**\n             * Writes `value` to `buf` at the specified `offset`. `value` must be a\n             * valid unsigned 8-bit integer. Behavior is undefined when `value` is anything\n             * other than an unsigned 8-bit integer.\n             *\n             * This function is also available under the `writeUint8` alias.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.allocUnsafe(4);\n             *\n             * buf.writeUInt8(0x3, 0);\n             * buf.writeUInt8(0x4, 1);\n             * buf.writeUInt8(0x23, 2);\n             * buf.writeUInt8(0x42, 3);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer 03 04 23 42>\n             * ```\n             * @since v0.5.0\n             * @param value Number to be written to `buf`.\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 1`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeUInt8(value: number, offset?: number): number;\n            /**\n             * @alias Buffer.writeUInt8\n             * @since v14.9.0, v12.19.0\n             */\n            writeUint8(value: number, offset?: number): number;\n            /**\n             * Writes `value` to `buf` at the specified `offset` as little-endian. The `value` must be a valid unsigned 16-bit integer. Behavior is undefined when `value` is\n             * anything other than an unsigned 16-bit integer.\n             *\n             * This function is also available under the `writeUint16LE` alias.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.allocUnsafe(4);\n             *\n             * buf.writeUInt16LE(0xdead, 0);\n             * buf.writeUInt16LE(0xbeef, 2);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer ad de ef be>\n             * ```\n             * @since v0.5.5\n             * @param value Number to be written to `buf`.\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 2`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeUInt16LE(value: number, offset?: number): number;\n            /**\n             * @alias Buffer.writeUInt16LE\n             * @since v14.9.0, v12.19.0\n             */\n            writeUint16LE(value: number, offset?: number): number;\n            /**\n             * Writes `value` to `buf` at the specified `offset` as big-endian. The `value` must be a valid unsigned 16-bit integer. Behavior is undefined when `value`is anything other than an\n             * unsigned 16-bit integer.\n             *\n             * This function is also available under the `writeUint16BE` alias.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.allocUnsafe(4);\n             *\n             * buf.writeUInt16BE(0xdead, 0);\n             * buf.writeUInt16BE(0xbeef, 2);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer de ad be ef>\n             * ```\n             * @since v0.5.5\n             * @param value Number to be written to `buf`.\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 2`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeUInt16BE(value: number, offset?: number): number;\n            /**\n             * @alias Buffer.writeUInt16BE\n             * @since v14.9.0, v12.19.0\n             */\n            writeUint16BE(value: number, offset?: number): number;\n            /**\n             * Writes `value` to `buf` at the specified `offset` as little-endian. The `value` must be a valid unsigned 32-bit integer. Behavior is undefined when `value` is\n             * anything other than an unsigned 32-bit integer.\n             *\n             * This function is also available under the `writeUint32LE` alias.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.allocUnsafe(4);\n             *\n             * buf.writeUInt32LE(0xfeedface, 0);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer ce fa ed fe>\n             * ```\n             * @since v0.5.5\n             * @param value Number to be written to `buf`.\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeUInt32LE(value: number, offset?: number): number;\n            /**\n             * @alias Buffer.writeUInt32LE\n             * @since v14.9.0, v12.19.0\n             */\n            writeUint32LE(value: number, offset?: number): number;\n            /**\n             * Writes `value` to `buf` at the specified `offset` as big-endian. The `value` must be a valid unsigned 32-bit integer. Behavior is undefined when `value`is anything other than an\n             * unsigned 32-bit integer.\n             *\n             * This function is also available under the `writeUint32BE` alias.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.allocUnsafe(4);\n             *\n             * buf.writeUInt32BE(0xfeedface, 0);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer fe ed fa ce>\n             * ```\n             * @since v0.5.5\n             * @param value Number to be written to `buf`.\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeUInt32BE(value: number, offset?: number): number;\n            /**\n             * @alias Buffer.writeUInt32BE\n             * @since v14.9.0, v12.19.0\n             */\n            writeUint32BE(value: number, offset?: number): number;\n            /**\n             * Writes `value` to `buf` at the specified `offset`. `value` must be a valid\n             * signed 8-bit integer. Behavior is undefined when `value` is anything other than\n             * a signed 8-bit integer.\n             *\n             * `value` is interpreted and written as a two's complement signed integer.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.allocUnsafe(2);\n             *\n             * buf.writeInt8(2, 0);\n             * buf.writeInt8(-2, 1);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer 02 fe>\n             * ```\n             * @since v0.5.0\n             * @param value Number to be written to `buf`.\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 1`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeInt8(value: number, offset?: number): number;\n            /**\n             * Writes `value` to `buf` at the specified `offset` as little-endian.  The `value` must be a valid signed 16-bit integer. Behavior is undefined when `value` is\n             * anything other than a signed 16-bit integer.\n             *\n             * The `value` is interpreted and written as a two's complement signed integer.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.allocUnsafe(2);\n             *\n             * buf.writeInt16LE(0x0304, 0);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer 04 03>\n             * ```\n             * @since v0.5.5\n             * @param value Number to be written to `buf`.\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 2`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeInt16LE(value: number, offset?: number): number;\n            /**\n             * Writes `value` to `buf` at the specified `offset` as big-endian.  The `value` must be a valid signed 16-bit integer. Behavior is undefined when `value` is\n             * anything other than a signed 16-bit integer.\n             *\n             * The `value` is interpreted and written as a two's complement signed integer.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.allocUnsafe(2);\n             *\n             * buf.writeInt16BE(0x0102, 0);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer 01 02>\n             * ```\n             * @since v0.5.5\n             * @param value Number to be written to `buf`.\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 2`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeInt16BE(value: number, offset?: number): number;\n            /**\n             * Writes `value` to `buf` at the specified `offset` as little-endian. The `value` must be a valid signed 32-bit integer. Behavior is undefined when `value` is\n             * anything other than a signed 32-bit integer.\n             *\n             * The `value` is interpreted and written as a two's complement signed integer.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.allocUnsafe(4);\n             *\n             * buf.writeInt32LE(0x05060708, 0);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer 08 07 06 05>\n             * ```\n             * @since v0.5.5\n             * @param value Number to be written to `buf`.\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeInt32LE(value: number, offset?: number): number;\n            /**\n             * Writes `value` to `buf` at the specified `offset` as big-endian. The `value` must be a valid signed 32-bit integer. Behavior is undefined when `value` is\n             * anything other than a signed 32-bit integer.\n             *\n             * The `value` is interpreted and written as a two's complement signed integer.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.allocUnsafe(4);\n             *\n             * buf.writeInt32BE(0x01020304, 0);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer 01 02 03 04>\n             * ```\n             * @since v0.5.5\n             * @param value Number to be written to `buf`.\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeInt32BE(value: number, offset?: number): number;\n            /**\n             * Writes `value` to `buf` at the specified `offset` as little-endian. Behavior is\n             * undefined when `value` is anything other than a JavaScript number.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.allocUnsafe(4);\n             *\n             * buf.writeFloatLE(0xcafebabe, 0);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer bb fe 4a 4f>\n             * ```\n             * @since v0.11.15\n             * @param value Number to be written to `buf`.\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeFloatLE(value: number, offset?: number): number;\n            /**\n             * Writes `value` to `buf` at the specified `offset` as big-endian. Behavior is\n             * undefined when `value` is anything other than a JavaScript number.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.allocUnsafe(4);\n             *\n             * buf.writeFloatBE(0xcafebabe, 0);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer 4f 4a fe bb>\n             * ```\n             * @since v0.11.15\n             * @param value Number to be written to `buf`.\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 4`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeFloatBE(value: number, offset?: number): number;\n            /**\n             * Writes `value` to `buf` at the specified `offset` as little-endian. The `value` must be a JavaScript number. Behavior is undefined when `value` is anything\n             * other than a JavaScript number.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.allocUnsafe(8);\n             *\n             * buf.writeDoubleLE(123.456, 0);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer 77 be 9f 1a 2f dd 5e 40>\n             * ```\n             * @since v0.11.15\n             * @param value Number to be written to `buf`.\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 8`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeDoubleLE(value: number, offset?: number): number;\n            /**\n             * Writes `value` to `buf` at the specified `offset` as big-endian. The `value` must be a JavaScript number. Behavior is undefined when `value` is anything\n             * other than a JavaScript number.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.allocUnsafe(8);\n             *\n             * buf.writeDoubleBE(123.456, 0);\n             *\n             * console.log(buf);\n             * // Prints: <Buffer 40 5e dd 2f 1a 9f be 77>\n             * ```\n             * @since v0.11.15\n             * @param value Number to be written to `buf`.\n             * @param [offset=0] Number of bytes to skip before starting to write. Must satisfy `0 <= offset <= buf.length - 8`.\n             * @return `offset` plus the number of bytes written.\n             */\n            writeDoubleBE(value: number, offset?: number): number;\n            /**\n             * Fills `buf` with the specified `value`. If the `offset` and `end` are not given,\n             * the entire `buf` will be filled:\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * // Fill a `Buffer` with the ASCII character 'h'.\n             *\n             * const b = Buffer.allocUnsafe(50).fill('h');\n             *\n             * console.log(b.toString());\n             * // Prints: hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh\n             *\n             * // Fill a buffer with empty string\n             * const c = Buffer.allocUnsafe(5).fill('');\n             *\n             * console.log(c.fill(''));\n             * // Prints: <Buffer 00 00 00 00 00>\n             * ```\n             *\n             * `value` is coerced to a `uint32` value if it is not a string, `Buffer`, or\n             * integer. If the resulting integer is greater than `255` (decimal), `buf` will be\n             * filled with `value &#x26; 255`.\n             *\n             * If the final write of a `fill()` operation falls on a multi-byte character,\n             * then only the bytes of that character that fit into `buf` are written:\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * // Fill a `Buffer` with character that takes up two bytes in UTF-8.\n             *\n             * console.log(Buffer.allocUnsafe(5).fill('\\u0222'));\n             * // Prints: <Buffer c8 a2 c8 a2 c8>\n             * ```\n             *\n             * If `value` contains invalid characters, it is truncated; if no valid\n             * fill data remains, an exception is thrown:\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.allocUnsafe(5);\n             *\n             * console.log(buf.fill('a'));\n             * // Prints: <Buffer 61 61 61 61 61>\n             * console.log(buf.fill('aazz', 'hex'));\n             * // Prints: <Buffer aa aa aa aa aa>\n             * console.log(buf.fill('zz', 'hex'));\n             * // Throws an exception.\n             * ```\n             * @since v0.5.0\n             * @param value The value with which to fill `buf`. Empty value (string, Uint8Array, Buffer) is coerced to `0`.\n             * @param [offset=0] Number of bytes to skip before starting to fill `buf`.\n             * @param [end=buf.length] Where to stop filling `buf` (not inclusive).\n             * @param [encoding='utf8'] The encoding for `value` if `value` is a string.\n             * @return A reference to `buf`.\n             */\n            fill(value: string | Uint8Array | number, offset?: number, end?: number, encoding?: BufferEncoding): this;\n            /**\n             * If `value` is:\n             *\n             * * a string, `value` is interpreted according to the character encoding in `encoding`.\n             * * a `Buffer` or [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array), `value` will be used in its entirety.\n             * To compare a partial `Buffer`, use `buf.subarray`.\n             * * a number, `value` will be interpreted as an unsigned 8-bit integer\n             * value between `0` and `255`.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.from('this is a buffer');\n             *\n             * console.log(buf.indexOf('this'));\n             * // Prints: 0\n             * console.log(buf.indexOf('is'));\n             * // Prints: 2\n             * console.log(buf.indexOf(Buffer.from('a buffer')));\n             * // Prints: 8\n             * console.log(buf.indexOf(97));\n             * // Prints: 8 (97 is the decimal ASCII value for 'a')\n             * console.log(buf.indexOf(Buffer.from('a buffer example')));\n             * // Prints: -1\n             * console.log(buf.indexOf(Buffer.from('a buffer example').slice(0, 8)));\n             * // Prints: 8\n             *\n             * const utf16Buffer = Buffer.from('\\u039a\\u0391\\u03a3\\u03a3\\u0395', 'utf16le');\n             *\n             * console.log(utf16Buffer.indexOf('\\u03a3', 0, 'utf16le'));\n             * // Prints: 4\n             * console.log(utf16Buffer.indexOf('\\u03a3', -4, 'utf16le'));\n             * // Prints: 6\n             * ```\n             *\n             * If `value` is not a string, number, or `Buffer`, this method will throw a `TypeError`. If `value` is a number, it will be coerced to a valid byte value,\n             * an integer between 0 and 255.\n             *\n             * If `byteOffset` is not a number, it will be coerced to a number. If the result\n             * of coercion is `NaN` or `0`, then the entire buffer will be searched. This\n             * behavior matches [`String.prototype.indexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf).\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const b = Buffer.from('abcdef');\n             *\n             * // Passing a value that's a number, but not a valid byte.\n             * // Prints: 2, equivalent to searching for 99 or 'c'.\n             * console.log(b.indexOf(99.9));\n             * console.log(b.indexOf(256 + 99));\n             *\n             * // Passing a byteOffset that coerces to NaN or 0.\n             * // Prints: 1, searching the whole buffer.\n             * console.log(b.indexOf('b', undefined));\n             * console.log(b.indexOf('b', {}));\n             * console.log(b.indexOf('b', null));\n             * console.log(b.indexOf('b', []));\n             * ```\n             *\n             * If `value` is an empty string or empty `Buffer` and `byteOffset` is less\n             * than `buf.length`, `byteOffset` will be returned. If `value` is empty and`byteOffset` is at least `buf.length`, `buf.length` will be returned.\n             * @since v1.5.0\n             * @param value What to search for.\n             * @param [byteOffset=0] Where to begin searching in `buf`. If negative, then offset is calculated from the end of `buf`.\n             * @param [encoding='utf8'] If `value` is a string, this is the encoding used to determine the binary representation of the string that will be searched for in `buf`.\n             * @return The index of the first occurrence of `value` in `buf`, or `-1` if `buf` does not contain `value`.\n             */\n            indexOf(value: string | number | Uint8Array, byteOffset?: number, encoding?: BufferEncoding): number;\n            /**\n             * Identical to `buf.indexOf()`, except the last occurrence of `value` is found\n             * rather than the first occurrence.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.from('this buffer is a buffer');\n             *\n             * console.log(buf.lastIndexOf('this'));\n             * // Prints: 0\n             * console.log(buf.lastIndexOf('buffer'));\n             * // Prints: 17\n             * console.log(buf.lastIndexOf(Buffer.from('buffer')));\n             * // Prints: 17\n             * console.log(buf.lastIndexOf(97));\n             * // Prints: 15 (97 is the decimal ASCII value for 'a')\n             * console.log(buf.lastIndexOf(Buffer.from('yolo')));\n             * // Prints: -1\n             * console.log(buf.lastIndexOf('buffer', 5));\n             * // Prints: 5\n             * console.log(buf.lastIndexOf('buffer', 4));\n             * // Prints: -1\n             *\n             * const utf16Buffer = Buffer.from('\\u039a\\u0391\\u03a3\\u03a3\\u0395', 'utf16le');\n             *\n             * console.log(utf16Buffer.lastIndexOf('\\u03a3', undefined, 'utf16le'));\n             * // Prints: 6\n             * console.log(utf16Buffer.lastIndexOf('\\u03a3', -5, 'utf16le'));\n             * // Prints: 4\n             * ```\n             *\n             * If `value` is not a string, number, or `Buffer`, this method will throw a `TypeError`. If `value` is a number, it will be coerced to a valid byte value,\n             * an integer between 0 and 255.\n             *\n             * If `byteOffset` is not a number, it will be coerced to a number. Any arguments\n             * that coerce to `NaN`, like `{}` or `undefined`, will search the whole buffer.\n             * This behavior matches [`String.prototype.lastIndexOf()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf).\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const b = Buffer.from('abcdef');\n             *\n             * // Passing a value that's a number, but not a valid byte.\n             * // Prints: 2, equivalent to searching for 99 or 'c'.\n             * console.log(b.lastIndexOf(99.9));\n             * console.log(b.lastIndexOf(256 + 99));\n             *\n             * // Passing a byteOffset that coerces to NaN.\n             * // Prints: 1, searching the whole buffer.\n             * console.log(b.lastIndexOf('b', undefined));\n             * console.log(b.lastIndexOf('b', {}));\n             *\n             * // Passing a byteOffset that coerces to 0.\n             * // Prints: -1, equivalent to passing 0.\n             * console.log(b.lastIndexOf('b', null));\n             * console.log(b.lastIndexOf('b', []));\n             * ```\n             *\n             * If `value` is an empty string or empty `Buffer`, `byteOffset` will be returned.\n             * @since v6.0.0\n             * @param value What to search for.\n             * @param [byteOffset=buf.length - 1] Where to begin searching in `buf`. If negative, then offset is calculated from the end of `buf`.\n             * @param [encoding='utf8'] If `value` is a string, this is the encoding used to determine the binary representation of the string that will be searched for in `buf`.\n             * @return The index of the last occurrence of `value` in `buf`, or `-1` if `buf` does not contain `value`.\n             */\n            lastIndexOf(value: string | number | Uint8Array, byteOffset?: number, encoding?: BufferEncoding): number;\n            /**\n             * Equivalent to `buf.indexOf() !== -1`.\n             *\n             * ```js\n             * import { Buffer } from 'node:buffer';\n             *\n             * const buf = Buffer.from('this is a buffer');\n             *\n             * console.log(buf.includes('this'));\n             * // Prints: true\n             * console.log(buf.includes('is'));\n             * // Prints: true\n             * console.log(buf.includes(Buffer.from('a buffer')));\n             * // Prints: true\n             * console.log(buf.includes(97));\n             * // Prints: true (97 is the decimal ASCII value for 'a')\n             * console.log(buf.includes(Buffer.from('a buffer example')));\n             * // Prints: false\n             * console.log(buf.includes(Buffer.from('a buffer example').slice(0, 8)));\n             * // Prints: true\n             * console.log(buf.includes('this', 4));\n             * // Prints: false\n             * ```\n             * @since v5.3.0\n             * @param value What to search for.\n             * @param [byteOffset=0] Where to begin searching in `buf`. If negative, then offset is calculated from the end of `buf`.\n             * @param [encoding='utf8'] If `value` is a string, this is its encoding.\n             * @return `true` if `value` was found in `buf`, `false` otherwise.\n             */\n            includes(value: string | number | Buffer, byteOffset?: number, encoding?: BufferEncoding): boolean;\n        }\n        var Buffer: BufferConstructor;\n        /**\n         * Decodes a string of Base64-encoded data into bytes, and encodes those bytes\n         * into a string using Latin-1 (ISO-8859-1).\n         *\n         * The `data` may be any JavaScript-value that can be coerced into a string.\n         *\n         * **This function is only provided for compatibility with legacy web platform APIs**\n         * **and should never be used in new code, because they use strings to represent**\n         * **binary data and predate the introduction of typed arrays in JavaScript.**\n         * **For code running using Node.js APIs, converting between base64-encoded strings**\n         * **and binary data should be performed using `Buffer.from(str, 'base64')` and `buf.toString('base64')`.**\n         * @since v15.13.0, v14.17.0\n         * @legacy Use `Buffer.from(data, 'base64')` instead.\n         * @param data The Base64-encoded input string.\n         */\n        function atob(data: string): string;\n        /**\n         * Decodes a string into bytes using Latin-1 (ISO-8859), and encodes those bytes\n         * into a string using Base64.\n         *\n         * The `data` may be any JavaScript-value that can be coerced into a string.\n         *\n         * **This function is only provided for compatibility with legacy web platform APIs**\n         * **and should never be used in new code, because they use strings to represent**\n         * **binary data and predate the introduction of typed arrays in JavaScript.**\n         * **For code running using Node.js APIs, converting between base64-encoded strings**\n         * **and binary data should be performed using `Buffer.from(str, 'base64')` and `buf.toString('base64')`.**\n         * @since v15.13.0, v14.17.0\n         * @legacy Use `buf.toString('base64')` instead.\n         * @param data An ASCII (Latin1) string.\n         */\n        function btoa(data: string): string;\n        interface Blob extends _Blob {}\n        /**\n         * `Blob` class is a global reference for `import { Blob } from 'node:buffer'`\n         * https://nodejs.org/api/buffer.html#class-blob\n         * @since v18.0.0\n         */\n        var Blob: typeof globalThis extends { onmessage: any; Blob: infer T } ? T\n            : typeof import(\"buffer\").Blob;\n        interface File extends _File {}\n        /**\n         * `File` class is a global reference for `import { File } from 'node:buffer'`\n         * https://nodejs.org/api/buffer.html#class-file\n         * @since v20.0.0\n         */\n        var File: typeof globalThis extends { onmessage: any; File: infer T } ? T\n            : typeof import(\"buffer\").File;\n    }\n}\ndeclare module \"node:buffer\" {\n    export * from \"buffer\";\n}\n",
  '@types/node/child_process.d.ts':
    "/**\n * The `node:child_process` module provides the ability to spawn subprocesses in\n * a manner that is similar, but not identical, to [`popen(3)`](http://man7.org/linux/man-pages/man3/popen.3.html). This capability\n * is primarily provided by the {@link spawn} function:\n *\n * ```js\n * import { spawn } from 'node:child_process';\n * const ls = spawn('ls', ['-lh', '/usr']);\n *\n * ls.stdout.on('data', (data) => {\n *   console.log(`stdout: ${data}`);\n * });\n *\n * ls.stderr.on('data', (data) => {\n *   console.error(`stderr: ${data}`);\n * });\n *\n * ls.on('close', (code) => {\n *   console.log(`child process exited with code ${code}`);\n * });\n * ```\n *\n * By default, pipes for `stdin`, `stdout`, and `stderr` are established between\n * the parent Node.js process and the spawned subprocess. These pipes have\n * limited (and platform-specific) capacity. If the subprocess writes to\n * stdout in excess of that limit without the output being captured, the\n * subprocess blocks waiting for the pipe buffer to accept more data. This is\n * identical to the behavior of pipes in the shell. Use the `{ stdio: 'ignore' }` option if the output will not be consumed.\n *\n * The command lookup is performed using the `options.env.PATH` environment\n * variable if `env` is in the `options` object. Otherwise, `process.env.PATH` is\n * used. If `options.env` is set without `PATH`, lookup on Unix is performed\n * on a default search path search of `/usr/bin:/bin` (see your operating system's\n * manual for execvpe/execvp), on Windows the current processes environment\n * variable `PATH` is used.\n *\n * On Windows, environment variables are case-insensitive. Node.js\n * lexicographically sorts the `env` keys and uses the first one that\n * case-insensitively matches. Only first (in lexicographic order) entry will be\n * passed to the subprocess. This might lead to issues on Windows when passing\n * objects to the `env` option that have multiple variants of the same key, such as `PATH` and `Path`.\n *\n * The {@link spawn} method spawns the child process asynchronously,\n * without blocking the Node.js event loop. The {@link spawnSync} function provides equivalent functionality in a synchronous manner that blocks\n * the event loop until the spawned process either exits or is terminated.\n *\n * For convenience, the `node:child_process` module provides a handful of\n * synchronous and asynchronous alternatives to {@link spawn} and {@link spawnSync}. Each of these alternatives are implemented on\n * top of {@link spawn} or {@link spawnSync}.\n *\n * * {@link exec}: spawns a shell and runs a command within that\n * shell, passing the `stdout` and `stderr` to a callback function when\n * complete.\n * * {@link execFile}: similar to {@link exec} except\n * that it spawns the command directly without first spawning a shell by\n * default.\n * * {@link fork}: spawns a new Node.js process and invokes a\n * specified module with an IPC communication channel established that allows\n * sending messages between parent and child.\n * * {@link execSync}: a synchronous version of {@link exec} that will block the Node.js event loop.\n * * {@link execFileSync}: a synchronous version of {@link execFile} that will block the Node.js event loop.\n *\n * For certain use cases, such as automating shell scripts, the `synchronous counterparts` may be more convenient. In many cases, however,\n * the synchronous methods can have significant impact on performance due to\n * stalling the event loop while spawned processes complete.\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/child_process.js)\n */\ndeclare module \"child_process\" {\n    import { ObjectEncodingOptions } from \"node:fs\";\n    import { Abortable, EventEmitter } from \"node:events\";\n    import * as dgram from \"node:dgram\";\n    import * as net from \"node:net\";\n    import { Pipe, Readable, Stream, Writable } from \"node:stream\";\n    import { URL } from \"node:url\";\n    type Serializable = string | object | number | boolean | bigint;\n    type SendHandle = net.Socket | net.Server | dgram.Socket | undefined;\n    /**\n     * Instances of the `ChildProcess` represent spawned child processes.\n     *\n     * Instances of `ChildProcess` are not intended to be created directly. Rather,\n     * use the {@link spawn}, {@link exec},{@link execFile}, or {@link fork} methods to create\n     * instances of `ChildProcess`.\n     * @since v2.2.0\n     */\n    class ChildProcess extends EventEmitter {\n        /**\n         * A `Writable Stream` that represents the child process's `stdin`.\n         *\n         * If a child process waits to read all of its input, the child will not continue\n         * until this stream has been closed via `end()`.\n         *\n         * If the child was spawned with `stdio[0]` set to anything other than `'pipe'`,\n         * then this will be `null`.\n         *\n         * `subprocess.stdin` is an alias for `subprocess.stdio[0]`. Both properties will\n         * refer to the same value.\n         *\n         * The `subprocess.stdin` property can be `null` or `undefined` if the child process could not be successfully spawned.\n         * @since v0.1.90\n         */\n        stdin: Writable | null;\n        /**\n         * A `Readable Stream` that represents the child process's `stdout`.\n         *\n         * If the child was spawned with `stdio[1]` set to anything other than `'pipe'`,\n         * then this will be `null`.\n         *\n         * `subprocess.stdout` is an alias for `subprocess.stdio[1]`. Both properties will\n         * refer to the same value.\n         *\n         * ```js\n         * import { spawn } from 'node:child_process';\n         *\n         * const subprocess = spawn('ls');\n         *\n         * subprocess.stdout.on('data', (data) => {\n         *   console.log(`Received chunk ${data}`);\n         * });\n         * ```\n         *\n         * The `subprocess.stdout` property can be `null` or `undefined` if the child process could not be successfully spawned.\n         * @since v0.1.90\n         */\n        stdout: Readable | null;\n        /**\n         * A `Readable Stream` that represents the child process's `stderr`.\n         *\n         * If the child was spawned with `stdio[2]` set to anything other than `'pipe'`,\n         * then this will be `null`.\n         *\n         * `subprocess.stderr` is an alias for `subprocess.stdio[2]`. Both properties will\n         * refer to the same value.\n         *\n         * The `subprocess.stderr` property can be `null` or `undefined` if the child process could not be successfully spawned.\n         * @since v0.1.90\n         */\n        stderr: Readable | null;\n        /**\n         * The `subprocess.channel` property is a reference to the child's IPC channel. If\n         * no IPC channel exists, this property is `undefined`.\n         * @since v7.1.0\n         */\n        readonly channel?: Pipe | null | undefined;\n        /**\n         * A sparse array of pipes to the child process, corresponding with positions in\n         * the `stdio` option passed to {@link spawn} that have been set\n         * to the value `'pipe'`. `subprocess.stdio[0]`, `subprocess.stdio[1]`, and `subprocess.stdio[2]` are also available as `subprocess.stdin`, `subprocess.stdout`, and `subprocess.stderr`,\n         * respectively.\n         *\n         * In the following example, only the child's fd `1` (stdout) is configured as a\n         * pipe, so only the parent's `subprocess.stdio[1]` is a stream, all other values\n         * in the array are `null`.\n         *\n         * ```js\n         * import assert from 'node:assert';\n         * import fs from 'node:fs';\n         * import child_process from 'node:child_process';\n         *\n         * const subprocess = child_process.spawn('ls', {\n         *   stdio: [\n         *     0, // Use parent's stdin for child.\n         *     'pipe', // Pipe child's stdout to parent.\n         *     fs.openSync('err.out', 'w'), // Direct child's stderr to a file.\n         *   ],\n         * });\n         *\n         * assert.strictEqual(subprocess.stdio[0], null);\n         * assert.strictEqual(subprocess.stdio[0], subprocess.stdin);\n         *\n         * assert(subprocess.stdout);\n         * assert.strictEqual(subprocess.stdio[1], subprocess.stdout);\n         *\n         * assert.strictEqual(subprocess.stdio[2], null);\n         * assert.strictEqual(subprocess.stdio[2], subprocess.stderr);\n         * ```\n         *\n         * The `subprocess.stdio` property can be `undefined` if the child process could\n         * not be successfully spawned.\n         * @since v0.7.10\n         */\n        readonly stdio: [\n            Writable | null,\n            // stdin\n            Readable | null,\n            // stdout\n            Readable | null,\n            // stderr\n            Readable | Writable | null | undefined,\n            // extra\n            Readable | Writable | null | undefined, // extra\n        ];\n        /**\n         * The `subprocess.killed` property indicates whether the child process\n         * successfully received a signal from `subprocess.kill()`. The `killed` property\n         * does not indicate that the child process has been terminated.\n         * @since v0.5.10\n         */\n        readonly killed: boolean;\n        /**\n         * Returns the process identifier (PID) of the child process. If the child process\n         * fails to spawn due to errors, then the value is `undefined` and `error` is\n         * emitted.\n         *\n         * ```js\n         * import { spawn } from 'node:child_process';\n         * const grep = spawn('grep', ['ssh']);\n         *\n         * console.log(`Spawned child pid: ${grep.pid}`);\n         * grep.stdin.end();\n         * ```\n         * @since v0.1.90\n         */\n        readonly pid?: number | undefined;\n        /**\n         * The `subprocess.connected` property indicates whether it is still possible to\n         * send and receive messages from a child process. When `subprocess.connected` is `false`, it is no longer possible to send or receive messages.\n         * @since v0.7.2\n         */\n        readonly connected: boolean;\n        /**\n         * The `subprocess.exitCode` property indicates the exit code of the child process.\n         * If the child process is still running, the field will be `null`.\n         */\n        readonly exitCode: number | null;\n        /**\n         * The `subprocess.signalCode` property indicates the signal received by\n         * the child process if any, else `null`.\n         */\n        readonly signalCode: NodeJS.Signals | null;\n        /**\n         * The `subprocess.spawnargs` property represents the full list of command-line\n         * arguments the child process was launched with.\n         */\n        readonly spawnargs: string[];\n        /**\n         * The `subprocess.spawnfile` property indicates the executable file name of\n         * the child process that is launched.\n         *\n         * For {@link fork}, its value will be equal to `process.execPath`.\n         * For {@link spawn}, its value will be the name of\n         * the executable file.\n         * For {@link exec},  its value will be the name of the shell\n         * in which the child process is launched.\n         */\n        readonly spawnfile: string;\n        /**\n         * The `subprocess.kill()` method sends a signal to the child process. If no\n         * argument is given, the process will be sent the `'SIGTERM'` signal. See [`signal(7)`](http://man7.org/linux/man-pages/man7/signal.7.html) for a list of available signals. This function\n         * returns `true` if [`kill(2)`](http://man7.org/linux/man-pages/man2/kill.2.html) succeeds, and `false` otherwise.\n         *\n         * ```js\n         * import { spawn } from 'node:child_process';\n         * const grep = spawn('grep', ['ssh']);\n         *\n         * grep.on('close', (code, signal) => {\n         *   console.log(\n         *     `child process terminated due to receipt of signal ${signal}`);\n         * });\n         *\n         * // Send SIGHUP to process.\n         * grep.kill('SIGHUP');\n         * ```\n         *\n         * The `ChildProcess` object may emit an `'error'` event if the signal\n         * cannot be delivered. Sending a signal to a child process that has already exited\n         * is not an error but may have unforeseen consequences. Specifically, if the\n         * process identifier (PID) has been reassigned to another process, the signal will\n         * be delivered to that process instead which can have unexpected results.\n         *\n         * While the function is called `kill`, the signal delivered to the child process\n         * may not actually terminate the process.\n         *\n         * See [`kill(2)`](http://man7.org/linux/man-pages/man2/kill.2.html) for reference.\n         *\n         * On Windows, where POSIX signals do not exist, the `signal` argument will be\n         * ignored, and the process will be killed forcefully and abruptly (similar to `'SIGKILL'`).\n         * See `Signal Events` for more details.\n         *\n         * On Linux, child processes of child processes will not be terminated\n         * when attempting to kill their parent. This is likely to happen when running a\n         * new process in a shell or with the use of the `shell` option of `ChildProcess`:\n         *\n         * ```js\n         * 'use strict';\n         * import { spawn } from 'node:child_process';\n         *\n         * const subprocess = spawn(\n         *   'sh',\n         *   [\n         *     '-c',\n         *     `node -e \"setInterval(() => {\n         *       console.log(process.pid, 'is alive')\n         *     }, 500);\"`,\n         *   ], {\n         *     stdio: ['inherit', 'inherit', 'inherit'],\n         *   },\n         * );\n         *\n         * setTimeout(() => {\n         *   subprocess.kill(); // Does not terminate the Node.js process in the shell.\n         * }, 2000);\n         * ```\n         * @since v0.1.90\n         */\n        kill(signal?: NodeJS.Signals | number): boolean;\n        /**\n         * Calls {@link ChildProcess.kill} with `'SIGTERM'`.\n         * @since v20.5.0\n         */\n        [Symbol.dispose](): void;\n        /**\n         * When an IPC channel has been established between the parent and child (\n         * i.e. when using {@link fork}), the `subprocess.send()` method can\n         * be used to send messages to the child process. When the child process is a\n         * Node.js instance, these messages can be received via the `'message'` event.\n         *\n         * The message goes through serialization and parsing. The resulting\n         * message might not be the same as what is originally sent.\n         *\n         * For example, in the parent script:\n         *\n         * ```js\n         * import cp from 'node:child_process';\n         * const n = cp.fork(`${__dirname}/sub.js`);\n         *\n         * n.on('message', (m) => {\n         *   console.log('PARENT got message:', m);\n         * });\n         *\n         * // Causes the child to print: CHILD got message: { hello: 'world' }\n         * n.send({ hello: 'world' });\n         * ```\n         *\n         * And then the child script, `'sub.js'` might look like this:\n         *\n         * ```js\n         * process.on('message', (m) => {\n         *   console.log('CHILD got message:', m);\n         * });\n         *\n         * // Causes the parent to print: PARENT got message: { foo: 'bar', baz: null }\n         * process.send({ foo: 'bar', baz: NaN });\n         * ```\n         *\n         * Child Node.js processes will have a `process.send()` method of their own\n         * that allows the child to send messages back to the parent.\n         *\n         * There is a special case when sending a `{cmd: 'NODE_foo'}` message. Messages\n         * containing a `NODE_` prefix in the `cmd` property are reserved for use within\n         * Node.js core and will not be emitted in the child's `'message'` event. Rather, such messages are emitted using the `'internalMessage'` event and are consumed internally by Node.js.\n         * Applications should avoid using such messages or listening for `'internalMessage'` events as it is subject to change without notice.\n         *\n         * The optional `sendHandle` argument that may be passed to `subprocess.send()` is\n         * for passing a TCP server or socket object to the child process. The child will\n         * receive the object as the second argument passed to the callback function\n         * registered on the `'message'` event. Any data that is received and buffered in\n         * the socket will not be sent to the child. Sending IPC sockets is not supported on Windows.\n         *\n         * The optional `callback` is a function that is invoked after the message is\n         * sent but before the child may have received it. The function is called with a\n         * single argument: `null` on success, or an `Error` object on failure.\n         *\n         * If no `callback` function is provided and the message cannot be sent, an `'error'` event will be emitted by the `ChildProcess` object. This can\n         * happen, for instance, when the child process has already exited.\n         *\n         * `subprocess.send()` will return `false` if the channel has closed or when the\n         * backlog of unsent messages exceeds a threshold that makes it unwise to send\n         * more. Otherwise, the method returns `true`. The `callback` function can be\n         * used to implement flow control.\n         *\n         * #### Example: sending a server object\n         *\n         * The `sendHandle` argument can be used, for instance, to pass the handle of\n         * a TCP server object to the child process as illustrated in the example below:\n         *\n         * ```js\n         * import { createServer } from 'node:net';\n         * import { fork } from 'node:child_process';\n         * const subprocess = fork('subprocess.js');\n         *\n         * // Open up the server object and send the handle.\n         * const server = createServer();\n         * server.on('connection', (socket) => {\n         *   socket.end('handled by parent');\n         * });\n         * server.listen(1337, () => {\n         *   subprocess.send('server', server);\n         * });\n         * ```\n         *\n         * The child would then receive the server object as:\n         *\n         * ```js\n         * process.on('message', (m, server) => {\n         *   if (m === 'server') {\n         *     server.on('connection', (socket) => {\n         *       socket.end('handled by child');\n         *     });\n         *   }\n         * });\n         * ```\n         *\n         * Once the server is now shared between the parent and child, some connections\n         * can be handled by the parent and some by the child.\n         *\n         * While the example above uses a server created using the `node:net` module, `node:dgram` module servers use exactly the same workflow with the exceptions of\n         * listening on a `'message'` event instead of `'connection'` and using `server.bind()` instead of `server.listen()`. This is, however, only\n         * supported on Unix platforms.\n         *\n         * #### Example: sending a socket object\n         *\n         * Similarly, the `sendHandler` argument can be used to pass the handle of a\n         * socket to the child process. The example below spawns two children that each\n         * handle connections with \"normal\" or \"special\" priority:\n         *\n         * ```js\n         * import { createServer } from 'node:net';\n         * import { fork } from 'node:child_process';\n         * const normal = fork('subprocess.js', ['normal']);\n         * const special = fork('subprocess.js', ['special']);\n         *\n         * // Open up the server and send sockets to child. Use pauseOnConnect to prevent\n         * // the sockets from being read before they are sent to the child process.\n         * const server = createServer({ pauseOnConnect: true });\n         * server.on('connection', (socket) => {\n         *\n         *   // If this is special priority...\n         *   if (socket.remoteAddress === '74.125.127.100') {\n         *     special.send('socket', socket);\n         *     return;\n         *   }\n         *   // This is normal priority.\n         *   normal.send('socket', socket);\n         * });\n         * server.listen(1337);\n         * ```\n         *\n         * The `subprocess.js` would receive the socket handle as the second argument\n         * passed to the event callback function:\n         *\n         * ```js\n         * process.on('message', (m, socket) => {\n         *   if (m === 'socket') {\n         *     if (socket) {\n         *       // Check that the client socket exists.\n         *       // It is possible for the socket to be closed between the time it is\n         *       // sent and the time it is received in the child process.\n         *       socket.end(`Request handled with ${process.argv[2]} priority`);\n         *     }\n         *   }\n         * });\n         * ```\n         *\n         * Do not use `.maxConnections` on a socket that has been passed to a subprocess.\n         * The parent cannot track when the socket is destroyed.\n         *\n         * Any `'message'` handlers in the subprocess should verify that `socket` exists,\n         * as the connection may have been closed during the time it takes to send the\n         * connection to the child.\n         * @since v0.5.9\n         * @param sendHandle `undefined`, or a [`net.Socket`](https://nodejs.org/docs/latest-v22.x/api/net.html#class-netsocket), [`net.Server`](https://nodejs.org/docs/latest-v22.x/api/net.html#class-netserver), or [`dgram.Socket`](https://nodejs.org/docs/latest-v22.x/api/dgram.html#class-dgramsocket) object.\n         * @param options The `options` argument, if present, is an object used to parameterize the sending of certain types of handles. `options` supports the following properties:\n         */\n        send(message: Serializable, callback?: (error: Error | null) => void): boolean;\n        send(message: Serializable, sendHandle?: SendHandle, callback?: (error: Error | null) => void): boolean;\n        send(\n            message: Serializable,\n            sendHandle?: SendHandle,\n            options?: MessageOptions,\n            callback?: (error: Error | null) => void,\n        ): boolean;\n        /**\n         * Closes the IPC channel between parent and child, allowing the child to exit\n         * gracefully once there are no other connections keeping it alive. After calling\n         * this method the `subprocess.connected` and `process.connected` properties in\n         * both the parent and child (respectively) will be set to `false`, and it will be\n         * no longer possible to pass messages between the processes.\n         *\n         * The `'disconnect'` event will be emitted when there are no messages in the\n         * process of being received. This will most often be triggered immediately after\n         * calling `subprocess.disconnect()`.\n         *\n         * When the child process is a Node.js instance (e.g. spawned using {@link fork}), the `process.disconnect()` method can be invoked\n         * within the child process to close the IPC channel as well.\n         * @since v0.7.2\n         */\n        disconnect(): void;\n        /**\n         * By default, the parent will wait for the detached child to exit. To prevent the\n         * parent from waiting for a given `subprocess` to exit, use the `subprocess.unref()` method. Doing so will cause the parent's event loop to not\n         * include the child in its reference count, allowing the parent to exit\n         * independently of the child, unless there is an established IPC channel between\n         * the child and the parent.\n         *\n         * ```js\n         * import { spawn } from 'node:child_process';\n         *\n         * const subprocess = spawn(process.argv[0], ['child_program.js'], {\n         *   detached: true,\n         *   stdio: 'ignore',\n         * });\n         *\n         * subprocess.unref();\n         * ```\n         * @since v0.7.10\n         */\n        unref(): void;\n        /**\n         * Calling `subprocess.ref()` after making a call to `subprocess.unref()` will\n         * restore the removed reference count for the child process, forcing the parent\n         * to wait for the child to exit before exiting itself.\n         *\n         * ```js\n         * import { spawn } from 'node:child_process';\n         *\n         * const subprocess = spawn(process.argv[0], ['child_program.js'], {\n         *   detached: true,\n         *   stdio: 'ignore',\n         * });\n         *\n         * subprocess.unref();\n         * subprocess.ref();\n         * ```\n         * @since v0.7.10\n         */\n        ref(): void;\n        /**\n         * events.EventEmitter\n         * 1. close\n         * 2. disconnect\n         * 3. error\n         * 4. exit\n         * 5. message\n         * 6. spawn\n         */\n        addListener(event: string, listener: (...args: any[]) => void): this;\n        addListener(event: \"close\", listener: (code: number | null, signal: NodeJS.Signals | null) => void): this;\n        addListener(event: \"disconnect\", listener: () => void): this;\n        addListener(event: \"error\", listener: (err: Error) => void): this;\n        addListener(event: \"exit\", listener: (code: number | null, signal: NodeJS.Signals | null) => void): this;\n        addListener(event: \"message\", listener: (message: Serializable, sendHandle: SendHandle) => void): this;\n        addListener(event: \"spawn\", listener: () => void): this;\n        emit(event: string | symbol, ...args: any[]): boolean;\n        emit(event: \"close\", code: number | null, signal: NodeJS.Signals | null): boolean;\n        emit(event: \"disconnect\"): boolean;\n        emit(event: \"error\", err: Error): boolean;\n        emit(event: \"exit\", code: number | null, signal: NodeJS.Signals | null): boolean;\n        emit(event: \"message\", message: Serializable, sendHandle: SendHandle): boolean;\n        emit(event: \"spawn\", listener: () => void): boolean;\n        on(event: string, listener: (...args: any[]) => void): this;\n        on(event: \"close\", listener: (code: number | null, signal: NodeJS.Signals | null) => void): this;\n        on(event: \"disconnect\", listener: () => void): this;\n        on(event: \"error\", listener: (err: Error) => void): this;\n        on(event: \"exit\", listener: (code: number | null, signal: NodeJS.Signals | null) => void): this;\n        on(event: \"message\", listener: (message: Serializable, sendHandle: SendHandle) => void): this;\n        on(event: \"spawn\", listener: () => void): this;\n        once(event: string, listener: (...args: any[]) => void): this;\n        once(event: \"close\", listener: (code: number | null, signal: NodeJS.Signals | null) => void): this;\n        once(event: \"disconnect\", listener: () => void): this;\n        once(event: \"error\", listener: (err: Error) => void): this;\n        once(event: \"exit\", listener: (code: number | null, signal: NodeJS.Signals | null) => void): this;\n        once(event: \"message\", listener: (message: Serializable, sendHandle: SendHandle) => void): this;\n        once(event: \"spawn\", listener: () => void): this;\n        prependListener(event: string, listener: (...args: any[]) => void): this;\n        prependListener(event: \"close\", listener: (code: number | null, signal: NodeJS.Signals | null) => void): this;\n        prependListener(event: \"disconnect\", listener: () => void): this;\n        prependListener(event: \"error\", listener: (err: Error) => void): this;\n        prependListener(event: \"exit\", listener: (code: number | null, signal: NodeJS.Signals | null) => void): this;\n        prependListener(event: \"message\", listener: (message: Serializable, sendHandle: SendHandle) => void): this;\n        prependListener(event: \"spawn\", listener: () => void): this;\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\n        prependOnceListener(\n            event: \"close\",\n            listener: (code: number | null, signal: NodeJS.Signals | null) => void,\n        ): this;\n        prependOnceListener(event: \"disconnect\", listener: () => void): this;\n        prependOnceListener(event: \"error\", listener: (err: Error) => void): this;\n        prependOnceListener(\n            event: \"exit\",\n            listener: (code: number | null, signal: NodeJS.Signals | null) => void,\n        ): this;\n        prependOnceListener(event: \"message\", listener: (message: Serializable, sendHandle: SendHandle) => void): this;\n        prependOnceListener(event: \"spawn\", listener: () => void): this;\n    }\n    // return this object when stdio option is undefined or not specified\n    interface ChildProcessWithoutNullStreams extends ChildProcess {\n        stdin: Writable;\n        stdout: Readable;\n        stderr: Readable;\n        readonly stdio: [\n            Writable,\n            Readable,\n            Readable,\n            // stderr\n            Readable | Writable | null | undefined,\n            // extra, no modification\n            Readable | Writable | null | undefined, // extra, no modification\n        ];\n    }\n    // return this object when stdio option is a tuple of 3\n    interface ChildProcessByStdio<I extends null | Writable, O extends null | Readable, E extends null | Readable>\n        extends ChildProcess\n    {\n        stdin: I;\n        stdout: O;\n        stderr: E;\n        readonly stdio: [\n            I,\n            O,\n            E,\n            Readable | Writable | null | undefined,\n            // extra, no modification\n            Readable | Writable | null | undefined, // extra, no modification\n        ];\n    }\n    interface MessageOptions {\n        keepOpen?: boolean | undefined;\n    }\n    type IOType = \"overlapped\" | \"pipe\" | \"ignore\" | \"inherit\";\n    type StdioOptions = IOType | Array<IOType | \"ipc\" | Stream | number | null | undefined>;\n    type SerializationType = \"json\" | \"advanced\";\n    interface MessagingOptions extends Abortable {\n        /**\n         * Specify the kind of serialization used for sending messages between processes.\n         * @default 'json'\n         */\n        serialization?: SerializationType | undefined;\n        /**\n         * The signal value to be used when the spawned process will be killed by the abort signal.\n         * @default 'SIGTERM'\n         */\n        killSignal?: NodeJS.Signals | number | undefined;\n        /**\n         * In milliseconds the maximum amount of time the process is allowed to run.\n         */\n        timeout?: number | undefined;\n    }\n    interface ProcessEnvOptions {\n        uid?: number | undefined;\n        gid?: number | undefined;\n        cwd?: string | URL | undefined;\n        env?: NodeJS.ProcessEnv | undefined;\n    }\n    interface CommonOptions extends ProcessEnvOptions {\n        /**\n         * @default false\n         */\n        windowsHide?: boolean | undefined;\n        /**\n         * @default 0\n         */\n        timeout?: number | undefined;\n    }\n    interface CommonSpawnOptions extends CommonOptions, MessagingOptions, Abortable {\n        argv0?: string | undefined;\n        /**\n         * Can be set to 'pipe', 'inherit', 'overlapped', or 'ignore', or an array of these strings.\n         * If passed as an array, the first element is used for `stdin`, the second for\n         * `stdout`, and the third for `stderr`. A fourth element can be used to\n         * specify the `stdio` behavior beyond the standard streams. See\n         * {@link ChildProcess.stdio} for more information.\n         *\n         * @default 'pipe'\n         */\n        stdio?: StdioOptions | undefined;\n        shell?: boolean | string | undefined;\n        windowsVerbatimArguments?: boolean | undefined;\n    }\n    interface SpawnOptions extends CommonSpawnOptions {\n        detached?: boolean | undefined;\n    }\n    interface SpawnOptionsWithoutStdio extends SpawnOptions {\n        stdio?: StdioPipeNamed | StdioPipe[] | undefined;\n    }\n    type StdioNull = \"inherit\" | \"ignore\" | Stream;\n    type StdioPipeNamed = \"pipe\" | \"overlapped\";\n    type StdioPipe = undefined | null | StdioPipeNamed;\n    interface SpawnOptionsWithStdioTuple<\n        Stdin extends StdioNull | StdioPipe,\n        Stdout extends StdioNull | StdioPipe,\n        Stderr extends StdioNull | StdioPipe,\n    > extends SpawnOptions {\n        stdio: [Stdin, Stdout, Stderr];\n    }\n    /**\n     * The `child_process.spawn()` method spawns a new process using the given `command`, with command-line arguments in `args`. If omitted, `args` defaults\n     * to an empty array.\n     *\n     * **If the `shell` option is enabled, do not pass unsanitized user input to this**\n     * **function. Any input containing shell metacharacters may be used to trigger**\n     * **arbitrary command execution.**\n     *\n     * A third argument may be used to specify additional options, with these defaults:\n     *\n     * ```js\n     * const defaults = {\n     *   cwd: undefined,\n     *   env: process.env,\n     * };\n     * ```\n     *\n     * Use `cwd` to specify the working directory from which the process is spawned.\n     * If not given, the default is to inherit the current working directory. If given,\n     * but the path does not exist, the child process emits an `ENOENT` error\n     * and exits immediately. `ENOENT` is also emitted when the command\n     * does not exist.\n     *\n     * Use `env` to specify environment variables that will be visible to the new\n     * process, the default is `process.env`.\n     *\n     * `undefined` values in `env` will be ignored.\n     *\n     * Example of running `ls -lh /usr`, capturing `stdout`, `stderr`, and the\n     * exit code:\n     *\n     * ```js\n     * import { spawn } from 'node:child_process';\n     * const ls = spawn('ls', ['-lh', '/usr']);\n     *\n     * ls.stdout.on('data', (data) => {\n     *   console.log(`stdout: ${data}`);\n     * });\n     *\n     * ls.stderr.on('data', (data) => {\n     *   console.error(`stderr: ${data}`);\n     * });\n     *\n     * ls.on('close', (code) => {\n     *   console.log(`child process exited with code ${code}`);\n     * });\n     * ```\n     *\n     * Example: A very elaborate way to run `ps ax | grep ssh`\n     *\n     * ```js\n     * import { spawn } from 'node:child_process';\n     * const ps = spawn('ps', ['ax']);\n     * const grep = spawn('grep', ['ssh']);\n     *\n     * ps.stdout.on('data', (data) => {\n     *   grep.stdin.write(data);\n     * });\n     *\n     * ps.stderr.on('data', (data) => {\n     *   console.error(`ps stderr: ${data}`);\n     * });\n     *\n     * ps.on('close', (code) => {\n     *   if (code !== 0) {\n     *     console.log(`ps process exited with code ${code}`);\n     *   }\n     *   grep.stdin.end();\n     * });\n     *\n     * grep.stdout.on('data', (data) => {\n     *   console.log(data.toString());\n     * });\n     *\n     * grep.stderr.on('data', (data) => {\n     *   console.error(`grep stderr: ${data}`);\n     * });\n     *\n     * grep.on('close', (code) => {\n     *   if (code !== 0) {\n     *     console.log(`grep process exited with code ${code}`);\n     *   }\n     * });\n     * ```\n     *\n     * Example of checking for failed `spawn`:\n     *\n     * ```js\n     * import { spawn } from 'node:child_process';\n     * const subprocess = spawn('bad_command');\n     *\n     * subprocess.on('error', (err) => {\n     *   console.error('Failed to start subprocess.');\n     * });\n     * ```\n     *\n     * Certain platforms (macOS, Linux) will use the value of `argv[0]` for the process\n     * title while others (Windows, SunOS) will use `command`.\n     *\n     * Node.js overwrites `argv[0]` with `process.execPath` on startup, so `process.argv[0]` in a Node.js child process will not match the `argv0` parameter passed to `spawn` from the parent. Retrieve\n     * it with the `process.argv0` property instead.\n     *\n     * If the `signal` option is enabled, calling `.abort()` on the corresponding `AbortController` is similar to calling `.kill()` on the child process except\n     * the error passed to the callback will be an `AbortError`:\n     *\n     * ```js\n     * import { spawn } from 'node:child_process';\n     * const controller = new AbortController();\n     * const { signal } = controller;\n     * const grep = spawn('grep', ['ssh'], { signal });\n     * grep.on('error', (err) => {\n     *   // This will be called with err being an AbortError if the controller aborts\n     * });\n     * controller.abort(); // Stops the child process\n     * ```\n     * @since v0.1.90\n     * @param command The command to run.\n     * @param args List of string arguments.\n     */\n    function spawn(command: string, options?: SpawnOptionsWithoutStdio): ChildProcessWithoutNullStreams;\n    function spawn(\n        command: string,\n        options: SpawnOptionsWithStdioTuple<StdioPipe, StdioPipe, StdioPipe>,\n    ): ChildProcessByStdio<Writable, Readable, Readable>;\n    function spawn(\n        command: string,\n        options: SpawnOptionsWithStdioTuple<StdioPipe, StdioPipe, StdioNull>,\n    ): ChildProcessByStdio<Writable, Readable, null>;\n    function spawn(\n        command: string,\n        options: SpawnOptionsWithStdioTuple<StdioPipe, StdioNull, StdioPipe>,\n    ): ChildProcessByStdio<Writable, null, Readable>;\n    function spawn(\n        command: string,\n        options: SpawnOptionsWithStdioTuple<StdioNull, StdioPipe, StdioPipe>,\n    ): ChildProcessByStdio<null, Readable, Readable>;\n    function spawn(\n        command: string,\n        options: SpawnOptionsWithStdioTuple<StdioPipe, StdioNull, StdioNull>,\n    ): ChildProcessByStdio<Writable, null, null>;\n    function spawn(\n        command: string,\n        options: SpawnOptionsWithStdioTuple<StdioNull, StdioPipe, StdioNull>,\n    ): ChildProcessByStdio<null, Readable, null>;\n    function spawn(\n        command: string,\n        options: SpawnOptionsWithStdioTuple<StdioNull, StdioNull, StdioPipe>,\n    ): ChildProcessByStdio<null, null, Readable>;\n    function spawn(\n        command: string,\n        options: SpawnOptionsWithStdioTuple<StdioNull, StdioNull, StdioNull>,\n    ): ChildProcessByStdio<null, null, null>;\n    function spawn(command: string, options: SpawnOptions): ChildProcess;\n    // overloads of spawn with 'args'\n    function spawn(\n        command: string,\n        args?: readonly string[],\n        options?: SpawnOptionsWithoutStdio,\n    ): ChildProcessWithoutNullStreams;\n    function spawn(\n        command: string,\n        args: readonly string[],\n        options: SpawnOptionsWithStdioTuple<StdioPipe, StdioPipe, StdioPipe>,\n    ): ChildProcessByStdio<Writable, Readable, Readable>;\n    function spawn(\n        command: string,\n        args: readonly string[],\n        options: SpawnOptionsWithStdioTuple<StdioPipe, StdioPipe, StdioNull>,\n    ): ChildProcessByStdio<Writable, Readable, null>;\n    function spawn(\n        command: string,\n        args: readonly string[],\n        options: SpawnOptionsWithStdioTuple<StdioPipe, StdioNull, StdioPipe>,\n    ): ChildProcessByStdio<Writable, null, Readable>;\n    function spawn(\n        command: string,\n        args: readonly string[],\n        options: SpawnOptionsWithStdioTuple<StdioNull, StdioPipe, StdioPipe>,\n    ): ChildProcessByStdio<null, Readable, Readable>;\n    function spawn(\n        command: string,\n        args: readonly string[],\n        options: SpawnOptionsWithStdioTuple<StdioPipe, StdioNull, StdioNull>,\n    ): ChildProcessByStdio<Writable, null, null>;\n    function spawn(\n        command: string,\n        args: readonly string[],\n        options: SpawnOptionsWithStdioTuple<StdioNull, StdioPipe, StdioNull>,\n    ): ChildProcessByStdio<null, Readable, null>;\n    function spawn(\n        command: string,\n        args: readonly string[],\n        options: SpawnOptionsWithStdioTuple<StdioNull, StdioNull, StdioPipe>,\n    ): ChildProcessByStdio<null, null, Readable>;\n    function spawn(\n        command: string,\n        args: readonly string[],\n        options: SpawnOptionsWithStdioTuple<StdioNull, StdioNull, StdioNull>,\n    ): ChildProcessByStdio<null, null, null>;\n    function spawn(command: string, args: readonly string[], options: SpawnOptions): ChildProcess;\n    interface ExecOptions extends CommonOptions {\n        shell?: string | undefined;\n        signal?: AbortSignal | undefined;\n        maxBuffer?: number | undefined;\n        killSignal?: NodeJS.Signals | number | undefined;\n    }\n    interface ExecOptionsWithStringEncoding extends ExecOptions {\n        encoding: BufferEncoding;\n    }\n    interface ExecOptionsWithBufferEncoding extends ExecOptions {\n        encoding: BufferEncoding | null; // specify `null`.\n    }\n    interface ExecException extends Error {\n        cmd?: string | undefined;\n        killed?: boolean | undefined;\n        code?: number | undefined;\n        signal?: NodeJS.Signals | undefined;\n        stdout?: string;\n        stderr?: string;\n    }\n    /**\n     * Spawns a shell then executes the `command` within that shell, buffering any\n     * generated output. The `command` string passed to the exec function is processed\n     * directly by the shell and special characters (vary based on [shell](https://en.wikipedia.org/wiki/List_of_command-line_interpreters))\n     * need to be dealt with accordingly:\n     *\n     * ```js\n     * import { exec } from 'node:child_process';\n     *\n     * exec('\"/path/to/test file/test.sh\" arg1 arg2');\n     * // Double quotes are used so that the space in the path is not interpreted as\n     * // a delimiter of multiple arguments.\n     *\n     * exec('echo \"The \\\\$HOME variable is $HOME\"');\n     * // The $HOME variable is escaped in the first instance, but not in the second.\n     * ```\n     *\n     * **Never pass unsanitized user input to this function. Any input containing shell**\n     * **metacharacters may be used to trigger arbitrary command execution.**\n     *\n     * If a `callback` function is provided, it is called with the arguments `(error, stdout, stderr)`. On success, `error` will be `null`. On error, `error` will be an instance of `Error`. The\n     * `error.code` property will be\n     * the exit code of the process. By convention, any exit code other than `0` indicates an error. `error.signal` will be the signal that terminated the\n     * process.\n     *\n     * The `stdout` and `stderr` arguments passed to the callback will contain the\n     * stdout and stderr output of the child process. By default, Node.js will decode\n     * the output as UTF-8 and pass strings to the callback. The `encoding` option\n     * can be used to specify the character encoding used to decode the stdout and\n     * stderr output. If `encoding` is `'buffer'`, or an unrecognized character\n     * encoding, `Buffer` objects will be passed to the callback instead.\n     *\n     * ```js\n     * import { exec } from 'node:child_process';\n     * exec('cat *.js missing_file | wc -l', (error, stdout, stderr) => {\n     *   if (error) {\n     *     console.error(`exec error: ${error}`);\n     *     return;\n     *   }\n     *   console.log(`stdout: ${stdout}`);\n     *   console.error(`stderr: ${stderr}`);\n     * });\n     * ```\n     *\n     * If `timeout` is greater than `0`, the parent will send the signal\n     * identified by the `killSignal` property (the default is `'SIGTERM'`) if the\n     * child runs longer than `timeout` milliseconds.\n     *\n     * Unlike the [`exec(3)`](http://man7.org/linux/man-pages/man3/exec.3.html) POSIX system call, `child_process.exec()` does not replace\n     * the existing process and uses a shell to execute the command.\n     *\n     * If this method is invoked as its `util.promisify()` ed version, it returns\n     * a `Promise` for an `Object` with `stdout` and `stderr` properties. The returned `ChildProcess` instance is attached to the `Promise` as a `child` property. In\n     * case of an error (including any error resulting in an exit code other than 0), a\n     * rejected promise is returned, with the same `error` object given in the\n     * callback, but with two additional properties `stdout` and `stderr`.\n     *\n     * ```js\n     * import util from 'node:util';\n     * import child_process from 'node:child_process';\n     * const exec = util.promisify(child_process.exec);\n     *\n     * async function lsExample() {\n     *   const { stdout, stderr } = await exec('ls');\n     *   console.log('stdout:', stdout);\n     *   console.error('stderr:', stderr);\n     * }\n     * lsExample();\n     * ```\n     *\n     * If the `signal` option is enabled, calling `.abort()` on the corresponding `AbortController` is similar to calling `.kill()` on the child process except\n     * the error passed to the callback will be an `AbortError`:\n     *\n     * ```js\n     * import { exec } from 'node:child_process';\n     * const controller = new AbortController();\n     * const { signal } = controller;\n     * const child = exec('grep ssh', { signal }, (error) => {\n     *   console.error(error); // an AbortError\n     * });\n     * controller.abort();\n     * ```\n     * @since v0.1.90\n     * @param command The command to run, with space-separated arguments.\n     * @param callback called with the output when process terminates.\n     */\n    function exec(\n        command: string,\n        callback?: (error: ExecException | null, stdout: string, stderr: string) => void,\n    ): ChildProcess;\n    // `options` with `\"buffer\"` or `null` for `encoding` means stdout/stderr are definitely `Buffer`.\n    function exec(\n        command: string,\n        options: {\n            encoding: \"buffer\" | null;\n        } & ExecOptions,\n        callback?: (error: ExecException | null, stdout: Buffer, stderr: Buffer) => void,\n    ): ChildProcess;\n    // `options` with well known `encoding` means stdout/stderr are definitely `string`.\n    function exec(\n        command: string,\n        options: {\n            encoding: BufferEncoding;\n        } & ExecOptions,\n        callback?: (error: ExecException | null, stdout: string, stderr: string) => void,\n    ): ChildProcess;\n    // `options` with an `encoding` whose type is `string` means stdout/stderr could either be `Buffer` or `string`.\n    // There is no guarantee the `encoding` is unknown as `string` is a superset of `BufferEncoding`.\n    function exec(\n        command: string,\n        options: {\n            encoding: BufferEncoding;\n        } & ExecOptions,\n        callback?: (error: ExecException | null, stdout: string | Buffer, stderr: string | Buffer) => void,\n    ): ChildProcess;\n    // `options` without an `encoding` means stdout/stderr are definitely `string`.\n    function exec(\n        command: string,\n        options: ExecOptions,\n        callback?: (error: ExecException | null, stdout: string, stderr: string) => void,\n    ): ChildProcess;\n    // fallback if nothing else matches. Worst case is always `string | Buffer`.\n    function exec(\n        command: string,\n        options: (ObjectEncodingOptions & ExecOptions) | undefined | null,\n        callback?: (error: ExecException | null, stdout: string | Buffer, stderr: string | Buffer) => void,\n    ): ChildProcess;\n    interface PromiseWithChild<T> extends Promise<T> {\n        child: ChildProcess;\n    }\n    namespace exec {\n        function __promisify__(command: string): PromiseWithChild<{\n            stdout: string;\n            stderr: string;\n        }>;\n        function __promisify__(\n            command: string,\n            options: {\n                encoding: \"buffer\" | null;\n            } & ExecOptions,\n        ): PromiseWithChild<{\n            stdout: Buffer;\n            stderr: Buffer;\n        }>;\n        function __promisify__(\n            command: string,\n            options: {\n                encoding: BufferEncoding;\n            } & ExecOptions,\n        ): PromiseWithChild<{\n            stdout: string;\n            stderr: string;\n        }>;\n        function __promisify__(\n            command: string,\n            options: ExecOptions,\n        ): PromiseWithChild<{\n            stdout: string;\n            stderr: string;\n        }>;\n        function __promisify__(\n            command: string,\n            options?: (ObjectEncodingOptions & ExecOptions) | null,\n        ): PromiseWithChild<{\n            stdout: string | Buffer;\n            stderr: string | Buffer;\n        }>;\n    }\n    interface ExecFileOptions extends CommonOptions, Abortable {\n        maxBuffer?: number | undefined;\n        killSignal?: NodeJS.Signals | number | undefined;\n        windowsVerbatimArguments?: boolean | undefined;\n        shell?: boolean | string | undefined;\n        signal?: AbortSignal | undefined;\n    }\n    interface ExecFileOptionsWithStringEncoding extends ExecFileOptions {\n        encoding: BufferEncoding;\n    }\n    interface ExecFileOptionsWithBufferEncoding extends ExecFileOptions {\n        encoding: \"buffer\" | null;\n    }\n    interface ExecFileOptionsWithOtherEncoding extends ExecFileOptions {\n        encoding: BufferEncoding;\n    }\n    type ExecFileException =\n        & Omit<ExecException, \"code\">\n        & Omit<NodeJS.ErrnoException, \"code\">\n        & { code?: string | number | undefined | null };\n    /**\n     * The `child_process.execFile()` function is similar to {@link exec} except that it does not spawn a shell by default. Rather, the specified\n     * executable `file` is spawned directly as a new process making it slightly more\n     * efficient than {@link exec}.\n     *\n     * The same options as {@link exec} are supported. Since a shell is\n     * not spawned, behaviors such as I/O redirection and file globbing are not\n     * supported.\n     *\n     * ```js\n     * import { execFile } from 'node:child_process';\n     * const child = execFile('node', ['--version'], (error, stdout, stderr) => {\n     *   if (error) {\n     *     throw error;\n     *   }\n     *   console.log(stdout);\n     * });\n     * ```\n     *\n     * The `stdout` and `stderr` arguments passed to the callback will contain the\n     * stdout and stderr output of the child process. By default, Node.js will decode\n     * the output as UTF-8 and pass strings to the callback. The `encoding` option\n     * can be used to specify the character encoding used to decode the stdout and\n     * stderr output. If `encoding` is `'buffer'`, or an unrecognized character\n     * encoding, `Buffer` objects will be passed to the callback instead.\n     *\n     * If this method is invoked as its `util.promisify()` ed version, it returns\n     * a `Promise` for an `Object` with `stdout` and `stderr` properties. The returned `ChildProcess` instance is attached to the `Promise` as a `child` property. In\n     * case of an error (including any error resulting in an exit code other than 0), a\n     * rejected promise is returned, with the same `error` object given in the\n     * callback, but with two additional properties `stdout` and `stderr`.\n     *\n     * ```js\n     * import util from 'node:util';\n     * import child_process from 'node:child_process';\n     * const execFile = util.promisify(child_process.execFile);\n     * async function getVersion() {\n     *   const { stdout } = await execFile('node', ['--version']);\n     *   console.log(stdout);\n     * }\n     * getVersion();\n     * ```\n     *\n     * **If the `shell` option is enabled, do not pass unsanitized user input to this**\n     * **function. Any input containing shell metacharacters may be used to trigger**\n     * **arbitrary command execution.**\n     *\n     * If the `signal` option is enabled, calling `.abort()` on the corresponding `AbortController` is similar to calling `.kill()` on the child process except\n     * the error passed to the callback will be an `AbortError`:\n     *\n     * ```js\n     * import { execFile } from 'node:child_process';\n     * const controller = new AbortController();\n     * const { signal } = controller;\n     * const child = execFile('node', ['--version'], { signal }, (error) => {\n     *   console.error(error); // an AbortError\n     * });\n     * controller.abort();\n     * ```\n     * @since v0.1.91\n     * @param file The name or path of the executable file to run.\n     * @param args List of string arguments.\n     * @param callback Called with the output when process terminates.\n     */\n    function execFile(file: string): ChildProcess;\n    function execFile(\n        file: string,\n        options: (ObjectEncodingOptions & ExecFileOptions) | undefined | null,\n    ): ChildProcess;\n    function execFile(file: string, args?: readonly string[] | null): ChildProcess;\n    function execFile(\n        file: string,\n        args: readonly string[] | undefined | null,\n        options: (ObjectEncodingOptions & ExecFileOptions) | undefined | null,\n    ): ChildProcess;\n    // no `options` definitely means stdout/stderr are `string`.\n    function execFile(\n        file: string,\n        callback: (error: ExecFileException | null, stdout: string, stderr: string) => void,\n    ): ChildProcess;\n    function execFile(\n        file: string,\n        args: readonly string[] | undefined | null,\n        callback: (error: ExecFileException | null, stdout: string, stderr: string) => void,\n    ): ChildProcess;\n    // `options` with `\"buffer\"` or `null` for `encoding` means stdout/stderr are definitely `Buffer`.\n    function execFile(\n        file: string,\n        options: ExecFileOptionsWithBufferEncoding,\n        callback: (error: ExecFileException | null, stdout: Buffer, stderr: Buffer) => void,\n    ): ChildProcess;\n    function execFile(\n        file: string,\n        args: readonly string[] | undefined | null,\n        options: ExecFileOptionsWithBufferEncoding,\n        callback: (error: ExecFileException | null, stdout: Buffer, stderr: Buffer) => void,\n    ): ChildProcess;\n    // `options` with well known `encoding` means stdout/stderr are definitely `string`.\n    function execFile(\n        file: string,\n        options: ExecFileOptionsWithStringEncoding,\n        callback: (error: ExecFileException | null, stdout: string, stderr: string) => void,\n    ): ChildProcess;\n    function execFile(\n        file: string,\n        args: readonly string[] | undefined | null,\n        options: ExecFileOptionsWithStringEncoding,\n        callback: (error: ExecFileException | null, stdout: string, stderr: string) => void,\n    ): ChildProcess;\n    // `options` with an `encoding` whose type is `string` means stdout/stderr could either be `Buffer` or `string`.\n    // There is no guarantee the `encoding` is unknown as `string` is a superset of `BufferEncoding`.\n    function execFile(\n        file: string,\n        options: ExecFileOptionsWithOtherEncoding,\n        callback: (error: ExecFileException | null, stdout: string | Buffer, stderr: string | Buffer) => void,\n    ): ChildProcess;\n    function execFile(\n        file: string,\n        args: readonly string[] | undefined | null,\n        options: ExecFileOptionsWithOtherEncoding,\n        callback: (error: ExecFileException | null, stdout: string | Buffer, stderr: string | Buffer) => void,\n    ): ChildProcess;\n    // `options` without an `encoding` means stdout/stderr are definitely `string`.\n    function execFile(\n        file: string,\n        options: ExecFileOptions,\n        callback: (error: ExecFileException | null, stdout: string, stderr: string) => void,\n    ): ChildProcess;\n    function execFile(\n        file: string,\n        args: readonly string[] | undefined | null,\n        options: ExecFileOptions,\n        callback: (error: ExecFileException | null, stdout: string, stderr: string) => void,\n    ): ChildProcess;\n    // fallback if nothing else matches. Worst case is always `string | Buffer`.\n    function execFile(\n        file: string,\n        options: (ObjectEncodingOptions & ExecFileOptions) | undefined | null,\n        callback:\n            | ((error: ExecFileException | null, stdout: string | Buffer, stderr: string | Buffer) => void)\n            | undefined\n            | null,\n    ): ChildProcess;\n    function execFile(\n        file: string,\n        args: readonly string[] | undefined | null,\n        options: (ObjectEncodingOptions & ExecFileOptions) | undefined | null,\n        callback:\n            | ((error: ExecFileException | null, stdout: string | Buffer, stderr: string | Buffer) => void)\n            | undefined\n            | null,\n    ): ChildProcess;\n    namespace execFile {\n        function __promisify__(file: string): PromiseWithChild<{\n            stdout: string;\n            stderr: string;\n        }>;\n        function __promisify__(\n            file: string,\n            args: readonly string[] | undefined | null,\n        ): PromiseWithChild<{\n            stdout: string;\n            stderr: string;\n        }>;\n        function __promisify__(\n            file: string,\n            options: ExecFileOptionsWithBufferEncoding,\n        ): PromiseWithChild<{\n            stdout: Buffer;\n            stderr: Buffer;\n        }>;\n        function __promisify__(\n            file: string,\n            args: readonly string[] | undefined | null,\n            options: ExecFileOptionsWithBufferEncoding,\n        ): PromiseWithChild<{\n            stdout: Buffer;\n            stderr: Buffer;\n        }>;\n        function __promisify__(\n            file: string,\n            options: ExecFileOptionsWithStringEncoding,\n        ): PromiseWithChild<{\n            stdout: string;\n            stderr: string;\n        }>;\n        function __promisify__(\n            file: string,\n            args: readonly string[] | undefined | null,\n            options: ExecFileOptionsWithStringEncoding,\n        ): PromiseWithChild<{\n            stdout: string;\n            stderr: string;\n        }>;\n        function __promisify__(\n            file: string,\n            options: ExecFileOptionsWithOtherEncoding,\n        ): PromiseWithChild<{\n            stdout: string | Buffer;\n            stderr: string | Buffer;\n        }>;\n        function __promisify__(\n            file: string,\n            args: readonly string[] | undefined | null,\n            options: ExecFileOptionsWithOtherEncoding,\n        ): PromiseWithChild<{\n            stdout: string | Buffer;\n            stderr: string | Buffer;\n        }>;\n        function __promisify__(\n            file: string,\n            options: ExecFileOptions,\n        ): PromiseWithChild<{\n            stdout: string;\n            stderr: string;\n        }>;\n        function __promisify__(\n            file: string,\n            args: readonly string[] | undefined | null,\n            options: ExecFileOptions,\n        ): PromiseWithChild<{\n            stdout: string;\n            stderr: string;\n        }>;\n        function __promisify__(\n            file: string,\n            options: (ObjectEncodingOptions & ExecFileOptions) | undefined | null,\n        ): PromiseWithChild<{\n            stdout: string | Buffer;\n            stderr: string | Buffer;\n        }>;\n        function __promisify__(\n            file: string,\n            args: readonly string[] | undefined | null,\n            options: (ObjectEncodingOptions & ExecFileOptions) | undefined | null,\n        ): PromiseWithChild<{\n            stdout: string | Buffer;\n            stderr: string | Buffer;\n        }>;\n    }\n    interface ForkOptions extends ProcessEnvOptions, MessagingOptions, Abortable {\n        execPath?: string | undefined;\n        execArgv?: string[] | undefined;\n        silent?: boolean | undefined;\n        /**\n         * Can be set to 'pipe', 'inherit', 'overlapped', or 'ignore', or an array of these strings.\n         * If passed as an array, the first element is used for `stdin`, the second for\n         * `stdout`, and the third for `stderr`. A fourth element can be used to\n         * specify the `stdio` behavior beyond the standard streams. See\n         * {@link ChildProcess.stdio} for more information.\n         *\n         * @default 'pipe'\n         */\n        stdio?: StdioOptions | undefined;\n        detached?: boolean | undefined;\n        windowsVerbatimArguments?: boolean | undefined;\n    }\n    /**\n     * The `child_process.fork()` method is a special case of {@link spawn} used specifically to spawn new Node.js processes.\n     * Like {@link spawn}, a `ChildProcess` object is returned. The\n     * returned `ChildProcess` will have an additional communication channel\n     * built-in that allows messages to be passed back and forth between the parent and\n     * child. See `subprocess.send()` for details.\n     *\n     * Keep in mind that spawned Node.js child processes are\n     * independent of the parent with exception of the IPC communication channel\n     * that is established between the two. Each process has its own memory, with\n     * their own V8 instances. Because of the additional resource allocations\n     * required, spawning a large number of child Node.js processes is not\n     * recommended.\n     *\n     * By default, `child_process.fork()` will spawn new Node.js instances using the `process.execPath` of the parent process. The `execPath` property in the `options` object allows for an alternative\n     * execution path to be used.\n     *\n     * Node.js processes launched with a custom `execPath` will communicate with the\n     * parent process using the file descriptor (fd) identified using the\n     * environment variable `NODE_CHANNEL_FD` on the child process.\n     *\n     * Unlike the [`fork(2)`](http://man7.org/linux/man-pages/man2/fork.2.html) POSIX system call, `child_process.fork()` does not clone the\n     * current process.\n     *\n     * The `shell` option available in {@link spawn} is not supported by `child_process.fork()` and will be ignored if set.\n     *\n     * If the `signal` option is enabled, calling `.abort()` on the corresponding `AbortController` is similar to calling `.kill()` on the child process except\n     * the error passed to the callback will be an `AbortError`:\n     *\n     * ```js\n     * if (process.argv[2] === 'child') {\n     *   setTimeout(() => {\n     *     console.log(`Hello from ${process.argv[2]}!`);\n     *   }, 1_000);\n     * } else {\n     *   import { fork } from 'node:child_process';\n     *   const controller = new AbortController();\n     *   const { signal } = controller;\n     *   const child = fork(__filename, ['child'], { signal });\n     *   child.on('error', (err) => {\n     *     // This will be called with err being an AbortError if the controller aborts\n     *   });\n     *   controller.abort(); // Stops the child process\n     * }\n     * ```\n     * @since v0.5.0\n     * @param modulePath The module to run in the child.\n     * @param args List of string arguments.\n     */\n    function fork(modulePath: string | URL, options?: ForkOptions): ChildProcess;\n    function fork(modulePath: string | URL, args?: readonly string[], options?: ForkOptions): ChildProcess;\n    interface SpawnSyncOptions extends CommonSpawnOptions {\n        input?: string | NodeJS.ArrayBufferView | undefined;\n        maxBuffer?: number | undefined;\n        encoding?: BufferEncoding | \"buffer\" | null | undefined;\n    }\n    interface SpawnSyncOptionsWithStringEncoding extends SpawnSyncOptions {\n        encoding: BufferEncoding;\n    }\n    interface SpawnSyncOptionsWithBufferEncoding extends SpawnSyncOptions {\n        encoding?: \"buffer\" | null | undefined;\n    }\n    interface SpawnSyncReturns<T> {\n        pid: number;\n        output: Array<T | null>;\n        stdout: T;\n        stderr: T;\n        status: number | null;\n        signal: NodeJS.Signals | null;\n        error?: Error | undefined;\n    }\n    /**\n     * The `child_process.spawnSync()` method is generally identical to {@link spawn} with the exception that the function will not return\n     * until the child process has fully closed. When a timeout has been encountered\n     * and `killSignal` is sent, the method won't return until the process has\n     * completely exited. If the process intercepts and handles the `SIGTERM` signal\n     * and doesn't exit, the parent process will wait until the child process has\n     * exited.\n     *\n     * **If the `shell` option is enabled, do not pass unsanitized user input to this**\n     * **function. Any input containing shell metacharacters may be used to trigger**\n     * **arbitrary command execution.**\n     * @since v0.11.12\n     * @param command The command to run.\n     * @param args List of string arguments.\n     */\n    function spawnSync(command: string): SpawnSyncReturns<Buffer>;\n    function spawnSync(command: string, options: SpawnSyncOptionsWithStringEncoding): SpawnSyncReturns<string>;\n    function spawnSync(command: string, options: SpawnSyncOptionsWithBufferEncoding): SpawnSyncReturns<Buffer>;\n    function spawnSync(command: string, options?: SpawnSyncOptions): SpawnSyncReturns<string | Buffer>;\n    function spawnSync(command: string, args: readonly string[]): SpawnSyncReturns<Buffer>;\n    function spawnSync(\n        command: string,\n        args: readonly string[],\n        options: SpawnSyncOptionsWithStringEncoding,\n    ): SpawnSyncReturns<string>;\n    function spawnSync(\n        command: string,\n        args: readonly string[],\n        options: SpawnSyncOptionsWithBufferEncoding,\n    ): SpawnSyncReturns<Buffer>;\n    function spawnSync(\n        command: string,\n        args?: readonly string[],\n        options?: SpawnSyncOptions,\n    ): SpawnSyncReturns<string | Buffer>;\n    interface CommonExecOptions extends CommonOptions {\n        input?: string | NodeJS.ArrayBufferView | undefined;\n        /**\n         * Can be set to 'pipe', 'inherit, or 'ignore', or an array of these strings.\n         * If passed as an array, the first element is used for `stdin`, the second for\n         * `stdout`, and the third for `stderr`. A fourth element can be used to\n         * specify the `stdio` behavior beyond the standard streams. See\n         * {@link ChildProcess.stdio} for more information.\n         *\n         * @default 'pipe'\n         */\n        stdio?: StdioOptions | undefined;\n        killSignal?: NodeJS.Signals | number | undefined;\n        maxBuffer?: number | undefined;\n        encoding?: BufferEncoding | \"buffer\" | null | undefined;\n    }\n    interface ExecSyncOptions extends CommonExecOptions {\n        shell?: string | undefined;\n    }\n    interface ExecSyncOptionsWithStringEncoding extends ExecSyncOptions {\n        encoding: BufferEncoding;\n    }\n    interface ExecSyncOptionsWithBufferEncoding extends ExecSyncOptions {\n        encoding?: \"buffer\" | null | undefined;\n    }\n    /**\n     * The `child_process.execSync()` method is generally identical to {@link exec} with the exception that the method will not return\n     * until the child process has fully closed. When a timeout has been encountered\n     * and `killSignal` is sent, the method won't return until the process has\n     * completely exited. If the child process intercepts and handles the `SIGTERM` signal and doesn't exit, the parent process will wait until the child process\n     * has exited.\n     *\n     * If the process times out or has a non-zero exit code, this method will throw.\n     * The `Error` object will contain the entire result from {@link spawnSync}.\n     *\n     * **Never pass unsanitized user input to this function. Any input containing shell**\n     * **metacharacters may be used to trigger arbitrary command execution.**\n     * @since v0.11.12\n     * @param command The command to run.\n     * @return The stdout from the command.\n     */\n    function execSync(command: string): Buffer;\n    function execSync(command: string, options: ExecSyncOptionsWithStringEncoding): string;\n    function execSync(command: string, options: ExecSyncOptionsWithBufferEncoding): Buffer;\n    function execSync(command: string, options?: ExecSyncOptions): string | Buffer;\n    interface ExecFileSyncOptions extends CommonExecOptions {\n        shell?: boolean | string | undefined;\n    }\n    interface ExecFileSyncOptionsWithStringEncoding extends ExecFileSyncOptions {\n        encoding: BufferEncoding;\n    }\n    interface ExecFileSyncOptionsWithBufferEncoding extends ExecFileSyncOptions {\n        encoding?: \"buffer\" | null; // specify `null`.\n    }\n    /**\n     * The `child_process.execFileSync()` method is generally identical to {@link execFile} with the exception that the method will not\n     * return until the child process has fully closed. When a timeout has been\n     * encountered and `killSignal` is sent, the method won't return until the process\n     * has completely exited.\n     *\n     * If the child process intercepts and handles the `SIGTERM` signal and\n     * does not exit, the parent process will still wait until the child process has\n     * exited.\n     *\n     * If the process times out or has a non-zero exit code, this method will throw an `Error` that will include the full result of the underlying {@link spawnSync}.\n     *\n     * **If the `shell` option is enabled, do not pass unsanitized user input to this**\n     * **function. Any input containing shell metacharacters may be used to trigger**\n     * **arbitrary command execution.**\n     * @since v0.11.12\n     * @param file The name or path of the executable file to run.\n     * @param args List of string arguments.\n     * @return The stdout from the command.\n     */\n    function execFileSync(file: string): Buffer;\n    function execFileSync(file: string, options: ExecFileSyncOptionsWithStringEncoding): string;\n    function execFileSync(file: string, options: ExecFileSyncOptionsWithBufferEncoding): Buffer;\n    function execFileSync(file: string, options?: ExecFileSyncOptions): string | Buffer;\n    function execFileSync(file: string, args: readonly string[]): Buffer;\n    function execFileSync(\n        file: string,\n        args: readonly string[],\n        options: ExecFileSyncOptionsWithStringEncoding,\n    ): string;\n    function execFileSync(\n        file: string,\n        args: readonly string[],\n        options: ExecFileSyncOptionsWithBufferEncoding,\n    ): Buffer;\n    function execFileSync(file: string, args?: readonly string[], options?: ExecFileSyncOptions): string | Buffer;\n}\ndeclare module \"node:child_process\" {\n    export * from \"child_process\";\n}\n",
  '@types/node/cluster.d.ts':
    '/**\n * Clusters of Node.js processes can be used to run multiple instances of Node.js\n * that can distribute workloads among their application threads. When process isolation\n * is not needed, use the [`worker_threads`](https://nodejs.org/docs/latest-v22.x/api/worker_threads.html)\n * module instead, which allows running multiple application threads within a single Node.js instance.\n *\n * The cluster module allows easy creation of child processes that all share\n * server ports.\n *\n * ```js\n * import cluster from \'node:cluster\';\n * import http from \'node:http\';\n * import { availableParallelism } from \'node:os\';\n * import process from \'node:process\';\n *\n * const numCPUs = availableParallelism();\n *\n * if (cluster.isPrimary) {\n *   console.log(`Primary ${process.pid} is running`);\n *\n *   // Fork workers.\n *   for (let i = 0; i < numCPUs; i++) {\n *     cluster.fork();\n *   }\n *\n *   cluster.on(\'exit\', (worker, code, signal) => {\n *     console.log(`worker ${worker.process.pid} died`);\n *   });\n * } else {\n *   // Workers can share any TCP connection\n *   // In this case it is an HTTP server\n *   http.createServer((req, res) => {\n *     res.writeHead(200);\n *     res.end(\'hello world\\n\');\n *   }).listen(8000);\n *\n *   console.log(`Worker ${process.pid} started`);\n * }\n * ```\n *\n * Running Node.js will now share port 8000 between the workers:\n *\n * ```console\n * $ node server.js\n * Primary 3596 is running\n * Worker 4324 started\n * Worker 4520 started\n * Worker 6056 started\n * Worker 5644 started\n * ```\n *\n * On Windows, it is not yet possible to set up a named pipe server in a worker.\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/cluster.js)\n */\ndeclare module "cluster" {\n    import * as child from "node:child_process";\n    import EventEmitter = require("node:events");\n    import * as net from "node:net";\n    type SerializationType = "json" | "advanced";\n    export interface ClusterSettings {\n        /**\n         * List of string arguments passed to the Node.js executable.\n         * @default process.execArgv\n         */\n        execArgv?: string[] | undefined;\n        /**\n         * File path to worker file.\n         * @default process.argv[1]\n         */\n        exec?: string | undefined;\n        /**\n         * String arguments passed to worker.\n         * @default process.argv.slice(2)\n         */\n        args?: string[] | undefined;\n        /**\n         * Whether or not to send output to parent\'s stdio.\n         * @default false\n         */\n        silent?: boolean | undefined;\n        /**\n         * Configures the stdio of forked processes. Because the cluster module relies on IPC to function, this configuration must\n         * contain an `\'ipc\'` entry. When this option is provided, it overrides `silent`. See [`child_prcess.spawn()`](https://nodejs.org/docs/latest-v22.x/api/child_process.html#child_processspawncommand-args-options)\'s\n         * [`stdio`](https://nodejs.org/docs/latest-v22.x/api/child_process.html#optionsstdio).\n         */\n        stdio?: any[] | undefined;\n        /**\n         * Sets the user identity of the process. (See [`setuid(2)`](https://man7.org/linux/man-pages/man2/setuid.2.html).)\n         */\n        uid?: number | undefined;\n        /**\n         * Sets the group identity of the process. (See [`setgid(2)`](https://man7.org/linux/man-pages/man2/setgid.2.html).)\n         */\n        gid?: number | undefined;\n        /**\n         * Sets inspector port of worker. This can be a number, or a function that takes no arguments and returns a number.\n         * By default each worker gets its own port, incremented from the primary\'s `process.debugPort`.\n         */\n        inspectPort?: number | (() => number) | undefined;\n        /**\n         * Specify the kind of serialization used for sending messages between processes. Possible values are `\'json\'` and `\'advanced\'`.\n         * See [Advanced serialization for `child_process`](https://nodejs.org/docs/latest-v22.x/api/child_process.html#advanced-serialization) for more details.\n         * @default false\n         */\n        serialization?: SerializationType | undefined;\n        /**\n         * Current working directory of the worker process.\n         * @default undefined (inherits from parent process)\n         */\n        cwd?: string | undefined;\n        /**\n         * Hide the forked processes console window that would normally be created on Windows systems.\n         * @default false\n         */\n        windowsHide?: boolean | undefined;\n    }\n    export interface Address {\n        address: string;\n        port: number;\n        /**\n         * The `addressType` is one of:\n         *\n         * * `4` (TCPv4)\n         * * `6` (TCPv6)\n         * * `-1` (Unix domain socket)\n         * * `\'udp4\'` or `\'udp6\'` (UDPv4 or UDPv6)\n         */\n        addressType: 4 | 6 | -1 | "udp4" | "udp6";\n    }\n    /**\n     * A `Worker` object contains all public information and method about a worker.\n     * In the primary it can be obtained using `cluster.workers`. In a worker\n     * it can be obtained using `cluster.worker`.\n     * @since v0.7.0\n     */\n    export class Worker extends EventEmitter {\n        /**\n         * Each new worker is given its own unique id, this id is stored in the `id`.\n         *\n         * While a worker is alive, this is the key that indexes it in `cluster.workers`.\n         * @since v0.8.0\n         */\n        id: number;\n        /**\n         * All workers are created using [`child_process.fork()`](https://nodejs.org/docs/latest-v22.x/api/child_process.html#child_processforkmodulepath-args-options), the returned object\n         * from this function is stored as `.process`. In a worker, the global `process` is stored.\n         *\n         * See: [Child Process module](https://nodejs.org/docs/latest-v22.x/api/child_process.html#child_processforkmodulepath-args-options).\n         *\n         * Workers will call `process.exit(0)` if the `\'disconnect\'` event occurs\n         * on `process` and `.exitedAfterDisconnect` is not `true`. This protects against\n         * accidental disconnection.\n         * @since v0.7.0\n         */\n        process: child.ChildProcess;\n        /**\n         * Send a message to a worker or primary, optionally with a handle.\n         *\n         * In the primary, this sends a message to a specific worker. It is identical to [`ChildProcess.send()`](https://nodejs.org/docs/latest-v22.x/api/child_process.html#subprocesssendmessage-sendhandle-options-callback).\n         *\n         * In a worker, this sends a message to the primary. It is identical to `process.send()`.\n         *\n         * This example will echo back all messages from the primary:\n         *\n         * ```js\n         * if (cluster.isPrimary) {\n         *   const worker = cluster.fork();\n         *   worker.send(\'hi there\');\n         *\n         * } else if (cluster.isWorker) {\n         *   process.on(\'message\', (msg) => {\n         *     process.send(msg);\n         *   });\n         * }\n         * ```\n         * @since v0.7.0\n         * @param options The `options` argument, if present, is an object used to parameterize the sending of certain types of handles.\n         */\n        send(message: child.Serializable, callback?: (error: Error | null) => void): boolean;\n        send(\n            message: child.Serializable,\n            sendHandle: child.SendHandle,\n            callback?: (error: Error | null) => void,\n        ): boolean;\n        send(\n            message: child.Serializable,\n            sendHandle: child.SendHandle,\n            options?: child.MessageOptions,\n            callback?: (error: Error | null) => void,\n        ): boolean;\n        /**\n         * This function will kill the worker. In the primary worker, it does this by\n         * disconnecting the `worker.process`, and once disconnected, killing with `signal`. In the worker, it does it by killing the process with `signal`.\n         *\n         * The `kill()` function kills the worker process without waiting for a graceful\n         * disconnect, it has the same behavior as `worker.process.kill()`.\n         *\n         * This method is aliased as `worker.destroy()` for backwards compatibility.\n         *\n         * In a worker, `process.kill()` exists, but it is not this function;\n         * it is [`kill()`](https://nodejs.org/docs/latest-v22.x/api/process.html#processkillpid-signal).\n         * @since v0.9.12\n         * @param [signal=\'SIGTERM\'] Name of the kill signal to send to the worker process.\n         */\n        kill(signal?: string): void;\n        destroy(signal?: string): void;\n        /**\n         * In a worker, this function will close all servers, wait for the `\'close\'` event\n         * on those servers, and then disconnect the IPC channel.\n         *\n         * In the primary, an internal message is sent to the worker causing it to call `.disconnect()` on itself.\n         *\n         * Causes `.exitedAfterDisconnect` to be set.\n         *\n         * After a server is closed, it will no longer accept new connections,\n         * but connections may be accepted by any other listening worker. Existing\n         * connections will be allowed to close as usual. When no more connections exist,\n         * see `server.close()`, the IPC channel to the worker will close allowing it\n         * to die gracefully.\n         *\n         * The above applies _only_ to server connections, client connections are not\n         * automatically closed by workers, and disconnect does not wait for them to close\n         * before exiting.\n         *\n         * In a worker, `process.disconnect` exists, but it is not this function;\n         * it is `disconnect()`.\n         *\n         * Because long living server connections may block workers from disconnecting, it\n         * may be useful to send a message, so application specific actions may be taken to\n         * close them. It also may be useful to implement a timeout, killing a worker if\n         * the `\'disconnect\'` event has not been emitted after some time.\n         *\n         * ```js\n         * import net from \'node:net\';\n         *\n         * if (cluster.isPrimary) {\n         *   const worker = cluster.fork();\n         *   let timeout;\n         *\n         *   worker.on(\'listening\', (address) => {\n         *     worker.send(\'shutdown\');\n         *     worker.disconnect();\n         *     timeout = setTimeout(() => {\n         *       worker.kill();\n         *     }, 2000);\n         *   });\n         *\n         *   worker.on(\'disconnect\', () => {\n         *     clearTimeout(timeout);\n         *   });\n         *\n         * } else if (cluster.isWorker) {\n         *   const server = net.createServer((socket) => {\n         *     // Connections never end\n         *   });\n         *\n         *   server.listen(8000);\n         *\n         *   process.on(\'message\', (msg) => {\n         *     if (msg === \'shutdown\') {\n         *       // Initiate graceful close of any connections to server\n         *     }\n         *   });\n         * }\n         * ```\n         * @since v0.7.7\n         * @return A reference to `worker`.\n         */\n        disconnect(): this;\n        /**\n         * This function returns `true` if the worker is connected to its primary via its\n         * IPC channel, `false` otherwise. A worker is connected to its primary after it\n         * has been created. It is disconnected after the `\'disconnect\'` event is emitted.\n         * @since v0.11.14\n         */\n        isConnected(): boolean;\n        /**\n         * This function returns `true` if the worker\'s process has terminated (either\n         * because of exiting or being signaled). Otherwise, it returns `false`.\n         *\n         * ```js\n         * import cluster from \'node:cluster\';\n         * import http from \'node:http\';\n         * import { availableParallelism } from \'node:os\';\n         * import process from \'node:process\';\n         *\n         * const numCPUs = availableParallelism();\n         *\n         * if (cluster.isPrimary) {\n         *   console.log(`Primary ${process.pid} is running`);\n         *\n         *   // Fork workers.\n         *   for (let i = 0; i < numCPUs; i++) {\n         *     cluster.fork();\n         *   }\n         *\n         *   cluster.on(\'fork\', (worker) => {\n         *     console.log(\'worker is dead:\', worker.isDead());\n         *   });\n         *\n         *   cluster.on(\'exit\', (worker, code, signal) => {\n         *     console.log(\'worker is dead:\', worker.isDead());\n         *   });\n         * } else {\n         *   // Workers can share any TCP connection. In this case, it is an HTTP server.\n         *   http.createServer((req, res) => {\n         *     res.writeHead(200);\n         *     res.end(`Current process\\n ${process.pid}`);\n         *     process.kill(process.pid);\n         *   }).listen(8000);\n         * }\n         * ```\n         * @since v0.11.14\n         */\n        isDead(): boolean;\n        /**\n         * This property is `true` if the worker exited due to `.disconnect()`.\n         * If the worker exited any other way, it is `false`. If the\n         * worker has not exited, it is `undefined`.\n         *\n         * The boolean `worker.exitedAfterDisconnect` allows distinguishing between\n         * voluntary and accidental exit, the primary may choose not to respawn a worker\n         * based on this value.\n         *\n         * ```js\n         * cluster.on(\'exit\', (worker, code, signal) => {\n         *   if (worker.exitedAfterDisconnect === true) {\n         *     console.log(\'Oh, it was just voluntary – no need to worry\');\n         *   }\n         * });\n         *\n         * // kill worker\n         * worker.kill();\n         * ```\n         * @since v6.0.0\n         */\n        exitedAfterDisconnect: boolean;\n        /**\n         * events.EventEmitter\n         *   1. disconnect\n         *   2. error\n         *   3. exit\n         *   4. listening\n         *   5. message\n         *   6. online\n         */\n        addListener(event: string, listener: (...args: any[]) => void): this;\n        addListener(event: "disconnect", listener: () => void): this;\n        addListener(event: "error", listener: (error: Error) => void): this;\n        addListener(event: "exit", listener: (code: number, signal: string) => void): this;\n        addListener(event: "listening", listener: (address: Address) => void): this;\n        addListener(event: "message", listener: (message: any, handle: net.Socket | net.Server) => void): this; // the handle is a net.Socket or net.Server object, or undefined.\n        addListener(event: "online", listener: () => void): this;\n        emit(event: string | symbol, ...args: any[]): boolean;\n        emit(event: "disconnect"): boolean;\n        emit(event: "error", error: Error): boolean;\n        emit(event: "exit", code: number, signal: string): boolean;\n        emit(event: "listening", address: Address): boolean;\n        emit(event: "message", message: any, handle: net.Socket | net.Server): boolean;\n        emit(event: "online"): boolean;\n        on(event: string, listener: (...args: any[]) => void): this;\n        on(event: "disconnect", listener: () => void): this;\n        on(event: "error", listener: (error: Error) => void): this;\n        on(event: "exit", listener: (code: number, signal: string) => void): this;\n        on(event: "listening", listener: (address: Address) => void): this;\n        on(event: "message", listener: (message: any, handle: net.Socket | net.Server) => void): this; // the handle is a net.Socket or net.Server object, or undefined.\n        on(event: "online", listener: () => void): this;\n        once(event: string, listener: (...args: any[]) => void): this;\n        once(event: "disconnect", listener: () => void): this;\n        once(event: "error", listener: (error: Error) => void): this;\n        once(event: "exit", listener: (code: number, signal: string) => void): this;\n        once(event: "listening", listener: (address: Address) => void): this;\n        once(event: "message", listener: (message: any, handle: net.Socket | net.Server) => void): this; // the handle is a net.Socket or net.Server object, or undefined.\n        once(event: "online", listener: () => void): this;\n        prependListener(event: string, listener: (...args: any[]) => void): this;\n        prependListener(event: "disconnect", listener: () => void): this;\n        prependListener(event: "error", listener: (error: Error) => void): this;\n        prependListener(event: "exit", listener: (code: number, signal: string) => void): this;\n        prependListener(event: "listening", listener: (address: Address) => void): this;\n        prependListener(event: "message", listener: (message: any, handle: net.Socket | net.Server) => void): this; // the handle is a net.Socket or net.Server object, or undefined.\n        prependListener(event: "online", listener: () => void): this;\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\n        prependOnceListener(event: "disconnect", listener: () => void): this;\n        prependOnceListener(event: "error", listener: (error: Error) => void): this;\n        prependOnceListener(event: "exit", listener: (code: number, signal: string) => void): this;\n        prependOnceListener(event: "listening", listener: (address: Address) => void): this;\n        prependOnceListener(event: "message", listener: (message: any, handle: net.Socket | net.Server) => void): this; // the handle is a net.Socket or net.Server object, or undefined.\n        prependOnceListener(event: "online", listener: () => void): this;\n    }\n    export interface Cluster extends EventEmitter {\n        disconnect(callback?: () => void): void;\n        /**\n         * Spawn a new worker process.\n         *\n         * This can only be called from the primary process.\n         * @param env Key/value pairs to add to worker process environment.\n         * @since v0.6.0\n         */\n        fork(env?: any): Worker;\n        /** @deprecated since v16.0.0 - use isPrimary. */\n        readonly isMaster: boolean;\n        /**\n         * True if the process is a primary. This is determined by the `process.env.NODE_UNIQUE_ID`. If `process.env.NODE_UNIQUE_ID`\n         * is undefined, then `isPrimary` is `true`.\n         * @since v16.0.0\n         */\n        readonly isPrimary: boolean;\n        /**\n         * True if the process is not a primary (it is the negation of `cluster.isPrimary`).\n         * @since v0.6.0\n         */\n        readonly isWorker: boolean;\n        /**\n         * The scheduling policy, either `cluster.SCHED_RR` for round-robin or `cluster.SCHED_NONE` to leave it to the operating system. This is a\n         * global setting and effectively frozen once either the first worker is spawned, or [`.setupPrimary()`](https://nodejs.org/docs/latest-v22.x/api/cluster.html#clustersetupprimarysettings)\n         * is called, whichever comes first.\n         *\n         * `SCHED_RR` is the default on all operating systems except Windows. Windows will change to `SCHED_RR` once libuv is able to effectively distribute\n         * IOCP handles without incurring a large performance hit.\n         *\n         * `cluster.schedulingPolicy` can also be set through the `NODE_CLUSTER_SCHED_POLICY` environment variable. Valid values are `\'rr\'` and `\'none\'`.\n         * @since v0.11.2\n         */\n        schedulingPolicy: number;\n        /**\n         * After calling [`.setupPrimary()`](https://nodejs.org/docs/latest-v22.x/api/cluster.html#clustersetupprimarysettings)\n         * (or [`.fork()`](https://nodejs.org/docs/latest-v22.x/api/cluster.html#clusterforkenv)) this settings object will contain\n         * the settings, including the default values.\n         *\n         * This object is not intended to be changed or set manually.\n         * @since v0.7.1\n         */\n        readonly settings: ClusterSettings;\n        /** @deprecated since v16.0.0 - use [`.setupPrimary()`](https://nodejs.org/docs/latest-v22.x/api/cluster.html#clustersetupprimarysettings) instead. */\n        setupMaster(settings?: ClusterSettings): void;\n        /**\n         * `setupPrimary` is used to change the default \'fork\' behavior. Once called, the settings will be present in `cluster.settings`.\n         *\n         * Any settings changes only affect future calls to [`.fork()`](https://nodejs.org/docs/latest-v22.x/api/cluster.html#clusterforkenv)\n         * and have no effect on workers that are already running.\n         *\n         * The only attribute of a worker that cannot be set via `.setupPrimary()` is the `env` passed to\n         * [`.fork()`](https://nodejs.org/docs/latest-v22.x/api/cluster.html#clusterforkenv).\n         *\n         * The defaults above apply to the first call only; the defaults for later calls are the current values at the time of\n         * `cluster.setupPrimary()` is called.\n         *\n         * ```js\n         * import cluster from \'node:cluster\';\n         *\n         * cluster.setupPrimary({\n         *   exec: \'worker.js\',\n         *   args: [\'--use\', \'https\'],\n         *   silent: true,\n         * });\n         * cluster.fork(); // https worker\n         * cluster.setupPrimary({\n         *   exec: \'worker.js\',\n         *   args: [\'--use\', \'http\'],\n         * });\n         * cluster.fork(); // http worker\n         * ```\n         *\n         * This can only be called from the primary process.\n         * @since v16.0.0\n         */\n        setupPrimary(settings?: ClusterSettings): void;\n        /**\n         * A reference to the current worker object. Not available in the primary process.\n         *\n         * ```js\n         * import cluster from \'node:cluster\';\n         *\n         * if (cluster.isPrimary) {\n         *   console.log(\'I am primary\');\n         *   cluster.fork();\n         *   cluster.fork();\n         * } else if (cluster.isWorker) {\n         *   console.log(`I am worker #${cluster.worker.id}`);\n         * }\n         * ```\n         * @since v0.7.0\n         */\n        readonly worker?: Worker | undefined;\n        /**\n         * A hash that stores the active worker objects, keyed by `id` field. This makes it easy to loop through all the workers. It is only available in the primary process.\n         *\n         * A worker is removed from `cluster.workers` after the worker has disconnected _and_ exited. The order between these two events cannot be determined in advance. However, it\n         * is guaranteed that the removal from the `cluster.workers` list happens before the last `\'disconnect\'` or `\'exit\'` event is emitted.\n         *\n         * ```js\n         * import cluster from \'node:cluster\';\n         *\n         * for (const worker of Object.values(cluster.workers)) {\n         *   worker.send(\'big announcement to all workers\');\n         * }\n         * ```\n         * @since v0.7.0\n         */\n        readonly workers?: NodeJS.Dict<Worker> | undefined;\n        readonly SCHED_NONE: number;\n        readonly SCHED_RR: number;\n        /**\n         * events.EventEmitter\n         *   1. disconnect\n         *   2. exit\n         *   3. fork\n         *   4. listening\n         *   5. message\n         *   6. online\n         *   7. setup\n         */\n        addListener(event: string, listener: (...args: any[]) => void): this;\n        addListener(event: "disconnect", listener: (worker: Worker) => void): this;\n        addListener(event: "exit", listener: (worker: Worker, code: number, signal: string) => void): this;\n        addListener(event: "fork", listener: (worker: Worker) => void): this;\n        addListener(event: "listening", listener: (worker: Worker, address: Address) => void): this;\n        addListener(\n            event: "message",\n            listener: (worker: Worker, message: any, handle: net.Socket | net.Server) => void,\n        ): this; // the handle is a net.Socket or net.Server object, or undefined.\n        addListener(event: "online", listener: (worker: Worker) => void): this;\n        addListener(event: "setup", listener: (settings: ClusterSettings) => void): this;\n        emit(event: string | symbol, ...args: any[]): boolean;\n        emit(event: "disconnect", worker: Worker): boolean;\n        emit(event: "exit", worker: Worker, code: number, signal: string): boolean;\n        emit(event: "fork", worker: Worker): boolean;\n        emit(event: "listening", worker: Worker, address: Address): boolean;\n        emit(event: "message", worker: Worker, message: any, handle: net.Socket | net.Server): boolean;\n        emit(event: "online", worker: Worker): boolean;\n        emit(event: "setup", settings: ClusterSettings): boolean;\n        on(event: string, listener: (...args: any[]) => void): this;\n        on(event: "disconnect", listener: (worker: Worker) => void): this;\n        on(event: "exit", listener: (worker: Worker, code: number, signal: string) => void): this;\n        on(event: "fork", listener: (worker: Worker) => void): this;\n        on(event: "listening", listener: (worker: Worker, address: Address) => void): this;\n        on(event: "message", listener: (worker: Worker, message: any, handle: net.Socket | net.Server) => void): this; // the handle is a net.Socket or net.Server object, or undefined.\n        on(event: "online", listener: (worker: Worker) => void): this;\n        on(event: "setup", listener: (settings: ClusterSettings) => void): this;\n        once(event: string, listener: (...args: any[]) => void): this;\n        once(event: "disconnect", listener: (worker: Worker) => void): this;\n        once(event: "exit", listener: (worker: Worker, code: number, signal: string) => void): this;\n        once(event: "fork", listener: (worker: Worker) => void): this;\n        once(event: "listening", listener: (worker: Worker, address: Address) => void): this;\n        once(event: "message", listener: (worker: Worker, message: any, handle: net.Socket | net.Server) => void): this; // the handle is a net.Socket or net.Server object, or undefined.\n        once(event: "online", listener: (worker: Worker) => void): this;\n        once(event: "setup", listener: (settings: ClusterSettings) => void): this;\n        prependListener(event: string, listener: (...args: any[]) => void): this;\n        prependListener(event: "disconnect", listener: (worker: Worker) => void): this;\n        prependListener(event: "exit", listener: (worker: Worker, code: number, signal: string) => void): this;\n        prependListener(event: "fork", listener: (worker: Worker) => void): this;\n        prependListener(event: "listening", listener: (worker: Worker, address: Address) => void): this;\n        // the handle is a net.Socket or net.Server object, or undefined.\n        prependListener(\n            event: "message",\n            listener: (worker: Worker, message: any, handle?: net.Socket | net.Server) => void,\n        ): this;\n        prependListener(event: "online", listener: (worker: Worker) => void): this;\n        prependListener(event: "setup", listener: (settings: ClusterSettings) => void): this;\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\n        prependOnceListener(event: "disconnect", listener: (worker: Worker) => void): this;\n        prependOnceListener(event: "exit", listener: (worker: Worker, code: number, signal: string) => void): this;\n        prependOnceListener(event: "fork", listener: (worker: Worker) => void): this;\n        prependOnceListener(event: "listening", listener: (worker: Worker, address: Address) => void): this;\n        // the handle is a net.Socket or net.Server object, or undefined.\n        prependOnceListener(\n            event: "message",\n            listener: (worker: Worker, message: any, handle: net.Socket | net.Server) => void,\n        ): this;\n        prependOnceListener(event: "online", listener: (worker: Worker) => void): this;\n        prependOnceListener(event: "setup", listener: (settings: ClusterSettings) => void): this;\n    }\n    const cluster: Cluster;\n    export default cluster;\n}\ndeclare module "node:cluster" {\n    export * from "cluster";\n    export { default as default } from "cluster";\n}\n',
  '@types/node/compatibility/disposable.d.ts':
    '// Polyfills for the explicit resource management types added in TypeScript 5.2.\n\ninterface SymbolConstructor {\n    readonly dispose: unique symbol;\n    readonly asyncDispose: unique symbol;\n}\n\ninterface Disposable {\n    [Symbol.dispose](): void;\n}\n\ninterface AsyncDisposable {\n    [Symbol.asyncDispose](): PromiseLike<void>;\n}\n',
  '@types/node/compatibility/index.d.ts':
    '// Declaration files in this directory contain types relating to TypeScript library features\n// that are not included in all TypeScript versions supported by DefinitelyTyped, but\n// which can be made backwards-compatible without needing `typesVersions`.\n// If adding declarations to this directory, please specify which versions of TypeScript require them,\n// so that they can be removed when no longer needed.\n\n/// <reference path="disposable.d.ts" />\n/// <reference path="indexable.d.ts" />\n/// <reference path="iterators.d.ts" />\n',
  '@types/node/compatibility/indexable.d.ts':
    "// Polyfill for ES2022's .at() method on string/array prototypes, added to TypeScript in 4.6.\n\ninterface RelativeIndexable<T> {\n    at(index: number): T | undefined;\n}\n\ninterface String extends RelativeIndexable<string> {}\ninterface Array<T> extends RelativeIndexable<T> {}\ninterface ReadonlyArray<T> extends RelativeIndexable<T> {}\ninterface Int8Array extends RelativeIndexable<number> {}\ninterface Uint8Array extends RelativeIndexable<number> {}\ninterface Uint8ClampedArray extends RelativeIndexable<number> {}\ninterface Int16Array extends RelativeIndexable<number> {}\ninterface Uint16Array extends RelativeIndexable<number> {}\ninterface Int32Array extends RelativeIndexable<number> {}\ninterface Uint32Array extends RelativeIndexable<number> {}\ninterface Float32Array extends RelativeIndexable<number> {}\ninterface Float64Array extends RelativeIndexable<number> {}\ninterface BigInt64Array extends RelativeIndexable<bigint> {}\ninterface BigUint64Array extends RelativeIndexable<bigint> {}\n",
  '@types/node/compatibility/iterators.d.ts':
    "// Backwards-compatible iterator interfaces, augmented with iterator helper methods by lib.esnext.iterator in TypeScript 5.6.\n// The IterableIterator interface does not contain these methods, which creates assignability issues in places where IteratorObjects\n// are expected (eg. DOM-compatible APIs) if lib.esnext.iterator is loaded.\n// Also ensures that iterators returned by the Node API, which inherit from Iterator.prototype, correctly expose the iterator helper methods\n// if lib.esnext.iterator is loaded.\n\n// Placeholders for TS <5.6\ninterface IteratorObject<T, TReturn, TNext> {}\ninterface AsyncIteratorObject<T, TReturn, TNext> {}\n\ndeclare namespace NodeJS {\n    // Populate iterator methods for TS <5.6\n    interface Iterator<T, TReturn, TNext> extends globalThis.Iterator<T, TReturn, TNext> {}\n    interface AsyncIterator<T, TReturn, TNext> extends globalThis.AsyncIterator<T, TReturn, TNext> {}\n\n    // Polyfill for TS 5.6's instrinsic BuiltinIteratorReturn type, required for DOM-compatible iterators\n    type BuiltinIteratorReturn = ReturnType<any[][typeof Symbol.iterator]> extends\n        globalThis.Iterator<any, infer TReturn> ? TReturn\n        : any;\n}\n",
  '@types/node/console.d.ts':
    "/**\n * The `node:console` module provides a simple debugging console that is similar to\n * the JavaScript console mechanism provided by web browsers.\n *\n * The module exports two specific components:\n *\n * * A `Console` class with methods such as `console.log()`, `console.error()`, and `console.warn()` that can be used to write to any Node.js stream.\n * * A global `console` instance configured to write to [`process.stdout`](https://nodejs.org/docs/latest-v22.x/api/process.html#processstdout) and\n * [`process.stderr`](https://nodejs.org/docs/latest-v22.x/api/process.html#processstderr). The global `console` can be used without importing the `node:console` module.\n *\n * _**Warning**_: The global console object's methods are neither consistently\n * synchronous like the browser APIs they resemble, nor are they consistently\n * asynchronous like all other Node.js streams. See the [`note on process I/O`](https://nodejs.org/docs/latest-v22.x/api/process.html#a-note-on-process-io) for\n * more information.\n *\n * Example using the global `console`:\n *\n * ```js\n * console.log('hello world');\n * // Prints: hello world, to stdout\n * console.log('hello %s', 'world');\n * // Prints: hello world, to stdout\n * console.error(new Error('Whoops, something bad happened'));\n * // Prints error message and stack trace to stderr:\n * //   Error: Whoops, something bad happened\n * //     at [eval]:5:15\n * //     at Script.runInThisContext (node:vm:132:18)\n * //     at Object.runInThisContext (node:vm:309:38)\n * //     at node:internal/process/execution:77:19\n * //     at [eval]-wrapper:6:22\n * //     at evalScript (node:internal/process/execution:76:60)\n * //     at node:internal/main/eval_string:23:3\n *\n * const name = 'Will Robinson';\n * console.warn(`Danger ${name}! Danger!`);\n * // Prints: Danger Will Robinson! Danger!, to stderr\n * ```\n *\n * Example using the `Console` class:\n *\n * ```js\n * const out = getStreamSomehow();\n * const err = getStreamSomehow();\n * const myConsole = new console.Console(out, err);\n *\n * myConsole.log('hello world');\n * // Prints: hello world, to out\n * myConsole.log('hello %s', 'world');\n * // Prints: hello world, to out\n * myConsole.error(new Error('Whoops, something bad happened'));\n * // Prints: [Error: Whoops, something bad happened], to err\n *\n * const name = 'Will Robinson';\n * myConsole.warn(`Danger ${name}! Danger!`);\n * // Prints: Danger Will Robinson! Danger!, to err\n * ```\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/console.js)\n */\ndeclare module \"console\" {\n    import console = require(\"node:console\");\n    export = console;\n}\ndeclare module \"node:console\" {\n    import { InspectOptions } from \"node:util\";\n    global {\n        // This needs to be global to avoid TS2403 in case lib.dom.d.ts is present in the same build\n        interface Console {\n            Console: console.ConsoleConstructor;\n            /**\n             * `console.assert()` writes a message if `value` is [falsy](https://developer.mozilla.org/en-US/docs/Glossary/Falsy) or omitted. It only\n             * writes a message and does not otherwise affect execution. The output always\n             * starts with `\"Assertion failed\"`. If provided, `message` is formatted using\n             * [`util.format()`](https://nodejs.org/docs/latest-v22.x/api/util.html#utilformatformat-args).\n             *\n             * If `value` is [truthy](https://developer.mozilla.org/en-US/docs/Glossary/Truthy), nothing happens.\n             *\n             * ```js\n             * console.assert(true, 'does nothing');\n             *\n             * console.assert(false, 'Whoops %s work', 'didn\\'t');\n             * // Assertion failed: Whoops didn't work\n             *\n             * console.assert();\n             * // Assertion failed\n             * ```\n             * @since v0.1.101\n             * @param value The value tested for being truthy.\n             * @param message All arguments besides `value` are used as error message.\n             */\n            assert(value: any, message?: string, ...optionalParams: any[]): void;\n            /**\n             * When `stdout` is a TTY, calling `console.clear()` will attempt to clear the\n             * TTY. When `stdout` is not a TTY, this method does nothing.\n             *\n             * The specific operation of `console.clear()` can vary across operating systems\n             * and terminal types. For most Linux operating systems, `console.clear()` operates similarly to the `clear` shell command. On Windows, `console.clear()` will clear only the output in the\n             * current terminal viewport for the Node.js\n             * binary.\n             * @since v8.3.0\n             */\n            clear(): void;\n            /**\n             * Maintains an internal counter specific to `label` and outputs to `stdout` the\n             * number of times `console.count()` has been called with the given `label`.\n             *\n             * ```js\n             * > console.count()\n             * default: 1\n             * undefined\n             * > console.count('default')\n             * default: 2\n             * undefined\n             * > console.count('abc')\n             * abc: 1\n             * undefined\n             * > console.count('xyz')\n             * xyz: 1\n             * undefined\n             * > console.count('abc')\n             * abc: 2\n             * undefined\n             * > console.count()\n             * default: 3\n             * undefined\n             * >\n             * ```\n             * @since v8.3.0\n             * @param [label='default'] The display label for the counter.\n             */\n            count(label?: string): void;\n            /**\n             * Resets the internal counter specific to `label`.\n             *\n             * ```js\n             * > console.count('abc');\n             * abc: 1\n             * undefined\n             * > console.countReset('abc');\n             * undefined\n             * > console.count('abc');\n             * abc: 1\n             * undefined\n             * >\n             * ```\n             * @since v8.3.0\n             * @param [label='default'] The display label for the counter.\n             */\n            countReset(label?: string): void;\n            /**\n             * The `console.debug()` function is an alias for {@link log}.\n             * @since v8.0.0\n             */\n            debug(message?: any, ...optionalParams: any[]): void;\n            /**\n             * Uses [`util.inspect()`](https://nodejs.org/docs/latest-v22.x/api/util.html#utilinspectobject-options) on `obj` and prints the resulting string to `stdout`.\n             * This function bypasses any custom `inspect()` function defined on `obj`.\n             * @since v0.1.101\n             */\n            dir(obj: any, options?: InspectOptions): void;\n            /**\n             * This method calls `console.log()` passing it the arguments received.\n             * This method does not produce any XML formatting.\n             * @since v8.0.0\n             */\n            dirxml(...data: any[]): void;\n            /**\n             * Prints to `stderr` with newline. Multiple arguments can be passed, with the\n             * first used as the primary message and all additional used as substitution\n             * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html)\n             * (the arguments are all passed to [`util.format()`](https://nodejs.org/docs/latest-v22.x/api/util.html#utilformatformat-args)).\n             *\n             * ```js\n             * const code = 5;\n             * console.error('error #%d', code);\n             * // Prints: error #5, to stderr\n             * console.error('error', code);\n             * // Prints: error 5, to stderr\n             * ```\n             *\n             * If formatting elements (e.g. `%d`) are not found in the first string then\n             * [`util.inspect()`](https://nodejs.org/docs/latest-v22.x/api/util.html#utilinspectobject-options) is called on each argument and the\n             * resulting string values are concatenated. See [`util.format()`](https://nodejs.org/docs/latest-v22.x/api/util.html#utilformatformat-args)\n             * for more information.\n             * @since v0.1.100\n             */\n            error(message?: any, ...optionalParams: any[]): void;\n            /**\n             * Increases indentation of subsequent lines by spaces for `groupIndentation` length.\n             *\n             * If one or more `label`s are provided, those are printed first without the\n             * additional indentation.\n             * @since v8.5.0\n             */\n            group(...label: any[]): void;\n            /**\n             * An alias for {@link group}.\n             * @since v8.5.0\n             */\n            groupCollapsed(...label: any[]): void;\n            /**\n             * Decreases indentation of subsequent lines by spaces for `groupIndentation` length.\n             * @since v8.5.0\n             */\n            groupEnd(): void;\n            /**\n             * The `console.info()` function is an alias for {@link log}.\n             * @since v0.1.100\n             */\n            info(message?: any, ...optionalParams: any[]): void;\n            /**\n             * Prints to `stdout` with newline. Multiple arguments can be passed, with the\n             * first used as the primary message and all additional used as substitution\n             * values similar to [`printf(3)`](http://man7.org/linux/man-pages/man3/printf.3.html)\n             * (the arguments are all passed to [`util.format()`](https://nodejs.org/docs/latest-v22.x/api/util.html#utilformatformat-args)).\n             *\n             * ```js\n             * const count = 5;\n             * console.log('count: %d', count);\n             * // Prints: count: 5, to stdout\n             * console.log('count:', count);\n             * // Prints: count: 5, to stdout\n             * ```\n             *\n             * See [`util.format()`](https://nodejs.org/docs/latest-v22.x/api/util.html#utilformatformat-args) for more information.\n             * @since v0.1.100\n             */\n            log(message?: any, ...optionalParams: any[]): void;\n            /**\n             * Try to construct a table with the columns of the properties of `tabularData` (or use `properties`) and rows of `tabularData` and log it. Falls back to just\n             * logging the argument if it can't be parsed as tabular.\n             *\n             * ```js\n             * // These can't be parsed as tabular data\n             * console.table(Symbol());\n             * // Symbol()\n             *\n             * console.table(undefined);\n             * // undefined\n             *\n             * console.table([{ a: 1, b: 'Y' }, { a: 'Z', b: 2 }]);\n             * // ┌─────────┬─────┬─────┐\n             * // │ (index) │  a  │  b  │\n             * // ├─────────┼─────┼─────┤\n             * // │    0    │  1  │ 'Y' │\n             * // │    1    │ 'Z' │  2  │\n             * // └─────────┴─────┴─────┘\n             *\n             * console.table([{ a: 1, b: 'Y' }, { a: 'Z', b: 2 }], ['a']);\n             * // ┌─────────┬─────┐\n             * // │ (index) │  a  │\n             * // ├─────────┼─────┤\n             * // │    0    │  1  │\n             * // │    1    │ 'Z' │\n             * // └─────────┴─────┘\n             * ```\n             * @since v10.0.0\n             * @param properties Alternate properties for constructing the table.\n             */\n            table(tabularData: any, properties?: readonly string[]): void;\n            /**\n             * Starts a timer that can be used to compute the duration of an operation. Timers\n             * are identified by a unique `label`. Use the same `label` when calling {@link timeEnd} to stop the timer and output the elapsed time in\n             * suitable time units to `stdout`. For example, if the elapsed\n             * time is 3869ms, `console.timeEnd()` displays \"3.869s\".\n             * @since v0.1.104\n             * @param [label='default']\n             */\n            time(label?: string): void;\n            /**\n             * Stops a timer that was previously started by calling {@link time} and\n             * prints the result to `stdout`:\n             *\n             * ```js\n             * console.time('bunch-of-stuff');\n             * // Do a bunch of stuff.\n             * console.timeEnd('bunch-of-stuff');\n             * // Prints: bunch-of-stuff: 225.438ms\n             * ```\n             * @since v0.1.104\n             * @param [label='default']\n             */\n            timeEnd(label?: string): void;\n            /**\n             * For a timer that was previously started by calling {@link time}, prints\n             * the elapsed time and other `data` arguments to `stdout`:\n             *\n             * ```js\n             * console.time('process');\n             * const value = expensiveProcess1(); // Returns 42\n             * console.timeLog('process', value);\n             * // Prints \"process: 365.227ms 42\".\n             * doExpensiveProcess2(value);\n             * console.timeEnd('process');\n             * ```\n             * @since v10.7.0\n             * @param [label='default']\n             */\n            timeLog(label?: string, ...data: any[]): void;\n            /**\n             * Prints to `stderr` the string `'Trace: '`, followed by the [`util.format()`](https://nodejs.org/docs/latest-v22.x/api/util.html#utilformatformat-args)\n             * formatted message and stack trace to the current position in the code.\n             *\n             * ```js\n             * console.trace('Show me');\n             * // Prints: (stack trace will vary based on where trace is called)\n             * //  Trace: Show me\n             * //    at repl:2:9\n             * //    at REPLServer.defaultEval (repl.js:248:27)\n             * //    at bound (domain.js:287:14)\n             * //    at REPLServer.runBound [as eval] (domain.js:300:12)\n             * //    at REPLServer.<anonymous> (repl.js:412:12)\n             * //    at emitOne (events.js:82:20)\n             * //    at REPLServer.emit (events.js:169:7)\n             * //    at REPLServer.Interface._onLine (readline.js:210:10)\n             * //    at REPLServer.Interface._line (readline.js:549:8)\n             * //    at REPLServer.Interface._ttyWrite (readline.js:826:14)\n             * ```\n             * @since v0.1.104\n             */\n            trace(message?: any, ...optionalParams: any[]): void;\n            /**\n             * The `console.warn()` function is an alias for {@link error}.\n             * @since v0.1.100\n             */\n            warn(message?: any, ...optionalParams: any[]): void;\n            // --- Inspector mode only ---\n            /**\n             * This method does not display anything unless used in the inspector. The `console.profile()`\n             * method starts a JavaScript CPU profile with an optional label until {@link profileEnd}\n             * is called. The profile is then added to the Profile panel of the inspector.\n             *\n             * ```js\n             * console.profile('MyLabel');\n             * // Some code\n             * console.profileEnd('MyLabel');\n             * // Adds the profile 'MyLabel' to the Profiles panel of the inspector.\n             * ```\n             * @since v8.0.0\n             */\n            profile(label?: string): void;\n            /**\n             * This method does not display anything unless used in the inspector. Stops the current\n             * JavaScript CPU profiling session if one has been started and prints the report to the\n             * Profiles panel of the inspector. See {@link profile} for an example.\n             *\n             * If this method is called without a label, the most recently started profile is stopped.\n             * @since v8.0.0\n             */\n            profileEnd(label?: string): void;\n            /**\n             * This method does not display anything unless used in the inspector. The `console.timeStamp()`\n             * method adds an event with the label `'label'` to the Timeline panel of the inspector.\n             * @since v8.0.0\n             */\n            timeStamp(label?: string): void;\n        }\n        /**\n         * The `console` module provides a simple debugging console that is similar to the\n         * JavaScript console mechanism provided by web browsers.\n         *\n         * The module exports two specific components:\n         *\n         * * A `Console` class with methods such as `console.log()`, `console.error()` and `console.warn()` that can be used to write to any Node.js stream.\n         * * A global `console` instance configured to write to [`process.stdout`](https://nodejs.org/docs/latest-v22.x/api/process.html#processstdout) and\n         * [`process.stderr`](https://nodejs.org/docs/latest-v22.x/api/process.html#processstderr). The global `console` can be used without importing the `node:console` module.\n         *\n         * _**Warning**_: The global console object's methods are neither consistently\n         * synchronous like the browser APIs they resemble, nor are they consistently\n         * asynchronous like all other Node.js streams. See the [`note on process I/O`](https://nodejs.org/docs/latest-v22.x/api/process.html#a-note-on-process-io) for\n         * more information.\n         *\n         * Example using the global `console`:\n         *\n         * ```js\n         * console.log('hello world');\n         * // Prints: hello world, to stdout\n         * console.log('hello %s', 'world');\n         * // Prints: hello world, to stdout\n         * console.error(new Error('Whoops, something bad happened'));\n         * // Prints error message and stack trace to stderr:\n         * //   Error: Whoops, something bad happened\n         * //     at [eval]:5:15\n         * //     at Script.runInThisContext (node:vm:132:18)\n         * //     at Object.runInThisContext (node:vm:309:38)\n         * //     at node:internal/process/execution:77:19\n         * //     at [eval]-wrapper:6:22\n         * //     at evalScript (node:internal/process/execution:76:60)\n         * //     at node:internal/main/eval_string:23:3\n         *\n         * const name = 'Will Robinson';\n         * console.warn(`Danger ${name}! Danger!`);\n         * // Prints: Danger Will Robinson! Danger!, to stderr\n         * ```\n         *\n         * Example using the `Console` class:\n         *\n         * ```js\n         * const out = getStreamSomehow();\n         * const err = getStreamSomehow();\n         * const myConsole = new console.Console(out, err);\n         *\n         * myConsole.log('hello world');\n         * // Prints: hello world, to out\n         * myConsole.log('hello %s', 'world');\n         * // Prints: hello world, to out\n         * myConsole.error(new Error('Whoops, something bad happened'));\n         * // Prints: [Error: Whoops, something bad happened], to err\n         *\n         * const name = 'Will Robinson';\n         * myConsole.warn(`Danger ${name}! Danger!`);\n         * // Prints: Danger Will Robinson! Danger!, to err\n         * ```\n         * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/console.js)\n         */\n        namespace console {\n            interface ConsoleConstructorOptions {\n                stdout: NodeJS.WritableStream;\n                stderr?: NodeJS.WritableStream | undefined;\n                /**\n                 * Ignore errors when writing to the underlying streams.\n                 * @default true\n                 */\n                ignoreErrors?: boolean | undefined;\n                /**\n                 * Set color support for this `Console` instance. Setting to true enables coloring while inspecting\n                 * values. Setting to `false` disables coloring while inspecting values. Setting to `'auto'` makes color\n                 * support depend on the value of the `isTTY` property and the value returned by `getColorDepth()` on the\n                 * respective stream. This option can not be used, if `inspectOptions.colors` is set as well.\n                 * @default auto\n                 */\n                colorMode?: boolean | \"auto\" | undefined;\n                /**\n                 * Specifies options that are passed along to\n                 * [`util.inspect()`](https://nodejs.org/docs/latest-v22.x/api/util.html#utilinspectobject-options).\n                 */\n                inspectOptions?: InspectOptions | undefined;\n                /**\n                 * Set group indentation.\n                 * @default 2\n                 */\n                groupIndentation?: number | undefined;\n            }\n            interface ConsoleConstructor {\n                prototype: Console;\n                new(stdout: NodeJS.WritableStream, stderr?: NodeJS.WritableStream, ignoreErrors?: boolean): Console;\n                new(options: ConsoleConstructorOptions): Console;\n            }\n        }\n        var console: Console;\n    }\n    export = globalThis.console;\n}\n",
  '@types/node/constants.d.ts':
    '/**\n * @deprecated The `node:constants` module is deprecated. When requiring access to constants\n * relevant to specific Node.js builtin modules, developers should instead refer\n * to the `constants` property exposed by the relevant module. For instance,\n * `require(\'node:fs\').constants` and `require(\'node:os\').constants`.\n */\ndeclare module "constants" {\n    const constants:\n        & typeof import("node:os").constants.dlopen\n        & typeof import("node:os").constants.errno\n        & typeof import("node:os").constants.priority\n        & typeof import("node:os").constants.signals\n        & typeof import("node:fs").constants\n        & typeof import("node:crypto").constants;\n    export = constants;\n}\n\ndeclare module "node:constants" {\n    import constants = require("constants");\n    export = constants;\n}\n',
  '@types/node/crypto.d.ts':
    "/**\n * The `node:crypto` module provides cryptographic functionality that includes a\n * set of wrappers for OpenSSL's hash, HMAC, cipher, decipher, sign, and verify\n * functions.\n *\n * ```js\n * const { createHmac } = await import('node:crypto');\n *\n * const secret = 'abcdefg';\n * const hash = createHmac('sha256', secret)\n *                .update('I love cupcakes')\n *                .digest('hex');\n * console.log(hash);\n * // Prints:\n * //   c0fa1bc00531bd78ef38c628449c5102aeabd49b5dc3a2a516ea6ea959d6658e\n * ```\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/crypto.js)\n */\ndeclare module \"crypto\" {\n    import * as stream from \"node:stream\";\n    import { PeerCertificate } from \"node:tls\";\n    /**\n     * SPKAC is a Certificate Signing Request mechanism originally implemented by\n     * Netscape and was specified formally as part of HTML5's `keygen` element.\n     *\n     * `<keygen>` is deprecated since [HTML 5.2](https://www.w3.org/TR/html52/changes.html#features-removed) and new projects\n     * should not use this element anymore.\n     *\n     * The `node:crypto` module provides the `Certificate` class for working with SPKAC\n     * data. The most common usage is handling output generated by the HTML5 `<keygen>` element. Node.js uses [OpenSSL's SPKAC\n     * implementation](https://www.openssl.org/docs/man3.0/man1/openssl-spkac.html) internally.\n     * @since v0.11.8\n     */\n    class Certificate {\n        /**\n         * ```js\n         * const { Certificate } = await import('node:crypto');\n         * const spkac = getSpkacSomehow();\n         * const challenge = Certificate.exportChallenge(spkac);\n         * console.log(challenge.toString('utf8'));\n         * // Prints: the challenge as a UTF8 string\n         * ```\n         * @since v9.0.0\n         * @param encoding The `encoding` of the `spkac` string.\n         * @return The challenge component of the `spkac` data structure, which includes a public key and a challenge.\n         */\n        static exportChallenge(spkac: BinaryLike): Buffer;\n        /**\n         * ```js\n         * const { Certificate } = await import('node:crypto');\n         * const spkac = getSpkacSomehow();\n         * const publicKey = Certificate.exportPublicKey(spkac);\n         * console.log(publicKey);\n         * // Prints: the public key as <Buffer ...>\n         * ```\n         * @since v9.0.0\n         * @param encoding The `encoding` of the `spkac` string.\n         * @return The public key component of the `spkac` data structure, which includes a public key and a challenge.\n         */\n        static exportPublicKey(spkac: BinaryLike, encoding?: string): Buffer;\n        /**\n         * ```js\n         * import { Buffer } from 'node:buffer';\n         * const { Certificate } = await import('node:crypto');\n         *\n         * const spkac = getSpkacSomehow();\n         * console.log(Certificate.verifySpkac(Buffer.from(spkac)));\n         * // Prints: true or false\n         * ```\n         * @since v9.0.0\n         * @param encoding The `encoding` of the `spkac` string.\n         * @return `true` if the given `spkac` data structure is valid, `false` otherwise.\n         */\n        static verifySpkac(spkac: NodeJS.ArrayBufferView): boolean;\n        /**\n         * @deprecated\n         * @param spkac\n         * @returns The challenge component of the `spkac` data structure,\n         * which includes a public key and a challenge.\n         */\n        exportChallenge(spkac: BinaryLike): Buffer;\n        /**\n         * @deprecated\n         * @param spkac\n         * @param encoding The encoding of the spkac string.\n         * @returns The public key component of the `spkac` data structure,\n         * which includes a public key and a challenge.\n         */\n        exportPublicKey(spkac: BinaryLike, encoding?: string): Buffer;\n        /**\n         * @deprecated\n         * @param spkac\n         * @returns `true` if the given `spkac` data structure is valid,\n         * `false` otherwise.\n         */\n        verifySpkac(spkac: NodeJS.ArrayBufferView): boolean;\n    }\n    namespace constants {\n        // https://nodejs.org/dist/latest-v22.x/docs/api/crypto.html#crypto-constants\n        const OPENSSL_VERSION_NUMBER: number;\n        /** Applies multiple bug workarounds within OpenSSL. See https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_options.html for detail. */\n        const SSL_OP_ALL: number;\n        /** Instructs OpenSSL to allow a non-[EC]DHE-based key exchange mode for TLS v1.3 */\n        const SSL_OP_ALLOW_NO_DHE_KEX: number;\n        /** Allows legacy insecure renegotiation between OpenSSL and unpatched clients or servers. See https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_options.html. */\n        const SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION: number;\n        /** Attempts to use the server's preferences instead of the client's when selecting a cipher. See https://www.openssl.org/docs/man1.0.2/ssl/SSL_CTX_set_options.html. */\n        const SSL_OP_CIPHER_SERVER_PREFERENCE: number;\n        /** Instructs OpenSSL to use Cisco's version identifier of DTLS_BAD_VER. */\n        const SSL_OP_CISCO_ANYCONNECT: number;\n        /** Instructs OpenSSL to turn on cookie exchange. */\n        const SSL_OP_COOKIE_EXCHANGE: number;\n        /** Instructs OpenSSL to add server-hello extension from an early version of the cryptopro draft. */\n        const SSL_OP_CRYPTOPRO_TLSEXT_BUG: number;\n        /** Instructs OpenSSL to disable a SSL 3.0/TLS 1.0 vulnerability workaround added in OpenSSL 0.9.6d. */\n        const SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS: number;\n        /** Allows initial connection to servers that do not support RI. */\n        const SSL_OP_LEGACY_SERVER_CONNECT: number;\n        /** Instructs OpenSSL to disable support for SSL/TLS compression. */\n        const SSL_OP_NO_COMPRESSION: number;\n        /** Instructs OpenSSL to disable encrypt-then-MAC. */\n        const SSL_OP_NO_ENCRYPT_THEN_MAC: number;\n        const SSL_OP_NO_QUERY_MTU: number;\n        /** Instructs OpenSSL to disable renegotiation. */\n        const SSL_OP_NO_RENEGOTIATION: number;\n        /** Instructs OpenSSL to always start a new session when performing renegotiation. */\n        const SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION: number;\n        /** Instructs OpenSSL to turn off SSL v2 */\n        const SSL_OP_NO_SSLv2: number;\n        /** Instructs OpenSSL to turn off SSL v3 */\n        const SSL_OP_NO_SSLv3: number;\n        /** Instructs OpenSSL to disable use of RFC4507bis tickets. */\n        const SSL_OP_NO_TICKET: number;\n        /** Instructs OpenSSL to turn off TLS v1 */\n        const SSL_OP_NO_TLSv1: number;\n        /** Instructs OpenSSL to turn off TLS v1.1 */\n        const SSL_OP_NO_TLSv1_1: number;\n        /** Instructs OpenSSL to turn off TLS v1.2 */\n        const SSL_OP_NO_TLSv1_2: number;\n        /** Instructs OpenSSL to turn off TLS v1.3 */\n        const SSL_OP_NO_TLSv1_3: number;\n        /** Instructs OpenSSL server to prioritize ChaCha20-Poly1305 when the client does. This option has no effect if `SSL_OP_CIPHER_SERVER_PREFERENCE` is not enabled. */\n        const SSL_OP_PRIORITIZE_CHACHA: number;\n        /** Instructs OpenSSL to disable version rollback attack detection. */\n        const SSL_OP_TLS_ROLLBACK_BUG: number;\n        const ENGINE_METHOD_RSA: number;\n        const ENGINE_METHOD_DSA: number;\n        const ENGINE_METHOD_DH: number;\n        const ENGINE_METHOD_RAND: number;\n        const ENGINE_METHOD_EC: number;\n        const ENGINE_METHOD_CIPHERS: number;\n        const ENGINE_METHOD_DIGESTS: number;\n        const ENGINE_METHOD_PKEY_METHS: number;\n        const ENGINE_METHOD_PKEY_ASN1_METHS: number;\n        const ENGINE_METHOD_ALL: number;\n        const ENGINE_METHOD_NONE: number;\n        const DH_CHECK_P_NOT_SAFE_PRIME: number;\n        const DH_CHECK_P_NOT_PRIME: number;\n        const DH_UNABLE_TO_CHECK_GENERATOR: number;\n        const DH_NOT_SUITABLE_GENERATOR: number;\n        const RSA_PKCS1_PADDING: number;\n        const RSA_SSLV23_PADDING: number;\n        const RSA_NO_PADDING: number;\n        const RSA_PKCS1_OAEP_PADDING: number;\n        const RSA_X931_PADDING: number;\n        const RSA_PKCS1_PSS_PADDING: number;\n        /** Sets the salt length for RSA_PKCS1_PSS_PADDING to the digest size when signing or verifying. */\n        const RSA_PSS_SALTLEN_DIGEST: number;\n        /** Sets the salt length for RSA_PKCS1_PSS_PADDING to the maximum permissible value when signing data. */\n        const RSA_PSS_SALTLEN_MAX_SIGN: number;\n        /** Causes the salt length for RSA_PKCS1_PSS_PADDING to be determined automatically when verifying a signature. */\n        const RSA_PSS_SALTLEN_AUTO: number;\n        const POINT_CONVERSION_COMPRESSED: number;\n        const POINT_CONVERSION_UNCOMPRESSED: number;\n        const POINT_CONVERSION_HYBRID: number;\n        /** Specifies the built-in default cipher list used by Node.js (colon-separated values). */\n        const defaultCoreCipherList: string;\n        /** Specifies the active default cipher list used by the current Node.js process  (colon-separated values). */\n        const defaultCipherList: string;\n    }\n    interface HashOptions extends stream.TransformOptions {\n        /**\n         * For XOF hash functions such as `shake256`, the\n         * outputLength option can be used to specify the desired output length in bytes.\n         */\n        outputLength?: number | undefined;\n    }\n    /** @deprecated since v10.0.0 */\n    const fips: boolean;\n    /**\n     * Creates and returns a `Hash` object that can be used to generate hash digests\n     * using the given `algorithm`. Optional `options` argument controls stream\n     * behavior. For XOF hash functions such as `'shake256'`, the `outputLength` option\n     * can be used to specify the desired output length in bytes.\n     *\n     * The `algorithm` is dependent on the available algorithms supported by the\n     * version of OpenSSL on the platform. Examples are `'sha256'`, `'sha512'`, etc.\n     * On recent releases of OpenSSL, `openssl list -digest-algorithms` will\n     * display the available digest algorithms.\n     *\n     * Example: generating the sha256 sum of a file\n     *\n     * ```js\n     * import {\n     *   createReadStream,\n     * } from 'node:fs';\n     * import { argv } from 'node:process';\n     * const {\n     *   createHash,\n     * } = await import('node:crypto');\n     *\n     * const filename = argv[2];\n     *\n     * const hash = createHash('sha256');\n     *\n     * const input = createReadStream(filename);\n     * input.on('readable', () => {\n     *   // Only one element is going to be produced by the\n     *   // hash stream.\n     *   const data = input.read();\n     *   if (data)\n     *     hash.update(data);\n     *   else {\n     *     console.log(`${hash.digest('hex')} ${filename}`);\n     *   }\n     * });\n     * ```\n     * @since v0.1.92\n     * @param options `stream.transform` options\n     */\n    function createHash(algorithm: string, options?: HashOptions): Hash;\n    /**\n     * Creates and returns an `Hmac` object that uses the given `algorithm` and `key`.\n     * Optional `options` argument controls stream behavior.\n     *\n     * The `algorithm` is dependent on the available algorithms supported by the\n     * version of OpenSSL on the platform. Examples are `'sha256'`, `'sha512'`, etc.\n     * On recent releases of OpenSSL, `openssl list -digest-algorithms` will\n     * display the available digest algorithms.\n     *\n     * The `key` is the HMAC key used to generate the cryptographic HMAC hash. If it is\n     * a `KeyObject`, its type must be `secret`. If it is a string, please consider `caveats when using strings as inputs to cryptographic APIs`. If it was\n     * obtained from a cryptographically secure source of entropy, such as {@link randomBytes} or {@link generateKey}, its length should not\n     * exceed the block size of `algorithm` (e.g., 512 bits for SHA-256).\n     *\n     * Example: generating the sha256 HMAC of a file\n     *\n     * ```js\n     * import {\n     *   createReadStream,\n     * } from 'node:fs';\n     * import { argv } from 'node:process';\n     * const {\n     *   createHmac,\n     * } = await import('node:crypto');\n     *\n     * const filename = argv[2];\n     *\n     * const hmac = createHmac('sha256', 'a secret');\n     *\n     * const input = createReadStream(filename);\n     * input.on('readable', () => {\n     *   // Only one element is going to be produced by the\n     *   // hash stream.\n     *   const data = input.read();\n     *   if (data)\n     *     hmac.update(data);\n     *   else {\n     *     console.log(`${hmac.digest('hex')} ${filename}`);\n     *   }\n     * });\n     * ```\n     * @since v0.1.94\n     * @param options `stream.transform` options\n     */\n    function createHmac(algorithm: string, key: BinaryLike | KeyObject, options?: stream.TransformOptions): Hmac;\n    // https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings\n    type BinaryToTextEncoding = \"base64\" | \"base64url\" | \"hex\" | \"binary\";\n    type CharacterEncoding = \"utf8\" | \"utf-8\" | \"utf16le\" | \"utf-16le\" | \"latin1\";\n    type LegacyCharacterEncoding = \"ascii\" | \"binary\" | \"ucs2\" | \"ucs-2\";\n    type Encoding = BinaryToTextEncoding | CharacterEncoding | LegacyCharacterEncoding;\n    type ECDHKeyFormat = \"compressed\" | \"uncompressed\" | \"hybrid\";\n    /**\n     * The `Hash` class is a utility for creating hash digests of data. It can be\n     * used in one of two ways:\n     *\n     * * As a `stream` that is both readable and writable, where data is written\n     * to produce a computed hash digest on the readable side, or\n     * * Using the `hash.update()` and `hash.digest()` methods to produce the\n     * computed hash.\n     *\n     * The {@link createHash} method is used to create `Hash` instances. `Hash`objects are not to be created directly using the `new` keyword.\n     *\n     * Example: Using `Hash` objects as streams:\n     *\n     * ```js\n     * const {\n     *   createHash,\n     * } = await import('node:crypto');\n     *\n     * const hash = createHash('sha256');\n     *\n     * hash.on('readable', () => {\n     *   // Only one element is going to be produced by the\n     *   // hash stream.\n     *   const data = hash.read();\n     *   if (data) {\n     *     console.log(data.toString('hex'));\n     *     // Prints:\n     *     //   6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50\n     *   }\n     * });\n     *\n     * hash.write('some data to hash');\n     * hash.end();\n     * ```\n     *\n     * Example: Using `Hash` and piped streams:\n     *\n     * ```js\n     * import { createReadStream } from 'node:fs';\n     * import { stdout } from 'node:process';\n     * const { createHash } = await import('node:crypto');\n     *\n     * const hash = createHash('sha256');\n     *\n     * const input = createReadStream('test.js');\n     * input.pipe(hash).setEncoding('hex').pipe(stdout);\n     * ```\n     *\n     * Example: Using the `hash.update()` and `hash.digest()` methods:\n     *\n     * ```js\n     * const {\n     *   createHash,\n     * } = await import('node:crypto');\n     *\n     * const hash = createHash('sha256');\n     *\n     * hash.update('some data to hash');\n     * console.log(hash.digest('hex'));\n     * // Prints:\n     * //   6a2da20943931e9834fc12cfe5bb47bbd9ae43489a30726962b576f4e3993e50\n     * ```\n     * @since v0.1.92\n     */\n    class Hash extends stream.Transform {\n        private constructor();\n        /**\n         * Creates a new `Hash` object that contains a deep copy of the internal state\n         * of the current `Hash` object.\n         *\n         * The optional `options` argument controls stream behavior. For XOF hash\n         * functions such as `'shake256'`, the `outputLength` option can be used to\n         * specify the desired output length in bytes.\n         *\n         * An error is thrown when an attempt is made to copy the `Hash` object after\n         * its `hash.digest()` method has been called.\n         *\n         * ```js\n         * // Calculate a rolling hash.\n         * const {\n         *   createHash,\n         * } = await import('node:crypto');\n         *\n         * const hash = createHash('sha256');\n         *\n         * hash.update('one');\n         * console.log(hash.copy().digest('hex'));\n         *\n         * hash.update('two');\n         * console.log(hash.copy().digest('hex'));\n         *\n         * hash.update('three');\n         * console.log(hash.copy().digest('hex'));\n         *\n         * // Etc.\n         * ```\n         * @since v13.1.0\n         * @param options `stream.transform` options\n         */\n        copy(options?: HashOptions): Hash;\n        /**\n         * Updates the hash content with the given `data`, the encoding of which\n         * is given in `inputEncoding`.\n         * If `encoding` is not provided, and the `data` is a string, an\n         * encoding of `'utf8'` is enforced. If `data` is a `Buffer`, `TypedArray`, or`DataView`, then `inputEncoding` is ignored.\n         *\n         * This can be called many times with new data as it is streamed.\n         * @since v0.1.92\n         * @param inputEncoding The `encoding` of the `data` string.\n         */\n        update(data: BinaryLike): Hash;\n        update(data: string, inputEncoding: Encoding): Hash;\n        /**\n         * Calculates the digest of all of the data passed to be hashed (using the `hash.update()` method).\n         * If `encoding` is provided a string will be returned; otherwise\n         * a `Buffer` is returned.\n         *\n         * The `Hash` object can not be used again after `hash.digest()` method has been\n         * called. Multiple calls will cause an error to be thrown.\n         * @since v0.1.92\n         * @param encoding The `encoding` of the return value.\n         */\n        digest(): Buffer;\n        digest(encoding: BinaryToTextEncoding): string;\n    }\n    /**\n     * The `Hmac` class is a utility for creating cryptographic HMAC digests. It can\n     * be used in one of two ways:\n     *\n     * * As a `stream` that is both readable and writable, where data is written\n     * to produce a computed HMAC digest on the readable side, or\n     * * Using the `hmac.update()` and `hmac.digest()` methods to produce the\n     * computed HMAC digest.\n     *\n     * The {@link createHmac} method is used to create `Hmac` instances. `Hmac`objects are not to be created directly using the `new` keyword.\n     *\n     * Example: Using `Hmac` objects as streams:\n     *\n     * ```js\n     * const {\n     *   createHmac,\n     * } = await import('node:crypto');\n     *\n     * const hmac = createHmac('sha256', 'a secret');\n     *\n     * hmac.on('readable', () => {\n     *   // Only one element is going to be produced by the\n     *   // hash stream.\n     *   const data = hmac.read();\n     *   if (data) {\n     *     console.log(data.toString('hex'));\n     *     // Prints:\n     *     //   7fd04df92f636fd450bc841c9418e5825c17f33ad9c87c518115a45971f7f77e\n     *   }\n     * });\n     *\n     * hmac.write('some data to hash');\n     * hmac.end();\n     * ```\n     *\n     * Example: Using `Hmac` and piped streams:\n     *\n     * ```js\n     * import { createReadStream } from 'node:fs';\n     * import { stdout } from 'node:process';\n     * const {\n     *   createHmac,\n     * } = await import('node:crypto');\n     *\n     * const hmac = createHmac('sha256', 'a secret');\n     *\n     * const input = createReadStream('test.js');\n     * input.pipe(hmac).pipe(stdout);\n     * ```\n     *\n     * Example: Using the `hmac.update()` and `hmac.digest()` methods:\n     *\n     * ```js\n     * const {\n     *   createHmac,\n     * } = await import('node:crypto');\n     *\n     * const hmac = createHmac('sha256', 'a secret');\n     *\n     * hmac.update('some data to hash');\n     * console.log(hmac.digest('hex'));\n     * // Prints:\n     * //   7fd04df92f636fd450bc841c9418e5825c17f33ad9c87c518115a45971f7f77e\n     * ```\n     * @since v0.1.94\n     * @deprecated Since v20.13.0 Calling `Hmac` class directly with `Hmac()` or `new Hmac()` is deprecated due to being internals, not intended for public use. Please use the {@link createHmac} method to create Hmac instances.\n     */\n    class Hmac extends stream.Transform {\n        private constructor();\n        /**\n         * Updates the `Hmac` content with the given `data`, the encoding of which\n         * is given in `inputEncoding`.\n         * If `encoding` is not provided, and the `data` is a string, an\n         * encoding of `'utf8'` is enforced. If `data` is a `Buffer`, `TypedArray`, or`DataView`, then `inputEncoding` is ignored.\n         *\n         * This can be called many times with new data as it is streamed.\n         * @since v0.1.94\n         * @param inputEncoding The `encoding` of the `data` string.\n         */\n        update(data: BinaryLike): Hmac;\n        update(data: string, inputEncoding: Encoding): Hmac;\n        /**\n         * Calculates the HMAC digest of all of the data passed using `hmac.update()`.\n         * If `encoding` is\n         * provided a string is returned; otherwise a `Buffer` is returned;\n         *\n         * The `Hmac` object can not be used again after `hmac.digest()` has been\n         * called. Multiple calls to `hmac.digest()` will result in an error being thrown.\n         * @since v0.1.94\n         * @param encoding The `encoding` of the return value.\n         */\n        digest(): Buffer;\n        digest(encoding: BinaryToTextEncoding): string;\n    }\n    type KeyObjectType = \"secret\" | \"public\" | \"private\";\n    interface KeyExportOptions<T extends KeyFormat> {\n        type: \"pkcs1\" | \"spki\" | \"pkcs8\" | \"sec1\";\n        format: T;\n        cipher?: string | undefined;\n        passphrase?: string | Buffer | undefined;\n    }\n    interface JwkKeyExportOptions {\n        format: \"jwk\";\n    }\n    interface JsonWebKey {\n        crv?: string | undefined;\n        d?: string | undefined;\n        dp?: string | undefined;\n        dq?: string | undefined;\n        e?: string | undefined;\n        k?: string | undefined;\n        kty?: string | undefined;\n        n?: string | undefined;\n        p?: string | undefined;\n        q?: string | undefined;\n        qi?: string | undefined;\n        x?: string | undefined;\n        y?: string | undefined;\n        [key: string]: unknown;\n    }\n    interface AsymmetricKeyDetails {\n        /**\n         * Key size in bits (RSA, DSA).\n         */\n        modulusLength?: number | undefined;\n        /**\n         * Public exponent (RSA).\n         */\n        publicExponent?: bigint | undefined;\n        /**\n         * Name of the message digest (RSA-PSS).\n         */\n        hashAlgorithm?: string | undefined;\n        /**\n         * Name of the message digest used by MGF1 (RSA-PSS).\n         */\n        mgf1HashAlgorithm?: string | undefined;\n        /**\n         * Minimal salt length in bytes (RSA-PSS).\n         */\n        saltLength?: number | undefined;\n        /**\n         * Size of q in bits (DSA).\n         */\n        divisorLength?: number | undefined;\n        /**\n         * Name of the curve (EC).\n         */\n        namedCurve?: string | undefined;\n    }\n    /**\n     * Node.js uses a `KeyObject` class to represent a symmetric or asymmetric key,\n     * and each kind of key exposes different functions. The {@link createSecretKey}, {@link createPublicKey} and {@link createPrivateKey} methods are used to create `KeyObject`instances. `KeyObject`\n     * objects are not to be created directly using the `new`keyword.\n     *\n     * Most applications should consider using the new `KeyObject` API instead of\n     * passing keys as strings or `Buffer`s due to improved security features.\n     *\n     * `KeyObject` instances can be passed to other threads via `postMessage()`.\n     * The receiver obtains a cloned `KeyObject`, and the `KeyObject` does not need to\n     * be listed in the `transferList` argument.\n     * @since v11.6.0\n     */\n    class KeyObject {\n        private constructor();\n        /**\n         * Example: Converting a `CryptoKey` instance to a `KeyObject`:\n         *\n         * ```js\n         * const { KeyObject } = await import('node:crypto');\n         * const { subtle } = globalThis.crypto;\n         *\n         * const key = await subtle.generateKey({\n         *   name: 'HMAC',\n         *   hash: 'SHA-256',\n         *   length: 256,\n         * }, true, ['sign', 'verify']);\n         *\n         * const keyObject = KeyObject.from(key);\n         * console.log(keyObject.symmetricKeySize);\n         * // Prints: 32 (symmetric key size in bytes)\n         * ```\n         * @since v15.0.0\n         */\n        static from(key: webcrypto.CryptoKey): KeyObject;\n        /**\n         * For asymmetric keys, this property represents the type of the key. Supported key\n         * types are:\n         *\n         * * `'rsa'` (OID 1.2.840.113549.1.1.1)\n         * * `'rsa-pss'` (OID 1.2.840.113549.1.1.10)\n         * * `'dsa'` (OID 1.2.840.10040.4.1)\n         * * `'ec'` (OID 1.2.840.10045.2.1)\n         * * `'x25519'` (OID 1.3.101.110)\n         * * `'x448'` (OID 1.3.101.111)\n         * * `'ed25519'` (OID 1.3.101.112)\n         * * `'ed448'` (OID 1.3.101.113)\n         * * `'dh'` (OID 1.2.840.113549.1.3.1)\n         *\n         * This property is `undefined` for unrecognized `KeyObject` types and symmetric\n         * keys.\n         * @since v11.6.0\n         */\n        asymmetricKeyType?: KeyType | undefined;\n        /**\n         * This property exists only on asymmetric keys. Depending on the type of the key,\n         * this object contains information about the key. None of the information obtained\n         * through this property can be used to uniquely identify a key or to compromise\n         * the security of the key.\n         *\n         * For RSA-PSS keys, if the key material contains a `RSASSA-PSS-params` sequence,\n         * the `hashAlgorithm`, `mgf1HashAlgorithm`, and `saltLength` properties will be\n         * set.\n         *\n         * Other key details might be exposed via this API using additional attributes.\n         * @since v15.7.0\n         */\n        asymmetricKeyDetails?: AsymmetricKeyDetails | undefined;\n        /**\n         * For symmetric keys, the following encoding options can be used:\n         *\n         * For public keys, the following encoding options can be used:\n         *\n         * For private keys, the following encoding options can be used:\n         *\n         * The result type depends on the selected encoding format, when PEM the\n         * result is a string, when DER it will be a buffer containing the data\n         * encoded as DER, when [JWK](https://tools.ietf.org/html/rfc7517) it will be an object.\n         *\n         * When [JWK](https://tools.ietf.org/html/rfc7517) encoding format was selected, all other encoding options are\n         * ignored.\n         *\n         * PKCS#1, SEC1, and PKCS#8 type keys can be encrypted by using a combination of\n         * the `cipher` and `format` options. The PKCS#8 `type` can be used with any`format` to encrypt any key algorithm (RSA, EC, or DH) by specifying a`cipher`. PKCS#1 and SEC1 can only be\n         * encrypted by specifying a `cipher`when the PEM `format` is used. For maximum compatibility, use PKCS#8 for\n         * encrypted private keys. Since PKCS#8 defines its own\n         * encryption mechanism, PEM-level encryption is not supported when encrypting\n         * a PKCS#8 key. See [RFC 5208](https://www.rfc-editor.org/rfc/rfc5208.txt) for PKCS#8 encryption and [RFC 1421](https://www.rfc-editor.org/rfc/rfc1421.txt) for\n         * PKCS#1 and SEC1 encryption.\n         * @since v11.6.0\n         */\n        export(options: KeyExportOptions<\"pem\">): string | Buffer;\n        export(options?: KeyExportOptions<\"der\">): Buffer;\n        export(options?: JwkKeyExportOptions): JsonWebKey;\n        /**\n         * Returns `true` or `false` depending on whether the keys have exactly the same\n         * type, value, and parameters. This method is not [constant time](https://en.wikipedia.org/wiki/Timing_attack).\n         * @since v17.7.0, v16.15.0\n         * @param otherKeyObject A `KeyObject` with which to compare `keyObject`.\n         */\n        equals(otherKeyObject: KeyObject): boolean;\n        /**\n         * For secret keys, this property represents the size of the key in bytes. This\n         * property is `undefined` for asymmetric keys.\n         * @since v11.6.0\n         */\n        symmetricKeySize?: number | undefined;\n        /**\n         * Converts a `KeyObject` instance to a `CryptoKey`.\n         * @since 22.10.0\n         */\n        toCryptoKey(\n            algorithm:\n                | webcrypto.AlgorithmIdentifier\n                | webcrypto.RsaHashedImportParams\n                | webcrypto.EcKeyImportParams\n                | webcrypto.HmacImportParams,\n            extractable: boolean,\n            keyUsages: readonly webcrypto.KeyUsage[],\n        ): webcrypto.CryptoKey;\n        /**\n         * Depending on the type of this `KeyObject`, this property is either`'secret'` for secret (symmetric) keys, `'public'` for public (asymmetric) keys\n         * or `'private'` for private (asymmetric) keys.\n         * @since v11.6.0\n         */\n        type: KeyObjectType;\n    }\n    type CipherCCMTypes = \"aes-128-ccm\" | \"aes-192-ccm\" | \"aes-256-ccm\";\n    type CipherGCMTypes = \"aes-128-gcm\" | \"aes-192-gcm\" | \"aes-256-gcm\";\n    type CipherOCBTypes = \"aes-128-ocb\" | \"aes-192-ocb\" | \"aes-256-ocb\";\n    type CipherChaCha20Poly1305Types = \"chacha20-poly1305\";\n    type BinaryLike = string | NodeJS.ArrayBufferView;\n    type CipherKey = BinaryLike | KeyObject;\n    interface CipherCCMOptions extends stream.TransformOptions {\n        authTagLength: number;\n    }\n    interface CipherGCMOptions extends stream.TransformOptions {\n        authTagLength?: number | undefined;\n    }\n    interface CipherOCBOptions extends stream.TransformOptions {\n        authTagLength: number;\n    }\n    interface CipherChaCha20Poly1305Options extends stream.TransformOptions {\n        /** @default 16 */\n        authTagLength?: number | undefined;\n    }\n    /**\n     * Creates and returns a `Cipher` object, with the given `algorithm`, `key` and\n     * initialization vector (`iv`).\n     *\n     * The `options` argument controls stream behavior and is optional except when a\n     * cipher in CCM or OCB mode (e.g. `'aes-128-ccm'`) is used. In that case, the`authTagLength` option is required and specifies the length of the\n     * authentication tag in bytes, see `CCM mode`. In GCM mode, the `authTagLength`option is not required but can be used to set the length of the authentication\n     * tag that will be returned by `getAuthTag()` and defaults to 16 bytes.\n     * For `chacha20-poly1305`, the `authTagLength` option defaults to 16 bytes.\n     *\n     * The `algorithm` is dependent on OpenSSL, examples are `'aes192'`, etc. On\n     * recent OpenSSL releases, `openssl list -cipher-algorithms` will\n     * display the available cipher algorithms.\n     *\n     * The `key` is the raw key used by the `algorithm` and `iv` is an [initialization vector](https://en.wikipedia.org/wiki/Initialization_vector). Both arguments must be `'utf8'` encoded\n     * strings,`Buffers`, `TypedArray`, or `DataView`s. The `key` may optionally be\n     * a `KeyObject` of type `secret`. If the cipher does not need\n     * an initialization vector, `iv` may be `null`.\n     *\n     * When passing strings for `key` or `iv`, please consider `caveats when using strings as inputs to cryptographic APIs`.\n     *\n     * Initialization vectors should be unpredictable and unique; ideally, they will be\n     * cryptographically random. They do not have to be secret: IVs are typically just\n     * added to ciphertext messages unencrypted. It may sound contradictory that\n     * something has to be unpredictable and unique, but does not have to be secret;\n     * remember that an attacker must not be able to predict ahead of time what a\n     * given IV will be.\n     * @since v0.1.94\n     * @param options `stream.transform` options\n     */\n    function createCipheriv(\n        algorithm: CipherCCMTypes,\n        key: CipherKey,\n        iv: BinaryLike,\n        options: CipherCCMOptions,\n    ): CipherCCM;\n    function createCipheriv(\n        algorithm: CipherOCBTypes,\n        key: CipherKey,\n        iv: BinaryLike,\n        options: CipherOCBOptions,\n    ): CipherOCB;\n    function createCipheriv(\n        algorithm: CipherGCMTypes,\n        key: CipherKey,\n        iv: BinaryLike,\n        options?: CipherGCMOptions,\n    ): CipherGCM;\n    function createCipheriv(\n        algorithm: CipherChaCha20Poly1305Types,\n        key: CipherKey,\n        iv: BinaryLike,\n        options?: CipherChaCha20Poly1305Options,\n    ): CipherChaCha20Poly1305;\n    function createCipheriv(\n        algorithm: string,\n        key: CipherKey,\n        iv: BinaryLike | null,\n        options?: stream.TransformOptions,\n    ): Cipher;\n    /**\n     * Instances of the `Cipher` class are used to encrypt data. The class can be\n     * used in one of two ways:\n     *\n     * * As a `stream` that is both readable and writable, where plain unencrypted\n     * data is written to produce encrypted data on the readable side, or\n     * * Using the `cipher.update()` and `cipher.final()` methods to produce\n     * the encrypted data.\n     *\n     * The {@link createCipheriv} method is\n     * used to create `Cipher` instances. `Cipher` objects are not to be created\n     * directly using the `new` keyword.\n     *\n     * Example: Using `Cipher` objects as streams:\n     *\n     * ```js\n     * const {\n     *   scrypt,\n     *   randomFill,\n     *   createCipheriv,\n     * } = await import('node:crypto');\n     *\n     * const algorithm = 'aes-192-cbc';\n     * const password = 'Password used to generate key';\n     *\n     * // First, we'll generate the key. The key length is dependent on the algorithm.\n     * // In this case for aes192, it is 24 bytes (192 bits).\n     * scrypt(password, 'salt', 24, (err, key) => {\n     *   if (err) throw err;\n     *   // Then, we'll generate a random initialization vector\n     *   randomFill(new Uint8Array(16), (err, iv) => {\n     *     if (err) throw err;\n     *\n     *     // Once we have the key and iv, we can create and use the cipher...\n     *     const cipher = createCipheriv(algorithm, key, iv);\n     *\n     *     let encrypted = '';\n     *     cipher.setEncoding('hex');\n     *\n     *     cipher.on('data', (chunk) => encrypted += chunk);\n     *     cipher.on('end', () => console.log(encrypted));\n     *\n     *     cipher.write('some clear text data');\n     *     cipher.end();\n     *   });\n     * });\n     * ```\n     *\n     * Example: Using `Cipher` and piped streams:\n     *\n     * ```js\n     * import {\n     *   createReadStream,\n     *   createWriteStream,\n     * } from 'node:fs';\n     *\n     * import {\n     *   pipeline,\n     * } from 'node:stream';\n     *\n     * const {\n     *   scrypt,\n     *   randomFill,\n     *   createCipheriv,\n     * } = await import('node:crypto');\n     *\n     * const algorithm = 'aes-192-cbc';\n     * const password = 'Password used to generate key';\n     *\n     * // First, we'll generate the key. The key length is dependent on the algorithm.\n     * // In this case for aes192, it is 24 bytes (192 bits).\n     * scrypt(password, 'salt', 24, (err, key) => {\n     *   if (err) throw err;\n     *   // Then, we'll generate a random initialization vector\n     *   randomFill(new Uint8Array(16), (err, iv) => {\n     *     if (err) throw err;\n     *\n     *     const cipher = createCipheriv(algorithm, key, iv);\n     *\n     *     const input = createReadStream('test.js');\n     *     const output = createWriteStream('test.enc');\n     *\n     *     pipeline(input, cipher, output, (err) => {\n     *       if (err) throw err;\n     *     });\n     *   });\n     * });\n     * ```\n     *\n     * Example: Using the `cipher.update()` and `cipher.final()` methods:\n     *\n     * ```js\n     * const {\n     *   scrypt,\n     *   randomFill,\n     *   createCipheriv,\n     * } = await import('node:crypto');\n     *\n     * const algorithm = 'aes-192-cbc';\n     * const password = 'Password used to generate key';\n     *\n     * // First, we'll generate the key. The key length is dependent on the algorithm.\n     * // In this case for aes192, it is 24 bytes (192 bits).\n     * scrypt(password, 'salt', 24, (err, key) => {\n     *   if (err) throw err;\n     *   // Then, we'll generate a random initialization vector\n     *   randomFill(new Uint8Array(16), (err, iv) => {\n     *     if (err) throw err;\n     *\n     *     const cipher = createCipheriv(algorithm, key, iv);\n     *\n     *     let encrypted = cipher.update('some clear text data', 'utf8', 'hex');\n     *     encrypted += cipher.final('hex');\n     *     console.log(encrypted);\n     *   });\n     * });\n     * ```\n     * @since v0.1.94\n     */\n    class Cipher extends stream.Transform {\n        private constructor();\n        /**\n         * Updates the cipher with `data`. If the `inputEncoding` argument is given,\n         * the `data`argument is a string using the specified encoding. If the `inputEncoding`argument is not given, `data` must be a `Buffer`, `TypedArray`, or `DataView`. If `data` is a `Buffer`,\n         * `TypedArray`, or `DataView`, then `inputEncoding` is ignored.\n         *\n         * The `outputEncoding` specifies the output format of the enciphered\n         * data. If the `outputEncoding`is specified, a string using the specified encoding is returned. If no`outputEncoding` is provided, a `Buffer` is returned.\n         *\n         * The `cipher.update()` method can be called multiple times with new data until `cipher.final()` is called. Calling `cipher.update()` after `cipher.final()` will result in an error being\n         * thrown.\n         * @since v0.1.94\n         * @param inputEncoding The `encoding` of the data.\n         * @param outputEncoding The `encoding` of the return value.\n         */\n        update(data: BinaryLike): Buffer;\n        update(data: string, inputEncoding: Encoding): Buffer;\n        update(data: NodeJS.ArrayBufferView, inputEncoding: undefined, outputEncoding: Encoding): string;\n        update(data: string, inputEncoding: Encoding | undefined, outputEncoding: Encoding): string;\n        /**\n         * Once the `cipher.final()` method has been called, the `Cipher` object can no\n         * longer be used to encrypt data. Attempts to call `cipher.final()` more than\n         * once will result in an error being thrown.\n         * @since v0.1.94\n         * @param outputEncoding The `encoding` of the return value.\n         * @return Any remaining enciphered contents. If `outputEncoding` is specified, a string is returned. If an `outputEncoding` is not provided, a {@link Buffer} is returned.\n         */\n        final(): Buffer;\n        final(outputEncoding: BufferEncoding): string;\n        /**\n         * When using block encryption algorithms, the `Cipher` class will automatically\n         * add padding to the input data to the appropriate block size. To disable the\n         * default padding call `cipher.setAutoPadding(false)`.\n         *\n         * When `autoPadding` is `false`, the length of the entire input data must be a\n         * multiple of the cipher's block size or `cipher.final()` will throw an error.\n         * Disabling automatic padding is useful for non-standard padding, for instance\n         * using `0x0` instead of PKCS padding.\n         *\n         * The `cipher.setAutoPadding()` method must be called before `cipher.final()`.\n         * @since v0.7.1\n         * @param [autoPadding=true]\n         * @return for method chaining.\n         */\n        setAutoPadding(autoPadding?: boolean): this;\n    }\n    interface CipherCCM extends Cipher {\n        setAAD(\n            buffer: NodeJS.ArrayBufferView,\n            options: {\n                plaintextLength: number;\n            },\n        ): this;\n        getAuthTag(): Buffer;\n    }\n    interface CipherGCM extends Cipher {\n        setAAD(\n            buffer: NodeJS.ArrayBufferView,\n            options?: {\n                plaintextLength: number;\n            },\n        ): this;\n        getAuthTag(): Buffer;\n    }\n    interface CipherOCB extends Cipher {\n        setAAD(\n            buffer: NodeJS.ArrayBufferView,\n            options?: {\n                plaintextLength: number;\n            },\n        ): this;\n        getAuthTag(): Buffer;\n    }\n    interface CipherChaCha20Poly1305 extends Cipher {\n        setAAD(\n            buffer: NodeJS.ArrayBufferView,\n            options: {\n                plaintextLength: number;\n            },\n        ): this;\n        getAuthTag(): Buffer;\n    }\n    /**\n     * Creates and returns a `Decipher` object that uses the given `algorithm`, `key` and initialization vector (`iv`).\n     *\n     * The `options` argument controls stream behavior and is optional except when a\n     * cipher in CCM or OCB mode (e.g. `'aes-128-ccm'`) is used. In that case, the `authTagLength` option is required and specifies the length of the\n     * authentication tag in bytes, see `CCM mode`. In GCM mode, the `authTagLength` option is not required but can be used to restrict accepted authentication tags\n     * to those with the specified length.\n     * For `chacha20-poly1305`, the `authTagLength` option defaults to 16 bytes.\n     *\n     * The `algorithm` is dependent on OpenSSL, examples are `'aes192'`, etc. On\n     * recent OpenSSL releases, `openssl list -cipher-algorithms` will\n     * display the available cipher algorithms.\n     *\n     * The `key` is the raw key used by the `algorithm` and `iv` is an [initialization vector](https://en.wikipedia.org/wiki/Initialization_vector). Both arguments must be `'utf8'` encoded\n     * strings,`Buffers`, `TypedArray`, or `DataView`s. The `key` may optionally be\n     * a `KeyObject` of type `secret`. If the cipher does not need\n     * an initialization vector, `iv` may be `null`.\n     *\n     * When passing strings for `key` or `iv`, please consider `caveats when using strings as inputs to cryptographic APIs`.\n     *\n     * Initialization vectors should be unpredictable and unique; ideally, they will be\n     * cryptographically random. They do not have to be secret: IVs are typically just\n     * added to ciphertext messages unencrypted. It may sound contradictory that\n     * something has to be unpredictable and unique, but does not have to be secret;\n     * remember that an attacker must not be able to predict ahead of time what a given\n     * IV will be.\n     * @since v0.1.94\n     * @param options `stream.transform` options\n     */\n    function createDecipheriv(\n        algorithm: CipherCCMTypes,\n        key: CipherKey,\n        iv: BinaryLike,\n        options: CipherCCMOptions,\n    ): DecipherCCM;\n    function createDecipheriv(\n        algorithm: CipherOCBTypes,\n        key: CipherKey,\n        iv: BinaryLike,\n        options: CipherOCBOptions,\n    ): DecipherOCB;\n    function createDecipheriv(\n        algorithm: CipherGCMTypes,\n        key: CipherKey,\n        iv: BinaryLike,\n        options?: CipherGCMOptions,\n    ): DecipherGCM;\n    function createDecipheriv(\n        algorithm: CipherChaCha20Poly1305Types,\n        key: CipherKey,\n        iv: BinaryLike,\n        options?: CipherChaCha20Poly1305Options,\n    ): DecipherChaCha20Poly1305;\n    function createDecipheriv(\n        algorithm: string,\n        key: CipherKey,\n        iv: BinaryLike | null,\n        options?: stream.TransformOptions,\n    ): Decipher;\n    /**\n     * Instances of the `Decipher` class are used to decrypt data. The class can be\n     * used in one of two ways:\n     *\n     * * As a `stream` that is both readable and writable, where plain encrypted\n     * data is written to produce unencrypted data on the readable side, or\n     * * Using the `decipher.update()` and `decipher.final()` methods to\n     * produce the unencrypted data.\n     *\n     * The {@link createDecipheriv} method is\n     * used to create `Decipher` instances. `Decipher` objects are not to be created\n     * directly using the `new` keyword.\n     *\n     * Example: Using `Decipher` objects as streams:\n     *\n     * ```js\n     * import { Buffer } from 'node:buffer';\n     * const {\n     *   scryptSync,\n     *   createDecipheriv,\n     * } = await import('node:crypto');\n     *\n     * const algorithm = 'aes-192-cbc';\n     * const password = 'Password used to generate key';\n     * // Key length is dependent on the algorithm. In this case for aes192, it is\n     * // 24 bytes (192 bits).\n     * // Use the async `crypto.scrypt()` instead.\n     * const key = scryptSync(password, 'salt', 24);\n     * // The IV is usually passed along with the ciphertext.\n     * const iv = Buffer.alloc(16, 0); // Initialization vector.\n     *\n     * const decipher = createDecipheriv(algorithm, key, iv);\n     *\n     * let decrypted = '';\n     * decipher.on('readable', () => {\n     *   let chunk;\n     *   while (null !== (chunk = decipher.read())) {\n     *     decrypted += chunk.toString('utf8');\n     *   }\n     * });\n     * decipher.on('end', () => {\n     *   console.log(decrypted);\n     *   // Prints: some clear text data\n     * });\n     *\n     * // Encrypted with same algorithm, key and iv.\n     * const encrypted =\n     *   'e5f79c5915c02171eec6b212d5520d44480993d7d622a7c4c2da32f6efda0ffa';\n     * decipher.write(encrypted, 'hex');\n     * decipher.end();\n     * ```\n     *\n     * Example: Using `Decipher` and piped streams:\n     *\n     * ```js\n     * import {\n     *   createReadStream,\n     *   createWriteStream,\n     * } from 'node:fs';\n     * import { Buffer } from 'node:buffer';\n     * const {\n     *   scryptSync,\n     *   createDecipheriv,\n     * } = await import('node:crypto');\n     *\n     * const algorithm = 'aes-192-cbc';\n     * const password = 'Password used to generate key';\n     * // Use the async `crypto.scrypt()` instead.\n     * const key = scryptSync(password, 'salt', 24);\n     * // The IV is usually passed along with the ciphertext.\n     * const iv = Buffer.alloc(16, 0); // Initialization vector.\n     *\n     * const decipher = createDecipheriv(algorithm, key, iv);\n     *\n     * const input = createReadStream('test.enc');\n     * const output = createWriteStream('test.js');\n     *\n     * input.pipe(decipher).pipe(output);\n     * ```\n     *\n     * Example: Using the `decipher.update()` and `decipher.final()` methods:\n     *\n     * ```js\n     * import { Buffer } from 'node:buffer';\n     * const {\n     *   scryptSync,\n     *   createDecipheriv,\n     * } = await import('node:crypto');\n     *\n     * const algorithm = 'aes-192-cbc';\n     * const password = 'Password used to generate key';\n     * // Use the async `crypto.scrypt()` instead.\n     * const key = scryptSync(password, 'salt', 24);\n     * // The IV is usually passed along with the ciphertext.\n     * const iv = Buffer.alloc(16, 0); // Initialization vector.\n     *\n     * const decipher = createDecipheriv(algorithm, key, iv);\n     *\n     * // Encrypted using same algorithm, key and iv.\n     * const encrypted =\n     *   'e5f79c5915c02171eec6b212d5520d44480993d7d622a7c4c2da32f6efda0ffa';\n     * let decrypted = decipher.update(encrypted, 'hex', 'utf8');\n     * decrypted += decipher.final('utf8');\n     * console.log(decrypted);\n     * // Prints: some clear text data\n     * ```\n     * @since v0.1.94\n     */\n    class Decipher extends stream.Transform {\n        private constructor();\n        /**\n         * Updates the decipher with `data`. If the `inputEncoding` argument is given,\n         * the `data` argument is a string using the specified encoding. If the `inputEncoding` argument is not given, `data` must be a `Buffer`. If `data` is a `Buffer` then `inputEncoding` is\n         * ignored.\n         *\n         * The `outputEncoding` specifies the output format of the enciphered\n         * data. If the `outputEncoding` is specified, a string using the specified encoding is returned. If no `outputEncoding` is provided, a `Buffer` is returned.\n         *\n         * The `decipher.update()` method can be called multiple times with new data until `decipher.final()` is called. Calling `decipher.update()` after `decipher.final()` will result in an error\n         * being thrown.\n         * @since v0.1.94\n         * @param inputEncoding The `encoding` of the `data` string.\n         * @param outputEncoding The `encoding` of the return value.\n         */\n        update(data: NodeJS.ArrayBufferView): Buffer;\n        update(data: string, inputEncoding: Encoding): Buffer;\n        update(data: NodeJS.ArrayBufferView, inputEncoding: undefined, outputEncoding: Encoding): string;\n        update(data: string, inputEncoding: Encoding | undefined, outputEncoding: Encoding): string;\n        /**\n         * Once the `decipher.final()` method has been called, the `Decipher` object can\n         * no longer be used to decrypt data. Attempts to call `decipher.final()` more\n         * than once will result in an error being thrown.\n         * @since v0.1.94\n         * @param outputEncoding The `encoding` of the return value.\n         * @return Any remaining deciphered contents. If `outputEncoding` is specified, a string is returned. If an `outputEncoding` is not provided, a {@link Buffer} is returned.\n         */\n        final(): Buffer;\n        final(outputEncoding: BufferEncoding): string;\n        /**\n         * When data has been encrypted without standard block padding, calling `decipher.setAutoPadding(false)` will disable automatic padding to prevent `decipher.final()` from checking for and\n         * removing padding.\n         *\n         * Turning auto padding off will only work if the input data's length is a\n         * multiple of the ciphers block size.\n         *\n         * The `decipher.setAutoPadding()` method must be called before `decipher.final()`.\n         * @since v0.7.1\n         * @param [autoPadding=true]\n         * @return for method chaining.\n         */\n        setAutoPadding(auto_padding?: boolean): this;\n    }\n    interface DecipherCCM extends Decipher {\n        setAuthTag(buffer: NodeJS.ArrayBufferView): this;\n        setAAD(\n            buffer: NodeJS.ArrayBufferView,\n            options: {\n                plaintextLength: number;\n            },\n        ): this;\n    }\n    interface DecipherGCM extends Decipher {\n        setAuthTag(buffer: NodeJS.ArrayBufferView): this;\n        setAAD(\n            buffer: NodeJS.ArrayBufferView,\n            options?: {\n                plaintextLength: number;\n            },\n        ): this;\n    }\n    interface DecipherOCB extends Decipher {\n        setAuthTag(buffer: NodeJS.ArrayBufferView): this;\n        setAAD(\n            buffer: NodeJS.ArrayBufferView,\n            options?: {\n                plaintextLength: number;\n            },\n        ): this;\n    }\n    interface DecipherChaCha20Poly1305 extends Decipher {\n        setAuthTag(buffer: NodeJS.ArrayBufferView): this;\n        setAAD(\n            buffer: NodeJS.ArrayBufferView,\n            options: {\n                plaintextLength: number;\n            },\n        ): this;\n    }\n    interface PrivateKeyInput {\n        key: string | Buffer;\n        format?: KeyFormat | undefined;\n        type?: \"pkcs1\" | \"pkcs8\" | \"sec1\" | undefined;\n        passphrase?: string | Buffer | undefined;\n        encoding?: string | undefined;\n    }\n    interface PublicKeyInput {\n        key: string | Buffer;\n        format?: KeyFormat | undefined;\n        type?: \"pkcs1\" | \"spki\" | undefined;\n        encoding?: string | undefined;\n    }\n    /**\n     * Asynchronously generates a new random secret key of the given `length`. The `type` will determine which validations will be performed on the `length`.\n     *\n     * ```js\n     * const {\n     *   generateKey,\n     * } = await import('node:crypto');\n     *\n     * generateKey('hmac', { length: 512 }, (err, key) => {\n     *   if (err) throw err;\n     *   console.log(key.export().toString('hex'));  // 46e..........620\n     * });\n     * ```\n     *\n     * The size of a generated HMAC key should not exceed the block size of the\n     * underlying hash function. See {@link createHmac} for more information.\n     * @since v15.0.0\n     * @param type The intended use of the generated secret key. Currently accepted values are `'hmac'` and `'aes'`.\n     */\n    function generateKey(\n        type: \"hmac\" | \"aes\",\n        options: {\n            length: number;\n        },\n        callback: (err: Error | null, key: KeyObject) => void,\n    ): void;\n    /**\n     * Synchronously generates a new random secret key of the given `length`. The `type` will determine which validations will be performed on the `length`.\n     *\n     * ```js\n     * const {\n     *   generateKeySync,\n     * } = await import('node:crypto');\n     *\n     * const key = generateKeySync('hmac', { length: 512 });\n     * console.log(key.export().toString('hex'));  // e89..........41e\n     * ```\n     *\n     * The size of a generated HMAC key should not exceed the block size of the\n     * underlying hash function. See {@link createHmac} for more information.\n     * @since v15.0.0\n     * @param type The intended use of the generated secret key. Currently accepted values are `'hmac'` and `'aes'`.\n     */\n    function generateKeySync(\n        type: \"hmac\" | \"aes\",\n        options: {\n            length: number;\n        },\n    ): KeyObject;\n    interface JsonWebKeyInput {\n        key: JsonWebKey;\n        format: \"jwk\";\n    }\n    /**\n     * Creates and returns a new key object containing a private key. If `key` is a\n     * string or `Buffer`, `format` is assumed to be `'pem'`; otherwise, `key` must be an object with the properties described above.\n     *\n     * If the private key is encrypted, a `passphrase` must be specified. The length\n     * of the passphrase is limited to 1024 bytes.\n     * @since v11.6.0\n     */\n    function createPrivateKey(key: PrivateKeyInput | string | Buffer | JsonWebKeyInput): KeyObject;\n    /**\n     * Creates and returns a new key object containing a public key. If `key` is a\n     * string or `Buffer`, `format` is assumed to be `'pem'`; if `key` is a `KeyObject` with type `'private'`, the public key is derived from the given private key;\n     * otherwise, `key` must be an object with the properties described above.\n     *\n     * If the format is `'pem'`, the `'key'` may also be an X.509 certificate.\n     *\n     * Because public keys can be derived from private keys, a private key may be\n     * passed instead of a public key. In that case, this function behaves as if {@link createPrivateKey} had been called, except that the type of the\n     * returned `KeyObject` will be `'public'` and that the private key cannot be\n     * extracted from the returned `KeyObject`. Similarly, if a `KeyObject` with type `'private'` is given, a new `KeyObject` with type `'public'` will be returned\n     * and it will be impossible to extract the private key from the returned object.\n     * @since v11.6.0\n     */\n    function createPublicKey(key: PublicKeyInput | string | Buffer | KeyObject | JsonWebKeyInput): KeyObject;\n    /**\n     * Creates and returns a new key object containing a secret key for symmetric\n     * encryption or `Hmac`.\n     * @since v11.6.0\n     * @param encoding The string encoding when `key` is a string.\n     */\n    function createSecretKey(key: NodeJS.ArrayBufferView): KeyObject;\n    function createSecretKey(key: string, encoding: BufferEncoding): KeyObject;\n    /**\n     * Creates and returns a `Sign` object that uses the given `algorithm`. Use {@link getHashes} to obtain the names of the available digest algorithms.\n     * Optional `options` argument controls the `stream.Writable` behavior.\n     *\n     * In some cases, a `Sign` instance can be created using the name of a signature\n     * algorithm, such as `'RSA-SHA256'`, instead of a digest algorithm. This will use\n     * the corresponding digest algorithm. This does not work for all signature\n     * algorithms, such as `'ecdsa-with-SHA256'`, so it is best to always use digest\n     * algorithm names.\n     * @since v0.1.92\n     * @param options `stream.Writable` options\n     */\n    function createSign(algorithm: string, options?: stream.WritableOptions): Sign;\n    type DSAEncoding = \"der\" | \"ieee-p1363\";\n    interface SigningOptions {\n        /**\n         * @see crypto.constants.RSA_PKCS1_PADDING\n         */\n        padding?: number | undefined;\n        saltLength?: number | undefined;\n        dsaEncoding?: DSAEncoding | undefined;\n    }\n    interface SignPrivateKeyInput extends PrivateKeyInput, SigningOptions {}\n    interface SignKeyObjectInput extends SigningOptions {\n        key: KeyObject;\n    }\n    interface SignJsonWebKeyInput extends JsonWebKeyInput, SigningOptions {}\n    interface VerifyPublicKeyInput extends PublicKeyInput, SigningOptions {}\n    interface VerifyKeyObjectInput extends SigningOptions {\n        key: KeyObject;\n    }\n    interface VerifyJsonWebKeyInput extends JsonWebKeyInput, SigningOptions {}\n    type KeyLike = string | Buffer | KeyObject;\n    /**\n     * The `Sign` class is a utility for generating signatures. It can be used in one\n     * of two ways:\n     *\n     * * As a writable `stream`, where data to be signed is written and the `sign.sign()` method is used to generate and return the signature, or\n     * * Using the `sign.update()` and `sign.sign()` methods to produce the\n     * signature.\n     *\n     * The {@link createSign} method is used to create `Sign` instances. The\n     * argument is the string name of the hash function to use. `Sign` objects are not\n     * to be created directly using the `new` keyword.\n     *\n     * Example: Using `Sign` and `Verify` objects as streams:\n     *\n     * ```js\n     * const {\n     *   generateKeyPairSync,\n     *   createSign,\n     *   createVerify,\n     * } = await import('node:crypto');\n     *\n     * const { privateKey, publicKey } = generateKeyPairSync('ec', {\n     *   namedCurve: 'sect239k1',\n     * });\n     *\n     * const sign = createSign('SHA256');\n     * sign.write('some data to sign');\n     * sign.end();\n     * const signature = sign.sign(privateKey, 'hex');\n     *\n     * const verify = createVerify('SHA256');\n     * verify.write('some data to sign');\n     * verify.end();\n     * console.log(verify.verify(publicKey, signature, 'hex'));\n     * // Prints: true\n     * ```\n     *\n     * Example: Using the `sign.update()` and `verify.update()` methods:\n     *\n     * ```js\n     * const {\n     *   generateKeyPairSync,\n     *   createSign,\n     *   createVerify,\n     * } = await import('node:crypto');\n     *\n     * const { privateKey, publicKey } = generateKeyPairSync('rsa', {\n     *   modulusLength: 2048,\n     * });\n     *\n     * const sign = createSign('SHA256');\n     * sign.update('some data to sign');\n     * sign.end();\n     * const signature = sign.sign(privateKey);\n     *\n     * const verify = createVerify('SHA256');\n     * verify.update('some data to sign');\n     * verify.end();\n     * console.log(verify.verify(publicKey, signature));\n     * // Prints: true\n     * ```\n     * @since v0.1.92\n     */\n    class Sign extends stream.Writable {\n        private constructor();\n        /**\n         * Updates the `Sign` content with the given `data`, the encoding of which\n         * is given in `inputEncoding`.\n         * If `encoding` is not provided, and the `data` is a string, an\n         * encoding of `'utf8'` is enforced. If `data` is a `Buffer`, `TypedArray`, or`DataView`, then `inputEncoding` is ignored.\n         *\n         * This can be called many times with new data as it is streamed.\n         * @since v0.1.92\n         * @param inputEncoding The `encoding` of the `data` string.\n         */\n        update(data: BinaryLike): this;\n        update(data: string, inputEncoding: Encoding): this;\n        /**\n         * Calculates the signature on all the data passed through using either `sign.update()` or `sign.write()`.\n         *\n         * If `privateKey` is not a `KeyObject`, this function behaves as if `privateKey` had been passed to {@link createPrivateKey}. If it is an\n         * object, the following additional properties can be passed:\n         *\n         * If `outputEncoding` is provided a string is returned; otherwise a `Buffer` is returned.\n         *\n         * The `Sign` object can not be again used after `sign.sign()` method has been\n         * called. Multiple calls to `sign.sign()` will result in an error being thrown.\n         * @since v0.1.92\n         */\n        sign(privateKey: KeyLike | SignKeyObjectInput | SignPrivateKeyInput | SignJsonWebKeyInput): Buffer;\n        sign(\n            privateKey: KeyLike | SignKeyObjectInput | SignPrivateKeyInput | SignJsonWebKeyInput,\n            outputFormat: BinaryToTextEncoding,\n        ): string;\n    }\n    /**\n     * Creates and returns a `Verify` object that uses the given algorithm.\n     * Use {@link getHashes} to obtain an array of names of the available\n     * signing algorithms. Optional `options` argument controls the `stream.Writable` behavior.\n     *\n     * In some cases, a `Verify` instance can be created using the name of a signature\n     * algorithm, such as `'RSA-SHA256'`, instead of a digest algorithm. This will use\n     * the corresponding digest algorithm. This does not work for all signature\n     * algorithms, such as `'ecdsa-with-SHA256'`, so it is best to always use digest\n     * algorithm names.\n     * @since v0.1.92\n     * @param options `stream.Writable` options\n     */\n    function createVerify(algorithm: string, options?: stream.WritableOptions): Verify;\n    /**\n     * The `Verify` class is a utility for verifying signatures. It can be used in one\n     * of two ways:\n     *\n     * * As a writable `stream` where written data is used to validate against the\n     * supplied signature, or\n     * * Using the `verify.update()` and `verify.verify()` methods to verify\n     * the signature.\n     *\n     * The {@link createVerify} method is used to create `Verify` instances. `Verify` objects are not to be created directly using the `new` keyword.\n     *\n     * See `Sign` for examples.\n     * @since v0.1.92\n     */\n    class Verify extends stream.Writable {\n        private constructor();\n        /**\n         * Updates the `Verify` content with the given `data`, the encoding of which\n         * is given in `inputEncoding`.\n         * If `inputEncoding` is not provided, and the `data` is a string, an\n         * encoding of `'utf8'` is enforced. If `data` is a `Buffer`, `TypedArray`, or `DataView`, then `inputEncoding` is ignored.\n         *\n         * This can be called many times with new data as it is streamed.\n         * @since v0.1.92\n         * @param inputEncoding The `encoding` of the `data` string.\n         */\n        update(data: BinaryLike): Verify;\n        update(data: string, inputEncoding: Encoding): Verify;\n        /**\n         * Verifies the provided data using the given `object` and `signature`.\n         *\n         * If `object` is not a `KeyObject`, this function behaves as if `object` had been passed to {@link createPublicKey}. If it is an\n         * object, the following additional properties can be passed:\n         *\n         * The `signature` argument is the previously calculated signature for the data, in\n         * the `signatureEncoding`.\n         * If a `signatureEncoding` is specified, the `signature` is expected to be a\n         * string; otherwise `signature` is expected to be a `Buffer`, `TypedArray`, or `DataView`.\n         *\n         * The `verify` object can not be used again after `verify.verify()` has been\n         * called. Multiple calls to `verify.verify()` will result in an error being\n         * thrown.\n         *\n         * Because public keys can be derived from private keys, a private key may\n         * be passed instead of a public key.\n         * @since v0.1.92\n         */\n        verify(\n            object: KeyLike | VerifyKeyObjectInput | VerifyPublicKeyInput | VerifyJsonWebKeyInput,\n            signature: NodeJS.ArrayBufferView,\n        ): boolean;\n        verify(\n            object: KeyLike | VerifyKeyObjectInput | VerifyPublicKeyInput | VerifyJsonWebKeyInput,\n            signature: string,\n            signature_format?: BinaryToTextEncoding,\n        ): boolean;\n    }\n    /**\n     * Creates a `DiffieHellman` key exchange object using the supplied `prime` and an\n     * optional specific `generator`.\n     *\n     * The `generator` argument can be a number, string, or `Buffer`. If `generator` is not specified, the value `2` is used.\n     *\n     * If `primeEncoding` is specified, `prime` is expected to be a string; otherwise\n     * a `Buffer`, `TypedArray`, or `DataView` is expected.\n     *\n     * If `generatorEncoding` is specified, `generator` is expected to be a string;\n     * otherwise a number, `Buffer`, `TypedArray`, or `DataView` is expected.\n     * @since v0.11.12\n     * @param primeEncoding The `encoding` of the `prime` string.\n     * @param [generator=2]\n     * @param generatorEncoding The `encoding` of the `generator` string.\n     */\n    function createDiffieHellman(primeLength: number, generator?: number): DiffieHellman;\n    function createDiffieHellman(\n        prime: ArrayBuffer | NodeJS.ArrayBufferView,\n        generator?: number | ArrayBuffer | NodeJS.ArrayBufferView,\n    ): DiffieHellman;\n    function createDiffieHellman(\n        prime: ArrayBuffer | NodeJS.ArrayBufferView,\n        generator: string,\n        generatorEncoding: BinaryToTextEncoding,\n    ): DiffieHellman;\n    function createDiffieHellman(\n        prime: string,\n        primeEncoding: BinaryToTextEncoding,\n        generator?: number | ArrayBuffer | NodeJS.ArrayBufferView,\n    ): DiffieHellman;\n    function createDiffieHellman(\n        prime: string,\n        primeEncoding: BinaryToTextEncoding,\n        generator: string,\n        generatorEncoding: BinaryToTextEncoding,\n    ): DiffieHellman;\n    /**\n     * The `DiffieHellman` class is a utility for creating Diffie-Hellman key\n     * exchanges.\n     *\n     * Instances of the `DiffieHellman` class can be created using the {@link createDiffieHellman} function.\n     *\n     * ```js\n     * import assert from 'node:assert';\n     *\n     * const {\n     *   createDiffieHellman,\n     * } = await import('node:crypto');\n     *\n     * // Generate Alice's keys...\n     * const alice = createDiffieHellman(2048);\n     * const aliceKey = alice.generateKeys();\n     *\n     * // Generate Bob's keys...\n     * const bob = createDiffieHellman(alice.getPrime(), alice.getGenerator());\n     * const bobKey = bob.generateKeys();\n     *\n     * // Exchange and generate the secret...\n     * const aliceSecret = alice.computeSecret(bobKey);\n     * const bobSecret = bob.computeSecret(aliceKey);\n     *\n     * // OK\n     * assert.strictEqual(aliceSecret.toString('hex'), bobSecret.toString('hex'));\n     * ```\n     * @since v0.5.0\n     */\n    class DiffieHellman {\n        private constructor();\n        /**\n         * Generates private and public Diffie-Hellman key values unless they have been\n         * generated or computed already, and returns\n         * the public key in the specified `encoding`. This key should be\n         * transferred to the other party.\n         * If `encoding` is provided a string is returned; otherwise a `Buffer` is returned.\n         *\n         * This function is a thin wrapper around [`DH_generate_key()`](https://www.openssl.org/docs/man3.0/man3/DH_generate_key.html). In particular,\n         * once a private key has been generated or set, calling this function only updates\n         * the public key but does not generate a new private key.\n         * @since v0.5.0\n         * @param encoding The `encoding` of the return value.\n         */\n        generateKeys(): Buffer;\n        generateKeys(encoding: BinaryToTextEncoding): string;\n        /**\n         * Computes the shared secret using `otherPublicKey` as the other\n         * party's public key and returns the computed shared secret. The supplied\n         * key is interpreted using the specified `inputEncoding`, and secret is\n         * encoded using specified `outputEncoding`.\n         * If the `inputEncoding` is not\n         * provided, `otherPublicKey` is expected to be a `Buffer`, `TypedArray`, or `DataView`.\n         *\n         * If `outputEncoding` is given a string is returned; otherwise, a `Buffer` is returned.\n         * @since v0.5.0\n         * @param inputEncoding The `encoding` of an `otherPublicKey` string.\n         * @param outputEncoding The `encoding` of the return value.\n         */\n        computeSecret(otherPublicKey: NodeJS.ArrayBufferView, inputEncoding?: null, outputEncoding?: null): Buffer;\n        computeSecret(otherPublicKey: string, inputEncoding: BinaryToTextEncoding, outputEncoding?: null): Buffer;\n        computeSecret(\n            otherPublicKey: NodeJS.ArrayBufferView,\n            inputEncoding: null,\n            outputEncoding: BinaryToTextEncoding,\n        ): string;\n        computeSecret(\n            otherPublicKey: string,\n            inputEncoding: BinaryToTextEncoding,\n            outputEncoding: BinaryToTextEncoding,\n        ): string;\n        /**\n         * Returns the Diffie-Hellman prime in the specified `encoding`.\n         * If `encoding` is provided a string is\n         * returned; otherwise a `Buffer` is returned.\n         * @since v0.5.0\n         * @param encoding The `encoding` of the return value.\n         */\n        getPrime(): Buffer;\n        getPrime(encoding: BinaryToTextEncoding): string;\n        /**\n         * Returns the Diffie-Hellman generator in the specified `encoding`.\n         * If `encoding` is provided a string is\n         * returned; otherwise a `Buffer` is returned.\n         * @since v0.5.0\n         * @param encoding The `encoding` of the return value.\n         */\n        getGenerator(): Buffer;\n        getGenerator(encoding: BinaryToTextEncoding): string;\n        /**\n         * Returns the Diffie-Hellman public key in the specified `encoding`.\n         * If `encoding` is provided a\n         * string is returned; otherwise a `Buffer` is returned.\n         * @since v0.5.0\n         * @param encoding The `encoding` of the return value.\n         */\n        getPublicKey(): Buffer;\n        getPublicKey(encoding: BinaryToTextEncoding): string;\n        /**\n         * Returns the Diffie-Hellman private key in the specified `encoding`.\n         * If `encoding` is provided a\n         * string is returned; otherwise a `Buffer` is returned.\n         * @since v0.5.0\n         * @param encoding The `encoding` of the return value.\n         */\n        getPrivateKey(): Buffer;\n        getPrivateKey(encoding: BinaryToTextEncoding): string;\n        /**\n         * Sets the Diffie-Hellman public key. If the `encoding` argument is provided, `publicKey` is expected\n         * to be a string. If no `encoding` is provided, `publicKey` is expected\n         * to be a `Buffer`, `TypedArray`, or `DataView`.\n         * @since v0.5.0\n         * @param encoding The `encoding` of the `publicKey` string.\n         */\n        setPublicKey(publicKey: NodeJS.ArrayBufferView): void;\n        setPublicKey(publicKey: string, encoding: BufferEncoding): void;\n        /**\n         * Sets the Diffie-Hellman private key. If the `encoding` argument is provided,`privateKey` is expected\n         * to be a string. If no `encoding` is provided, `privateKey` is expected\n         * to be a `Buffer`, `TypedArray`, or `DataView`.\n         *\n         * This function does not automatically compute the associated public key. Either `diffieHellman.setPublicKey()` or `diffieHellman.generateKeys()` can be\n         * used to manually provide the public key or to automatically derive it.\n         * @since v0.5.0\n         * @param encoding The `encoding` of the `privateKey` string.\n         */\n        setPrivateKey(privateKey: NodeJS.ArrayBufferView): void;\n        setPrivateKey(privateKey: string, encoding: BufferEncoding): void;\n        /**\n         * A bit field containing any warnings and/or errors resulting from a check\n         * performed during initialization of the `DiffieHellman` object.\n         *\n         * The following values are valid for this property (as defined in `node:constants` module):\n         *\n         * * `DH_CHECK_P_NOT_SAFE_PRIME`\n         * * `DH_CHECK_P_NOT_PRIME`\n         * * `DH_UNABLE_TO_CHECK_GENERATOR`\n         * * `DH_NOT_SUITABLE_GENERATOR`\n         * @since v0.11.12\n         */\n        verifyError: number;\n    }\n    /**\n     * The `DiffieHellmanGroup` class takes a well-known modp group as its argument.\n     * It works the same as `DiffieHellman`, except that it does not allow changing its keys after creation.\n     * In other words, it does not implement `setPublicKey()` or `setPrivateKey()` methods.\n     *\n     * ```js\n     * const { createDiffieHellmanGroup } = await import('node:crypto');\n     * const dh = createDiffieHellmanGroup('modp1');\n     * ```\n     * The name (e.g. `'modp1'`) is taken from [RFC 2412](https://www.rfc-editor.org/rfc/rfc2412.txt) (modp1 and 2) and [RFC 3526](https://www.rfc-editor.org/rfc/rfc3526.txt):\n     * ```bash\n     * $ perl -ne 'print \"$1\\n\" if /\"(modp\\d+)\"/' src/node_crypto_groups.h\n     * modp1  #  768 bits\n     * modp2  # 1024 bits\n     * modp5  # 1536 bits\n     * modp14 # 2048 bits\n     * modp15 # etc.\n     * modp16\n     * modp17\n     * modp18\n     * ```\n     * @since v0.7.5\n     */\n    const DiffieHellmanGroup: DiffieHellmanGroupConstructor;\n    interface DiffieHellmanGroupConstructor {\n        new(name: string): DiffieHellmanGroup;\n        (name: string): DiffieHellmanGroup;\n        readonly prototype: DiffieHellmanGroup;\n    }\n    type DiffieHellmanGroup = Omit<DiffieHellman, \"setPublicKey\" | \"setPrivateKey\">;\n    /**\n     * Creates a predefined `DiffieHellmanGroup` key exchange object. The\n     * supported groups are listed in the documentation for `DiffieHellmanGroup`.\n     *\n     * The returned object mimics the interface of objects created by {@link createDiffieHellman}, but will not allow changing\n     * the keys (with `diffieHellman.setPublicKey()`, for example). The\n     * advantage of using this method is that the parties do not have to\n     * generate nor exchange a group modulus beforehand, saving both processor\n     * and communication time.\n     *\n     * Example (obtaining a shared secret):\n     *\n     * ```js\n     * const {\n     *   getDiffieHellman,\n     * } = await import('node:crypto');\n     * const alice = getDiffieHellman('modp14');\n     * const bob = getDiffieHellman('modp14');\n     *\n     * alice.generateKeys();\n     * bob.generateKeys();\n     *\n     * const aliceSecret = alice.computeSecret(bob.getPublicKey(), null, 'hex');\n     * const bobSecret = bob.computeSecret(alice.getPublicKey(), null, 'hex');\n     *\n     * // aliceSecret and bobSecret should be the same\n     * console.log(aliceSecret === bobSecret);\n     * ```\n     * @since v0.7.5\n     */\n    function getDiffieHellman(groupName: string): DiffieHellmanGroup;\n    /**\n     * An alias for {@link getDiffieHellman}\n     * @since v0.9.3\n     */\n    function createDiffieHellmanGroup(name: string): DiffieHellmanGroup;\n    /**\n     * Provides an asynchronous Password-Based Key Derivation Function 2 (PBKDF2)\n     * implementation. A selected HMAC digest algorithm specified by `digest` is\n     * applied to derive a key of the requested byte length (`keylen`) from the `password`, `salt` and `iterations`.\n     *\n     * The supplied `callback` function is called with two arguments: `err` and `derivedKey`. If an error occurs while deriving the key, `err` will be set;\n     * otherwise `err` will be `null`. By default, the successfully generated `derivedKey` will be passed to the callback as a `Buffer`. An error will be\n     * thrown if any of the input arguments specify invalid values or types.\n     *\n     * The `iterations` argument must be a number set as high as possible. The\n     * higher the number of iterations, the more secure the derived key will be,\n     * but will take a longer amount of time to complete.\n     *\n     * The `salt` should be as unique as possible. It is recommended that a salt is\n     * random and at least 16 bytes long. See [NIST SP 800-132](https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf) for details.\n     *\n     * When passing strings for `password` or `salt`, please consider `caveats when using strings as inputs to cryptographic APIs`.\n     *\n     * ```js\n     * const {\n     *   pbkdf2,\n     * } = await import('node:crypto');\n     *\n     * pbkdf2('secret', 'salt', 100000, 64, 'sha512', (err, derivedKey) => {\n     *   if (err) throw err;\n     *   console.log(derivedKey.toString('hex'));  // '3745e48...08d59ae'\n     * });\n     * ```\n     *\n     * An array of supported digest functions can be retrieved using {@link getHashes}.\n     *\n     * This API uses libuv's threadpool, which can have surprising and\n     * negative performance implications for some applications; see the `UV_THREADPOOL_SIZE` documentation for more information.\n     * @since v0.5.5\n     */\n    function pbkdf2(\n        password: BinaryLike,\n        salt: BinaryLike,\n        iterations: number,\n        keylen: number,\n        digest: string,\n        callback: (err: Error | null, derivedKey: Buffer) => void,\n    ): void;\n    /**\n     * Provides a synchronous Password-Based Key Derivation Function 2 (PBKDF2)\n     * implementation. A selected HMAC digest algorithm specified by `digest` is\n     * applied to derive a key of the requested byte length (`keylen`) from the `password`, `salt` and `iterations`.\n     *\n     * If an error occurs an `Error` will be thrown, otherwise the derived key will be\n     * returned as a `Buffer`.\n     *\n     * The `iterations` argument must be a number set as high as possible. The\n     * higher the number of iterations, the more secure the derived key will be,\n     * but will take a longer amount of time to complete.\n     *\n     * The `salt` should be as unique as possible. It is recommended that a salt is\n     * random and at least 16 bytes long. See [NIST SP 800-132](https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf) for details.\n     *\n     * When passing strings for `password` or `salt`, please consider `caveats when using strings as inputs to cryptographic APIs`.\n     *\n     * ```js\n     * const {\n     *   pbkdf2Sync,\n     * } = await import('node:crypto');\n     *\n     * const key = pbkdf2Sync('secret', 'salt', 100000, 64, 'sha512');\n     * console.log(key.toString('hex'));  // '3745e48...08d59ae'\n     * ```\n     *\n     * An array of supported digest functions can be retrieved using {@link getHashes}.\n     * @since v0.9.3\n     */\n    function pbkdf2Sync(\n        password: BinaryLike,\n        salt: BinaryLike,\n        iterations: number,\n        keylen: number,\n        digest: string,\n    ): Buffer;\n    /**\n     * Generates cryptographically strong pseudorandom data. The `size` argument\n     * is a number indicating the number of bytes to generate.\n     *\n     * If a `callback` function is provided, the bytes are generated asynchronously\n     * and the `callback` function is invoked with two arguments: `err` and `buf`.\n     * If an error occurs, `err` will be an `Error` object; otherwise it is `null`. The `buf` argument is a `Buffer` containing the generated bytes.\n     *\n     * ```js\n     * // Asynchronous\n     * const {\n     *   randomBytes,\n     * } = await import('node:crypto');\n     *\n     * randomBytes(256, (err, buf) => {\n     *   if (err) throw err;\n     *   console.log(`${buf.length} bytes of random data: ${buf.toString('hex')}`);\n     * });\n     * ```\n     *\n     * If the `callback` function is not provided, the random bytes are generated\n     * synchronously and returned as a `Buffer`. An error will be thrown if\n     * there is a problem generating the bytes.\n     *\n     * ```js\n     * // Synchronous\n     * const {\n     *   randomBytes,\n     * } = await import('node:crypto');\n     *\n     * const buf = randomBytes(256);\n     * console.log(\n     *   `${buf.length} bytes of random data: ${buf.toString('hex')}`);\n     * ```\n     *\n     * The `crypto.randomBytes()` method will not complete until there is\n     * sufficient entropy available.\n     * This should normally never take longer than a few milliseconds. The only time\n     * when generating the random bytes may conceivably block for a longer period of\n     * time is right after boot, when the whole system is still low on entropy.\n     *\n     * This API uses libuv's threadpool, which can have surprising and\n     * negative performance implications for some applications; see the `UV_THREADPOOL_SIZE` documentation for more information.\n     *\n     * The asynchronous version of `crypto.randomBytes()` is carried out in a single\n     * threadpool request. To minimize threadpool task length variation, partition\n     * large `randomBytes` requests when doing so as part of fulfilling a client\n     * request.\n     * @since v0.5.8\n     * @param size The number of bytes to generate. The `size` must not be larger than `2**31 - 1`.\n     * @return if the `callback` function is not provided.\n     */\n    function randomBytes(size: number): Buffer;\n    function randomBytes(size: number, callback: (err: Error | null, buf: Buffer) => void): void;\n    function pseudoRandomBytes(size: number): Buffer;\n    function pseudoRandomBytes(size: number, callback: (err: Error | null, buf: Buffer) => void): void;\n    /**\n     * Return a random integer `n` such that `min <= n < max`.  This\n     * implementation avoids [modulo bias](https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#Modulo_bias).\n     *\n     * The range (`max - min`) must be less than 2**48. `min` and `max` must\n     * be [safe integers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger).\n     *\n     * If the `callback` function is not provided, the random integer is\n     * generated synchronously.\n     *\n     * ```js\n     * // Asynchronous\n     * const {\n     *   randomInt,\n     * } = await import('node:crypto');\n     *\n     * randomInt(3, (err, n) => {\n     *   if (err) throw err;\n     *   console.log(`Random number chosen from (0, 1, 2): ${n}`);\n     * });\n     * ```\n     *\n     * ```js\n     * // Synchronous\n     * const {\n     *   randomInt,\n     * } = await import('node:crypto');\n     *\n     * const n = randomInt(3);\n     * console.log(`Random number chosen from (0, 1, 2): ${n}`);\n     * ```\n     *\n     * ```js\n     * // With `min` argument\n     * const {\n     *   randomInt,\n     * } = await import('node:crypto');\n     *\n     * const n = randomInt(1, 7);\n     * console.log(`The dice rolled: ${n}`);\n     * ```\n     * @since v14.10.0, v12.19.0\n     * @param [min=0] Start of random range (inclusive).\n     * @param max End of random range (exclusive).\n     * @param callback `function(err, n) {}`.\n     */\n    function randomInt(max: number): number;\n    function randomInt(min: number, max: number): number;\n    function randomInt(max: number, callback: (err: Error | null, value: number) => void): void;\n    function randomInt(min: number, max: number, callback: (err: Error | null, value: number) => void): void;\n    /**\n     * Synchronous version of {@link randomFill}.\n     *\n     * ```js\n     * import { Buffer } from 'node:buffer';\n     * const { randomFillSync } = await import('node:crypto');\n     *\n     * const buf = Buffer.alloc(10);\n     * console.log(randomFillSync(buf).toString('hex'));\n     *\n     * randomFillSync(buf, 5);\n     * console.log(buf.toString('hex'));\n     *\n     * // The above is equivalent to the following:\n     * randomFillSync(buf, 5, 5);\n     * console.log(buf.toString('hex'));\n     * ```\n     *\n     * Any `ArrayBuffer`, `TypedArray` or `DataView` instance may be passed as`buffer`.\n     *\n     * ```js\n     * import { Buffer } from 'node:buffer';\n     * const { randomFillSync } = await import('node:crypto');\n     *\n     * const a = new Uint32Array(10);\n     * console.log(Buffer.from(randomFillSync(a).buffer,\n     *                         a.byteOffset, a.byteLength).toString('hex'));\n     *\n     * const b = new DataView(new ArrayBuffer(10));\n     * console.log(Buffer.from(randomFillSync(b).buffer,\n     *                         b.byteOffset, b.byteLength).toString('hex'));\n     *\n     * const c = new ArrayBuffer(10);\n     * console.log(Buffer.from(randomFillSync(c)).toString('hex'));\n     * ```\n     * @since v7.10.0, v6.13.0\n     * @param buffer Must be supplied. The size of the provided `buffer` must not be larger than `2**31 - 1`.\n     * @param [offset=0]\n     * @param [size=buffer.length - offset]\n     * @return The object passed as `buffer` argument.\n     */\n    function randomFillSync<T extends NodeJS.ArrayBufferView>(buffer: T, offset?: number, size?: number): T;\n    /**\n     * This function is similar to {@link randomBytes} but requires the first\n     * argument to be a `Buffer` that will be filled. It also\n     * requires that a callback is passed in.\n     *\n     * If the `callback` function is not provided, an error will be thrown.\n     *\n     * ```js\n     * import { Buffer } from 'node:buffer';\n     * const { randomFill } = await import('node:crypto');\n     *\n     * const buf = Buffer.alloc(10);\n     * randomFill(buf, (err, buf) => {\n     *   if (err) throw err;\n     *   console.log(buf.toString('hex'));\n     * });\n     *\n     * randomFill(buf, 5, (err, buf) => {\n     *   if (err) throw err;\n     *   console.log(buf.toString('hex'));\n     * });\n     *\n     * // The above is equivalent to the following:\n     * randomFill(buf, 5, 5, (err, buf) => {\n     *   if (err) throw err;\n     *   console.log(buf.toString('hex'));\n     * });\n     * ```\n     *\n     * Any `ArrayBuffer`, `TypedArray`, or `DataView` instance may be passed as `buffer`.\n     *\n     * While this includes instances of `Float32Array` and `Float64Array`, this\n     * function should not be used to generate random floating-point numbers. The\n     * result may contain `+Infinity`, `-Infinity`, and `NaN`, and even if the array\n     * contains finite numbers only, they are not drawn from a uniform random\n     * distribution and have no meaningful lower or upper bounds.\n     *\n     * ```js\n     * import { Buffer } from 'node:buffer';\n     * const { randomFill } = await import('node:crypto');\n     *\n     * const a = new Uint32Array(10);\n     * randomFill(a, (err, buf) => {\n     *   if (err) throw err;\n     *   console.log(Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength)\n     *     .toString('hex'));\n     * });\n     *\n     * const b = new DataView(new ArrayBuffer(10));\n     * randomFill(b, (err, buf) => {\n     *   if (err) throw err;\n     *   console.log(Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength)\n     *     .toString('hex'));\n     * });\n     *\n     * const c = new ArrayBuffer(10);\n     * randomFill(c, (err, buf) => {\n     *   if (err) throw err;\n     *   console.log(Buffer.from(buf).toString('hex'));\n     * });\n     * ```\n     *\n     * This API uses libuv's threadpool, which can have surprising and\n     * negative performance implications for some applications; see the `UV_THREADPOOL_SIZE` documentation for more information.\n     *\n     * The asynchronous version of `crypto.randomFill()` is carried out in a single\n     * threadpool request. To minimize threadpool task length variation, partition\n     * large `randomFill` requests when doing so as part of fulfilling a client\n     * request.\n     * @since v7.10.0, v6.13.0\n     * @param buffer Must be supplied. The size of the provided `buffer` must not be larger than `2**31 - 1`.\n     * @param [offset=0]\n     * @param [size=buffer.length - offset]\n     * @param callback `function(err, buf) {}`.\n     */\n    function randomFill<T extends NodeJS.ArrayBufferView>(\n        buffer: T,\n        callback: (err: Error | null, buf: T) => void,\n    ): void;\n    function randomFill<T extends NodeJS.ArrayBufferView>(\n        buffer: T,\n        offset: number,\n        callback: (err: Error | null, buf: T) => void,\n    ): void;\n    function randomFill<T extends NodeJS.ArrayBufferView>(\n        buffer: T,\n        offset: number,\n        size: number,\n        callback: (err: Error | null, buf: T) => void,\n    ): void;\n    interface ScryptOptions {\n        cost?: number | undefined;\n        blockSize?: number | undefined;\n        parallelization?: number | undefined;\n        N?: number | undefined;\n        r?: number | undefined;\n        p?: number | undefined;\n        maxmem?: number | undefined;\n    }\n    /**\n     * Provides an asynchronous [scrypt](https://en.wikipedia.org/wiki/Scrypt) implementation. Scrypt is a password-based\n     * key derivation function that is designed to be expensive computationally and\n     * memory-wise in order to make brute-force attacks unrewarding.\n     *\n     * The `salt` should be as unique as possible. It is recommended that a salt is\n     * random and at least 16 bytes long. See [NIST SP 800-132](https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf) for details.\n     *\n     * When passing strings for `password` or `salt`, please consider `caveats when using strings as inputs to cryptographic APIs`.\n     *\n     * The `callback` function is called with two arguments: `err` and `derivedKey`. `err` is an exception object when key derivation fails, otherwise `err` is `null`. `derivedKey` is passed to the\n     * callback as a `Buffer`.\n     *\n     * An exception is thrown when any of the input arguments specify invalid values\n     * or types.\n     *\n     * ```js\n     * const {\n     *   scrypt,\n     * } = await import('node:crypto');\n     *\n     * // Using the factory defaults.\n     * scrypt('password', 'salt', 64, (err, derivedKey) => {\n     *   if (err) throw err;\n     *   console.log(derivedKey.toString('hex'));  // '3745e48...08d59ae'\n     * });\n     * // Using a custom N parameter. Must be a power of two.\n     * scrypt('password', 'salt', 64, { N: 1024 }, (err, derivedKey) => {\n     *   if (err) throw err;\n     *   console.log(derivedKey.toString('hex'));  // '3745e48...aa39b34'\n     * });\n     * ```\n     * @since v10.5.0\n     */\n    function scrypt(\n        password: BinaryLike,\n        salt: BinaryLike,\n        keylen: number,\n        callback: (err: Error | null, derivedKey: Buffer) => void,\n    ): void;\n    function scrypt(\n        password: BinaryLike,\n        salt: BinaryLike,\n        keylen: number,\n        options: ScryptOptions,\n        callback: (err: Error | null, derivedKey: Buffer) => void,\n    ): void;\n    /**\n     * Provides a synchronous [scrypt](https://en.wikipedia.org/wiki/Scrypt) implementation. Scrypt is a password-based\n     * key derivation function that is designed to be expensive computationally and\n     * memory-wise in order to make brute-force attacks unrewarding.\n     *\n     * The `salt` should be as unique as possible. It is recommended that a salt is\n     * random and at least 16 bytes long. See [NIST SP 800-132](https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf) for details.\n     *\n     * When passing strings for `password` or `salt`, please consider `caveats when using strings as inputs to cryptographic APIs`.\n     *\n     * An exception is thrown when key derivation fails, otherwise the derived key is\n     * returned as a `Buffer`.\n     *\n     * An exception is thrown when any of the input arguments specify invalid values\n     * or types.\n     *\n     * ```js\n     * const {\n     *   scryptSync,\n     * } = await import('node:crypto');\n     * // Using the factory defaults.\n     *\n     * const key1 = scryptSync('password', 'salt', 64);\n     * console.log(key1.toString('hex'));  // '3745e48...08d59ae'\n     * // Using a custom N parameter. Must be a power of two.\n     * const key2 = scryptSync('password', 'salt', 64, { N: 1024 });\n     * console.log(key2.toString('hex'));  // '3745e48...aa39b34'\n     * ```\n     * @since v10.5.0\n     */\n    function scryptSync(password: BinaryLike, salt: BinaryLike, keylen: number, options?: ScryptOptions): Buffer;\n    interface RsaPublicKey {\n        key: KeyLike;\n        padding?: number | undefined;\n    }\n    interface RsaPrivateKey {\n        key: KeyLike;\n        passphrase?: string | undefined;\n        /**\n         * @default 'sha1'\n         */\n        oaepHash?: string | undefined;\n        oaepLabel?: NodeJS.TypedArray | undefined;\n        padding?: number | undefined;\n    }\n    /**\n     * Encrypts the content of `buffer` with `key` and returns a new `Buffer` with encrypted content. The returned data can be decrypted using\n     * the corresponding private key, for example using {@link privateDecrypt}.\n     *\n     * If `key` is not a `KeyObject`, this function behaves as if `key` had been passed to {@link createPublicKey}. If it is an\n     * object, the `padding` property can be passed. Otherwise, this function uses `RSA_PKCS1_OAEP_PADDING`.\n     *\n     * Because RSA public keys can be derived from private keys, a private key may\n     * be passed instead of a public key.\n     * @since v0.11.14\n     */\n    function publicEncrypt(\n        key: RsaPublicKey | RsaPrivateKey | KeyLike,\n        buffer: NodeJS.ArrayBufferView | string,\n    ): Buffer;\n    /**\n     * Decrypts `buffer` with `key`.`buffer` was previously encrypted using\n     * the corresponding private key, for example using {@link privateEncrypt}.\n     *\n     * If `key` is not a `KeyObject`, this function behaves as if `key` had been passed to {@link createPublicKey}. If it is an\n     * object, the `padding` property can be passed. Otherwise, this function uses `RSA_PKCS1_PADDING`.\n     *\n     * Because RSA public keys can be derived from private keys, a private key may\n     * be passed instead of a public key.\n     * @since v1.1.0\n     */\n    function publicDecrypt(\n        key: RsaPublicKey | RsaPrivateKey | KeyLike,\n        buffer: NodeJS.ArrayBufferView | string,\n    ): Buffer;\n    /**\n     * Decrypts `buffer` with `privateKey`. `buffer` was previously encrypted using\n     * the corresponding public key, for example using {@link publicEncrypt}.\n     *\n     * If `privateKey` is not a `KeyObject`, this function behaves as if `privateKey` had been passed to {@link createPrivateKey}. If it is an\n     * object, the `padding` property can be passed. Otherwise, this function uses `RSA_PKCS1_OAEP_PADDING`.\n     * @since v0.11.14\n     */\n    function privateDecrypt(privateKey: RsaPrivateKey | KeyLike, buffer: NodeJS.ArrayBufferView | string): Buffer;\n    /**\n     * Encrypts `buffer` with `privateKey`. The returned data can be decrypted using\n     * the corresponding public key, for example using {@link publicDecrypt}.\n     *\n     * If `privateKey` is not a `KeyObject`, this function behaves as if `privateKey` had been passed to {@link createPrivateKey}. If it is an\n     * object, the `padding` property can be passed. Otherwise, this function uses `RSA_PKCS1_PADDING`.\n     * @since v1.1.0\n     */\n    function privateEncrypt(privateKey: RsaPrivateKey | KeyLike, buffer: NodeJS.ArrayBufferView | string): Buffer;\n    /**\n     * ```js\n     * const {\n     *   getCiphers,\n     * } = await import('node:crypto');\n     *\n     * console.log(getCiphers()); // ['aes-128-cbc', 'aes-128-ccm', ...]\n     * ```\n     * @since v0.9.3\n     * @return An array with the names of the supported cipher algorithms.\n     */\n    function getCiphers(): string[];\n    /**\n     * ```js\n     * const {\n     *   getCurves,\n     * } = await import('node:crypto');\n     *\n     * console.log(getCurves()); // ['Oakley-EC2N-3', 'Oakley-EC2N-4', ...]\n     * ```\n     * @since v2.3.0\n     * @return An array with the names of the supported elliptic curves.\n     */\n    function getCurves(): string[];\n    /**\n     * @since v10.0.0\n     * @return `1` if and only if a FIPS compliant crypto provider is currently in use, `0` otherwise. A future semver-major release may change the return type of this API to a {boolean}.\n     */\n    function getFips(): 1 | 0;\n    /**\n     * Enables the FIPS compliant crypto provider in a FIPS-enabled Node.js build.\n     * Throws an error if FIPS mode is not available.\n     * @since v10.0.0\n     * @param bool `true` to enable FIPS mode.\n     */\n    function setFips(bool: boolean): void;\n    /**\n     * ```js\n     * const {\n     *   getHashes,\n     * } = await import('node:crypto');\n     *\n     * console.log(getHashes()); // ['DSA', 'DSA-SHA', 'DSA-SHA1', ...]\n     * ```\n     * @since v0.9.3\n     * @return An array of the names of the supported hash algorithms, such as `'RSA-SHA256'`. Hash algorithms are also called \"digest\" algorithms.\n     */\n    function getHashes(): string[];\n    /**\n     * The `ECDH` class is a utility for creating Elliptic Curve Diffie-Hellman (ECDH)\n     * key exchanges.\n     *\n     * Instances of the `ECDH` class can be created using the {@link createECDH} function.\n     *\n     * ```js\n     * import assert from 'node:assert';\n     *\n     * const {\n     *   createECDH,\n     * } = await import('node:crypto');\n     *\n     * // Generate Alice's keys...\n     * const alice = createECDH('secp521r1');\n     * const aliceKey = alice.generateKeys();\n     *\n     * // Generate Bob's keys...\n     * const bob = createECDH('secp521r1');\n     * const bobKey = bob.generateKeys();\n     *\n     * // Exchange and generate the secret...\n     * const aliceSecret = alice.computeSecret(bobKey);\n     * const bobSecret = bob.computeSecret(aliceKey);\n     *\n     * assert.strictEqual(aliceSecret.toString('hex'), bobSecret.toString('hex'));\n     * // OK\n     * ```\n     * @since v0.11.14\n     */\n    class ECDH {\n        private constructor();\n        /**\n         * Converts the EC Diffie-Hellman public key specified by `key` and `curve` to the\n         * format specified by `format`. The `format` argument specifies point encoding\n         * and can be `'compressed'`, `'uncompressed'` or `'hybrid'`. The supplied key is\n         * interpreted using the specified `inputEncoding`, and the returned key is encoded\n         * using the specified `outputEncoding`.\n         *\n         * Use {@link getCurves} to obtain a list of available curve names.\n         * On recent OpenSSL releases, `openssl ecparam -list_curves` will also display\n         * the name and description of each available elliptic curve.\n         *\n         * If `format` is not specified the point will be returned in `'uncompressed'` format.\n         *\n         * If the `inputEncoding` is not provided, `key` is expected to be a `Buffer`, `TypedArray`, or `DataView`.\n         *\n         * Example (uncompressing a key):\n         *\n         * ```js\n         * const {\n         *   createECDH,\n         *   ECDH,\n         * } = await import('node:crypto');\n         *\n         * const ecdh = createECDH('secp256k1');\n         * ecdh.generateKeys();\n         *\n         * const compressedKey = ecdh.getPublicKey('hex', 'compressed');\n         *\n         * const uncompressedKey = ECDH.convertKey(compressedKey,\n         *                                         'secp256k1',\n         *                                         'hex',\n         *                                         'hex',\n         *                                         'uncompressed');\n         *\n         * // The converted key and the uncompressed public key should be the same\n         * console.log(uncompressedKey === ecdh.getPublicKey('hex'));\n         * ```\n         * @since v10.0.0\n         * @param inputEncoding The `encoding` of the `key` string.\n         * @param outputEncoding The `encoding` of the return value.\n         * @param [format='uncompressed']\n         */\n        static convertKey(\n            key: BinaryLike,\n            curve: string,\n            inputEncoding?: BinaryToTextEncoding,\n            outputEncoding?: \"latin1\" | \"hex\" | \"base64\" | \"base64url\",\n            format?: \"uncompressed\" | \"compressed\" | \"hybrid\",\n        ): Buffer | string;\n        /**\n         * Generates private and public EC Diffie-Hellman key values, and returns\n         * the public key in the specified `format` and `encoding`. This key should be\n         * transferred to the other party.\n         *\n         * The `format` argument specifies point encoding and can be `'compressed'` or `'uncompressed'`. If `format` is not specified, the point will be returned in`'uncompressed'` format.\n         *\n         * If `encoding` is provided a string is returned; otherwise a `Buffer` is returned.\n         * @since v0.11.14\n         * @param encoding The `encoding` of the return value.\n         * @param [format='uncompressed']\n         */\n        generateKeys(): Buffer;\n        generateKeys(encoding: BinaryToTextEncoding, format?: ECDHKeyFormat): string;\n        /**\n         * Computes the shared secret using `otherPublicKey` as the other\n         * party's public key and returns the computed shared secret. The supplied\n         * key is interpreted using specified `inputEncoding`, and the returned secret\n         * is encoded using the specified `outputEncoding`.\n         * If the `inputEncoding` is not\n         * provided, `otherPublicKey` is expected to be a `Buffer`, `TypedArray`, or `DataView`.\n         *\n         * If `outputEncoding` is given a string will be returned; otherwise a `Buffer` is returned.\n         *\n         * `ecdh.computeSecret` will throw an`ERR_CRYPTO_ECDH_INVALID_PUBLIC_KEY` error when `otherPublicKey` lies outside of the elliptic curve. Since `otherPublicKey` is\n         * usually supplied from a remote user over an insecure network,\n         * be sure to handle this exception accordingly.\n         * @since v0.11.14\n         * @param inputEncoding The `encoding` of the `otherPublicKey` string.\n         * @param outputEncoding The `encoding` of the return value.\n         */\n        computeSecret(otherPublicKey: NodeJS.ArrayBufferView): Buffer;\n        computeSecret(otherPublicKey: string, inputEncoding: BinaryToTextEncoding): Buffer;\n        computeSecret(otherPublicKey: NodeJS.ArrayBufferView, outputEncoding: BinaryToTextEncoding): string;\n        computeSecret(\n            otherPublicKey: string,\n            inputEncoding: BinaryToTextEncoding,\n            outputEncoding: BinaryToTextEncoding,\n        ): string;\n        /**\n         * If `encoding` is specified, a string is returned; otherwise a `Buffer` is\n         * returned.\n         * @since v0.11.14\n         * @param encoding The `encoding` of the return value.\n         * @return The EC Diffie-Hellman in the specified `encoding`.\n         */\n        getPrivateKey(): Buffer;\n        getPrivateKey(encoding: BinaryToTextEncoding): string;\n        /**\n         * The `format` argument specifies point encoding and can be `'compressed'` or `'uncompressed'`. If `format` is not specified the point will be returned in`'uncompressed'` format.\n         *\n         * If `encoding` is specified, a string is returned; otherwise a `Buffer` is\n         * returned.\n         * @since v0.11.14\n         * @param encoding The `encoding` of the return value.\n         * @param [format='uncompressed']\n         * @return The EC Diffie-Hellman public key in the specified `encoding` and `format`.\n         */\n        getPublicKey(encoding?: null, format?: ECDHKeyFormat): Buffer;\n        getPublicKey(encoding: BinaryToTextEncoding, format?: ECDHKeyFormat): string;\n        /**\n         * Sets the EC Diffie-Hellman private key.\n         * If `encoding` is provided, `privateKey` is expected\n         * to be a string; otherwise `privateKey` is expected to be a `Buffer`, `TypedArray`, or `DataView`.\n         *\n         * If `privateKey` is not valid for the curve specified when the `ECDH` object was\n         * created, an error is thrown. Upon setting the private key, the associated\n         * public point (key) is also generated and set in the `ECDH` object.\n         * @since v0.11.14\n         * @param encoding The `encoding` of the `privateKey` string.\n         */\n        setPrivateKey(privateKey: NodeJS.ArrayBufferView): void;\n        setPrivateKey(privateKey: string, encoding: BinaryToTextEncoding): void;\n    }\n    /**\n     * Creates an Elliptic Curve Diffie-Hellman (`ECDH`) key exchange object using a\n     * predefined curve specified by the `curveName` string. Use {@link getCurves} to obtain a list of available curve names. On recent\n     * OpenSSL releases, `openssl ecparam -list_curves` will also display the name\n     * and description of each available elliptic curve.\n     * @since v0.11.14\n     */\n    function createECDH(curveName: string): ECDH;\n    /**\n     * This function compares the underlying bytes that represent the given `ArrayBuffer`, `TypedArray`, or `DataView` instances using a constant-time\n     * algorithm.\n     *\n     * This function does not leak timing information that\n     * would allow an attacker to guess one of the values. This is suitable for\n     * comparing HMAC digests or secret values like authentication cookies or [capability urls](https://www.w3.org/TR/capability-urls/).\n     *\n     * `a` and `b` must both be `Buffer`s, `TypedArray`s, or `DataView`s, and they\n     * must have the same byte length. An error is thrown if `a` and `b` have\n     * different byte lengths.\n     *\n     * If at least one of `a` and `b` is a `TypedArray` with more than one byte per\n     * entry, such as `Uint16Array`, the result will be computed using the platform\n     * byte order.\n     *\n     * **When both of the inputs are `Float32Array`s or `Float64Array`s, this function might return unexpected results due to IEEE 754**\n     * **encoding of floating-point numbers. In particular, neither `x === y` nor `Object.is(x, y)` implies that the byte representations of two floating-point**\n     * **numbers `x` and `y` are equal.**\n     *\n     * Use of `crypto.timingSafeEqual` does not guarantee that the _surrounding_ code\n     * is timing-safe. Care should be taken to ensure that the surrounding code does\n     * not introduce timing vulnerabilities.\n     * @since v6.6.0\n     */\n    function timingSafeEqual(a: NodeJS.ArrayBufferView, b: NodeJS.ArrayBufferView): boolean;\n    type KeyType = \"rsa\" | \"rsa-pss\" | \"dsa\" | \"ec\" | \"ed25519\" | \"ed448\" | \"x25519\" | \"x448\";\n    type KeyFormat = \"pem\" | \"der\" | \"jwk\";\n    interface BasePrivateKeyEncodingOptions<T extends KeyFormat> {\n        format: T;\n        cipher?: string | undefined;\n        passphrase?: string | undefined;\n    }\n    interface KeyPairKeyObjectResult {\n        publicKey: KeyObject;\n        privateKey: KeyObject;\n    }\n    interface ED25519KeyPairKeyObjectOptions {}\n    interface ED448KeyPairKeyObjectOptions {}\n    interface X25519KeyPairKeyObjectOptions {}\n    interface X448KeyPairKeyObjectOptions {}\n    interface ECKeyPairKeyObjectOptions {\n        /**\n         * Name of the curve to use\n         */\n        namedCurve: string;\n        /**\n         * Must be `'named'` or `'explicit'`. Default: `'named'`.\n         */\n        paramEncoding?: \"explicit\" | \"named\" | undefined;\n    }\n    interface RSAKeyPairKeyObjectOptions {\n        /**\n         * Key size in bits\n         */\n        modulusLength: number;\n        /**\n         * Public exponent\n         * @default 0x10001\n         */\n        publicExponent?: number | undefined;\n    }\n    interface RSAPSSKeyPairKeyObjectOptions {\n        /**\n         * Key size in bits\n         */\n        modulusLength: number;\n        /**\n         * Public exponent\n         * @default 0x10001\n         */\n        publicExponent?: number | undefined;\n        /**\n         * Name of the message digest\n         */\n        hashAlgorithm?: string;\n        /**\n         * Name of the message digest used by MGF1\n         */\n        mgf1HashAlgorithm?: string;\n        /**\n         * Minimal salt length in bytes\n         */\n        saltLength?: string;\n    }\n    interface DSAKeyPairKeyObjectOptions {\n        /**\n         * Key size in bits\n         */\n        modulusLength: number;\n        /**\n         * Size of q in bits\n         */\n        divisorLength: number;\n    }\n    interface RSAKeyPairOptions<PubF extends KeyFormat, PrivF extends KeyFormat> {\n        /**\n         * Key size in bits\n         */\n        modulusLength: number;\n        /**\n         * Public exponent\n         * @default 0x10001\n         */\n        publicExponent?: number | undefined;\n        publicKeyEncoding: {\n            type: \"pkcs1\" | \"spki\";\n            format: PubF;\n        };\n        privateKeyEncoding: BasePrivateKeyEncodingOptions<PrivF> & {\n            type: \"pkcs1\" | \"pkcs8\";\n        };\n    }\n    interface RSAPSSKeyPairOptions<PubF extends KeyFormat, PrivF extends KeyFormat> {\n        /**\n         * Key size in bits\n         */\n        modulusLength: number;\n        /**\n         * Public exponent\n         * @default 0x10001\n         */\n        publicExponent?: number | undefined;\n        /**\n         * Name of the message digest\n         */\n        hashAlgorithm?: string;\n        /**\n         * Name of the message digest used by MGF1\n         */\n        mgf1HashAlgorithm?: string;\n        /**\n         * Minimal salt length in bytes\n         */\n        saltLength?: string;\n        publicKeyEncoding: {\n            type: \"spki\";\n            format: PubF;\n        };\n        privateKeyEncoding: BasePrivateKeyEncodingOptions<PrivF> & {\n            type: \"pkcs8\";\n        };\n    }\n    interface DSAKeyPairOptions<PubF extends KeyFormat, PrivF extends KeyFormat> {\n        /**\n         * Key size in bits\n         */\n        modulusLength: number;\n        /**\n         * Size of q in bits\n         */\n        divisorLength: number;\n        publicKeyEncoding: {\n            type: \"spki\";\n            format: PubF;\n        };\n        privateKeyEncoding: BasePrivateKeyEncodingOptions<PrivF> & {\n            type: \"pkcs8\";\n        };\n    }\n    interface ECKeyPairOptions<PubF extends KeyFormat, PrivF extends KeyFormat> extends ECKeyPairKeyObjectOptions {\n        publicKeyEncoding: {\n            type: \"pkcs1\" | \"spki\";\n            format: PubF;\n        };\n        privateKeyEncoding: BasePrivateKeyEncodingOptions<PrivF> & {\n            type: \"sec1\" | \"pkcs8\";\n        };\n    }\n    interface ED25519KeyPairOptions<PubF extends KeyFormat, PrivF extends KeyFormat> {\n        publicKeyEncoding: {\n            type: \"spki\";\n            format: PubF;\n        };\n        privateKeyEncoding: BasePrivateKeyEncodingOptions<PrivF> & {\n            type: \"pkcs8\";\n        };\n    }\n    interface ED448KeyPairOptions<PubF extends KeyFormat, PrivF extends KeyFormat> {\n        publicKeyEncoding: {\n            type: \"spki\";\n            format: PubF;\n        };\n        privateKeyEncoding: BasePrivateKeyEncodingOptions<PrivF> & {\n            type: \"pkcs8\";\n        };\n    }\n    interface X25519KeyPairOptions<PubF extends KeyFormat, PrivF extends KeyFormat> {\n        publicKeyEncoding: {\n            type: \"spki\";\n            format: PubF;\n        };\n        privateKeyEncoding: BasePrivateKeyEncodingOptions<PrivF> & {\n            type: \"pkcs8\";\n        };\n    }\n    interface X448KeyPairOptions<PubF extends KeyFormat, PrivF extends KeyFormat> {\n        publicKeyEncoding: {\n            type: \"spki\";\n            format: PubF;\n        };\n        privateKeyEncoding: BasePrivateKeyEncodingOptions<PrivF> & {\n            type: \"pkcs8\";\n        };\n    }\n    interface KeyPairSyncResult<T1 extends string | Buffer, T2 extends string | Buffer> {\n        publicKey: T1;\n        privateKey: T2;\n    }\n    /**\n     * Generates a new asymmetric key pair of the given `type`. RSA, RSA-PSS, DSA, EC,\n     * Ed25519, Ed448, X25519, X448, and DH are currently supported.\n     *\n     * If a `publicKeyEncoding` or `privateKeyEncoding` was specified, this function\n     * behaves as if `keyObject.export()` had been called on its result. Otherwise,\n     * the respective part of the key is returned as a `KeyObject`.\n     *\n     * When encoding public keys, it is recommended to use `'spki'`. When encoding\n     * private keys, it is recommended to use `'pkcs8'` with a strong passphrase,\n     * and to keep the passphrase confidential.\n     *\n     * ```js\n     * const {\n     *   generateKeyPairSync,\n     * } = await import('node:crypto');\n     *\n     * const {\n     *   publicKey,\n     *   privateKey,\n     * } = generateKeyPairSync('rsa', {\n     *   modulusLength: 4096,\n     *   publicKeyEncoding: {\n     *     type: 'spki',\n     *     format: 'pem',\n     *   },\n     *   privateKeyEncoding: {\n     *     type: 'pkcs8',\n     *     format: 'pem',\n     *     cipher: 'aes-256-cbc',\n     *     passphrase: 'top secret',\n     *   },\n     * });\n     * ```\n     *\n     * The return value `{ publicKey, privateKey }` represents the generated key pair.\n     * When PEM encoding was selected, the respective key will be a string, otherwise\n     * it will be a buffer containing the data encoded as DER.\n     * @since v10.12.0\n     * @param type Must be `'rsa'`, `'rsa-pss'`, `'dsa'`, `'ec'`, `'ed25519'`, `'ed448'`, `'x25519'`, `'x448'`, or `'dh'`.\n     */\n    function generateKeyPairSync(\n        type: \"rsa\",\n        options: RSAKeyPairOptions<\"pem\", \"pem\">,\n    ): KeyPairSyncResult<string, string>;\n    function generateKeyPairSync(\n        type: \"rsa\",\n        options: RSAKeyPairOptions<\"pem\", \"der\">,\n    ): KeyPairSyncResult<string, Buffer>;\n    function generateKeyPairSync(\n        type: \"rsa\",\n        options: RSAKeyPairOptions<\"der\", \"pem\">,\n    ): KeyPairSyncResult<Buffer, string>;\n    function generateKeyPairSync(\n        type: \"rsa\",\n        options: RSAKeyPairOptions<\"der\", \"der\">,\n    ): KeyPairSyncResult<Buffer, Buffer>;\n    function generateKeyPairSync(type: \"rsa\", options: RSAKeyPairKeyObjectOptions): KeyPairKeyObjectResult;\n    function generateKeyPairSync(\n        type: \"rsa-pss\",\n        options: RSAPSSKeyPairOptions<\"pem\", \"pem\">,\n    ): KeyPairSyncResult<string, string>;\n    function generateKeyPairSync(\n        type: \"rsa-pss\",\n        options: RSAPSSKeyPairOptions<\"pem\", \"der\">,\n    ): KeyPairSyncResult<string, Buffer>;\n    function generateKeyPairSync(\n        type: \"rsa-pss\",\n        options: RSAPSSKeyPairOptions<\"der\", \"pem\">,\n    ): KeyPairSyncResult<Buffer, string>;\n    function generateKeyPairSync(\n        type: \"rsa-pss\",\n        options: RSAPSSKeyPairOptions<\"der\", \"der\">,\n    ): KeyPairSyncResult<Buffer, Buffer>;\n    function generateKeyPairSync(type: \"rsa-pss\", options: RSAPSSKeyPairKeyObjectOptions): KeyPairKeyObjectResult;\n    function generateKeyPairSync(\n        type: \"dsa\",\n        options: DSAKeyPairOptions<\"pem\", \"pem\">,\n    ): KeyPairSyncResult<string, string>;\n    function generateKeyPairSync(\n        type: \"dsa\",\n        options: DSAKeyPairOptions<\"pem\", \"der\">,\n    ): KeyPairSyncResult<string, Buffer>;\n    function generateKeyPairSync(\n        type: \"dsa\",\n        options: DSAKeyPairOptions<\"der\", \"pem\">,\n    ): KeyPairSyncResult<Buffer, string>;\n    function generateKeyPairSync(\n        type: \"dsa\",\n        options: DSAKeyPairOptions<\"der\", \"der\">,\n    ): KeyPairSyncResult<Buffer, Buffer>;\n    function generateKeyPairSync(type: \"dsa\", options: DSAKeyPairKeyObjectOptions): KeyPairKeyObjectResult;\n    function generateKeyPairSync(\n        type: \"ec\",\n        options: ECKeyPairOptions<\"pem\", \"pem\">,\n    ): KeyPairSyncResult<string, string>;\n    function generateKeyPairSync(\n        type: \"ec\",\n        options: ECKeyPairOptions<\"pem\", \"der\">,\n    ): KeyPairSyncResult<string, Buffer>;\n    function generateKeyPairSync(\n        type: \"ec\",\n        options: ECKeyPairOptions<\"der\", \"pem\">,\n    ): KeyPairSyncResult<Buffer, string>;\n    function generateKeyPairSync(\n        type: \"ec\",\n        options: ECKeyPairOptions<\"der\", \"der\">,\n    ): KeyPairSyncResult<Buffer, Buffer>;\n    function generateKeyPairSync(type: \"ec\", options: ECKeyPairKeyObjectOptions): KeyPairKeyObjectResult;\n    function generateKeyPairSync(\n        type: \"ed25519\",\n        options: ED25519KeyPairOptions<\"pem\", \"pem\">,\n    ): KeyPairSyncResult<string, string>;\n    function generateKeyPairSync(\n        type: \"ed25519\",\n        options: ED25519KeyPairOptions<\"pem\", \"der\">,\n    ): KeyPairSyncResult<string, Buffer>;\n    function generateKeyPairSync(\n        type: \"ed25519\",\n        options: ED25519KeyPairOptions<\"der\", \"pem\">,\n    ): KeyPairSyncResult<Buffer, string>;\n    function generateKeyPairSync(\n        type: \"ed25519\",\n        options: ED25519KeyPairOptions<\"der\", \"der\">,\n    ): KeyPairSyncResult<Buffer, Buffer>;\n    function generateKeyPairSync(type: \"ed25519\", options?: ED25519KeyPairKeyObjectOptions): KeyPairKeyObjectResult;\n    function generateKeyPairSync(\n        type: \"ed448\",\n        options: ED448KeyPairOptions<\"pem\", \"pem\">,\n    ): KeyPairSyncResult<string, string>;\n    function generateKeyPairSync(\n        type: \"ed448\",\n        options: ED448KeyPairOptions<\"pem\", \"der\">,\n    ): KeyPairSyncResult<string, Buffer>;\n    function generateKeyPairSync(\n        type: \"ed448\",\n        options: ED448KeyPairOptions<\"der\", \"pem\">,\n    ): KeyPairSyncResult<Buffer, string>;\n    function generateKeyPairSync(\n        type: \"ed448\",\n        options: ED448KeyPairOptions<\"der\", \"der\">,\n    ): KeyPairSyncResult<Buffer, Buffer>;\n    function generateKeyPairSync(type: \"ed448\", options?: ED448KeyPairKeyObjectOptions): KeyPairKeyObjectResult;\n    function generateKeyPairSync(\n        type: \"x25519\",\n        options: X25519KeyPairOptions<\"pem\", \"pem\">,\n    ): KeyPairSyncResult<string, string>;\n    function generateKeyPairSync(\n        type: \"x25519\",\n        options: X25519KeyPairOptions<\"pem\", \"der\">,\n    ): KeyPairSyncResult<string, Buffer>;\n    function generateKeyPairSync(\n        type: \"x25519\",\n        options: X25519KeyPairOptions<\"der\", \"pem\">,\n    ): KeyPairSyncResult<Buffer, string>;\n    function generateKeyPairSync(\n        type: \"x25519\",\n        options: X25519KeyPairOptions<\"der\", \"der\">,\n    ): KeyPairSyncResult<Buffer, Buffer>;\n    function generateKeyPairSync(type: \"x25519\", options?: X25519KeyPairKeyObjectOptions): KeyPairKeyObjectResult;\n    function generateKeyPairSync(\n        type: \"x448\",\n        options: X448KeyPairOptions<\"pem\", \"pem\">,\n    ): KeyPairSyncResult<string, string>;\n    function generateKeyPairSync(\n        type: \"x448\",\n        options: X448KeyPairOptions<\"pem\", \"der\">,\n    ): KeyPairSyncResult<string, Buffer>;\n    function generateKeyPairSync(\n        type: \"x448\",\n        options: X448KeyPairOptions<\"der\", \"pem\">,\n    ): KeyPairSyncResult<Buffer, string>;\n    function generateKeyPairSync(\n        type: \"x448\",\n        options: X448KeyPairOptions<\"der\", \"der\">,\n    ): KeyPairSyncResult<Buffer, Buffer>;\n    function generateKeyPairSync(type: \"x448\", options?: X448KeyPairKeyObjectOptions): KeyPairKeyObjectResult;\n    /**\n     * Generates a new asymmetric key pair of the given `type`. RSA, RSA-PSS, DSA, EC,\n     * Ed25519, Ed448, X25519, X448, and DH are currently supported.\n     *\n     * If a `publicKeyEncoding` or `privateKeyEncoding` was specified, this function\n     * behaves as if `keyObject.export()` had been called on its result. Otherwise,\n     * the respective part of the key is returned as a `KeyObject`.\n     *\n     * It is recommended to encode public keys as `'spki'` and private keys as `'pkcs8'` with encryption for long-term storage:\n     *\n     * ```js\n     * const {\n     *   generateKeyPair,\n     * } = await import('node:crypto');\n     *\n     * generateKeyPair('rsa', {\n     *   modulusLength: 4096,\n     *   publicKeyEncoding: {\n     *     type: 'spki',\n     *     format: 'pem',\n     *   },\n     *   privateKeyEncoding: {\n     *     type: 'pkcs8',\n     *     format: 'pem',\n     *     cipher: 'aes-256-cbc',\n     *     passphrase: 'top secret',\n     *   },\n     * }, (err, publicKey, privateKey) => {\n     *   // Handle errors and use the generated key pair.\n     * });\n     * ```\n     *\n     * On completion, `callback` will be called with `err` set to `undefined` and `publicKey` / `privateKey` representing the generated key pair.\n     *\n     * If this method is invoked as its `util.promisify()` ed version, it returns\n     * a `Promise` for an `Object` with `publicKey` and `privateKey` properties.\n     * @since v10.12.0\n     * @param type Must be `'rsa'`, `'rsa-pss'`, `'dsa'`, `'ec'`, `'ed25519'`, `'ed448'`, `'x25519'`, `'x448'`, or `'dh'`.\n     */\n    function generateKeyPair(\n        type: \"rsa\",\n        options: RSAKeyPairOptions<\"pem\", \"pem\">,\n        callback: (err: Error | null, publicKey: string, privateKey: string) => void,\n    ): void;\n    function generateKeyPair(\n        type: \"rsa\",\n        options: RSAKeyPairOptions<\"pem\", \"der\">,\n        callback: (err: Error | null, publicKey: string, privateKey: Buffer) => void,\n    ): void;\n    function generateKeyPair(\n        type: \"rsa\",\n        options: RSAKeyPairOptions<\"der\", \"pem\">,\n        callback: (err: Error | null, publicKey: Buffer, privateKey: string) => void,\n    ): void;\n    function generateKeyPair(\n        type: \"rsa\",\n        options: RSAKeyPairOptions<\"der\", \"der\">,\n        callback: (err: Error | null, publicKey: Buffer, privateKey: Buffer) => void,\n    ): void;\n    function generateKeyPair(\n        type: \"rsa\",\n        options: RSAKeyPairKeyObjectOptions,\n        callback: (err: Error | null, publicKey: KeyObject, privateKey: KeyObject) => void,\n    ): void;\n    function generateKeyPair(\n        type: \"rsa-pss\",\n        options: RSAPSSKeyPairOptions<\"pem\", \"pem\">,\n        callback: (err: Error | null, publicKey: string, privateKey: string) => void,\n    ): void;\n    function generateKeyPair(\n        type: \"rsa-pss\",\n        options: RSAPSSKeyPairOptions<\"pem\", \"der\">,\n        callback: (err: Error | null, publicKey: string, privateKey: Buffer) => void,\n    ): void;\n    function generateKeyPair(\n        type: \"rsa-pss\",\n        options: RSAPSSKeyPairOptions<\"der\", \"pem\">,\n        callback: (err: Error | null, publicKey: Buffer, privateKey: string) => void,\n    ): void;\n    function generateKeyPair(\n        type: \"rsa-pss\",\n        options: RSAPSSKeyPairOptions<\"der\", \"der\">,\n        callback: (err: Error | null, publicKey: Buffer, privateKey: Buffer) => void,\n    ): void;\n    function generateKeyPair(\n        type: \"rsa-pss\",\n        options: RSAPSSKeyPairKeyObjectOptions,\n        callback: (err: Error | null, publicKey: KeyObject, privateKey: KeyObject) => void,\n    ): void;\n    function generateKeyPair(\n        type: \"dsa\",\n        options: DSAKeyPairOptions<\"pem\", \"pem\">,\n        callback: (err: Error | null, publicKey: string, privateKey: string) => void,\n    ): void;\n    function generateKeyPair(\n        type: \"dsa\",\n        options: DSAKeyPairOptions<\"pem\", \"der\">,\n        callback: (err: Error | null, publicKey: string, privateKey: Buffer) => void,\n    ): void;\n    function generateKeyPair(\n        type: \"dsa\",\n        options: DSAKeyPairOptions<\"der\", \"pem\">,\n        callback: (err: Error | null, publicKey: Buffer, privateKey: string) => void,\n    ): void;\n    function generateKeyPair(\n        type: \"dsa\",\n        options: DSAKeyPairOptions<\"der\", \"der\">,\n        callback: (err: Error | null, publicKey: Buffer, privateKey: Buffer) => void,\n    ): void;\n    function generateKeyPair(\n        type: \"dsa\",\n        options: DSAKeyPairKeyObjectOptions,\n        callback: (err: Error | null, publicKey: KeyObject, privateKey: KeyObject) => void,\n    ): void;\n    function generateKeyPair(\n        type: \"ec\",\n        options: ECKeyPairOptions<\"pem\", \"pem\">,\n        callback: (err: Error | null, publicKey: string, privateKey: string) => void,\n    ): void;\n    function generateKeyPair(\n        type: \"ec\",\n        options: ECKeyPairOptions<\"pem\", \"der\">,\n        callback: (err: Error | null, publicKey: string, privateKey: Buffer) => void,\n    ): void;\n    function generateKeyPair(\n        type: \"ec\",\n        options: ECKeyPairOptions<\"der\", \"pem\">,\n        callback: (err: Error | null, publicKey: Buffer, privateKey: string) => void,\n    ): void;\n    function generateKeyPair(\n        type: \"ec\",\n        options: ECKeyPairOptions<\"der\", \"der\">,\n        callback: (err: Error | null, publicKey: Buffer, privateKey: Buffer) => void,\n    ): void;\n    function generateKeyPair(\n        type: \"ec\",\n        options: ECKeyPairKeyObjectOptions,\n        callback: (err: Error | null, publicKey: KeyObject, privateKey: KeyObject) => void,\n    ): void;\n    function generateKeyPair(\n        type: \"ed25519\",\n        options: ED25519KeyPairOptions<\"pem\", \"pem\">,\n        callback: (err: Error | null, publicKey: string, privateKey: string) => void,\n    ): void;\n    function generateKeyPair(\n        type: \"ed25519\",\n        options: ED25519KeyPairOptions<\"pem\", \"der\">,\n        callback: (err: Error | null, publicKey: string, privateKey: Buffer) => void,\n    ): void;\n    function generateKeyPair(\n        type: \"ed25519\",\n        options: ED25519KeyPairOptions<\"der\", \"pem\">,\n        callback: (err: Error | null, publicKey: Buffer, privateKey: string) => void,\n    ): void;\n    function generateKeyPair(\n        type: \"ed25519\",\n        options: ED25519KeyPairOptions<\"der\", \"der\">,\n        callback: (err: Error | null, publicKey: Buffer, privateKey: Buffer) => void,\n    ): void;\n    function generateKeyPair(\n        type: \"ed25519\",\n        options: ED25519KeyPairKeyObjectOptions | undefined,\n        callback: (err: Error | null, publicKey: KeyObject, privateKey: KeyObject) => void,\n    ): void;\n    function generateKeyPair(\n        type: \"ed448\",\n        options: ED448KeyPairOptions<\"pem\", \"pem\">,\n        callback: (err: Error | null, publicKey: string, privateKey: string) => void,\n    ): void;\n    function generateKeyPair(\n        type: \"ed448\",\n        options: ED448KeyPairOptions<\"pem\", \"der\">,\n        callback: (err: Error | null, publicKey: string, privateKey: Buffer) => void,\n    ): void;\n    function generateKeyPair(\n        type: \"ed448\",\n        options: ED448KeyPairOptions<\"der\", \"pem\">,\n        callback: (err: Error | null, publicKey: Buffer, privateKey: string) => void,\n    ): void;\n    function generateKeyPair(\n        type: \"ed448\",\n        options: ED448KeyPairOptions<\"der\", \"der\">,\n        callback: (err: Error | null, publicKey: Buffer, privateKey: Buffer) => void,\n    ): void;\n    function generateKeyPair(\n        type: \"ed448\",\n        options: ED448KeyPairKeyObjectOptions | undefined,\n        callback: (err: Error | null, publicKey: KeyObject, privateKey: KeyObject) => void,\n    ): void;\n    function generateKeyPair(\n        type: \"x25519\",\n        options: X25519KeyPairOptions<\"pem\", \"pem\">,\n        callback: (err: Error | null, publicKey: string, privateKey: string) => void,\n    ): void;\n    function generateKeyPair(\n        type: \"x25519\",\n        options: X25519KeyPairOptions<\"pem\", \"der\">,\n        callback: (err: Error | null, publicKey: string, privateKey: Buffer) => void,\n    ): void;\n    function generateKeyPair(\n        type: \"x25519\",\n        options: X25519KeyPairOptions<\"der\", \"pem\">,\n        callback: (err: Error | null, publicKey: Buffer, privateKey: string) => void,\n    ): void;\n    function generateKeyPair(\n        type: \"x25519\",\n        options: X25519KeyPairOptions<\"der\", \"der\">,\n        callback: (err: Error | null, publicKey: Buffer, privateKey: Buffer) => void,\n    ): void;\n    function generateKeyPair(\n        type: \"x25519\",\n        options: X25519KeyPairKeyObjectOptions | undefined,\n        callback: (err: Error | null, publicKey: KeyObject, privateKey: KeyObject) => void,\n    ): void;\n    function generateKeyPair(\n        type: \"x448\",\n        options: X448KeyPairOptions<\"pem\", \"pem\">,\n        callback: (err: Error | null, publicKey: string, privateKey: string) => void,\n    ): void;\n    function generateKeyPair(\n        type: \"x448\",\n        options: X448KeyPairOptions<\"pem\", \"der\">,\n        callback: (err: Error | null, publicKey: string, privateKey: Buffer) => void,\n    ): void;\n    function generateKeyPair(\n        type: \"x448\",\n        options: X448KeyPairOptions<\"der\", \"pem\">,\n        callback: (err: Error | null, publicKey: Buffer, privateKey: string) => void,\n    ): void;\n    function generateKeyPair(\n        type: \"x448\",\n        options: X448KeyPairOptions<\"der\", \"der\">,\n        callback: (err: Error | null, publicKey: Buffer, privateKey: Buffer) => void,\n    ): void;\n    function generateKeyPair(\n        type: \"x448\",\n        options: X448KeyPairKeyObjectOptions | undefined,\n        callback: (err: Error | null, publicKey: KeyObject, privateKey: KeyObject) => void,\n    ): void;\n    namespace generateKeyPair {\n        function __promisify__(\n            type: \"rsa\",\n            options: RSAKeyPairOptions<\"pem\", \"pem\">,\n        ): Promise<{\n            publicKey: string;\n            privateKey: string;\n        }>;\n        function __promisify__(\n            type: \"rsa\",\n            options: RSAKeyPairOptions<\"pem\", \"der\">,\n        ): Promise<{\n            publicKey: string;\n            privateKey: Buffer;\n        }>;\n        function __promisify__(\n            type: \"rsa\",\n            options: RSAKeyPairOptions<\"der\", \"pem\">,\n        ): Promise<{\n            publicKey: Buffer;\n            privateKey: string;\n        }>;\n        function __promisify__(\n            type: \"rsa\",\n            options: RSAKeyPairOptions<\"der\", \"der\">,\n        ): Promise<{\n            publicKey: Buffer;\n            privateKey: Buffer;\n        }>;\n        function __promisify__(type: \"rsa\", options: RSAKeyPairKeyObjectOptions): Promise<KeyPairKeyObjectResult>;\n        function __promisify__(\n            type: \"rsa-pss\",\n            options: RSAPSSKeyPairOptions<\"pem\", \"pem\">,\n        ): Promise<{\n            publicKey: string;\n            privateKey: string;\n        }>;\n        function __promisify__(\n            type: \"rsa-pss\",\n            options: RSAPSSKeyPairOptions<\"pem\", \"der\">,\n        ): Promise<{\n            publicKey: string;\n            privateKey: Buffer;\n        }>;\n        function __promisify__(\n            type: \"rsa-pss\",\n            options: RSAPSSKeyPairOptions<\"der\", \"pem\">,\n        ): Promise<{\n            publicKey: Buffer;\n            privateKey: string;\n        }>;\n        function __promisify__(\n            type: \"rsa-pss\",\n            options: RSAPSSKeyPairOptions<\"der\", \"der\">,\n        ): Promise<{\n            publicKey: Buffer;\n            privateKey: Buffer;\n        }>;\n        function __promisify__(\n            type: \"rsa-pss\",\n            options: RSAPSSKeyPairKeyObjectOptions,\n        ): Promise<KeyPairKeyObjectResult>;\n        function __promisify__(\n            type: \"dsa\",\n            options: DSAKeyPairOptions<\"pem\", \"pem\">,\n        ): Promise<{\n            publicKey: string;\n            privateKey: string;\n        }>;\n        function __promisify__(\n            type: \"dsa\",\n            options: DSAKeyPairOptions<\"pem\", \"der\">,\n        ): Promise<{\n            publicKey: string;\n            privateKey: Buffer;\n        }>;\n        function __promisify__(\n            type: \"dsa\",\n            options: DSAKeyPairOptions<\"der\", \"pem\">,\n        ): Promise<{\n            publicKey: Buffer;\n            privateKey: string;\n        }>;\n        function __promisify__(\n            type: \"dsa\",\n            options: DSAKeyPairOptions<\"der\", \"der\">,\n        ): Promise<{\n            publicKey: Buffer;\n            privateKey: Buffer;\n        }>;\n        function __promisify__(type: \"dsa\", options: DSAKeyPairKeyObjectOptions): Promise<KeyPairKeyObjectResult>;\n        function __promisify__(\n            type: \"ec\",\n            options: ECKeyPairOptions<\"pem\", \"pem\">,\n        ): Promise<{\n            publicKey: string;\n            privateKey: string;\n        }>;\n        function __promisify__(\n            type: \"ec\",\n            options: ECKeyPairOptions<\"pem\", \"der\">,\n        ): Promise<{\n            publicKey: string;\n            privateKey: Buffer;\n        }>;\n        function __promisify__(\n            type: \"ec\",\n            options: ECKeyPairOptions<\"der\", \"pem\">,\n        ): Promise<{\n            publicKey: Buffer;\n            privateKey: string;\n        }>;\n        function __promisify__(\n            type: \"ec\",\n            options: ECKeyPairOptions<\"der\", \"der\">,\n        ): Promise<{\n            publicKey: Buffer;\n            privateKey: Buffer;\n        }>;\n        function __promisify__(type: \"ec\", options: ECKeyPairKeyObjectOptions): Promise<KeyPairKeyObjectResult>;\n        function __promisify__(\n            type: \"ed25519\",\n            options: ED25519KeyPairOptions<\"pem\", \"pem\">,\n        ): Promise<{\n            publicKey: string;\n            privateKey: string;\n        }>;\n        function __promisify__(\n            type: \"ed25519\",\n            options: ED25519KeyPairOptions<\"pem\", \"der\">,\n        ): Promise<{\n            publicKey: string;\n            privateKey: Buffer;\n        }>;\n        function __promisify__(\n            type: \"ed25519\",\n            options: ED25519KeyPairOptions<\"der\", \"pem\">,\n        ): Promise<{\n            publicKey: Buffer;\n            privateKey: string;\n        }>;\n        function __promisify__(\n            type: \"ed25519\",\n            options: ED25519KeyPairOptions<\"der\", \"der\">,\n        ): Promise<{\n            publicKey: Buffer;\n            privateKey: Buffer;\n        }>;\n        function __promisify__(\n            type: \"ed25519\",\n            options?: ED25519KeyPairKeyObjectOptions,\n        ): Promise<KeyPairKeyObjectResult>;\n        function __promisify__(\n            type: \"ed448\",\n            options: ED448KeyPairOptions<\"pem\", \"pem\">,\n        ): Promise<{\n            publicKey: string;\n            privateKey: string;\n        }>;\n        function __promisify__(\n            type: \"ed448\",\n            options: ED448KeyPairOptions<\"pem\", \"der\">,\n        ): Promise<{\n            publicKey: string;\n            privateKey: Buffer;\n        }>;\n        function __promisify__(\n            type: \"ed448\",\n            options: ED448KeyPairOptions<\"der\", \"pem\">,\n        ): Promise<{\n            publicKey: Buffer;\n            privateKey: string;\n        }>;\n        function __promisify__(\n            type: \"ed448\",\n            options: ED448KeyPairOptions<\"der\", \"der\">,\n        ): Promise<{\n            publicKey: Buffer;\n            privateKey: Buffer;\n        }>;\n        function __promisify__(type: \"ed448\", options?: ED448KeyPairKeyObjectOptions): Promise<KeyPairKeyObjectResult>;\n        function __promisify__(\n            type: \"x25519\",\n            options: X25519KeyPairOptions<\"pem\", \"pem\">,\n        ): Promise<{\n            publicKey: string;\n            privateKey: string;\n        }>;\n        function __promisify__(\n            type: \"x25519\",\n            options: X25519KeyPairOptions<\"pem\", \"der\">,\n        ): Promise<{\n            publicKey: string;\n            privateKey: Buffer;\n        }>;\n        function __promisify__(\n            type: \"x25519\",\n            options: X25519KeyPairOptions<\"der\", \"pem\">,\n        ): Promise<{\n            publicKey: Buffer;\n            privateKey: string;\n        }>;\n        function __promisify__(\n            type: \"x25519\",\n            options: X25519KeyPairOptions<\"der\", \"der\">,\n        ): Promise<{\n            publicKey: Buffer;\n            privateKey: Buffer;\n        }>;\n        function __promisify__(\n            type: \"x25519\",\n            options?: X25519KeyPairKeyObjectOptions,\n        ): Promise<KeyPairKeyObjectResult>;\n        function __promisify__(\n            type: \"x448\",\n            options: X448KeyPairOptions<\"pem\", \"pem\">,\n        ): Promise<{\n            publicKey: string;\n            privateKey: string;\n        }>;\n        function __promisify__(\n            type: \"x448\",\n            options: X448KeyPairOptions<\"pem\", \"der\">,\n        ): Promise<{\n            publicKey: string;\n            privateKey: Buffer;\n        }>;\n        function __promisify__(\n            type: \"x448\",\n            options: X448KeyPairOptions<\"der\", \"pem\">,\n        ): Promise<{\n            publicKey: Buffer;\n            privateKey: string;\n        }>;\n        function __promisify__(\n            type: \"x448\",\n            options: X448KeyPairOptions<\"der\", \"der\">,\n        ): Promise<{\n            publicKey: Buffer;\n            privateKey: Buffer;\n        }>;\n        function __promisify__(type: \"x448\", options?: X448KeyPairKeyObjectOptions): Promise<KeyPairKeyObjectResult>;\n    }\n    /**\n     * Calculates and returns the signature for `data` using the given private key and\n     * algorithm. If `algorithm` is `null` or `undefined`, then the algorithm is\n     * dependent upon the key type (especially Ed25519 and Ed448).\n     *\n     * If `key` is not a `KeyObject`, this function behaves as if `key` had been\n     * passed to {@link createPrivateKey}. If it is an object, the following\n     * additional properties can be passed:\n     *\n     * If the `callback` function is provided this function uses libuv's threadpool.\n     * @since v12.0.0\n     */\n    function sign(\n        algorithm: string | null | undefined,\n        data: NodeJS.ArrayBufferView,\n        key: KeyLike | SignKeyObjectInput | SignPrivateKeyInput | SignJsonWebKeyInput,\n    ): Buffer;\n    function sign(\n        algorithm: string | null | undefined,\n        data: NodeJS.ArrayBufferView,\n        key: KeyLike | SignKeyObjectInput | SignPrivateKeyInput | SignJsonWebKeyInput,\n        callback: (error: Error | null, data: Buffer) => void,\n    ): void;\n    /**\n     * Verifies the given signature for `data` using the given key and algorithm. If `algorithm` is `null` or `undefined`, then the algorithm is dependent upon the\n     * key type (especially Ed25519 and Ed448).\n     *\n     * If `key` is not a `KeyObject`, this function behaves as if `key` had been\n     * passed to {@link createPublicKey}. If it is an object, the following\n     * additional properties can be passed:\n     *\n     * The `signature` argument is the previously calculated signature for the `data`.\n     *\n     * Because public keys can be derived from private keys, a private key or a public\n     * key may be passed for `key`.\n     *\n     * If the `callback` function is provided this function uses libuv's threadpool.\n     * @since v12.0.0\n     */\n    function verify(\n        algorithm: string | null | undefined,\n        data: NodeJS.ArrayBufferView,\n        key: KeyLike | VerifyKeyObjectInput | VerifyPublicKeyInput | VerifyJsonWebKeyInput,\n        signature: NodeJS.ArrayBufferView,\n    ): boolean;\n    function verify(\n        algorithm: string | null | undefined,\n        data: NodeJS.ArrayBufferView,\n        key: KeyLike | VerifyKeyObjectInput | VerifyPublicKeyInput | VerifyJsonWebKeyInput,\n        signature: NodeJS.ArrayBufferView,\n        callback: (error: Error | null, result: boolean) => void,\n    ): void;\n    /**\n     * Computes the Diffie-Hellman secret based on a `privateKey` and a `publicKey`.\n     * Both keys must have the same `asymmetricKeyType`, which must be one of `'dh'` (for Diffie-Hellman), `'ec'` (for ECDH), `'x448'`, or `'x25519'` (for ECDH-ES).\n     * @since v13.9.0, v12.17.0\n     */\n    function diffieHellman(options: { privateKey: KeyObject; publicKey: KeyObject }): Buffer;\n    /**\n     * A utility for creating one-shot hash digests of data. It can be faster than the object-based `crypto.createHash()` when hashing a smaller amount of data\n     * (<= 5MB) that's readily available. If the data can be big or if it is streamed, it's still recommended to use `crypto.createHash()` instead. The `algorithm`\n     * is dependent on the available algorithms supported by the version of OpenSSL on the platform. Examples are `'sha256'`, `'sha512'`, etc. On recent releases\n     * of OpenSSL, `openssl list -digest-algorithms` will display the available digest algorithms.\n     *\n     * Example:\n     *\n     * ```js\n     * import crypto from 'node:crypto';\n     * import { Buffer } from 'node:buffer';\n     *\n     * // Hashing a string and return the result as a hex-encoded string.\n     * const string = 'Node.js';\n     * // 10b3493287f831e81a438811a1ffba01f8cec4b7\n     * console.log(crypto.hash('sha1', string));\n     *\n     * // Encode a base64-encoded string into a Buffer, hash it and return\n     * // the result as a buffer.\n     * const base64 = 'Tm9kZS5qcw==';\n     * // <Buffer 10 b3 49 32 87 f8 31 e8 1a 43 88 11 a1 ff ba 01 f8 ce c4 b7>\n     * console.log(crypto.hash('sha1', Buffer.from(base64, 'base64'), 'buffer'));\n     * ```\n     * @since v21.7.0, v20.12.0\n     * @param data When `data` is a string, it will be encoded as UTF-8 before being hashed. If a different input encoding is desired for a string input, user\n     *             could encode the string into a `TypedArray` using either `TextEncoder` or `Buffer.from()` and passing the encoded `TypedArray` into this API instead.\n     * @param [outputEncoding='hex'] [Encoding](https://nodejs.org/docs/latest-v22.x/api/buffer.html#buffers-and-character-encodings) used to encode the returned digest.\n     */\n    function hash(algorithm: string, data: BinaryLike, outputEncoding?: BinaryToTextEncoding): string;\n    function hash(algorithm: string, data: BinaryLike, outputEncoding: \"buffer\"): Buffer;\n    function hash(\n        algorithm: string,\n        data: BinaryLike,\n        outputEncoding?: BinaryToTextEncoding | \"buffer\",\n    ): string | Buffer;\n    type CipherMode = \"cbc\" | \"ccm\" | \"cfb\" | \"ctr\" | \"ecb\" | \"gcm\" | \"ocb\" | \"ofb\" | \"stream\" | \"wrap\" | \"xts\";\n    interface CipherInfoOptions {\n        /**\n         * A test key length.\n         */\n        keyLength?: number | undefined;\n        /**\n         * A test IV length.\n         */\n        ivLength?: number | undefined;\n    }\n    interface CipherInfo {\n        /**\n         * The name of the cipher.\n         */\n        name: string;\n        /**\n         * The nid of the cipher.\n         */\n        nid: number;\n        /**\n         * The block size of the cipher in bytes.\n         * This property is omitted when mode is 'stream'.\n         */\n        blockSize?: number | undefined;\n        /**\n         * The expected or default initialization vector length in bytes.\n         * This property is omitted if the cipher does not use an initialization vector.\n         */\n        ivLength?: number | undefined;\n        /**\n         * The expected or default key length in bytes.\n         */\n        keyLength: number;\n        /**\n         * The cipher mode.\n         */\n        mode: CipherMode;\n    }\n    /**\n     * Returns information about a given cipher.\n     *\n     * Some ciphers accept variable length keys and initialization vectors. By default,\n     * the `crypto.getCipherInfo()` method will return the default values for these\n     * ciphers. To test if a given key length or iv length is acceptable for given\n     * cipher, use the `keyLength` and `ivLength` options. If the given values are\n     * unacceptable, `undefined` will be returned.\n     * @since v15.0.0\n     * @param nameOrNid The name or nid of the cipher to query.\n     */\n    function getCipherInfo(nameOrNid: string | number, options?: CipherInfoOptions): CipherInfo | undefined;\n    /**\n     * HKDF is a simple key derivation function defined in RFC 5869\\. The given `ikm`, `salt` and `info` are used with the `digest` to derive a key of `keylen` bytes.\n     *\n     * The supplied `callback` function is called with two arguments: `err` and `derivedKey`. If an errors occurs while deriving the key, `err` will be set;\n     * otherwise `err` will be `null`. The successfully generated `derivedKey` will\n     * be passed to the callback as an [ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer). An error will be thrown if any\n     * of the input arguments specify invalid values or types.\n     *\n     * ```js\n     * import { Buffer } from 'node:buffer';\n     * const {\n     *   hkdf,\n     * } = await import('node:crypto');\n     *\n     * hkdf('sha512', 'key', 'salt', 'info', 64, (err, derivedKey) => {\n     *   if (err) throw err;\n     *   console.log(Buffer.from(derivedKey).toString('hex'));  // '24156e2...5391653'\n     * });\n     * ```\n     * @since v15.0.0\n     * @param digest The digest algorithm to use.\n     * @param ikm The input keying material. Must be provided but can be zero-length.\n     * @param salt The salt value. Must be provided but can be zero-length.\n     * @param info Additional info value. Must be provided but can be zero-length, and cannot be more than 1024 bytes.\n     * @param keylen The length of the key to generate. Must be greater than 0. The maximum allowable value is `255` times the number of bytes produced by the selected digest function (e.g. `sha512`\n     * generates 64-byte hashes, making the maximum HKDF output 16320 bytes).\n     */\n    function hkdf(\n        digest: string,\n        irm: BinaryLike | KeyObject,\n        salt: BinaryLike,\n        info: BinaryLike,\n        keylen: number,\n        callback: (err: Error | null, derivedKey: ArrayBuffer) => void,\n    ): void;\n    /**\n     * Provides a synchronous HKDF key derivation function as defined in RFC 5869\\. The\n     * given `ikm`, `salt` and `info` are used with the `digest` to derive a key of `keylen` bytes.\n     *\n     * The successfully generated `derivedKey` will be returned as an [ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer).\n     *\n     * An error will be thrown if any of the input arguments specify invalid values or\n     * types, or if the derived key cannot be generated.\n     *\n     * ```js\n     * import { Buffer } from 'node:buffer';\n     * const {\n     *   hkdfSync,\n     * } = await import('node:crypto');\n     *\n     * const derivedKey = hkdfSync('sha512', 'key', 'salt', 'info', 64);\n     * console.log(Buffer.from(derivedKey).toString('hex'));  // '24156e2...5391653'\n     * ```\n     * @since v15.0.0\n     * @param digest The digest algorithm to use.\n     * @param ikm The input keying material. Must be provided but can be zero-length.\n     * @param salt The salt value. Must be provided but can be zero-length.\n     * @param info Additional info value. Must be provided but can be zero-length, and cannot be more than 1024 bytes.\n     * @param keylen The length of the key to generate. Must be greater than 0. The maximum allowable value is `255` times the number of bytes produced by the selected digest function (e.g. `sha512`\n     * generates 64-byte hashes, making the maximum HKDF output 16320 bytes).\n     */\n    function hkdfSync(\n        digest: string,\n        ikm: BinaryLike | KeyObject,\n        salt: BinaryLike,\n        info: BinaryLike,\n        keylen: number,\n    ): ArrayBuffer;\n    interface SecureHeapUsage {\n        /**\n         * The total allocated secure heap size as specified using the `--secure-heap=n` command-line flag.\n         */\n        total: number;\n        /**\n         * The minimum allocation from the secure heap as specified using the `--secure-heap-min` command-line flag.\n         */\n        min: number;\n        /**\n         * The total number of bytes currently allocated from the secure heap.\n         */\n        used: number;\n        /**\n         * The calculated ratio of `used` to `total` allocated bytes.\n         */\n        utilization: number;\n    }\n    /**\n     * @since v15.6.0\n     */\n    function secureHeapUsed(): SecureHeapUsage;\n    interface RandomUUIDOptions {\n        /**\n         * By default, to improve performance,\n         * Node.js will pre-emptively generate and persistently cache enough\n         * random data to generate up to 128 random UUIDs. To generate a UUID\n         * without using the cache, set `disableEntropyCache` to `true`.\n         *\n         * @default `false`\n         */\n        disableEntropyCache?: boolean | undefined;\n    }\n    type UUID = `${string}-${string}-${string}-${string}-${string}`;\n    /**\n     * Generates a random [RFC 4122](https://www.rfc-editor.org/rfc/rfc4122.txt) version 4 UUID. The UUID is generated using a\n     * cryptographic pseudorandom number generator.\n     * @since v15.6.0, v14.17.0\n     */\n    function randomUUID(options?: RandomUUIDOptions): UUID;\n    interface X509CheckOptions {\n        /**\n         * @default 'always'\n         */\n        subject?: \"always\" | \"default\" | \"never\";\n        /**\n         * @default true\n         */\n        wildcards?: boolean;\n        /**\n         * @default true\n         */\n        partialWildcards?: boolean;\n        /**\n         * @default false\n         */\n        multiLabelWildcards?: boolean;\n        /**\n         * @default false\n         */\n        singleLabelSubdomains?: boolean;\n    }\n    /**\n     * Encapsulates an X509 certificate and provides read-only access to\n     * its information.\n     *\n     * ```js\n     * const { X509Certificate } = await import('node:crypto');\n     *\n     * const x509 = new X509Certificate('{... pem encoded cert ...}');\n     *\n     * console.log(x509.subject);\n     * ```\n     * @since v15.6.0\n     */\n    class X509Certificate {\n        /**\n         * Will be \\`true\\` if this is a Certificate Authority (CA) certificate.\n         * @since v15.6.0\n         */\n        readonly ca: boolean;\n        /**\n         * The SHA-1 fingerprint of this certificate.\n         *\n         * Because SHA-1 is cryptographically broken and because the security of SHA-1 is\n         * significantly worse than that of algorithms that are commonly used to sign\n         * certificates, consider using `x509.fingerprint256` instead.\n         * @since v15.6.0\n         */\n        readonly fingerprint: string;\n        /**\n         * The SHA-256 fingerprint of this certificate.\n         * @since v15.6.0\n         */\n        readonly fingerprint256: string;\n        /**\n         * The SHA-512 fingerprint of this certificate.\n         *\n         * Because computing the SHA-256 fingerprint is usually faster and because it is\n         * only half the size of the SHA-512 fingerprint, `x509.fingerprint256` may be\n         * a better choice. While SHA-512 presumably provides a higher level of security in\n         * general, the security of SHA-256 matches that of most algorithms that are\n         * commonly used to sign certificates.\n         * @since v17.2.0, v16.14.0\n         */\n        readonly fingerprint512: string;\n        /**\n         * The complete subject of this certificate.\n         * @since v15.6.0\n         */\n        readonly subject: string;\n        /**\n         * The subject alternative name specified for this certificate.\n         *\n         * This is a comma-separated list of subject alternative names. Each entry begins\n         * with a string identifying the kind of the subject alternative name followed by\n         * a colon and the value associated with the entry.\n         *\n         * Earlier versions of Node.js incorrectly assumed that it is safe to split this\n         * property at the two-character sequence `', '` (see [CVE-2021-44532](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-44532)). However,\n         * both malicious and legitimate certificates can contain subject alternative names\n         * that include this sequence when represented as a string.\n         *\n         * After the prefix denoting the type of the entry, the remainder of each entry\n         * might be enclosed in quotes to indicate that the value is a JSON string literal.\n         * For backward compatibility, Node.js only uses JSON string literals within this\n         * property when necessary to avoid ambiguity. Third-party code should be prepared\n         * to handle both possible entry formats.\n         * @since v15.6.0\n         */\n        readonly subjectAltName: string | undefined;\n        /**\n         * A textual representation of the certificate's authority information access\n         * extension.\n         *\n         * This is a line feed separated list of access descriptions. Each line begins with\n         * the access method and the kind of the access location, followed by a colon and\n         * the value associated with the access location.\n         *\n         * After the prefix denoting the access method and the kind of the access location,\n         * the remainder of each line might be enclosed in quotes to indicate that the\n         * value is a JSON string literal. For backward compatibility, Node.js only uses\n         * JSON string literals within this property when necessary to avoid ambiguity.\n         * Third-party code should be prepared to handle both possible entry formats.\n         * @since v15.6.0\n         */\n        readonly infoAccess: string | undefined;\n        /**\n         * An array detailing the key usages for this certificate.\n         * @since v15.6.0\n         */\n        readonly keyUsage: string[];\n        /**\n         * The issuer identification included in this certificate.\n         * @since v15.6.0\n         */\n        readonly issuer: string;\n        /**\n         * The issuer certificate or `undefined` if the issuer certificate is not\n         * available.\n         * @since v15.9.0\n         */\n        readonly issuerCertificate?: X509Certificate | undefined;\n        /**\n         * The public key `KeyObject` for this certificate.\n         * @since v15.6.0\n         */\n        readonly publicKey: KeyObject;\n        /**\n         * A `Buffer` containing the DER encoding of this certificate.\n         * @since v15.6.0\n         */\n        readonly raw: Buffer;\n        /**\n         * The serial number of this certificate.\n         *\n         * Serial numbers are assigned by certificate authorities and do not uniquely\n         * identify certificates. Consider using `x509.fingerprint256` as a unique\n         * identifier instead.\n         * @since v15.6.0\n         */\n        readonly serialNumber: string;\n        /**\n         * The date/time from which this certificate is considered valid.\n         * @since v15.6.0\n         */\n        readonly validFrom: string;\n        /**\n         * The date/time from which this certificate is valid, encapsulated in a `Date` object.\n         * @since v22.10.0\n         */\n        readonly validFromDate: Date;\n        /**\n         * The date/time until which this certificate is considered valid.\n         * @since v15.6.0\n         */\n        readonly validTo: string;\n        /**\n         * The date/time until which this certificate is valid, encapsulated in a `Date` object.\n         * @since v22.10.0\n         */\n        readonly validToDate: Date;\n        constructor(buffer: BinaryLike);\n        /**\n         * Checks whether the certificate matches the given email address.\n         *\n         * If the `'subject'` option is undefined or set to `'default'`, the certificate\n         * subject is only considered if the subject alternative name extension either does\n         * not exist or does not contain any email addresses.\n         *\n         * If the `'subject'` option is set to `'always'` and if the subject alternative\n         * name extension either does not exist or does not contain a matching email\n         * address, the certificate subject is considered.\n         *\n         * If the `'subject'` option is set to `'never'`, the certificate subject is never\n         * considered, even if the certificate contains no subject alternative names.\n         * @since v15.6.0\n         * @return Returns `email` if the certificate matches, `undefined` if it does not.\n         */\n        checkEmail(email: string, options?: Pick<X509CheckOptions, \"subject\">): string | undefined;\n        /**\n         * Checks whether the certificate matches the given host name.\n         *\n         * If the certificate matches the given host name, the matching subject name is\n         * returned. The returned name might be an exact match (e.g., `foo.example.com`)\n         * or it might contain wildcards (e.g., `*.example.com`). Because host name\n         * comparisons are case-insensitive, the returned subject name might also differ\n         * from the given `name` in capitalization.\n         *\n         * If the `'subject'` option is undefined or set to `'default'`, the certificate\n         * subject is only considered if the subject alternative name extension either does\n         * not exist or does not contain any DNS names. This behavior is consistent with [RFC 2818](https://www.rfc-editor.org/rfc/rfc2818.txt) (\"HTTP Over TLS\").\n         *\n         * If the `'subject'` option is set to `'always'` and if the subject alternative\n         * name extension either does not exist or does not contain a matching DNS name,\n         * the certificate subject is considered.\n         *\n         * If the `'subject'` option is set to `'never'`, the certificate subject is never\n         * considered, even if the certificate contains no subject alternative names.\n         * @since v15.6.0\n         * @return Returns a subject name that matches `name`, or `undefined` if no subject name matches `name`.\n         */\n        checkHost(name: string, options?: X509CheckOptions): string | undefined;\n        /**\n         * Checks whether the certificate matches the given IP address (IPv4 or IPv6).\n         *\n         * Only [RFC 5280](https://www.rfc-editor.org/rfc/rfc5280.txt) `iPAddress` subject alternative names are considered, and they\n         * must match the given `ip` address exactly. Other subject alternative names as\n         * well as the subject field of the certificate are ignored.\n         * @since v15.6.0\n         * @return Returns `ip` if the certificate matches, `undefined` if it does not.\n         */\n        checkIP(ip: string): string | undefined;\n        /**\n         * Checks whether this certificate was issued by the given `otherCert`.\n         * @since v15.6.0\n         */\n        checkIssued(otherCert: X509Certificate): boolean;\n        /**\n         * Checks whether the public key for this certificate is consistent with\n         * the given private key.\n         * @since v15.6.0\n         * @param privateKey A private key.\n         */\n        checkPrivateKey(privateKey: KeyObject): boolean;\n        /**\n         * There is no standard JSON encoding for X509 certificates. The`toJSON()` method returns a string containing the PEM encoded\n         * certificate.\n         * @since v15.6.0\n         */\n        toJSON(): string;\n        /**\n         * Returns information about this certificate using the legacy `certificate object` encoding.\n         * @since v15.6.0\n         */\n        toLegacyObject(): PeerCertificate;\n        /**\n         * Returns the PEM-encoded certificate.\n         * @since v15.6.0\n         */\n        toString(): string;\n        /**\n         * Verifies that this certificate was signed by the given public key.\n         * Does not perform any other validation checks on the certificate.\n         * @since v15.6.0\n         * @param publicKey A public key.\n         */\n        verify(publicKey: KeyObject): boolean;\n    }\n    type LargeNumberLike = NodeJS.ArrayBufferView | SharedArrayBuffer | ArrayBuffer | bigint;\n    interface GeneratePrimeOptions {\n        add?: LargeNumberLike | undefined;\n        rem?: LargeNumberLike | undefined;\n        /**\n         * @default false\n         */\n        safe?: boolean | undefined;\n        bigint?: boolean | undefined;\n    }\n    interface GeneratePrimeOptionsBigInt extends GeneratePrimeOptions {\n        bigint: true;\n    }\n    interface GeneratePrimeOptionsArrayBuffer extends GeneratePrimeOptions {\n        bigint?: false | undefined;\n    }\n    /**\n     * Generates a pseudorandom prime of `size` bits.\n     *\n     * If `options.safe` is `true`, the prime will be a safe prime -- that is, `(prime - 1) / 2` will also be a prime.\n     *\n     * The `options.add` and `options.rem` parameters can be used to enforce additional\n     * requirements, e.g., for Diffie-Hellman:\n     *\n     * * If `options.add` and `options.rem` are both set, the prime will satisfy the\n     * condition that `prime % add = rem`.\n     * * If only `options.add` is set and `options.safe` is not `true`, the prime will\n     * satisfy the condition that `prime % add = 1`.\n     * * If only `options.add` is set and `options.safe` is set to `true`, the prime\n     * will instead satisfy the condition that `prime % add = 3`. This is necessary\n     * because `prime % add = 1` for `options.add > 2` would contradict the condition\n     * enforced by `options.safe`.\n     * * `options.rem` is ignored if `options.add` is not given.\n     *\n     * Both `options.add` and `options.rem` must be encoded as big-endian sequences\n     * if given as an `ArrayBuffer`, `SharedArrayBuffer`, `TypedArray`, `Buffer`, or `DataView`.\n     *\n     * By default, the prime is encoded as a big-endian sequence of octets\n     * in an [ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer). If the `bigint` option is `true`, then a\n     * [bigint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) is provided.\n     * @since v15.8.0\n     * @param size The size (in bits) of the prime to generate.\n     */\n    function generatePrime(size: number, callback: (err: Error | null, prime: ArrayBuffer) => void): void;\n    function generatePrime(\n        size: number,\n        options: GeneratePrimeOptionsBigInt,\n        callback: (err: Error | null, prime: bigint) => void,\n    ): void;\n    function generatePrime(\n        size: number,\n        options: GeneratePrimeOptionsArrayBuffer,\n        callback: (err: Error | null, prime: ArrayBuffer) => void,\n    ): void;\n    function generatePrime(\n        size: number,\n        options: GeneratePrimeOptions,\n        callback: (err: Error | null, prime: ArrayBuffer | bigint) => void,\n    ): void;\n    /**\n     * Generates a pseudorandom prime of `size` bits.\n     *\n     * If `options.safe` is `true`, the prime will be a safe prime -- that is, `(prime - 1) / 2` will also be a prime.\n     *\n     * The `options.add` and `options.rem` parameters can be used to enforce additional\n     * requirements, e.g., for Diffie-Hellman:\n     *\n     * * If `options.add` and `options.rem` are both set, the prime will satisfy the\n     * condition that `prime % add = rem`.\n     * * If only `options.add` is set and `options.safe` is not `true`, the prime will\n     * satisfy the condition that `prime % add = 1`.\n     * * If only `options.add` is set and `options.safe` is set to `true`, the prime\n     * will instead satisfy the condition that `prime % add = 3`. This is necessary\n     * because `prime % add = 1` for `options.add > 2` would contradict the condition\n     * enforced by `options.safe`.\n     * * `options.rem` is ignored if `options.add` is not given.\n     *\n     * Both `options.add` and `options.rem` must be encoded as big-endian sequences\n     * if given as an `ArrayBuffer`, `SharedArrayBuffer`, `TypedArray`, `Buffer`, or `DataView`.\n     *\n     * By default, the prime is encoded as a big-endian sequence of octets\n     * in an [ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer). If the `bigint` option is `true`, then a\n     * [bigint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) is provided.\n     * @since v15.8.0\n     * @param size The size (in bits) of the prime to generate.\n     */\n    function generatePrimeSync(size: number): ArrayBuffer;\n    function generatePrimeSync(size: number, options: GeneratePrimeOptionsBigInt): bigint;\n    function generatePrimeSync(size: number, options: GeneratePrimeOptionsArrayBuffer): ArrayBuffer;\n    function generatePrimeSync(size: number, options: GeneratePrimeOptions): ArrayBuffer | bigint;\n    interface CheckPrimeOptions {\n        /**\n         * The number of Miller-Rabin probabilistic primality iterations to perform.\n         * When the value is 0 (zero), a number of checks is used that yields a false positive rate of at most `2**-64` for random input.\n         * Care must be used when selecting a number of checks.\n         * Refer to the OpenSSL documentation for the BN_is_prime_ex function nchecks options for more details.\n         *\n         * @default 0\n         */\n        checks?: number | undefined;\n    }\n    /**\n     * Checks the primality of the `candidate`.\n     * @since v15.8.0\n     * @param candidate A possible prime encoded as a sequence of big endian octets of arbitrary length.\n     */\n    function checkPrime(value: LargeNumberLike, callback: (err: Error | null, result: boolean) => void): void;\n    function checkPrime(\n        value: LargeNumberLike,\n        options: CheckPrimeOptions,\n        callback: (err: Error | null, result: boolean) => void,\n    ): void;\n    /**\n     * Checks the primality of the `candidate`.\n     * @since v15.8.0\n     * @param candidate A possible prime encoded as a sequence of big endian octets of arbitrary length.\n     * @return `true` if the candidate is a prime with an error probability less than `0.25 ** options.checks`.\n     */\n    function checkPrimeSync(candidate: LargeNumberLike, options?: CheckPrimeOptions): boolean;\n    /**\n     * Load and set the `engine` for some or all OpenSSL functions (selected by flags).\n     *\n     * `engine` could be either an id or a path to the engine's shared library.\n     *\n     * The optional `flags` argument uses `ENGINE_METHOD_ALL` by default. The `flags` is a bit field taking one of or a mix of the following flags (defined in `crypto.constants`):\n     *\n     * * `crypto.constants.ENGINE_METHOD_RSA`\n     * * `crypto.constants.ENGINE_METHOD_DSA`\n     * * `crypto.constants.ENGINE_METHOD_DH`\n     * * `crypto.constants.ENGINE_METHOD_RAND`\n     * * `crypto.constants.ENGINE_METHOD_EC`\n     * * `crypto.constants.ENGINE_METHOD_CIPHERS`\n     * * `crypto.constants.ENGINE_METHOD_DIGESTS`\n     * * `crypto.constants.ENGINE_METHOD_PKEY_METHS`\n     * * `crypto.constants.ENGINE_METHOD_PKEY_ASN1_METHS`\n     * * `crypto.constants.ENGINE_METHOD_ALL`\n     * * `crypto.constants.ENGINE_METHOD_NONE`\n     * @since v0.11.11\n     * @param flags\n     */\n    function setEngine(engine: string, flags?: number): void;\n    /**\n     * A convenient alias for {@link webcrypto.getRandomValues}. This\n     * implementation is not compliant with the Web Crypto spec, to write\n     * web-compatible code use {@link webcrypto.getRandomValues} instead.\n     * @since v17.4.0\n     * @return Returns `typedArray`.\n     */\n    function getRandomValues<T extends webcrypto.BufferSource>(typedArray: T): T;\n    /**\n     * A convenient alias for `crypto.webcrypto.subtle`.\n     * @since v17.4.0\n     */\n    const subtle: webcrypto.SubtleCrypto;\n    /**\n     * An implementation of the Web Crypto API standard.\n     *\n     * See the {@link https://nodejs.org/docs/latest/api/webcrypto.html Web Crypto API documentation} for details.\n     * @since v15.0.0\n     */\n    const webcrypto: webcrypto.Crypto;\n    namespace webcrypto {\n        type BufferSource = ArrayBufferView | ArrayBuffer;\n        type KeyFormat = \"jwk\" | \"pkcs8\" | \"raw\" | \"spki\";\n        type KeyType = \"private\" | \"public\" | \"secret\";\n        type KeyUsage =\n            | \"decrypt\"\n            | \"deriveBits\"\n            | \"deriveKey\"\n            | \"encrypt\"\n            | \"sign\"\n            | \"unwrapKey\"\n            | \"verify\"\n            | \"wrapKey\";\n        type AlgorithmIdentifier = Algorithm | string;\n        type HashAlgorithmIdentifier = AlgorithmIdentifier;\n        type NamedCurve = string;\n        type BigInteger = Uint8Array;\n        interface AesCbcParams extends Algorithm {\n            iv: BufferSource;\n        }\n        interface AesCtrParams extends Algorithm {\n            counter: BufferSource;\n            length: number;\n        }\n        interface AesDerivedKeyParams extends Algorithm {\n            length: number;\n        }\n        interface AesGcmParams extends Algorithm {\n            additionalData?: BufferSource;\n            iv: BufferSource;\n            tagLength?: number;\n        }\n        interface AesKeyAlgorithm extends KeyAlgorithm {\n            length: number;\n        }\n        interface AesKeyGenParams extends Algorithm {\n            length: number;\n        }\n        interface Algorithm {\n            name: string;\n        }\n        interface EcKeyAlgorithm extends KeyAlgorithm {\n            namedCurve: NamedCurve;\n        }\n        interface EcKeyGenParams extends Algorithm {\n            namedCurve: NamedCurve;\n        }\n        interface EcKeyImportParams extends Algorithm {\n            namedCurve: NamedCurve;\n        }\n        interface EcdhKeyDeriveParams extends Algorithm {\n            public: CryptoKey;\n        }\n        interface EcdsaParams extends Algorithm {\n            hash: HashAlgorithmIdentifier;\n        }\n        interface Ed448Params extends Algorithm {\n            context?: BufferSource;\n        }\n        interface HkdfParams extends Algorithm {\n            hash: HashAlgorithmIdentifier;\n            info: BufferSource;\n            salt: BufferSource;\n        }\n        interface HmacImportParams extends Algorithm {\n            hash: HashAlgorithmIdentifier;\n            length?: number;\n        }\n        interface HmacKeyAlgorithm extends KeyAlgorithm {\n            hash: KeyAlgorithm;\n            length: number;\n        }\n        interface HmacKeyGenParams extends Algorithm {\n            hash: HashAlgorithmIdentifier;\n            length?: number;\n        }\n        interface JsonWebKey {\n            alg?: string;\n            crv?: string;\n            d?: string;\n            dp?: string;\n            dq?: string;\n            e?: string;\n            ext?: boolean;\n            k?: string;\n            key_ops?: string[];\n            kty?: string;\n            n?: string;\n            oth?: RsaOtherPrimesInfo[];\n            p?: string;\n            q?: string;\n            qi?: string;\n            use?: string;\n            x?: string;\n            y?: string;\n        }\n        interface KeyAlgorithm {\n            name: string;\n        }\n        interface Pbkdf2Params extends Algorithm {\n            hash: HashAlgorithmIdentifier;\n            iterations: number;\n            salt: BufferSource;\n        }\n        interface RsaHashedImportParams extends Algorithm {\n            hash: HashAlgorithmIdentifier;\n        }\n        interface RsaHashedKeyAlgorithm extends RsaKeyAlgorithm {\n            hash: KeyAlgorithm;\n        }\n        interface RsaHashedKeyGenParams extends RsaKeyGenParams {\n            hash: HashAlgorithmIdentifier;\n        }\n        interface RsaKeyAlgorithm extends KeyAlgorithm {\n            modulusLength: number;\n            publicExponent: BigInteger;\n        }\n        interface RsaKeyGenParams extends Algorithm {\n            modulusLength: number;\n            publicExponent: BigInteger;\n        }\n        interface RsaOaepParams extends Algorithm {\n            label?: BufferSource;\n        }\n        interface RsaOtherPrimesInfo {\n            d?: string;\n            r?: string;\n            t?: string;\n        }\n        interface RsaPssParams extends Algorithm {\n            saltLength: number;\n        }\n        /**\n         * Importing the `webcrypto` object (`import { webcrypto } from 'node:crypto'`) gives an instance of the `Crypto` class.\n         * `Crypto` is a singleton that provides access to the remainder of the crypto API.\n         * @since v15.0.0\n         */\n        interface Crypto {\n            /**\n             * Provides access to the `SubtleCrypto` API.\n             * @since v15.0.0\n             */\n            readonly subtle: SubtleCrypto;\n            /**\n             * Generates cryptographically strong random values.\n             * The given `typedArray` is filled with random values, and a reference to `typedArray` is returned.\n             *\n             * The given `typedArray` must be an integer-based instance of {@link NodeJS.TypedArray}, i.e. `Float32Array` and `Float64Array` are not accepted.\n             *\n             * An error will be thrown if the given `typedArray` is larger than 65,536 bytes.\n             * @since v15.0.0\n             */\n            getRandomValues<T extends Exclude<NodeJS.TypedArray, Float32Array | Float64Array>>(typedArray: T): T;\n            /**\n             * Generates a random {@link https://www.rfc-editor.org/rfc/rfc4122.txt RFC 4122} version 4 UUID.\n             * The UUID is generated using a cryptographic pseudorandom number generator.\n             * @since v16.7.0\n             */\n            randomUUID(): UUID;\n            CryptoKey: CryptoKeyConstructor;\n        }\n        // This constructor throws ILLEGAL_CONSTRUCTOR so it should not be newable.\n        interface CryptoKeyConstructor {\n            /** Illegal constructor */\n            (_: { readonly _: unique symbol }): never; // Allows instanceof to work but not be callable by the user.\n            readonly length: 0;\n            readonly name: \"CryptoKey\";\n            readonly prototype: CryptoKey;\n        }\n        /**\n         * @since v15.0.0\n         */\n        interface CryptoKey {\n            /**\n             * An object detailing the algorithm for which the key can be used along with additional algorithm-specific parameters.\n             * @since v15.0.0\n             */\n            readonly algorithm: KeyAlgorithm;\n            /**\n             * When `true`, the {@link CryptoKey} can be extracted using either `subtleCrypto.exportKey()` or `subtleCrypto.wrapKey()`.\n             * @since v15.0.0\n             */\n            readonly extractable: boolean;\n            /**\n             * A string identifying whether the key is a symmetric (`'secret'`) or asymmetric (`'private'` or `'public'`) key.\n             * @since v15.0.0\n             */\n            readonly type: KeyType;\n            /**\n             * An array of strings identifying the operations for which the key may be used.\n             *\n             * The possible usages are:\n             * - `'encrypt'` - The key may be used to encrypt data.\n             * - `'decrypt'` - The key may be used to decrypt data.\n             * - `'sign'` - The key may be used to generate digital signatures.\n             * - `'verify'` - The key may be used to verify digital signatures.\n             * - `'deriveKey'` - The key may be used to derive a new key.\n             * - `'deriveBits'` - The key may be used to derive bits.\n             * - `'wrapKey'` - The key may be used to wrap another key.\n             * - `'unwrapKey'` - The key may be used to unwrap another key.\n             *\n             * Valid key usages depend on the key algorithm (identified by `cryptokey.algorithm.name`).\n             * @since v15.0.0\n             */\n            readonly usages: KeyUsage[];\n        }\n        /**\n         * The `CryptoKeyPair` is a simple dictionary object with `publicKey` and `privateKey` properties, representing an asymmetric key pair.\n         * @since v15.0.0\n         */\n        interface CryptoKeyPair {\n            /**\n             * A {@link CryptoKey} whose type will be `'private'`.\n             * @since v15.0.0\n             */\n            privateKey: CryptoKey;\n            /**\n             * A {@link CryptoKey} whose type will be `'public'`.\n             * @since v15.0.0\n             */\n            publicKey: CryptoKey;\n        }\n        /**\n         * @since v15.0.0\n         */\n        interface SubtleCrypto {\n            /**\n             * Using the method and parameters specified in `algorithm` and the keying material provided by `key`,\n             * `subtle.decrypt()` attempts to decipher the provided `data`. If successful,\n             * the returned promise will be resolved with an `<ArrayBuffer>` containing the plaintext result.\n             *\n             * The algorithms currently supported include:\n             *\n             * - `'RSA-OAEP'`\n             * - `'AES-CTR'`\n             * - `'AES-CBC'`\n             * - `'AES-GCM'`\n             * @since v15.0.0\n             */\n            decrypt(\n                algorithm: AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams,\n                key: CryptoKey,\n                data: BufferSource,\n            ): Promise<ArrayBuffer>;\n            /**\n             * Using the method and parameters specified in `algorithm` and the keying material provided by `baseKey`,\n             * `subtle.deriveBits()` attempts to generate `length` bits.\n             * The Node.js implementation requires that when `length` is a number it must be multiple of `8`.\n             * When `length` is `null` the maximum number of bits for a given algorithm is generated. This is allowed\n             * for the `'ECDH'`, `'X25519'`, and `'X448'` algorithms.\n             * If successful, the returned promise will be resolved with an `<ArrayBuffer>` containing the generated data.\n             *\n             * The algorithms currently supported include:\n             *\n             * - `'ECDH'`\n             * - `'X25519'`\n             * - `'X448'`\n             * - `'HKDF'`\n             * - `'PBKDF2'`\n             * @since v15.0.0\n             */\n            deriveBits(\n                algorithm: EcdhKeyDeriveParams,\n                baseKey: CryptoKey,\n                length?: number | null,\n            ): Promise<ArrayBuffer>;\n            deriveBits(\n                algorithm: EcdhKeyDeriveParams | HkdfParams | Pbkdf2Params,\n                baseKey: CryptoKey,\n                length: number,\n            ): Promise<ArrayBuffer>;\n            /**\n             * Using the method and parameters specified in `algorithm`, and the keying material provided by `baseKey`,\n             * `subtle.deriveKey()` attempts to generate a new <CryptoKey>` based on the method and parameters in `derivedKeyAlgorithm`.\n             *\n             * Calling `subtle.deriveKey()` is equivalent to calling `subtle.deriveBits()` to generate raw keying material,\n             * then passing the result into the `subtle.importKey()` method using the `deriveKeyAlgorithm`, `extractable`, and `keyUsages` parameters as input.\n             *\n             * The algorithms currently supported include:\n             *\n             * - `'ECDH'`\n             * - `'X25519'`\n             * - `'X448'`\n             * - `'HKDF'`\n             * - `'PBKDF2'`\n             * @param keyUsages See {@link https://nodejs.org/docs/latest/api/webcrypto.html#cryptokeyusages Key usages}.\n             * @since v15.0.0\n             */\n            deriveKey(\n                algorithm: EcdhKeyDeriveParams | HkdfParams | Pbkdf2Params,\n                baseKey: CryptoKey,\n                derivedKeyAlgorithm: AlgorithmIdentifier | HmacImportParams | AesDerivedKeyParams,\n                extractable: boolean,\n                keyUsages: readonly KeyUsage[],\n            ): Promise<CryptoKey>;\n            /**\n             * Using the method identified by `algorithm`, `subtle.digest()` attempts to generate a digest of `data`.\n             * If successful, the returned promise is resolved with an `<ArrayBuffer>` containing the computed digest.\n             *\n             * If `algorithm` is provided as a `<string>`, it must be one of:\n             *\n             * - `'SHA-1'`\n             * - `'SHA-256'`\n             * - `'SHA-384'`\n             * - `'SHA-512'`\n             *\n             * If `algorithm` is provided as an `<Object>`, it must have a `name` property whose value is one of the above.\n             * @since v15.0.0\n             */\n            digest(algorithm: AlgorithmIdentifier, data: BufferSource): Promise<ArrayBuffer>;\n            /**\n             * Using the method and parameters specified by `algorithm` and the keying material provided by `key`,\n             * `subtle.encrypt()` attempts to encipher `data`. If successful,\n             * the returned promise is resolved with an `<ArrayBuffer>` containing the encrypted result.\n             *\n             * The algorithms currently supported include:\n             *\n             * - `'RSA-OAEP'`\n             * - `'AES-CTR'`\n             * - `'AES-CBC'`\n             * - `'AES-GCM'`\n             * @since v15.0.0\n             */\n            encrypt(\n                algorithm: AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams,\n                key: CryptoKey,\n                data: BufferSource,\n            ): Promise<ArrayBuffer>;\n            /**\n             * Exports the given key into the specified format, if supported.\n             *\n             * If the `<CryptoKey>` is not extractable, the returned promise will reject.\n             *\n             * When `format` is either `'pkcs8'` or `'spki'` and the export is successful,\n             * the returned promise will be resolved with an `<ArrayBuffer>` containing the exported key data.\n             *\n             * When `format` is `'jwk'` and the export is successful, the returned promise will be resolved with a\n             * JavaScript object conforming to the {@link https://tools.ietf.org/html/rfc7517 JSON Web Key} specification.\n             * @param format Must be one of `'raw'`, `'pkcs8'`, `'spki'`, or `'jwk'`.\n             * @returns `<Promise>` containing `<ArrayBuffer>`.\n             * @since v15.0.0\n             */\n            exportKey(format: \"jwk\", key: CryptoKey): Promise<JsonWebKey>;\n            exportKey(format: Exclude<KeyFormat, \"jwk\">, key: CryptoKey): Promise<ArrayBuffer>;\n            /**\n             * Using the method and parameters provided in `algorithm`,\n             * `subtle.generateKey()` attempts to generate new keying material.\n             * Depending the method used, the method may generate either a single `<CryptoKey>` or a `<CryptoKeyPair>`.\n             *\n             * The `<CryptoKeyPair>` (public and private key) generating algorithms supported include:\n             *\n             * - `'RSASSA-PKCS1-v1_5'`\n             * - `'RSA-PSS'`\n             * - `'RSA-OAEP'`\n             * - `'ECDSA'`\n             * - `'Ed25519'`\n             * - `'Ed448'`\n             * - `'ECDH'`\n             * - `'X25519'`\n             * - `'X448'`\n             * The `<CryptoKey>` (secret key) generating algorithms supported include:\n             *\n             * - `'HMAC'`\n             * - `'AES-CTR'`\n             * - `'AES-CBC'`\n             * - `'AES-GCM'`\n             * - `'AES-KW'`\n             * @param keyUsages See {@link https://nodejs.org/docs/latest/api/webcrypto.html#cryptokeyusages Key usages}.\n             * @since v15.0.0\n             */\n            generateKey(\n                algorithm: RsaHashedKeyGenParams | EcKeyGenParams,\n                extractable: boolean,\n                keyUsages: readonly KeyUsage[],\n            ): Promise<CryptoKeyPair>;\n            generateKey(\n                algorithm: AesKeyGenParams | HmacKeyGenParams | Pbkdf2Params,\n                extractable: boolean,\n                keyUsages: readonly KeyUsage[],\n            ): Promise<CryptoKey>;\n            generateKey(\n                algorithm: AlgorithmIdentifier,\n                extractable: boolean,\n                keyUsages: KeyUsage[],\n            ): Promise<CryptoKeyPair | CryptoKey>;\n            /**\n             * The `subtle.importKey()` method attempts to interpret the provided `keyData` as the given `format`\n             * to create a `<CryptoKey>` instance using the provided `algorithm`, `extractable`, and `keyUsages` arguments.\n             * If the import is successful, the returned promise will be resolved with the created `<CryptoKey>`.\n             *\n             * If importing a `'PBKDF2'` key, `extractable` must be `false`.\n             * @param format Must be one of `'raw'`, `'pkcs8'`, `'spki'`, or `'jwk'`.\n             * @param keyUsages See {@link https://nodejs.org/docs/latest/api/webcrypto.html#cryptokeyusages Key usages}.\n             * @since v15.0.0\n             */\n            importKey(\n                format: \"jwk\",\n                keyData: JsonWebKey,\n                algorithm:\n                    | AlgorithmIdentifier\n                    | RsaHashedImportParams\n                    | EcKeyImportParams\n                    | HmacImportParams\n                    | AesKeyAlgorithm,\n                extractable: boolean,\n                keyUsages: readonly KeyUsage[],\n            ): Promise<CryptoKey>;\n            importKey(\n                format: Exclude<KeyFormat, \"jwk\">,\n                keyData: BufferSource,\n                algorithm:\n                    | AlgorithmIdentifier\n                    | RsaHashedImportParams\n                    | EcKeyImportParams\n                    | HmacImportParams\n                    | AesKeyAlgorithm,\n                extractable: boolean,\n                keyUsages: KeyUsage[],\n            ): Promise<CryptoKey>;\n            /**\n             * Using the method and parameters given by `algorithm` and the keying material provided by `key`,\n             * `subtle.sign()` attempts to generate a cryptographic signature of `data`. If successful,\n             * the returned promise is resolved with an `<ArrayBuffer>` containing the generated signature.\n             *\n             * The algorithms currently supported include:\n             *\n             * - `'RSASSA-PKCS1-v1_5'`\n             * - `'RSA-PSS'`\n             * - `'ECDSA'`\n             * - `'Ed25519'`\n             * - `'Ed448'`\n             * - `'HMAC'`\n             * @since v15.0.0\n             */\n            sign(\n                algorithm: AlgorithmIdentifier | RsaPssParams | EcdsaParams | Ed448Params,\n                key: CryptoKey,\n                data: BufferSource,\n            ): Promise<ArrayBuffer>;\n            /**\n             * In cryptography, \"wrapping a key\" refers to exporting and then encrypting the keying material.\n             * The `subtle.unwrapKey()` method attempts to decrypt a wrapped key and create a `<CryptoKey>` instance.\n             * It is equivalent to calling `subtle.decrypt()` first on the encrypted key data (using the `wrappedKey`, `unwrapAlgo`, and `unwrappingKey` arguments as input)\n             * then passing the results in to the `subtle.importKey()` method using the `unwrappedKeyAlgo`, `extractable`, and `keyUsages` arguments as inputs.\n             * If successful, the returned promise is resolved with a `<CryptoKey>` object.\n             *\n             * The wrapping algorithms currently supported include:\n             *\n             * - `'RSA-OAEP'`\n             * - `'AES-CTR'`\n             * - `'AES-CBC'`\n             * - `'AES-GCM'`\n             * - `'AES-KW'`\n             *\n             * The unwrapped key algorithms supported include:\n             *\n             * - `'RSASSA-PKCS1-v1_5'`\n             * - `'RSA-PSS'`\n             * - `'RSA-OAEP'`\n             * - `'ECDSA'`\n             * - `'Ed25519'`\n             * - `'Ed448'`\n             * - `'ECDH'`\n             * - `'X25519'`\n             * - `'X448'`\n             * - `'HMAC'`\n             * - `'AES-CTR'`\n             * - `'AES-CBC'`\n             * - `'AES-GCM'`\n             * - `'AES-KW'`\n             * @param format Must be one of `'raw'`, `'pkcs8'`, `'spki'`, or `'jwk'`.\n             * @param keyUsages See {@link https://nodejs.org/docs/latest/api/webcrypto.html#cryptokeyusages Key usages}.\n             * @since v15.0.0\n             */\n            unwrapKey(\n                format: KeyFormat,\n                wrappedKey: BufferSource,\n                unwrappingKey: CryptoKey,\n                unwrapAlgorithm: AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams,\n                unwrappedKeyAlgorithm:\n                    | AlgorithmIdentifier\n                    | RsaHashedImportParams\n                    | EcKeyImportParams\n                    | HmacImportParams\n                    | AesKeyAlgorithm,\n                extractable: boolean,\n                keyUsages: KeyUsage[],\n            ): Promise<CryptoKey>;\n            /**\n             * Using the method and parameters given in `algorithm` and the keying material provided by `key`,\n             * `subtle.verify()` attempts to verify that `signature` is a valid cryptographic signature of `data`.\n             * The returned promise is resolved with either `true` or `false`.\n             *\n             * The algorithms currently supported include:\n             *\n             * - `'RSASSA-PKCS1-v1_5'`\n             * - `'RSA-PSS'`\n             * - `'ECDSA'`\n             * - `'Ed25519'`\n             * - `'Ed448'`\n             * - `'HMAC'`\n             * @since v15.0.0\n             */\n            verify(\n                algorithm: AlgorithmIdentifier | RsaPssParams | EcdsaParams | Ed448Params,\n                key: CryptoKey,\n                signature: BufferSource,\n                data: BufferSource,\n            ): Promise<boolean>;\n            /**\n             * In cryptography, \"wrapping a key\" refers to exporting and then encrypting the keying material.\n             * The `subtle.wrapKey()` method exports the keying material into the format identified by `format`,\n             * then encrypts it using the method and parameters specified by `wrapAlgo` and the keying material provided by `wrappingKey`.\n             * It is the equivalent to calling `subtle.exportKey()` using `format` and `key` as the arguments,\n             * then passing the result to the `subtle.encrypt()` method using `wrappingKey` and `wrapAlgo` as inputs.\n             * If successful, the returned promise will be resolved with an `<ArrayBuffer>` containing the encrypted key data.\n             *\n             * The wrapping algorithms currently supported include:\n             *\n             * - `'RSA-OAEP'`\n             * - `'AES-CTR'`\n             * - `'AES-CBC'`\n             * - `'AES-GCM'`\n             * - `'AES-KW'`\n             * @param format Must be one of `'raw'`, `'pkcs8'`, `'spki'`, or `'jwk'`.\n             * @since v15.0.0\n             */\n            wrapKey(\n                format: KeyFormat,\n                key: CryptoKey,\n                wrappingKey: CryptoKey,\n                wrapAlgorithm: AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams,\n            ): Promise<ArrayBuffer>;\n        }\n    }\n\n    global {\n        var crypto: typeof globalThis extends {\n            crypto: infer T;\n            onmessage: any;\n        } ? T\n            : webcrypto.Crypto;\n    }\n}\ndeclare module \"node:crypto\" {\n    export * from \"crypto\";\n}\n",
  '@types/node/dgram.d.ts':
    "/**\n * The `node:dgram` module provides an implementation of UDP datagram sockets.\n *\n * ```js\n * import dgram from 'node:dgram';\n *\n * const server = dgram.createSocket('udp4');\n *\n * server.on('error', (err) => {\n *   console.error(`server error:\\n${err.stack}`);\n *   server.close();\n * });\n *\n * server.on('message', (msg, rinfo) => {\n *   console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`);\n * });\n *\n * server.on('listening', () => {\n *   const address = server.address();\n *   console.log(`server listening ${address.address}:${address.port}`);\n * });\n *\n * server.bind(41234);\n * // Prints: server listening 0.0.0.0:41234\n * ```\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/dgram.js)\n */\ndeclare module \"dgram\" {\n    import { AddressInfo, BlockList } from \"node:net\";\n    import * as dns from \"node:dns\";\n    import { Abortable, EventEmitter } from \"node:events\";\n    interface RemoteInfo {\n        address: string;\n        family: \"IPv4\" | \"IPv6\";\n        port: number;\n        size: number;\n    }\n    interface BindOptions {\n        port?: number | undefined;\n        address?: string | undefined;\n        exclusive?: boolean | undefined;\n        fd?: number | undefined;\n    }\n    type SocketType = \"udp4\" | \"udp6\";\n    interface SocketOptions extends Abortable {\n        type: SocketType;\n        reuseAddr?: boolean | undefined;\n        reusePort?: boolean | undefined;\n        /**\n         * @default false\n         */\n        ipv6Only?: boolean | undefined;\n        recvBufferSize?: number | undefined;\n        sendBufferSize?: number | undefined;\n        lookup?:\n            | ((\n                hostname: string,\n                options: dns.LookupOneOptions,\n                callback: (err: NodeJS.ErrnoException | null, address: string, family: number) => void,\n            ) => void)\n            | undefined;\n        receiveBlockList?: BlockList | undefined;\n        sendBlockList?: BlockList | undefined;\n    }\n    /**\n     * Creates a `dgram.Socket` object. Once the socket is created, calling `socket.bind()` will instruct the socket to begin listening for datagram\n     * messages. When `address` and `port` are not passed to `socket.bind()` the\n     * method will bind the socket to the \"all interfaces\" address on a random port\n     * (it does the right thing for both `udp4` and `udp6` sockets). The bound address\n     * and port can be retrieved using `socket.address().address` and `socket.address().port`.\n     *\n     * If the `signal` option is enabled, calling `.abort()` on the corresponding `AbortController` is similar to calling `.close()` on the socket:\n     *\n     * ```js\n     * const controller = new AbortController();\n     * const { signal } = controller;\n     * const server = dgram.createSocket({ type: 'udp4', signal });\n     * server.on('message', (msg, rinfo) => {\n     *   console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`);\n     * });\n     * // Later, when you want to close the server.\n     * controller.abort();\n     * ```\n     * @since v0.11.13\n     * @param options Available options are:\n     * @param callback Attached as a listener for `'message'` events. Optional.\n     */\n    function createSocket(type: SocketType, callback?: (msg: Buffer, rinfo: RemoteInfo) => void): Socket;\n    function createSocket(options: SocketOptions, callback?: (msg: Buffer, rinfo: RemoteInfo) => void): Socket;\n    /**\n     * Encapsulates the datagram functionality.\n     *\n     * New instances of `dgram.Socket` are created using {@link createSocket}.\n     * The `new` keyword is not to be used to create `dgram.Socket` instances.\n     * @since v0.1.99\n     */\n    class Socket extends EventEmitter {\n        /**\n         * Tells the kernel to join a multicast group at the given `multicastAddress` and `multicastInterface` using the `IP_ADD_MEMBERSHIP` socket option. If the `multicastInterface` argument is not\n         * specified, the operating system will choose\n         * one interface and will add membership to it. To add membership to every\n         * available interface, call `addMembership` multiple times, once per interface.\n         *\n         * When called on an unbound socket, this method will implicitly bind to a random\n         * port, listening on all interfaces.\n         *\n         * When sharing a UDP socket across multiple `cluster` workers, the`socket.addMembership()` function must be called only once or an`EADDRINUSE` error will occur:\n         *\n         * ```js\n         * import cluster from 'node:cluster';\n         * import dgram from 'node:dgram';\n         *\n         * if (cluster.isPrimary) {\n         *   cluster.fork(); // Works ok.\n         *   cluster.fork(); // Fails with EADDRINUSE.\n         * } else {\n         *   const s = dgram.createSocket('udp4');\n         *   s.bind(1234, () => {\n         *     s.addMembership('224.0.0.114');\n         *   });\n         * }\n         * ```\n         * @since v0.6.9\n         */\n        addMembership(multicastAddress: string, multicastInterface?: string): void;\n        /**\n         * Returns an object containing the address information for a socket.\n         * For UDP sockets, this object will contain `address`, `family`, and `port` properties.\n         *\n         * This method throws `EBADF` if called on an unbound socket.\n         * @since v0.1.99\n         */\n        address(): AddressInfo;\n        /**\n         * For UDP sockets, causes the `dgram.Socket` to listen for datagram\n         * messages on a named `port` and optional `address`. If `port` is not\n         * specified or is `0`, the operating system will attempt to bind to a\n         * random port. If `address` is not specified, the operating system will\n         * attempt to listen on all addresses. Once binding is complete, a `'listening'` event is emitted and the optional `callback` function is\n         * called.\n         *\n         * Specifying both a `'listening'` event listener and passing a `callback` to the `socket.bind()` method is not harmful but not very\n         * useful.\n         *\n         * A bound datagram socket keeps the Node.js process running to receive\n         * datagram messages.\n         *\n         * If binding fails, an `'error'` event is generated. In rare case (e.g.\n         * attempting to bind with a closed socket), an `Error` may be thrown.\n         *\n         * Example of a UDP server listening on port 41234:\n         *\n         * ```js\n         * import dgram from 'node:dgram';\n         *\n         * const server = dgram.createSocket('udp4');\n         *\n         * server.on('error', (err) => {\n         *   console.error(`server error:\\n${err.stack}`);\n         *   server.close();\n         * });\n         *\n         * server.on('message', (msg, rinfo) => {\n         *   console.log(`server got: ${msg} from ${rinfo.address}:${rinfo.port}`);\n         * });\n         *\n         * server.on('listening', () => {\n         *   const address = server.address();\n         *   console.log(`server listening ${address.address}:${address.port}`);\n         * });\n         *\n         * server.bind(41234);\n         * // Prints: server listening 0.0.0.0:41234\n         * ```\n         * @since v0.1.99\n         * @param callback with no parameters. Called when binding is complete.\n         */\n        bind(port?: number, address?: string, callback?: () => void): this;\n        bind(port?: number, callback?: () => void): this;\n        bind(callback?: () => void): this;\n        bind(options: BindOptions, callback?: () => void): this;\n        /**\n         * Close the underlying socket and stop listening for data on it. If a callback is\n         * provided, it is added as a listener for the `'close'` event.\n         * @since v0.1.99\n         * @param callback Called when the socket has been closed.\n         */\n        close(callback?: () => void): this;\n        /**\n         * Associates the `dgram.Socket` to a remote address and port. Every\n         * message sent by this handle is automatically sent to that destination. Also,\n         * the socket will only receive messages from that remote peer.\n         * Trying to call `connect()` on an already connected socket will result\n         * in an `ERR_SOCKET_DGRAM_IS_CONNECTED` exception. If `address` is not\n         * provided, `'127.0.0.1'` (for `udp4` sockets) or `'::1'` (for `udp6` sockets)\n         * will be used by default. Once the connection is complete, a `'connect'` event\n         * is emitted and the optional `callback` function is called. In case of failure,\n         * the `callback` is called or, failing this, an `'error'` event is emitted.\n         * @since v12.0.0\n         * @param callback Called when the connection is completed or on error.\n         */\n        connect(port: number, address?: string, callback?: () => void): void;\n        connect(port: number, callback: () => void): void;\n        /**\n         * A synchronous function that disassociates a connected `dgram.Socket` from\n         * its remote address. Trying to call `disconnect()` on an unbound or already\n         * disconnected socket will result in an `ERR_SOCKET_DGRAM_NOT_CONNECTED` exception.\n         * @since v12.0.0\n         */\n        disconnect(): void;\n        /**\n         * Instructs the kernel to leave a multicast group at `multicastAddress` using the `IP_DROP_MEMBERSHIP` socket option. This method is automatically called by the\n         * kernel when the socket is closed or the process terminates, so most apps will\n         * never have reason to call this.\n         *\n         * If `multicastInterface` is not specified, the operating system will attempt to\n         * drop membership on all valid interfaces.\n         * @since v0.6.9\n         */\n        dropMembership(multicastAddress: string, multicastInterface?: string): void;\n        /**\n         * This method throws `ERR_SOCKET_BUFFER_SIZE` if called on an unbound socket.\n         * @since v8.7.0\n         * @return the `SO_RCVBUF` socket receive buffer size in bytes.\n         */\n        getRecvBufferSize(): number;\n        /**\n         * This method throws `ERR_SOCKET_BUFFER_SIZE` if called on an unbound socket.\n         * @since v8.7.0\n         * @return the `SO_SNDBUF` socket send buffer size in bytes.\n         */\n        getSendBufferSize(): number;\n        /**\n         * @since v18.8.0, v16.19.0\n         * @return Number of bytes queued for sending.\n         */\n        getSendQueueSize(): number;\n        /**\n         * @since v18.8.0, v16.19.0\n         * @return Number of send requests currently in the queue awaiting to be processed.\n         */\n        getSendQueueCount(): number;\n        /**\n         * By default, binding a socket will cause it to block the Node.js process from\n         * exiting as long as the socket is open. The `socket.unref()` method can be used\n         * to exclude the socket from the reference counting that keeps the Node.js\n         * process active. The `socket.ref()` method adds the socket back to the reference\n         * counting and restores the default behavior.\n         *\n         * Calling `socket.ref()` multiples times will have no additional effect.\n         *\n         * The `socket.ref()` method returns a reference to the socket so calls can be\n         * chained.\n         * @since v0.9.1\n         */\n        ref(): this;\n        /**\n         * Returns an object containing the `address`, `family`, and `port` of the remote\n         * endpoint. This method throws an `ERR_SOCKET_DGRAM_NOT_CONNECTED` exception\n         * if the socket is not connected.\n         * @since v12.0.0\n         */\n        remoteAddress(): AddressInfo;\n        /**\n         * Broadcasts a datagram on the socket.\n         * For connectionless sockets, the destination `port` and `address` must be\n         * specified. Connected sockets, on the other hand, will use their associated\n         * remote endpoint, so the `port` and `address` arguments must not be set.\n         *\n         * The `msg` argument contains the message to be sent.\n         * Depending on its type, different behavior can apply. If `msg` is a `Buffer`,\n         * any `TypedArray` or a `DataView`,\n         * the `offset` and `length` specify the offset within the `Buffer` where the\n         * message begins and the number of bytes in the message, respectively.\n         * If `msg` is a `String`, then it is automatically converted to a `Buffer` with `'utf8'` encoding. With messages that\n         * contain multi-byte characters, `offset` and `length` will be calculated with\n         * respect to `byte length` and not the character position.\n         * If `msg` is an array, `offset` and `length` must not be specified.\n         *\n         * The `address` argument is a string. If the value of `address` is a host name,\n         * DNS will be used to resolve the address of the host. If `address` is not\n         * provided or otherwise nullish, `'127.0.0.1'` (for `udp4` sockets) or `'::1'` (for `udp6` sockets) will be used by default.\n         *\n         * If the socket has not been previously bound with a call to `bind`, the socket\n         * is assigned a random port number and is bound to the \"all interfaces\" address\n         * (`'0.0.0.0'` for `udp4` sockets, `'::0'` for `udp6` sockets.)\n         *\n         * An optional `callback` function may be specified to as a way of reporting\n         * DNS errors or for determining when it is safe to reuse the `buf` object.\n         * DNS lookups delay the time to send for at least one tick of the\n         * Node.js event loop.\n         *\n         * The only way to know for sure that the datagram has been sent is by using a `callback`. If an error occurs and a `callback` is given, the error will be\n         * passed as the first argument to the `callback`. If a `callback` is not given,\n         * the error is emitted as an `'error'` event on the `socket` object.\n         *\n         * Offset and length are optional but both _must_ be set if either are used.\n         * They are supported only when the first argument is a `Buffer`, a `TypedArray`,\n         * or a `DataView`.\n         *\n         * This method throws `ERR_SOCKET_BAD_PORT` if called on an unbound socket.\n         *\n         * Example of sending a UDP packet to a port on `localhost`;\n         *\n         * ```js\n         * import dgram from 'node:dgram';\n         * import { Buffer } from 'node:buffer';\n         *\n         * const message = Buffer.from('Some bytes');\n         * const client = dgram.createSocket('udp4');\n         * client.send(message, 41234, 'localhost', (err) => {\n         *   client.close();\n         * });\n         * ```\n         *\n         * Example of sending a UDP packet composed of multiple buffers to a port on`127.0.0.1`;\n         *\n         * ```js\n         * import dgram from 'node:dgram';\n         * import { Buffer } from 'node:buffer';\n         *\n         * const buf1 = Buffer.from('Some ');\n         * const buf2 = Buffer.from('bytes');\n         * const client = dgram.createSocket('udp4');\n         * client.send([buf1, buf2], 41234, (err) => {\n         *   client.close();\n         * });\n         * ```\n         *\n         * Sending multiple buffers might be faster or slower depending on the\n         * application and operating system. Run benchmarks to\n         * determine the optimal strategy on a case-by-case basis. Generally speaking,\n         * however, sending multiple buffers is faster.\n         *\n         * Example of sending a UDP packet using a socket connected to a port on `localhost`:\n         *\n         * ```js\n         * import dgram from 'node:dgram';\n         * import { Buffer } from 'node:buffer';\n         *\n         * const message = Buffer.from('Some bytes');\n         * const client = dgram.createSocket('udp4');\n         * client.connect(41234, 'localhost', (err) => {\n         *   client.send(message, (err) => {\n         *     client.close();\n         *   });\n         * });\n         * ```\n         * @since v0.1.99\n         * @param msg Message to be sent.\n         * @param offset Offset in the buffer where the message starts.\n         * @param length Number of bytes in the message.\n         * @param port Destination port.\n         * @param address Destination host name or IP address.\n         * @param callback Called when the message has been sent.\n         */\n        send(\n            msg: string | NodeJS.ArrayBufferView | readonly any[],\n            port?: number,\n            address?: string,\n            callback?: (error: Error | null, bytes: number) => void,\n        ): void;\n        send(\n            msg: string | NodeJS.ArrayBufferView | readonly any[],\n            port?: number,\n            callback?: (error: Error | null, bytes: number) => void,\n        ): void;\n        send(\n            msg: string | NodeJS.ArrayBufferView | readonly any[],\n            callback?: (error: Error | null, bytes: number) => void,\n        ): void;\n        send(\n            msg: string | NodeJS.ArrayBufferView,\n            offset: number,\n            length: number,\n            port?: number,\n            address?: string,\n            callback?: (error: Error | null, bytes: number) => void,\n        ): void;\n        send(\n            msg: string | NodeJS.ArrayBufferView,\n            offset: number,\n            length: number,\n            port?: number,\n            callback?: (error: Error | null, bytes: number) => void,\n        ): void;\n        send(\n            msg: string | NodeJS.ArrayBufferView,\n            offset: number,\n            length: number,\n            callback?: (error: Error | null, bytes: number) => void,\n        ): void;\n        /**\n         * Sets or clears the `SO_BROADCAST` socket option. When set to `true`, UDP\n         * packets may be sent to a local interface's broadcast address.\n         *\n         * This method throws `EBADF` if called on an unbound socket.\n         * @since v0.6.9\n         */\n        setBroadcast(flag: boolean): void;\n        /**\n         * _All references to scope in this section are referring to [IPv6 Zone Indices](https://en.wikipedia.org/wiki/IPv6_address#Scoped_literal_IPv6_addresses), which are defined by [RFC\n         * 4007](https://tools.ietf.org/html/rfc4007). In string form, an IP_\n         * _with a scope index is written as `'IP%scope'` where scope is an interface name_\n         * _or interface number._\n         *\n         * Sets the default outgoing multicast interface of the socket to a chosen\n         * interface or back to system interface selection. The `multicastInterface` must\n         * be a valid string representation of an IP from the socket's family.\n         *\n         * For IPv4 sockets, this should be the IP configured for the desired physical\n         * interface. All packets sent to multicast on the socket will be sent on the\n         * interface determined by the most recent successful use of this call.\n         *\n         * For IPv6 sockets, `multicastInterface` should include a scope to indicate the\n         * interface as in the examples that follow. In IPv6, individual `send` calls can\n         * also use explicit scope in addresses, so only packets sent to a multicast\n         * address without specifying an explicit scope are affected by the most recent\n         * successful use of this call.\n         *\n         * This method throws `EBADF` if called on an unbound socket.\n         *\n         * #### Example: IPv6 outgoing multicast interface\n         *\n         * On most systems, where scope format uses the interface name:\n         *\n         * ```js\n         * const socket = dgram.createSocket('udp6');\n         *\n         * socket.bind(1234, () => {\n         *   socket.setMulticastInterface('::%eth1');\n         * });\n         * ```\n         *\n         * On Windows, where scope format uses an interface number:\n         *\n         * ```js\n         * const socket = dgram.createSocket('udp6');\n         *\n         * socket.bind(1234, () => {\n         *   socket.setMulticastInterface('::%2');\n         * });\n         * ```\n         *\n         * #### Example: IPv4 outgoing multicast interface\n         *\n         * All systems use an IP of the host on the desired physical interface:\n         *\n         * ```js\n         * const socket = dgram.createSocket('udp4');\n         *\n         * socket.bind(1234, () => {\n         *   socket.setMulticastInterface('10.0.0.2');\n         * });\n         * ```\n         * @since v8.6.0\n         */\n        setMulticastInterface(multicastInterface: string): void;\n        /**\n         * Sets or clears the `IP_MULTICAST_LOOP` socket option. When set to `true`,\n         * multicast packets will also be received on the local interface.\n         *\n         * This method throws `EBADF` if called on an unbound socket.\n         * @since v0.3.8\n         */\n        setMulticastLoopback(flag: boolean): boolean;\n        /**\n         * Sets the `IP_MULTICAST_TTL` socket option. While TTL generally stands for\n         * \"Time to Live\", in this context it specifies the number of IP hops that a\n         * packet is allowed to travel through, specifically for multicast traffic. Each\n         * router or gateway that forwards a packet decrements the TTL. If the TTL is\n         * decremented to 0 by a router, it will not be forwarded.\n         *\n         * The `ttl` argument may be between 0 and 255\\. The default on most systems is `1`.\n         *\n         * This method throws `EBADF` if called on an unbound socket.\n         * @since v0.3.8\n         */\n        setMulticastTTL(ttl: number): number;\n        /**\n         * Sets the `SO_RCVBUF` socket option. Sets the maximum socket receive buffer\n         * in bytes.\n         *\n         * This method throws `ERR_SOCKET_BUFFER_SIZE` if called on an unbound socket.\n         * @since v8.7.0\n         */\n        setRecvBufferSize(size: number): void;\n        /**\n         * Sets the `SO_SNDBUF` socket option. Sets the maximum socket send buffer\n         * in bytes.\n         *\n         * This method throws `ERR_SOCKET_BUFFER_SIZE` if called on an unbound socket.\n         * @since v8.7.0\n         */\n        setSendBufferSize(size: number): void;\n        /**\n         * Sets the `IP_TTL` socket option. While TTL generally stands for \"Time to Live\",\n         * in this context it specifies the number of IP hops that a packet is allowed to\n         * travel through. Each router or gateway that forwards a packet decrements the\n         * TTL. If the TTL is decremented to 0 by a router, it will not be forwarded.\n         * Changing TTL values is typically done for network probes or when multicasting.\n         *\n         * The `ttl` argument may be between 1 and 255\\. The default on most systems\n         * is 64.\n         *\n         * This method throws `EBADF` if called on an unbound socket.\n         * @since v0.1.101\n         */\n        setTTL(ttl: number): number;\n        /**\n         * By default, binding a socket will cause it to block the Node.js process from\n         * exiting as long as the socket is open. The `socket.unref()` method can be used\n         * to exclude the socket from the reference counting that keeps the Node.js\n         * process active, allowing the process to exit even if the socket is still\n         * listening.\n         *\n         * Calling `socket.unref()` multiple times will have no additional effect.\n         *\n         * The `socket.unref()` method returns a reference to the socket so calls can be\n         * chained.\n         * @since v0.9.1\n         */\n        unref(): this;\n        /**\n         * Tells the kernel to join a source-specific multicast channel at the given `sourceAddress` and `groupAddress`, using the `multicastInterface` with the `IP_ADD_SOURCE_MEMBERSHIP` socket\n         * option. If the `multicastInterface` argument\n         * is not specified, the operating system will choose one interface and will add\n         * membership to it. To add membership to every available interface, call `socket.addSourceSpecificMembership()` multiple times, once per interface.\n         *\n         * When called on an unbound socket, this method will implicitly bind to a random\n         * port, listening on all interfaces.\n         * @since v13.1.0, v12.16.0\n         */\n        addSourceSpecificMembership(sourceAddress: string, groupAddress: string, multicastInterface?: string): void;\n        /**\n         * Instructs the kernel to leave a source-specific multicast channel at the given `sourceAddress` and `groupAddress` using the `IP_DROP_SOURCE_MEMBERSHIP` socket option. This method is\n         * automatically called by the kernel when the\n         * socket is closed or the process terminates, so most apps will never have\n         * reason to call this.\n         *\n         * If `multicastInterface` is not specified, the operating system will attempt to\n         * drop membership on all valid interfaces.\n         * @since v13.1.0, v12.16.0\n         */\n        dropSourceSpecificMembership(sourceAddress: string, groupAddress: string, multicastInterface?: string): void;\n        /**\n         * events.EventEmitter\n         * 1. close\n         * 2. connect\n         * 3. error\n         * 4. listening\n         * 5. message\n         */\n        addListener(event: string, listener: (...args: any[]) => void): this;\n        addListener(event: \"close\", listener: () => void): this;\n        addListener(event: \"connect\", listener: () => void): this;\n        addListener(event: \"error\", listener: (err: Error) => void): this;\n        addListener(event: \"listening\", listener: () => void): this;\n        addListener(event: \"message\", listener: (msg: Buffer, rinfo: RemoteInfo) => void): this;\n        emit(event: string | symbol, ...args: any[]): boolean;\n        emit(event: \"close\"): boolean;\n        emit(event: \"connect\"): boolean;\n        emit(event: \"error\", err: Error): boolean;\n        emit(event: \"listening\"): boolean;\n        emit(event: \"message\", msg: Buffer, rinfo: RemoteInfo): boolean;\n        on(event: string, listener: (...args: any[]) => void): this;\n        on(event: \"close\", listener: () => void): this;\n        on(event: \"connect\", listener: () => void): this;\n        on(event: \"error\", listener: (err: Error) => void): this;\n        on(event: \"listening\", listener: () => void): this;\n        on(event: \"message\", listener: (msg: Buffer, rinfo: RemoteInfo) => void): this;\n        once(event: string, listener: (...args: any[]) => void): this;\n        once(event: \"close\", listener: () => void): this;\n        once(event: \"connect\", listener: () => void): this;\n        once(event: \"error\", listener: (err: Error) => void): this;\n        once(event: \"listening\", listener: () => void): this;\n        once(event: \"message\", listener: (msg: Buffer, rinfo: RemoteInfo) => void): this;\n        prependListener(event: string, listener: (...args: any[]) => void): this;\n        prependListener(event: \"close\", listener: () => void): this;\n        prependListener(event: \"connect\", listener: () => void): this;\n        prependListener(event: \"error\", listener: (err: Error) => void): this;\n        prependListener(event: \"listening\", listener: () => void): this;\n        prependListener(event: \"message\", listener: (msg: Buffer, rinfo: RemoteInfo) => void): this;\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\n        prependOnceListener(event: \"close\", listener: () => void): this;\n        prependOnceListener(event: \"connect\", listener: () => void): this;\n        prependOnceListener(event: \"error\", listener: (err: Error) => void): this;\n        prependOnceListener(event: \"listening\", listener: () => void): this;\n        prependOnceListener(event: \"message\", listener: (msg: Buffer, rinfo: RemoteInfo) => void): this;\n        /**\n         * Calls `socket.close()` and returns a promise that fulfills when the socket has closed.\n         * @since v20.5.0\n         */\n        [Symbol.asyncDispose](): Promise<void>;\n    }\n}\ndeclare module \"node:dgram\" {\n    export * from \"dgram\";\n}\n",
  '@types/node/diagnostics_channel.d.ts':
    "/**\n * The `node:diagnostics_channel` module provides an API to create named channels\n * to report arbitrary message data for diagnostics purposes.\n *\n * It can be accessed using:\n *\n * ```js\n * import diagnostics_channel from 'node:diagnostics_channel';\n * ```\n *\n * It is intended that a module writer wanting to report diagnostics messages\n * will create one or many top-level channels to report messages through.\n * Channels may also be acquired at runtime but it is not encouraged\n * due to the additional overhead of doing so. Channels may be exported for\n * convenience, but as long as the name is known it can be acquired anywhere.\n *\n * If you intend for your module to produce diagnostics data for others to\n * consume it is recommended that you include documentation of what named\n * channels are used along with the shape of the message data. Channel names\n * should generally include the module name to avoid collisions with data from\n * other modules.\n * @since v15.1.0, v14.17.0\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/diagnostics_channel.js)\n */\ndeclare module \"diagnostics_channel\" {\n    import { AsyncLocalStorage } from \"node:async_hooks\";\n    /**\n     * Check if there are active subscribers to the named channel. This is helpful if\n     * the message you want to send might be expensive to prepare.\n     *\n     * This API is optional but helpful when trying to publish messages from very\n     * performance-sensitive code.\n     *\n     * ```js\n     * import diagnostics_channel from 'node:diagnostics_channel';\n     *\n     * if (diagnostics_channel.hasSubscribers('my-channel')) {\n     *   // There are subscribers, prepare and publish message\n     * }\n     * ```\n     * @since v15.1.0, v14.17.0\n     * @param name The channel name\n     * @return If there are active subscribers\n     */\n    function hasSubscribers(name: string | symbol): boolean;\n    /**\n     * This is the primary entry-point for anyone wanting to publish to a named\n     * channel. It produces a channel object which is optimized to reduce overhead at\n     * publish time as much as possible.\n     *\n     * ```js\n     * import diagnostics_channel from 'node:diagnostics_channel';\n     *\n     * const channel = diagnostics_channel.channel('my-channel');\n     * ```\n     * @since v15.1.0, v14.17.0\n     * @param name The channel name\n     * @return The named channel object\n     */\n    function channel(name: string | symbol): Channel;\n    type ChannelListener = (message: unknown, name: string | symbol) => void;\n    /**\n     * Register a message handler to subscribe to this channel. This message handler\n     * will be run synchronously whenever a message is published to the channel. Any\n     * errors thrown in the message handler will trigger an `'uncaughtException'`.\n     *\n     * ```js\n     * import diagnostics_channel from 'node:diagnostics_channel';\n     *\n     * diagnostics_channel.subscribe('my-channel', (message, name) => {\n     *   // Received data\n     * });\n     * ```\n     * @since v18.7.0, v16.17.0\n     * @param name The channel name\n     * @param onMessage The handler to receive channel messages\n     */\n    function subscribe(name: string | symbol, onMessage: ChannelListener): void;\n    /**\n     * Remove a message handler previously registered to this channel with {@link subscribe}.\n     *\n     * ```js\n     * import diagnostics_channel from 'node:diagnostics_channel';\n     *\n     * function onMessage(message, name) {\n     *   // Received data\n     * }\n     *\n     * diagnostics_channel.subscribe('my-channel', onMessage);\n     *\n     * diagnostics_channel.unsubscribe('my-channel', onMessage);\n     * ```\n     * @since v18.7.0, v16.17.0\n     * @param name The channel name\n     * @param onMessage The previous subscribed handler to remove\n     * @return `true` if the handler was found, `false` otherwise.\n     */\n    function unsubscribe(name: string | symbol, onMessage: ChannelListener): boolean;\n    /**\n     * Creates a `TracingChannel` wrapper for the given `TracingChannel Channels`. If a name is given, the corresponding tracing\n     * channels will be created in the form of `tracing:${name}:${eventType}` where `eventType` corresponds to the types of `TracingChannel Channels`.\n     *\n     * ```js\n     * import diagnostics_channel from 'node:diagnostics_channel';\n     *\n     * const channelsByName = diagnostics_channel.tracingChannel('my-channel');\n     *\n     * // or...\n     *\n     * const channelsByCollection = diagnostics_channel.tracingChannel({\n     *   start: diagnostics_channel.channel('tracing:my-channel:start'),\n     *   end: diagnostics_channel.channel('tracing:my-channel:end'),\n     *   asyncStart: diagnostics_channel.channel('tracing:my-channel:asyncStart'),\n     *   asyncEnd: diagnostics_channel.channel('tracing:my-channel:asyncEnd'),\n     *   error: diagnostics_channel.channel('tracing:my-channel:error'),\n     * });\n     * ```\n     * @since v19.9.0\n     * @experimental\n     * @param nameOrChannels Channel name or object containing all the `TracingChannel Channels`\n     * @return Collection of channels to trace with\n     */\n    function tracingChannel<\n        StoreType = unknown,\n        ContextType extends object = StoreType extends object ? StoreType : object,\n    >(\n        nameOrChannels: string | TracingChannelCollection<StoreType, ContextType>,\n    ): TracingChannel<StoreType, ContextType>;\n    /**\n     * The class `Channel` represents an individual named channel within the data\n     * pipeline. It is used to track subscribers and to publish messages when there\n     * are subscribers present. It exists as a separate object to avoid channel\n     * lookups at publish time, enabling very fast publish speeds and allowing\n     * for heavy use while incurring very minimal cost. Channels are created with {@link channel}, constructing a channel directly\n     * with `new Channel(name)` is not supported.\n     * @since v15.1.0, v14.17.0\n     */\n    class Channel<StoreType = unknown, ContextType = StoreType> {\n        readonly name: string | symbol;\n        /**\n         * Check if there are active subscribers to this channel. This is helpful if\n         * the message you want to send might be expensive to prepare.\n         *\n         * This API is optional but helpful when trying to publish messages from very\n         * performance-sensitive code.\n         *\n         * ```js\n         * import diagnostics_channel from 'node:diagnostics_channel';\n         *\n         * const channel = diagnostics_channel.channel('my-channel');\n         *\n         * if (channel.hasSubscribers) {\n         *   // There are subscribers, prepare and publish message\n         * }\n         * ```\n         * @since v15.1.0, v14.17.0\n         */\n        readonly hasSubscribers: boolean;\n        private constructor(name: string | symbol);\n        /**\n         * Publish a message to any subscribers to the channel. This will trigger\n         * message handlers synchronously so they will execute within the same context.\n         *\n         * ```js\n         * import diagnostics_channel from 'node:diagnostics_channel';\n         *\n         * const channel = diagnostics_channel.channel('my-channel');\n         *\n         * channel.publish({\n         *   some: 'message',\n         * });\n         * ```\n         * @since v15.1.0, v14.17.0\n         * @param message The message to send to the channel subscribers\n         */\n        publish(message: unknown): void;\n        /**\n         * Register a message handler to subscribe to this channel. This message handler\n         * will be run synchronously whenever a message is published to the channel. Any\n         * errors thrown in the message handler will trigger an `'uncaughtException'`.\n         *\n         * ```js\n         * import diagnostics_channel from 'node:diagnostics_channel';\n         *\n         * const channel = diagnostics_channel.channel('my-channel');\n         *\n         * channel.subscribe((message, name) => {\n         *   // Received data\n         * });\n         * ```\n         * @since v15.1.0, v14.17.0\n         * @deprecated Since v18.7.0,v16.17.0 - Use {@link subscribe(name, onMessage)}\n         * @param onMessage The handler to receive channel messages\n         */\n        subscribe(onMessage: ChannelListener): void;\n        /**\n         * Remove a message handler previously registered to this channel with `channel.subscribe(onMessage)`.\n         *\n         * ```js\n         * import diagnostics_channel from 'node:diagnostics_channel';\n         *\n         * const channel = diagnostics_channel.channel('my-channel');\n         *\n         * function onMessage(message, name) {\n         *   // Received data\n         * }\n         *\n         * channel.subscribe(onMessage);\n         *\n         * channel.unsubscribe(onMessage);\n         * ```\n         * @since v15.1.0, v14.17.0\n         * @deprecated Since v18.7.0,v16.17.0 - Use {@link unsubscribe(name, onMessage)}\n         * @param onMessage The previous subscribed handler to remove\n         * @return `true` if the handler was found, `false` otherwise.\n         */\n        unsubscribe(onMessage: ChannelListener): void;\n        /**\n         * When `channel.runStores(context, ...)` is called, the given context data\n         * will be applied to any store bound to the channel. If the store has already been\n         * bound the previous `transform` function will be replaced with the new one.\n         * The `transform` function may be omitted to set the given context data as the\n         * context directly.\n         *\n         * ```js\n         * import diagnostics_channel from 'node:diagnostics_channel';\n         * import { AsyncLocalStorage } from 'node:async_hooks';\n         *\n         * const store = new AsyncLocalStorage();\n         *\n         * const channel = diagnostics_channel.channel('my-channel');\n         *\n         * channel.bindStore(store, (data) => {\n         *   return { data };\n         * });\n         * ```\n         * @since v19.9.0\n         * @experimental\n         * @param store The store to which to bind the context data\n         * @param transform Transform context data before setting the store context\n         */\n        bindStore(store: AsyncLocalStorage<StoreType>, transform?: (context: ContextType) => StoreType): void;\n        /**\n         * Remove a message handler previously registered to this channel with `channel.bindStore(store)`.\n         *\n         * ```js\n         * import diagnostics_channel from 'node:diagnostics_channel';\n         * import { AsyncLocalStorage } from 'node:async_hooks';\n         *\n         * const store = new AsyncLocalStorage();\n         *\n         * const channel = diagnostics_channel.channel('my-channel');\n         *\n         * channel.bindStore(store);\n         * channel.unbindStore(store);\n         * ```\n         * @since v19.9.0\n         * @experimental\n         * @param store The store to unbind from the channel.\n         * @return `true` if the store was found, `false` otherwise.\n         */\n        unbindStore(store: AsyncLocalStorage<StoreType>): boolean;\n        /**\n         * Applies the given data to any AsyncLocalStorage instances bound to the channel\n         * for the duration of the given function, then publishes to the channel within\n         * the scope of that data is applied to the stores.\n         *\n         * If a transform function was given to `channel.bindStore(store)` it will be\n         * applied to transform the message data before it becomes the context value for\n         * the store. The prior storage context is accessible from within the transform\n         * function in cases where context linking is required.\n         *\n         * The context applied to the store should be accessible in any async code which\n         * continues from execution which began during the given function, however\n         * there are some situations in which `context loss` may occur.\n         *\n         * ```js\n         * import diagnostics_channel from 'node:diagnostics_channel';\n         * import { AsyncLocalStorage } from 'node:async_hooks';\n         *\n         * const store = new AsyncLocalStorage();\n         *\n         * const channel = diagnostics_channel.channel('my-channel');\n         *\n         * channel.bindStore(store, (message) => {\n         *   const parent = store.getStore();\n         *   return new Span(message, parent);\n         * });\n         * channel.runStores({ some: 'message' }, () => {\n         *   store.getStore(); // Span({ some: 'message' })\n         * });\n         * ```\n         * @since v19.9.0\n         * @experimental\n         * @param context Message to send to subscribers and bind to stores\n         * @param fn Handler to run within the entered storage context\n         * @param thisArg The receiver to be used for the function call.\n         * @param args Optional arguments to pass to the function.\n         */\n        runStores<ThisArg = any, Args extends any[] = any[], Result = any>(\n            context: ContextType,\n            fn: (this: ThisArg, ...args: Args) => Result,\n            thisArg?: ThisArg,\n            ...args: Args\n        ): Result;\n    }\n    interface TracingChannelSubscribers<ContextType extends object> {\n        start: (message: ContextType) => void;\n        end: (\n            message: ContextType & {\n                error?: unknown;\n                result?: unknown;\n            },\n        ) => void;\n        asyncStart: (\n            message: ContextType & {\n                error?: unknown;\n                result?: unknown;\n            },\n        ) => void;\n        asyncEnd: (\n            message: ContextType & {\n                error?: unknown;\n                result?: unknown;\n            },\n        ) => void;\n        error: (\n            message: ContextType & {\n                error: unknown;\n            },\n        ) => void;\n    }\n    interface TracingChannelCollection<StoreType = unknown, ContextType = StoreType> {\n        start: Channel<StoreType, ContextType>;\n        end: Channel<StoreType, ContextType>;\n        asyncStart: Channel<StoreType, ContextType>;\n        asyncEnd: Channel<StoreType, ContextType>;\n        error: Channel<StoreType, ContextType>;\n    }\n    /**\n     * The class `TracingChannel` is a collection of `TracingChannel Channels` which\n     * together express a single traceable action. It is used to formalize and\n     * simplify the process of producing events for tracing application flow. {@link tracingChannel} is used to construct a `TracingChannel`. As with `Channel` it is recommended to create and reuse a\n     * single `TracingChannel` at the top-level of the file rather than creating them\n     * dynamically.\n     * @since v19.9.0\n     * @experimental\n     */\n    class TracingChannel<StoreType = unknown, ContextType extends object = {}> implements TracingChannelCollection {\n        start: Channel<StoreType, ContextType>;\n        end: Channel<StoreType, ContextType>;\n        asyncStart: Channel<StoreType, ContextType>;\n        asyncEnd: Channel<StoreType, ContextType>;\n        error: Channel<StoreType, ContextType>;\n        /**\n         * Helper to subscribe a collection of functions to the corresponding channels.\n         * This is the same as calling `channel.subscribe(onMessage)` on each channel\n         * individually.\n         *\n         * ```js\n         * import diagnostics_channel from 'node:diagnostics_channel';\n         *\n         * const channels = diagnostics_channel.tracingChannel('my-channel');\n         *\n         * channels.subscribe({\n         *   start(message) {\n         *     // Handle start message\n         *   },\n         *   end(message) {\n         *     // Handle end message\n         *   },\n         *   asyncStart(message) {\n         *     // Handle asyncStart message\n         *   },\n         *   asyncEnd(message) {\n         *     // Handle asyncEnd message\n         *   },\n         *   error(message) {\n         *     // Handle error message\n         *   },\n         * });\n         * ```\n         * @since v19.9.0\n         * @experimental\n         * @param subscribers Set of `TracingChannel Channels` subscribers\n         */\n        subscribe(subscribers: TracingChannelSubscribers<ContextType>): void;\n        /**\n         * Helper to unsubscribe a collection of functions from the corresponding channels.\n         * This is the same as calling `channel.unsubscribe(onMessage)` on each channel\n         * individually.\n         *\n         * ```js\n         * import diagnostics_channel from 'node:diagnostics_channel';\n         *\n         * const channels = diagnostics_channel.tracingChannel('my-channel');\n         *\n         * channels.unsubscribe({\n         *   start(message) {\n         *     // Handle start message\n         *   },\n         *   end(message) {\n         *     // Handle end message\n         *   },\n         *   asyncStart(message) {\n         *     // Handle asyncStart message\n         *   },\n         *   asyncEnd(message) {\n         *     // Handle asyncEnd message\n         *   },\n         *   error(message) {\n         *     // Handle error message\n         *   },\n         * });\n         * ```\n         * @since v19.9.0\n         * @experimental\n         * @param subscribers Set of `TracingChannel Channels` subscribers\n         * @return `true` if all handlers were successfully unsubscribed, and `false` otherwise.\n         */\n        unsubscribe(subscribers: TracingChannelSubscribers<ContextType>): void;\n        /**\n         * Trace a synchronous function call. This will always produce a `start event` and `end event` around the execution and may produce an `error event` if the given function throws an error.\n         * This will run the given function using `channel.runStores(context, ...)` on the `start` channel which ensures all\n         * events should have any bound stores set to match this trace context.\n         *\n         * To ensure only correct trace graphs are formed, events will only be published if subscribers are present prior to starting the trace. Subscriptions\n         * which are added after the trace begins will not receive future events from that trace, only future traces will be seen.\n         *\n         * ```js\n         * import diagnostics_channel from 'node:diagnostics_channel';\n         *\n         * const channels = diagnostics_channel.tracingChannel('my-channel');\n         *\n         * channels.traceSync(() => {\n         *   // Do something\n         * }, {\n         *   some: 'thing',\n         * });\n         * ```\n         * @since v19.9.0\n         * @experimental\n         * @param fn Function to wrap a trace around\n         * @param context Shared object to correlate events through\n         * @param thisArg The receiver to be used for the function call\n         * @param args Optional arguments to pass to the function\n         * @return The return value of the given function\n         */\n        traceSync<ThisArg = any, Args extends any[] = any[], Result = any>(\n            fn: (this: ThisArg, ...args: Args) => Result,\n            context?: ContextType,\n            thisArg?: ThisArg,\n            ...args: Args\n        ): Result;\n        /**\n         * Trace a promise-returning function call. This will always produce a `start event` and `end event` around the synchronous portion of the\n         * function execution, and will produce an `asyncStart event` and `asyncEnd event` when a promise continuation is reached. It may also\n         * produce an `error event` if the given function throws an error or the\n         * returned promise rejects. This will run the given function using `channel.runStores(context, ...)` on the `start` channel which ensures all\n         * events should have any bound stores set to match this trace context.\n         *\n         * To ensure only correct trace graphs are formed, events will only be published if subscribers are present prior to starting the trace. Subscriptions\n         * which are added after the trace begins will not receive future events from that trace, only future traces will be seen.\n         *\n         * ```js\n         * import diagnostics_channel from 'node:diagnostics_channel';\n         *\n         * const channels = diagnostics_channel.tracingChannel('my-channel');\n         *\n         * channels.tracePromise(async () => {\n         *   // Do something\n         * }, {\n         *   some: 'thing',\n         * });\n         * ```\n         * @since v19.9.0\n         * @experimental\n         * @param fn Promise-returning function to wrap a trace around\n         * @param context Shared object to correlate trace events through\n         * @param thisArg The receiver to be used for the function call\n         * @param args Optional arguments to pass to the function\n         * @return Chained from promise returned by the given function\n         */\n        tracePromise<ThisArg = any, Args extends any[] = any[], Result = any>(\n            fn: (this: ThisArg, ...args: Args) => Promise<Result>,\n            context?: ContextType,\n            thisArg?: ThisArg,\n            ...args: Args\n        ): Promise<Result>;\n        /**\n         * Trace a callback-receiving function call. This will always produce a `start event` and `end event` around the synchronous portion of the\n         * function execution, and will produce a `asyncStart event` and `asyncEnd event` around the callback execution. It may also produce an `error event` if the given function throws an error or\n         * the returned\n         * promise rejects. This will run the given function using `channel.runStores(context, ...)` on the `start` channel which ensures all\n         * events should have any bound stores set to match this trace context.\n         *\n         * The `position` will be -1 by default to indicate the final argument should\n         * be used as the callback.\n         *\n         * ```js\n         * import diagnostics_channel from 'node:diagnostics_channel';\n         *\n         * const channels = diagnostics_channel.tracingChannel('my-channel');\n         *\n         * channels.traceCallback((arg1, callback) => {\n         *   // Do something\n         *   callback(null, 'result');\n         * }, 1, {\n         *   some: 'thing',\n         * }, thisArg, arg1, callback);\n         * ```\n         *\n         * The callback will also be run with `channel.runStores(context, ...)` which\n         * enables context loss recovery in some cases.\n         *\n         * To ensure only correct trace graphs are formed, events will only be published if subscribers are present prior to starting the trace. Subscriptions\n         * which are added after the trace begins will not receive future events from that trace, only future traces will be seen.\n         *\n         * ```js\n         * import diagnostics_channel from 'node:diagnostics_channel';\n         * import { AsyncLocalStorage } from 'node:async_hooks';\n         *\n         * const channels = diagnostics_channel.tracingChannel('my-channel');\n         * const myStore = new AsyncLocalStorage();\n         *\n         * // The start channel sets the initial store data to something\n         * // and stores that store data value on the trace context object\n         * channels.start.bindStore(myStore, (data) => {\n         *   const span = new Span(data);\n         *   data.span = span;\n         *   return span;\n         * });\n         *\n         * // Then asyncStart can restore from that data it stored previously\n         * channels.asyncStart.bindStore(myStore, (data) => {\n         *   return data.span;\n         * });\n         * ```\n         * @since v19.9.0\n         * @experimental\n         * @param fn callback using function to wrap a trace around\n         * @param position Zero-indexed argument position of expected callback\n         * @param context Shared object to correlate trace events through\n         * @param thisArg The receiver to be used for the function call\n         * @param args Optional arguments to pass to the function\n         * @return The return value of the given function\n         */\n        traceCallback<ThisArg = any, Args extends any[] = any[], Result = any>(\n            fn: (this: ThisArg, ...args: Args) => Result,\n            position?: number,\n            context?: ContextType,\n            thisArg?: ThisArg,\n            ...args: Args\n        ): Result;\n        /**\n         * `true` if any of the individual channels has a subscriber, `false` if not.\n         *\n         * This is a helper method available on a {@link TracingChannel} instance to check\n         * if any of the [TracingChannel Channels](https://nodejs.org/api/diagnostics_channel.html#tracingchannel-channels) have subscribers.\n         * A `true` is returned if any of them have at least one subscriber, a `false` is returned otherwise.\n         *\n         * ```js\n         * const diagnostics_channel = require('node:diagnostics_channel');\n         *\n         * const channels = diagnostics_channel.tracingChannel('my-channel');\n         *\n         * if (channels.hasSubscribers) {\n         *   // Do something\n         * }\n         * ```\n         * @since v22.0.0, v20.13.0\n         */\n        readonly hasSubscribers: boolean;\n    }\n}\ndeclare module \"node:diagnostics_channel\" {\n    export * from \"diagnostics_channel\";\n}\n",
  '@types/node/dns.d.ts':
    '/**\n * The `node:dns` module enables name resolution. For example, use it to look up IP\n * addresses of host names.\n *\n * Although named for the [Domain Name System (DNS)](https://en.wikipedia.org/wiki/Domain_Name_System), it does not always use the\n * DNS protocol for lookups. {@link lookup} uses the operating system\n * facilities to perform name resolution. It may not need to perform any network\n * communication. To perform name resolution the way other applications on the same\n * system do, use {@link lookup}.\n *\n * ```js\n * import dns from \'node:dns\';\n *\n * dns.lookup(\'example.org\', (err, address, family) => {\n *   console.log(\'address: %j family: IPv%s\', address, family);\n * });\n * // address: "93.184.216.34" family: IPv4\n * ```\n *\n * All other functions in the `node:dns` module connect to an actual DNS server to\n * perform name resolution. They will always use the network to perform DNS\n * queries. These functions do not use the same set of configuration files used by {@link lookup} (e.g. `/etc/hosts`). Use these functions to always perform\n * DNS queries, bypassing other name-resolution facilities.\n *\n * ```js\n * import dns from \'node:dns\';\n *\n * dns.resolve4(\'archive.org\', (err, addresses) => {\n *   if (err) throw err;\n *\n *   console.log(`addresses: ${JSON.stringify(addresses)}`);\n *\n *   addresses.forEach((a) => {\n *     dns.reverse(a, (err, hostnames) => {\n *       if (err) {\n *         throw err;\n *       }\n *       console.log(`reverse for ${a}: ${JSON.stringify(hostnames)}`);\n *     });\n *   });\n * });\n * ```\n *\n * See the [Implementation considerations section](https://nodejs.org/docs/latest-v22.x/api/dns.html#implementation-considerations) for more information.\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/dns.js)\n */\ndeclare module "dns" {\n    import * as dnsPromises from "node:dns/promises";\n    // Supported getaddrinfo flags.\n    /**\n     * Limits returned address types to the types of non-loopback addresses configured on the system. For example, IPv4 addresses are\n     * only returned if the current system has at least one IPv4 address configured.\n     */\n    export const ADDRCONFIG: number;\n    /**\n     * If the IPv6 family was specified, but no IPv6 addresses were found, then return IPv4 mapped IPv6 addresses. It is not supported\n     * on some operating systems (e.g. FreeBSD 10.1).\n     */\n    export const V4MAPPED: number;\n    /**\n     * If `dns.V4MAPPED` is specified, return resolved IPv6 addresses as\n     * well as IPv4 mapped IPv6 addresses.\n     */\n    export const ALL: number;\n    export interface LookupOptions {\n        /**\n         * The record family. Must be `4`, `6`, or `0`. For backward compatibility reasons, `\'IPv4\'` and `\'IPv6\'` are interpreted\n         * as `4` and `6` respectively. The value 0 indicates that either an IPv4 or IPv6 address is returned. If the value `0` is used\n         * with `{ all: true } (see below)`, both IPv4 and IPv6 addresses are returned.\n         * @default 0\n         */\n        family?: number | "IPv4" | "IPv6" | undefined;\n        /**\n         * One or more [supported `getaddrinfo`](https://nodejs.org/docs/latest-v22.x/api/dns.html#supported-getaddrinfo-flags) flags. Multiple flags may be\n         * passed by bitwise `OR`ing their values.\n         */\n        hints?: number | undefined;\n        /**\n         * When `true`, the callback returns all resolved addresses in an array. Otherwise, returns a single address.\n         * @default false\n         */\n        all?: boolean | undefined;\n        /**\n         * When `verbatim`, the resolved addresses are return unsorted. When `ipv4first`, the resolved addresses are sorted\n         * by placing IPv4 addresses before IPv6 addresses. When `ipv6first`, the resolved addresses are sorted by placing IPv6\n         * addresses before IPv4 addresses. Default value is configurable using\n         * {@link setDefaultResultOrder} or [`--dns-result-order`](https://nodejs.org/docs/latest-v22.x/api/cli.html#--dns-result-orderorder).\n         * @default `verbatim` (addresses are not reordered)\n         * @since v22.1.0\n         */\n        order?: "ipv4first" | "ipv6first" | "verbatim" | undefined;\n        /**\n         * When `true`, the callback receives IPv4 and IPv6 addresses in the order the DNS resolver returned them. When `false`, IPv4\n         * addresses are placed before IPv6 addresses. This option will be deprecated in favor of `order`. When both are specified,\n         * `order` has higher precedence. New code should only use `order`. Default value is configurable using {@link setDefaultResultOrder}\n         * @default true (addresses are not reordered)\n         * @deprecated Please use `order` option\n         */\n        verbatim?: boolean | undefined;\n    }\n    export interface LookupOneOptions extends LookupOptions {\n        all?: false | undefined;\n    }\n    export interface LookupAllOptions extends LookupOptions {\n        all: true;\n    }\n    export interface LookupAddress {\n        /**\n         * A string representation of an IPv4 or IPv6 address.\n         */\n        address: string;\n        /**\n         * `4` or `6`, denoting the family of `address`, or `0` if the address is not an IPv4 or IPv6 address. `0` is a likely indicator of a\n         * bug in the name resolution service used by the operating system.\n         */\n        family: number;\n    }\n    /**\n     * Resolves a host name (e.g. `\'nodejs.org\'`) into the first found A (IPv4) or\n     * AAAA (IPv6) record. All `option` properties are optional. If `options` is an\n     * integer, then it must be `4` or `6` – if `options` is `0` or not provided, then\n     * IPv4 and IPv6 addresses are both returned if found.\n     *\n     * With the `all` option set to `true`, the arguments for `callback` change to `(err, addresses)`, with `addresses` being an array of objects with the\n     * properties `address` and `family`.\n     *\n     * On error, `err` is an `Error` object, where `err.code` is the error code.\n     * Keep in mind that `err.code` will be set to `\'ENOTFOUND\'` not only when\n     * the host name does not exist but also when the lookup fails in other ways\n     * such as no available file descriptors.\n     *\n     * `dns.lookup()` does not necessarily have anything to do with the DNS protocol.\n     * The implementation uses an operating system facility that can associate names\n     * with addresses and vice versa. This implementation can have subtle but\n     * important consequences on the behavior of any Node.js program. Please take some\n     * time to consult the [Implementation considerations section](https://nodejs.org/docs/latest-v22.x/api/dns.html#implementation-considerations)\n     * before using `dns.lookup()`.\n     *\n     * Example usage:\n     *\n     * ```js\n     * import dns from \'node:dns\';\n     * const options = {\n     *   family: 6,\n     *   hints: dns.ADDRCONFIG | dns.V4MAPPED,\n     * };\n     * dns.lookup(\'example.com\', options, (err, address, family) =>\n     *   console.log(\'address: %j family: IPv%s\', address, family));\n     * // address: "2606:2800:220:1:248:1893:25c8:1946" family: IPv6\n     *\n     * // When options.all is true, the result will be an Array.\n     * options.all = true;\n     * dns.lookup(\'example.com\', options, (err, addresses) =>\n     *   console.log(\'addresses: %j\', addresses));\n     * // addresses: [{"address":"2606:2800:220:1:248:1893:25c8:1946","family":6}]\n     * ```\n     *\n     * If this method is invoked as its [util.promisify()](https://nodejs.org/docs/latest-v22.x/api/util.html#utilpromisifyoriginal) ed\n     * version, and `all` is not set to `true`, it returns a `Promise` for an `Object` with `address` and `family` properties.\n     * @since v0.1.90\n     */\n    export function lookup(\n        hostname: string,\n        family: number,\n        callback: (err: NodeJS.ErrnoException | null, address: string, family: number) => void,\n    ): void;\n    export function lookup(\n        hostname: string,\n        options: LookupOneOptions,\n        callback: (err: NodeJS.ErrnoException | null, address: string, family: number) => void,\n    ): void;\n    export function lookup(\n        hostname: string,\n        options: LookupAllOptions,\n        callback: (err: NodeJS.ErrnoException | null, addresses: LookupAddress[]) => void,\n    ): void;\n    export function lookup(\n        hostname: string,\n        options: LookupOptions,\n        callback: (err: NodeJS.ErrnoException | null, address: string | LookupAddress[], family: number) => void,\n    ): void;\n    export function lookup(\n        hostname: string,\n        callback: (err: NodeJS.ErrnoException | null, address: string, family: number) => void,\n    ): void;\n    export namespace lookup {\n        function __promisify__(hostname: string, options: LookupAllOptions): Promise<LookupAddress[]>;\n        function __promisify__(hostname: string, options?: LookupOneOptions | number): Promise<LookupAddress>;\n        function __promisify__(hostname: string, options: LookupOptions): Promise<LookupAddress | LookupAddress[]>;\n    }\n    /**\n     * Resolves the given `address` and `port` into a host name and service using\n     * the operating system\'s underlying `getnameinfo` implementation.\n     *\n     * If `address` is not a valid IP address, a `TypeError` will be thrown.\n     * The `port` will be coerced to a number. If it is not a legal port, a `TypeError` will be thrown.\n     *\n     * On an error, `err` is an [`Error`](https://nodejs.org/docs/latest-v22.x/api/errors.html#class-error) object,\n     * where `err.code` is the error code.\n     *\n     * ```js\n     * import dns from \'node:dns\';\n     * dns.lookupService(\'127.0.0.1\', 22, (err, hostname, service) => {\n     *   console.log(hostname, service);\n     *   // Prints: localhost ssh\n     * });\n     * ```\n     *\n     * If this method is invoked as its [util.promisify()](https://nodejs.org/docs/latest-v22.x/api/util.html#utilpromisifyoriginal) ed\n     * version, it returns a `Promise` for an `Object` with `hostname` and `service` properties.\n     * @since v0.11.14\n     */\n    export function lookupService(\n        address: string,\n        port: number,\n        callback: (err: NodeJS.ErrnoException | null, hostname: string, service: string) => void,\n    ): void;\n    export namespace lookupService {\n        function __promisify__(\n            address: string,\n            port: number,\n        ): Promise<{\n            hostname: string;\n            service: string;\n        }>;\n    }\n    export interface ResolveOptions {\n        ttl: boolean;\n    }\n    export interface ResolveWithTtlOptions extends ResolveOptions {\n        ttl: true;\n    }\n    export interface RecordWithTtl {\n        address: string;\n        ttl: number;\n    }\n    /** @deprecated Use `AnyARecord` or `AnyAaaaRecord` instead. */\n    export type AnyRecordWithTtl = AnyARecord | AnyAaaaRecord;\n    export interface AnyARecord extends RecordWithTtl {\n        type: "A";\n    }\n    export interface AnyAaaaRecord extends RecordWithTtl {\n        type: "AAAA";\n    }\n    export interface CaaRecord {\n        critical: number;\n        issue?: string | undefined;\n        issuewild?: string | undefined;\n        iodef?: string | undefined;\n        contactemail?: string | undefined;\n        contactphone?: string | undefined;\n    }\n    export interface MxRecord {\n        priority: number;\n        exchange: string;\n    }\n    export interface AnyMxRecord extends MxRecord {\n        type: "MX";\n    }\n    export interface NaptrRecord {\n        flags: string;\n        service: string;\n        regexp: string;\n        replacement: string;\n        order: number;\n        preference: number;\n    }\n    export interface AnyNaptrRecord extends NaptrRecord {\n        type: "NAPTR";\n    }\n    export interface SoaRecord {\n        nsname: string;\n        hostmaster: string;\n        serial: number;\n        refresh: number;\n        retry: number;\n        expire: number;\n        minttl: number;\n    }\n    export interface AnySoaRecord extends SoaRecord {\n        type: "SOA";\n    }\n    export interface SrvRecord {\n        priority: number;\n        weight: number;\n        port: number;\n        name: string;\n    }\n    export interface AnySrvRecord extends SrvRecord {\n        type: "SRV";\n    }\n    export interface AnyTxtRecord {\n        type: "TXT";\n        entries: string[];\n    }\n    export interface AnyNsRecord {\n        type: "NS";\n        value: string;\n    }\n    export interface AnyPtrRecord {\n        type: "PTR";\n        value: string;\n    }\n    export interface AnyCnameRecord {\n        type: "CNAME";\n        value: string;\n    }\n    export type AnyRecord =\n        | AnyARecord\n        | AnyAaaaRecord\n        | AnyCnameRecord\n        | AnyMxRecord\n        | AnyNaptrRecord\n        | AnyNsRecord\n        | AnyPtrRecord\n        | AnySoaRecord\n        | AnySrvRecord\n        | AnyTxtRecord;\n    /**\n     * Uses the DNS protocol to resolve a host name (e.g. `\'nodejs.org\'`) into an array\n     * of the resource records. The `callback` function has arguments `(err, records)`. When successful, `records` will be an array of resource\n     * records. The type and structure of individual results varies based on `rrtype`:\n     *\n     * <omitted>\n     *\n     * On error, `err` is an [`Error`](https://nodejs.org/docs/latest-v22.x/api/errors.html#class-error) object,\n     * where `err.code` is one of the `DNS error codes`.\n     * @since v0.1.27\n     * @param hostname Host name to resolve.\n     * @param [rrtype=\'A\'] Resource record type.\n     */\n    export function resolve(\n        hostname: string,\n        callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void,\n    ): void;\n    export function resolve(\n        hostname: string,\n        rrtype: "A",\n        callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void,\n    ): void;\n    export function resolve(\n        hostname: string,\n        rrtype: "AAAA",\n        callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void,\n    ): void;\n    export function resolve(\n        hostname: string,\n        rrtype: "ANY",\n        callback: (err: NodeJS.ErrnoException | null, addresses: AnyRecord[]) => void,\n    ): void;\n    export function resolve(\n        hostname: string,\n        rrtype: "CNAME",\n        callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void,\n    ): void;\n    export function resolve(\n        hostname: string,\n        rrtype: "MX",\n        callback: (err: NodeJS.ErrnoException | null, addresses: MxRecord[]) => void,\n    ): void;\n    export function resolve(\n        hostname: string,\n        rrtype: "NAPTR",\n        callback: (err: NodeJS.ErrnoException | null, addresses: NaptrRecord[]) => void,\n    ): void;\n    export function resolve(\n        hostname: string,\n        rrtype: "NS",\n        callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void,\n    ): void;\n    export function resolve(\n        hostname: string,\n        rrtype: "PTR",\n        callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void,\n    ): void;\n    export function resolve(\n        hostname: string,\n        rrtype: "SOA",\n        callback: (err: NodeJS.ErrnoException | null, addresses: SoaRecord) => void,\n    ): void;\n    export function resolve(\n        hostname: string,\n        rrtype: "SRV",\n        callback: (err: NodeJS.ErrnoException | null, addresses: SrvRecord[]) => void,\n    ): void;\n    export function resolve(\n        hostname: string,\n        rrtype: "TXT",\n        callback: (err: NodeJS.ErrnoException | null, addresses: string[][]) => void,\n    ): void;\n    export function resolve(\n        hostname: string,\n        rrtype: string,\n        callback: (\n            err: NodeJS.ErrnoException | null,\n            addresses: string[] | MxRecord[] | NaptrRecord[] | SoaRecord | SrvRecord[] | string[][] | AnyRecord[],\n        ) => void,\n    ): void;\n    export namespace resolve {\n        function __promisify__(hostname: string, rrtype?: "A" | "AAAA" | "CNAME" | "NS" | "PTR"): Promise<string[]>;\n        function __promisify__(hostname: string, rrtype: "ANY"): Promise<AnyRecord[]>;\n        function __promisify__(hostname: string, rrtype: "MX"): Promise<MxRecord[]>;\n        function __promisify__(hostname: string, rrtype: "NAPTR"): Promise<NaptrRecord[]>;\n        function __promisify__(hostname: string, rrtype: "SOA"): Promise<SoaRecord>;\n        function __promisify__(hostname: string, rrtype: "SRV"): Promise<SrvRecord[]>;\n        function __promisify__(hostname: string, rrtype: "TXT"): Promise<string[][]>;\n        function __promisify__(\n            hostname: string,\n            rrtype: string,\n        ): Promise<string[] | MxRecord[] | NaptrRecord[] | SoaRecord | SrvRecord[] | string[][] | AnyRecord[]>;\n    }\n    /**\n     * Uses the DNS protocol to resolve a IPv4 addresses (`A` records) for the `hostname`. The `addresses` argument passed to the `callback` function\n     * will contain an array of IPv4 addresses (e.g.`[\'74.125.79.104\', \'74.125.79.105\', \'74.125.79.106\']`).\n     * @since v0.1.16\n     * @param hostname Host name to resolve.\n     */\n    export function resolve4(\n        hostname: string,\n        callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void,\n    ): void;\n    export function resolve4(\n        hostname: string,\n        options: ResolveWithTtlOptions,\n        callback: (err: NodeJS.ErrnoException | null, addresses: RecordWithTtl[]) => void,\n    ): void;\n    export function resolve4(\n        hostname: string,\n        options: ResolveOptions,\n        callback: (err: NodeJS.ErrnoException | null, addresses: string[] | RecordWithTtl[]) => void,\n    ): void;\n    export namespace resolve4 {\n        function __promisify__(hostname: string): Promise<string[]>;\n        function __promisify__(hostname: string, options: ResolveWithTtlOptions): Promise<RecordWithTtl[]>;\n        function __promisify__(hostname: string, options?: ResolveOptions): Promise<string[] | RecordWithTtl[]>;\n    }\n    /**\n     * Uses the DNS protocol to resolve IPv6 addresses (`AAAA` records) for the `hostname`. The `addresses` argument passed to the `callback` function\n     * will contain an array of IPv6 addresses.\n     * @since v0.1.16\n     * @param hostname Host name to resolve.\n     */\n    export function resolve6(\n        hostname: string,\n        callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void,\n    ): void;\n    export function resolve6(\n        hostname: string,\n        options: ResolveWithTtlOptions,\n        callback: (err: NodeJS.ErrnoException | null, addresses: RecordWithTtl[]) => void,\n    ): void;\n    export function resolve6(\n        hostname: string,\n        options: ResolveOptions,\n        callback: (err: NodeJS.ErrnoException | null, addresses: string[] | RecordWithTtl[]) => void,\n    ): void;\n    export namespace resolve6 {\n        function __promisify__(hostname: string): Promise<string[]>;\n        function __promisify__(hostname: string, options: ResolveWithTtlOptions): Promise<RecordWithTtl[]>;\n        function __promisify__(hostname: string, options?: ResolveOptions): Promise<string[] | RecordWithTtl[]>;\n    }\n    /**\n     * Uses the DNS protocol to resolve `CNAME` records for the `hostname`. The `addresses` argument passed to the `callback` function\n     * will contain an array of canonical name records available for the `hostname` (e.g. `[\'bar.example.com\']`).\n     * @since v0.3.2\n     */\n    export function resolveCname(\n        hostname: string,\n        callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void,\n    ): void;\n    export namespace resolveCname {\n        function __promisify__(hostname: string): Promise<string[]>;\n    }\n    /**\n     * Uses the DNS protocol to resolve `CAA` records for the `hostname`. The `addresses` argument passed to the `callback` function\n     * will contain an array of certification authority authorization records\n     * available for the `hostname` (e.g. `[{critical: 0, iodef: \'mailto:pki@example.com\'}, {critical: 128, issue: \'pki.example.com\'}]`).\n     * @since v15.0.0, v14.17.0\n     */\n    export function resolveCaa(\n        hostname: string,\n        callback: (err: NodeJS.ErrnoException | null, records: CaaRecord[]) => void,\n    ): void;\n    export namespace resolveCaa {\n        function __promisify__(hostname: string): Promise<CaaRecord[]>;\n    }\n    /**\n     * Uses the DNS protocol to resolve mail exchange records (`MX` records) for the `hostname`. The `addresses` argument passed to the `callback` function will\n     * contain an array of objects containing both a `priority` and `exchange` property (e.g. `[{priority: 10, exchange: \'mx.example.com\'}, ...]`).\n     * @since v0.1.27\n     */\n    export function resolveMx(\n        hostname: string,\n        callback: (err: NodeJS.ErrnoException | null, addresses: MxRecord[]) => void,\n    ): void;\n    export namespace resolveMx {\n        function __promisify__(hostname: string): Promise<MxRecord[]>;\n    }\n    /**\n     * Uses the DNS protocol to resolve regular expression-based records (`NAPTR` records) for the `hostname`. The `addresses` argument passed to the `callback` function will contain an array of\n     * objects with the following properties:\n     *\n     * * `flags`\n     * * `service`\n     * * `regexp`\n     * * `replacement`\n     * * `order`\n     * * `preference`\n     *\n     * ```js\n     * {\n     *   flags: \'s\',\n     *   service: \'SIP+D2U\',\n     *   regexp: \'\',\n     *   replacement: \'_sip._udp.example.com\',\n     *   order: 30,\n     *   preference: 100\n     * }\n     * ```\n     * @since v0.9.12\n     */\n    export function resolveNaptr(\n        hostname: string,\n        callback: (err: NodeJS.ErrnoException | null, addresses: NaptrRecord[]) => void,\n    ): void;\n    export namespace resolveNaptr {\n        function __promisify__(hostname: string): Promise<NaptrRecord[]>;\n    }\n    /**\n     * Uses the DNS protocol to resolve name server records (`NS` records) for the `hostname`. The `addresses` argument passed to the `callback` function will\n     * contain an array of name server records available for `hostname` (e.g. `[\'ns1.example.com\', \'ns2.example.com\']`).\n     * @since v0.1.90\n     */\n    export function resolveNs(\n        hostname: string,\n        callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void,\n    ): void;\n    export namespace resolveNs {\n        function __promisify__(hostname: string): Promise<string[]>;\n    }\n    /**\n     * Uses the DNS protocol to resolve pointer records (`PTR` records) for the `hostname`. The `addresses` argument passed to the `callback` function will\n     * be an array of strings containing the reply records.\n     * @since v6.0.0\n     */\n    export function resolvePtr(\n        hostname: string,\n        callback: (err: NodeJS.ErrnoException | null, addresses: string[]) => void,\n    ): void;\n    export namespace resolvePtr {\n        function __promisify__(hostname: string): Promise<string[]>;\n    }\n    /**\n     * Uses the DNS protocol to resolve a start of authority record (`SOA` record) for\n     * the `hostname`. The `address` argument passed to the `callback` function will\n     * be an object with the following properties:\n     *\n     * * `nsname`\n     * * `hostmaster`\n     * * `serial`\n     * * `refresh`\n     * * `retry`\n     * * `expire`\n     * * `minttl`\n     *\n     * ```js\n     * {\n     *   nsname: \'ns.example.com\',\n     *   hostmaster: \'root.example.com\',\n     *   serial: 2013101809,\n     *   refresh: 10000,\n     *   retry: 2400,\n     *   expire: 604800,\n     *   minttl: 3600\n     * }\n     * ```\n     * @since v0.11.10\n     */\n    export function resolveSoa(\n        hostname: string,\n        callback: (err: NodeJS.ErrnoException | null, address: SoaRecord) => void,\n    ): void;\n    export namespace resolveSoa {\n        function __promisify__(hostname: string): Promise<SoaRecord>;\n    }\n    /**\n     * Uses the DNS protocol to resolve service records (`SRV` records) for the `hostname`. The `addresses` argument passed to the `callback` function will\n     * be an array of objects with the following properties:\n     *\n     * * `priority`\n     * * `weight`\n     * * `port`\n     * * `name`\n     *\n     * ```js\n     * {\n     *   priority: 10,\n     *   weight: 5,\n     *   port: 21223,\n     *   name: \'service.example.com\'\n     * }\n     * ```\n     * @since v0.1.27\n     */\n    export function resolveSrv(\n        hostname: string,\n        callback: (err: NodeJS.ErrnoException | null, addresses: SrvRecord[]) => void,\n    ): void;\n    export namespace resolveSrv {\n        function __promisify__(hostname: string): Promise<SrvRecord[]>;\n    }\n    /**\n     * Uses the DNS protocol to resolve text queries (`TXT` records) for the `hostname`. The `records` argument passed to the `callback` function is a\n     * two-dimensional array of the text records available for `hostname` (e.g.`[ [\'v=spf1 ip4:0.0.0.0 \', \'~all\' ] ]`). Each sub-array contains TXT chunks of\n     * one record. Depending on the use case, these could be either joined together or\n     * treated separately.\n     * @since v0.1.27\n     */\n    export function resolveTxt(\n        hostname: string,\n        callback: (err: NodeJS.ErrnoException | null, addresses: string[][]) => void,\n    ): void;\n    export namespace resolveTxt {\n        function __promisify__(hostname: string): Promise<string[][]>;\n    }\n    /**\n     * Uses the DNS protocol to resolve all records (also known as `ANY` or `*` query).\n     * The `ret` argument passed to the `callback` function will be an array containing\n     * various types of records. Each object has a property `type` that indicates the\n     * type of the current record. And depending on the `type`, additional properties\n     * will be present on the object:\n     *\n     * <omitted>\n     *\n     * Here is an example of the `ret` object passed to the callback:\n     *\n     * ```js\n     * [ { type: \'A\', address: \'127.0.0.1\', ttl: 299 },\n     *   { type: \'CNAME\', value: \'example.com\' },\n     *   { type: \'MX\', exchange: \'alt4.aspmx.l.example.com\', priority: 50 },\n     *   { type: \'NS\', value: \'ns1.example.com\' },\n     *   { type: \'TXT\', entries: [ \'v=spf1 include:_spf.example.com ~all\' ] },\n     *   { type: \'SOA\',\n     *     nsname: \'ns1.example.com\',\n     *     hostmaster: \'admin.example.com\',\n     *     serial: 156696742,\n     *     refresh: 900,\n     *     retry: 900,\n     *     expire: 1800,\n     *     minttl: 60 } ]\n     * ```\n     *\n     * DNS server operators may choose not to respond to `ANY` queries. It may be better to call individual methods like {@link resolve4}, {@link resolveMx}, and so on. For more details, see\n     * [RFC 8482](https://tools.ietf.org/html/rfc8482).\n     */\n    export function resolveAny(\n        hostname: string,\n        callback: (err: NodeJS.ErrnoException | null, addresses: AnyRecord[]) => void,\n    ): void;\n    export namespace resolveAny {\n        function __promisify__(hostname: string): Promise<AnyRecord[]>;\n    }\n    /**\n     * Performs a reverse DNS query that resolves an IPv4 or IPv6 address to an\n     * array of host names.\n     *\n     * On error, `err` is an [`Error`](https://nodejs.org/docs/latest-v22.x/api/errors.html#class-error) object, where `err.code` is\n     * one of the [DNS error codes](https://nodejs.org/docs/latest-v22.x/api/dns.html#error-codes).\n     * @since v0.1.16\n     */\n    export function reverse(\n        ip: string,\n        callback: (err: NodeJS.ErrnoException | null, hostnames: string[]) => void,\n    ): void;\n    /**\n     * Get the default value for `order` in {@link lookup} and [`dnsPromises.lookup()`](https://nodejs.org/docs/latest-v22.x/api/dns.html#dnspromiseslookuphostname-options).\n     * The value could be:\n     *\n     * * `ipv4first`: for `order` defaulting to `ipv4first`.\n     * * `ipv6first`: for `order` defaulting to `ipv6first`.\n     * * `verbatim`: for `order` defaulting to `verbatim`.\n     * @since v18.17.0\n     */\n    export function getDefaultResultOrder(): "ipv4first" | "ipv6first" | "verbatim";\n    /**\n     * Sets the IP address and port of servers to be used when performing DNS\n     * resolution. The `servers` argument is an array of [RFC 5952](https://tools.ietf.org/html/rfc5952#section-6) formatted\n     * addresses. If the port is the IANA default DNS port (53) it can be omitted.\n     *\n     * ```js\n     * dns.setServers([\n     *   \'4.4.4.4\',\n     *   \'[2001:4860:4860::8888]\',\n     *   \'4.4.4.4:1053\',\n     *   \'[2001:4860:4860::8888]:1053\',\n     * ]);\n     * ```\n     *\n     * An error will be thrown if an invalid address is provided.\n     *\n     * The `dns.setServers()` method must not be called while a DNS query is in\n     * progress.\n     *\n     * The {@link setServers} method affects only {@link resolve}, `dns.resolve*()` and {@link reverse} (and specifically _not_ {@link lookup}).\n     *\n     * This method works much like [resolve.conf](https://man7.org/linux/man-pages/man5/resolv.conf.5.html).\n     * That is, if attempting to resolve with the first server provided results in a `NOTFOUND` error, the `resolve()` method will _not_ attempt to resolve with\n     * subsequent servers provided. Fallback DNS servers will only be used if the\n     * earlier ones time out or result in some other error.\n     * @since v0.11.3\n     * @param servers array of [RFC 5952](https://datatracker.ietf.org/doc/html/rfc5952#section-6) formatted addresses\n     */\n    export function setServers(servers: readonly string[]): void;\n    /**\n     * Returns an array of IP address strings, formatted according to [RFC 5952](https://tools.ietf.org/html/rfc5952#section-6),\n     * that are currently configured for DNS resolution. A string will include a port\n     * section if a custom port is used.\n     *\n     * ```js\n     * [\n     *   \'4.4.4.4\',\n     *   \'2001:4860:4860::8888\',\n     *   \'4.4.4.4:1053\',\n     *   \'[2001:4860:4860::8888]:1053\',\n     * ]\n     * ```\n     * @since v0.11.3\n     */\n    export function getServers(): string[];\n    /**\n     * Set the default value of `order` in {@link lookup} and [`dnsPromises.lookup()`](https://nodejs.org/docs/latest-v22.x/api/dns.html#dnspromiseslookuphostname-options).\n     * The value could be:\n     *\n     * * `ipv4first`: sets default `order` to `ipv4first`.\n     * * `ipv6first`: sets default `order` to `ipv6first`.\n     * * `verbatim`: sets default `order` to `verbatim`.\n     *\n     * The default is `verbatim` and {@link setDefaultResultOrder} have higher\n     * priority than [`--dns-result-order`](https://nodejs.org/docs/latest-v22.x/api/cli.html#--dns-result-orderorder). When using\n     * [worker threads](https://nodejs.org/docs/latest-v22.x/api/worker_threads.html), {@link setDefaultResultOrder} from the main\n     * thread won\'t affect the default dns orders in workers.\n     * @since v16.4.0, v14.18.0\n     * @param order must be `\'ipv4first\'`, `\'ipv6first\'` or `\'verbatim\'`.\n     */\n    export function setDefaultResultOrder(order: "ipv4first" | "ipv6first" | "verbatim"): void;\n    // Error codes\n    export const NODATA: "ENODATA";\n    export const FORMERR: "EFORMERR";\n    export const SERVFAIL: "ESERVFAIL";\n    export const NOTFOUND: "ENOTFOUND";\n    export const NOTIMP: "ENOTIMP";\n    export const REFUSED: "EREFUSED";\n    export const BADQUERY: "EBADQUERY";\n    export const BADNAME: "EBADNAME";\n    export const BADFAMILY: "EBADFAMILY";\n    export const BADRESP: "EBADRESP";\n    export const CONNREFUSED: "ECONNREFUSED";\n    export const TIMEOUT: "ETIMEOUT";\n    export const EOF: "EOF";\n    export const FILE: "EFILE";\n    export const NOMEM: "ENOMEM";\n    export const DESTRUCTION: "EDESTRUCTION";\n    export const BADSTR: "EBADSTR";\n    export const BADFLAGS: "EBADFLAGS";\n    export const NONAME: "ENONAME";\n    export const BADHINTS: "EBADHINTS";\n    export const NOTINITIALIZED: "ENOTINITIALIZED";\n    export const LOADIPHLPAPI: "ELOADIPHLPAPI";\n    export const ADDRGETNETWORKPARAMS: "EADDRGETNETWORKPARAMS";\n    export const CANCELLED: "ECANCELLED";\n    export interface ResolverOptions {\n        /**\n         * Query timeout in milliseconds, or `-1` to use the default timeout.\n         */\n        timeout?: number | undefined;\n        /**\n         * The number of tries the resolver will try contacting each name server before giving up.\n         * @default 4\n         */\n        tries?: number;\n    }\n    /**\n     * An independent resolver for DNS requests.\n     *\n     * Creating a new resolver uses the default server settings. Setting\n     * the servers used for a resolver using [`resolver.setServers()`](https://nodejs.org/docs/latest-v22.x/api/dns.html#dnssetserversservers) does not affect\n     * other resolvers:\n     *\n     * ```js\n     * import { Resolver } from \'node:dns\';\n     * const resolver = new Resolver();\n     * resolver.setServers([\'4.4.4.4\']);\n     *\n     * // This request will use the server at 4.4.4.4, independent of global settings.\n     * resolver.resolve4(\'example.org\', (err, addresses) => {\n     *   // ...\n     * });\n     * ```\n     *\n     * The following methods from the `node:dns` module are available:\n     *\n     * * `resolver.getServers()`\n     * * `resolver.resolve()`\n     * * `resolver.resolve4()`\n     * * `resolver.resolve6()`\n     * * `resolver.resolveAny()`\n     * * `resolver.resolveCaa()`\n     * * `resolver.resolveCname()`\n     * * `resolver.resolveMx()`\n     * * `resolver.resolveNaptr()`\n     * * `resolver.resolveNs()`\n     * * `resolver.resolvePtr()`\n     * * `resolver.resolveSoa()`\n     * * `resolver.resolveSrv()`\n     * * `resolver.resolveTxt()`\n     * * `resolver.reverse()`\n     * * `resolver.setServers()`\n     * @since v8.3.0\n     */\n    export class Resolver {\n        constructor(options?: ResolverOptions);\n        /**\n         * Cancel all outstanding DNS queries made by this resolver. The corresponding\n         * callbacks will be called with an error with code `ECANCELLED`.\n         * @since v8.3.0\n         */\n        cancel(): void;\n        getServers: typeof getServers;\n        resolve: typeof resolve;\n        resolve4: typeof resolve4;\n        resolve6: typeof resolve6;\n        resolveAny: typeof resolveAny;\n        resolveCaa: typeof resolveCaa;\n        resolveCname: typeof resolveCname;\n        resolveMx: typeof resolveMx;\n        resolveNaptr: typeof resolveNaptr;\n        resolveNs: typeof resolveNs;\n        resolvePtr: typeof resolvePtr;\n        resolveSoa: typeof resolveSoa;\n        resolveSrv: typeof resolveSrv;\n        resolveTxt: typeof resolveTxt;\n        reverse: typeof reverse;\n        /**\n         * The resolver instance will send its requests from the specified IP address.\n         * This allows programs to specify outbound interfaces when used on multi-homed\n         * systems.\n         *\n         * If a v4 or v6 address is not specified, it is set to the default and the\n         * operating system will choose a local address automatically.\n         *\n         * The resolver will use the v4 local address when making requests to IPv4 DNS\n         * servers, and the v6 local address when making requests to IPv6 DNS servers.\n         * The `rrtype` of resolution requests has no impact on the local address used.\n         * @since v15.1.0, v14.17.0\n         * @param [ipv4=\'0.0.0.0\'] A string representation of an IPv4 address.\n         * @param [ipv6=\'::0\'] A string representation of an IPv6 address.\n         */\n        setLocalAddress(ipv4?: string, ipv6?: string): void;\n        setServers: typeof setServers;\n    }\n    export { dnsPromises as promises };\n}\ndeclare module "node:dns" {\n    export * from "dns";\n}\n',
  '@types/node/dns/promises.d.ts':
    "/**\n * The `dns.promises` API provides an alternative set of asynchronous DNS methods\n * that return `Promise` objects rather than using callbacks. The API is accessible\n * via `import { promises as dnsPromises } from 'node:dns'` or `import dnsPromises from 'node:dns/promises'`.\n * @since v10.6.0\n */\ndeclare module \"dns/promises\" {\n    import {\n        AnyRecord,\n        CaaRecord,\n        LookupAddress,\n        LookupAllOptions,\n        LookupOneOptions,\n        LookupOptions,\n        MxRecord,\n        NaptrRecord,\n        RecordWithTtl,\n        ResolveOptions,\n        ResolverOptions,\n        ResolveWithTtlOptions,\n        SoaRecord,\n        SrvRecord,\n    } from \"node:dns\";\n    /**\n     * Returns an array of IP address strings, formatted according to [RFC 5952](https://tools.ietf.org/html/rfc5952#section-6),\n     * that are currently configured for DNS resolution. A string will include a port\n     * section if a custom port is used.\n     *\n     * ```js\n     * [\n     *   '4.4.4.4',\n     *   '2001:4860:4860::8888',\n     *   '4.4.4.4:1053',\n     *   '[2001:4860:4860::8888]:1053',\n     * ]\n     * ```\n     * @since v10.6.0\n     */\n    function getServers(): string[];\n    /**\n     * Resolves a host name (e.g. `'nodejs.org'`) into the first found A (IPv4) or\n     * AAAA (IPv6) record. All `option` properties are optional. If `options` is an\n     * integer, then it must be `4` or `6` – if `options` is not provided, then IPv4\n     * and IPv6 addresses are both returned if found.\n     *\n     * With the `all` option set to `true`, the `Promise` is resolved with `addresses` being an array of objects with the properties `address` and `family`.\n     *\n     * On error, the `Promise` is rejected with an [`Error`](https://nodejs.org/docs/latest-v20.x/api/errors.html#class-error) object, where `err.code` is the error code.\n     * Keep in mind that `err.code` will be set to `'ENOTFOUND'` not only when\n     * the host name does not exist but also when the lookup fails in other ways\n     * such as no available file descriptors.\n     *\n     * [`dnsPromises.lookup()`](https://nodejs.org/docs/latest-v20.x/api/dns.html#dnspromiseslookuphostname-options) does not necessarily have anything to do with the DNS\n     * protocol. The implementation uses an operating system facility that can\n     * associate names with addresses and vice versa. This implementation can have\n     * subtle but important consequences on the behavior of any Node.js program. Please\n     * take some time to consult the [Implementation considerations section](https://nodejs.org/docs/latest-v20.x/api/dns.html#implementation-considerations) before\n     * using `dnsPromises.lookup()`.\n     *\n     * Example usage:\n     *\n     * ```js\n     * import dns from 'node:dns';\n     * const dnsPromises = dns.promises;\n     * const options = {\n     *   family: 6,\n     *   hints: dns.ADDRCONFIG | dns.V4MAPPED,\n     * };\n     *\n     * dnsPromises.lookup('example.com', options).then((result) => {\n     *   console.log('address: %j family: IPv%s', result.address, result.family);\n     *   // address: \"2606:2800:220:1:248:1893:25c8:1946\" family: IPv6\n     * });\n     *\n     * // When options.all is true, the result will be an Array.\n     * options.all = true;\n     * dnsPromises.lookup('example.com', options).then((result) => {\n     *   console.log('addresses: %j', result);\n     *   // addresses: [{\"address\":\"2606:2800:220:1:248:1893:25c8:1946\",\"family\":6}]\n     * });\n     * ```\n     * @since v10.6.0\n     */\n    function lookup(hostname: string, family: number): Promise<LookupAddress>;\n    function lookup(hostname: string, options: LookupOneOptions): Promise<LookupAddress>;\n    function lookup(hostname: string, options: LookupAllOptions): Promise<LookupAddress[]>;\n    function lookup(hostname: string, options: LookupOptions): Promise<LookupAddress | LookupAddress[]>;\n    function lookup(hostname: string): Promise<LookupAddress>;\n    /**\n     * Resolves the given `address` and `port` into a host name and service using\n     * the operating system's underlying `getnameinfo` implementation.\n     *\n     * If `address` is not a valid IP address, a `TypeError` will be thrown.\n     * The `port` will be coerced to a number. If it is not a legal port, a `TypeError` will be thrown.\n     *\n     * On error, the `Promise` is rejected with an [`Error`](https://nodejs.org/docs/latest-v20.x/api/errors.html#class-error) object, where `err.code` is the error code.\n     *\n     * ```js\n     * import dnsPromises from 'node:dns';\n     * dnsPromises.lookupService('127.0.0.1', 22).then((result) => {\n     *   console.log(result.hostname, result.service);\n     *   // Prints: localhost ssh\n     * });\n     * ```\n     * @since v10.6.0\n     */\n    function lookupService(\n        address: string,\n        port: number,\n    ): Promise<{\n        hostname: string;\n        service: string;\n    }>;\n    /**\n     * Uses the DNS protocol to resolve a host name (e.g. `'nodejs.org'`) into an array\n     * of the resource records. When successful, the `Promise` is resolved with an\n     * array of resource records. The type and structure of individual results vary\n     * based on `rrtype`:\n     *\n     * <omitted>\n     *\n     * On error, the `Promise` is rejected with an [`Error`](https://nodejs.org/docs/latest-v20.x/api/errors.html#class-error) object, where `err.code`\n     * is one of the [DNS error codes](https://nodejs.org/docs/latest-v20.x/api/dns.html#error-codes).\n     * @since v10.6.0\n     * @param hostname Host name to resolve.\n     * @param [rrtype='A'] Resource record type.\n     */\n    function resolve(hostname: string): Promise<string[]>;\n    function resolve(hostname: string, rrtype: \"A\"): Promise<string[]>;\n    function resolve(hostname: string, rrtype: \"AAAA\"): Promise<string[]>;\n    function resolve(hostname: string, rrtype: \"ANY\"): Promise<AnyRecord[]>;\n    function resolve(hostname: string, rrtype: \"CAA\"): Promise<CaaRecord[]>;\n    function resolve(hostname: string, rrtype: \"CNAME\"): Promise<string[]>;\n    function resolve(hostname: string, rrtype: \"MX\"): Promise<MxRecord[]>;\n    function resolve(hostname: string, rrtype: \"NAPTR\"): Promise<NaptrRecord[]>;\n    function resolve(hostname: string, rrtype: \"NS\"): Promise<string[]>;\n    function resolve(hostname: string, rrtype: \"PTR\"): Promise<string[]>;\n    function resolve(hostname: string, rrtype: \"SOA\"): Promise<SoaRecord>;\n    function resolve(hostname: string, rrtype: \"SRV\"): Promise<SrvRecord[]>;\n    function resolve(hostname: string, rrtype: \"TXT\"): Promise<string[][]>;\n    function resolve(\n        hostname: string,\n        rrtype: string,\n    ): Promise<string[] | MxRecord[] | NaptrRecord[] | SoaRecord | SrvRecord[] | string[][] | AnyRecord[]>;\n    /**\n     * Uses the DNS protocol to resolve IPv4 addresses (`A` records) for the `hostname`. On success, the `Promise` is resolved with an array of IPv4\n     * addresses (e.g. `['74.125.79.104', '74.125.79.105', '74.125.79.106']`).\n     * @since v10.6.0\n     * @param hostname Host name to resolve.\n     */\n    function resolve4(hostname: string): Promise<string[]>;\n    function resolve4(hostname: string, options: ResolveWithTtlOptions): Promise<RecordWithTtl[]>;\n    function resolve4(hostname: string, options: ResolveOptions): Promise<string[] | RecordWithTtl[]>;\n    /**\n     * Uses the DNS protocol to resolve IPv6 addresses (`AAAA` records) for the `hostname`. On success, the `Promise` is resolved with an array of IPv6\n     * addresses.\n     * @since v10.6.0\n     * @param hostname Host name to resolve.\n     */\n    function resolve6(hostname: string): Promise<string[]>;\n    function resolve6(hostname: string, options: ResolveWithTtlOptions): Promise<RecordWithTtl[]>;\n    function resolve6(hostname: string, options: ResolveOptions): Promise<string[] | RecordWithTtl[]>;\n    /**\n     * Uses the DNS protocol to resolve all records (also known as `ANY` or `*` query).\n     * On success, the `Promise` is resolved with an array containing various types of\n     * records. Each object has a property `type` that indicates the type of the\n     * current record. And depending on the `type`, additional properties will be\n     * present on the object:\n     *\n     * <omitted>\n     *\n     * Here is an example of the result object:\n     *\n     * ```js\n     * [ { type: 'A', address: '127.0.0.1', ttl: 299 },\n     *   { type: 'CNAME', value: 'example.com' },\n     *   { type: 'MX', exchange: 'alt4.aspmx.l.example.com', priority: 50 },\n     *   { type: 'NS', value: 'ns1.example.com' },\n     *   { type: 'TXT', entries: [ 'v=spf1 include:_spf.example.com ~all' ] },\n     *   { type: 'SOA',\n     *     nsname: 'ns1.example.com',\n     *     hostmaster: 'admin.example.com',\n     *     serial: 156696742,\n     *     refresh: 900,\n     *     retry: 900,\n     *     expire: 1800,\n     *     minttl: 60 } ]\n     * ```\n     * @since v10.6.0\n     */\n    function resolveAny(hostname: string): Promise<AnyRecord[]>;\n    /**\n     * Uses the DNS protocol to resolve `CAA` records for the `hostname`. On success,\n     * the `Promise` is resolved with an array of objects containing available\n     * certification authority authorization records available for the `hostname` (e.g. `[{critical: 0, iodef: 'mailto:pki@example.com'},{critical: 128, issue: 'pki.example.com'}]`).\n     * @since v15.0.0, v14.17.0\n     */\n    function resolveCaa(hostname: string): Promise<CaaRecord[]>;\n    /**\n     * Uses the DNS protocol to resolve `CNAME` records for the `hostname`. On success,\n     * the `Promise` is resolved with an array of canonical name records available for\n     * the `hostname` (e.g. `['bar.example.com']`).\n     * @since v10.6.0\n     */\n    function resolveCname(hostname: string): Promise<string[]>;\n    /**\n     * Uses the DNS protocol to resolve mail exchange records (`MX` records) for the `hostname`. On success, the `Promise` is resolved with an array of objects\n     * containing both a `priority` and `exchange` property (e.g.`[{priority: 10, exchange: 'mx.example.com'}, ...]`).\n     * @since v10.6.0\n     */\n    function resolveMx(hostname: string): Promise<MxRecord[]>;\n    /**\n     * Uses the DNS protocol to resolve regular expression-based records (`NAPTR` records) for the `hostname`. On success, the `Promise` is resolved with an array\n     * of objects with the following properties:\n     *\n     * * `flags`\n     * * `service`\n     * * `regexp`\n     * * `replacement`\n     * * `order`\n     * * `preference`\n     *\n     * ```js\n     * {\n     *   flags: 's',\n     *   service: 'SIP+D2U',\n     *   regexp: '',\n     *   replacement: '_sip._udp.example.com',\n     *   order: 30,\n     *   preference: 100\n     * }\n     * ```\n     * @since v10.6.0\n     */\n    function resolveNaptr(hostname: string): Promise<NaptrRecord[]>;\n    /**\n     * Uses the DNS protocol to resolve name server records (`NS` records) for the `hostname`. On success, the `Promise` is resolved with an array of name server\n     * records available for `hostname` (e.g.`['ns1.example.com', 'ns2.example.com']`).\n     * @since v10.6.0\n     */\n    function resolveNs(hostname: string): Promise<string[]>;\n    /**\n     * Uses the DNS protocol to resolve pointer records (`PTR` records) for the `hostname`. On success, the `Promise` is resolved with an array of strings\n     * containing the reply records.\n     * @since v10.6.0\n     */\n    function resolvePtr(hostname: string): Promise<string[]>;\n    /**\n     * Uses the DNS protocol to resolve a start of authority record (`SOA` record) for\n     * the `hostname`. On success, the `Promise` is resolved with an object with the\n     * following properties:\n     *\n     * * `nsname`\n     * * `hostmaster`\n     * * `serial`\n     * * `refresh`\n     * * `retry`\n     * * `expire`\n     * * `minttl`\n     *\n     * ```js\n     * {\n     *   nsname: 'ns.example.com',\n     *   hostmaster: 'root.example.com',\n     *   serial: 2013101809,\n     *   refresh: 10000,\n     *   retry: 2400,\n     *   expire: 604800,\n     *   minttl: 3600\n     * }\n     * ```\n     * @since v10.6.0\n     */\n    function resolveSoa(hostname: string): Promise<SoaRecord>;\n    /**\n     * Uses the DNS protocol to resolve service records (`SRV` records) for the `hostname`. On success, the `Promise` is resolved with an array of objects with\n     * the following properties:\n     *\n     * * `priority`\n     * * `weight`\n     * * `port`\n     * * `name`\n     *\n     * ```js\n     * {\n     *   priority: 10,\n     *   weight: 5,\n     *   port: 21223,\n     *   name: 'service.example.com'\n     * }\n     * ```\n     * @since v10.6.0\n     */\n    function resolveSrv(hostname: string): Promise<SrvRecord[]>;\n    /**\n     * Uses the DNS protocol to resolve text queries (`TXT` records) for the `hostname`. On success, the `Promise` is resolved with a two-dimensional array\n     * of the text records available for `hostname` (e.g.`[ ['v=spf1 ip4:0.0.0.0 ', '~all' ] ]`). Each sub-array contains TXT chunks of\n     * one record. Depending on the use case, these could be either joined together or\n     * treated separately.\n     * @since v10.6.0\n     */\n    function resolveTxt(hostname: string): Promise<string[][]>;\n    /**\n     * Performs a reverse DNS query that resolves an IPv4 or IPv6 address to an\n     * array of host names.\n     *\n     * On error, the `Promise` is rejected with an [`Error`](https://nodejs.org/docs/latest-v20.x/api/errors.html#class-error) object, where `err.code`\n     * is one of the [DNS error codes](https://nodejs.org/docs/latest-v20.x/api/dns.html#error-codes).\n     * @since v10.6.0\n     */\n    function reverse(ip: string): Promise<string[]>;\n    /**\n     * Get the default value for `verbatim` in {@link lookup} and [dnsPromises.lookup()](https://nodejs.org/docs/latest-v20.x/api/dns.html#dnspromiseslookuphostname-options).\n     * The value could be:\n     *\n     * * `ipv4first`: for `verbatim` defaulting to `false`.\n     * * `verbatim`: for `verbatim` defaulting to `true`.\n     * @since v20.1.0\n     */\n    function getDefaultResultOrder(): \"ipv4first\" | \"verbatim\";\n    /**\n     * Sets the IP address and port of servers to be used when performing DNS\n     * resolution. The `servers` argument is an array of [RFC 5952](https://tools.ietf.org/html/rfc5952#section-6) formatted\n     * addresses. If the port is the IANA default DNS port (53) it can be omitted.\n     *\n     * ```js\n     * dnsPromises.setServers([\n     *   '4.4.4.4',\n     *   '[2001:4860:4860::8888]',\n     *   '4.4.4.4:1053',\n     *   '[2001:4860:4860::8888]:1053',\n     * ]);\n     * ```\n     *\n     * An error will be thrown if an invalid address is provided.\n     *\n     * The `dnsPromises.setServers()` method must not be called while a DNS query is in\n     * progress.\n     *\n     * This method works much like [resolve.conf](https://man7.org/linux/man-pages/man5/resolv.conf.5.html).\n     * That is, if attempting to resolve with the first server provided results in a `NOTFOUND` error, the `resolve()` method will _not_ attempt to resolve with\n     * subsequent servers provided. Fallback DNS servers will only be used if the\n     * earlier ones time out or result in some other error.\n     * @since v10.6.0\n     * @param servers array of `RFC 5952` formatted addresses\n     */\n    function setServers(servers: readonly string[]): void;\n    /**\n     * Set the default value of `order` in `dns.lookup()` and `{@link lookup}`. The value could be:\n     *\n     * * `ipv4first`: sets default `order` to `ipv4first`.\n     * * `ipv6first`: sets default `order` to `ipv6first`.\n     * * `verbatim`: sets default `order` to `verbatim`.\n     *\n     * The default is `verbatim` and [dnsPromises.setDefaultResultOrder()](https://nodejs.org/docs/latest-v20.x/api/dns.html#dnspromisessetdefaultresultorderorder)\n     * have higher priority than [`--dns-result-order`](https://nodejs.org/docs/latest-v20.x/api/cli.html#--dns-result-orderorder).\n     * When using [worker threads](https://nodejs.org/docs/latest-v20.x/api/worker_threads.html), [`dnsPromises.setDefaultResultOrder()`](https://nodejs.org/docs/latest-v20.x/api/dns.html#dnspromisessetdefaultresultorderorder)\n     * from the main thread won't affect the default dns orders in workers.\n     * @since v16.4.0, v14.18.0\n     * @param order must be `'ipv4first'`, `'ipv6first'` or `'verbatim'`.\n     */\n    function setDefaultResultOrder(order: \"ipv4first\" | \"ipv6first\" | \"verbatim\"): void;\n    // Error codes\n    const NODATA: \"ENODATA\";\n    const FORMERR: \"EFORMERR\";\n    const SERVFAIL: \"ESERVFAIL\";\n    const NOTFOUND: \"ENOTFOUND\";\n    const NOTIMP: \"ENOTIMP\";\n    const REFUSED: \"EREFUSED\";\n    const BADQUERY: \"EBADQUERY\";\n    const BADNAME: \"EBADNAME\";\n    const BADFAMILY: \"EBADFAMILY\";\n    const BADRESP: \"EBADRESP\";\n    const CONNREFUSED: \"ECONNREFUSED\";\n    const TIMEOUT: \"ETIMEOUT\";\n    const EOF: \"EOF\";\n    const FILE: \"EFILE\";\n    const NOMEM: \"ENOMEM\";\n    const DESTRUCTION: \"EDESTRUCTION\";\n    const BADSTR: \"EBADSTR\";\n    const BADFLAGS: \"EBADFLAGS\";\n    const NONAME: \"ENONAME\";\n    const BADHINTS: \"EBADHINTS\";\n    const NOTINITIALIZED: \"ENOTINITIALIZED\";\n    const LOADIPHLPAPI: \"ELOADIPHLPAPI\";\n    const ADDRGETNETWORKPARAMS: \"EADDRGETNETWORKPARAMS\";\n    const CANCELLED: \"ECANCELLED\";\n\n    /**\n     * An independent resolver for DNS requests.\n     *\n     * Creating a new resolver uses the default server settings. Setting\n     * the servers used for a resolver using [`resolver.setServers()`](https://nodejs.org/docs/latest-v20.x/api/dns.html#dnspromisessetserversservers) does not affect\n     * other resolvers:\n     *\n     * ```js\n     * import { promises } from 'node:dns';\n     * const resolver = new promises.Resolver();\n     * resolver.setServers(['4.4.4.4']);\n     *\n     * // This request will use the server at 4.4.4.4, independent of global settings.\n     * resolver.resolve4('example.org').then((addresses) => {\n     *   // ...\n     * });\n     *\n     * // Alternatively, the same code can be written using async-await style.\n     * (async function() {\n     *   const addresses = await resolver.resolve4('example.org');\n     * })();\n     * ```\n     *\n     * The following methods from the `dnsPromises` API are available:\n     *\n     * * `resolver.getServers()`\n     * * `resolver.resolve()`\n     * * `resolver.resolve4()`\n     * * `resolver.resolve6()`\n     * * `resolver.resolveAny()`\n     * * `resolver.resolveCaa()`\n     * * `resolver.resolveCname()`\n     * * `resolver.resolveMx()`\n     * * `resolver.resolveNaptr()`\n     * * `resolver.resolveNs()`\n     * * `resolver.resolvePtr()`\n     * * `resolver.resolveSoa()`\n     * * `resolver.resolveSrv()`\n     * * `resolver.resolveTxt()`\n     * * `resolver.reverse()`\n     * * `resolver.setServers()`\n     * @since v10.6.0\n     */\n    class Resolver {\n        constructor(options?: ResolverOptions);\n        /**\n         * Cancel all outstanding DNS queries made by this resolver. The corresponding\n         * callbacks will be called with an error with code `ECANCELLED`.\n         * @since v8.3.0\n         */\n        cancel(): void;\n        getServers: typeof getServers;\n        resolve: typeof resolve;\n        resolve4: typeof resolve4;\n        resolve6: typeof resolve6;\n        resolveAny: typeof resolveAny;\n        resolveCaa: typeof resolveCaa;\n        resolveCname: typeof resolveCname;\n        resolveMx: typeof resolveMx;\n        resolveNaptr: typeof resolveNaptr;\n        resolveNs: typeof resolveNs;\n        resolvePtr: typeof resolvePtr;\n        resolveSoa: typeof resolveSoa;\n        resolveSrv: typeof resolveSrv;\n        resolveTxt: typeof resolveTxt;\n        reverse: typeof reverse;\n        /**\n         * The resolver instance will send its requests from the specified IP address.\n         * This allows programs to specify outbound interfaces when used on multi-homed\n         * systems.\n         *\n         * If a v4 or v6 address is not specified, it is set to the default and the\n         * operating system will choose a local address automatically.\n         *\n         * The resolver will use the v4 local address when making requests to IPv4 DNS\n         * servers, and the v6 local address when making requests to IPv6 DNS servers.\n         * The `rrtype` of resolution requests has no impact on the local address used.\n         * @since v15.1.0, v14.17.0\n         * @param [ipv4='0.0.0.0'] A string representation of an IPv4 address.\n         * @param [ipv6='::0'] A string representation of an IPv6 address.\n         */\n        setLocalAddress(ipv4?: string, ipv6?: string): void;\n        setServers: typeof setServers;\n    }\n}\ndeclare module \"node:dns/promises\" {\n    export * from \"dns/promises\";\n}\n",
  '@types/node/dom-events.d.ts':
    '// Make this a module\nexport {};\n\n// Conditional type aliases, which are later merged into the global scope.\n// Will either be empty if the relevant web library is already present, or the @types/node definition otherwise.\n\ntype __Event = typeof globalThis extends { onmessage: any } ? {} : Event;\ninterface Event {\n    readonly bubbles: boolean;\n    cancelBubble: boolean;\n    readonly cancelable: boolean;\n    readonly composed: boolean;\n    composedPath(): [EventTarget?];\n    readonly currentTarget: EventTarget | null;\n    readonly defaultPrevented: boolean;\n    readonly eventPhase: 0 | 2;\n    initEvent(type: string, bubbles?: boolean, cancelable?: boolean): void;\n    readonly isTrusted: boolean;\n    preventDefault(): void;\n    readonly returnValue: boolean;\n    readonly srcElement: EventTarget | null;\n    stopImmediatePropagation(): void;\n    stopPropagation(): void;\n    readonly target: EventTarget | null;\n    readonly timeStamp: number;\n    readonly type: string;\n}\n\ntype __CustomEvent<T = any> = typeof globalThis extends { onmessage: any } ? {} : CustomEvent<T>;\ninterface CustomEvent<T = any> extends Event {\n    readonly detail: T;\n}\n\ntype __EventTarget = typeof globalThis extends { onmessage: any } ? {} : EventTarget;\ninterface EventTarget {\n    addEventListener(\n        type: string,\n        listener: EventListener | EventListenerObject,\n        options?: AddEventListenerOptions | boolean,\n    ): void;\n    dispatchEvent(event: Event): boolean;\n    removeEventListener(\n        type: string,\n        listener: EventListener | EventListenerObject,\n        options?: EventListenerOptions | boolean,\n    ): void;\n}\n\ninterface EventInit {\n    bubbles?: boolean;\n    cancelable?: boolean;\n    composed?: boolean;\n}\n\ninterface CustomEventInit<T = any> extends EventInit {\n    detail?: T;\n}\n\ninterface EventListenerOptions {\n    capture?: boolean;\n}\n\ninterface AddEventListenerOptions extends EventListenerOptions {\n    once?: boolean;\n    passive?: boolean;\n    signal?: AbortSignal;\n}\n\ninterface EventListener {\n    (evt: Event): void;\n}\n\ninterface EventListenerObject {\n    handleEvent(object: Event): void;\n}\n\n// Merge conditional interfaces into global scope, and conditionally declare global constructors.\ndeclare global {\n    interface Event extends __Event {}\n    var Event: typeof globalThis extends { onmessage: any; Event: infer T } ? T\n        : {\n            prototype: Event;\n            new(type: string, eventInitDict?: EventInit): Event;\n        };\n\n    interface CustomEvent<T = any> extends __CustomEvent<T> {}\n    var CustomEvent: typeof globalThis extends { onmessage: any; CustomEvent: infer T } ? T\n        : {\n            prototype: CustomEvent;\n            new<T>(type: string, eventInitDict?: CustomEventInit<T>): CustomEvent<T>;\n        };\n\n    interface EventTarget extends __EventTarget {}\n    var EventTarget: typeof globalThis extends { onmessage: any; EventTarget: infer T } ? T\n        : {\n            prototype: EventTarget;\n            new(): EventTarget;\n        };\n}\n',
  '@types/node/domain.d.ts':
    "/**\n * **This module is pending deprecation.** Once a replacement API has been\n * finalized, this module will be fully deprecated. Most developers should\n * **not** have cause to use this module. Users who absolutely must have\n * the functionality that domains provide may rely on it for the time being\n * but should expect to have to migrate to a different solution\n * in the future.\n *\n * Domains provide a way to handle multiple different IO operations as a\n * single group. If any of the event emitters or callbacks registered to a\n * domain emit an `'error'` event, or throw an error, then the domain object\n * will be notified, rather than losing the context of the error in the `process.on('uncaughtException')` handler, or causing the program to\n * exit immediately with an error code.\n * @deprecated Since v1.4.2 - Deprecated\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/domain.js)\n */\ndeclare module \"domain\" {\n    import EventEmitter = require(\"node:events\");\n    /**\n     * The `Domain` class encapsulates the functionality of routing errors and\n     * uncaught exceptions to the active `Domain` object.\n     *\n     * To handle the errors that it catches, listen to its `'error'` event.\n     */\n    class Domain extends EventEmitter {\n        /**\n         * An array of timers and event emitters that have been explicitly added\n         * to the domain.\n         */\n        members: Array<EventEmitter | NodeJS.Timer>;\n        /**\n         * The `enter()` method is plumbing used by the `run()`, `bind()`, and `intercept()` methods to set the active domain. It sets `domain.active` and `process.domain` to the domain, and implicitly\n         * pushes the domain onto the domain\n         * stack managed by the domain module (see {@link exit} for details on the\n         * domain stack). The call to `enter()` delimits the beginning of a chain of\n         * asynchronous calls and I/O operations bound to a domain.\n         *\n         * Calling `enter()` changes only the active domain, and does not alter the domain\n         * itself. `enter()` and `exit()` can be called an arbitrary number of times on a\n         * single domain.\n         */\n        enter(): void;\n        /**\n         * The `exit()` method exits the current domain, popping it off the domain stack.\n         * Any time execution is going to switch to the context of a different chain of\n         * asynchronous calls, it's important to ensure that the current domain is exited.\n         * The call to `exit()` delimits either the end of or an interruption to the chain\n         * of asynchronous calls and I/O operations bound to a domain.\n         *\n         * If there are multiple, nested domains bound to the current execution context, `exit()` will exit any domains nested within this domain.\n         *\n         * Calling `exit()` changes only the active domain, and does not alter the domain\n         * itself. `enter()` and `exit()` can be called an arbitrary number of times on a\n         * single domain.\n         */\n        exit(): void;\n        /**\n         * Run the supplied function in the context of the domain, implicitly\n         * binding all event emitters, timers, and low-level requests that are\n         * created in that context. Optionally, arguments can be passed to\n         * the function.\n         *\n         * This is the most basic way to use a domain.\n         *\n         * ```js\n         * import domain from 'node:domain';\n         * import fs from 'node:fs';\n         * const d = domain.create();\n         * d.on('error', (er) => {\n         *   console.error('Caught error!', er);\n         * });\n         * d.run(() => {\n         *   process.nextTick(() => {\n         *     setTimeout(() => { // Simulating some various async stuff\n         *       fs.open('non-existent file', 'r', (er, fd) => {\n         *         if (er) throw er;\n         *         // proceed...\n         *       });\n         *     }, 100);\n         *   });\n         * });\n         * ```\n         *\n         * In this example, the `d.on('error')` handler will be triggered, rather\n         * than crashing the program.\n         */\n        run<T>(fn: (...args: any[]) => T, ...args: any[]): T;\n        /**\n         * Explicitly adds an emitter to the domain. If any event handlers called by\n         * the emitter throw an error, or if the emitter emits an `'error'` event, it\n         * will be routed to the domain's `'error'` event, just like with implicit\n         * binding.\n         *\n         * This also works with timers that are returned from `setInterval()` and `setTimeout()`. If their callback function throws, it will be caught by\n         * the domain `'error'` handler.\n         *\n         * If the Timer or `EventEmitter` was already bound to a domain, it is removed\n         * from that one, and bound to this one instead.\n         * @param emitter emitter or timer to be added to the domain\n         */\n        add(emitter: EventEmitter | NodeJS.Timer): void;\n        /**\n         * The opposite of {@link add}. Removes domain handling from the\n         * specified emitter.\n         * @param emitter emitter or timer to be removed from the domain\n         */\n        remove(emitter: EventEmitter | NodeJS.Timer): void;\n        /**\n         * The returned function will be a wrapper around the supplied callback\n         * function. When the returned function is called, any errors that are\n         * thrown will be routed to the domain's `'error'` event.\n         *\n         * ```js\n         * const d = domain.create();\n         *\n         * function readSomeFile(filename, cb) {\n         *   fs.readFile(filename, 'utf8', d.bind((er, data) => {\n         *     // If this throws, it will also be passed to the domain.\n         *     return cb(er, data ? JSON.parse(data) : null);\n         *   }));\n         * }\n         *\n         * d.on('error', (er) => {\n         *   // An error occurred somewhere. If we throw it now, it will crash the program\n         *   // with the normal line number and stack message.\n         * });\n         * ```\n         * @param callback The callback function\n         * @return The bound function\n         */\n        bind<T extends Function>(callback: T): T;\n        /**\n         * This method is almost identical to {@link bind}. However, in\n         * addition to catching thrown errors, it will also intercept `Error` objects sent as the first argument to the function.\n         *\n         * In this way, the common `if (err) return callback(err);` pattern can be replaced\n         * with a single error handler in a single place.\n         *\n         * ```js\n         * const d = domain.create();\n         *\n         * function readSomeFile(filename, cb) {\n         *   fs.readFile(filename, 'utf8', d.intercept((data) => {\n         *     // Note, the first argument is never passed to the\n         *     // callback since it is assumed to be the 'Error' argument\n         *     // and thus intercepted by the domain.\n         *\n         *     // If this throws, it will also be passed to the domain\n         *     // so the error-handling logic can be moved to the 'error'\n         *     // event on the domain instead of being repeated throughout\n         *     // the program.\n         *     return cb(null, JSON.parse(data));\n         *   }));\n         * }\n         *\n         * d.on('error', (er) => {\n         *   // An error occurred somewhere. If we throw it now, it will crash the program\n         *   // with the normal line number and stack message.\n         * });\n         * ```\n         * @param callback The callback function\n         * @return The intercepted function\n         */\n        intercept<T extends Function>(callback: T): T;\n    }\n    function create(): Domain;\n}\ndeclare module \"node:domain\" {\n    export * from \"domain\";\n}\n",
  '@types/node/events.d.ts':
    "/**\n * Much of the Node.js core API is built around an idiomatic asynchronous\n * event-driven architecture in which certain kinds of objects (called \"emitters\")\n * emit named events that cause `Function` objects (\"listeners\") to be called.\n *\n * For instance: a `net.Server` object emits an event each time a peer\n * connects to it; a `fs.ReadStream` emits an event when the file is opened;\n * a `stream` emits an event whenever data is available to be read.\n *\n * All objects that emit events are instances of the `EventEmitter` class. These\n * objects expose an `eventEmitter.on()` function that allows one or more\n * functions to be attached to named events emitted by the object. Typically,\n * event names are camel-cased strings but any valid JavaScript property key\n * can be used.\n *\n * When the `EventEmitter` object emits an event, all of the functions attached\n * to that specific event are called _synchronously_. Any values returned by the\n * called listeners are _ignored_ and discarded.\n *\n * The following example shows a simple `EventEmitter` instance with a single\n * listener. The `eventEmitter.on()` method is used to register listeners, while\n * the `eventEmitter.emit()` method is used to trigger the event.\n *\n * ```js\n * import { EventEmitter } from 'node:events';\n *\n * class MyEmitter extends EventEmitter {}\n *\n * const myEmitter = new MyEmitter();\n * myEmitter.on('event', () => {\n *   console.log('an event occurred!');\n * });\n * myEmitter.emit('event');\n * ```\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/events.js)\n */\ndeclare module \"events\" {\n    import { AsyncResource, AsyncResourceOptions } from \"node:async_hooks\";\n    // NOTE: This class is in the docs but is **not actually exported** by Node.\n    // If https://github.com/nodejs/node/issues/39903 gets resolved and Node\n    // actually starts exporting the class, uncomment below.\n    // import { EventListener, EventListenerObject } from '__dom-events';\n    // /** The NodeEventTarget is a Node.js-specific extension to EventTarget that emulates a subset of the EventEmitter API. */\n    // interface NodeEventTarget extends EventTarget {\n    //     /**\n    //      * Node.js-specific extension to the `EventTarget` class that emulates the equivalent `EventEmitter` API.\n    //      * The only difference between `addListener()` and `addEventListener()` is that addListener() will return a reference to the EventTarget.\n    //      */\n    //     addListener(type: string, listener: EventListener | EventListenerObject, options?: { once: boolean }): this;\n    //     /** Node.js-specific extension to the `EventTarget` class that returns an array of event `type` names for which event listeners are registered. */\n    //     eventNames(): string[];\n    //     /** Node.js-specific extension to the `EventTarget` class that returns the number of event listeners registered for the `type`. */\n    //     listenerCount(type: string): number;\n    //     /** Node.js-specific alias for `eventTarget.removeListener()`. */\n    //     off(type: string, listener: EventListener | EventListenerObject): this;\n    //     /** Node.js-specific alias for `eventTarget.addListener()`. */\n    //     on(type: string, listener: EventListener | EventListenerObject, options?: { once: boolean }): this;\n    //     /** Node.js-specific extension to the `EventTarget` class that adds a `once` listener for the given event `type`. This is equivalent to calling `on` with the `once` option set to `true`. */\n    //     once(type: string, listener: EventListener | EventListenerObject): this;\n    //     /**\n    //      * Node.js-specific extension to the `EventTarget` class.\n    //      * If `type` is specified, removes all registered listeners for `type`,\n    //      * otherwise removes all registered listeners.\n    //      */\n    //     removeAllListeners(type: string): this;\n    //     /**\n    //      * Node.js-specific extension to the `EventTarget` class that removes the listener for the given `type`.\n    //      * The only difference between `removeListener()` and `removeEventListener()` is that `removeListener()` will return a reference to the `EventTarget`.\n    //      */\n    //     removeListener(type: string, listener: EventListener | EventListenerObject): this;\n    // }\n    interface EventEmitterOptions {\n        /**\n         * Enables automatic capturing of promise rejection.\n         */\n        captureRejections?: boolean | undefined;\n    }\n    interface StaticEventEmitterOptions {\n        /**\n         * Can be used to cancel awaiting events.\n         */\n        signal?: AbortSignal | undefined;\n    }\n    interface StaticEventEmitterIteratorOptions extends StaticEventEmitterOptions {\n        /**\n         * Names of events that will end the iteration.\n         */\n        close?: string[] | undefined;\n        /**\n         * The high watermark. The emitter is paused every time the size of events being buffered is higher than it.\n         * Supported only on emitters implementing `pause()` and `resume()` methods.\n         * @default Number.MAX_SAFE_INTEGER\n         */\n        highWaterMark?: number | undefined;\n        /**\n         * The low watermark. The emitter is resumed every time the size of events being buffered is lower than it.\n         * Supported only on emitters implementing `pause()` and `resume()` methods.\n         * @default 1\n         */\n        lowWaterMark?: number | undefined;\n    }\n    interface EventEmitter<T extends EventMap<T> = DefaultEventMap> extends NodeJS.EventEmitter<T> {}\n    type EventMap<T> = Record<keyof T, any[]> | DefaultEventMap;\n    type DefaultEventMap = [never];\n    type AnyRest = [...args: any[]];\n    type Args<K, T> = T extends DefaultEventMap ? AnyRest : (\n        K extends keyof T ? T[K] : never\n    );\n    type Key<K, T> = T extends DefaultEventMap ? string | symbol : K | keyof T;\n    type Key2<K, T> = T extends DefaultEventMap ? string | symbol : K & keyof T;\n    type Listener<K, T, F> = T extends DefaultEventMap ? F : (\n        K extends keyof T ? (\n                T[K] extends unknown[] ? (...args: T[K]) => void : never\n            )\n            : never\n    );\n    type Listener1<K, T> = Listener<K, T, (...args: any[]) => void>;\n    type Listener2<K, T> = Listener<K, T, Function>;\n\n    /**\n     * The `EventEmitter` class is defined and exposed by the `node:events` module:\n     *\n     * ```js\n     * import { EventEmitter } from 'node:events';\n     * ```\n     *\n     * All `EventEmitter`s emit the event `'newListener'` when new listeners are\n     * added and `'removeListener'` when existing listeners are removed.\n     *\n     * It supports the following option:\n     * @since v0.1.26\n     */\n    class EventEmitter<T extends EventMap<T> = DefaultEventMap> {\n        constructor(options?: EventEmitterOptions);\n\n        [EventEmitter.captureRejectionSymbol]?<K>(error: Error, event: Key<K, T>, ...args: Args<K, T>): void;\n\n        /**\n         * Creates a `Promise` that is fulfilled when the `EventEmitter` emits the given\n         * event or that is rejected if the `EventEmitter` emits `'error'` while waiting.\n         * The `Promise` will resolve with an array of all the arguments emitted to the\n         * given event.\n         *\n         * This method is intentionally generic and works with the web platform [EventTarget](https://dom.spec.whatwg.org/#interface-eventtarget) interface, which has no special`'error'` event\n         * semantics and does not listen to the `'error'` event.\n         *\n         * ```js\n         * import { once, EventEmitter } from 'node:events';\n         * import process from 'node:process';\n         *\n         * const ee = new EventEmitter();\n         *\n         * process.nextTick(() => {\n         *   ee.emit('myevent', 42);\n         * });\n         *\n         * const [value] = await once(ee, 'myevent');\n         * console.log(value);\n         *\n         * const err = new Error('kaboom');\n         * process.nextTick(() => {\n         *   ee.emit('error', err);\n         * });\n         *\n         * try {\n         *   await once(ee, 'myevent');\n         * } catch (err) {\n         *   console.error('error happened', err);\n         * }\n         * ```\n         *\n         * The special handling of the `'error'` event is only used when `events.once()` is used to wait for another event. If `events.once()` is used to wait for the\n         * '`error'` event itself, then it is treated as any other kind of event without\n         * special handling:\n         *\n         * ```js\n         * import { EventEmitter, once } from 'node:events';\n         *\n         * const ee = new EventEmitter();\n         *\n         * once(ee, 'error')\n         *   .then(([err]) => console.log('ok', err.message))\n         *   .catch((err) => console.error('error', err.message));\n         *\n         * ee.emit('error', new Error('boom'));\n         *\n         * // Prints: ok boom\n         * ```\n         *\n         * An `AbortSignal` can be used to cancel waiting for the event:\n         *\n         * ```js\n         * import { EventEmitter, once } from 'node:events';\n         *\n         * const ee = new EventEmitter();\n         * const ac = new AbortController();\n         *\n         * async function foo(emitter, event, signal) {\n         *   try {\n         *     await once(emitter, event, { signal });\n         *     console.log('event emitted!');\n         *   } catch (error) {\n         *     if (error.name === 'AbortError') {\n         *       console.error('Waiting for the event was canceled!');\n         *     } else {\n         *       console.error('There was an error', error.message);\n         *     }\n         *   }\n         * }\n         *\n         * foo(ee, 'foo', ac.signal);\n         * ac.abort(); // Abort waiting for the event\n         * ee.emit('foo'); // Prints: Waiting for the event was canceled!\n         * ```\n         * @since v11.13.0, v10.16.0\n         */\n        static once(\n            emitter: NodeJS.EventEmitter,\n            eventName: string | symbol,\n            options?: StaticEventEmitterOptions,\n        ): Promise<any[]>;\n        static once(emitter: EventTarget, eventName: string, options?: StaticEventEmitterOptions): Promise<any[]>;\n        /**\n         * ```js\n         * import { on, EventEmitter } from 'node:events';\n         * import process from 'node:process';\n         *\n         * const ee = new EventEmitter();\n         *\n         * // Emit later on\n         * process.nextTick(() => {\n         *   ee.emit('foo', 'bar');\n         *   ee.emit('foo', 42);\n         * });\n         *\n         * for await (const event of on(ee, 'foo')) {\n         *   // The execution of this inner block is synchronous and it\n         *   // processes one event at a time (even with await). Do not use\n         *   // if concurrent execution is required.\n         *   console.log(event); // prints ['bar'] [42]\n         * }\n         * // Unreachable here\n         * ```\n         *\n         * Returns an `AsyncIterator` that iterates `eventName` events. It will throw\n         * if the `EventEmitter` emits `'error'`. It removes all listeners when\n         * exiting the loop. The `value` returned by each iteration is an array\n         * composed of the emitted event arguments.\n         *\n         * An `AbortSignal` can be used to cancel waiting on events:\n         *\n         * ```js\n         * import { on, EventEmitter } from 'node:events';\n         * import process from 'node:process';\n         *\n         * const ac = new AbortController();\n         *\n         * (async () => {\n         *   const ee = new EventEmitter();\n         *\n         *   // Emit later on\n         *   process.nextTick(() => {\n         *     ee.emit('foo', 'bar');\n         *     ee.emit('foo', 42);\n         *   });\n         *\n         *   for await (const event of on(ee, 'foo', { signal: ac.signal })) {\n         *     // The execution of this inner block is synchronous and it\n         *     // processes one event at a time (even with await). Do not use\n         *     // if concurrent execution is required.\n         *     console.log(event); // prints ['bar'] [42]\n         *   }\n         *   // Unreachable here\n         * })();\n         *\n         * process.nextTick(() => ac.abort());\n         * ```\n         *\n         * Use the `close` option to specify an array of event names that will end the iteration:\n         *\n         * ```js\n         * import { on, EventEmitter } from 'node:events';\n         * import process from 'node:process';\n         *\n         * const ee = new EventEmitter();\n         *\n         * // Emit later on\n         * process.nextTick(() => {\n         *   ee.emit('foo', 'bar');\n         *   ee.emit('foo', 42);\n         *   ee.emit('close');\n         * });\n         *\n         * for await (const event of on(ee, 'foo', { close: ['close'] })) {\n         *   console.log(event); // prints ['bar'] [42]\n         * }\n         * // the loop will exit after 'close' is emitted\n         * console.log('done'); // prints 'done'\n         * ```\n         * @since v13.6.0, v12.16.0\n         * @return An `AsyncIterator` that iterates `eventName` events emitted by the `emitter`\n         */\n        static on(\n            emitter: NodeJS.EventEmitter,\n            eventName: string | symbol,\n            options?: StaticEventEmitterIteratorOptions,\n        ): NodeJS.AsyncIterator<any[]>;\n        static on(\n            emitter: EventTarget,\n            eventName: string,\n            options?: StaticEventEmitterIteratorOptions,\n        ): NodeJS.AsyncIterator<any[]>;\n        /**\n         * A class method that returns the number of listeners for the given `eventName` registered on the given `emitter`.\n         *\n         * ```js\n         * import { EventEmitter, listenerCount } from 'node:events';\n         *\n         * const myEmitter = new EventEmitter();\n         * myEmitter.on('event', () => {});\n         * myEmitter.on('event', () => {});\n         * console.log(listenerCount(myEmitter, 'event'));\n         * // Prints: 2\n         * ```\n         * @since v0.9.12\n         * @deprecated Since v3.2.0 - Use `listenerCount` instead.\n         * @param emitter The emitter to query\n         * @param eventName The event name\n         */\n        static listenerCount(emitter: NodeJS.EventEmitter, eventName: string | symbol): number;\n        /**\n         * Returns a copy of the array of listeners for the event named `eventName`.\n         *\n         * For `EventEmitter`s this behaves exactly the same as calling `.listeners` on\n         * the emitter.\n         *\n         * For `EventTarget`s this is the only way to get the event listeners for the\n         * event target. This is useful for debugging and diagnostic purposes.\n         *\n         * ```js\n         * import { getEventListeners, EventEmitter } from 'node:events';\n         *\n         * {\n         *   const ee = new EventEmitter();\n         *   const listener = () => console.log('Events are fun');\n         *   ee.on('foo', listener);\n         *   console.log(getEventListeners(ee, 'foo')); // [ [Function: listener] ]\n         * }\n         * {\n         *   const et = new EventTarget();\n         *   const listener = () => console.log('Events are fun');\n         *   et.addEventListener('foo', listener);\n         *   console.log(getEventListeners(et, 'foo')); // [ [Function: listener] ]\n         * }\n         * ```\n         * @since v15.2.0, v14.17.0\n         */\n        static getEventListeners(emitter: EventTarget | NodeJS.EventEmitter, name: string | symbol): Function[];\n        /**\n         * Returns the currently set max amount of listeners.\n         *\n         * For `EventEmitter`s this behaves exactly the same as calling `.getMaxListeners` on\n         * the emitter.\n         *\n         * For `EventTarget`s this is the only way to get the max event listeners for the\n         * event target. If the number of event handlers on a single EventTarget exceeds\n         * the max set, the EventTarget will print a warning.\n         *\n         * ```js\n         * import { getMaxListeners, setMaxListeners, EventEmitter } from 'node:events';\n         *\n         * {\n         *   const ee = new EventEmitter();\n         *   console.log(getMaxListeners(ee)); // 10\n         *   setMaxListeners(11, ee);\n         *   console.log(getMaxListeners(ee)); // 11\n         * }\n         * {\n         *   const et = new EventTarget();\n         *   console.log(getMaxListeners(et)); // 10\n         *   setMaxListeners(11, et);\n         *   console.log(getMaxListeners(et)); // 11\n         * }\n         * ```\n         * @since v19.9.0\n         */\n        static getMaxListeners(emitter: EventTarget | NodeJS.EventEmitter): number;\n        /**\n         * ```js\n         * import { setMaxListeners, EventEmitter } from 'node:events';\n         *\n         * const target = new EventTarget();\n         * const emitter = new EventEmitter();\n         *\n         * setMaxListeners(5, target, emitter);\n         * ```\n         * @since v15.4.0\n         * @param n A non-negative number. The maximum number of listeners per `EventTarget` event.\n         * @param eventTargets Zero or more {EventTarget} or {EventEmitter} instances. If none are specified, `n` is set as the default max for all newly created {EventTarget} and {EventEmitter}\n         * objects.\n         */\n        static setMaxListeners(n?: number, ...eventTargets: Array<EventTarget | NodeJS.EventEmitter>): void;\n        /**\n         * Listens once to the `abort` event on the provided `signal`.\n         *\n         * Listening to the `abort` event on abort signals is unsafe and may\n         * lead to resource leaks since another third party with the signal can\n         * call `e.stopImmediatePropagation()`. Unfortunately Node.js cannot change\n         * this since it would violate the web standard. Additionally, the original\n         * API makes it easy to forget to remove listeners.\n         *\n         * This API allows safely using `AbortSignal`s in Node.js APIs by solving these\n         * two issues by listening to the event such that `stopImmediatePropagation` does\n         * not prevent the listener from running.\n         *\n         * Returns a disposable so that it may be unsubscribed from more easily.\n         *\n         * ```js\n         * import { addAbortListener } from 'node:events';\n         *\n         * function example(signal) {\n         *   let disposable;\n         *   try {\n         *     signal.addEventListener('abort', (e) => e.stopImmediatePropagation());\n         *     disposable = addAbortListener(signal, (e) => {\n         *       // Do something when signal is aborted.\n         *     });\n         *   } finally {\n         *     disposable?.[Symbol.dispose]();\n         *   }\n         * }\n         * ```\n         * @since v20.5.0\n         * @experimental\n         * @return Disposable that removes the `abort` listener.\n         */\n        static addAbortListener(signal: AbortSignal, resource: (event: Event) => void): Disposable;\n        /**\n         * This symbol shall be used to install a listener for only monitoring `'error'` events. Listeners installed using this symbol are called before the regular `'error'` listeners are called.\n         *\n         * Installing a listener using this symbol does not change the behavior once an `'error'` event is emitted. Therefore, the process will still crash if no\n         * regular `'error'` listener is installed.\n         * @since v13.6.0, v12.17.0\n         */\n        static readonly errorMonitor: unique symbol;\n        /**\n         * Value: `Symbol.for('nodejs.rejection')`\n         *\n         * See how to write a custom `rejection handler`.\n         * @since v13.4.0, v12.16.0\n         */\n        static readonly captureRejectionSymbol: unique symbol;\n        /**\n         * Value: [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type)\n         *\n         * Change the default `captureRejections` option on all new `EventEmitter` objects.\n         * @since v13.4.0, v12.16.0\n         */\n        static captureRejections: boolean;\n        /**\n         * By default, a maximum of `10` listeners can be registered for any single\n         * event. This limit can be changed for individual `EventEmitter` instances\n         * using the `emitter.setMaxListeners(n)` method. To change the default\n         * for _all_`EventEmitter` instances, the `events.defaultMaxListeners` property\n         * can be used. If this value is not a positive number, a `RangeError` is thrown.\n         *\n         * Take caution when setting the `events.defaultMaxListeners` because the\n         * change affects _all_ `EventEmitter` instances, including those created before\n         * the change is made. However, calling `emitter.setMaxListeners(n)` still has\n         * precedence over `events.defaultMaxListeners`.\n         *\n         * This is not a hard limit. The `EventEmitter` instance will allow\n         * more listeners to be added but will output a trace warning to stderr indicating\n         * that a \"possible EventEmitter memory leak\" has been detected. For any single\n         * `EventEmitter`, the `emitter.getMaxListeners()` and `emitter.setMaxListeners()` methods can be used to\n         * temporarily avoid this warning:\n         *\n         * ```js\n         * import { EventEmitter } from 'node:events';\n         * const emitter = new EventEmitter();\n         * emitter.setMaxListeners(emitter.getMaxListeners() + 1);\n         * emitter.once('event', () => {\n         *   // do stuff\n         *   emitter.setMaxListeners(Math.max(emitter.getMaxListeners() - 1, 0));\n         * });\n         * ```\n         *\n         * The `--trace-warnings` command-line flag can be used to display the\n         * stack trace for such warnings.\n         *\n         * The emitted warning can be inspected with `process.on('warning')` and will\n         * have the additional `emitter`, `type`, and `count` properties, referring to\n         * the event emitter instance, the event's name and the number of attached\n         * listeners, respectively.\n         * Its `name` property is set to `'MaxListenersExceededWarning'`.\n         * @since v0.11.2\n         */\n        static defaultMaxListeners: number;\n    }\n    import internal = require(\"node:events\");\n    namespace EventEmitter {\n        // Should just be `export { EventEmitter }`, but that doesn't work in TypeScript 3.4\n        export { internal as EventEmitter };\n        export interface Abortable {\n            /**\n             * When provided the corresponding `AbortController` can be used to cancel an asynchronous action.\n             */\n            signal?: AbortSignal | undefined;\n        }\n\n        export interface EventEmitterReferencingAsyncResource extends AsyncResource {\n            readonly eventEmitter: EventEmitterAsyncResource;\n        }\n\n        export interface EventEmitterAsyncResourceOptions extends AsyncResourceOptions, EventEmitterOptions {\n            /**\n             * The type of async event, this is required when instantiating `EventEmitterAsyncResource`\n             * directly rather than as a child class.\n             * @default new.target.name if instantiated as a child class.\n             */\n            name?: string;\n        }\n\n        /**\n         * Integrates `EventEmitter` with `AsyncResource` for `EventEmitter`s that\n         * require manual async tracking. Specifically, all events emitted by instances\n         * of `events.EventEmitterAsyncResource` will run within its `async context`.\n         *\n         * ```js\n         * import { EventEmitterAsyncResource, EventEmitter } from 'node:events';\n         * import { notStrictEqual, strictEqual } from 'node:assert';\n         * import { executionAsyncId, triggerAsyncId } from 'node:async_hooks';\n         *\n         * // Async tracking tooling will identify this as 'Q'.\n         * const ee1 = new EventEmitterAsyncResource({ name: 'Q' });\n         *\n         * // 'foo' listeners will run in the EventEmitters async context.\n         * ee1.on('foo', () => {\n         *   strictEqual(executionAsyncId(), ee1.asyncId);\n         *   strictEqual(triggerAsyncId(), ee1.triggerAsyncId);\n         * });\n         *\n         * const ee2 = new EventEmitter();\n         *\n         * // 'foo' listeners on ordinary EventEmitters that do not track async\n         * // context, however, run in the same async context as the emit().\n         * ee2.on('foo', () => {\n         *   notStrictEqual(executionAsyncId(), ee2.asyncId);\n         *   notStrictEqual(triggerAsyncId(), ee2.triggerAsyncId);\n         * });\n         *\n         * Promise.resolve().then(() => {\n         *   ee1.emit('foo');\n         *   ee2.emit('foo');\n         * });\n         * ```\n         *\n         * The `EventEmitterAsyncResource` class has the same methods and takes the\n         * same options as `EventEmitter` and `AsyncResource` themselves.\n         * @since v17.4.0, v16.14.0\n         */\n        export class EventEmitterAsyncResource extends EventEmitter {\n            /**\n             * @param options Only optional in child class.\n             */\n            constructor(options?: EventEmitterAsyncResourceOptions);\n            /**\n             * Call all `destroy` hooks. This should only ever be called once. An error will\n             * be thrown if it is called more than once. This **must** be manually called. If\n             * the resource is left to be collected by the GC then the `destroy` hooks will\n             * never be called.\n             */\n            emitDestroy(): void;\n            /**\n             * The unique `asyncId` assigned to the resource.\n             */\n            readonly asyncId: number;\n            /**\n             * The same triggerAsyncId that is passed to the AsyncResource constructor.\n             */\n            readonly triggerAsyncId: number;\n            /**\n             * The returned `AsyncResource` object has an additional `eventEmitter` property\n             * that provides a reference to this `EventEmitterAsyncResource`.\n             */\n            readonly asyncResource: EventEmitterReferencingAsyncResource;\n        }\n    }\n    global {\n        namespace NodeJS {\n            interface EventEmitter<T extends EventMap<T> = DefaultEventMap> {\n                [EventEmitter.captureRejectionSymbol]?<K>(error: Error, event: Key<K, T>, ...args: Args<K, T>): void;\n                /**\n                 * Alias for `emitter.on(eventName, listener)`.\n                 * @since v0.1.26\n                 */\n                addListener<K>(eventName: Key<K, T>, listener: Listener1<K, T>): this;\n                /**\n                 * Adds the `listener` function to the end of the listeners array for the event\n                 * named `eventName`. No checks are made to see if the `listener` has already\n                 * been added. Multiple calls passing the same combination of `eventName` and\n                 * `listener` will result in the `listener` being added, and called, multiple times.\n                 *\n                 * ```js\n                 * server.on('connection', (stream) => {\n                 *   console.log('someone connected!');\n                 * });\n                 * ```\n                 *\n                 * Returns a reference to the `EventEmitter`, so that calls can be chained.\n                 *\n                 * By default, event listeners are invoked in the order they are added. The `emitter.prependListener()` method can be used as an alternative to add the\n                 * event listener to the beginning of the listeners array.\n                 *\n                 * ```js\n                 * import { EventEmitter } from 'node:events';\n                 * const myEE = new EventEmitter();\n                 * myEE.on('foo', () => console.log('a'));\n                 * myEE.prependListener('foo', () => console.log('b'));\n                 * myEE.emit('foo');\n                 * // Prints:\n                 * //   b\n                 * //   a\n                 * ```\n                 * @since v0.1.101\n                 * @param eventName The name of the event.\n                 * @param listener The callback function\n                 */\n                on<K>(eventName: Key<K, T>, listener: Listener1<K, T>): this;\n                /**\n                 * Adds a **one-time** `listener` function for the event named `eventName`. The\n                 * next time `eventName` is triggered, this listener is removed and then invoked.\n                 *\n                 * ```js\n                 * server.once('connection', (stream) => {\n                 *   console.log('Ah, we have our first user!');\n                 * });\n                 * ```\n                 *\n                 * Returns a reference to the `EventEmitter`, so that calls can be chained.\n                 *\n                 * By default, event listeners are invoked in the order they are added. The `emitter.prependOnceListener()` method can be used as an alternative to add the\n                 * event listener to the beginning of the listeners array.\n                 *\n                 * ```js\n                 * import { EventEmitter } from 'node:events';\n                 * const myEE = new EventEmitter();\n                 * myEE.once('foo', () => console.log('a'));\n                 * myEE.prependOnceListener('foo', () => console.log('b'));\n                 * myEE.emit('foo');\n                 * // Prints:\n                 * //   b\n                 * //   a\n                 * ```\n                 * @since v0.3.0\n                 * @param eventName The name of the event.\n                 * @param listener The callback function\n                 */\n                once<K>(eventName: Key<K, T>, listener: Listener1<K, T>): this;\n                /**\n                 * Removes the specified `listener` from the listener array for the event named `eventName`.\n                 *\n                 * ```js\n                 * const callback = (stream) => {\n                 *   console.log('someone connected!');\n                 * };\n                 * server.on('connection', callback);\n                 * // ...\n                 * server.removeListener('connection', callback);\n                 * ```\n                 *\n                 * `removeListener()` will remove, at most, one instance of a listener from the\n                 * listener array. If any single listener has been added multiple times to the\n                 * listener array for the specified `eventName`, then `removeListener()` must be\n                 * called multiple times to remove each instance.\n                 *\n                 * Once an event is emitted, all listeners attached to it at the\n                 * time of emitting are called in order. This implies that any `removeListener()` or `removeAllListeners()` calls _after_ emitting and _before_ the last listener finishes execution\n                 * will not remove them from`emit()` in progress. Subsequent events behave as expected.\n                 *\n                 * ```js\n                 * import { EventEmitter } from 'node:events';\n                 * class MyEmitter extends EventEmitter {}\n                 * const myEmitter = new MyEmitter();\n                 *\n                 * const callbackA = () => {\n                 *   console.log('A');\n                 *   myEmitter.removeListener('event', callbackB);\n                 * };\n                 *\n                 * const callbackB = () => {\n                 *   console.log('B');\n                 * };\n                 *\n                 * myEmitter.on('event', callbackA);\n                 *\n                 * myEmitter.on('event', callbackB);\n                 *\n                 * // callbackA removes listener callbackB but it will still be called.\n                 * // Internal listener array at time of emit [callbackA, callbackB]\n                 * myEmitter.emit('event');\n                 * // Prints:\n                 * //   A\n                 * //   B\n                 *\n                 * // callbackB is now removed.\n                 * // Internal listener array [callbackA]\n                 * myEmitter.emit('event');\n                 * // Prints:\n                 * //   A\n                 * ```\n                 *\n                 * Because listeners are managed using an internal array, calling this will\n                 * change the position indices of any listener registered _after_ the listener\n                 * being removed. This will not impact the order in which listeners are called,\n                 * but it means that any copies of the listener array as returned by\n                 * the `emitter.listeners()` method will need to be recreated.\n                 *\n                 * When a single function has been added as a handler multiple times for a single\n                 * event (as in the example below), `removeListener()` will remove the most\n                 * recently added instance. In the example the `once('ping')` listener is removed:\n                 *\n                 * ```js\n                 * import { EventEmitter } from 'node:events';\n                 * const ee = new EventEmitter();\n                 *\n                 * function pong() {\n                 *   console.log('pong');\n                 * }\n                 *\n                 * ee.on('ping', pong);\n                 * ee.once('ping', pong);\n                 * ee.removeListener('ping', pong);\n                 *\n                 * ee.emit('ping');\n                 * ee.emit('ping');\n                 * ```\n                 *\n                 * Returns a reference to the `EventEmitter`, so that calls can be chained.\n                 * @since v0.1.26\n                 */\n                removeListener<K>(eventName: Key<K, T>, listener: Listener1<K, T>): this;\n                /**\n                 * Alias for `emitter.removeListener()`.\n                 * @since v10.0.0\n                 */\n                off<K>(eventName: Key<K, T>, listener: Listener1<K, T>): this;\n                /**\n                 * Removes all listeners, or those of the specified `eventName`.\n                 *\n                 * It is bad practice to remove listeners added elsewhere in the code,\n                 * particularly when the `EventEmitter` instance was created by some other\n                 * component or module (e.g. sockets or file streams).\n                 *\n                 * Returns a reference to the `EventEmitter`, so that calls can be chained.\n                 * @since v0.1.26\n                 */\n                removeAllListeners(eventName?: Key<unknown, T>): this;\n                /**\n                 * By default `EventEmitter`s will print a warning if more than `10` listeners are\n                 * added for a particular event. This is a useful default that helps finding\n                 * memory leaks. The `emitter.setMaxListeners()` method allows the limit to be\n                 * modified for this specific `EventEmitter` instance. The value can be set to `Infinity` (or `0`) to indicate an unlimited number of listeners.\n                 *\n                 * Returns a reference to the `EventEmitter`, so that calls can be chained.\n                 * @since v0.3.5\n                 */\n                setMaxListeners(n: number): this;\n                /**\n                 * Returns the current max listener value for the `EventEmitter` which is either\n                 * set by `emitter.setMaxListeners(n)` or defaults to {@link EventEmitter.defaultMaxListeners}.\n                 * @since v1.0.0\n                 */\n                getMaxListeners(): number;\n                /**\n                 * Returns a copy of the array of listeners for the event named `eventName`.\n                 *\n                 * ```js\n                 * server.on('connection', (stream) => {\n                 *   console.log('someone connected!');\n                 * });\n                 * console.log(util.inspect(server.listeners('connection')));\n                 * // Prints: [ [Function] ]\n                 * ```\n                 * @since v0.1.26\n                 */\n                listeners<K>(eventName: Key<K, T>): Array<Listener2<K, T>>;\n                /**\n                 * Returns a copy of the array of listeners for the event named `eventName`,\n                 * including any wrappers (such as those created by `.once()`).\n                 *\n                 * ```js\n                 * import { EventEmitter } from 'node:events';\n                 * const emitter = new EventEmitter();\n                 * emitter.once('log', () => console.log('log once'));\n                 *\n                 * // Returns a new Array with a function `onceWrapper` which has a property\n                 * // `listener` which contains the original listener bound above\n                 * const listeners = emitter.rawListeners('log');\n                 * const logFnWrapper = listeners[0];\n                 *\n                 * // Logs \"log once\" to the console and does not unbind the `once` event\n                 * logFnWrapper.listener();\n                 *\n                 * // Logs \"log once\" to the console and removes the listener\n                 * logFnWrapper();\n                 *\n                 * emitter.on('log', () => console.log('log persistently'));\n                 * // Will return a new Array with a single function bound by `.on()` above\n                 * const newListeners = emitter.rawListeners('log');\n                 *\n                 * // Logs \"log persistently\" twice\n                 * newListeners[0]();\n                 * emitter.emit('log');\n                 * ```\n                 * @since v9.4.0\n                 */\n                rawListeners<K>(eventName: Key<K, T>): Array<Listener2<K, T>>;\n                /**\n                 * Synchronously calls each of the listeners registered for the event named `eventName`, in the order they were registered, passing the supplied arguments\n                 * to each.\n                 *\n                 * Returns `true` if the event had listeners, `false` otherwise.\n                 *\n                 * ```js\n                 * import { EventEmitter } from 'node:events';\n                 * const myEmitter = new EventEmitter();\n                 *\n                 * // First listener\n                 * myEmitter.on('event', function firstListener() {\n                 *   console.log('Helloooo! first listener');\n                 * });\n                 * // Second listener\n                 * myEmitter.on('event', function secondListener(arg1, arg2) {\n                 *   console.log(`event with parameters ${arg1}, ${arg2} in second listener`);\n                 * });\n                 * // Third listener\n                 * myEmitter.on('event', function thirdListener(...args) {\n                 *   const parameters = args.join(', ');\n                 *   console.log(`event with parameters ${parameters} in third listener`);\n                 * });\n                 *\n                 * console.log(myEmitter.listeners('event'));\n                 *\n                 * myEmitter.emit('event', 1, 2, 3, 4, 5);\n                 *\n                 * // Prints:\n                 * // [\n                 * //   [Function: firstListener],\n                 * //   [Function: secondListener],\n                 * //   [Function: thirdListener]\n                 * // ]\n                 * // Helloooo! first listener\n                 * // event with parameters 1, 2 in second listener\n                 * // event with parameters 1, 2, 3, 4, 5 in third listener\n                 * ```\n                 * @since v0.1.26\n                 */\n                emit<K>(eventName: Key<K, T>, ...args: Args<K, T>): boolean;\n                /**\n                 * Returns the number of listeners listening for the event named `eventName`.\n                 * If `listener` is provided, it will return how many times the listener is found\n                 * in the list of the listeners of the event.\n                 * @since v3.2.0\n                 * @param eventName The name of the event being listened for\n                 * @param listener The event handler function\n                 */\n                listenerCount<K>(eventName: Key<K, T>, listener?: Listener2<K, T>): number;\n                /**\n                 * Adds the `listener` function to the _beginning_ of the listeners array for the\n                 * event named `eventName`. No checks are made to see if the `listener` has\n                 * already been added. Multiple calls passing the same combination of `eventName`\n                 * and `listener` will result in the `listener` being added, and called, multiple times.\n                 *\n                 * ```js\n                 * server.prependListener('connection', (stream) => {\n                 *   console.log('someone connected!');\n                 * });\n                 * ```\n                 *\n                 * Returns a reference to the `EventEmitter`, so that calls can be chained.\n                 * @since v6.0.0\n                 * @param eventName The name of the event.\n                 * @param listener The callback function\n                 */\n                prependListener<K>(eventName: Key<K, T>, listener: Listener1<K, T>): this;\n                /**\n                 * Adds a **one-time**`listener` function for the event named `eventName` to the _beginning_ of the listeners array. The next time `eventName` is triggered, this\n                 * listener is removed, and then invoked.\n                 *\n                 * ```js\n                 * server.prependOnceListener('connection', (stream) => {\n                 *   console.log('Ah, we have our first user!');\n                 * });\n                 * ```\n                 *\n                 * Returns a reference to the `EventEmitter`, so that calls can be chained.\n                 * @since v6.0.0\n                 * @param eventName The name of the event.\n                 * @param listener The callback function\n                 */\n                prependOnceListener<K>(eventName: Key<K, T>, listener: Listener1<K, T>): this;\n                /**\n                 * Returns an array listing the events for which the emitter has registered\n                 * listeners. The values in the array are strings or `Symbol`s.\n                 *\n                 * ```js\n                 * import { EventEmitter } from 'node:events';\n                 *\n                 * const myEE = new EventEmitter();\n                 * myEE.on('foo', () => {});\n                 * myEE.on('bar', () => {});\n                 *\n                 * const sym = Symbol('symbol');\n                 * myEE.on(sym, () => {});\n                 *\n                 * console.log(myEE.eventNames());\n                 * // Prints: [ 'foo', 'bar', Symbol(symbol) ]\n                 * ```\n                 * @since v6.0.0\n                 */\n                eventNames(): Array<(string | symbol) & Key2<unknown, T>>;\n            }\n        }\n    }\n    export = EventEmitter;\n}\ndeclare module \"node:events\" {\n    import events = require(\"events\");\n    export = events;\n}\n",
  '@types/node/fs.d.ts':
    "/**\n * The `node:fs` module enables interacting with the file system in a\n * way modeled on standard POSIX functions.\n *\n * To use the promise-based APIs:\n *\n * ```js\n * import * as fs from 'node:fs/promises';\n * ```\n *\n * To use the callback and sync APIs:\n *\n * ```js\n * import * as fs from 'node:fs';\n * ```\n *\n * All file system operations have synchronous, callback, and promise-based\n * forms, and are accessible using both CommonJS syntax and ES6 Modules (ESM).\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/fs.js)\n */\ndeclare module \"fs\" {\n    import * as stream from \"node:stream\";\n    import { Abortable, EventEmitter } from \"node:events\";\n    import { URL } from \"node:url\";\n    import * as promises from \"node:fs/promises\";\n    export { promises };\n    /**\n     * Valid types for path values in \"fs\".\n     */\n    export type PathLike = string | Buffer | URL;\n    export type PathOrFileDescriptor = PathLike | number;\n    export type TimeLike = string | number | Date;\n    export type NoParamCallback = (err: NodeJS.ErrnoException | null) => void;\n    export type BufferEncodingOption =\n        | \"buffer\"\n        | {\n            encoding: \"buffer\";\n        };\n    export interface ObjectEncodingOptions {\n        encoding?: BufferEncoding | null | undefined;\n    }\n    export type EncodingOption = ObjectEncodingOptions | BufferEncoding | undefined | null;\n    export type OpenMode = number | string;\n    export type Mode = number | string;\n    export interface StatsBase<T> {\n        isFile(): boolean;\n        isDirectory(): boolean;\n        isBlockDevice(): boolean;\n        isCharacterDevice(): boolean;\n        isSymbolicLink(): boolean;\n        isFIFO(): boolean;\n        isSocket(): boolean;\n        dev: T;\n        ino: T;\n        mode: T;\n        nlink: T;\n        uid: T;\n        gid: T;\n        rdev: T;\n        size: T;\n        blksize: T;\n        blocks: T;\n        atimeMs: T;\n        mtimeMs: T;\n        ctimeMs: T;\n        birthtimeMs: T;\n        atime: Date;\n        mtime: Date;\n        ctime: Date;\n        birthtime: Date;\n    }\n    export interface Stats extends StatsBase<number> {}\n    /**\n     * A `fs.Stats` object provides information about a file.\n     *\n     * Objects returned from {@link stat}, {@link lstat}, {@link fstat}, and\n     * their synchronous counterparts are of this type.\n     * If `bigint` in the `options` passed to those methods is true, the numeric values\n     * will be `bigint` instead of `number`, and the object will contain additional\n     * nanosecond-precision properties suffixed with `Ns`. `Stat` objects are not to be created directly using the `new` keyword.\n     *\n     * ```console\n     * Stats {\n     *   dev: 2114,\n     *   ino: 48064969,\n     *   mode: 33188,\n     *   nlink: 1,\n     *   uid: 85,\n     *   gid: 100,\n     *   rdev: 0,\n     *   size: 527,\n     *   blksize: 4096,\n     *   blocks: 8,\n     *   atimeMs: 1318289051000.1,\n     *   mtimeMs: 1318289051000.1,\n     *   ctimeMs: 1318289051000.1,\n     *   birthtimeMs: 1318289051000.1,\n     *   atime: Mon, 10 Oct 2011 23:24:11 GMT,\n     *   mtime: Mon, 10 Oct 2011 23:24:11 GMT,\n     *   ctime: Mon, 10 Oct 2011 23:24:11 GMT,\n     *   birthtime: Mon, 10 Oct 2011 23:24:11 GMT }\n     * ```\n     *\n     * `bigint` version:\n     *\n     * ```console\n     * BigIntStats {\n     *   dev: 2114n,\n     *   ino: 48064969n,\n     *   mode: 33188n,\n     *   nlink: 1n,\n     *   uid: 85n,\n     *   gid: 100n,\n     *   rdev: 0n,\n     *   size: 527n,\n     *   blksize: 4096n,\n     *   blocks: 8n,\n     *   atimeMs: 1318289051000n,\n     *   mtimeMs: 1318289051000n,\n     *   ctimeMs: 1318289051000n,\n     *   birthtimeMs: 1318289051000n,\n     *   atimeNs: 1318289051000000000n,\n     *   mtimeNs: 1318289051000000000n,\n     *   ctimeNs: 1318289051000000000n,\n     *   birthtimeNs: 1318289051000000000n,\n     *   atime: Mon, 10 Oct 2011 23:24:11 GMT,\n     *   mtime: Mon, 10 Oct 2011 23:24:11 GMT,\n     *   ctime: Mon, 10 Oct 2011 23:24:11 GMT,\n     *   birthtime: Mon, 10 Oct 2011 23:24:11 GMT }\n     * ```\n     * @since v0.1.21\n     */\n    export class Stats {\n        private constructor();\n    }\n    export interface StatsFsBase<T> {\n        /** Type of file system. */\n        type: T;\n        /**  Optimal transfer block size. */\n        bsize: T;\n        /**  Total data blocks in file system. */\n        blocks: T;\n        /** Free blocks in file system. */\n        bfree: T;\n        /** Available blocks for unprivileged users */\n        bavail: T;\n        /** Total file nodes in file system. */\n        files: T;\n        /** Free file nodes in file system. */\n        ffree: T;\n    }\n    export interface StatsFs extends StatsFsBase<number> {}\n    /**\n     * Provides information about a mounted file system.\n     *\n     * Objects returned from {@link statfs} and its synchronous counterpart are of\n     * this type. If `bigint` in the `options` passed to those methods is `true`, the\n     * numeric values will be `bigint` instead of `number`.\n     *\n     * ```console\n     * StatFs {\n     *   type: 1397114950,\n     *   bsize: 4096,\n     *   blocks: 121938943,\n     *   bfree: 61058895,\n     *   bavail: 61058895,\n     *   files: 999,\n     *   ffree: 1000000\n     * }\n     * ```\n     *\n     * `bigint` version:\n     *\n     * ```console\n     * StatFs {\n     *   type: 1397114950n,\n     *   bsize: 4096n,\n     *   blocks: 121938943n,\n     *   bfree: 61058895n,\n     *   bavail: 61058895n,\n     *   files: 999n,\n     *   ffree: 1000000n\n     * }\n     * ```\n     * @since v19.6.0, v18.15.0\n     */\n    export class StatsFs {}\n    export interface BigIntStatsFs extends StatsFsBase<bigint> {}\n    export interface StatFsOptions {\n        bigint?: boolean | undefined;\n    }\n    /**\n     * A representation of a directory entry, which can be a file or a subdirectory\n     * within the directory, as returned by reading from an `fs.Dir`. The\n     * directory entry is a combination of the file name and file type pairs.\n     *\n     * Additionally, when {@link readdir} or {@link readdirSync} is called with\n     * the `withFileTypes` option set to `true`, the resulting array is filled with `fs.Dirent` objects, rather than strings or `Buffer` s.\n     * @since v10.10.0\n     */\n    export class Dirent<Name extends string | Buffer = string> {\n        /**\n         * Returns `true` if the `fs.Dirent` object describes a regular file.\n         * @since v10.10.0\n         */\n        isFile(): boolean;\n        /**\n         * Returns `true` if the `fs.Dirent` object describes a file system\n         * directory.\n         * @since v10.10.0\n         */\n        isDirectory(): boolean;\n        /**\n         * Returns `true` if the `fs.Dirent` object describes a block device.\n         * @since v10.10.0\n         */\n        isBlockDevice(): boolean;\n        /**\n         * Returns `true` if the `fs.Dirent` object describes a character device.\n         * @since v10.10.0\n         */\n        isCharacterDevice(): boolean;\n        /**\n         * Returns `true` if the `fs.Dirent` object describes a symbolic link.\n         * @since v10.10.0\n         */\n        isSymbolicLink(): boolean;\n        /**\n         * Returns `true` if the `fs.Dirent` object describes a first-in-first-out\n         * (FIFO) pipe.\n         * @since v10.10.0\n         */\n        isFIFO(): boolean;\n        /**\n         * Returns `true` if the `fs.Dirent` object describes a socket.\n         * @since v10.10.0\n         */\n        isSocket(): boolean;\n        /**\n         * The file name that this `fs.Dirent` object refers to. The type of this\n         * value is determined by the `options.encoding` passed to {@link readdir} or {@link readdirSync}.\n         * @since v10.10.0\n         */\n        name: Name;\n        /**\n         * The base path that this `fs.Dirent` object refers to.\n         * @since v20.12.0\n         */\n        parentPath: string;\n        /**\n         * Alias for `dirent.parentPath`.\n         * @since v20.1.0\n         * @deprecated Since v20.12.0\n         */\n        path: string;\n    }\n    /**\n     * A class representing a directory stream.\n     *\n     * Created by {@link opendir}, {@link opendirSync}, or `fsPromises.opendir()`.\n     *\n     * ```js\n     * import { opendir } from 'node:fs/promises';\n     *\n     * try {\n     *   const dir = await opendir('./');\n     *   for await (const dirent of dir)\n     *     console.log(dirent.name);\n     * } catch (err) {\n     *   console.error(err);\n     * }\n     * ```\n     *\n     * When using the async iterator, the `fs.Dir` object will be automatically\n     * closed after the iterator exits.\n     * @since v12.12.0\n     */\n    export class Dir implements AsyncIterable<Dirent> {\n        /**\n         * The read-only path of this directory as was provided to {@link opendir},{@link opendirSync}, or `fsPromises.opendir()`.\n         * @since v12.12.0\n         */\n        readonly path: string;\n        /**\n         * Asynchronously iterates over the directory via `readdir(3)` until all entries have been read.\n         */\n        [Symbol.asyncIterator](): NodeJS.AsyncIterator<Dirent>;\n        /**\n         * Asynchronously close the directory's underlying resource handle.\n         * Subsequent reads will result in errors.\n         *\n         * A promise is returned that will be fulfilled after the resource has been\n         * closed.\n         * @since v12.12.0\n         */\n        close(): Promise<void>;\n        close(cb: NoParamCallback): void;\n        /**\n         * Synchronously close the directory's underlying resource handle.\n         * Subsequent reads will result in errors.\n         * @since v12.12.0\n         */\n        closeSync(): void;\n        /**\n         * Asynchronously read the next directory entry via [`readdir(3)`](http://man7.org/linux/man-pages/man3/readdir.3.html) as an `fs.Dirent`.\n         *\n         * A promise is returned that will be fulfilled with an `fs.Dirent`, or `null` if there are no more directory entries to read.\n         *\n         * Directory entries returned by this function are in no particular order as\n         * provided by the operating system's underlying directory mechanisms.\n         * Entries added or removed while iterating over the directory might not be\n         * included in the iteration results.\n         * @since v12.12.0\n         * @return containing {fs.Dirent|null}\n         */\n        read(): Promise<Dirent | null>;\n        read(cb: (err: NodeJS.ErrnoException | null, dirEnt: Dirent | null) => void): void;\n        /**\n         * Synchronously read the next directory entry as an `fs.Dirent`. See the\n         * POSIX [`readdir(3)`](http://man7.org/linux/man-pages/man3/readdir.3.html) documentation for more detail.\n         *\n         * If there are no more directory entries to read, `null` will be returned.\n         *\n         * Directory entries returned by this function are in no particular order as\n         * provided by the operating system's underlying directory mechanisms.\n         * Entries added or removed while iterating over the directory might not be\n         * included in the iteration results.\n         * @since v12.12.0\n         */\n        readSync(): Dirent | null;\n    }\n    /**\n     * Class: fs.StatWatcher\n     * @since v14.3.0, v12.20.0\n     * Extends `EventEmitter`\n     * A successful call to {@link watchFile} method will return a new fs.StatWatcher object.\n     */\n    export interface StatWatcher extends EventEmitter {\n        /**\n         * When called, requests that the Node.js event loop _not_ exit so long as the `fs.StatWatcher` is active. Calling `watcher.ref()` multiple times will have\n         * no effect.\n         *\n         * By default, all `fs.StatWatcher` objects are \"ref'ed\", making it normally\n         * unnecessary to call `watcher.ref()` unless `watcher.unref()` had been\n         * called previously.\n         * @since v14.3.0, v12.20.0\n         */\n        ref(): this;\n        /**\n         * When called, the active `fs.StatWatcher` object will not require the Node.js\n         * event loop to remain active. If there is no other activity keeping the\n         * event loop running, the process may exit before the `fs.StatWatcher` object's\n         * callback is invoked. Calling `watcher.unref()` multiple times will have\n         * no effect.\n         * @since v14.3.0, v12.20.0\n         */\n        unref(): this;\n    }\n    export interface FSWatcher extends EventEmitter {\n        /**\n         * Stop watching for changes on the given `fs.FSWatcher`. Once stopped, the `fs.FSWatcher` object is no longer usable.\n         * @since v0.5.8\n         */\n        close(): void;\n        /**\n         * When called, requests that the Node.js event loop _not_ exit so long as the `fs.FSWatcher` is active. Calling `watcher.ref()` multiple times will have\n         * no effect.\n         *\n         * By default, all `fs.FSWatcher` objects are \"ref'ed\", making it normally\n         * unnecessary to call `watcher.ref()` unless `watcher.unref()` had been\n         * called previously.\n         * @since v14.3.0, v12.20.0\n         */\n        ref(): this;\n        /**\n         * When called, the active `fs.FSWatcher` object will not require the Node.js\n         * event loop to remain active. If there is no other activity keeping the\n         * event loop running, the process may exit before the `fs.FSWatcher` object's\n         * callback is invoked. Calling `watcher.unref()` multiple times will have\n         * no effect.\n         * @since v14.3.0, v12.20.0\n         */\n        unref(): this;\n        /**\n         * events.EventEmitter\n         *   1. change\n         *   2. close\n         *   3. error\n         */\n        addListener(event: string, listener: (...args: any[]) => void): this;\n        addListener(event: \"change\", listener: (eventType: string, filename: string | Buffer) => void): this;\n        addListener(event: \"close\", listener: () => void): this;\n        addListener(event: \"error\", listener: (error: Error) => void): this;\n        on(event: string, listener: (...args: any[]) => void): this;\n        on(event: \"change\", listener: (eventType: string, filename: string | Buffer) => void): this;\n        on(event: \"close\", listener: () => void): this;\n        on(event: \"error\", listener: (error: Error) => void): this;\n        once(event: string, listener: (...args: any[]) => void): this;\n        once(event: \"change\", listener: (eventType: string, filename: string | Buffer) => void): this;\n        once(event: \"close\", listener: () => void): this;\n        once(event: \"error\", listener: (error: Error) => void): this;\n        prependListener(event: string, listener: (...args: any[]) => void): this;\n        prependListener(event: \"change\", listener: (eventType: string, filename: string | Buffer) => void): this;\n        prependListener(event: \"close\", listener: () => void): this;\n        prependListener(event: \"error\", listener: (error: Error) => void): this;\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\n        prependOnceListener(event: \"change\", listener: (eventType: string, filename: string | Buffer) => void): this;\n        prependOnceListener(event: \"close\", listener: () => void): this;\n        prependOnceListener(event: \"error\", listener: (error: Error) => void): this;\n    }\n    /**\n     * Instances of `fs.ReadStream` are created and returned using the {@link createReadStream} function.\n     * @since v0.1.93\n     */\n    export class ReadStream extends stream.Readable {\n        close(callback?: (err?: NodeJS.ErrnoException | null) => void): void;\n        /**\n         * The number of bytes that have been read so far.\n         * @since v6.4.0\n         */\n        bytesRead: number;\n        /**\n         * The path to the file the stream is reading from as specified in the first\n         * argument to `fs.createReadStream()`. If `path` is passed as a string, then`readStream.path` will be a string. If `path` is passed as a `Buffer`, then`readStream.path` will be a\n         * `Buffer`. If `fd` is specified, then`readStream.path` will be `undefined`.\n         * @since v0.1.93\n         */\n        path: string | Buffer;\n        /**\n         * This property is `true` if the underlying file has not been opened yet,\n         * i.e. before the `'ready'` event is emitted.\n         * @since v11.2.0, v10.16.0\n         */\n        pending: boolean;\n        /**\n         * events.EventEmitter\n         *   1. open\n         *   2. close\n         *   3. ready\n         */\n        addListener<K extends keyof ReadStreamEvents>(event: K, listener: ReadStreamEvents[K]): this;\n        on<K extends keyof ReadStreamEvents>(event: K, listener: ReadStreamEvents[K]): this;\n        once<K extends keyof ReadStreamEvents>(event: K, listener: ReadStreamEvents[K]): this;\n        prependListener<K extends keyof ReadStreamEvents>(event: K, listener: ReadStreamEvents[K]): this;\n        prependOnceListener<K extends keyof ReadStreamEvents>(event: K, listener: ReadStreamEvents[K]): this;\n    }\n\n    /**\n     * The Keys are events of the ReadStream and the values are the functions that are called when the event is emitted.\n     */\n    type ReadStreamEvents = {\n        close: () => void;\n        data: (chunk: Buffer | string) => void;\n        end: () => void;\n        error: (err: Error) => void;\n        open: (fd: number) => void;\n        pause: () => void;\n        readable: () => void;\n        ready: () => void;\n        resume: () => void;\n    } & CustomEvents;\n\n    /**\n     * string & {} allows to allow any kind of strings for the event\n     * but still allows to have auto completion for the normal events.\n     */\n    type CustomEvents = { [Key in string & {} | symbol]: (...args: any[]) => void };\n\n    /**\n     * The Keys are events of the WriteStream and the values are the functions that are called when the event is emitted.\n     */\n    type WriteStreamEvents = {\n        close: () => void;\n        drain: () => void;\n        error: (err: Error) => void;\n        finish: () => void;\n        open: (fd: number) => void;\n        pipe: (src: stream.Readable) => void;\n        ready: () => void;\n        unpipe: (src: stream.Readable) => void;\n    } & CustomEvents;\n    /**\n     * * Extends `stream.Writable`\n     *\n     * Instances of `fs.WriteStream` are created and returned using the {@link createWriteStream} function.\n     * @since v0.1.93\n     */\n    export class WriteStream extends stream.Writable {\n        /**\n         * Closes `writeStream`. Optionally accepts a\n         * callback that will be executed once the `writeStream`is closed.\n         * @since v0.9.4\n         */\n        close(callback?: (err?: NodeJS.ErrnoException | null) => void): void;\n        /**\n         * The number of bytes written so far. Does not include data that is still queued\n         * for writing.\n         * @since v0.4.7\n         */\n        bytesWritten: number;\n        /**\n         * The path to the file the stream is writing to as specified in the first\n         * argument to {@link createWriteStream}. If `path` is passed as a string, then`writeStream.path` will be a string. If `path` is passed as a `Buffer`, then`writeStream.path` will be a\n         * `Buffer`.\n         * @since v0.1.93\n         */\n        path: string | Buffer;\n        /**\n         * This property is `true` if the underlying file has not been opened yet,\n         * i.e. before the `'ready'` event is emitted.\n         * @since v11.2.0\n         */\n        pending: boolean;\n        /**\n         * events.EventEmitter\n         *   1. open\n         *   2. close\n         *   3. ready\n         */\n        addListener<K extends keyof WriteStreamEvents>(event: K, listener: WriteStreamEvents[K]): this;\n        on<K extends keyof WriteStreamEvents>(event: K, listener: WriteStreamEvents[K]): this;\n        once<K extends keyof WriteStreamEvents>(event: K, listener: WriteStreamEvents[K]): this;\n        prependListener<K extends keyof WriteStreamEvents>(event: K, listener: WriteStreamEvents[K]): this;\n        prependOnceListener<K extends keyof WriteStreamEvents>(event: K, listener: WriteStreamEvents[K]): this;\n    }\n    /**\n     * Asynchronously rename file at `oldPath` to the pathname provided\n     * as `newPath`. In the case that `newPath` already exists, it will\n     * be overwritten. If there is a directory at `newPath`, an error will\n     * be raised instead. No arguments other than a possible exception are\n     * given to the completion callback.\n     *\n     * See also: [`rename(2)`](http://man7.org/linux/man-pages/man2/rename.2.html).\n     *\n     * ```js\n     * import { rename } from 'node:fs';\n     *\n     * rename('oldFile.txt', 'newFile.txt', (err) => {\n     *   if (err) throw err;\n     *   console.log('Rename complete!');\n     * });\n     * ```\n     * @since v0.0.2\n     */\n    export function rename(oldPath: PathLike, newPath: PathLike, callback: NoParamCallback): void;\n    export namespace rename {\n        /**\n         * Asynchronous rename(2) - Change the name or location of a file or directory.\n         * @param oldPath A path to a file. If a URL is provided, it must use the `file:` protocol.\n         * URL support is _experimental_.\n         * @param newPath A path to a file. If a URL is provided, it must use the `file:` protocol.\n         * URL support is _experimental_.\n         */\n        function __promisify__(oldPath: PathLike, newPath: PathLike): Promise<void>;\n    }\n    /**\n     * Renames the file from `oldPath` to `newPath`. Returns `undefined`.\n     *\n     * See the POSIX [`rename(2)`](http://man7.org/linux/man-pages/man2/rename.2.html) documentation for more details.\n     * @since v0.1.21\n     */\n    export function renameSync(oldPath: PathLike, newPath: PathLike): void;\n    /**\n     * Truncates the file. No arguments other than a possible exception are\n     * given to the completion callback. A file descriptor can also be passed as the\n     * first argument. In this case, `fs.ftruncate()` is called.\n     *\n     * ```js\n     * import { truncate } from 'node:fs';\n     * // Assuming that 'path/file.txt' is a regular file.\n     * truncate('path/file.txt', (err) => {\n     *   if (err) throw err;\n     *   console.log('path/file.txt was truncated');\n     * });\n     * ```\n     *\n     * Passing a file descriptor is deprecated and may result in an error being thrown\n     * in the future.\n     *\n     * See the POSIX [`truncate(2)`](http://man7.org/linux/man-pages/man2/truncate.2.html) documentation for more details.\n     * @since v0.8.6\n     * @param [len=0]\n     */\n    export function truncate(path: PathLike, len: number | undefined, callback: NoParamCallback): void;\n    /**\n     * Asynchronous truncate(2) - Truncate a file to a specified length.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     */\n    export function truncate(path: PathLike, callback: NoParamCallback): void;\n    export namespace truncate {\n        /**\n         * Asynchronous truncate(2) - Truncate a file to a specified length.\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n         * @param len If not specified, defaults to `0`.\n         */\n        function __promisify__(path: PathLike, len?: number): Promise<void>;\n    }\n    /**\n     * Truncates the file. Returns `undefined`. A file descriptor can also be\n     * passed as the first argument. In this case, `fs.ftruncateSync()` is called.\n     *\n     * Passing a file descriptor is deprecated and may result in an error being thrown\n     * in the future.\n     * @since v0.8.6\n     * @param [len=0]\n     */\n    export function truncateSync(path: PathLike, len?: number): void;\n    /**\n     * Truncates the file descriptor. No arguments other than a possible exception are\n     * given to the completion callback.\n     *\n     * See the POSIX [`ftruncate(2)`](http://man7.org/linux/man-pages/man2/ftruncate.2.html) documentation for more detail.\n     *\n     * If the file referred to by the file descriptor was larger than `len` bytes, only\n     * the first `len` bytes will be retained in the file.\n     *\n     * For example, the following program retains only the first four bytes of the\n     * file:\n     *\n     * ```js\n     * import { open, close, ftruncate } from 'node:fs';\n     *\n     * function closeFd(fd) {\n     *   close(fd, (err) => {\n     *     if (err) throw err;\n     *   });\n     * }\n     *\n     * open('temp.txt', 'r+', (err, fd) => {\n     *   if (err) throw err;\n     *\n     *   try {\n     *     ftruncate(fd, 4, (err) => {\n     *       closeFd(fd);\n     *       if (err) throw err;\n     *     });\n     *   } catch (err) {\n     *     closeFd(fd);\n     *     if (err) throw err;\n     *   }\n     * });\n     * ```\n     *\n     * If the file previously was shorter than `len` bytes, it is extended, and the\n     * extended part is filled with null bytes (`'\\0'`):\n     *\n     * If `len` is negative then `0` will be used.\n     * @since v0.8.6\n     * @param [len=0]\n     */\n    export function ftruncate(fd: number, len: number | undefined, callback: NoParamCallback): void;\n    /**\n     * Asynchronous ftruncate(2) - Truncate a file to a specified length.\n     * @param fd A file descriptor.\n     */\n    export function ftruncate(fd: number, callback: NoParamCallback): void;\n    export namespace ftruncate {\n        /**\n         * Asynchronous ftruncate(2) - Truncate a file to a specified length.\n         * @param fd A file descriptor.\n         * @param len If not specified, defaults to `0`.\n         */\n        function __promisify__(fd: number, len?: number): Promise<void>;\n    }\n    /**\n     * Truncates the file descriptor. Returns `undefined`.\n     *\n     * For detailed information, see the documentation of the asynchronous version of\n     * this API: {@link ftruncate}.\n     * @since v0.8.6\n     * @param [len=0]\n     */\n    export function ftruncateSync(fd: number, len?: number): void;\n    /**\n     * Asynchronously changes owner and group of a file. No arguments other than a\n     * possible exception are given to the completion callback.\n     *\n     * See the POSIX [`chown(2)`](http://man7.org/linux/man-pages/man2/chown.2.html) documentation for more detail.\n     * @since v0.1.97\n     */\n    export function chown(path: PathLike, uid: number, gid: number, callback: NoParamCallback): void;\n    export namespace chown {\n        /**\n         * Asynchronous chown(2) - Change ownership of a file.\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n         */\n        function __promisify__(path: PathLike, uid: number, gid: number): Promise<void>;\n    }\n    /**\n     * Synchronously changes owner and group of a file. Returns `undefined`.\n     * This is the synchronous version of {@link chown}.\n     *\n     * See the POSIX [`chown(2)`](http://man7.org/linux/man-pages/man2/chown.2.html) documentation for more detail.\n     * @since v0.1.97\n     */\n    export function chownSync(path: PathLike, uid: number, gid: number): void;\n    /**\n     * Sets the owner of the file. No arguments other than a possible exception are\n     * given to the completion callback.\n     *\n     * See the POSIX [`fchown(2)`](http://man7.org/linux/man-pages/man2/fchown.2.html) documentation for more detail.\n     * @since v0.4.7\n     */\n    export function fchown(fd: number, uid: number, gid: number, callback: NoParamCallback): void;\n    export namespace fchown {\n        /**\n         * Asynchronous fchown(2) - Change ownership of a file.\n         * @param fd A file descriptor.\n         */\n        function __promisify__(fd: number, uid: number, gid: number): Promise<void>;\n    }\n    /**\n     * Sets the owner of the file. Returns `undefined`.\n     *\n     * See the POSIX [`fchown(2)`](http://man7.org/linux/man-pages/man2/fchown.2.html) documentation for more detail.\n     * @since v0.4.7\n     * @param uid The file's new owner's user id.\n     * @param gid The file's new group's group id.\n     */\n    export function fchownSync(fd: number, uid: number, gid: number): void;\n    /**\n     * Set the owner of the symbolic link. No arguments other than a possible\n     * exception are given to the completion callback.\n     *\n     * See the POSIX [`lchown(2)`](http://man7.org/linux/man-pages/man2/lchown.2.html) documentation for more detail.\n     */\n    export function lchown(path: PathLike, uid: number, gid: number, callback: NoParamCallback): void;\n    export namespace lchown {\n        /**\n         * Asynchronous lchown(2) - Change ownership of a file. Does not dereference symbolic links.\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n         */\n        function __promisify__(path: PathLike, uid: number, gid: number): Promise<void>;\n    }\n    /**\n     * Set the owner for the path. Returns `undefined`.\n     *\n     * See the POSIX [`lchown(2)`](http://man7.org/linux/man-pages/man2/lchown.2.html) documentation for more details.\n     * @param uid The file's new owner's user id.\n     * @param gid The file's new group's group id.\n     */\n    export function lchownSync(path: PathLike, uid: number, gid: number): void;\n    /**\n     * Changes the access and modification times of a file in the same way as {@link utimes}, with the difference that if the path refers to a symbolic\n     * link, then the link is not dereferenced: instead, the timestamps of the\n     * symbolic link itself are changed.\n     *\n     * No arguments other than a possible exception are given to the completion\n     * callback.\n     * @since v14.5.0, v12.19.0\n     */\n    export function lutimes(path: PathLike, atime: TimeLike, mtime: TimeLike, callback: NoParamCallback): void;\n    export namespace lutimes {\n        /**\n         * Changes the access and modification times of a file in the same way as `fsPromises.utimes()`,\n         * with the difference that if the path refers to a symbolic link, then the link is not\n         * dereferenced: instead, the timestamps of the symbolic link itself are changed.\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n         * @param atime The last access time. If a string is provided, it will be coerced to number.\n         * @param mtime The last modified time. If a string is provided, it will be coerced to number.\n         */\n        function __promisify__(path: PathLike, atime: TimeLike, mtime: TimeLike): Promise<void>;\n    }\n    /**\n     * Change the file system timestamps of the symbolic link referenced by `path`.\n     * Returns `undefined`, or throws an exception when parameters are incorrect or\n     * the operation fails. This is the synchronous version of {@link lutimes}.\n     * @since v14.5.0, v12.19.0\n     */\n    export function lutimesSync(path: PathLike, atime: TimeLike, mtime: TimeLike): void;\n    /**\n     * Asynchronously changes the permissions of a file. No arguments other than a\n     * possible exception are given to the completion callback.\n     *\n     * See the POSIX [`chmod(2)`](http://man7.org/linux/man-pages/man2/chmod.2.html) documentation for more detail.\n     *\n     * ```js\n     * import { chmod } from 'node:fs';\n     *\n     * chmod('my_file.txt', 0o775, (err) => {\n     *   if (err) throw err;\n     *   console.log('The permissions for file \"my_file.txt\" have been changed!');\n     * });\n     * ```\n     * @since v0.1.30\n     */\n    export function chmod(path: PathLike, mode: Mode, callback: NoParamCallback): void;\n    export namespace chmod {\n        /**\n         * Asynchronous chmod(2) - Change permissions of a file.\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n         * @param mode A file mode. If a string is passed, it is parsed as an octal integer.\n         */\n        function __promisify__(path: PathLike, mode: Mode): Promise<void>;\n    }\n    /**\n     * For detailed information, see the documentation of the asynchronous version of\n     * this API: {@link chmod}.\n     *\n     * See the POSIX [`chmod(2)`](http://man7.org/linux/man-pages/man2/chmod.2.html) documentation for more detail.\n     * @since v0.6.7\n     */\n    export function chmodSync(path: PathLike, mode: Mode): void;\n    /**\n     * Sets the permissions on the file. No arguments other than a possible exception\n     * are given to the completion callback.\n     *\n     * See the POSIX [`fchmod(2)`](http://man7.org/linux/man-pages/man2/fchmod.2.html) documentation for more detail.\n     * @since v0.4.7\n     */\n    export function fchmod(fd: number, mode: Mode, callback: NoParamCallback): void;\n    export namespace fchmod {\n        /**\n         * Asynchronous fchmod(2) - Change permissions of a file.\n         * @param fd A file descriptor.\n         * @param mode A file mode. If a string is passed, it is parsed as an octal integer.\n         */\n        function __promisify__(fd: number, mode: Mode): Promise<void>;\n    }\n    /**\n     * Sets the permissions on the file. Returns `undefined`.\n     *\n     * See the POSIX [`fchmod(2)`](http://man7.org/linux/man-pages/man2/fchmod.2.html) documentation for more detail.\n     * @since v0.4.7\n     */\n    export function fchmodSync(fd: number, mode: Mode): void;\n    /**\n     * Changes the permissions on a symbolic link. No arguments other than a possible\n     * exception are given to the completion callback.\n     *\n     * This method is only implemented on macOS.\n     *\n     * See the POSIX [`lchmod(2)`](https://www.freebsd.org/cgi/man.cgi?query=lchmod&sektion=2) documentation for more detail.\n     * @deprecated Since v0.4.7\n     */\n    export function lchmod(path: PathLike, mode: Mode, callback: NoParamCallback): void;\n    /** @deprecated */\n    export namespace lchmod {\n        /**\n         * Asynchronous lchmod(2) - Change permissions of a file. Does not dereference symbolic links.\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n         * @param mode A file mode. If a string is passed, it is parsed as an octal integer.\n         */\n        function __promisify__(path: PathLike, mode: Mode): Promise<void>;\n    }\n    /**\n     * Changes the permissions on a symbolic link. Returns `undefined`.\n     *\n     * This method is only implemented on macOS.\n     *\n     * See the POSIX [`lchmod(2)`](https://www.freebsd.org/cgi/man.cgi?query=lchmod&sektion=2) documentation for more detail.\n     * @deprecated Since v0.4.7\n     */\n    export function lchmodSync(path: PathLike, mode: Mode): void;\n    /**\n     * Asynchronous [`stat(2)`](http://man7.org/linux/man-pages/man2/stat.2.html). The callback gets two arguments `(err, stats)` where`stats` is an `fs.Stats` object.\n     *\n     * In case of an error, the `err.code` will be one of `Common System Errors`.\n     *\n     * {@link stat} follows symbolic links. Use {@link lstat} to look at the\n     * links themselves.\n     *\n     * Using `fs.stat()` to check for the existence of a file before calling`fs.open()`, `fs.readFile()`, or `fs.writeFile()` is not recommended.\n     * Instead, user code should open/read/write the file directly and handle the\n     * error raised if the file is not available.\n     *\n     * To check if a file exists without manipulating it afterwards, {@link access} is recommended.\n     *\n     * For example, given the following directory structure:\n     *\n     * ```text\n     * - txtDir\n     * -- file.txt\n     * - app.js\n     * ```\n     *\n     * The next program will check for the stats of the given paths:\n     *\n     * ```js\n     * import { stat } from 'node:fs';\n     *\n     * const pathsToCheck = ['./txtDir', './txtDir/file.txt'];\n     *\n     * for (let i = 0; i < pathsToCheck.length; i++) {\n     *   stat(pathsToCheck[i], (err, stats) => {\n     *     console.log(stats.isDirectory());\n     *     console.log(stats);\n     *   });\n     * }\n     * ```\n     *\n     * The resulting output will resemble:\n     *\n     * ```console\n     * true\n     * Stats {\n     *   dev: 16777220,\n     *   mode: 16877,\n     *   nlink: 3,\n     *   uid: 501,\n     *   gid: 20,\n     *   rdev: 0,\n     *   blksize: 4096,\n     *   ino: 14214262,\n     *   size: 96,\n     *   blocks: 0,\n     *   atimeMs: 1561174653071.963,\n     *   mtimeMs: 1561174614583.3518,\n     *   ctimeMs: 1561174626623.5366,\n     *   birthtimeMs: 1561174126937.2893,\n     *   atime: 2019-06-22T03:37:33.072Z,\n     *   mtime: 2019-06-22T03:36:54.583Z,\n     *   ctime: 2019-06-22T03:37:06.624Z,\n     *   birthtime: 2019-06-22T03:28:46.937Z\n     * }\n     * false\n     * Stats {\n     *   dev: 16777220,\n     *   mode: 33188,\n     *   nlink: 1,\n     *   uid: 501,\n     *   gid: 20,\n     *   rdev: 0,\n     *   blksize: 4096,\n     *   ino: 14214074,\n     *   size: 8,\n     *   blocks: 8,\n     *   atimeMs: 1561174616618.8555,\n     *   mtimeMs: 1561174614584,\n     *   ctimeMs: 1561174614583.8145,\n     *   birthtimeMs: 1561174007710.7478,\n     *   atime: 2019-06-22T03:36:56.619Z,\n     *   mtime: 2019-06-22T03:36:54.584Z,\n     *   ctime: 2019-06-22T03:36:54.584Z,\n     *   birthtime: 2019-06-22T03:26:47.711Z\n     * }\n     * ```\n     * @since v0.0.2\n     */\n    export function stat(path: PathLike, callback: (err: NodeJS.ErrnoException | null, stats: Stats) => void): void;\n    export function stat(\n        path: PathLike,\n        options:\n            | (StatOptions & {\n                bigint?: false | undefined;\n            })\n            | undefined,\n        callback: (err: NodeJS.ErrnoException | null, stats: Stats) => void,\n    ): void;\n    export function stat(\n        path: PathLike,\n        options: StatOptions & {\n            bigint: true;\n        },\n        callback: (err: NodeJS.ErrnoException | null, stats: BigIntStats) => void,\n    ): void;\n    export function stat(\n        path: PathLike,\n        options: StatOptions | undefined,\n        callback: (err: NodeJS.ErrnoException | null, stats: Stats | BigIntStats) => void,\n    ): void;\n    export namespace stat {\n        /**\n         * Asynchronous stat(2) - Get file status.\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n         */\n        function __promisify__(\n            path: PathLike,\n            options?: StatOptions & {\n                bigint?: false | undefined;\n            },\n        ): Promise<Stats>;\n        function __promisify__(\n            path: PathLike,\n            options: StatOptions & {\n                bigint: true;\n            },\n        ): Promise<BigIntStats>;\n        function __promisify__(path: PathLike, options?: StatOptions): Promise<Stats | BigIntStats>;\n    }\n    export interface StatSyncFn extends Function {\n        (path: PathLike, options?: undefined): Stats;\n        (\n            path: PathLike,\n            options?: StatSyncOptions & {\n                bigint?: false | undefined;\n                throwIfNoEntry: false;\n            },\n        ): Stats | undefined;\n        (\n            path: PathLike,\n            options: StatSyncOptions & {\n                bigint: true;\n                throwIfNoEntry: false;\n            },\n        ): BigIntStats | undefined;\n        (\n            path: PathLike,\n            options?: StatSyncOptions & {\n                bigint?: false | undefined;\n            },\n        ): Stats;\n        (\n            path: PathLike,\n            options: StatSyncOptions & {\n                bigint: true;\n            },\n        ): BigIntStats;\n        (\n            path: PathLike,\n            options: StatSyncOptions & {\n                bigint: boolean;\n                throwIfNoEntry?: false | undefined;\n            },\n        ): Stats | BigIntStats;\n        (path: PathLike, options?: StatSyncOptions): Stats | BigIntStats | undefined;\n    }\n    /**\n     * Synchronous stat(2) - Get file status.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     */\n    export const statSync: StatSyncFn;\n    /**\n     * Invokes the callback with the `fs.Stats` for the file descriptor.\n     *\n     * See the POSIX [`fstat(2)`](http://man7.org/linux/man-pages/man2/fstat.2.html) documentation for more detail.\n     * @since v0.1.95\n     */\n    export function fstat(fd: number, callback: (err: NodeJS.ErrnoException | null, stats: Stats) => void): void;\n    export function fstat(\n        fd: number,\n        options:\n            | (StatOptions & {\n                bigint?: false | undefined;\n            })\n            | undefined,\n        callback: (err: NodeJS.ErrnoException | null, stats: Stats) => void,\n    ): void;\n    export function fstat(\n        fd: number,\n        options: StatOptions & {\n            bigint: true;\n        },\n        callback: (err: NodeJS.ErrnoException | null, stats: BigIntStats) => void,\n    ): void;\n    export function fstat(\n        fd: number,\n        options: StatOptions | undefined,\n        callback: (err: NodeJS.ErrnoException | null, stats: Stats | BigIntStats) => void,\n    ): void;\n    export namespace fstat {\n        /**\n         * Asynchronous fstat(2) - Get file status.\n         * @param fd A file descriptor.\n         */\n        function __promisify__(\n            fd: number,\n            options?: StatOptions & {\n                bigint?: false | undefined;\n            },\n        ): Promise<Stats>;\n        function __promisify__(\n            fd: number,\n            options: StatOptions & {\n                bigint: true;\n            },\n        ): Promise<BigIntStats>;\n        function __promisify__(fd: number, options?: StatOptions): Promise<Stats | BigIntStats>;\n    }\n    /**\n     * Retrieves the `fs.Stats` for the file descriptor.\n     *\n     * See the POSIX [`fstat(2)`](http://man7.org/linux/man-pages/man2/fstat.2.html) documentation for more detail.\n     * @since v0.1.95\n     */\n    export function fstatSync(\n        fd: number,\n        options?: StatOptions & {\n            bigint?: false | undefined;\n        },\n    ): Stats;\n    export function fstatSync(\n        fd: number,\n        options: StatOptions & {\n            bigint: true;\n        },\n    ): BigIntStats;\n    export function fstatSync(fd: number, options?: StatOptions): Stats | BigIntStats;\n    /**\n     * Retrieves the `fs.Stats` for the symbolic link referred to by the path.\n     * The callback gets two arguments `(err, stats)` where `stats` is a `fs.Stats` object. `lstat()` is identical to `stat()`, except that if `path` is a symbolic\n     * link, then the link itself is stat-ed, not the file that it refers to.\n     *\n     * See the POSIX [`lstat(2)`](http://man7.org/linux/man-pages/man2/lstat.2.html) documentation for more details.\n     * @since v0.1.30\n     */\n    export function lstat(path: PathLike, callback: (err: NodeJS.ErrnoException | null, stats: Stats) => void): void;\n    export function lstat(\n        path: PathLike,\n        options:\n            | (StatOptions & {\n                bigint?: false | undefined;\n            })\n            | undefined,\n        callback: (err: NodeJS.ErrnoException | null, stats: Stats) => void,\n    ): void;\n    export function lstat(\n        path: PathLike,\n        options: StatOptions & {\n            bigint: true;\n        },\n        callback: (err: NodeJS.ErrnoException | null, stats: BigIntStats) => void,\n    ): void;\n    export function lstat(\n        path: PathLike,\n        options: StatOptions | undefined,\n        callback: (err: NodeJS.ErrnoException | null, stats: Stats | BigIntStats) => void,\n    ): void;\n    export namespace lstat {\n        /**\n         * Asynchronous lstat(2) - Get file status. Does not dereference symbolic links.\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n         */\n        function __promisify__(\n            path: PathLike,\n            options?: StatOptions & {\n                bigint?: false | undefined;\n            },\n        ): Promise<Stats>;\n        function __promisify__(\n            path: PathLike,\n            options: StatOptions & {\n                bigint: true;\n            },\n        ): Promise<BigIntStats>;\n        function __promisify__(path: PathLike, options?: StatOptions): Promise<Stats | BigIntStats>;\n    }\n    /**\n     * Asynchronous [`statfs(2)`](http://man7.org/linux/man-pages/man2/statfs.2.html). Returns information about the mounted file system which\n     * contains `path`. The callback gets two arguments `(err, stats)` where `stats`is an `fs.StatFs` object.\n     *\n     * In case of an error, the `err.code` will be one of `Common System Errors`.\n     * @since v19.6.0, v18.15.0\n     * @param path A path to an existing file or directory on the file system to be queried.\n     */\n    export function statfs(path: PathLike, callback: (err: NodeJS.ErrnoException | null, stats: StatsFs) => void): void;\n    export function statfs(\n        path: PathLike,\n        options:\n            | (StatFsOptions & {\n                bigint?: false | undefined;\n            })\n            | undefined,\n        callback: (err: NodeJS.ErrnoException | null, stats: StatsFs) => void,\n    ): void;\n    export function statfs(\n        path: PathLike,\n        options: StatFsOptions & {\n            bigint: true;\n        },\n        callback: (err: NodeJS.ErrnoException | null, stats: BigIntStatsFs) => void,\n    ): void;\n    export function statfs(\n        path: PathLike,\n        options: StatFsOptions | undefined,\n        callback: (err: NodeJS.ErrnoException | null, stats: StatsFs | BigIntStatsFs) => void,\n    ): void;\n    export namespace statfs {\n        /**\n         * Asynchronous statfs(2) - Returns information about the mounted file system which contains path. The callback gets two arguments (err, stats) where stats is an <fs.StatFs> object.\n         * @param path A path to an existing file or directory on the file system to be queried.\n         */\n        function __promisify__(\n            path: PathLike,\n            options?: StatFsOptions & {\n                bigint?: false | undefined;\n            },\n        ): Promise<StatsFs>;\n        function __promisify__(\n            path: PathLike,\n            options: StatFsOptions & {\n                bigint: true;\n            },\n        ): Promise<BigIntStatsFs>;\n        function __promisify__(path: PathLike, options?: StatFsOptions): Promise<StatsFs | BigIntStatsFs>;\n    }\n    /**\n     * Synchronous [`statfs(2)`](http://man7.org/linux/man-pages/man2/statfs.2.html). Returns information about the mounted file system which\n     * contains `path`.\n     *\n     * In case of an error, the `err.code` will be one of `Common System Errors`.\n     * @since v19.6.0, v18.15.0\n     * @param path A path to an existing file or directory on the file system to be queried.\n     */\n    export function statfsSync(\n        path: PathLike,\n        options?: StatFsOptions & {\n            bigint?: false | undefined;\n        },\n    ): StatsFs;\n    export function statfsSync(\n        path: PathLike,\n        options: StatFsOptions & {\n            bigint: true;\n        },\n    ): BigIntStatsFs;\n    export function statfsSync(path: PathLike, options?: StatFsOptions): StatsFs | BigIntStatsFs;\n    /**\n     * Synchronous lstat(2) - Get file status. Does not dereference symbolic links.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     */\n    export const lstatSync: StatSyncFn;\n    /**\n     * Creates a new link from the `existingPath` to the `newPath`. See the POSIX [`link(2)`](http://man7.org/linux/man-pages/man2/link.2.html) documentation for more detail. No arguments other than\n     * a possible\n     * exception are given to the completion callback.\n     * @since v0.1.31\n     */\n    export function link(existingPath: PathLike, newPath: PathLike, callback: NoParamCallback): void;\n    export namespace link {\n        /**\n         * Asynchronous link(2) - Create a new link (also known as a hard link) to an existing file.\n         * @param existingPath A path to a file. If a URL is provided, it must use the `file:` protocol.\n         * @param newPath A path to a file. If a URL is provided, it must use the `file:` protocol.\n         */\n        function __promisify__(existingPath: PathLike, newPath: PathLike): Promise<void>;\n    }\n    /**\n     * Creates a new link from the `existingPath` to the `newPath`. See the POSIX [`link(2)`](http://man7.org/linux/man-pages/man2/link.2.html) documentation for more detail. Returns `undefined`.\n     * @since v0.1.31\n     */\n    export function linkSync(existingPath: PathLike, newPath: PathLike): void;\n    /**\n     * Creates the link called `path` pointing to `target`. No arguments other than a\n     * possible exception are given to the completion callback.\n     *\n     * See the POSIX [`symlink(2)`](http://man7.org/linux/man-pages/man2/symlink.2.html) documentation for more details.\n     *\n     * The `type` argument is only available on Windows and ignored on other platforms.\n     * It can be set to `'dir'`, `'file'`, or `'junction'`. If the `type` argument is\n     * not a string, Node.js will autodetect `target` type and use `'file'` or `'dir'`.\n     * If the `target` does not exist, `'file'` will be used. Windows junction points\n     * require the destination path to be absolute. When using `'junction'`, the`target` argument will automatically be normalized to absolute path. Junction\n     * points on NTFS volumes can only point to directories.\n     *\n     * Relative targets are relative to the link's parent directory.\n     *\n     * ```js\n     * import { symlink } from 'node:fs';\n     *\n     * symlink('./mew', './mewtwo', callback);\n     * ```\n     *\n     * The above example creates a symbolic link `mewtwo` which points to `mew` in the\n     * same directory:\n     *\n     * ```bash\n     * $ tree .\n     * .\n     * ├── mew\n     * └── mewtwo -> ./mew\n     * ```\n     * @since v0.1.31\n     * @param [type='null']\n     */\n    export function symlink(\n        target: PathLike,\n        path: PathLike,\n        type: symlink.Type | undefined | null,\n        callback: NoParamCallback,\n    ): void;\n    /**\n     * Asynchronous symlink(2) - Create a new symbolic link to an existing file.\n     * @param target A path to an existing file. If a URL is provided, it must use the `file:` protocol.\n     * @param path A path to the new symlink. If a URL is provided, it must use the `file:` protocol.\n     */\n    export function symlink(target: PathLike, path: PathLike, callback: NoParamCallback): void;\n    export namespace symlink {\n        /**\n         * Asynchronous symlink(2) - Create a new symbolic link to an existing file.\n         * @param target A path to an existing file. If a URL is provided, it must use the `file:` protocol.\n         * @param path A path to the new symlink. If a URL is provided, it must use the `file:` protocol.\n         * @param type May be set to `'dir'`, `'file'`, or `'junction'` (default is `'file'`) and is only available on Windows (ignored on other platforms).\n         * When using `'junction'`, the `target` argument will automatically be normalized to an absolute path.\n         */\n        function __promisify__(target: PathLike, path: PathLike, type?: string | null): Promise<void>;\n        type Type = \"dir\" | \"file\" | \"junction\";\n    }\n    /**\n     * Returns `undefined`.\n     *\n     * For detailed information, see the documentation of the asynchronous version of\n     * this API: {@link symlink}.\n     * @since v0.1.31\n     * @param [type='null']\n     */\n    export function symlinkSync(target: PathLike, path: PathLike, type?: symlink.Type | null): void;\n    /**\n     * Reads the contents of the symbolic link referred to by `path`. The callback gets\n     * two arguments `(err, linkString)`.\n     *\n     * See the POSIX [`readlink(2)`](http://man7.org/linux/man-pages/man2/readlink.2.html) documentation for more details.\n     *\n     * The optional `options` argument can be a string specifying an encoding, or an\n     * object with an `encoding` property specifying the character encoding to use for\n     * the link path passed to the callback. If the `encoding` is set to `'buffer'`,\n     * the link path returned will be passed as a `Buffer` object.\n     * @since v0.1.31\n     */\n    export function readlink(\n        path: PathLike,\n        options: EncodingOption,\n        callback: (err: NodeJS.ErrnoException | null, linkString: string) => void,\n    ): void;\n    /**\n     * Asynchronous readlink(2) - read value of a symbolic link.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\n     */\n    export function readlink(\n        path: PathLike,\n        options: BufferEncodingOption,\n        callback: (err: NodeJS.ErrnoException | null, linkString: Buffer) => void,\n    ): void;\n    /**\n     * Asynchronous readlink(2) - read value of a symbolic link.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\n     */\n    export function readlink(\n        path: PathLike,\n        options: EncodingOption,\n        callback: (err: NodeJS.ErrnoException | null, linkString: string | Buffer) => void,\n    ): void;\n    /**\n     * Asynchronous readlink(2) - read value of a symbolic link.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     */\n    export function readlink(\n        path: PathLike,\n        callback: (err: NodeJS.ErrnoException | null, linkString: string) => void,\n    ): void;\n    export namespace readlink {\n        /**\n         * Asynchronous readlink(2) - read value of a symbolic link.\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\n         */\n        function __promisify__(path: PathLike, options?: EncodingOption): Promise<string>;\n        /**\n         * Asynchronous readlink(2) - read value of a symbolic link.\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\n         */\n        function __promisify__(path: PathLike, options: BufferEncodingOption): Promise<Buffer>;\n        /**\n         * Asynchronous readlink(2) - read value of a symbolic link.\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\n         */\n        function __promisify__(path: PathLike, options?: EncodingOption): Promise<string | Buffer>;\n    }\n    /**\n     * Returns the symbolic link's string value.\n     *\n     * See the POSIX [`readlink(2)`](http://man7.org/linux/man-pages/man2/readlink.2.html) documentation for more details.\n     *\n     * The optional `options` argument can be a string specifying an encoding, or an\n     * object with an `encoding` property specifying the character encoding to use for\n     * the link path returned. If the `encoding` is set to `'buffer'`,\n     * the link path returned will be passed as a `Buffer` object.\n     * @since v0.1.31\n     */\n    export function readlinkSync(path: PathLike, options?: EncodingOption): string;\n    /**\n     * Synchronous readlink(2) - read value of a symbolic link.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\n     */\n    export function readlinkSync(path: PathLike, options: BufferEncodingOption): Buffer;\n    /**\n     * Synchronous readlink(2) - read value of a symbolic link.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\n     */\n    export function readlinkSync(path: PathLike, options?: EncodingOption): string | Buffer;\n    /**\n     * Asynchronously computes the canonical pathname by resolving `.`, `..`, and\n     * symbolic links.\n     *\n     * A canonical pathname is not necessarily unique. Hard links and bind mounts can\n     * expose a file system entity through many pathnames.\n     *\n     * This function behaves like [`realpath(3)`](http://man7.org/linux/man-pages/man3/realpath.3.html), with some exceptions:\n     *\n     * 1. No case conversion is performed on case-insensitive file systems.\n     * 2. The maximum number of symbolic links is platform-independent and generally\n     * (much) higher than what the native [`realpath(3)`](http://man7.org/linux/man-pages/man3/realpath.3.html) implementation supports.\n     *\n     * The `callback` gets two arguments `(err, resolvedPath)`. May use `process.cwd` to resolve relative paths.\n     *\n     * Only paths that can be converted to UTF8 strings are supported.\n     *\n     * The optional `options` argument can be a string specifying an encoding, or an\n     * object with an `encoding` property specifying the character encoding to use for\n     * the path passed to the callback. If the `encoding` is set to `'buffer'`,\n     * the path returned will be passed as a `Buffer` object.\n     *\n     * If `path` resolves to a socket or a pipe, the function will return a system\n     * dependent name for that object.\n     * @since v0.1.31\n     */\n    export function realpath(\n        path: PathLike,\n        options: EncodingOption,\n        callback: (err: NodeJS.ErrnoException | null, resolvedPath: string) => void,\n    ): void;\n    /**\n     * Asynchronous realpath(3) - return the canonicalized absolute pathname.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\n     */\n    export function realpath(\n        path: PathLike,\n        options: BufferEncodingOption,\n        callback: (err: NodeJS.ErrnoException | null, resolvedPath: Buffer) => void,\n    ): void;\n    /**\n     * Asynchronous realpath(3) - return the canonicalized absolute pathname.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\n     */\n    export function realpath(\n        path: PathLike,\n        options: EncodingOption,\n        callback: (err: NodeJS.ErrnoException | null, resolvedPath: string | Buffer) => void,\n    ): void;\n    /**\n     * Asynchronous realpath(3) - return the canonicalized absolute pathname.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     */\n    export function realpath(\n        path: PathLike,\n        callback: (err: NodeJS.ErrnoException | null, resolvedPath: string) => void,\n    ): void;\n    export namespace realpath {\n        /**\n         * Asynchronous realpath(3) - return the canonicalized absolute pathname.\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\n         */\n        function __promisify__(path: PathLike, options?: EncodingOption): Promise<string>;\n        /**\n         * Asynchronous realpath(3) - return the canonicalized absolute pathname.\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\n         */\n        function __promisify__(path: PathLike, options: BufferEncodingOption): Promise<Buffer>;\n        /**\n         * Asynchronous realpath(3) - return the canonicalized absolute pathname.\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\n         */\n        function __promisify__(path: PathLike, options?: EncodingOption): Promise<string | Buffer>;\n        /**\n         * Asynchronous [`realpath(3)`](http://man7.org/linux/man-pages/man3/realpath.3.html).\n         *\n         * The `callback` gets two arguments `(err, resolvedPath)`.\n         *\n         * Only paths that can be converted to UTF8 strings are supported.\n         *\n         * The optional `options` argument can be a string specifying an encoding, or an\n         * object with an `encoding` property specifying the character encoding to use for\n         * the path passed to the callback. If the `encoding` is set to `'buffer'`,\n         * the path returned will be passed as a `Buffer` object.\n         *\n         * On Linux, when Node.js is linked against musl libc, the procfs file system must\n         * be mounted on `/proc` in order for this function to work. Glibc does not have\n         * this restriction.\n         * @since v9.2.0\n         */\n        function native(\n            path: PathLike,\n            options: EncodingOption,\n            callback: (err: NodeJS.ErrnoException | null, resolvedPath: string) => void,\n        ): void;\n        function native(\n            path: PathLike,\n            options: BufferEncodingOption,\n            callback: (err: NodeJS.ErrnoException | null, resolvedPath: Buffer) => void,\n        ): void;\n        function native(\n            path: PathLike,\n            options: EncodingOption,\n            callback: (err: NodeJS.ErrnoException | null, resolvedPath: string | Buffer) => void,\n        ): void;\n        function native(\n            path: PathLike,\n            callback: (err: NodeJS.ErrnoException | null, resolvedPath: string) => void,\n        ): void;\n    }\n    /**\n     * Returns the resolved pathname.\n     *\n     * For detailed information, see the documentation of the asynchronous version of\n     * this API: {@link realpath}.\n     * @since v0.1.31\n     */\n    export function realpathSync(path: PathLike, options?: EncodingOption): string;\n    /**\n     * Synchronous realpath(3) - return the canonicalized absolute pathname.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\n     */\n    export function realpathSync(path: PathLike, options: BufferEncodingOption): Buffer;\n    /**\n     * Synchronous realpath(3) - return the canonicalized absolute pathname.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\n     */\n    export function realpathSync(path: PathLike, options?: EncodingOption): string | Buffer;\n    export namespace realpathSync {\n        function native(path: PathLike, options?: EncodingOption): string;\n        function native(path: PathLike, options: BufferEncodingOption): Buffer;\n        function native(path: PathLike, options?: EncodingOption): string | Buffer;\n    }\n    /**\n     * Asynchronously removes a file or symbolic link. No arguments other than a\n     * possible exception are given to the completion callback.\n     *\n     * ```js\n     * import { unlink } from 'node:fs';\n     * // Assuming that 'path/file.txt' is a regular file.\n     * unlink('path/file.txt', (err) => {\n     *   if (err) throw err;\n     *   console.log('path/file.txt was deleted');\n     * });\n     * ```\n     *\n     * `fs.unlink()` will not work on a directory, empty or otherwise. To remove a\n     * directory, use {@link rmdir}.\n     *\n     * See the POSIX [`unlink(2)`](http://man7.org/linux/man-pages/man2/unlink.2.html) documentation for more details.\n     * @since v0.0.2\n     */\n    export function unlink(path: PathLike, callback: NoParamCallback): void;\n    export namespace unlink {\n        /**\n         * Asynchronous unlink(2) - delete a name and possibly the file it refers to.\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n         */\n        function __promisify__(path: PathLike): Promise<void>;\n    }\n    /**\n     * Synchronous [`unlink(2)`](http://man7.org/linux/man-pages/man2/unlink.2.html). Returns `undefined`.\n     * @since v0.1.21\n     */\n    export function unlinkSync(path: PathLike): void;\n    export interface RmDirOptions {\n        /**\n         * If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or\n         * `EPERM` error is encountered, Node.js will retry the operation with a linear\n         * backoff wait of `retryDelay` ms longer on each try. This option represents the\n         * number of retries. This option is ignored if the `recursive` option is not\n         * `true`.\n         * @default 0\n         */\n        maxRetries?: number | undefined;\n        /**\n         * @deprecated since v14.14.0 In future versions of Node.js and will trigger a warning\n         * `fs.rmdir(path, { recursive: true })` will throw if `path` does not exist or is a file.\n         * Use `fs.rm(path, { recursive: true, force: true })` instead.\n         *\n         * If `true`, perform a recursive directory removal. In\n         * recursive mode, operations are retried on failure.\n         * @default false\n         */\n        recursive?: boolean | undefined;\n        /**\n         * The amount of time in milliseconds to wait between retries.\n         * This option is ignored if the `recursive` option is not `true`.\n         * @default 100\n         */\n        retryDelay?: number | undefined;\n    }\n    /**\n     * Asynchronous [`rmdir(2)`](http://man7.org/linux/man-pages/man2/rmdir.2.html). No arguments other than a possible exception are given\n     * to the completion callback.\n     *\n     * Using `fs.rmdir()` on a file (not a directory) results in an `ENOENT` error on\n     * Windows and an `ENOTDIR` error on POSIX.\n     *\n     * To get a behavior similar to the `rm -rf` Unix command, use {@link rm} with options `{ recursive: true, force: true }`.\n     * @since v0.0.2\n     */\n    export function rmdir(path: PathLike, callback: NoParamCallback): void;\n    export function rmdir(path: PathLike, options: RmDirOptions, callback: NoParamCallback): void;\n    export namespace rmdir {\n        /**\n         * Asynchronous rmdir(2) - delete a directory.\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n         */\n        function __promisify__(path: PathLike, options?: RmDirOptions): Promise<void>;\n    }\n    /**\n     * Synchronous [`rmdir(2)`](http://man7.org/linux/man-pages/man2/rmdir.2.html). Returns `undefined`.\n     *\n     * Using `fs.rmdirSync()` on a file (not a directory) results in an `ENOENT` error\n     * on Windows and an `ENOTDIR` error on POSIX.\n     *\n     * To get a behavior similar to the `rm -rf` Unix command, use {@link rmSync} with options `{ recursive: true, force: true }`.\n     * @since v0.1.21\n     */\n    export function rmdirSync(path: PathLike, options?: RmDirOptions): void;\n    export interface RmOptions {\n        /**\n         * When `true`, exceptions will be ignored if `path` does not exist.\n         * @default false\n         */\n        force?: boolean | undefined;\n        /**\n         * If an `EBUSY`, `EMFILE`, `ENFILE`, `ENOTEMPTY`, or\n         * `EPERM` error is encountered, Node.js will retry the operation with a linear\n         * backoff wait of `retryDelay` ms longer on each try. This option represents the\n         * number of retries. This option is ignored if the `recursive` option is not\n         * `true`.\n         * @default 0\n         */\n        maxRetries?: number | undefined;\n        /**\n         * If `true`, perform a recursive directory removal. In\n         * recursive mode, operations are retried on failure.\n         * @default false\n         */\n        recursive?: boolean | undefined;\n        /**\n         * The amount of time in milliseconds to wait between retries.\n         * This option is ignored if the `recursive` option is not `true`.\n         * @default 100\n         */\n        retryDelay?: number | undefined;\n    }\n    /**\n     * Asynchronously removes files and directories (modeled on the standard POSIX `rm` utility). No arguments other than a possible exception are given to the\n     * completion callback.\n     * @since v14.14.0\n     */\n    export function rm(path: PathLike, callback: NoParamCallback): void;\n    export function rm(path: PathLike, options: RmOptions, callback: NoParamCallback): void;\n    export namespace rm {\n        /**\n         * Asynchronously removes files and directories (modeled on the standard POSIX `rm` utility).\n         */\n        function __promisify__(path: PathLike, options?: RmOptions): Promise<void>;\n    }\n    /**\n     * Synchronously removes files and directories (modeled on the standard POSIX `rm` utility). Returns `undefined`.\n     * @since v14.14.0\n     */\n    export function rmSync(path: PathLike, options?: RmOptions): void;\n    export interface MakeDirectoryOptions {\n        /**\n         * Indicates whether parent folders should be created.\n         * If a folder was created, the path to the first created folder will be returned.\n         * @default false\n         */\n        recursive?: boolean | undefined;\n        /**\n         * A file mode. If a string is passed, it is parsed as an octal integer. If not specified\n         * @default 0o777\n         */\n        mode?: Mode | undefined;\n    }\n    /**\n     * Asynchronously creates a directory.\n     *\n     * The callback is given a possible exception and, if `recursive` is `true`, the\n     * first directory path created, `(err[, path])`.`path` can still be `undefined` when `recursive` is `true`, if no directory was\n     * created (for instance, if it was previously created).\n     *\n     * The optional `options` argument can be an integer specifying `mode` (permission\n     * and sticky bits), or an object with a `mode` property and a `recursive` property indicating whether parent directories should be created. Calling `fs.mkdir()` when `path` is a directory that\n     * exists results in an error only\n     * when `recursive` is false. If `recursive` is false and the directory exists,\n     * an `EEXIST` error occurs.\n     *\n     * ```js\n     * import { mkdir } from 'node:fs';\n     *\n     * // Create ./tmp/a/apple, regardless of whether ./tmp and ./tmp/a exist.\n     * mkdir('./tmp/a/apple', { recursive: true }, (err) => {\n     *   if (err) throw err;\n     * });\n     * ```\n     *\n     * On Windows, using `fs.mkdir()` on the root directory even with recursion will\n     * result in an error:\n     *\n     * ```js\n     * import { mkdir } from 'node:fs';\n     *\n     * mkdir('/', { recursive: true }, (err) => {\n     *   // => [Error: EPERM: operation not permitted, mkdir 'C:\\']\n     * });\n     * ```\n     *\n     * See the POSIX [`mkdir(2)`](http://man7.org/linux/man-pages/man2/mkdir.2.html) documentation for more details.\n     * @since v0.1.8\n     */\n    export function mkdir(\n        path: PathLike,\n        options: MakeDirectoryOptions & {\n            recursive: true;\n        },\n        callback: (err: NodeJS.ErrnoException | null, path?: string) => void,\n    ): void;\n    /**\n     * Asynchronous mkdir(2) - create a directory.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     * @param options Either the file mode, or an object optionally specifying the file mode and whether parent folders\n     * should be created. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.\n     */\n    export function mkdir(\n        path: PathLike,\n        options:\n            | Mode\n            | (MakeDirectoryOptions & {\n                recursive?: false | undefined;\n            })\n            | null\n            | undefined,\n        callback: NoParamCallback,\n    ): void;\n    /**\n     * Asynchronous mkdir(2) - create a directory.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     * @param options Either the file mode, or an object optionally specifying the file mode and whether parent folders\n     * should be created. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.\n     */\n    export function mkdir(\n        path: PathLike,\n        options: Mode | MakeDirectoryOptions | null | undefined,\n        callback: (err: NodeJS.ErrnoException | null, path?: string) => void,\n    ): void;\n    /**\n     * Asynchronous mkdir(2) - create a directory with a mode of `0o777`.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     */\n    export function mkdir(path: PathLike, callback: NoParamCallback): void;\n    export namespace mkdir {\n        /**\n         * Asynchronous mkdir(2) - create a directory.\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n         * @param options Either the file mode, or an object optionally specifying the file mode and whether parent folders\n         * should be created. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.\n         */\n        function __promisify__(\n            path: PathLike,\n            options: MakeDirectoryOptions & {\n                recursive: true;\n            },\n        ): Promise<string | undefined>;\n        /**\n         * Asynchronous mkdir(2) - create a directory.\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n         * @param options Either the file mode, or an object optionally specifying the file mode and whether parent folders\n         * should be created. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.\n         */\n        function __promisify__(\n            path: PathLike,\n            options?:\n                | Mode\n                | (MakeDirectoryOptions & {\n                    recursive?: false | undefined;\n                })\n                | null,\n        ): Promise<void>;\n        /**\n         * Asynchronous mkdir(2) - create a directory.\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n         * @param options Either the file mode, or an object optionally specifying the file mode and whether parent folders\n         * should be created. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.\n         */\n        function __promisify__(\n            path: PathLike,\n            options?: Mode | MakeDirectoryOptions | null,\n        ): Promise<string | undefined>;\n    }\n    /**\n     * Synchronously creates a directory. Returns `undefined`, or if `recursive` is `true`, the first directory path created.\n     * This is the synchronous version of {@link mkdir}.\n     *\n     * See the POSIX [`mkdir(2)`](http://man7.org/linux/man-pages/man2/mkdir.2.html) documentation for more details.\n     * @since v0.1.21\n     */\n    export function mkdirSync(\n        path: PathLike,\n        options: MakeDirectoryOptions & {\n            recursive: true;\n        },\n    ): string | undefined;\n    /**\n     * Synchronous mkdir(2) - create a directory.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     * @param options Either the file mode, or an object optionally specifying the file mode and whether parent folders\n     * should be created. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.\n     */\n    export function mkdirSync(\n        path: PathLike,\n        options?:\n            | Mode\n            | (MakeDirectoryOptions & {\n                recursive?: false | undefined;\n            })\n            | null,\n    ): void;\n    /**\n     * Synchronous mkdir(2) - create a directory.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     * @param options Either the file mode, or an object optionally specifying the file mode and whether parent folders\n     * should be created. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.\n     */\n    export function mkdirSync(path: PathLike, options?: Mode | MakeDirectoryOptions | null): string | undefined;\n    /**\n     * Creates a unique temporary directory.\n     *\n     * Generates six random characters to be appended behind a required `prefix` to create a unique temporary directory. Due to platform\n     * inconsistencies, avoid trailing `X` characters in `prefix`. Some platforms,\n     * notably the BSDs, can return more than six random characters, and replace\n     * trailing `X` characters in `prefix` with random characters.\n     *\n     * The created directory path is passed as a string to the callback's second\n     * parameter.\n     *\n     * The optional `options` argument can be a string specifying an encoding, or an\n     * object with an `encoding` property specifying the character encoding to use.\n     *\n     * ```js\n     * import { mkdtemp } from 'node:fs';\n     * import { join } from 'node:path';\n     * import { tmpdir } from 'node:os';\n     *\n     * mkdtemp(join(tmpdir(), 'foo-'), (err, directory) => {\n     *   if (err) throw err;\n     *   console.log(directory);\n     *   // Prints: /tmp/foo-itXde2 or C:\\Users\\...\\AppData\\Local\\Temp\\foo-itXde2\n     * });\n     * ```\n     *\n     * The `fs.mkdtemp()` method will append the six randomly selected characters\n     * directly to the `prefix` string. For instance, given a directory `/tmp`, if the\n     * intention is to create a temporary directory _within_`/tmp`, the `prefix`must end with a trailing platform-specific path separator\n     * (`import { sep } from 'node:path'`).\n     *\n     * ```js\n     * import { tmpdir } from 'node:os';\n     * import { mkdtemp } from 'node:fs';\n     *\n     * // The parent directory for the new temporary directory\n     * const tmpDir = tmpdir();\n     *\n     * // This method is *INCORRECT*:\n     * mkdtemp(tmpDir, (err, directory) => {\n     *   if (err) throw err;\n     *   console.log(directory);\n     *   // Will print something similar to `/tmpabc123`.\n     *   // A new temporary directory is created at the file system root\n     *   // rather than *within* the /tmp directory.\n     * });\n     *\n     * // This method is *CORRECT*:\n     * import { sep } from 'node:path';\n     * mkdtemp(`${tmpDir}${sep}`, (err, directory) => {\n     *   if (err) throw err;\n     *   console.log(directory);\n     *   // Will print something similar to `/tmp/abc123`.\n     *   // A new temporary directory is created within\n     *   // the /tmp directory.\n     * });\n     * ```\n     * @since v5.10.0\n     */\n    export function mkdtemp(\n        prefix: string,\n        options: EncodingOption,\n        callback: (err: NodeJS.ErrnoException | null, folder: string) => void,\n    ): void;\n    /**\n     * Asynchronously creates a unique temporary directory.\n     * Generates six random characters to be appended behind a required prefix to create a unique temporary directory.\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\n     */\n    export function mkdtemp(\n        prefix: string,\n        options:\n            | \"buffer\"\n            | {\n                encoding: \"buffer\";\n            },\n        callback: (err: NodeJS.ErrnoException | null, folder: Buffer) => void,\n    ): void;\n    /**\n     * Asynchronously creates a unique temporary directory.\n     * Generates six random characters to be appended behind a required prefix to create a unique temporary directory.\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\n     */\n    export function mkdtemp(\n        prefix: string,\n        options: EncodingOption,\n        callback: (err: NodeJS.ErrnoException | null, folder: string | Buffer) => void,\n    ): void;\n    /**\n     * Asynchronously creates a unique temporary directory.\n     * Generates six random characters to be appended behind a required prefix to create a unique temporary directory.\n     */\n    export function mkdtemp(\n        prefix: string,\n        callback: (err: NodeJS.ErrnoException | null, folder: string) => void,\n    ): void;\n    export namespace mkdtemp {\n        /**\n         * Asynchronously creates a unique temporary directory.\n         * Generates six random characters to be appended behind a required prefix to create a unique temporary directory.\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\n         */\n        function __promisify__(prefix: string, options?: EncodingOption): Promise<string>;\n        /**\n         * Asynchronously creates a unique temporary directory.\n         * Generates six random characters to be appended behind a required prefix to create a unique temporary directory.\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\n         */\n        function __promisify__(prefix: string, options: BufferEncodingOption): Promise<Buffer>;\n        /**\n         * Asynchronously creates a unique temporary directory.\n         * Generates six random characters to be appended behind a required prefix to create a unique temporary directory.\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\n         */\n        function __promisify__(prefix: string, options?: EncodingOption): Promise<string | Buffer>;\n    }\n    /**\n     * Returns the created directory path.\n     *\n     * For detailed information, see the documentation of the asynchronous version of\n     * this API: {@link mkdtemp}.\n     *\n     * The optional `options` argument can be a string specifying an encoding, or an\n     * object with an `encoding` property specifying the character encoding to use.\n     * @since v5.10.0\n     */\n    export function mkdtempSync(prefix: string, options?: EncodingOption): string;\n    /**\n     * Synchronously creates a unique temporary directory.\n     * Generates six random characters to be appended behind a required prefix to create a unique temporary directory.\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\n     */\n    export function mkdtempSync(prefix: string, options: BufferEncodingOption): Buffer;\n    /**\n     * Synchronously creates a unique temporary directory.\n     * Generates six random characters to be appended behind a required prefix to create a unique temporary directory.\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\n     */\n    export function mkdtempSync(prefix: string, options?: EncodingOption): string | Buffer;\n    /**\n     * Reads the contents of a directory. The callback gets two arguments `(err, files)` where `files` is an array of the names of the files in the directory excluding `'.'` and `'..'`.\n     *\n     * See the POSIX [`readdir(3)`](http://man7.org/linux/man-pages/man3/readdir.3.html) documentation for more details.\n     *\n     * The optional `options` argument can be a string specifying an encoding, or an\n     * object with an `encoding` property specifying the character encoding to use for\n     * the filenames passed to the callback. If the `encoding` is set to `'buffer'`,\n     * the filenames returned will be passed as `Buffer` objects.\n     *\n     * If `options.withFileTypes` is set to `true`, the `files` array will contain `fs.Dirent` objects.\n     * @since v0.1.8\n     */\n    export function readdir(\n        path: PathLike,\n        options:\n            | {\n                encoding: BufferEncoding | null;\n                withFileTypes?: false | undefined;\n                recursive?: boolean | undefined;\n            }\n            | BufferEncoding\n            | undefined\n            | null,\n        callback: (err: NodeJS.ErrnoException | null, files: string[]) => void,\n    ): void;\n    /**\n     * Asynchronous readdir(3) - read a directory.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\n     */\n    export function readdir(\n        path: PathLike,\n        options:\n            | {\n                encoding: \"buffer\";\n                withFileTypes?: false | undefined;\n                recursive?: boolean | undefined;\n            }\n            | \"buffer\",\n        callback: (err: NodeJS.ErrnoException | null, files: Buffer[]) => void,\n    ): void;\n    /**\n     * Asynchronous readdir(3) - read a directory.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\n     */\n    export function readdir(\n        path: PathLike,\n        options:\n            | (ObjectEncodingOptions & {\n                withFileTypes?: false | undefined;\n                recursive?: boolean | undefined;\n            })\n            | BufferEncoding\n            | undefined\n            | null,\n        callback: (err: NodeJS.ErrnoException | null, files: string[] | Buffer[]) => void,\n    ): void;\n    /**\n     * Asynchronous readdir(3) - read a directory.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     */\n    export function readdir(\n        path: PathLike,\n        callback: (err: NodeJS.ErrnoException | null, files: string[]) => void,\n    ): void;\n    /**\n     * Asynchronous readdir(3) - read a directory.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     * @param options If called with `withFileTypes: true` the result data will be an array of Dirent.\n     */\n    export function readdir(\n        path: PathLike,\n        options: ObjectEncodingOptions & {\n            withFileTypes: true;\n            recursive?: boolean | undefined;\n        },\n        callback: (err: NodeJS.ErrnoException | null, files: Dirent[]) => void,\n    ): void;\n    /**\n     * Asynchronous readdir(3) - read a directory.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     * @param options Must include `withFileTypes: true` and `encoding: 'buffer'`.\n     */\n    export function readdir(\n        path: PathLike,\n        options: {\n            encoding: \"buffer\";\n            withFileTypes: true;\n            recursive?: boolean | undefined;\n        },\n        callback: (err: NodeJS.ErrnoException | null, files: Dirent<Buffer>[]) => void,\n    ): void;\n    export namespace readdir {\n        /**\n         * Asynchronous readdir(3) - read a directory.\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\n         */\n        function __promisify__(\n            path: PathLike,\n            options?:\n                | {\n                    encoding: BufferEncoding | null;\n                    withFileTypes?: false | undefined;\n                    recursive?: boolean | undefined;\n                }\n                | BufferEncoding\n                | null,\n        ): Promise<string[]>;\n        /**\n         * Asynchronous readdir(3) - read a directory.\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\n         */\n        function __promisify__(\n            path: PathLike,\n            options:\n                | \"buffer\"\n                | {\n                    encoding: \"buffer\";\n                    withFileTypes?: false | undefined;\n                    recursive?: boolean | undefined;\n                },\n        ): Promise<Buffer[]>;\n        /**\n         * Asynchronous readdir(3) - read a directory.\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n         * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\n         */\n        function __promisify__(\n            path: PathLike,\n            options?:\n                | (ObjectEncodingOptions & {\n                    withFileTypes?: false | undefined;\n                    recursive?: boolean | undefined;\n                })\n                | BufferEncoding\n                | null,\n        ): Promise<string[] | Buffer[]>;\n        /**\n         * Asynchronous readdir(3) - read a directory.\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n         * @param options If called with `withFileTypes: true` the result data will be an array of Dirent\n         */\n        function __promisify__(\n            path: PathLike,\n            options: ObjectEncodingOptions & {\n                withFileTypes: true;\n                recursive?: boolean | undefined;\n            },\n        ): Promise<Dirent[]>;\n        /**\n         * Asynchronous readdir(3) - read a directory.\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n         * @param options Must include `withFileTypes: true` and `encoding: 'buffer'`.\n         */\n        function __promisify__(\n            path: PathLike,\n            options: {\n                encoding: \"buffer\";\n                withFileTypes: true;\n                recursive?: boolean | undefined;\n            },\n        ): Promise<Dirent<Buffer>[]>;\n    }\n    /**\n     * Reads the contents of the directory.\n     *\n     * See the POSIX [`readdir(3)`](http://man7.org/linux/man-pages/man3/readdir.3.html) documentation for more details.\n     *\n     * The optional `options` argument can be a string specifying an encoding, or an\n     * object with an `encoding` property specifying the character encoding to use for\n     * the filenames returned. If the `encoding` is set to `'buffer'`,\n     * the filenames returned will be passed as `Buffer` objects.\n     *\n     * If `options.withFileTypes` is set to `true`, the result will contain `fs.Dirent` objects.\n     * @since v0.1.21\n     */\n    export function readdirSync(\n        path: PathLike,\n        options?:\n            | {\n                encoding: BufferEncoding | null;\n                withFileTypes?: false | undefined;\n                recursive?: boolean | undefined;\n            }\n            | BufferEncoding\n            | null,\n    ): string[];\n    /**\n     * Synchronous readdir(3) - read a directory.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\n     */\n    export function readdirSync(\n        path: PathLike,\n        options:\n            | {\n                encoding: \"buffer\";\n                withFileTypes?: false | undefined;\n                recursive?: boolean | undefined;\n            }\n            | \"buffer\",\n    ): Buffer[];\n    /**\n     * Synchronous readdir(3) - read a directory.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\n     */\n    export function readdirSync(\n        path: PathLike,\n        options?:\n            | (ObjectEncodingOptions & {\n                withFileTypes?: false | undefined;\n                recursive?: boolean | undefined;\n            })\n            | BufferEncoding\n            | null,\n    ): string[] | Buffer[];\n    /**\n     * Synchronous readdir(3) - read a directory.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     * @param options If called with `withFileTypes: true` the result data will be an array of Dirent.\n     */\n    export function readdirSync(\n        path: PathLike,\n        options: ObjectEncodingOptions & {\n            withFileTypes: true;\n            recursive?: boolean | undefined;\n        },\n    ): Dirent[];\n    /**\n     * Synchronous readdir(3) - read a directory.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     * @param options Must include `withFileTypes: true` and `encoding: 'buffer'`.\n     */\n    export function readdirSync(\n        path: PathLike,\n        options: {\n            encoding: \"buffer\";\n            withFileTypes: true;\n            recursive?: boolean | undefined;\n        },\n    ): Dirent<Buffer>[];\n    /**\n     * Closes the file descriptor. No arguments other than a possible exception are\n     * given to the completion callback.\n     *\n     * Calling `fs.close()` on any file descriptor (`fd`) that is currently in use\n     * through any other `fs` operation may lead to undefined behavior.\n     *\n     * See the POSIX [`close(2)`](http://man7.org/linux/man-pages/man2/close.2.html) documentation for more detail.\n     * @since v0.0.2\n     */\n    export function close(fd: number, callback?: NoParamCallback): void;\n    export namespace close {\n        /**\n         * Asynchronous close(2) - close a file descriptor.\n         * @param fd A file descriptor.\n         */\n        function __promisify__(fd: number): Promise<void>;\n    }\n    /**\n     * Closes the file descriptor. Returns `undefined`.\n     *\n     * Calling `fs.closeSync()` on any file descriptor (`fd`) that is currently in use\n     * through any other `fs` operation may lead to undefined behavior.\n     *\n     * See the POSIX [`close(2)`](http://man7.org/linux/man-pages/man2/close.2.html) documentation for more detail.\n     * @since v0.1.21\n     */\n    export function closeSync(fd: number): void;\n    /**\n     * Asynchronous file open. See the POSIX [`open(2)`](http://man7.org/linux/man-pages/man2/open.2.html) documentation for more details.\n     *\n     * `mode` sets the file mode (permission and sticky bits), but only if the file was\n     * created. On Windows, only the write permission can be manipulated; see {@link chmod}.\n     *\n     * The callback gets two arguments `(err, fd)`.\n     *\n     * Some characters (`< > : \" / \\ | ? *`) are reserved under Windows as documented\n     * by [Naming Files, Paths, and Namespaces](https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file). Under NTFS, if the filename contains\n     * a colon, Node.js will open a file system stream, as described by [this MSDN page](https://docs.microsoft.com/en-us/windows/desktop/FileIO/using-streams).\n     *\n     * Functions based on `fs.open()` exhibit this behavior as well:`fs.writeFile()`, `fs.readFile()`, etc.\n     * @since v0.0.2\n     * @param [flags='r'] See `support of file system `flags``.\n     * @param [mode=0o666]\n     */\n    export function open(\n        path: PathLike,\n        flags: OpenMode | undefined,\n        mode: Mode | undefined | null,\n        callback: (err: NodeJS.ErrnoException | null, fd: number) => void,\n    ): void;\n    /**\n     * Asynchronous open(2) - open and possibly create a file. If the file is created, its mode will be `0o666`.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     * @param [flags='r'] See `support of file system `flags``.\n     */\n    export function open(\n        path: PathLike,\n        flags: OpenMode | undefined,\n        callback: (err: NodeJS.ErrnoException | null, fd: number) => void,\n    ): void;\n    /**\n     * Asynchronous open(2) - open and possibly create a file. If the file is created, its mode will be `0o666`.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     */\n    export function open(path: PathLike, callback: (err: NodeJS.ErrnoException | null, fd: number) => void): void;\n    export namespace open {\n        /**\n         * Asynchronous open(2) - open and possibly create a file.\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n         * @param mode A file mode. If a string is passed, it is parsed as an octal integer. If not supplied, defaults to `0o666`.\n         */\n        function __promisify__(path: PathLike, flags: OpenMode, mode?: Mode | null): Promise<number>;\n    }\n    /**\n     * Returns an integer representing the file descriptor.\n     *\n     * For detailed information, see the documentation of the asynchronous version of\n     * this API: {@link open}.\n     * @since v0.1.21\n     * @param [flags='r']\n     * @param [mode=0o666]\n     */\n    export function openSync(path: PathLike, flags: OpenMode, mode?: Mode | null): number;\n    /**\n     * Change the file system timestamps of the object referenced by `path`.\n     *\n     * The `atime` and `mtime` arguments follow these rules:\n     *\n     * * Values can be either numbers representing Unix epoch time in seconds, `Date`s, or a numeric string like `'123456789.0'`.\n     * * If the value can not be converted to a number, or is `NaN`, `Infinity`, or `-Infinity`, an `Error` will be thrown.\n     * @since v0.4.2\n     */\n    export function utimes(path: PathLike, atime: TimeLike, mtime: TimeLike, callback: NoParamCallback): void;\n    export namespace utimes {\n        /**\n         * Asynchronously change file timestamps of the file referenced by the supplied path.\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n         * @param atime The last access time. If a string is provided, it will be coerced to number.\n         * @param mtime The last modified time. If a string is provided, it will be coerced to number.\n         */\n        function __promisify__(path: PathLike, atime: TimeLike, mtime: TimeLike): Promise<void>;\n    }\n    /**\n     * Returns `undefined`.\n     *\n     * For detailed information, see the documentation of the asynchronous version of\n     * this API: {@link utimes}.\n     * @since v0.4.2\n     */\n    export function utimesSync(path: PathLike, atime: TimeLike, mtime: TimeLike): void;\n    /**\n     * Change the file system timestamps of the object referenced by the supplied file\n     * descriptor. See {@link utimes}.\n     * @since v0.4.2\n     */\n    export function futimes(fd: number, atime: TimeLike, mtime: TimeLike, callback: NoParamCallback): void;\n    export namespace futimes {\n        /**\n         * Asynchronously change file timestamps of the file referenced by the supplied file descriptor.\n         * @param fd A file descriptor.\n         * @param atime The last access time. If a string is provided, it will be coerced to number.\n         * @param mtime The last modified time. If a string is provided, it will be coerced to number.\n         */\n        function __promisify__(fd: number, atime: TimeLike, mtime: TimeLike): Promise<void>;\n    }\n    /**\n     * Synchronous version of {@link futimes}. Returns `undefined`.\n     * @since v0.4.2\n     */\n    export function futimesSync(fd: number, atime: TimeLike, mtime: TimeLike): void;\n    /**\n     * Request that all data for the open file descriptor is flushed to the storage\n     * device. The specific implementation is operating system and device specific.\n     * Refer to the POSIX [`fsync(2)`](http://man7.org/linux/man-pages/man2/fsync.2.html) documentation for more detail. No arguments other\n     * than a possible exception are given to the completion callback.\n     * @since v0.1.96\n     */\n    export function fsync(fd: number, callback: NoParamCallback): void;\n    export namespace fsync {\n        /**\n         * Asynchronous fsync(2) - synchronize a file's in-core state with the underlying storage device.\n         * @param fd A file descriptor.\n         */\n        function __promisify__(fd: number): Promise<void>;\n    }\n    /**\n     * Request that all data for the open file descriptor is flushed to the storage\n     * device. The specific implementation is operating system and device specific.\n     * Refer to the POSIX [`fsync(2)`](http://man7.org/linux/man-pages/man2/fsync.2.html) documentation for more detail. Returns `undefined`.\n     * @since v0.1.96\n     */\n    export function fsyncSync(fd: number): void;\n    export interface WriteOptions {\n        /**\n         * @default 0\n         */\n        offset?: number | undefined;\n        /**\n         * @default `buffer.byteLength - offset`\n         */\n        length?: number | undefined;\n        /**\n         * @default null\n         */\n        position?: number | undefined | null;\n    }\n    /**\n     * Write `buffer` to the file specified by `fd`.\n     *\n     * `offset` determines the part of the buffer to be written, and `length` is\n     * an integer specifying the number of bytes to write.\n     *\n     * `position` refers to the offset from the beginning of the file where this data\n     * should be written. If `typeof position !== 'number'`, the data will be written\n     * at the current position. See [`pwrite(2)`](http://man7.org/linux/man-pages/man2/pwrite.2.html).\n     *\n     * The callback will be given three arguments `(err, bytesWritten, buffer)` where `bytesWritten` specifies how many _bytes_ were written from `buffer`.\n     *\n     * If this method is invoked as its `util.promisify()` ed version, it returns\n     * a promise for an `Object` with `bytesWritten` and `buffer` properties.\n     *\n     * It is unsafe to use `fs.write()` multiple times on the same file without waiting\n     * for the callback. For this scenario, {@link createWriteStream} is\n     * recommended.\n     *\n     * On Linux, positional writes don't work when the file is opened in append mode.\n     * The kernel ignores the position argument and always appends the data to\n     * the end of the file.\n     * @since v0.0.2\n     * @param [offset=0]\n     * @param [length=buffer.byteLength - offset]\n     * @param [position='null']\n     */\n    export function write<TBuffer extends NodeJS.ArrayBufferView>(\n        fd: number,\n        buffer: TBuffer,\n        offset: number | undefined | null,\n        length: number | undefined | null,\n        position: number | undefined | null,\n        callback: (err: NodeJS.ErrnoException | null, written: number, buffer: TBuffer) => void,\n    ): void;\n    /**\n     * Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.\n     * @param fd A file descriptor.\n     * @param offset The part of the buffer to be written. If not supplied, defaults to `0`.\n     * @param length The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.\n     */\n    export function write<TBuffer extends NodeJS.ArrayBufferView>(\n        fd: number,\n        buffer: TBuffer,\n        offset: number | undefined | null,\n        length: number | undefined | null,\n        callback: (err: NodeJS.ErrnoException | null, written: number, buffer: TBuffer) => void,\n    ): void;\n    /**\n     * Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.\n     * @param fd A file descriptor.\n     * @param offset The part of the buffer to be written. If not supplied, defaults to `0`.\n     */\n    export function write<TBuffer extends NodeJS.ArrayBufferView>(\n        fd: number,\n        buffer: TBuffer,\n        offset: number | undefined | null,\n        callback: (err: NodeJS.ErrnoException | null, written: number, buffer: TBuffer) => void,\n    ): void;\n    /**\n     * Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.\n     * @param fd A file descriptor.\n     */\n    export function write<TBuffer extends NodeJS.ArrayBufferView>(\n        fd: number,\n        buffer: TBuffer,\n        callback: (err: NodeJS.ErrnoException | null, written: number, buffer: TBuffer) => void,\n    ): void;\n    /**\n     * Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.\n     * @param fd A file descriptor.\n     * @param options An object with the following properties:\n     * * `offset` The part of the buffer to be written. If not supplied, defaults to `0`.\n     * * `length` The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.\n     * * `position` The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.\n     */\n    export function write<TBuffer extends NodeJS.ArrayBufferView>(\n        fd: number,\n        buffer: TBuffer,\n        options: WriteOptions,\n        callback: (err: NodeJS.ErrnoException | null, written: number, buffer: TBuffer) => void,\n    ): void;\n    /**\n     * Asynchronously writes `string` to the file referenced by the supplied file descriptor.\n     * @param fd A file descriptor.\n     * @param string A string to write.\n     * @param position The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.\n     * @param encoding The expected string encoding.\n     */\n    export function write(\n        fd: number,\n        string: string,\n        position: number | undefined | null,\n        encoding: BufferEncoding | undefined | null,\n        callback: (err: NodeJS.ErrnoException | null, written: number, str: string) => void,\n    ): void;\n    /**\n     * Asynchronously writes `string` to the file referenced by the supplied file descriptor.\n     * @param fd A file descriptor.\n     * @param string A string to write.\n     * @param position The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.\n     */\n    export function write(\n        fd: number,\n        string: string,\n        position: number | undefined | null,\n        callback: (err: NodeJS.ErrnoException | null, written: number, str: string) => void,\n    ): void;\n    /**\n     * Asynchronously writes `string` to the file referenced by the supplied file descriptor.\n     * @param fd A file descriptor.\n     * @param string A string to write.\n     */\n    export function write(\n        fd: number,\n        string: string,\n        callback: (err: NodeJS.ErrnoException | null, written: number, str: string) => void,\n    ): void;\n    export namespace write {\n        /**\n         * Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.\n         * @param fd A file descriptor.\n         * @param offset The part of the buffer to be written. If not supplied, defaults to `0`.\n         * @param length The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.\n         * @param position The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.\n         */\n        function __promisify__<TBuffer extends NodeJS.ArrayBufferView>(\n            fd: number,\n            buffer?: TBuffer,\n            offset?: number,\n            length?: number,\n            position?: number | null,\n        ): Promise<{\n            bytesWritten: number;\n            buffer: TBuffer;\n        }>;\n        /**\n         * Asynchronously writes `buffer` to the file referenced by the supplied file descriptor.\n         * @param fd A file descriptor.\n         * @param options An object with the following properties:\n         * * `offset` The part of the buffer to be written. If not supplied, defaults to `0`.\n         * * `length` The number of bytes to write. If not supplied, defaults to `buffer.length - offset`.\n         * * `position` The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.\n         */\n        function __promisify__<TBuffer extends NodeJS.ArrayBufferView>(\n            fd: number,\n            buffer?: TBuffer,\n            options?: WriteOptions,\n        ): Promise<{\n            bytesWritten: number;\n            buffer: TBuffer;\n        }>;\n        /**\n         * Asynchronously writes `string` to the file referenced by the supplied file descriptor.\n         * @param fd A file descriptor.\n         * @param string A string to write.\n         * @param position The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.\n         * @param encoding The expected string encoding.\n         */\n        function __promisify__(\n            fd: number,\n            string: string,\n            position?: number | null,\n            encoding?: BufferEncoding | null,\n        ): Promise<{\n            bytesWritten: number;\n            buffer: string;\n        }>;\n    }\n    /**\n     * For detailed information, see the documentation of the asynchronous version of\n     * this API: {@link write}.\n     * @since v0.1.21\n     * @param [offset=0]\n     * @param [length=buffer.byteLength - offset]\n     * @param [position='null']\n     * @return The number of bytes written.\n     */\n    export function writeSync(\n        fd: number,\n        buffer: NodeJS.ArrayBufferView,\n        offset?: number | null,\n        length?: number | null,\n        position?: number | null,\n    ): number;\n    /**\n     * Synchronously writes `string` to the file referenced by the supplied file descriptor, returning the number of bytes written.\n     * @param fd A file descriptor.\n     * @param string A string to write.\n     * @param position The offset from the beginning of the file where this data should be written. If not supplied, defaults to the current position.\n     * @param encoding The expected string encoding.\n     */\n    export function writeSync(\n        fd: number,\n        string: string,\n        position?: number | null,\n        encoding?: BufferEncoding | null,\n    ): number;\n    export type ReadPosition = number | bigint;\n    export interface ReadSyncOptions {\n        /**\n         * @default 0\n         */\n        offset?: number | undefined;\n        /**\n         * @default `length of buffer`\n         */\n        length?: number | undefined;\n        /**\n         * @default null\n         */\n        position?: ReadPosition | null | undefined;\n    }\n    export interface ReadAsyncOptions<TBuffer extends NodeJS.ArrayBufferView> extends ReadSyncOptions {\n        buffer?: TBuffer;\n    }\n    /**\n     * Read data from the file specified by `fd`.\n     *\n     * The callback is given the three arguments, `(err, bytesRead, buffer)`.\n     *\n     * If the file is not modified concurrently, the end-of-file is reached when the\n     * number of bytes read is zero.\n     *\n     * If this method is invoked as its `util.promisify()` ed version, it returns\n     * a promise for an `Object` with `bytesRead` and `buffer` properties.\n     * @since v0.0.2\n     * @param buffer The buffer that the data will be written to.\n     * @param offset The position in `buffer` to write the data to.\n     * @param length The number of bytes to read.\n     * @param position Specifies where to begin reading from in the file. If `position` is `null` or `-1 `, data will be read from the current file position, and the file position will be updated. If\n     * `position` is an integer, the file position will be unchanged.\n     */\n    export function read<TBuffer extends NodeJS.ArrayBufferView>(\n        fd: number,\n        buffer: TBuffer,\n        offset: number,\n        length: number,\n        position: ReadPosition | null,\n        callback: (err: NodeJS.ErrnoException | null, bytesRead: number, buffer: TBuffer) => void,\n    ): void;\n    /**\n     * Similar to the above `fs.read` function, this version takes an optional `options` object.\n     * If not otherwise specified in an `options` object,\n     * `buffer` defaults to `Buffer.alloc(16384)`,\n     * `offset` defaults to `0`,\n     * `length` defaults to `buffer.byteLength`, `- offset` as of Node 17.6.0\n     * `position` defaults to `null`\n     * @since v12.17.0, 13.11.0\n     */\n    export function read<TBuffer extends NodeJS.ArrayBufferView>(\n        fd: number,\n        options: ReadAsyncOptions<TBuffer>,\n        callback: (err: NodeJS.ErrnoException | null, bytesRead: number, buffer: TBuffer) => void,\n    ): void;\n    export function read<TBuffer extends NodeJS.ArrayBufferView>(\n        fd: number,\n        buffer: TBuffer,\n        options: ReadSyncOptions,\n        callback: (err: NodeJS.ErrnoException | null, bytesRead: number, buffer: TBuffer) => void,\n    ): void;\n    export function read<TBuffer extends NodeJS.ArrayBufferView>(\n        fd: number,\n        buffer: TBuffer,\n        callback: (err: NodeJS.ErrnoException | null, bytesRead: number, buffer: TBuffer) => void,\n    ): void;\n    export function read(\n        fd: number,\n        callback: (err: NodeJS.ErrnoException | null, bytesRead: number, buffer: NodeJS.ArrayBufferView) => void,\n    ): void;\n    export namespace read {\n        /**\n         * @param fd A file descriptor.\n         * @param buffer The buffer that the data will be written to.\n         * @param offset The offset in the buffer at which to start writing.\n         * @param length The number of bytes to read.\n         * @param position The offset from the beginning of the file from which data should be read. If `null`, data will be read from the current position.\n         */\n        function __promisify__<TBuffer extends NodeJS.ArrayBufferView>(\n            fd: number,\n            buffer: TBuffer,\n            offset: number,\n            length: number,\n            position: number | null,\n        ): Promise<{\n            bytesRead: number;\n            buffer: TBuffer;\n        }>;\n        function __promisify__<TBuffer extends NodeJS.ArrayBufferView>(\n            fd: number,\n            options: ReadAsyncOptions<TBuffer>,\n        ): Promise<{\n            bytesRead: number;\n            buffer: TBuffer;\n        }>;\n        function __promisify__(fd: number): Promise<{\n            bytesRead: number;\n            buffer: NodeJS.ArrayBufferView;\n        }>;\n    }\n    /**\n     * Returns the number of `bytesRead`.\n     *\n     * For detailed information, see the documentation of the asynchronous version of\n     * this API: {@link read}.\n     * @since v0.1.21\n     * @param [position='null']\n     */\n    export function readSync(\n        fd: number,\n        buffer: NodeJS.ArrayBufferView,\n        offset: number,\n        length: number,\n        position: ReadPosition | null,\n    ): number;\n    /**\n     * Similar to the above `fs.readSync` function, this version takes an optional `options` object.\n     * If no `options` object is specified, it will default with the above values.\n     */\n    export function readSync(fd: number, buffer: NodeJS.ArrayBufferView, opts?: ReadSyncOptions): number;\n    /**\n     * Asynchronously reads the entire contents of a file.\n     *\n     * ```js\n     * import { readFile } from 'node:fs';\n     *\n     * readFile('/etc/passwd', (err, data) => {\n     *   if (err) throw err;\n     *   console.log(data);\n     * });\n     * ```\n     *\n     * The callback is passed two arguments `(err, data)`, where `data` is the\n     * contents of the file.\n     *\n     * If no encoding is specified, then the raw buffer is returned.\n     *\n     * If `options` is a string, then it specifies the encoding:\n     *\n     * ```js\n     * import { readFile } from 'node:fs';\n     *\n     * readFile('/etc/passwd', 'utf8', callback);\n     * ```\n     *\n     * When the path is a directory, the behavior of `fs.readFile()` and {@link readFileSync} is platform-specific. On macOS, Linux, and Windows, an\n     * error will be returned. On FreeBSD, a representation of the directory's contents\n     * will be returned.\n     *\n     * ```js\n     * import { readFile } from 'node:fs';\n     *\n     * // macOS, Linux, and Windows\n     * readFile('<directory>', (err, data) => {\n     *   // => [Error: EISDIR: illegal operation on a directory, read <directory>]\n     * });\n     *\n     * //  FreeBSD\n     * readFile('<directory>', (err, data) => {\n     *   // => null, <data>\n     * });\n     * ```\n     *\n     * It is possible to abort an ongoing request using an `AbortSignal`. If a\n     * request is aborted the callback is called with an `AbortError`:\n     *\n     * ```js\n     * import { readFile } from 'node:fs';\n     *\n     * const controller = new AbortController();\n     * const signal = controller.signal;\n     * readFile(fileInfo[0].name, { signal }, (err, buf) => {\n     *   // ...\n     * });\n     * // When you want to abort the request\n     * controller.abort();\n     * ```\n     *\n     * The `fs.readFile()` function buffers the entire file. To minimize memory costs,\n     * when possible prefer streaming via `fs.createReadStream()`.\n     *\n     * Aborting an ongoing request does not abort individual operating\n     * system requests but rather the internal buffering `fs.readFile` performs.\n     * @since v0.1.29\n     * @param path filename or file descriptor\n     */\n    export function readFile(\n        path: PathOrFileDescriptor,\n        options:\n            | ({\n                encoding?: null | undefined;\n                flag?: string | undefined;\n            } & Abortable)\n            | undefined\n            | null,\n        callback: (err: NodeJS.ErrnoException | null, data: NonSharedBuffer) => void,\n    ): void;\n    /**\n     * Asynchronously reads the entire contents of a file.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\n     * @param options Either the encoding for the result, or an object that contains the encoding and an optional flag.\n     * If a flag is not provided, it defaults to `'r'`.\n     */\n    export function readFile(\n        path: PathOrFileDescriptor,\n        options:\n            | ({\n                encoding: BufferEncoding;\n                flag?: string | undefined;\n            } & Abortable)\n            | BufferEncoding,\n        callback: (err: NodeJS.ErrnoException | null, data: string) => void,\n    ): void;\n    /**\n     * Asynchronously reads the entire contents of a file.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\n     * @param options Either the encoding for the result, or an object that contains the encoding and an optional flag.\n     * If a flag is not provided, it defaults to `'r'`.\n     */\n    export function readFile(\n        path: PathOrFileDescriptor,\n        options:\n            | (ObjectEncodingOptions & {\n                flag?: string | undefined;\n            } & Abortable)\n            | BufferEncoding\n            | undefined\n            | null,\n        callback: (err: NodeJS.ErrnoException | null, data: string | NonSharedBuffer) => void,\n    ): void;\n    /**\n     * Asynchronously reads the entire contents of a file.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\n     */\n    export function readFile(\n        path: PathOrFileDescriptor,\n        callback: (err: NodeJS.ErrnoException | null, data: NonSharedBuffer) => void,\n    ): void;\n    export namespace readFile {\n        /**\n         * Asynchronously reads the entire contents of a file.\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n         * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\n         * @param options An object that may contain an optional flag.\n         * If a flag is not provided, it defaults to `'r'`.\n         */\n        function __promisify__(\n            path: PathOrFileDescriptor,\n            options?: {\n                encoding?: null | undefined;\n                flag?: string | undefined;\n            } | null,\n        ): Promise<NonSharedBuffer>;\n        /**\n         * Asynchronously reads the entire contents of a file.\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n         * URL support is _experimental_.\n         * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\n         * @param options Either the encoding for the result, or an object that contains the encoding and an optional flag.\n         * If a flag is not provided, it defaults to `'r'`.\n         */\n        function __promisify__(\n            path: PathOrFileDescriptor,\n            options:\n                | {\n                    encoding: BufferEncoding;\n                    flag?: string | undefined;\n                }\n                | BufferEncoding,\n        ): Promise<string>;\n        /**\n         * Asynchronously reads the entire contents of a file.\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n         * URL support is _experimental_.\n         * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\n         * @param options Either the encoding for the result, or an object that contains the encoding and an optional flag.\n         * If a flag is not provided, it defaults to `'r'`.\n         */\n        function __promisify__(\n            path: PathOrFileDescriptor,\n            options?:\n                | (ObjectEncodingOptions & {\n                    flag?: string | undefined;\n                })\n                | BufferEncoding\n                | null,\n        ): Promise<string | NonSharedBuffer>;\n    }\n    /**\n     * Returns the contents of the `path`.\n     *\n     * For detailed information, see the documentation of the asynchronous version of\n     * this API: {@link readFile}.\n     *\n     * If the `encoding` option is specified then this function returns a\n     * string. Otherwise it returns a buffer.\n     *\n     * Similar to {@link readFile}, when the path is a directory, the behavior of `fs.readFileSync()` is platform-specific.\n     *\n     * ```js\n     * import { readFileSync } from 'node:fs';\n     *\n     * // macOS, Linux, and Windows\n     * readFileSync('<directory>');\n     * // => [Error: EISDIR: illegal operation on a directory, read <directory>]\n     *\n     * //  FreeBSD\n     * readFileSync('<directory>'); // => <data>\n     * ```\n     * @since v0.1.8\n     * @param path filename or file descriptor\n     */\n    export function readFileSync(\n        path: PathOrFileDescriptor,\n        options?: {\n            encoding?: null | undefined;\n            flag?: string | undefined;\n        } | null,\n    ): NonSharedBuffer;\n    /**\n     * Synchronously reads the entire contents of a file.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\n     * @param options Either the encoding for the result, or an object that contains the encoding and an optional flag.\n     * If a flag is not provided, it defaults to `'r'`.\n     */\n    export function readFileSync(\n        path: PathOrFileDescriptor,\n        options:\n            | {\n                encoding: BufferEncoding;\n                flag?: string | undefined;\n            }\n            | BufferEncoding,\n    ): string;\n    /**\n     * Synchronously reads the entire contents of a file.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\n     * @param options Either the encoding for the result, or an object that contains the encoding and an optional flag.\n     * If a flag is not provided, it defaults to `'r'`.\n     */\n    export function readFileSync(\n        path: PathOrFileDescriptor,\n        options?:\n            | (ObjectEncodingOptions & {\n                flag?: string | undefined;\n            })\n            | BufferEncoding\n            | null,\n    ): string | NonSharedBuffer;\n    export type WriteFileOptions =\n        | (\n            & ObjectEncodingOptions\n            & Abortable\n            & {\n                mode?: Mode | undefined;\n                flag?: string | undefined;\n                flush?: boolean | undefined;\n            }\n        )\n        | BufferEncoding\n        | null;\n    /**\n     * When `file` is a filename, asynchronously writes data to the file, replacing the\n     * file if it already exists. `data` can be a string or a buffer.\n     *\n     * When `file` is a file descriptor, the behavior is similar to calling `fs.write()` directly (which is recommended). See the notes below on using\n     * a file descriptor.\n     *\n     * The `encoding` option is ignored if `data` is a buffer.\n     *\n     * The `mode` option only affects the newly created file. See {@link open} for more details.\n     *\n     * ```js\n     * import { writeFile } from 'node:fs';\n     * import { Buffer } from 'node:buffer';\n     *\n     * const data = new Uint8Array(Buffer.from('Hello Node.js'));\n     * writeFile('message.txt', data, (err) => {\n     *   if (err) throw err;\n     *   console.log('The file has been saved!');\n     * });\n     * ```\n     *\n     * If `options` is a string, then it specifies the encoding:\n     *\n     * ```js\n     * import { writeFile } from 'node:fs';\n     *\n     * writeFile('message.txt', 'Hello Node.js', 'utf8', callback);\n     * ```\n     *\n     * It is unsafe to use `fs.writeFile()` multiple times on the same file without\n     * waiting for the callback. For this scenario, {@link createWriteStream} is\n     * recommended.\n     *\n     * Similarly to `fs.readFile` \\- `fs.writeFile` is a convenience method that\n     * performs multiple `write` calls internally to write the buffer passed to it.\n     * For performance sensitive code consider using {@link createWriteStream}.\n     *\n     * It is possible to use an `AbortSignal` to cancel an `fs.writeFile()`.\n     * Cancelation is \"best effort\", and some amount of data is likely still\n     * to be written.\n     *\n     * ```js\n     * import { writeFile } from 'node:fs';\n     * import { Buffer } from 'node:buffer';\n     *\n     * const controller = new AbortController();\n     * const { signal } = controller;\n     * const data = new Uint8Array(Buffer.from('Hello Node.js'));\n     * writeFile('message.txt', data, { signal }, (err) => {\n     *   // When a request is aborted - the callback is called with an AbortError\n     * });\n     * // When the request should be aborted\n     * controller.abort();\n     * ```\n     *\n     * Aborting an ongoing request does not abort individual operating\n     * system requests but rather the internal buffering `fs.writeFile` performs.\n     * @since v0.1.29\n     * @param file filename or file descriptor\n     */\n    export function writeFile(\n        file: PathOrFileDescriptor,\n        data: string | NodeJS.ArrayBufferView,\n        options: WriteFileOptions,\n        callback: NoParamCallback,\n    ): void;\n    /**\n     * Asynchronously writes data to a file, replacing the file if it already exists.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\n     * @param data The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.\n     */\n    export function writeFile(\n        path: PathOrFileDescriptor,\n        data: string | NodeJS.ArrayBufferView,\n        callback: NoParamCallback,\n    ): void;\n    export namespace writeFile {\n        /**\n         * Asynchronously writes data to a file, replacing the file if it already exists.\n         * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n         * URL support is _experimental_.\n         * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\n         * @param data The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.\n         * @param options Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.\n         * If `encoding` is not supplied, the default of `'utf8'` is used.\n         * If `mode` is not supplied, the default of `0o666` is used.\n         * If `mode` is a string, it is parsed as an octal integer.\n         * If `flag` is not supplied, the default of `'w'` is used.\n         */\n        function __promisify__(\n            path: PathOrFileDescriptor,\n            data: string | NodeJS.ArrayBufferView,\n            options?: WriteFileOptions,\n        ): Promise<void>;\n    }\n    /**\n     * Returns `undefined`.\n     *\n     * The `mode` option only affects the newly created file. See {@link open} for more details.\n     *\n     * For detailed information, see the documentation of the asynchronous version of\n     * this API: {@link writeFile}.\n     * @since v0.1.29\n     * @param file filename or file descriptor\n     */\n    export function writeFileSync(\n        file: PathOrFileDescriptor,\n        data: string | NodeJS.ArrayBufferView,\n        options?: WriteFileOptions,\n    ): void;\n    /**\n     * Asynchronously append data to a file, creating the file if it does not yet\n     * exist. `data` can be a string or a `Buffer`.\n     *\n     * The `mode` option only affects the newly created file. See {@link open} for more details.\n     *\n     * ```js\n     * import { appendFile } from 'node:fs';\n     *\n     * appendFile('message.txt', 'data to append', (err) => {\n     *   if (err) throw err;\n     *   console.log('The \"data to append\" was appended to file!');\n     * });\n     * ```\n     *\n     * If `options` is a string, then it specifies the encoding:\n     *\n     * ```js\n     * import { appendFile } from 'node:fs';\n     *\n     * appendFile('message.txt', 'data to append', 'utf8', callback);\n     * ```\n     *\n     * The `path` may be specified as a numeric file descriptor that has been opened\n     * for appending (using `fs.open()` or `fs.openSync()`). The file descriptor will\n     * not be closed automatically.\n     *\n     * ```js\n     * import { open, close, appendFile } from 'node:fs';\n     *\n     * function closeFd(fd) {\n     *   close(fd, (err) => {\n     *     if (err) throw err;\n     *   });\n     * }\n     *\n     * open('message.txt', 'a', (err, fd) => {\n     *   if (err) throw err;\n     *\n     *   try {\n     *     appendFile(fd, 'data to append', 'utf8', (err) => {\n     *       closeFd(fd);\n     *       if (err) throw err;\n     *     });\n     *   } catch (err) {\n     *     closeFd(fd);\n     *     throw err;\n     *   }\n     * });\n     * ```\n     * @since v0.6.7\n     * @param path filename or file descriptor\n     */\n    export function appendFile(\n        path: PathOrFileDescriptor,\n        data: string | Uint8Array,\n        options: WriteFileOptions,\n        callback: NoParamCallback,\n    ): void;\n    /**\n     * Asynchronously append data to a file, creating the file if it does not exist.\n     * @param file A path to a file. If a URL is provided, it must use the `file:` protocol.\n     * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\n     * @param data The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.\n     */\n    export function appendFile(file: PathOrFileDescriptor, data: string | Uint8Array, callback: NoParamCallback): void;\n    export namespace appendFile {\n        /**\n         * Asynchronously append data to a file, creating the file if it does not exist.\n         * @param file A path to a file. If a URL is provided, it must use the `file:` protocol.\n         * URL support is _experimental_.\n         * If a file descriptor is provided, the underlying file will _not_ be closed automatically.\n         * @param data The data to write. If something other than a Buffer or Uint8Array is provided, the value is coerced to a string.\n         * @param options Either the encoding for the file, or an object optionally specifying the encoding, file mode, and flag.\n         * If `encoding` is not supplied, the default of `'utf8'` is used.\n         * If `mode` is not supplied, the default of `0o666` is used.\n         * If `mode` is a string, it is parsed as an octal integer.\n         * If `flag` is not supplied, the default of `'a'` is used.\n         */\n        function __promisify__(\n            file: PathOrFileDescriptor,\n            data: string | Uint8Array,\n            options?: WriteFileOptions,\n        ): Promise<void>;\n    }\n    /**\n     * Synchronously append data to a file, creating the file if it does not yet\n     * exist. `data` can be a string or a `Buffer`.\n     *\n     * The `mode` option only affects the newly created file. See {@link open} for more details.\n     *\n     * ```js\n     * import { appendFileSync } from 'node:fs';\n     *\n     * try {\n     *   appendFileSync('message.txt', 'data to append');\n     *   console.log('The \"data to append\" was appended to file!');\n     * } catch (err) {\n     *   // Handle the error\n     * }\n     * ```\n     *\n     * If `options` is a string, then it specifies the encoding:\n     *\n     * ```js\n     * import { appendFileSync } from 'node:fs';\n     *\n     * appendFileSync('message.txt', 'data to append', 'utf8');\n     * ```\n     *\n     * The `path` may be specified as a numeric file descriptor that has been opened\n     * for appending (using `fs.open()` or `fs.openSync()`). The file descriptor will\n     * not be closed automatically.\n     *\n     * ```js\n     * import { openSync, closeSync, appendFileSync } from 'node:fs';\n     *\n     * let fd;\n     *\n     * try {\n     *   fd = openSync('message.txt', 'a');\n     *   appendFileSync(fd, 'data to append', 'utf8');\n     * } catch (err) {\n     *   // Handle the error\n     * } finally {\n     *   if (fd !== undefined)\n     *     closeSync(fd);\n     * }\n     * ```\n     * @since v0.6.7\n     * @param path filename or file descriptor\n     */\n    export function appendFileSync(\n        path: PathOrFileDescriptor,\n        data: string | Uint8Array,\n        options?: WriteFileOptions,\n    ): void;\n    /**\n     * Watch for changes on `filename`. The callback `listener` will be called each\n     * time the file is accessed.\n     *\n     * The `options` argument may be omitted. If provided, it should be an object. The `options` object may contain a boolean named `persistent` that indicates\n     * whether the process should continue to run as long as files are being watched.\n     * The `options` object may specify an `interval` property indicating how often the\n     * target should be polled in milliseconds.\n     *\n     * The `listener` gets two arguments the current stat object and the previous\n     * stat object:\n     *\n     * ```js\n     * import { watchFile } from 'node:fs';\n     *\n     * watchFile('message.text', (curr, prev) => {\n     *   console.log(`the current mtime is: ${curr.mtime}`);\n     *   console.log(`the previous mtime was: ${prev.mtime}`);\n     * });\n     * ```\n     *\n     * These stat objects are instances of `fs.Stat`. If the `bigint` option is `true`,\n     * the numeric values in these objects are specified as `BigInt`s.\n     *\n     * To be notified when the file was modified, not just accessed, it is necessary\n     * to compare `curr.mtimeMs` and `prev.mtimeMs`.\n     *\n     * When an `fs.watchFile` operation results in an `ENOENT` error, it\n     * will invoke the listener once, with all the fields zeroed (or, for dates, the\n     * Unix Epoch). If the file is created later on, the listener will be called\n     * again, with the latest stat objects. This is a change in functionality since\n     * v0.10.\n     *\n     * Using {@link watch} is more efficient than `fs.watchFile` and `fs.unwatchFile`. `fs.watch` should be used instead of `fs.watchFile` and `fs.unwatchFile` when possible.\n     *\n     * When a file being watched by `fs.watchFile()` disappears and reappears,\n     * then the contents of `previous` in the second callback event (the file's\n     * reappearance) will be the same as the contents of `previous` in the first\n     * callback event (its disappearance).\n     *\n     * This happens when:\n     *\n     * * the file is deleted, followed by a restore\n     * * the file is renamed and then renamed a second time back to its original name\n     * @since v0.1.31\n     */\n    export interface WatchFileOptions {\n        bigint?: boolean | undefined;\n        persistent?: boolean | undefined;\n        interval?: number | undefined;\n    }\n    /**\n     * Watch for changes on `filename`. The callback `listener` will be called each\n     * time the file is accessed.\n     *\n     * The `options` argument may be omitted. If provided, it should be an object. The `options` object may contain a boolean named `persistent` that indicates\n     * whether the process should continue to run as long as files are being watched.\n     * The `options` object may specify an `interval` property indicating how often the\n     * target should be polled in milliseconds.\n     *\n     * The `listener` gets two arguments the current stat object and the previous\n     * stat object:\n     *\n     * ```js\n     * import { watchFile } from 'node:fs';\n     *\n     * watchFile('message.text', (curr, prev) => {\n     *   console.log(`the current mtime is: ${curr.mtime}`);\n     *   console.log(`the previous mtime was: ${prev.mtime}`);\n     * });\n     * ```\n     *\n     * These stat objects are instances of `fs.Stat`. If the `bigint` option is `true`,\n     * the numeric values in these objects are specified as `BigInt`s.\n     *\n     * To be notified when the file was modified, not just accessed, it is necessary\n     * to compare `curr.mtimeMs` and `prev.mtimeMs`.\n     *\n     * When an `fs.watchFile` operation results in an `ENOENT` error, it\n     * will invoke the listener once, with all the fields zeroed (or, for dates, the\n     * Unix Epoch). If the file is created later on, the listener will be called\n     * again, with the latest stat objects. This is a change in functionality since\n     * v0.10.\n     *\n     * Using {@link watch} is more efficient than `fs.watchFile` and `fs.unwatchFile`. `fs.watch` should be used instead of `fs.watchFile` and `fs.unwatchFile` when possible.\n     *\n     * When a file being watched by `fs.watchFile()` disappears and reappears,\n     * then the contents of `previous` in the second callback event (the file's\n     * reappearance) will be the same as the contents of `previous` in the first\n     * callback event (its disappearance).\n     *\n     * This happens when:\n     *\n     * * the file is deleted, followed by a restore\n     * * the file is renamed and then renamed a second time back to its original name\n     * @since v0.1.31\n     */\n    export function watchFile(\n        filename: PathLike,\n        options:\n            | (WatchFileOptions & {\n                bigint?: false | undefined;\n            })\n            | undefined,\n        listener: StatsListener,\n    ): StatWatcher;\n    export function watchFile(\n        filename: PathLike,\n        options:\n            | (WatchFileOptions & {\n                bigint: true;\n            })\n            | undefined,\n        listener: BigIntStatsListener,\n    ): StatWatcher;\n    /**\n     * Watch for changes on `filename`. The callback `listener` will be called each time the file is accessed.\n     * @param filename A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\n     */\n    export function watchFile(filename: PathLike, listener: StatsListener): StatWatcher;\n    /**\n     * Stop watching for changes on `filename`. If `listener` is specified, only that\n     * particular listener is removed. Otherwise, _all_ listeners are removed,\n     * effectively stopping watching of `filename`.\n     *\n     * Calling `fs.unwatchFile()` with a filename that is not being watched is a\n     * no-op, not an error.\n     *\n     * Using {@link watch} is more efficient than `fs.watchFile()` and `fs.unwatchFile()`. `fs.watch()` should be used instead of `fs.watchFile()` and `fs.unwatchFile()` when possible.\n     * @since v0.1.31\n     * @param listener Optional, a listener previously attached using `fs.watchFile()`\n     */\n    export function unwatchFile(filename: PathLike, listener?: StatsListener): void;\n    export function unwatchFile(filename: PathLike, listener?: BigIntStatsListener): void;\n    export interface WatchOptions extends Abortable {\n        encoding?: BufferEncoding | \"buffer\" | undefined;\n        persistent?: boolean | undefined;\n        recursive?: boolean | undefined;\n    }\n    export type WatchEventType = \"rename\" | \"change\";\n    export type WatchListener<T> = (event: WatchEventType, filename: T | null) => void;\n    export type StatsListener = (curr: Stats, prev: Stats) => void;\n    export type BigIntStatsListener = (curr: BigIntStats, prev: BigIntStats) => void;\n    /**\n     * Watch for changes on `filename`, where `filename` is either a file or a\n     * directory.\n     *\n     * The second argument is optional. If `options` is provided as a string, it\n     * specifies the `encoding`. Otherwise `options` should be passed as an object.\n     *\n     * The listener callback gets two arguments `(eventType, filename)`. `eventType`is either `'rename'` or `'change'`, and `filename` is the name of the file\n     * which triggered the event.\n     *\n     * On most platforms, `'rename'` is emitted whenever a filename appears or\n     * disappears in the directory.\n     *\n     * The listener callback is attached to the `'change'` event fired by `fs.FSWatcher`, but it is not the same thing as the `'change'` value of `eventType`.\n     *\n     * If a `signal` is passed, aborting the corresponding AbortController will close\n     * the returned `fs.FSWatcher`.\n     * @since v0.5.10\n     * @param listener\n     */\n    export function watch(\n        filename: PathLike,\n        options:\n            | (WatchOptions & {\n                encoding: \"buffer\";\n            })\n            | \"buffer\",\n        listener?: WatchListener<Buffer>,\n    ): FSWatcher;\n    /**\n     * Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.\n     * @param filename A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\n     * @param options Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.\n     * If `encoding` is not supplied, the default of `'utf8'` is used.\n     * If `persistent` is not supplied, the default of `true` is used.\n     * If `recursive` is not supplied, the default of `false` is used.\n     */\n    export function watch(\n        filename: PathLike,\n        options?: WatchOptions | BufferEncoding | null,\n        listener?: WatchListener<string>,\n    ): FSWatcher;\n    /**\n     * Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.\n     * @param filename A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\n     * @param options Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.\n     * If `encoding` is not supplied, the default of `'utf8'` is used.\n     * If `persistent` is not supplied, the default of `true` is used.\n     * If `recursive` is not supplied, the default of `false` is used.\n     */\n    export function watch(\n        filename: PathLike,\n        options: WatchOptions | string,\n        listener?: WatchListener<string | Buffer>,\n    ): FSWatcher;\n    /**\n     * Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.\n     * @param filename A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\n     */\n    export function watch(filename: PathLike, listener?: WatchListener<string>): FSWatcher;\n    /**\n     * Test whether or not the given path exists by checking with the file system.\n     * Then call the `callback` argument with either true or false:\n     *\n     * ```js\n     * import { exists } from 'node:fs';\n     *\n     * exists('/etc/passwd', (e) => {\n     *   console.log(e ? 'it exists' : 'no passwd!');\n     * });\n     * ```\n     *\n     * **The parameters for this callback are not consistent with other Node.js**\n     * **callbacks.** Normally, the first parameter to a Node.js callback is an `err` parameter, optionally followed by other parameters. The `fs.exists()` callback\n     * has only one boolean parameter. This is one reason `fs.access()` is recommended\n     * instead of `fs.exists()`.\n     *\n     * Using `fs.exists()` to check for the existence of a file before calling `fs.open()`, `fs.readFile()`, or `fs.writeFile()` is not recommended. Doing\n     * so introduces a race condition, since other processes may change the file's\n     * state between the two calls. Instead, user code should open/read/write the\n     * file directly and handle the error raised if the file does not exist.\n     *\n     * **write (NOT RECOMMENDED)**\n     *\n     * ```js\n     * import { exists, open, close } from 'node:fs';\n     *\n     * exists('myfile', (e) => {\n     *   if (e) {\n     *     console.error('myfile already exists');\n     *   } else {\n     *     open('myfile', 'wx', (err, fd) => {\n     *       if (err) throw err;\n     *\n     *       try {\n     *         writeMyData(fd);\n     *       } finally {\n     *         close(fd, (err) => {\n     *           if (err) throw err;\n     *         });\n     *       }\n     *     });\n     *   }\n     * });\n     * ```\n     *\n     * **write (RECOMMENDED)**\n     *\n     * ```js\n     * import { open, close } from 'node:fs';\n     * open('myfile', 'wx', (err, fd) => {\n     *   if (err) {\n     *     if (err.code === 'EEXIST') {\n     *       console.error('myfile already exists');\n     *       return;\n     *     }\n     *\n     *     throw err;\n     *   }\n     *\n     *   try {\n     *     writeMyData(fd);\n     *   } finally {\n     *     close(fd, (err) => {\n     *       if (err) throw err;\n     *     });\n     *   }\n     * });\n     * ```\n     *\n     * **read (NOT RECOMMENDED)**\n     *\n     * ```js\n     * import { open, close, exists } from 'node:fs';\n     *\n     * exists('myfile', (e) => {\n     *   if (e) {\n     *     open('myfile', 'r', (err, fd) => {\n     *       if (err) throw err;\n     *\n     *       try {\n     *         readMyData(fd);\n     *       } finally {\n     *         close(fd, (err) => {\n     *           if (err) throw err;\n     *         });\n     *       }\n     *     });\n     *   } else {\n     *     console.error('myfile does not exist');\n     *   }\n     * });\n     * ```\n     *\n     * **read (RECOMMENDED)**\n     *\n     * ```js\n     * import { open, close } from 'node:fs';\n     *\n     * open('myfile', 'r', (err, fd) => {\n     *   if (err) {\n     *     if (err.code === 'ENOENT') {\n     *       console.error('myfile does not exist');\n     *       return;\n     *     }\n     *\n     *     throw err;\n     *   }\n     *\n     *   try {\n     *     readMyData(fd);\n     *   } finally {\n     *     close(fd, (err) => {\n     *       if (err) throw err;\n     *     });\n     *   }\n     * });\n     * ```\n     *\n     * The \"not recommended\" examples above check for existence and then use the\n     * file; the \"recommended\" examples are better because they use the file directly\n     * and handle the error, if any.\n     *\n     * In general, check for the existence of a file only if the file won't be\n     * used directly, for example when its existence is a signal from another\n     * process.\n     * @since v0.0.2\n     * @deprecated Since v1.0.0 - Use {@link stat} or {@link access} instead.\n     */\n    export function exists(path: PathLike, callback: (exists: boolean) => void): void;\n    /** @deprecated */\n    export namespace exists {\n        /**\n         * @param path A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\n         * URL support is _experimental_.\n         */\n        function __promisify__(path: PathLike): Promise<boolean>;\n    }\n    /**\n     * Returns `true` if the path exists, `false` otherwise.\n     *\n     * For detailed information, see the documentation of the asynchronous version of\n     * this API: {@link exists}.\n     *\n     * `fs.exists()` is deprecated, but `fs.existsSync()` is not. The `callback` parameter to `fs.exists()` accepts parameters that are inconsistent with other\n     * Node.js callbacks. `fs.existsSync()` does not use a callback.\n     *\n     * ```js\n     * import { existsSync } from 'node:fs';\n     *\n     * if (existsSync('/etc/passwd'))\n     *   console.log('The path exists.');\n     * ```\n     * @since v0.1.21\n     */\n    export function existsSync(path: PathLike): boolean;\n    export namespace constants {\n        // File Access Constants\n        /** Constant for fs.access(). File is visible to the calling process. */\n        const F_OK: number;\n        /** Constant for fs.access(). File can be read by the calling process. */\n        const R_OK: number;\n        /** Constant for fs.access(). File can be written by the calling process. */\n        const W_OK: number;\n        /** Constant for fs.access(). File can be executed by the calling process. */\n        const X_OK: number;\n        // File Copy Constants\n        /** Constant for fs.copyFile. Flag indicating the destination file should not be overwritten if it already exists. */\n        const COPYFILE_EXCL: number;\n        /**\n         * Constant for fs.copyFile. copy operation will attempt to create a copy-on-write reflink.\n         * If the underlying platform does not support copy-on-write, then a fallback copy mechanism is used.\n         */\n        const COPYFILE_FICLONE: number;\n        /**\n         * Constant for fs.copyFile. Copy operation will attempt to create a copy-on-write reflink.\n         * If the underlying platform does not support copy-on-write, then the operation will fail with an error.\n         */\n        const COPYFILE_FICLONE_FORCE: number;\n        // File Open Constants\n        /** Constant for fs.open(). Flag indicating to open a file for read-only access. */\n        const O_RDONLY: number;\n        /** Constant for fs.open(). Flag indicating to open a file for write-only access. */\n        const O_WRONLY: number;\n        /** Constant for fs.open(). Flag indicating to open a file for read-write access. */\n        const O_RDWR: number;\n        /** Constant for fs.open(). Flag indicating to create the file if it does not already exist. */\n        const O_CREAT: number;\n        /** Constant for fs.open(). Flag indicating that opening a file should fail if the O_CREAT flag is set and the file already exists. */\n        const O_EXCL: number;\n        /**\n         * Constant for fs.open(). Flag indicating that if path identifies a terminal device,\n         * opening the path shall not cause that terminal to become the controlling terminal for the process\n         * (if the process does not already have one).\n         */\n        const O_NOCTTY: number;\n        /** Constant for fs.open(). Flag indicating that if the file exists and is a regular file, and the file is opened successfully for write access, its length shall be truncated to zero. */\n        const O_TRUNC: number;\n        /** Constant for fs.open(). Flag indicating that data will be appended to the end of the file. */\n        const O_APPEND: number;\n        /** Constant for fs.open(). Flag indicating that the open should fail if the path is not a directory. */\n        const O_DIRECTORY: number;\n        /**\n         * constant for fs.open().\n         * Flag indicating reading accesses to the file system will no longer result in\n         * an update to the atime information associated with the file.\n         * This flag is available on Linux operating systems only.\n         */\n        const O_NOATIME: number;\n        /** Constant for fs.open(). Flag indicating that the open should fail if the path is a symbolic link. */\n        const O_NOFOLLOW: number;\n        /** Constant for fs.open(). Flag indicating that the file is opened for synchronous I/O. */\n        const O_SYNC: number;\n        /** Constant for fs.open(). Flag indicating that the file is opened for synchronous I/O with write operations waiting for data integrity. */\n        const O_DSYNC: number;\n        /** Constant for fs.open(). Flag indicating to open the symbolic link itself rather than the resource it is pointing to. */\n        const O_SYMLINK: number;\n        /** Constant for fs.open(). When set, an attempt will be made to minimize caching effects of file I/O. */\n        const O_DIRECT: number;\n        /** Constant for fs.open(). Flag indicating to open the file in nonblocking mode when possible. */\n        const O_NONBLOCK: number;\n        // File Type Constants\n        /** Constant for fs.Stats mode property for determining a file's type. Bit mask used to extract the file type code. */\n        const S_IFMT: number;\n        /** Constant for fs.Stats mode property for determining a file's type. File type constant for a regular file. */\n        const S_IFREG: number;\n        /** Constant for fs.Stats mode property for determining a file's type. File type constant for a directory. */\n        const S_IFDIR: number;\n        /** Constant for fs.Stats mode property for determining a file's type. File type constant for a character-oriented device file. */\n        const S_IFCHR: number;\n        /** Constant for fs.Stats mode property for determining a file's type. File type constant for a block-oriented device file. */\n        const S_IFBLK: number;\n        /** Constant for fs.Stats mode property for determining a file's type. File type constant for a FIFO/pipe. */\n        const S_IFIFO: number;\n        /** Constant for fs.Stats mode property for determining a file's type. File type constant for a symbolic link. */\n        const S_IFLNK: number;\n        /** Constant for fs.Stats mode property for determining a file's type. File type constant for a socket. */\n        const S_IFSOCK: number;\n        // File Mode Constants\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating readable, writable and executable by owner. */\n        const S_IRWXU: number;\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating readable by owner. */\n        const S_IRUSR: number;\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating writable by owner. */\n        const S_IWUSR: number;\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating executable by owner. */\n        const S_IXUSR: number;\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating readable, writable and executable by group. */\n        const S_IRWXG: number;\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating readable by group. */\n        const S_IRGRP: number;\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating writable by group. */\n        const S_IWGRP: number;\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating executable by group. */\n        const S_IXGRP: number;\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating readable, writable and executable by others. */\n        const S_IRWXO: number;\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating readable by others. */\n        const S_IROTH: number;\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating writable by others. */\n        const S_IWOTH: number;\n        /** Constant for fs.Stats mode property for determining access permissions for a file. File mode indicating executable by others. */\n        const S_IXOTH: number;\n        /**\n         * When set, a memory file mapping is used to access the file. This flag\n         * is available on Windows operating systems only. On other operating systems,\n         * this flag is ignored.\n         */\n        const UV_FS_O_FILEMAP: number;\n    }\n    /**\n     * Tests a user's permissions for the file or directory specified by `path`.\n     * The `mode` argument is an optional integer that specifies the accessibility\n     * checks to be performed. `mode` should be either the value `fs.constants.F_OK` or a mask consisting of the bitwise OR of any of `fs.constants.R_OK`, `fs.constants.W_OK`, and `fs.constants.X_OK`\n     * (e.g.`fs.constants.W_OK | fs.constants.R_OK`). Check `File access constants` for\n     * possible values of `mode`.\n     *\n     * The final argument, `callback`, is a callback function that is invoked with\n     * a possible error argument. If any of the accessibility checks fail, the error\n     * argument will be an `Error` object. The following examples check if `package.json` exists, and if it is readable or writable.\n     *\n     * ```js\n     * import { access, constants } from 'node:fs';\n     *\n     * const file = 'package.json';\n     *\n     * // Check if the file exists in the current directory.\n     * access(file, constants.F_OK, (err) => {\n     *   console.log(`${file} ${err ? 'does not exist' : 'exists'}`);\n     * });\n     *\n     * // Check if the file is readable.\n     * access(file, constants.R_OK, (err) => {\n     *   console.log(`${file} ${err ? 'is not readable' : 'is readable'}`);\n     * });\n     *\n     * // Check if the file is writable.\n     * access(file, constants.W_OK, (err) => {\n     *   console.log(`${file} ${err ? 'is not writable' : 'is writable'}`);\n     * });\n     *\n     * // Check if the file is readable and writable.\n     * access(file, constants.R_OK | constants.W_OK, (err) => {\n     *   console.log(`${file} ${err ? 'is not' : 'is'} readable and writable`);\n     * });\n     * ```\n     *\n     * Do not use `fs.access()` to check for the accessibility of a file before calling `fs.open()`, `fs.readFile()`, or `fs.writeFile()`. Doing\n     * so introduces a race condition, since other processes may change the file's\n     * state between the two calls. Instead, user code should open/read/write the\n     * file directly and handle the error raised if the file is not accessible.\n     *\n     * **write (NOT RECOMMENDED)**\n     *\n     * ```js\n     * import { access, open, close } from 'node:fs';\n     *\n     * access('myfile', (err) => {\n     *   if (!err) {\n     *     console.error('myfile already exists');\n     *     return;\n     *   }\n     *\n     *   open('myfile', 'wx', (err, fd) => {\n     *     if (err) throw err;\n     *\n     *     try {\n     *       writeMyData(fd);\n     *     } finally {\n     *       close(fd, (err) => {\n     *         if (err) throw err;\n     *       });\n     *     }\n     *   });\n     * });\n     * ```\n     *\n     * **write (RECOMMENDED)**\n     *\n     * ```js\n     * import { open, close } from 'node:fs';\n     *\n     * open('myfile', 'wx', (err, fd) => {\n     *   if (err) {\n     *     if (err.code === 'EEXIST') {\n     *       console.error('myfile already exists');\n     *       return;\n     *     }\n     *\n     *     throw err;\n     *   }\n     *\n     *   try {\n     *     writeMyData(fd);\n     *   } finally {\n     *     close(fd, (err) => {\n     *       if (err) throw err;\n     *     });\n     *   }\n     * });\n     * ```\n     *\n     * **read (NOT RECOMMENDED)**\n     *\n     * ```js\n     * import { access, open, close } from 'node:fs';\n     * access('myfile', (err) => {\n     *   if (err) {\n     *     if (err.code === 'ENOENT') {\n     *       console.error('myfile does not exist');\n     *       return;\n     *     }\n     *\n     *     throw err;\n     *   }\n     *\n     *   open('myfile', 'r', (err, fd) => {\n     *     if (err) throw err;\n     *\n     *     try {\n     *       readMyData(fd);\n     *     } finally {\n     *       close(fd, (err) => {\n     *         if (err) throw err;\n     *       });\n     *     }\n     *   });\n     * });\n     * ```\n     *\n     * **read (RECOMMENDED)**\n     *\n     * ```js\n     * import { open, close } from 'node:fs';\n     *\n     * open('myfile', 'r', (err, fd) => {\n     *   if (err) {\n     *     if (err.code === 'ENOENT') {\n     *       console.error('myfile does not exist');\n     *       return;\n     *     }\n     *\n     *     throw err;\n     *   }\n     *\n     *   try {\n     *     readMyData(fd);\n     *   } finally {\n     *     close(fd, (err) => {\n     *       if (err) throw err;\n     *     });\n     *   }\n     * });\n     * ```\n     *\n     * The \"not recommended\" examples above check for accessibility and then use the\n     * file; the \"recommended\" examples are better because they use the file directly\n     * and handle the error, if any.\n     *\n     * In general, check for the accessibility of a file only if the file will not be\n     * used directly, for example when its accessibility is a signal from another\n     * process.\n     *\n     * On Windows, access-control policies (ACLs) on a directory may limit access to\n     * a file or directory. The `fs.access()` function, however, does not check the\n     * ACL and therefore may report that a path is accessible even if the ACL restricts\n     * the user from reading or writing to it.\n     * @since v0.11.15\n     * @param [mode=fs.constants.F_OK]\n     */\n    export function access(path: PathLike, mode: number | undefined, callback: NoParamCallback): void;\n    /**\n     * Asynchronously tests a user's permissions for the file specified by path.\n     * @param path A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\n     */\n    export function access(path: PathLike, callback: NoParamCallback): void;\n    export namespace access {\n        /**\n         * Asynchronously tests a user's permissions for the file specified by path.\n         * @param path A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\n         * URL support is _experimental_.\n         */\n        function __promisify__(path: PathLike, mode?: number): Promise<void>;\n    }\n    /**\n     * Synchronously tests a user's permissions for the file or directory specified\n     * by `path`. The `mode` argument is an optional integer that specifies the\n     * accessibility checks to be performed. `mode` should be either the value `fs.constants.F_OK` or a mask consisting of the bitwise OR of any of `fs.constants.R_OK`, `fs.constants.W_OK`, and\n     * `fs.constants.X_OK` (e.g.`fs.constants.W_OK | fs.constants.R_OK`). Check `File access constants` for\n     * possible values of `mode`.\n     *\n     * If any of the accessibility checks fail, an `Error` will be thrown. Otherwise,\n     * the method will return `undefined`.\n     *\n     * ```js\n     * import { accessSync, constants } from 'node:fs';\n     *\n     * try {\n     *   accessSync('etc/passwd', constants.R_OK | constants.W_OK);\n     *   console.log('can read/write');\n     * } catch (err) {\n     *   console.error('no access!');\n     * }\n     * ```\n     * @since v0.11.15\n     * @param [mode=fs.constants.F_OK]\n     */\n    export function accessSync(path: PathLike, mode?: number): void;\n    interface StreamOptions {\n        flags?: string | undefined;\n        encoding?: BufferEncoding | undefined;\n        fd?: number | promises.FileHandle | undefined;\n        mode?: number | undefined;\n        autoClose?: boolean | undefined;\n        emitClose?: boolean | undefined;\n        start?: number | undefined;\n        signal?: AbortSignal | null | undefined;\n        highWaterMark?: number | undefined;\n    }\n    interface FSImplementation {\n        open?: (...args: any[]) => any;\n        close?: (...args: any[]) => any;\n    }\n    interface CreateReadStreamFSImplementation extends FSImplementation {\n        read: (...args: any[]) => any;\n    }\n    interface CreateWriteStreamFSImplementation extends FSImplementation {\n        write: (...args: any[]) => any;\n        writev?: (...args: any[]) => any;\n    }\n    interface ReadStreamOptions extends StreamOptions {\n        fs?: CreateReadStreamFSImplementation | null | undefined;\n        end?: number | undefined;\n    }\n    interface WriteStreamOptions extends StreamOptions {\n        fs?: CreateWriteStreamFSImplementation | null | undefined;\n        flush?: boolean | undefined;\n    }\n    /**\n     * `options` can include `start` and `end` values to read a range of bytes from\n     * the file instead of the entire file. Both `start` and `end` are inclusive and\n     * start counting at 0, allowed values are in the\n     * \\[0, [`Number.MAX_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER)\\] range. If `fd` is specified and `start` is\n     * omitted or `undefined`, `fs.createReadStream()` reads sequentially from the\n     * current file position. The `encoding` can be any one of those accepted by `Buffer`.\n     *\n     * If `fd` is specified, `ReadStream` will ignore the `path` argument and will use\n     * the specified file descriptor. This means that no `'open'` event will be\n     * emitted. `fd` should be blocking; non-blocking `fd`s should be passed to `net.Socket`.\n     *\n     * If `fd` points to a character device that only supports blocking reads\n     * (such as keyboard or sound card), read operations do not finish until data is\n     * available. This can prevent the process from exiting and the stream from\n     * closing naturally.\n     *\n     * By default, the stream will emit a `'close'` event after it has been\n     * destroyed.  Set the `emitClose` option to `false` to change this behavior.\n     *\n     * By providing the `fs` option, it is possible to override the corresponding `fs` implementations for `open`, `read`, and `close`. When providing the `fs` option,\n     * an override for `read` is required. If no `fd` is provided, an override for `open` is also required. If `autoClose` is `true`, an override for `close` is\n     * also required.\n     *\n     * ```js\n     * import { createReadStream } from 'node:fs';\n     *\n     * // Create a stream from some character device.\n     * const stream = createReadStream('/dev/input/event0');\n     * setTimeout(() => {\n     *   stream.close(); // This may not close the stream.\n     *   // Artificially marking end-of-stream, as if the underlying resource had\n     *   // indicated end-of-file by itself, allows the stream to close.\n     *   // This does not cancel pending read operations, and if there is such an\n     *   // operation, the process may still not be able to exit successfully\n     *   // until it finishes.\n     *   stream.push(null);\n     *   stream.read(0);\n     * }, 100);\n     * ```\n     *\n     * If `autoClose` is false, then the file descriptor won't be closed, even if\n     * there's an error. It is the application's responsibility to close it and make\n     * sure there's no file descriptor leak. If `autoClose` is set to true (default\n     * behavior), on `'error'` or `'end'` the file descriptor will be closed\n     * automatically.\n     *\n     * `mode` sets the file mode (permission and sticky bits), but only if the\n     * file was created.\n     *\n     * An example to read the last 10 bytes of a file which is 100 bytes long:\n     *\n     * ```js\n     * import { createReadStream } from 'node:fs';\n     *\n     * createReadStream('sample.txt', { start: 90, end: 99 });\n     * ```\n     *\n     * If `options` is a string, then it specifies the encoding.\n     * @since v0.1.31\n     */\n    export function createReadStream(path: PathLike, options?: BufferEncoding | ReadStreamOptions): ReadStream;\n    /**\n     * `options` may also include a `start` option to allow writing data at some\n     * position past the beginning of the file, allowed values are in the\n     * \\[0, [`Number.MAX_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER)\\] range. Modifying a file rather than\n     * replacing it may require the `flags` option to be set to `r+` rather than the\n     * default `w`. The `encoding` can be any one of those accepted by `Buffer`.\n     *\n     * If `autoClose` is set to true (default behavior) on `'error'` or `'finish'` the file descriptor will be closed automatically. If `autoClose` is false,\n     * then the file descriptor won't be closed, even if there's an error.\n     * It is the application's responsibility to close it and make sure there's no\n     * file descriptor leak.\n     *\n     * By default, the stream will emit a `'close'` event after it has been\n     * destroyed.  Set the `emitClose` option to `false` to change this behavior.\n     *\n     * By providing the `fs` option it is possible to override the corresponding `fs` implementations for `open`, `write`, `writev`, and `close`. Overriding `write()` without `writev()` can reduce\n     * performance as some optimizations (`_writev()`)\n     * will be disabled. When providing the `fs` option, overrides for at least one of `write` and `writev` are required. If no `fd` option is supplied, an override\n     * for `open` is also required. If `autoClose` is `true`, an override for `close` is also required.\n     *\n     * Like `fs.ReadStream`, if `fd` is specified, `fs.WriteStream` will ignore the `path` argument and will use the specified file descriptor. This means that no `'open'` event will be\n     * emitted. `fd` should be blocking; non-blocking `fd`s\n     * should be passed to `net.Socket`.\n     *\n     * If `options` is a string, then it specifies the encoding.\n     * @since v0.1.31\n     */\n    export function createWriteStream(path: PathLike, options?: BufferEncoding | WriteStreamOptions): WriteStream;\n    /**\n     * Forces all currently queued I/O operations associated with the file to the\n     * operating system's synchronized I/O completion state. Refer to the POSIX [`fdatasync(2)`](http://man7.org/linux/man-pages/man2/fdatasync.2.html) documentation for details. No arguments other\n     * than a possible\n     * exception are given to the completion callback.\n     * @since v0.1.96\n     */\n    export function fdatasync(fd: number, callback: NoParamCallback): void;\n    export namespace fdatasync {\n        /**\n         * Asynchronous fdatasync(2) - synchronize a file's in-core state with storage device.\n         * @param fd A file descriptor.\n         */\n        function __promisify__(fd: number): Promise<void>;\n    }\n    /**\n     * Forces all currently queued I/O operations associated with the file to the\n     * operating system's synchronized I/O completion state. Refer to the POSIX [`fdatasync(2)`](http://man7.org/linux/man-pages/man2/fdatasync.2.html) documentation for details. Returns `undefined`.\n     * @since v0.1.96\n     */\n    export function fdatasyncSync(fd: number): void;\n    /**\n     * Asynchronously copies `src` to `dest`. By default, `dest` is overwritten if it\n     * already exists. No arguments other than a possible exception are given to the\n     * callback function. Node.js makes no guarantees about the atomicity of the copy\n     * operation. If an error occurs after the destination file has been opened for\n     * writing, Node.js will attempt to remove the destination.\n     *\n     * `mode` is an optional integer that specifies the behavior\n     * of the copy operation. It is possible to create a mask consisting of the bitwise\n     * OR of two or more values (e.g.`fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE`).\n     *\n     * * `fs.constants.COPYFILE_EXCL`: The copy operation will fail if `dest` already\n     * exists.\n     * * `fs.constants.COPYFILE_FICLONE`: The copy operation will attempt to create a\n     * copy-on-write reflink. If the platform does not support copy-on-write, then a\n     * fallback copy mechanism is used.\n     * * `fs.constants.COPYFILE_FICLONE_FORCE`: The copy operation will attempt to\n     * create a copy-on-write reflink. If the platform does not support\n     * copy-on-write, then the operation will fail.\n     *\n     * ```js\n     * import { copyFile, constants } from 'node:fs';\n     *\n     * function callback(err) {\n     *   if (err) throw err;\n     *   console.log('source.txt was copied to destination.txt');\n     * }\n     *\n     * // destination.txt will be created or overwritten by default.\n     * copyFile('source.txt', 'destination.txt', callback);\n     *\n     * // By using COPYFILE_EXCL, the operation will fail if destination.txt exists.\n     * copyFile('source.txt', 'destination.txt', constants.COPYFILE_EXCL, callback);\n     * ```\n     * @since v8.5.0\n     * @param src source filename to copy\n     * @param dest destination filename of the copy operation\n     * @param [mode=0] modifiers for copy operation.\n     */\n    export function copyFile(src: PathLike, dest: PathLike, callback: NoParamCallback): void;\n    export function copyFile(src: PathLike, dest: PathLike, mode: number, callback: NoParamCallback): void;\n    export namespace copyFile {\n        function __promisify__(src: PathLike, dst: PathLike, mode?: number): Promise<void>;\n    }\n    /**\n     * Synchronously copies `src` to `dest`. By default, `dest` is overwritten if it\n     * already exists. Returns `undefined`. Node.js makes no guarantees about the\n     * atomicity of the copy operation. If an error occurs after the destination file\n     * has been opened for writing, Node.js will attempt to remove the destination.\n     *\n     * `mode` is an optional integer that specifies the behavior\n     * of the copy operation. It is possible to create a mask consisting of the bitwise\n     * OR of two or more values (e.g.`fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE`).\n     *\n     * * `fs.constants.COPYFILE_EXCL`: The copy operation will fail if `dest` already\n     * exists.\n     * * `fs.constants.COPYFILE_FICLONE`: The copy operation will attempt to create a\n     * copy-on-write reflink. If the platform does not support copy-on-write, then a\n     * fallback copy mechanism is used.\n     * * `fs.constants.COPYFILE_FICLONE_FORCE`: The copy operation will attempt to\n     * create a copy-on-write reflink. If the platform does not support\n     * copy-on-write, then the operation will fail.\n     *\n     * ```js\n     * import { copyFileSync, constants } from 'node:fs';\n     *\n     * // destination.txt will be created or overwritten by default.\n     * copyFileSync('source.txt', 'destination.txt');\n     * console.log('source.txt was copied to destination.txt');\n     *\n     * // By using COPYFILE_EXCL, the operation will fail if destination.txt exists.\n     * copyFileSync('source.txt', 'destination.txt', constants.COPYFILE_EXCL);\n     * ```\n     * @since v8.5.0\n     * @param src source filename to copy\n     * @param dest destination filename of the copy operation\n     * @param [mode=0] modifiers for copy operation.\n     */\n    export function copyFileSync(src: PathLike, dest: PathLike, mode?: number): void;\n    /**\n     * Write an array of `ArrayBufferView`s to the file specified by `fd` using `writev()`.\n     *\n     * `position` is the offset from the beginning of the file where this data\n     * should be written. If `typeof position !== 'number'`, the data will be written\n     * at the current position.\n     *\n     * The callback will be given three arguments: `err`, `bytesWritten`, and `buffers`. `bytesWritten` is how many bytes were written from `buffers`.\n     *\n     * If this method is `util.promisify()` ed, it returns a promise for an `Object` with `bytesWritten` and `buffers` properties.\n     *\n     * It is unsafe to use `fs.writev()` multiple times on the same file without\n     * waiting for the callback. For this scenario, use {@link createWriteStream}.\n     *\n     * On Linux, positional writes don't work when the file is opened in append mode.\n     * The kernel ignores the position argument and always appends the data to\n     * the end of the file.\n     * @since v12.9.0\n     * @param [position='null']\n     */\n    export function writev(\n        fd: number,\n        buffers: readonly NodeJS.ArrayBufferView[],\n        cb: (err: NodeJS.ErrnoException | null, bytesWritten: number, buffers: NodeJS.ArrayBufferView[]) => void,\n    ): void;\n    export function writev(\n        fd: number,\n        buffers: readonly NodeJS.ArrayBufferView[],\n        position: number | null,\n        cb: (err: NodeJS.ErrnoException | null, bytesWritten: number, buffers: NodeJS.ArrayBufferView[]) => void,\n    ): void;\n    export interface WriteVResult {\n        bytesWritten: number;\n        buffers: NodeJS.ArrayBufferView[];\n    }\n    export namespace writev {\n        function __promisify__(\n            fd: number,\n            buffers: readonly NodeJS.ArrayBufferView[],\n            position?: number,\n        ): Promise<WriteVResult>;\n    }\n    /**\n     * For detailed information, see the documentation of the asynchronous version of\n     * this API: {@link writev}.\n     * @since v12.9.0\n     * @param [position='null']\n     * @return The number of bytes written.\n     */\n    export function writevSync(fd: number, buffers: readonly NodeJS.ArrayBufferView[], position?: number): number;\n    /**\n     * Read from a file specified by `fd` and write to an array of `ArrayBufferView`s\n     * using `readv()`.\n     *\n     * `position` is the offset from the beginning of the file from where data\n     * should be read. If `typeof position !== 'number'`, the data will be read\n     * from the current position.\n     *\n     * The callback will be given three arguments: `err`, `bytesRead`, and `buffers`. `bytesRead` is how many bytes were read from the file.\n     *\n     * If this method is invoked as its `util.promisify()` ed version, it returns\n     * a promise for an `Object` with `bytesRead` and `buffers` properties.\n     * @since v13.13.0, v12.17.0\n     * @param [position='null']\n     */\n    export function readv(\n        fd: number,\n        buffers: readonly NodeJS.ArrayBufferView[],\n        cb: (err: NodeJS.ErrnoException | null, bytesRead: number, buffers: NodeJS.ArrayBufferView[]) => void,\n    ): void;\n    export function readv(\n        fd: number,\n        buffers: readonly NodeJS.ArrayBufferView[],\n        position: number | null,\n        cb: (err: NodeJS.ErrnoException | null, bytesRead: number, buffers: NodeJS.ArrayBufferView[]) => void,\n    ): void;\n    export interface ReadVResult {\n        bytesRead: number;\n        buffers: NodeJS.ArrayBufferView[];\n    }\n    export namespace readv {\n        function __promisify__(\n            fd: number,\n            buffers: readonly NodeJS.ArrayBufferView[],\n            position?: number,\n        ): Promise<ReadVResult>;\n    }\n    /**\n     * For detailed information, see the documentation of the asynchronous version of\n     * this API: {@link readv}.\n     * @since v13.13.0, v12.17.0\n     * @param [position='null']\n     * @return The number of bytes read.\n     */\n    export function readvSync(fd: number, buffers: readonly NodeJS.ArrayBufferView[], position?: number): number;\n\n    export interface OpenAsBlobOptions {\n        /**\n         * An optional mime type for the blob.\n         *\n         * @default 'undefined'\n         */\n        type?: string | undefined;\n    }\n\n    /**\n     * Returns a `Blob` whose data is backed by the given file.\n     *\n     * The file must not be modified after the `Blob` is created. Any modifications\n     * will cause reading the `Blob` data to fail with a `DOMException` error.\n     * Synchronous stat operations on the file when the `Blob` is created, and before\n     * each read in order to detect whether the file data has been modified on disk.\n     *\n     * ```js\n     * import { openAsBlob } from 'node:fs';\n     *\n     * const blob = await openAsBlob('the.file.txt');\n     * const ab = await blob.arrayBuffer();\n     * blob.stream();\n     * ```\n     * @since v19.8.0\n     * @experimental\n     */\n    export function openAsBlob(path: PathLike, options?: OpenAsBlobOptions): Promise<Blob>;\n\n    export interface OpenDirOptions {\n        /**\n         * @default 'utf8'\n         */\n        encoding?: BufferEncoding | undefined;\n        /**\n         * Number of directory entries that are buffered\n         * internally when reading from the directory. Higher values lead to better\n         * performance but higher memory usage.\n         * @default 32\n         */\n        bufferSize?: number | undefined;\n        /**\n         * @default false\n         */\n        recursive?: boolean;\n    }\n    /**\n     * Synchronously open a directory. See [`opendir(3)`](http://man7.org/linux/man-pages/man3/opendir.3.html).\n     *\n     * Creates an `fs.Dir`, which contains all further functions for reading from\n     * and cleaning up the directory.\n     *\n     * The `encoding` option sets the encoding for the `path` while opening the\n     * directory and subsequent read operations.\n     * @since v12.12.0\n     */\n    export function opendirSync(path: PathLike, options?: OpenDirOptions): Dir;\n    /**\n     * Asynchronously open a directory. See the POSIX [`opendir(3)`](http://man7.org/linux/man-pages/man3/opendir.3.html) documentation for\n     * more details.\n     *\n     * Creates an `fs.Dir`, which contains all further functions for reading from\n     * and cleaning up the directory.\n     *\n     * The `encoding` option sets the encoding for the `path` while opening the\n     * directory and subsequent read operations.\n     * @since v12.12.0\n     */\n    export function opendir(path: PathLike, cb: (err: NodeJS.ErrnoException | null, dir: Dir) => void): void;\n    export function opendir(\n        path: PathLike,\n        options: OpenDirOptions,\n        cb: (err: NodeJS.ErrnoException | null, dir: Dir) => void,\n    ): void;\n    export namespace opendir {\n        function __promisify__(path: PathLike, options?: OpenDirOptions): Promise<Dir>;\n    }\n    export interface BigIntStats extends StatsBase<bigint> {\n        atimeNs: bigint;\n        mtimeNs: bigint;\n        ctimeNs: bigint;\n        birthtimeNs: bigint;\n    }\n    export interface BigIntOptions {\n        bigint: true;\n    }\n    export interface StatOptions {\n        bigint?: boolean | undefined;\n    }\n    export interface StatSyncOptions extends StatOptions {\n        throwIfNoEntry?: boolean | undefined;\n    }\n    interface CopyOptionsBase {\n        /**\n         * Dereference symlinks\n         * @default false\n         */\n        dereference?: boolean;\n        /**\n         * When `force` is `false`, and the destination\n         * exists, throw an error.\n         * @default false\n         */\n        errorOnExist?: boolean;\n        /**\n         * Overwrite existing file or directory. _The copy\n         * operation will ignore errors if you set this to false and the destination\n         * exists. Use the `errorOnExist` option to change this behavior.\n         * @default true\n         */\n        force?: boolean;\n        /**\n         * Modifiers for copy operation. See `mode` flag of {@link copyFileSync()}\n         */\n        mode?: number;\n        /**\n         * When `true` timestamps from `src` will\n         * be preserved.\n         * @default false\n         */\n        preserveTimestamps?: boolean;\n        /**\n         * Copy directories recursively.\n         * @default false\n         */\n        recursive?: boolean;\n        /**\n         * When true, path resolution for symlinks will be skipped\n         * @default false\n         */\n        verbatimSymlinks?: boolean;\n    }\n    export interface CopyOptions extends CopyOptionsBase {\n        /**\n         * Function to filter copied files/directories. Return\n         * `true` to copy the item, `false` to ignore it.\n         */\n        filter?(source: string, destination: string): boolean | Promise<boolean>;\n    }\n    export interface CopySyncOptions extends CopyOptionsBase {\n        /**\n         * Function to filter copied files/directories. Return\n         * `true` to copy the item, `false` to ignore it.\n         */\n        filter?(source: string, destination: string): boolean;\n    }\n    /**\n     * Asynchronously copies the entire directory structure from `src` to `dest`,\n     * including subdirectories and files.\n     *\n     * When copying a directory to another directory, globs are not supported and\n     * behavior is similar to `cp dir1/ dir2/`.\n     * @since v16.7.0\n     * @experimental\n     * @param src source path to copy.\n     * @param dest destination path to copy to.\n     */\n    export function cp(\n        source: string | URL,\n        destination: string | URL,\n        callback: (err: NodeJS.ErrnoException | null) => void,\n    ): void;\n    export function cp(\n        source: string | URL,\n        destination: string | URL,\n        opts: CopyOptions,\n        callback: (err: NodeJS.ErrnoException | null) => void,\n    ): void;\n    /**\n     * Synchronously copies the entire directory structure from `src` to `dest`,\n     * including subdirectories and files.\n     *\n     * When copying a directory to another directory, globs are not supported and\n     * behavior is similar to `cp dir1/ dir2/`.\n     * @since v16.7.0\n     * @experimental\n     * @param src source path to copy.\n     * @param dest destination path to copy to.\n     */\n    export function cpSync(source: string | URL, destination: string | URL, opts?: CopySyncOptions): void;\n\n    interface _GlobOptions<T extends Dirent | string> {\n        /**\n         * Current working directory.\n         * @default process.cwd()\n         */\n        cwd?: string | undefined;\n        /**\n         * `true` if the glob should return paths as `Dirent`s, `false` otherwise.\n         * @default false\n         * @since v22.2.0\n         */\n        withFileTypes?: boolean | undefined;\n        /**\n         * Function to filter out files/directories or a\n         * list of glob patterns to be excluded. If a function is provided, return\n         * `true` to exclude the item, `false` to include it.\n         * @default undefined\n         */\n        exclude?: ((fileName: T) => boolean) | readonly string[] | undefined;\n    }\n    export interface GlobOptions extends _GlobOptions<Dirent | string> {}\n    export interface GlobOptionsWithFileTypes extends _GlobOptions<Dirent> {\n        withFileTypes: true;\n    }\n    export interface GlobOptionsWithoutFileTypes extends _GlobOptions<string> {\n        withFileTypes?: false | undefined;\n    }\n\n    /**\n     * Retrieves the files matching the specified pattern.\n     */\n    export function glob(\n        pattern: string | string[],\n        callback: (err: NodeJS.ErrnoException | null, matches: string[]) => void,\n    ): void;\n    export function glob(\n        pattern: string | string[],\n        options: GlobOptionsWithFileTypes,\n        callback: (\n            err: NodeJS.ErrnoException | null,\n            matches: Dirent[],\n        ) => void,\n    ): void;\n    export function glob(\n        pattern: string | string[],\n        options: GlobOptionsWithoutFileTypes,\n        callback: (\n            err: NodeJS.ErrnoException | null,\n            matches: string[],\n        ) => void,\n    ): void;\n    export function glob(\n        pattern: string | string[],\n        options: GlobOptions,\n        callback: (\n            err: NodeJS.ErrnoException | null,\n            matches: Dirent[] | string[],\n        ) => void,\n    ): void;\n    /**\n     * Retrieves the files matching the specified pattern.\n     */\n    export function globSync(pattern: string | string[]): string[];\n    export function globSync(\n        pattern: string | string[],\n        options: GlobOptionsWithFileTypes,\n    ): Dirent[];\n    export function globSync(\n        pattern: string | string[],\n        options: GlobOptionsWithoutFileTypes,\n    ): string[];\n    export function globSync(\n        pattern: string | string[],\n        options: GlobOptions,\n    ): Dirent[] | string[];\n}\ndeclare module \"node:fs\" {\n    export * from \"fs\";\n}\n",
  '@types/node/fs/promises.d.ts':
    "/**\n * The `fs/promises` API provides asynchronous file system methods that return\n * promises.\n *\n * The promise APIs use the underlying Node.js threadpool to perform file\n * system operations off the event loop thread. These operations are not\n * synchronized or threadsafe. Care must be taken when performing multiple\n * concurrent modifications on the same file or data corruption may occur.\n * @since v10.0.0\n */\ndeclare module \"fs/promises\" {\n    import { Abortable } from \"node:events\";\n    import { Stream } from \"node:stream\";\n    import { ReadableStream } from \"node:stream/web\";\n    import {\n        BigIntStats,\n        BigIntStatsFs,\n        BufferEncodingOption,\n        constants as fsConstants,\n        CopyOptions,\n        Dir,\n        Dirent,\n        GlobOptions,\n        GlobOptionsWithFileTypes,\n        GlobOptionsWithoutFileTypes,\n        MakeDirectoryOptions,\n        Mode,\n        ObjectEncodingOptions,\n        OpenDirOptions,\n        OpenMode,\n        PathLike,\n        ReadStream,\n        ReadVResult,\n        RmDirOptions,\n        RmOptions,\n        StatFsOptions,\n        StatOptions,\n        Stats,\n        StatsFs,\n        TimeLike,\n        WatchEventType,\n        WatchOptions,\n        WriteStream,\n        WriteVResult,\n    } from \"node:fs\";\n    import { Interface as ReadlineInterface } from \"node:readline\";\n    interface FileChangeInfo<T extends string | Buffer> {\n        eventType: WatchEventType;\n        filename: T | null;\n    }\n    interface FlagAndOpenMode {\n        mode?: Mode | undefined;\n        flag?: OpenMode | undefined;\n    }\n    interface FileReadResult<T extends NodeJS.ArrayBufferView> {\n        bytesRead: number;\n        buffer: T;\n    }\n    interface FileReadOptions<T extends NodeJS.ArrayBufferView = Buffer> {\n        /**\n         * @default `Buffer.alloc(0xffff)`\n         */\n        buffer?: T;\n        /**\n         * @default 0\n         */\n        offset?: number | null;\n        /**\n         * @default `buffer.byteLength`\n         */\n        length?: number | null;\n        position?: number | null;\n    }\n    interface CreateReadStreamOptions extends Abortable {\n        encoding?: BufferEncoding | null | undefined;\n        autoClose?: boolean | undefined;\n        emitClose?: boolean | undefined;\n        start?: number | undefined;\n        end?: number | undefined;\n        highWaterMark?: number | undefined;\n    }\n    interface CreateWriteStreamOptions {\n        encoding?: BufferEncoding | null | undefined;\n        autoClose?: boolean | undefined;\n        emitClose?: boolean | undefined;\n        start?: number | undefined;\n        highWaterMark?: number | undefined;\n        flush?: boolean | undefined;\n    }\n    // TODO: Add `EventEmitter` close\n    interface FileHandle {\n        /**\n         * The numeric file descriptor managed by the {FileHandle} object.\n         * @since v10.0.0\n         */\n        readonly fd: number;\n        /**\n         * Alias of `filehandle.writeFile()`.\n         *\n         * When operating on file handles, the mode cannot be changed from what it was set\n         * to with `fsPromises.open()`. Therefore, this is equivalent to `filehandle.writeFile()`.\n         * @since v10.0.0\n         * @return Fulfills with `undefined` upon success.\n         */\n        appendFile(\n            data: string | Uint8Array,\n            options?:\n                | (ObjectEncodingOptions & Abortable)\n                | BufferEncoding\n                | null,\n        ): Promise<void>;\n        /**\n         * Changes the ownership of the file. A wrapper for [`chown(2)`](http://man7.org/linux/man-pages/man2/chown.2.html).\n         * @since v10.0.0\n         * @param uid The file's new owner's user id.\n         * @param gid The file's new group's group id.\n         * @return Fulfills with `undefined` upon success.\n         */\n        chown(uid: number, gid: number): Promise<void>;\n        /**\n         * Modifies the permissions on the file. See [`chmod(2)`](http://man7.org/linux/man-pages/man2/chmod.2.html).\n         * @since v10.0.0\n         * @param mode the file mode bit mask.\n         * @return Fulfills with `undefined` upon success.\n         */\n        chmod(mode: Mode): Promise<void>;\n        /**\n         * Unlike the 16 KiB default `highWaterMark` for a `stream.Readable`, the stream\n         * returned by this method has a default `highWaterMark` of 64 KiB.\n         *\n         * `options` can include `start` and `end` values to read a range of bytes from\n         * the file instead of the entire file. Both `start` and `end` are inclusive and\n         * start counting at 0, allowed values are in the\n         * \\[0, [`Number.MAX_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER)\\] range. If `start` is\n         * omitted or `undefined`, `filehandle.createReadStream()` reads sequentially from\n         * the current file position. The `encoding` can be any one of those accepted by `Buffer`.\n         *\n         * If the `FileHandle` points to a character device that only supports blocking\n         * reads (such as keyboard or sound card), read operations do not finish until data\n         * is available. This can prevent the process from exiting and the stream from\n         * closing naturally.\n         *\n         * By default, the stream will emit a `'close'` event after it has been\n         * destroyed.  Set the `emitClose` option to `false` to change this behavior.\n         *\n         * ```js\n         * import { open } from 'node:fs/promises';\n         *\n         * const fd = await open('/dev/input/event0');\n         * // Create a stream from some character device.\n         * const stream = fd.createReadStream();\n         * setTimeout(() => {\n         *   stream.close(); // This may not close the stream.\n         *   // Artificially marking end-of-stream, as if the underlying resource had\n         *   // indicated end-of-file by itself, allows the stream to close.\n         *   // This does not cancel pending read operations, and if there is such an\n         *   // operation, the process may still not be able to exit successfully\n         *   // until it finishes.\n         *   stream.push(null);\n         *   stream.read(0);\n         * }, 100);\n         * ```\n         *\n         * If `autoClose` is false, then the file descriptor won't be closed, even if\n         * there's an error. It is the application's responsibility to close it and make\n         * sure there's no file descriptor leak. If `autoClose` is set to true (default\n         * behavior), on `'error'` or `'end'` the file descriptor will be closed\n         * automatically.\n         *\n         * An example to read the last 10 bytes of a file which is 100 bytes long:\n         *\n         * ```js\n         * import { open } from 'node:fs/promises';\n         *\n         * const fd = await open('sample.txt');\n         * fd.createReadStream({ start: 90, end: 99 });\n         * ```\n         * @since v16.11.0\n         */\n        createReadStream(options?: CreateReadStreamOptions): ReadStream;\n        /**\n         * `options` may also include a `start` option to allow writing data at some\n         * position past the beginning of the file, allowed values are in the\n         * \\[0, [`Number.MAX_SAFE_INTEGER`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER)\\] range. Modifying a file rather than\n         * replacing it may require the `flags` `open` option to be set to `r+` rather than\n         * the default `r`. The `encoding` can be any one of those accepted by `Buffer`.\n         *\n         * If `autoClose` is set to true (default behavior) on `'error'` or `'finish'` the file descriptor will be closed automatically. If `autoClose` is false,\n         * then the file descriptor won't be closed, even if there's an error.\n         * It is the application's responsibility to close it and make sure there's no\n         * file descriptor leak.\n         *\n         * By default, the stream will emit a `'close'` event after it has been\n         * destroyed.  Set the `emitClose` option to `false` to change this behavior.\n         * @since v16.11.0\n         */\n        createWriteStream(options?: CreateWriteStreamOptions): WriteStream;\n        /**\n         * Forces all currently queued I/O operations associated with the file to the\n         * operating system's synchronized I/O completion state. Refer to the POSIX [`fdatasync(2)`](http://man7.org/linux/man-pages/man2/fdatasync.2.html) documentation for details.\n         *\n         * Unlike `filehandle.sync` this method does not flush modified metadata.\n         * @since v10.0.0\n         * @return Fulfills with `undefined` upon success.\n         */\n        datasync(): Promise<void>;\n        /**\n         * Request that all data for the open file descriptor is flushed to the storage\n         * device. The specific implementation is operating system and device specific.\n         * Refer to the POSIX [`fsync(2)`](http://man7.org/linux/man-pages/man2/fsync.2.html) documentation for more detail.\n         * @since v10.0.0\n         * @return Fulfills with `undefined` upon success.\n         */\n        sync(): Promise<void>;\n        /**\n         * Reads data from the file and stores that in the given buffer.\n         *\n         * If the file is not modified concurrently, the end-of-file is reached when the\n         * number of bytes read is zero.\n         * @since v10.0.0\n         * @param buffer A buffer that will be filled with the file data read.\n         * @param offset The location in the buffer at which to start filling.\n         * @param length The number of bytes to read.\n         * @param position The location where to begin reading data from the file. If `null`, data will be read from the current file position, and the position will be updated. If `position` is an\n         * integer, the current file position will remain unchanged.\n         * @return Fulfills upon success with an object with two properties:\n         */\n        read<T extends NodeJS.ArrayBufferView>(\n            buffer: T,\n            offset?: number | null,\n            length?: number | null,\n            position?: number | null,\n        ): Promise<FileReadResult<T>>;\n        read<T extends NodeJS.ArrayBufferView = Buffer>(\n            buffer: T,\n            options?: FileReadOptions<T>,\n        ): Promise<FileReadResult<T>>;\n        read<T extends NodeJS.ArrayBufferView = Buffer>(options?: FileReadOptions<T>): Promise<FileReadResult<T>>;\n        /**\n         * Returns a byte-oriented `ReadableStream` that may be used to read the file's\n         * contents.\n         *\n         * An error will be thrown if this method is called more than once or is called\n         * after the `FileHandle` is closed or closing.\n         *\n         * ```js\n         * import {\n         *   open,\n         * } from 'node:fs/promises';\n         *\n         * const file = await open('./some/file/to/read');\n         *\n         * for await (const chunk of file.readableWebStream())\n         *   console.log(chunk);\n         *\n         * await file.close();\n         * ```\n         *\n         * While the `ReadableStream` will read the file to completion, it will not\n         * close the `FileHandle` automatically. User code must still call the`fileHandle.close()` method.\n         * @since v17.0.0\n         * @experimental\n         */\n        readableWebStream(): ReadableStream;\n        /**\n         * Asynchronously reads the entire contents of a file.\n         *\n         * If `options` is a string, then it specifies the `encoding`.\n         *\n         * The `FileHandle` has to support reading.\n         *\n         * If one or more `filehandle.read()` calls are made on a file handle and then a `filehandle.readFile()` call is made, the data will be read from the current\n         * position till the end of the file. It doesn't always read from the beginning\n         * of the file.\n         * @since v10.0.0\n         * @return Fulfills upon a successful read with the contents of the file. If no encoding is specified (using `options.encoding`), the data is returned as a {Buffer} object. Otherwise, the\n         * data will be a string.\n         */\n        readFile(\n            options?:\n                | ({ encoding?: null | undefined } & Abortable)\n                | null,\n        ): Promise<Buffer>;\n        /**\n         * Asynchronously reads the entire contents of a file. The underlying file will _not_ be closed automatically.\n         * The `FileHandle` must have been opened for reading.\n         */\n        readFile(\n            options:\n                | ({ encoding: BufferEncoding } & Abortable)\n                | BufferEncoding,\n        ): Promise<string>;\n        /**\n         * Asynchronously reads the entire contents of a file. The underlying file will _not_ be closed automatically.\n         * The `FileHandle` must have been opened for reading.\n         */\n        readFile(\n            options?:\n                | (ObjectEncodingOptions & Abortable)\n                | BufferEncoding\n                | null,\n        ): Promise<string | Buffer>;\n        /**\n         * Convenience method to create a `readline` interface and stream over the file.\n         * See `filehandle.createReadStream()` for the options.\n         *\n         * ```js\n         * import { open } from 'node:fs/promises';\n         *\n         * const file = await open('./some/file/to/read');\n         *\n         * for await (const line of file.readLines()) {\n         *   console.log(line);\n         * }\n         * ```\n         * @since v18.11.0\n         */\n        readLines(options?: CreateReadStreamOptions): ReadlineInterface;\n        /**\n         * @since v10.0.0\n         * @return Fulfills with an {fs.Stats} for the file.\n         */\n        stat(\n            opts?: StatOptions & {\n                bigint?: false | undefined;\n            },\n        ): Promise<Stats>;\n        stat(\n            opts: StatOptions & {\n                bigint: true;\n            },\n        ): Promise<BigIntStats>;\n        stat(opts?: StatOptions): Promise<Stats | BigIntStats>;\n        /**\n         * Truncates the file.\n         *\n         * If the file was larger than `len` bytes, only the first `len` bytes will be\n         * retained in the file.\n         *\n         * The following example retains only the first four bytes of the file:\n         *\n         * ```js\n         * import { open } from 'node:fs/promises';\n         *\n         * let filehandle = null;\n         * try {\n         *   filehandle = await open('temp.txt', 'r+');\n         *   await filehandle.truncate(4);\n         * } finally {\n         *   await filehandle?.close();\n         * }\n         * ```\n         *\n         * If the file previously was shorter than `len` bytes, it is extended, and the\n         * extended part is filled with null bytes (`'\\0'`):\n         *\n         * If `len` is negative then `0` will be used.\n         * @since v10.0.0\n         * @param [len=0]\n         * @return Fulfills with `undefined` upon success.\n         */\n        truncate(len?: number): Promise<void>;\n        /**\n         * Change the file system timestamps of the object referenced by the `FileHandle` then fulfills the promise with no arguments upon success.\n         * @since v10.0.0\n         */\n        utimes(atime: TimeLike, mtime: TimeLike): Promise<void>;\n        /**\n         * Asynchronously writes data to a file, replacing the file if it already exists. `data` can be a string, a buffer, an\n         * [AsyncIterable](https://tc39.github.io/ecma262/#sec-asynciterable-interface), or an\n         * [Iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol) object.\n         * The promise is fulfilled with no arguments upon success.\n         *\n         * If `options` is a string, then it specifies the `encoding`.\n         *\n         * The `FileHandle` has to support writing.\n         *\n         * It is unsafe to use `filehandle.writeFile()` multiple times on the same file\n         * without waiting for the promise to be fulfilled (or rejected).\n         *\n         * If one or more `filehandle.write()` calls are made on a file handle and then a`filehandle.writeFile()` call is made, the data will be written from the\n         * current position till the end of the file. It doesn't always write from the\n         * beginning of the file.\n         * @since v10.0.0\n         */\n        writeFile(\n            data: string | Uint8Array,\n            options?:\n                | (ObjectEncodingOptions & Abortable)\n                | BufferEncoding\n                | null,\n        ): Promise<void>;\n        /**\n         * Write `buffer` to the file.\n         *\n         * The promise is fulfilled with an object containing two properties:\n         *\n         * It is unsafe to use `filehandle.write()` multiple times on the same file\n         * without waiting for the promise to be fulfilled (or rejected). For this\n         * scenario, use `filehandle.createWriteStream()`.\n         *\n         * On Linux, positional writes do not work when the file is opened in append mode.\n         * The kernel ignores the position argument and always appends the data to\n         * the end of the file.\n         * @since v10.0.0\n         * @param offset The start position from within `buffer` where the data to write begins.\n         * @param [length=buffer.byteLength - offset] The number of bytes from `buffer` to write.\n         * @param [position='null'] The offset from the beginning of the file where the data from `buffer` should be written. If `position` is not a `number`, the data will be written at the current\n         * position. See the POSIX pwrite(2) documentation for more detail.\n         */\n        write<TBuffer extends Uint8Array>(\n            buffer: TBuffer,\n            offset?: number | null,\n            length?: number | null,\n            position?: number | null,\n        ): Promise<{\n            bytesWritten: number;\n            buffer: TBuffer;\n        }>;\n        write<TBuffer extends Uint8Array>(\n            buffer: TBuffer,\n            options?: { offset?: number; length?: number; position?: number },\n        ): Promise<{\n            bytesWritten: number;\n            buffer: TBuffer;\n        }>;\n        write(\n            data: string,\n            position?: number | null,\n            encoding?: BufferEncoding | null,\n        ): Promise<{\n            bytesWritten: number;\n            buffer: string;\n        }>;\n        /**\n         * Write an array of [ArrayBufferView](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView) s to the file.\n         *\n         * The promise is fulfilled with an object containing a two properties:\n         *\n         * It is unsafe to call `writev()` multiple times on the same file without waiting\n         * for the promise to be fulfilled (or rejected).\n         *\n         * On Linux, positional writes don't work when the file is opened in append mode.\n         * The kernel ignores the position argument and always appends the data to\n         * the end of the file.\n         * @since v12.9.0\n         * @param [position='null'] The offset from the beginning of the file where the data from `buffers` should be written. If `position` is not a `number`, the data will be written at the current\n         * position.\n         */\n        writev(buffers: readonly NodeJS.ArrayBufferView[], position?: number): Promise<WriteVResult>;\n        /**\n         * Read from a file and write to an array of [ArrayBufferView](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView) s\n         * @since v13.13.0, v12.17.0\n         * @param [position='null'] The offset from the beginning of the file where the data should be read from. If `position` is not a `number`, the data will be read from the current position.\n         * @return Fulfills upon success an object containing two properties:\n         */\n        readv(buffers: readonly NodeJS.ArrayBufferView[], position?: number): Promise<ReadVResult>;\n        /**\n         * Closes the file handle after waiting for any pending operation on the handle to\n         * complete.\n         *\n         * ```js\n         * import { open } from 'node:fs/promises';\n         *\n         * let filehandle;\n         * try {\n         *   filehandle = await open('thefile.txt', 'r');\n         * } finally {\n         *   await filehandle?.close();\n         * }\n         * ```\n         * @since v10.0.0\n         * @return Fulfills with `undefined` upon success.\n         */\n        close(): Promise<void>;\n        /**\n         * An alias for {@link FileHandle.close()}.\n         * @since v20.4.0\n         */\n        [Symbol.asyncDispose](): Promise<void>;\n    }\n    const constants: typeof fsConstants;\n    /**\n     * Tests a user's permissions for the file or directory specified by `path`.\n     * The `mode` argument is an optional integer that specifies the accessibility\n     * checks to be performed. `mode` should be either the value `fs.constants.F_OK` or a mask consisting of the bitwise OR of any of `fs.constants.R_OK`, `fs.constants.W_OK`, and `fs.constants.X_OK`\n     * (e.g.`fs.constants.W_OK | fs.constants.R_OK`). Check `File access constants` for\n     * possible values of `mode`.\n     *\n     * If the accessibility check is successful, the promise is fulfilled with no\n     * value. If any of the accessibility checks fail, the promise is rejected\n     * with an [Error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) object. The following example checks if the file`/etc/passwd` can be read and\n     * written by the current process.\n     *\n     * ```js\n     * import { access, constants } from 'node:fs/promises';\n     *\n     * try {\n     *   await access('/etc/passwd', constants.R_OK | constants.W_OK);\n     *   console.log('can access');\n     * } catch {\n     *   console.error('cannot access');\n     * }\n     * ```\n     *\n     * Using `fsPromises.access()` to check for the accessibility of a file before\n     * calling `fsPromises.open()` is not recommended. Doing so introduces a race\n     * condition, since other processes may change the file's state between the two\n     * calls. Instead, user code should open/read/write the file directly and handle\n     * the error raised if the file is not accessible.\n     * @since v10.0.0\n     * @param [mode=fs.constants.F_OK]\n     * @return Fulfills with `undefined` upon success.\n     */\n    function access(path: PathLike, mode?: number): Promise<void>;\n    /**\n     * Asynchronously copies `src` to `dest`. By default, `dest` is overwritten if it\n     * already exists.\n     *\n     * No guarantees are made about the atomicity of the copy operation. If an\n     * error occurs after the destination file has been opened for writing, an attempt\n     * will be made to remove the destination.\n     *\n     * ```js\n     * import { copyFile, constants } from 'node:fs/promises';\n     *\n     * try {\n     *   await copyFile('source.txt', 'destination.txt');\n     *   console.log('source.txt was copied to destination.txt');\n     * } catch {\n     *   console.error('The file could not be copied');\n     * }\n     *\n     * // By using COPYFILE_EXCL, the operation will fail if destination.txt exists.\n     * try {\n     *   await copyFile('source.txt', 'destination.txt', constants.COPYFILE_EXCL);\n     *   console.log('source.txt was copied to destination.txt');\n     * } catch {\n     *   console.error('The file could not be copied');\n     * }\n     * ```\n     * @since v10.0.0\n     * @param src source filename to copy\n     * @param dest destination filename of the copy operation\n     * @param [mode=0] Optional modifiers that specify the behavior of the copy operation. It is possible to create a mask consisting of the bitwise OR of two or more values (e.g.\n     * `fs.constants.COPYFILE_EXCL | fs.constants.COPYFILE_FICLONE`)\n     * @return Fulfills with `undefined` upon success.\n     */\n    function copyFile(src: PathLike, dest: PathLike, mode?: number): Promise<void>;\n    /**\n     * Opens a `FileHandle`.\n     *\n     * Refer to the POSIX [`open(2)`](http://man7.org/linux/man-pages/man2/open.2.html) documentation for more detail.\n     *\n     * Some characters (`< > : \" / \\ | ? *`) are reserved under Windows as documented\n     * by [Naming Files, Paths, and Namespaces](https://docs.microsoft.com/en-us/windows/desktop/FileIO/naming-a-file). Under NTFS, if the filename contains\n     * a colon, Node.js will open a file system stream, as described by [this MSDN page](https://docs.microsoft.com/en-us/windows/desktop/FileIO/using-streams).\n     * @since v10.0.0\n     * @param [flags='r'] See `support of file system `flags``.\n     * @param [mode=0o666] Sets the file mode (permission and sticky bits) if the file is created.\n     * @return Fulfills with a {FileHandle} object.\n     */\n    function open(path: PathLike, flags?: string | number, mode?: Mode): Promise<FileHandle>;\n    /**\n     * Renames `oldPath` to `newPath`.\n     * @since v10.0.0\n     * @return Fulfills with `undefined` upon success.\n     */\n    function rename(oldPath: PathLike, newPath: PathLike): Promise<void>;\n    /**\n     * Truncates (shortens or extends the length) of the content at `path` to `len` bytes.\n     * @since v10.0.0\n     * @param [len=0]\n     * @return Fulfills with `undefined` upon success.\n     */\n    function truncate(path: PathLike, len?: number): Promise<void>;\n    /**\n     * Removes the directory identified by `path`.\n     *\n     * Using `fsPromises.rmdir()` on a file (not a directory) results in the\n     * promise being rejected with an `ENOENT` error on Windows and an `ENOTDIR` error on POSIX.\n     *\n     * To get a behavior similar to the `rm -rf` Unix command, use `fsPromises.rm()` with options `{ recursive: true, force: true }`.\n     * @since v10.0.0\n     * @return Fulfills with `undefined` upon success.\n     */\n    function rmdir(path: PathLike, options?: RmDirOptions): Promise<void>;\n    /**\n     * Removes files and directories (modeled on the standard POSIX `rm` utility).\n     * @since v14.14.0\n     * @return Fulfills with `undefined` upon success.\n     */\n    function rm(path: PathLike, options?: RmOptions): Promise<void>;\n    /**\n     * Asynchronously creates a directory.\n     *\n     * The optional `options` argument can be an integer specifying `mode` (permission\n     * and sticky bits), or an object with a `mode` property and a `recursive` property indicating whether parent directories should be created. Calling `fsPromises.mkdir()` when `path` is a directory\n     * that exists results in a\n     * rejection only when `recursive` is false.\n     *\n     * ```js\n     * import { mkdir } from 'node:fs/promises';\n     *\n     * try {\n     *   const projectFolder = new URL('./test/project/', import.meta.url);\n     *   const createDir = await mkdir(projectFolder, { recursive: true });\n     *\n     *   console.log(`created ${createDir}`);\n     * } catch (err) {\n     *   console.error(err.message);\n     * }\n     * ```\n     * @since v10.0.0\n     * @return Upon success, fulfills with `undefined` if `recursive` is `false`, or the first directory path created if `recursive` is `true`.\n     */\n    function mkdir(\n        path: PathLike,\n        options: MakeDirectoryOptions & {\n            recursive: true;\n        },\n    ): Promise<string | undefined>;\n    /**\n     * Asynchronous mkdir(2) - create a directory.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     * @param options Either the file mode, or an object optionally specifying the file mode and whether parent folders\n     * should be created. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.\n     */\n    function mkdir(\n        path: PathLike,\n        options?:\n            | Mode\n            | (MakeDirectoryOptions & {\n                recursive?: false | undefined;\n            })\n            | null,\n    ): Promise<void>;\n    /**\n     * Asynchronous mkdir(2) - create a directory.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     * @param options Either the file mode, or an object optionally specifying the file mode and whether parent folders\n     * should be created. If a string is passed, it is parsed as an octal integer. If not specified, defaults to `0o777`.\n     */\n    function mkdir(path: PathLike, options?: Mode | MakeDirectoryOptions | null): Promise<string | undefined>;\n    /**\n     * Reads the contents of a directory.\n     *\n     * The optional `options` argument can be a string specifying an encoding, or an\n     * object with an `encoding` property specifying the character encoding to use for\n     * the filenames. If the `encoding` is set to `'buffer'`, the filenames returned\n     * will be passed as `Buffer` objects.\n     *\n     * If `options.withFileTypes` is set to `true`, the returned array will contain `fs.Dirent` objects.\n     *\n     * ```js\n     * import { readdir } from 'node:fs/promises';\n     *\n     * try {\n     *   const files = await readdir(path);\n     *   for (const file of files)\n     *     console.log(file);\n     * } catch (err) {\n     *   console.error(err);\n     * }\n     * ```\n     * @since v10.0.0\n     * @return Fulfills with an array of the names of the files in the directory excluding `'.'` and `'..'`.\n     */\n    function readdir(\n        path: PathLike,\n        options?:\n            | (ObjectEncodingOptions & {\n                withFileTypes?: false | undefined;\n                recursive?: boolean | undefined;\n            })\n            | BufferEncoding\n            | null,\n    ): Promise<string[]>;\n    /**\n     * Asynchronous readdir(3) - read a directory.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\n     */\n    function readdir(\n        path: PathLike,\n        options:\n            | {\n                encoding: \"buffer\";\n                withFileTypes?: false | undefined;\n                recursive?: boolean | undefined;\n            }\n            | \"buffer\",\n    ): Promise<Buffer[]>;\n    /**\n     * Asynchronous readdir(3) - read a directory.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\n     */\n    function readdir(\n        path: PathLike,\n        options?:\n            | (ObjectEncodingOptions & {\n                withFileTypes?: false | undefined;\n                recursive?: boolean | undefined;\n            })\n            | BufferEncoding\n            | null,\n    ): Promise<string[] | Buffer[]>;\n    /**\n     * Asynchronous readdir(3) - read a directory.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     * @param options If called with `withFileTypes: true` the result data will be an array of Dirent.\n     */\n    function readdir(\n        path: PathLike,\n        options: ObjectEncodingOptions & {\n            withFileTypes: true;\n            recursive?: boolean | undefined;\n        },\n    ): Promise<Dirent[]>;\n    /**\n     * Asynchronous readdir(3) - read a directory.\n     * @param path A path to a directory. If a URL is provided, it must use the `file:` protocol.\n     * @param options Must include `withFileTypes: true` and `encoding: 'buffer'`.\n     */\n    function readdir(\n        path: PathLike,\n        options: {\n            encoding: \"buffer\";\n            withFileTypes: true;\n            recursive?: boolean | undefined;\n        },\n    ): Promise<Dirent<Buffer>[]>;\n    /**\n     * Reads the contents of the symbolic link referred to by `path`. See the POSIX [`readlink(2)`](http://man7.org/linux/man-pages/man2/readlink.2.html) documentation for more detail. The promise is\n     * fulfilled with the`linkString` upon success.\n     *\n     * The optional `options` argument can be a string specifying an encoding, or an\n     * object with an `encoding` property specifying the character encoding to use for\n     * the link path returned. If the `encoding` is set to `'buffer'`, the link path\n     * returned will be passed as a `Buffer` object.\n     * @since v10.0.0\n     * @return Fulfills with the `linkString` upon success.\n     */\n    function readlink(path: PathLike, options?: ObjectEncodingOptions | BufferEncoding | null): Promise<string>;\n    /**\n     * Asynchronous readlink(2) - read value of a symbolic link.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\n     */\n    function readlink(path: PathLike, options: BufferEncodingOption): Promise<Buffer>;\n    /**\n     * Asynchronous readlink(2) - read value of a symbolic link.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\n     */\n    function readlink(path: PathLike, options?: ObjectEncodingOptions | string | null): Promise<string | Buffer>;\n    /**\n     * Creates a symbolic link.\n     *\n     * The `type` argument is only used on Windows platforms and can be one of `'dir'`, `'file'`, or `'junction'`. If the `type` argument is not a string, Node.js will\n     * autodetect `target` type and use `'file'` or `'dir'`. If the `target` does not\n     * exist, `'file'` will be used. Windows junction points require the destination\n     * path to be absolute. When using `'junction'`, the `target` argument will\n     * automatically be normalized to absolute path. Junction points on NTFS volumes\n     * can only point to directories.\n     * @since v10.0.0\n     * @param [type='null']\n     * @return Fulfills with `undefined` upon success.\n     */\n    function symlink(target: PathLike, path: PathLike, type?: string | null): Promise<void>;\n    /**\n     * Equivalent to `fsPromises.stat()` unless `path` refers to a symbolic link,\n     * in which case the link itself is stat-ed, not the file that it refers to.\n     * Refer to the POSIX [`lstat(2)`](http://man7.org/linux/man-pages/man2/lstat.2.html) document for more detail.\n     * @since v10.0.0\n     * @return Fulfills with the {fs.Stats} object for the given symbolic link `path`.\n     */\n    function lstat(\n        path: PathLike,\n        opts?: StatOptions & {\n            bigint?: false | undefined;\n        },\n    ): Promise<Stats>;\n    function lstat(\n        path: PathLike,\n        opts: StatOptions & {\n            bigint: true;\n        },\n    ): Promise<BigIntStats>;\n    function lstat(path: PathLike, opts?: StatOptions): Promise<Stats | BigIntStats>;\n    /**\n     * @since v10.0.0\n     * @return Fulfills with the {fs.Stats} object for the given `path`.\n     */\n    function stat(\n        path: PathLike,\n        opts?: StatOptions & {\n            bigint?: false | undefined;\n        },\n    ): Promise<Stats>;\n    function stat(\n        path: PathLike,\n        opts: StatOptions & {\n            bigint: true;\n        },\n    ): Promise<BigIntStats>;\n    function stat(path: PathLike, opts?: StatOptions): Promise<Stats | BigIntStats>;\n    /**\n     * @since v19.6.0, v18.15.0\n     * @return Fulfills with the {fs.StatFs} object for the given `path`.\n     */\n    function statfs(\n        path: PathLike,\n        opts?: StatFsOptions & {\n            bigint?: false | undefined;\n        },\n    ): Promise<StatsFs>;\n    function statfs(\n        path: PathLike,\n        opts: StatFsOptions & {\n            bigint: true;\n        },\n    ): Promise<BigIntStatsFs>;\n    function statfs(path: PathLike, opts?: StatFsOptions): Promise<StatsFs | BigIntStatsFs>;\n    /**\n     * Creates a new link from the `existingPath` to the `newPath`. See the POSIX [`link(2)`](http://man7.org/linux/man-pages/man2/link.2.html) documentation for more detail.\n     * @since v10.0.0\n     * @return Fulfills with `undefined` upon success.\n     */\n    function link(existingPath: PathLike, newPath: PathLike): Promise<void>;\n    /**\n     * If `path` refers to a symbolic link, then the link is removed without affecting\n     * the file or directory to which that link refers. If the `path` refers to a file\n     * path that is not a symbolic link, the file is deleted. See the POSIX [`unlink(2)`](http://man7.org/linux/man-pages/man2/unlink.2.html) documentation for more detail.\n     * @since v10.0.0\n     * @return Fulfills with `undefined` upon success.\n     */\n    function unlink(path: PathLike): Promise<void>;\n    /**\n     * Changes the permissions of a file.\n     * @since v10.0.0\n     * @return Fulfills with `undefined` upon success.\n     */\n    function chmod(path: PathLike, mode: Mode): Promise<void>;\n    /**\n     * Changes the permissions on a symbolic link.\n     *\n     * This method is only implemented on macOS.\n     * @deprecated Since v10.0.0\n     * @return Fulfills with `undefined` upon success.\n     */\n    function lchmod(path: PathLike, mode: Mode): Promise<void>;\n    /**\n     * Changes the ownership on a symbolic link.\n     * @since v10.0.0\n     * @return Fulfills with `undefined` upon success.\n     */\n    function lchown(path: PathLike, uid: number, gid: number): Promise<void>;\n    /**\n     * Changes the access and modification times of a file in the same way as `fsPromises.utimes()`, with the difference that if the path refers to a\n     * symbolic link, then the link is not dereferenced: instead, the timestamps of\n     * the symbolic link itself are changed.\n     * @since v14.5.0, v12.19.0\n     * @return Fulfills with `undefined` upon success.\n     */\n    function lutimes(path: PathLike, atime: TimeLike, mtime: TimeLike): Promise<void>;\n    /**\n     * Changes the ownership of a file.\n     * @since v10.0.0\n     * @return Fulfills with `undefined` upon success.\n     */\n    function chown(path: PathLike, uid: number, gid: number): Promise<void>;\n    /**\n     * Change the file system timestamps of the object referenced by `path`.\n     *\n     * The `atime` and `mtime` arguments follow these rules:\n     *\n     * * Values can be either numbers representing Unix epoch time, `Date`s, or a\n     * numeric string like `'123456789.0'`.\n     * * If the value can not be converted to a number, or is `NaN`, `Infinity`, or `-Infinity`, an `Error` will be thrown.\n     * @since v10.0.0\n     * @return Fulfills with `undefined` upon success.\n     */\n    function utimes(path: PathLike, atime: TimeLike, mtime: TimeLike): Promise<void>;\n    /**\n     * Determines the actual location of `path` using the same semantics as the `fs.realpath.native()` function.\n     *\n     * Only paths that can be converted to UTF8 strings are supported.\n     *\n     * The optional `options` argument can be a string specifying an encoding, or an\n     * object with an `encoding` property specifying the character encoding to use for\n     * the path. If the `encoding` is set to `'buffer'`, the path returned will be\n     * passed as a `Buffer` object.\n     *\n     * On Linux, when Node.js is linked against musl libc, the procfs file system must\n     * be mounted on `/proc` in order for this function to work. Glibc does not have\n     * this restriction.\n     * @since v10.0.0\n     * @return Fulfills with the resolved path upon success.\n     */\n    function realpath(path: PathLike, options?: ObjectEncodingOptions | BufferEncoding | null): Promise<string>;\n    /**\n     * Asynchronous realpath(3) - return the canonicalized absolute pathname.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\n     */\n    function realpath(path: PathLike, options: BufferEncodingOption): Promise<Buffer>;\n    /**\n     * Asynchronous realpath(3) - return the canonicalized absolute pathname.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\n     */\n    function realpath(\n        path: PathLike,\n        options?: ObjectEncodingOptions | BufferEncoding | null,\n    ): Promise<string | Buffer>;\n    /**\n     * Creates a unique temporary directory. A unique directory name is generated by\n     * appending six random characters to the end of the provided `prefix`. Due to\n     * platform inconsistencies, avoid trailing `X` characters in `prefix`. Some\n     * platforms, notably the BSDs, can return more than six random characters, and\n     * replace trailing `X` characters in `prefix` with random characters.\n     *\n     * The optional `options` argument can be a string specifying an encoding, or an\n     * object with an `encoding` property specifying the character encoding to use.\n     *\n     * ```js\n     * import { mkdtemp } from 'node:fs/promises';\n     * import { join } from 'node:path';\n     * import { tmpdir } from 'node:os';\n     *\n     * try {\n     *   await mkdtemp(join(tmpdir(), 'foo-'));\n     * } catch (err) {\n     *   console.error(err);\n     * }\n     * ```\n     *\n     * The `fsPromises.mkdtemp()` method will append the six randomly selected\n     * characters directly to the `prefix` string. For instance, given a directory `/tmp`, if the intention is to create a temporary directory _within_ `/tmp`, the `prefix` must end with a trailing\n     * platform-specific path separator\n     * (`import { sep } from 'node:path'`).\n     * @since v10.0.0\n     * @return Fulfills with a string containing the file system path of the newly created temporary directory.\n     */\n    function mkdtemp(prefix: string, options?: ObjectEncodingOptions | BufferEncoding | null): Promise<string>;\n    /**\n     * Asynchronously creates a unique temporary directory.\n     * Generates six random characters to be appended behind a required `prefix` to create a unique temporary directory.\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\n     */\n    function mkdtemp(prefix: string, options: BufferEncodingOption): Promise<Buffer>;\n    /**\n     * Asynchronously creates a unique temporary directory.\n     * Generates six random characters to be appended behind a required `prefix` to create a unique temporary directory.\n     * @param options The encoding (or an object specifying the encoding), used as the encoding of the result. If not provided, `'utf8'` is used.\n     */\n    function mkdtemp(prefix: string, options?: ObjectEncodingOptions | BufferEncoding | null): Promise<string | Buffer>;\n    /**\n     * Asynchronously writes data to a file, replacing the file if it already exists. `data` can be a string, a buffer, an\n     * [AsyncIterable](https://tc39.github.io/ecma262/#sec-asynciterable-interface), or an\n     * [Iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol) object.\n     *\n     * The `encoding` option is ignored if `data` is a buffer.\n     *\n     * If `options` is a string, then it specifies the encoding.\n     *\n     * The `mode` option only affects the newly created file. See `fs.open()` for more details.\n     *\n     * Any specified `FileHandle` has to support writing.\n     *\n     * It is unsafe to use `fsPromises.writeFile()` multiple times on the same file\n     * without waiting for the promise to be settled.\n     *\n     * Similarly to `fsPromises.readFile` \\- `fsPromises.writeFile` is a convenience\n     * method that performs multiple `write` calls internally to write the buffer\n     * passed to it. For performance sensitive code consider using `fs.createWriteStream()` or `filehandle.createWriteStream()`.\n     *\n     * It is possible to use an `AbortSignal` to cancel an `fsPromises.writeFile()`.\n     * Cancelation is \"best effort\", and some amount of data is likely still\n     * to be written.\n     *\n     * ```js\n     * import { writeFile } from 'node:fs/promises';\n     * import { Buffer } from 'node:buffer';\n     *\n     * try {\n     *   const controller = new AbortController();\n     *   const { signal } = controller;\n     *   const data = new Uint8Array(Buffer.from('Hello Node.js'));\n     *   const promise = writeFile('message.txt', data, { signal });\n     *\n     *   // Abort the request before the promise settles.\n     *   controller.abort();\n     *\n     *   await promise;\n     * } catch (err) {\n     *   // When a request is aborted - err is an AbortError\n     *   console.error(err);\n     * }\n     * ```\n     *\n     * Aborting an ongoing request does not abort individual operating\n     * system requests but rather the internal buffering `fs.writeFile` performs.\n     * @since v10.0.0\n     * @param file filename or `FileHandle`\n     * @return Fulfills with `undefined` upon success.\n     */\n    function writeFile(\n        file: PathLike | FileHandle,\n        data:\n            | string\n            | NodeJS.ArrayBufferView\n            | Iterable<string | NodeJS.ArrayBufferView>\n            | AsyncIterable<string | NodeJS.ArrayBufferView>\n            | Stream,\n        options?:\n            | (ObjectEncodingOptions & {\n                mode?: Mode | undefined;\n                flag?: OpenMode | undefined;\n                /**\n                 * If all data is successfully written to the file, and `flush`\n                 * is `true`, `filehandle.sync()` is used to flush the data.\n                 * @default false\n                 */\n                flush?: boolean | undefined;\n            } & Abortable)\n            | BufferEncoding\n            | null,\n    ): Promise<void>;\n    /**\n     * Asynchronously append data to a file, creating the file if it does not yet\n     * exist. `data` can be a string or a `Buffer`.\n     *\n     * If `options` is a string, then it specifies the `encoding`.\n     *\n     * The `mode` option only affects the newly created file. See `fs.open()` for more details.\n     *\n     * The `path` may be specified as a `FileHandle` that has been opened\n     * for appending (using `fsPromises.open()`).\n     * @since v10.0.0\n     * @param path filename or {FileHandle}\n     * @return Fulfills with `undefined` upon success.\n     */\n    function appendFile(\n        path: PathLike | FileHandle,\n        data: string | Uint8Array,\n        options?: (ObjectEncodingOptions & FlagAndOpenMode & { flush?: boolean | undefined }) | BufferEncoding | null,\n    ): Promise<void>;\n    /**\n     * Asynchronously reads the entire contents of a file.\n     *\n     * If no encoding is specified (using `options.encoding`), the data is returned\n     * as a `Buffer` object. Otherwise, the data will be a string.\n     *\n     * If `options` is a string, then it specifies the encoding.\n     *\n     * When the `path` is a directory, the behavior of `fsPromises.readFile()` is\n     * platform-specific. On macOS, Linux, and Windows, the promise will be rejected\n     * with an error. On FreeBSD, a representation of the directory's contents will be\n     * returned.\n     *\n     * An example of reading a `package.json` file located in the same directory of the\n     * running code:\n     *\n     * ```js\n     * import { readFile } from 'node:fs/promises';\n     * try {\n     *   const filePath = new URL('./package.json', import.meta.url);\n     *   const contents = await readFile(filePath, { encoding: 'utf8' });\n     *   console.log(contents);\n     * } catch (err) {\n     *   console.error(err.message);\n     * }\n     * ```\n     *\n     * It is possible to abort an ongoing `readFile` using an `AbortSignal`. If a\n     * request is aborted the promise returned is rejected with an `AbortError`:\n     *\n     * ```js\n     * import { readFile } from 'node:fs/promises';\n     *\n     * try {\n     *   const controller = new AbortController();\n     *   const { signal } = controller;\n     *   const promise = readFile(fileName, { signal });\n     *\n     *   // Abort the request before the promise settles.\n     *   controller.abort();\n     *\n     *   await promise;\n     * } catch (err) {\n     *   // When a request is aborted - err is an AbortError\n     *   console.error(err);\n     * }\n     * ```\n     *\n     * Aborting an ongoing request does not abort individual operating\n     * system requests but rather the internal buffering `fs.readFile` performs.\n     *\n     * Any specified `FileHandle` has to support reading.\n     * @since v10.0.0\n     * @param path filename or `FileHandle`\n     * @return Fulfills with the contents of the file.\n     */\n    function readFile(\n        path: PathLike | FileHandle,\n        options?:\n            | ({\n                encoding?: null | undefined;\n                flag?: OpenMode | undefined;\n            } & Abortable)\n            | null,\n    ): Promise<Buffer>;\n    /**\n     * Asynchronously reads the entire contents of a file.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     * If a `FileHandle` is provided, the underlying file will _not_ be closed automatically.\n     * @param options An object that may contain an optional flag.\n     * If a flag is not provided, it defaults to `'r'`.\n     */\n    function readFile(\n        path: PathLike | FileHandle,\n        options:\n            | ({\n                encoding: BufferEncoding;\n                flag?: OpenMode | undefined;\n            } & Abortable)\n            | BufferEncoding,\n    ): Promise<string>;\n    /**\n     * Asynchronously reads the entire contents of a file.\n     * @param path A path to a file. If a URL is provided, it must use the `file:` protocol.\n     * If a `FileHandle` is provided, the underlying file will _not_ be closed automatically.\n     * @param options An object that may contain an optional flag.\n     * If a flag is not provided, it defaults to `'r'`.\n     */\n    function readFile(\n        path: PathLike | FileHandle,\n        options?:\n            | (\n                & ObjectEncodingOptions\n                & Abortable\n                & {\n                    flag?: OpenMode | undefined;\n                }\n            )\n            | BufferEncoding\n            | null,\n    ): Promise<string | Buffer>;\n    /**\n     * Asynchronously open a directory for iterative scanning. See the POSIX [`opendir(3)`](http://man7.org/linux/man-pages/man3/opendir.3.html) documentation for more detail.\n     *\n     * Creates an `fs.Dir`, which contains all further functions for reading from\n     * and cleaning up the directory.\n     *\n     * The `encoding` option sets the encoding for the `path` while opening the\n     * directory and subsequent read operations.\n     *\n     * Example using async iteration:\n     *\n     * ```js\n     * import { opendir } from 'node:fs/promises';\n     *\n     * try {\n     *   const dir = await opendir('./');\n     *   for await (const dirent of dir)\n     *     console.log(dirent.name);\n     * } catch (err) {\n     *   console.error(err);\n     * }\n     * ```\n     *\n     * When using the async iterator, the `fs.Dir` object will be automatically\n     * closed after the iterator exits.\n     * @since v12.12.0\n     * @return Fulfills with an {fs.Dir}.\n     */\n    function opendir(path: PathLike, options?: OpenDirOptions): Promise<Dir>;\n    /**\n     * Returns an async iterator that watches for changes on `filename`, where `filename`is either a file or a directory.\n     *\n     * ```js\n     * import { watch } from 'node:fs/promises';\n     *\n     * const ac = new AbortController();\n     * const { signal } = ac;\n     * setTimeout(() => ac.abort(), 10000);\n     *\n     * (async () => {\n     *   try {\n     *     const watcher = watch(__filename, { signal });\n     *     for await (const event of watcher)\n     *       console.log(event);\n     *   } catch (err) {\n     *     if (err.name === 'AbortError')\n     *       return;\n     *     throw err;\n     *   }\n     * })();\n     * ```\n     *\n     * On most platforms, `'rename'` is emitted whenever a filename appears or\n     * disappears in the directory.\n     *\n     * All the `caveats` for `fs.watch()` also apply to `fsPromises.watch()`.\n     * @since v15.9.0, v14.18.0\n     * @return of objects with the properties:\n     */\n    function watch(\n        filename: PathLike,\n        options:\n            | (WatchOptions & {\n                encoding: \"buffer\";\n            })\n            | \"buffer\",\n    ): AsyncIterable<FileChangeInfo<Buffer>>;\n    /**\n     * Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.\n     * @param filename A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\n     * @param options Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.\n     * If `encoding` is not supplied, the default of `'utf8'` is used.\n     * If `persistent` is not supplied, the default of `true` is used.\n     * If `recursive` is not supplied, the default of `false` is used.\n     */\n    function watch(filename: PathLike, options?: WatchOptions | BufferEncoding): AsyncIterable<FileChangeInfo<string>>;\n    /**\n     * Watch for changes on `filename`, where `filename` is either a file or a directory, returning an `FSWatcher`.\n     * @param filename A path to a file or directory. If a URL is provided, it must use the `file:` protocol.\n     * @param options Either the encoding for the filename provided to the listener, or an object optionally specifying encoding, persistent, and recursive options.\n     * If `encoding` is not supplied, the default of `'utf8'` is used.\n     * If `persistent` is not supplied, the default of `true` is used.\n     * If `recursive` is not supplied, the default of `false` is used.\n     */\n    function watch(\n        filename: PathLike,\n        options: WatchOptions | string,\n    ): AsyncIterable<FileChangeInfo<string>> | AsyncIterable<FileChangeInfo<Buffer>>;\n    /**\n     * Asynchronously copies the entire directory structure from `src` to `dest`,\n     * including subdirectories and files.\n     *\n     * When copying a directory to another directory, globs are not supported and\n     * behavior is similar to `cp dir1/ dir2/`.\n     * @since v16.7.0\n     * @experimental\n     * @param src source path to copy.\n     * @param dest destination path to copy to.\n     * @return Fulfills with `undefined` upon success.\n     */\n    function cp(source: string | URL, destination: string | URL, opts?: CopyOptions): Promise<void>;\n    /**\n     * Retrieves the files matching the specified pattern.\n     */\n    function glob(pattern: string | string[]): NodeJS.AsyncIterator<string>;\n    function glob(\n        pattern: string | string[],\n        opt: GlobOptionsWithFileTypes,\n    ): NodeJS.AsyncIterator<Dirent>;\n    function glob(\n        pattern: string | string[],\n        opt: GlobOptionsWithoutFileTypes,\n    ): NodeJS.AsyncIterator<string>;\n    function glob(\n        pattern: string | string[],\n        opt: GlobOptions,\n    ): NodeJS.AsyncIterator<Dirent | string>;\n}\ndeclare module \"node:fs/promises\" {\n    export * from \"fs/promises\";\n}\n",
  '@types/node/globals.d.ts':
    'export {}; // Make this a module\n\n// #region Fetch and friends\n// Conditional type aliases, used at the end of this file.\n// Will either be empty if lib.dom (or lib.webworker) is included, or the undici version otherwise.\ntype _Request = typeof globalThis extends { onmessage: any } ? {} : import("undici-types").Request;\ntype _Response = typeof globalThis extends { onmessage: any } ? {} : import("undici-types").Response;\ntype _FormData = typeof globalThis extends { onmessage: any } ? {} : import("undici-types").FormData;\ntype _Headers = typeof globalThis extends { onmessage: any } ? {} : import("undici-types").Headers;\ntype _MessageEvent = typeof globalThis extends { onmessage: any } ? {} : import("undici-types").MessageEvent;\ntype _RequestInit = typeof globalThis extends { onmessage: any } ? {}\n    : import("undici-types").RequestInit;\ntype _ResponseInit = typeof globalThis extends { onmessage: any } ? {}\n    : import("undici-types").ResponseInit;\ntype _WebSocket = typeof globalThis extends { onmessage: any } ? {} : import("undici-types").WebSocket;\ntype _EventSource = typeof globalThis extends { onmessage: any } ? {} : import("undici-types").EventSource;\n// #endregion Fetch and friends\n\n// Conditional type definitions for webstorage interface, which conflicts with lib.dom otherwise.\ntype _Storage = typeof globalThis extends { onabort: any } ? {} : {\n    readonly length: number;\n    clear(): void;\n    getItem(key: string): string | null;\n    key(index: number): string | null;\n    removeItem(key: string): void;\n    setItem(key: string, value: string): void;\n    [key: string]: any;\n};\n\n// #region DOMException\ntype _DOMException = typeof globalThis extends { onmessage: any } ? {} : NodeDOMException;\ninterface NodeDOMException extends Error {\n    readonly code: number;\n    readonly message: string;\n    readonly name: string;\n    readonly INDEX_SIZE_ERR: 1;\n    readonly DOMSTRING_SIZE_ERR: 2;\n    readonly HIERARCHY_REQUEST_ERR: 3;\n    readonly WRONG_DOCUMENT_ERR: 4;\n    readonly INVALID_CHARACTER_ERR: 5;\n    readonly NO_DATA_ALLOWED_ERR: 6;\n    readonly NO_MODIFICATION_ALLOWED_ERR: 7;\n    readonly NOT_FOUND_ERR: 8;\n    readonly NOT_SUPPORTED_ERR: 9;\n    readonly INUSE_ATTRIBUTE_ERR: 10;\n    readonly INVALID_STATE_ERR: 11;\n    readonly SYNTAX_ERR: 12;\n    readonly INVALID_MODIFICATION_ERR: 13;\n    readonly NAMESPACE_ERR: 14;\n    readonly INVALID_ACCESS_ERR: 15;\n    readonly VALIDATION_ERR: 16;\n    readonly TYPE_MISMATCH_ERR: 17;\n    readonly SECURITY_ERR: 18;\n    readonly NETWORK_ERR: 19;\n    readonly ABORT_ERR: 20;\n    readonly URL_MISMATCH_ERR: 21;\n    readonly QUOTA_EXCEEDED_ERR: 22;\n    readonly TIMEOUT_ERR: 23;\n    readonly INVALID_NODE_TYPE_ERR: 24;\n    readonly DATA_CLONE_ERR: 25;\n}\ninterface NodeDOMExceptionConstructor {\n    prototype: DOMException;\n    new(message?: string, nameOrOptions?: string | { name?: string; cause?: unknown }): DOMException;\n    readonly INDEX_SIZE_ERR: 1;\n    readonly DOMSTRING_SIZE_ERR: 2;\n    readonly HIERARCHY_REQUEST_ERR: 3;\n    readonly WRONG_DOCUMENT_ERR: 4;\n    readonly INVALID_CHARACTER_ERR: 5;\n    readonly NO_DATA_ALLOWED_ERR: 6;\n    readonly NO_MODIFICATION_ALLOWED_ERR: 7;\n    readonly NOT_FOUND_ERR: 8;\n    readonly NOT_SUPPORTED_ERR: 9;\n    readonly INUSE_ATTRIBUTE_ERR: 10;\n    readonly INVALID_STATE_ERR: 11;\n    readonly SYNTAX_ERR: 12;\n    readonly INVALID_MODIFICATION_ERR: 13;\n    readonly NAMESPACE_ERR: 14;\n    readonly INVALID_ACCESS_ERR: 15;\n    readonly VALIDATION_ERR: 16;\n    readonly TYPE_MISMATCH_ERR: 17;\n    readonly SECURITY_ERR: 18;\n    readonly NETWORK_ERR: 19;\n    readonly ABORT_ERR: 20;\n    readonly URL_MISMATCH_ERR: 21;\n    readonly QUOTA_EXCEEDED_ERR: 22;\n    readonly TIMEOUT_ERR: 23;\n    readonly INVALID_NODE_TYPE_ERR: 24;\n    readonly DATA_CLONE_ERR: 25;\n}\n// #endregion DOMException\n\ndeclare global {\n    var global: typeof globalThis;\n\n    var process: NodeJS.Process;\n    var console: Console;\n\n    interface ErrorConstructor {\n        /**\n         * Creates a `.stack` property on `targetObject`, which when accessed returns\n         * a string representing the location in the code at which\n         * `Error.captureStackTrace()` was called.\n         *\n         * ```js\n         * const myObject = {};\n         * Error.captureStackTrace(myObject);\n         * myObject.stack;  // Similar to `new Error().stack`\n         * ```\n         *\n         * The first line of the trace will be prefixed with\n         * `${myObject.name}: ${myObject.message}`.\n         *\n         * The optional `constructorOpt` argument accepts a function. If given, all frames\n         * above `constructorOpt`, including `constructorOpt`, will be omitted from the\n         * generated stack trace.\n         *\n         * The `constructorOpt` argument is useful for hiding implementation\n         * details of error generation from the user. For instance:\n         *\n         * ```js\n         * function a() {\n         *   b();\n         * }\n         *\n         * function b() {\n         *   c();\n         * }\n         *\n         * function c() {\n         *   // Create an error without stack trace to avoid calculating the stack trace twice.\n         *   const { stackTraceLimit } = Error;\n         *   Error.stackTraceLimit = 0;\n         *   const error = new Error();\n         *   Error.stackTraceLimit = stackTraceLimit;\n         *\n         *   // Capture the stack trace above function b\n         *   Error.captureStackTrace(error, b); // Neither function c, nor b is included in the stack trace\n         *   throw error;\n         * }\n         *\n         * a();\n         * ```\n         */\n        captureStackTrace(targetObject: object, constructorOpt?: Function): void;\n        /**\n         * @see https://v8.dev/docs/stack-trace-api#customizing-stack-traces\n         */\n        prepareStackTrace(err: Error, stackTraces: NodeJS.CallSite[]): any;\n        /**\n         * The `Error.stackTraceLimit` property specifies the number of stack frames\n         * collected by a stack trace (whether generated by `new Error().stack` or\n         * `Error.captureStackTrace(obj)`).\n         *\n         * The default value is `10` but may be set to any valid JavaScript number. Changes\n         * will affect any stack trace captured _after_ the value has been changed.\n         *\n         * If set to a non-number value, or set to a negative number, stack traces will\n         * not capture any frames.\n         */\n        stackTraceLimit: number;\n    }\n\n    /**\n     * Enable this API with the `--expose-gc` CLI flag.\n     */\n    var gc: NodeJS.GCFunction | undefined;\n\n    namespace NodeJS {\n        interface CallSite {\n            getColumnNumber(): number | null;\n            getEnclosingColumnNumber(): number | null;\n            getEnclosingLineNumber(): number | null;\n            getEvalOrigin(): string | undefined;\n            getFileName(): string | null;\n            getFunction(): Function | undefined;\n            getFunctionName(): string | null;\n            getLineNumber(): number | null;\n            getMethodName(): string | null;\n            getPosition(): number;\n            getPromiseIndex(): number | null;\n            getScriptHash(): string;\n            getScriptNameOrSourceURL(): string | null;\n            getThis(): unknown;\n            getTypeName(): string | null;\n            isAsync(): boolean;\n            isConstructor(): boolean;\n            isEval(): boolean;\n            isNative(): boolean;\n            isPromiseAll(): boolean;\n            isToplevel(): boolean;\n        }\n\n        interface ErrnoException extends Error {\n            errno?: number | undefined;\n            code?: string | undefined;\n            path?: string | undefined;\n            syscall?: string | undefined;\n        }\n\n        interface ReadableStream extends EventEmitter {\n            readable: boolean;\n            read(size?: number): string | Buffer;\n            setEncoding(encoding: BufferEncoding): this;\n            pause(): this;\n            resume(): this;\n            isPaused(): boolean;\n            pipe<T extends WritableStream>(destination: T, options?: { end?: boolean | undefined }): T;\n            unpipe(destination?: WritableStream): this;\n            unshift(chunk: string | Uint8Array, encoding?: BufferEncoding): void;\n            wrap(oldStream: ReadableStream): this;\n            [Symbol.asyncIterator](): AsyncIterableIterator<string | Buffer>;\n        }\n\n        interface WritableStream extends EventEmitter {\n            writable: boolean;\n            write(buffer: Uint8Array | string, cb?: (err?: Error | null) => void): boolean;\n            write(str: string, encoding?: BufferEncoding, cb?: (err?: Error | null) => void): boolean;\n            end(cb?: () => void): this;\n            end(data: string | Uint8Array, cb?: () => void): this;\n            end(str: string, encoding?: BufferEncoding, cb?: () => void): this;\n        }\n\n        interface ReadWriteStream extends ReadableStream, WritableStream {}\n\n        interface RefCounted {\n            ref(): this;\n            unref(): this;\n        }\n\n        interface Dict<T> {\n            [key: string]: T | undefined;\n        }\n\n        interface ReadOnlyDict<T> {\n            readonly [key: string]: T | undefined;\n        }\n\n        interface GCFunction {\n            (minor?: boolean): void;\n            (options: NodeJS.GCOptions & { execution: "async" }): Promise<void>;\n            (options: NodeJS.GCOptions): void;\n        }\n\n        interface GCOptions {\n            execution?: "sync" | "async" | undefined;\n            flavor?: "regular" | "last-resort" | undefined;\n            type?: "major-snapshot" | "major" | "minor" | undefined;\n            filename?: string | undefined;\n        }\n\n        /** An iterable iterator returned by the Node.js API. */\n        // Default TReturn/TNext in v22 is `any`, for compatibility with the previously-used IterableIterator.\n        interface Iterator<T, TReturn = any, TNext = any> extends IteratorObject<T, TReturn, TNext> {\n            [Symbol.iterator](): NodeJS.Iterator<T, TReturn, TNext>;\n        }\n\n        /** An async iterable iterator returned by the Node.js API. */\n        // Default TReturn/TNext in v22 is `any`, for compatibility with the previously-used AsyncIterableIterator.\n        interface AsyncIterator<T, TReturn = any, TNext = any> extends AsyncIteratorObject<T, TReturn, TNext> {\n            [Symbol.asyncIterator](): NodeJS.AsyncIterator<T, TReturn, TNext>;\n        }\n    }\n\n    // Global DOM types\n\n    interface DOMException extends _DOMException {}\n    var DOMException: typeof globalThis extends { onmessage: any; DOMException: infer T } ? T\n        : NodeDOMExceptionConstructor;\n\n    // #region AbortController\n    interface AbortController {\n        readonly signal: AbortSignal;\n        abort(reason?: any): void;\n    }\n    var AbortController: typeof globalThis extends { onmessage: any; AbortController: infer T } ? T\n        : {\n            prototype: AbortController;\n            new(): AbortController;\n        };\n\n    interface AbortSignal extends EventTarget {\n        readonly aborted: boolean;\n        onabort: ((this: AbortSignal, ev: Event) => any) | null;\n        readonly reason: any;\n        throwIfAborted(): void;\n    }\n    var AbortSignal: typeof globalThis extends { onmessage: any; AbortSignal: infer T } ? T\n        : {\n            prototype: AbortSignal;\n            new(): AbortSignal;\n            abort(reason?: any): AbortSignal;\n            any(signals: AbortSignal[]): AbortSignal;\n            timeout(milliseconds: number): AbortSignal;\n        };\n    // #endregion AbortController\n\n    // #region Storage\n    interface Storage extends _Storage {}\n    // Conditional on `onabort` rather than `onmessage`, in order to exclude lib.webworker\n    var Storage: typeof globalThis extends { onabort: any; Storage: infer T } ? T\n        : {\n            prototype: Storage;\n            new(): Storage;\n        };\n\n    var localStorage: Storage;\n    var sessionStorage: Storage;\n    // #endregion Storage\n\n    // #region fetch\n    interface RequestInit extends _RequestInit {}\n\n    function fetch(\n        input: string | URL | globalThis.Request,\n        init?: RequestInit,\n    ): Promise<Response>;\n\n    interface Request extends _Request {}\n    var Request: typeof globalThis extends {\n        onmessage: any;\n        Request: infer T;\n    } ? T\n        : typeof import("undici-types").Request;\n\n    interface ResponseInit extends _ResponseInit {}\n\n    interface Response extends _Response {}\n    var Response: typeof globalThis extends {\n        onmessage: any;\n        Response: infer T;\n    } ? T\n        : typeof import("undici-types").Response;\n\n    interface FormData extends _FormData {}\n    var FormData: typeof globalThis extends {\n        onmessage: any;\n        FormData: infer T;\n    } ? T\n        : typeof import("undici-types").FormData;\n\n    interface Headers extends _Headers {}\n    var Headers: typeof globalThis extends {\n        onmessage: any;\n        Headers: infer T;\n    } ? T\n        : typeof import("undici-types").Headers;\n\n    interface MessageEvent extends _MessageEvent {}\n    var MessageEvent: typeof globalThis extends {\n        onmessage: any;\n        MessageEvent: infer T;\n    } ? T\n        : typeof import("undici-types").MessageEvent;\n\n    interface WebSocket extends _WebSocket {}\n    var WebSocket: typeof globalThis extends { onmessage: any; WebSocket: infer T } ? T\n        : typeof import("undici-types").WebSocket;\n\n    interface EventSource extends _EventSource {}\n    var EventSource: typeof globalThis extends { onmessage: any; EventSource: infer T } ? T\n        : typeof import("undici-types").EventSource;\n    // #endregion fetch\n}\n',
  '@types/node/globals.typedarray.d.ts':
    'export {}; // Make this a module\n\ndeclare global {\n    namespace NodeJS {\n        type TypedArray<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> =\n            | Uint8Array<TArrayBuffer>\n            | Uint8ClampedArray<TArrayBuffer>\n            | Uint16Array<TArrayBuffer>\n            | Uint32Array<TArrayBuffer>\n            | Int8Array<TArrayBuffer>\n            | Int16Array<TArrayBuffer>\n            | Int32Array<TArrayBuffer>\n            | BigUint64Array<TArrayBuffer>\n            | BigInt64Array<TArrayBuffer>\n            | Float32Array<TArrayBuffer>\n            | Float64Array<TArrayBuffer>;\n        type ArrayBufferView<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> =\n            | TypedArray<TArrayBuffer>\n            | DataView<TArrayBuffer>;\n    }\n}\n',
  '@types/node/http.d.ts':
    "/**\n * To use the HTTP server and client one must import the `node:http` module.\n *\n * The HTTP interfaces in Node.js are designed to support many features\n * of the protocol which have been traditionally difficult to use.\n * In particular, large, possibly chunk-encoded, messages. The interface is\n * careful to never buffer entire requests or responses, so the\n * user is able to stream data.\n *\n * HTTP message headers are represented by an object like this:\n *\n * ```json\n * { \"content-length\": \"123\",\n *   \"content-type\": \"text/plain\",\n *   \"connection\": \"keep-alive\",\n *   \"host\": \"example.com\",\n *   \"accept\": \"*\" }\n * ```\n *\n * Keys are lowercased. Values are not modified.\n *\n * In order to support the full spectrum of possible HTTP applications, the Node.js\n * HTTP API is very low-level. It deals with stream handling and message\n * parsing only. It parses a message into headers and body but it does not\n * parse the actual headers or the body.\n *\n * See `message.headers` for details on how duplicate headers are handled.\n *\n * The raw headers as they were received are retained in the `rawHeaders` property, which is an array of `[key, value, key2, value2, ...]`. For\n * example, the previous message header object might have a `rawHeaders` list like the following:\n *\n * ```js\n * [ 'ConTent-Length', '123456',\n *   'content-LENGTH', '123',\n *   'content-type', 'text/plain',\n *   'CONNECTION', 'keep-alive',\n *   'Host', 'example.com',\n *   'accepT', '*' ]\n * ```\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/http.js)\n */\ndeclare module \"http\" {\n    import * as stream from \"node:stream\";\n    import { URL } from \"node:url\";\n    import { LookupOptions } from \"node:dns\";\n    import { EventEmitter } from \"node:events\";\n    import { LookupFunction, Server as NetServer, Socket, TcpSocketConnectOpts } from \"node:net\";\n    // incoming headers will never contain number\n    interface IncomingHttpHeaders extends NodeJS.Dict<string | string[]> {\n        accept?: string | undefined;\n        \"accept-encoding\"?: string | undefined;\n        \"accept-language\"?: string | undefined;\n        \"accept-patch\"?: string | undefined;\n        \"accept-ranges\"?: string | undefined;\n        \"access-control-allow-credentials\"?: string | undefined;\n        \"access-control-allow-headers\"?: string | undefined;\n        \"access-control-allow-methods\"?: string | undefined;\n        \"access-control-allow-origin\"?: string | undefined;\n        \"access-control-expose-headers\"?: string | undefined;\n        \"access-control-max-age\"?: string | undefined;\n        \"access-control-request-headers\"?: string | undefined;\n        \"access-control-request-method\"?: string | undefined;\n        age?: string | undefined;\n        allow?: string | undefined;\n        \"alt-svc\"?: string | undefined;\n        authorization?: string | undefined;\n        \"cache-control\"?: string | undefined;\n        connection?: string | undefined;\n        \"content-disposition\"?: string | undefined;\n        \"content-encoding\"?: string | undefined;\n        \"content-language\"?: string | undefined;\n        \"content-length\"?: string | undefined;\n        \"content-location\"?: string | undefined;\n        \"content-range\"?: string | undefined;\n        \"content-type\"?: string | undefined;\n        cookie?: string | undefined;\n        date?: string | undefined;\n        etag?: string | undefined;\n        expect?: string | undefined;\n        expires?: string | undefined;\n        forwarded?: string | undefined;\n        from?: string | undefined;\n        host?: string | undefined;\n        \"if-match\"?: string | undefined;\n        \"if-modified-since\"?: string | undefined;\n        \"if-none-match\"?: string | undefined;\n        \"if-unmodified-since\"?: string | undefined;\n        \"last-modified\"?: string | undefined;\n        location?: string | undefined;\n        origin?: string | undefined;\n        pragma?: string | undefined;\n        \"proxy-authenticate\"?: string | undefined;\n        \"proxy-authorization\"?: string | undefined;\n        \"public-key-pins\"?: string | undefined;\n        range?: string | undefined;\n        referer?: string | undefined;\n        \"retry-after\"?: string | undefined;\n        \"sec-fetch-site\"?: string | undefined;\n        \"sec-fetch-mode\"?: string | undefined;\n        \"sec-fetch-user\"?: string | undefined;\n        \"sec-fetch-dest\"?: string | undefined;\n        \"sec-websocket-accept\"?: string | undefined;\n        \"sec-websocket-extensions\"?: string | undefined;\n        \"sec-websocket-key\"?: string | undefined;\n        \"sec-websocket-protocol\"?: string | undefined;\n        \"sec-websocket-version\"?: string | undefined;\n        \"set-cookie\"?: string[] | undefined;\n        \"strict-transport-security\"?: string | undefined;\n        tk?: string | undefined;\n        trailer?: string | undefined;\n        \"transfer-encoding\"?: string | undefined;\n        upgrade?: string | undefined;\n        \"user-agent\"?: string | undefined;\n        vary?: string | undefined;\n        via?: string | undefined;\n        warning?: string | undefined;\n        \"www-authenticate\"?: string | undefined;\n    }\n    // outgoing headers allows numbers (as they are converted internally to strings)\n    type OutgoingHttpHeader = number | string | string[];\n    interface OutgoingHttpHeaders extends NodeJS.Dict<OutgoingHttpHeader> {\n        accept?: string | string[] | undefined;\n        \"accept-charset\"?: string | string[] | undefined;\n        \"accept-encoding\"?: string | string[] | undefined;\n        \"accept-language\"?: string | string[] | undefined;\n        \"accept-ranges\"?: string | undefined;\n        \"access-control-allow-credentials\"?: string | undefined;\n        \"access-control-allow-headers\"?: string | undefined;\n        \"access-control-allow-methods\"?: string | undefined;\n        \"access-control-allow-origin\"?: string | undefined;\n        \"access-control-expose-headers\"?: string | undefined;\n        \"access-control-max-age\"?: string | undefined;\n        \"access-control-request-headers\"?: string | undefined;\n        \"access-control-request-method\"?: string | undefined;\n        age?: string | undefined;\n        allow?: string | undefined;\n        authorization?: string | undefined;\n        \"cache-control\"?: string | undefined;\n        \"cdn-cache-control\"?: string | undefined;\n        connection?: string | string[] | undefined;\n        \"content-disposition\"?: string | undefined;\n        \"content-encoding\"?: string | undefined;\n        \"content-language\"?: string | undefined;\n        \"content-length\"?: string | number | undefined;\n        \"content-location\"?: string | undefined;\n        \"content-range\"?: string | undefined;\n        \"content-security-policy\"?: string | undefined;\n        \"content-security-policy-report-only\"?: string | undefined;\n        \"content-type\"?: string | undefined;\n        cookie?: string | string[] | undefined;\n        dav?: string | string[] | undefined;\n        dnt?: string | undefined;\n        date?: string | undefined;\n        etag?: string | undefined;\n        expect?: string | undefined;\n        expires?: string | undefined;\n        forwarded?: string | undefined;\n        from?: string | undefined;\n        host?: string | undefined;\n        \"if-match\"?: string | undefined;\n        \"if-modified-since\"?: string | undefined;\n        \"if-none-match\"?: string | undefined;\n        \"if-range\"?: string | undefined;\n        \"if-unmodified-since\"?: string | undefined;\n        \"last-modified\"?: string | undefined;\n        link?: string | string[] | undefined;\n        location?: string | undefined;\n        \"max-forwards\"?: string | undefined;\n        origin?: string | undefined;\n        pragma?: string | string[] | undefined;\n        \"proxy-authenticate\"?: string | string[] | undefined;\n        \"proxy-authorization\"?: string | undefined;\n        \"public-key-pins\"?: string | undefined;\n        \"public-key-pins-report-only\"?: string | undefined;\n        range?: string | undefined;\n        referer?: string | undefined;\n        \"referrer-policy\"?: string | undefined;\n        refresh?: string | undefined;\n        \"retry-after\"?: string | undefined;\n        \"sec-websocket-accept\"?: string | undefined;\n        \"sec-websocket-extensions\"?: string | string[] | undefined;\n        \"sec-websocket-key\"?: string | undefined;\n        \"sec-websocket-protocol\"?: string | string[] | undefined;\n        \"sec-websocket-version\"?: string | undefined;\n        server?: string | undefined;\n        \"set-cookie\"?: string | string[] | undefined;\n        \"strict-transport-security\"?: string | undefined;\n        te?: string | undefined;\n        trailer?: string | undefined;\n        \"transfer-encoding\"?: string | undefined;\n        \"user-agent\"?: string | undefined;\n        upgrade?: string | undefined;\n        \"upgrade-insecure-requests\"?: string | undefined;\n        vary?: string | undefined;\n        via?: string | string[] | undefined;\n        warning?: string | undefined;\n        \"www-authenticate\"?: string | string[] | undefined;\n        \"x-content-type-options\"?: string | undefined;\n        \"x-dns-prefetch-control\"?: string | undefined;\n        \"x-frame-options\"?: string | undefined;\n        \"x-xss-protection\"?: string | undefined;\n    }\n    interface ClientRequestArgs {\n        _defaultAgent?: Agent | undefined;\n        agent?: Agent | boolean | undefined;\n        auth?: string | null | undefined;\n        createConnection?:\n            | ((\n                options: ClientRequestArgs,\n                oncreate: (err: Error | null, socket: stream.Duplex) => void,\n            ) => stream.Duplex | null | undefined)\n            | undefined;\n        defaultPort?: number | string | undefined;\n        family?: number | undefined;\n        headers?: OutgoingHttpHeaders | readonly string[] | undefined;\n        hints?: LookupOptions[\"hints\"];\n        host?: string | null | undefined;\n        hostname?: string | null | undefined;\n        insecureHTTPParser?: boolean | undefined;\n        localAddress?: string | undefined;\n        localPort?: number | undefined;\n        lookup?: LookupFunction | undefined;\n        /**\n         * @default 16384\n         */\n        maxHeaderSize?: number | undefined;\n        method?: string | undefined;\n        path?: string | null | undefined;\n        port?: number | string | null | undefined;\n        protocol?: string | null | undefined;\n        setDefaultHeaders?: boolean | undefined;\n        setHost?: boolean | undefined;\n        signal?: AbortSignal | undefined;\n        socketPath?: string | undefined;\n        timeout?: number | undefined;\n        uniqueHeaders?: Array<string | string[]> | undefined;\n        joinDuplicateHeaders?: boolean;\n    }\n    interface ServerOptions<\n        Request extends typeof IncomingMessage = typeof IncomingMessage,\n        Response extends typeof ServerResponse<InstanceType<Request>> = typeof ServerResponse,\n    > {\n        /**\n         * Specifies the `IncomingMessage` class to be used. Useful for extending the original `IncomingMessage`.\n         */\n        IncomingMessage?: Request | undefined;\n        /**\n         * Specifies the `ServerResponse` class to be used. Useful for extending the original `ServerResponse`.\n         */\n        ServerResponse?: Response | undefined;\n        /**\n         * Sets the timeout value in milliseconds for receiving the entire request from the client.\n         * @see Server.requestTimeout for more information.\n         * @default 300000\n         * @since v18.0.0\n         */\n        requestTimeout?: number | undefined;\n        /**\n         * It joins the field line values of multiple headers in a request with `, ` instead of discarding the duplicates.\n         * @default false\n         * @since v18.14.0\n         */\n        joinDuplicateHeaders?: boolean;\n        /**\n         * The number of milliseconds of inactivity a server needs to wait for additional incoming data,\n         * after it has finished writing the last response, before a socket will be destroyed.\n         * @see Server.keepAliveTimeout for more information.\n         * @default 5000\n         * @since v18.0.0\n         */\n        keepAliveTimeout?: number | undefined;\n        /**\n         * Sets the interval value in milliseconds to check for request and headers timeout in incomplete requests.\n         * @default 30000\n         */\n        connectionsCheckingInterval?: number | undefined;\n        /**\n         * Sets the timeout value in milliseconds for receiving the complete HTTP headers from the client.\n         * See {@link Server.headersTimeout} for more information.\n         * @default 60000\n         * @since 18.0.0\n         */\n        headersTimeout?: number | undefined;\n        /**\n         * Optionally overrides all `socket`s' `readableHighWaterMark` and `writableHighWaterMark`.\n         * This affects `highWaterMark` property of both `IncomingMessage` and `ServerResponse`.\n         * Default: @see stream.getDefaultHighWaterMark().\n         * @since v20.1.0\n         */\n        highWaterMark?: number | undefined;\n        /**\n         * Use an insecure HTTP parser that accepts invalid HTTP headers when `true`.\n         * Using the insecure parser should be avoided.\n         * See --insecure-http-parser for more information.\n         * @default false\n         */\n        insecureHTTPParser?: boolean | undefined;\n        /**\n         * Optionally overrides the value of `--max-http-header-size` for requests received by\n         * this server, i.e. the maximum length of request headers in bytes.\n         * @default 16384\n         * @since v13.3.0\n         */\n        maxHeaderSize?: number | undefined;\n        /**\n         * If set to `true`, it disables the use of Nagle's algorithm immediately after a new incoming connection is received.\n         * @default true\n         * @since v16.5.0\n         */\n        noDelay?: boolean | undefined;\n        /**\n         * If set to `true`, it forces the server to respond with a 400 (Bad Request) status code\n         * to any HTTP/1.1 request message that lacks a Host header (as mandated by the specification).\n         * @default true\n         * @since 20.0.0\n         */\n        requireHostHeader?: boolean | undefined;\n        /**\n         * If set to `true`, it enables keep-alive functionality on the socket immediately after a new incoming connection is received,\n         * similarly on what is done in `socket.setKeepAlive([enable][, initialDelay])`.\n         * @default false\n         * @since v16.5.0\n         */\n        keepAlive?: boolean | undefined;\n        /**\n         * If set to a positive number, it sets the initial delay before the first keepalive probe is sent on an idle socket.\n         * @default 0\n         * @since v16.5.0\n         */\n        keepAliveInitialDelay?: number | undefined;\n        /**\n         * A list of response headers that should be sent only once.\n         * If the header's value is an array, the items will be joined using `; `.\n         */\n        uniqueHeaders?: Array<string | string[]> | undefined;\n        /**\n         * If set to `true`, an error is thrown when writing to an HTTP response which does not have a body.\n         * @default false\n         * @since v18.17.0, v20.2.0\n         */\n        rejectNonStandardBodyWrites?: boolean | undefined;\n    }\n    type RequestListener<\n        Request extends typeof IncomingMessage = typeof IncomingMessage,\n        Response extends typeof ServerResponse<InstanceType<Request>> = typeof ServerResponse,\n    > = (req: InstanceType<Request>, res: InstanceType<Response> & { req: InstanceType<Request> }) => void;\n    /**\n     * @since v0.1.17\n     */\n    class Server<\n        Request extends typeof IncomingMessage = typeof IncomingMessage,\n        Response extends typeof ServerResponse<InstanceType<Request>> = typeof ServerResponse,\n    > extends NetServer {\n        constructor(requestListener?: RequestListener<Request, Response>);\n        constructor(options: ServerOptions<Request, Response>, requestListener?: RequestListener<Request, Response>);\n        /**\n         * Sets the timeout value for sockets, and emits a `'timeout'` event on\n         * the Server object, passing the socket as an argument, if a timeout\n         * occurs.\n         *\n         * If there is a `'timeout'` event listener on the Server object, then it\n         * will be called with the timed-out socket as an argument.\n         *\n         * By default, the Server does not timeout sockets. However, if a callback\n         * is assigned to the Server's `'timeout'` event, timeouts must be handled\n         * explicitly.\n         * @since v0.9.12\n         * @param [msecs=0 (no timeout)]\n         */\n        setTimeout(msecs?: number, callback?: (socket: Socket) => void): this;\n        setTimeout(callback: (socket: Socket) => void): this;\n        /**\n         * Limits maximum incoming headers count. If set to 0, no limit will be applied.\n         * @since v0.7.0\n         */\n        maxHeadersCount: number | null;\n        /**\n         * The maximum number of requests socket can handle\n         * before closing keep alive connection.\n         *\n         * A value of `0` will disable the limit.\n         *\n         * When the limit is reached it will set the `Connection` header value to `close`,\n         * but will not actually close the connection, subsequent requests sent\n         * after the limit is reached will get `503 Service Unavailable` as a response.\n         * @since v16.10.0\n         */\n        maxRequestsPerSocket: number | null;\n        /**\n         * The number of milliseconds of inactivity before a socket is presumed\n         * to have timed out.\n         *\n         * A value of `0` will disable the timeout behavior on incoming connections.\n         *\n         * The socket timeout logic is set up on connection, so changing this\n         * value only affects new connections to the server, not any existing connections.\n         * @since v0.9.12\n         */\n        timeout: number;\n        /**\n         * Limit the amount of time the parser will wait to receive the complete HTTP\n         * headers.\n         *\n         * If the timeout expires, the server responds with status 408 without\n         * forwarding the request to the request listener and then closes the connection.\n         *\n         * It must be set to a non-zero value (e.g. 120 seconds) to protect against\n         * potential Denial-of-Service attacks in case the server is deployed without a\n         * reverse proxy in front.\n         * @since v11.3.0, v10.14.0\n         */\n        headersTimeout: number;\n        /**\n         * The number of milliseconds of inactivity a server needs to wait for additional\n         * incoming data, after it has finished writing the last response, before a socket\n         * will be destroyed. If the server receives new data before the keep-alive\n         * timeout has fired, it will reset the regular inactivity timeout, i.e., `server.timeout`.\n         *\n         * A value of `0` will disable the keep-alive timeout behavior on incoming\n         * connections.\n         * A value of `0` makes the http server behave similarly to Node.js versions prior\n         * to 8.0.0, which did not have a keep-alive timeout.\n         *\n         * The socket timeout logic is set up on connection, so changing this value only\n         * affects new connections to the server, not any existing connections.\n         * @since v8.0.0\n         */\n        keepAliveTimeout: number;\n        /**\n         * Sets the timeout value in milliseconds for receiving the entire request from\n         * the client.\n         *\n         * If the timeout expires, the server responds with status 408 without\n         * forwarding the request to the request listener and then closes the connection.\n         *\n         * It must be set to a non-zero value (e.g. 120 seconds) to protect against\n         * potential Denial-of-Service attacks in case the server is deployed without a\n         * reverse proxy in front.\n         * @since v14.11.0\n         */\n        requestTimeout: number;\n        /**\n         * Closes all connections connected to this server.\n         * @since v18.2.0\n         */\n        closeAllConnections(): void;\n        /**\n         * Closes all connections connected to this server which are not sending a request\n         * or waiting for a response.\n         * @since v18.2.0\n         */\n        closeIdleConnections(): void;\n        addListener(event: string, listener: (...args: any[]) => void): this;\n        addListener(event: \"close\", listener: () => void): this;\n        addListener(event: \"connection\", listener: (socket: Socket) => void): this;\n        addListener(event: \"error\", listener: (err: Error) => void): this;\n        addListener(event: \"listening\", listener: () => void): this;\n        addListener(event: \"checkContinue\", listener: RequestListener<Request, Response>): this;\n        addListener(event: \"checkExpectation\", listener: RequestListener<Request, Response>): this;\n        addListener(event: \"clientError\", listener: (err: Error, socket: stream.Duplex) => void): this;\n        addListener(\n            event: \"connect\",\n            listener: (req: InstanceType<Request>, socket: stream.Duplex, head: Buffer) => void,\n        ): this;\n        addListener(event: \"dropRequest\", listener: (req: InstanceType<Request>, socket: stream.Duplex) => void): this;\n        addListener(event: \"request\", listener: RequestListener<Request, Response>): this;\n        addListener(\n            event: \"upgrade\",\n            listener: (req: InstanceType<Request>, socket: stream.Duplex, head: Buffer) => void,\n        ): this;\n        emit(event: string, ...args: any[]): boolean;\n        emit(event: \"close\"): boolean;\n        emit(event: \"connection\", socket: Socket): boolean;\n        emit(event: \"error\", err: Error): boolean;\n        emit(event: \"listening\"): boolean;\n        emit(\n            event: \"checkContinue\",\n            req: InstanceType<Request>,\n            res: InstanceType<Response> & { req: InstanceType<Request> },\n        ): boolean;\n        emit(\n            event: \"checkExpectation\",\n            req: InstanceType<Request>,\n            res: InstanceType<Response> & { req: InstanceType<Request> },\n        ): boolean;\n        emit(event: \"clientError\", err: Error, socket: stream.Duplex): boolean;\n        emit(event: \"connect\", req: InstanceType<Request>, socket: stream.Duplex, head: Buffer): boolean;\n        emit(event: \"dropRequest\", req: InstanceType<Request>, socket: stream.Duplex): boolean;\n        emit(\n            event: \"request\",\n            req: InstanceType<Request>,\n            res: InstanceType<Response> & { req: InstanceType<Request> },\n        ): boolean;\n        emit(event: \"upgrade\", req: InstanceType<Request>, socket: stream.Duplex, head: Buffer): boolean;\n        on(event: string, listener: (...args: any[]) => void): this;\n        on(event: \"close\", listener: () => void): this;\n        on(event: \"connection\", listener: (socket: Socket) => void): this;\n        on(event: \"error\", listener: (err: Error) => void): this;\n        on(event: \"listening\", listener: () => void): this;\n        on(event: \"checkContinue\", listener: RequestListener<Request, Response>): this;\n        on(event: \"checkExpectation\", listener: RequestListener<Request, Response>): this;\n        on(event: \"clientError\", listener: (err: Error, socket: stream.Duplex) => void): this;\n        on(event: \"connect\", listener: (req: InstanceType<Request>, socket: stream.Duplex, head: Buffer) => void): this;\n        on(event: \"dropRequest\", listener: (req: InstanceType<Request>, socket: stream.Duplex) => void): this;\n        on(event: \"request\", listener: RequestListener<Request, Response>): this;\n        on(event: \"upgrade\", listener: (req: InstanceType<Request>, socket: stream.Duplex, head: Buffer) => void): this;\n        once(event: string, listener: (...args: any[]) => void): this;\n        once(event: \"close\", listener: () => void): this;\n        once(event: \"connection\", listener: (socket: Socket) => void): this;\n        once(event: \"error\", listener: (err: Error) => void): this;\n        once(event: \"listening\", listener: () => void): this;\n        once(event: \"checkContinue\", listener: RequestListener<Request, Response>): this;\n        once(event: \"checkExpectation\", listener: RequestListener<Request, Response>): this;\n        once(event: \"clientError\", listener: (err: Error, socket: stream.Duplex) => void): this;\n        once(\n            event: \"connect\",\n            listener: (req: InstanceType<Request>, socket: stream.Duplex, head: Buffer) => void,\n        ): this;\n        once(event: \"dropRequest\", listener: (req: InstanceType<Request>, socket: stream.Duplex) => void): this;\n        once(event: \"request\", listener: RequestListener<Request, Response>): this;\n        once(\n            event: \"upgrade\",\n            listener: (req: InstanceType<Request>, socket: stream.Duplex, head: Buffer) => void,\n        ): this;\n        prependListener(event: string, listener: (...args: any[]) => void): this;\n        prependListener(event: \"close\", listener: () => void): this;\n        prependListener(event: \"connection\", listener: (socket: Socket) => void): this;\n        prependListener(event: \"error\", listener: (err: Error) => void): this;\n        prependListener(event: \"listening\", listener: () => void): this;\n        prependListener(event: \"checkContinue\", listener: RequestListener<Request, Response>): this;\n        prependListener(event: \"checkExpectation\", listener: RequestListener<Request, Response>): this;\n        prependListener(event: \"clientError\", listener: (err: Error, socket: stream.Duplex) => void): this;\n        prependListener(\n            event: \"connect\",\n            listener: (req: InstanceType<Request>, socket: stream.Duplex, head: Buffer) => void,\n        ): this;\n        prependListener(\n            event: \"dropRequest\",\n            listener: (req: InstanceType<Request>, socket: stream.Duplex) => void,\n        ): this;\n        prependListener(event: \"request\", listener: RequestListener<Request, Response>): this;\n        prependListener(\n            event: \"upgrade\",\n            listener: (req: InstanceType<Request>, socket: stream.Duplex, head: Buffer) => void,\n        ): this;\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\n        prependOnceListener(event: \"close\", listener: () => void): this;\n        prependOnceListener(event: \"connection\", listener: (socket: Socket) => void): this;\n        prependOnceListener(event: \"error\", listener: (err: Error) => void): this;\n        prependOnceListener(event: \"listening\", listener: () => void): this;\n        prependOnceListener(event: \"checkContinue\", listener: RequestListener<Request, Response>): this;\n        prependOnceListener(event: \"checkExpectation\", listener: RequestListener<Request, Response>): this;\n        prependOnceListener(event: \"clientError\", listener: (err: Error, socket: stream.Duplex) => void): this;\n        prependOnceListener(\n            event: \"connect\",\n            listener: (req: InstanceType<Request>, socket: stream.Duplex, head: Buffer) => void,\n        ): this;\n        prependOnceListener(\n            event: \"dropRequest\",\n            listener: (req: InstanceType<Request>, socket: stream.Duplex) => void,\n        ): this;\n        prependOnceListener(event: \"request\", listener: RequestListener<Request, Response>): this;\n        prependOnceListener(\n            event: \"upgrade\",\n            listener: (req: InstanceType<Request>, socket: stream.Duplex, head: Buffer) => void,\n        ): this;\n    }\n    /**\n     * This class serves as the parent class of {@link ClientRequest} and {@link ServerResponse}. It is an abstract outgoing message from\n     * the perspective of the participants of an HTTP transaction.\n     * @since v0.1.17\n     */\n    class OutgoingMessage<Request extends IncomingMessage = IncomingMessage> extends stream.Writable {\n        readonly req: Request;\n        chunkedEncoding: boolean;\n        shouldKeepAlive: boolean;\n        useChunkedEncodingByDefault: boolean;\n        sendDate: boolean;\n        /**\n         * @deprecated Use `writableEnded` instead.\n         */\n        finished: boolean;\n        /**\n         * Read-only. `true` if the headers were sent, otherwise `false`.\n         * @since v0.9.3\n         */\n        readonly headersSent: boolean;\n        /**\n         * Alias of `outgoingMessage.socket`.\n         * @since v0.3.0\n         * @deprecated Since v15.12.0,v14.17.1 - Use `socket` instead.\n         */\n        readonly connection: Socket | null;\n        /**\n         * Reference to the underlying socket. Usually, users will not want to access\n         * this property.\n         *\n         * After calling `outgoingMessage.end()`, this property will be nulled.\n         * @since v0.3.0\n         */\n        readonly socket: Socket | null;\n        constructor();\n        /**\n         * Once a socket is associated with the message and is connected, `socket.setTimeout()` will be called with `msecs` as the first parameter.\n         * @since v0.9.12\n         * @param callback Optional function to be called when a timeout occurs. Same as binding to the `timeout` event.\n         */\n        setTimeout(msecs: number, callback?: () => void): this;\n        /**\n         * Sets a single header value. If the header already exists in the to-be-sent\n         * headers, its value will be replaced. Use an array of strings to send multiple\n         * headers with the same name.\n         * @since v0.4.0\n         * @param name Header name\n         * @param value Header value\n         */\n        setHeader(name: string, value: number | string | readonly string[]): this;\n        /**\n         * Sets multiple header values for implicit headers. headers must be an instance of\n         * `Headers` or `Map`, if a header already exists in the to-be-sent headers, its\n         * value will be replaced.\n         *\n         * ```js\n         * const headers = new Headers({ foo: 'bar' });\n         * outgoingMessage.setHeaders(headers);\n         * ```\n         *\n         * or\n         *\n         * ```js\n         * const headers = new Map([['foo', 'bar']]);\n         * outgoingMessage.setHeaders(headers);\n         * ```\n         *\n         * When headers have been set with `outgoingMessage.setHeaders()`, they will be\n         * merged with any headers passed to `response.writeHead()`, with the headers passed\n         * to `response.writeHead()` given precedence.\n         *\n         * ```js\n         * // Returns content-type = text/plain\n         * const server = http.createServer((req, res) => {\n         *   const headers = new Headers({ 'Content-Type': 'text/html' });\n         *   res.setHeaders(headers);\n         *   res.writeHead(200, { 'Content-Type': 'text/plain' });\n         *   res.end('ok');\n         * });\n         * ```\n         *\n         * @since v19.6.0, v18.15.0\n         * @param name Header name\n         * @param value Header value\n         */\n        setHeaders(headers: Headers | Map<string, number | string | readonly string[]>): this;\n        /**\n         * Append a single header value to the header object.\n         *\n         * If the value is an array, this is equivalent to calling this method multiple\n         * times.\n         *\n         * If there were no previous values for the header, this is equivalent to calling `outgoingMessage.setHeader(name, value)`.\n         *\n         * Depending of the value of `options.uniqueHeaders` when the client request or the\n         * server were created, this will end up in the header being sent multiple times or\n         * a single time with values joined using `; `.\n         * @since v18.3.0, v16.17.0\n         * @param name Header name\n         * @param value Header value\n         */\n        appendHeader(name: string, value: string | readonly string[]): this;\n        /**\n         * Gets the value of the HTTP header with the given name. If that header is not\n         * set, the returned value will be `undefined`.\n         * @since v0.4.0\n         * @param name Name of header\n         */\n        getHeader(name: string): number | string | string[] | undefined;\n        /**\n         * Returns a shallow copy of the current outgoing headers. Since a shallow\n         * copy is used, array values may be mutated without additional calls to\n         * various header-related HTTP module methods. The keys of the returned\n         * object are the header names and the values are the respective header\n         * values. All header names are lowercase.\n         *\n         * The object returned by the `outgoingMessage.getHeaders()` method does\n         * not prototypically inherit from the JavaScript `Object`. This means that\n         * typical `Object` methods such as `obj.toString()`, `obj.hasOwnProperty()`,\n         * and others are not defined and will not work.\n         *\n         * ```js\n         * outgoingMessage.setHeader('Foo', 'bar');\n         * outgoingMessage.setHeader('Set-Cookie', ['foo=bar', 'bar=baz']);\n         *\n         * const headers = outgoingMessage.getHeaders();\n         * // headers === { foo: 'bar', 'set-cookie': ['foo=bar', 'bar=baz'] }\n         * ```\n         * @since v7.7.0\n         */\n        getHeaders(): OutgoingHttpHeaders;\n        /**\n         * Returns an array containing the unique names of the current outgoing headers.\n         * All names are lowercase.\n         * @since v7.7.0\n         */\n        getHeaderNames(): string[];\n        /**\n         * Returns `true` if the header identified by `name` is currently set in the\n         * outgoing headers. The header name is case-insensitive.\n         *\n         * ```js\n         * const hasContentType = outgoingMessage.hasHeader('content-type');\n         * ```\n         * @since v7.7.0\n         */\n        hasHeader(name: string): boolean;\n        /**\n         * Removes a header that is queued for implicit sending.\n         *\n         * ```js\n         * outgoingMessage.removeHeader('Content-Encoding');\n         * ```\n         * @since v0.4.0\n         * @param name Header name\n         */\n        removeHeader(name: string): void;\n        /**\n         * Adds HTTP trailers (headers but at the end of the message) to the message.\n         *\n         * Trailers will **only** be emitted if the message is chunked encoded. If not,\n         * the trailers will be silently discarded.\n         *\n         * HTTP requires the `Trailer` header to be sent to emit trailers,\n         * with a list of header field names in its value, e.g.\n         *\n         * ```js\n         * message.writeHead(200, { 'Content-Type': 'text/plain',\n         *                          'Trailer': 'Content-MD5' });\n         * message.write(fileData);\n         * message.addTrailers({ 'Content-MD5': '7895bf4b8828b55ceaf47747b4bca667' });\n         * message.end();\n         * ```\n         *\n         * Attempting to set a header field name or value that contains invalid characters\n         * will result in a `TypeError` being thrown.\n         * @since v0.3.0\n         */\n        addTrailers(headers: OutgoingHttpHeaders | ReadonlyArray<[string, string]>): void;\n        /**\n         * Flushes the message headers.\n         *\n         * For efficiency reason, Node.js normally buffers the message headers\n         * until `outgoingMessage.end()` is called or the first chunk of message data\n         * is written. It then tries to pack the headers and data into a single TCP\n         * packet.\n         *\n         * It is usually desired (it saves a TCP round-trip), but not when the first\n         * data is not sent until possibly much later. `outgoingMessage.flushHeaders()` bypasses the optimization and kickstarts the message.\n         * @since v1.6.0\n         */\n        flushHeaders(): void;\n    }\n    /**\n     * This object is created internally by an HTTP server, not by the user. It is\n     * passed as the second parameter to the `'request'` event.\n     * @since v0.1.17\n     */\n    class ServerResponse<Request extends IncomingMessage = IncomingMessage> extends OutgoingMessage<Request> {\n        /**\n         * When using implicit headers (not calling `response.writeHead()` explicitly),\n         * this property controls the status code that will be sent to the client when\n         * the headers get flushed.\n         *\n         * ```js\n         * response.statusCode = 404;\n         * ```\n         *\n         * After response header was sent to the client, this property indicates the\n         * status code which was sent out.\n         * @since v0.4.0\n         */\n        statusCode: number;\n        /**\n         * When using implicit headers (not calling `response.writeHead()` explicitly),\n         * this property controls the status message that will be sent to the client when\n         * the headers get flushed. If this is left as `undefined` then the standard\n         * message for the status code will be used.\n         *\n         * ```js\n         * response.statusMessage = 'Not found';\n         * ```\n         *\n         * After response header was sent to the client, this property indicates the\n         * status message which was sent out.\n         * @since v0.11.8\n         */\n        statusMessage: string;\n        /**\n         * If set to `true`, Node.js will check whether the `Content-Length` header value and the size of the body, in bytes, are equal.\n         * Mismatching the `Content-Length` header value will result\n         * in an `Error` being thrown, identified by `code:``'ERR_HTTP_CONTENT_LENGTH_MISMATCH'`.\n         * @since v18.10.0, v16.18.0\n         */\n        strictContentLength: boolean;\n        constructor(req: Request);\n        assignSocket(socket: Socket): void;\n        detachSocket(socket: Socket): void;\n        /**\n         * Sends an HTTP/1.1 100 Continue message to the client, indicating that\n         * the request body should be sent. See the `'checkContinue'` event on `Server`.\n         * @since v0.3.0\n         */\n        writeContinue(callback?: () => void): void;\n        /**\n         * Sends an HTTP/1.1 103 Early Hints message to the client with a Link header,\n         * indicating that the user agent can preload/preconnect the linked resources.\n         * The `hints` is an object containing the values of headers to be sent with\n         * early hints message. The optional `callback` argument will be called when\n         * the response message has been written.\n         *\n         * **Example**\n         *\n         * ```js\n         * const earlyHintsLink = '</styles.css>; rel=preload; as=style';\n         * response.writeEarlyHints({\n         *   'link': earlyHintsLink,\n         * });\n         *\n         * const earlyHintsLinks = [\n         *   '</styles.css>; rel=preload; as=style',\n         *   '</scripts.js>; rel=preload; as=script',\n         * ];\n         * response.writeEarlyHints({\n         *   'link': earlyHintsLinks,\n         *   'x-trace-id': 'id for diagnostics',\n         * });\n         *\n         * const earlyHintsCallback = () => console.log('early hints message sent');\n         * response.writeEarlyHints({\n         *   'link': earlyHintsLinks,\n         * }, earlyHintsCallback);\n         * ```\n         * @since v18.11.0\n         * @param hints An object containing the values of headers\n         * @param callback Will be called when the response message has been written\n         */\n        writeEarlyHints(hints: Record<string, string | string[]>, callback?: () => void): void;\n        /**\n         * Sends a response header to the request. The status code is a 3-digit HTTP\n         * status code, like `404`. The last argument, `headers`, are the response headers.\n         * Optionally one can give a human-readable `statusMessage` as the second\n         * argument.\n         *\n         * `headers` may be an `Array` where the keys and values are in the same list.\n         * It is _not_ a list of tuples. So, the even-numbered offsets are key values,\n         * and the odd-numbered offsets are the associated values. The array is in the same\n         * format as `request.rawHeaders`.\n         *\n         * Returns a reference to the `ServerResponse`, so that calls can be chained.\n         *\n         * ```js\n         * const body = 'hello world';\n         * response\n         *   .writeHead(200, {\n         *     'Content-Length': Buffer.byteLength(body),\n         *     'Content-Type': 'text/plain',\n         *   })\n         *   .end(body);\n         * ```\n         *\n         * This method must only be called once on a message and it must\n         * be called before `response.end()` is called.\n         *\n         * If `response.write()` or `response.end()` are called before calling\n         * this, the implicit/mutable headers will be calculated and call this function.\n         *\n         * When headers have been set with `response.setHeader()`, they will be merged\n         * with any headers passed to `response.writeHead()`, with the headers passed\n         * to `response.writeHead()` given precedence.\n         *\n         * If this method is called and `response.setHeader()` has not been called,\n         * it will directly write the supplied header values onto the network channel\n         * without caching internally, and the `response.getHeader()` on the header\n         * will not yield the expected result. If progressive population of headers is\n         * desired with potential future retrieval and modification, use `response.setHeader()` instead.\n         *\n         * ```js\n         * // Returns content-type = text/plain\n         * const server = http.createServer((req, res) => {\n         *   res.setHeader('Content-Type', 'text/html');\n         *   res.setHeader('X-Foo', 'bar');\n         *   res.writeHead(200, { 'Content-Type': 'text/plain' });\n         *   res.end('ok');\n         * });\n         * ```\n         *\n         * `Content-Length` is read in bytes, not characters. Use `Buffer.byteLength()` to determine the length of the body in bytes. Node.js\n         * will check whether `Content-Length` and the length of the body which has\n         * been transmitted are equal or not.\n         *\n         * Attempting to set a header field name or value that contains invalid characters\n         * will result in a \\[`Error`\\]\\[\\] being thrown.\n         * @since v0.1.30\n         */\n        writeHead(\n            statusCode: number,\n            statusMessage?: string,\n            headers?: OutgoingHttpHeaders | OutgoingHttpHeader[],\n        ): this;\n        writeHead(statusCode: number, headers?: OutgoingHttpHeaders | OutgoingHttpHeader[]): this;\n        /**\n         * Sends a HTTP/1.1 102 Processing message to the client, indicating that\n         * the request body should be sent.\n         * @since v10.0.0\n         */\n        writeProcessing(): void;\n    }\n    interface InformationEvent {\n        statusCode: number;\n        statusMessage: string;\n        httpVersion: string;\n        httpVersionMajor: number;\n        httpVersionMinor: number;\n        headers: IncomingHttpHeaders;\n        rawHeaders: string[];\n    }\n    /**\n     * This object is created internally and returned from {@link request}. It\n     * represents an _in-progress_ request whose header has already been queued. The\n     * header is still mutable using the `setHeader(name, value)`, `getHeader(name)`, `removeHeader(name)` API. The actual header will\n     * be sent along with the first data chunk or when calling `request.end()`.\n     *\n     * To get the response, add a listener for `'response'` to the request object. `'response'` will be emitted from the request object when the response\n     * headers have been received. The `'response'` event is executed with one\n     * argument which is an instance of {@link IncomingMessage}.\n     *\n     * During the `'response'` event, one can add listeners to the\n     * response object; particularly to listen for the `'data'` event.\n     *\n     * If no `'response'` handler is added, then the response will be\n     * entirely discarded. However, if a `'response'` event handler is added,\n     * then the data from the response object **must** be consumed, either by\n     * calling `response.read()` whenever there is a `'readable'` event, or\n     * by adding a `'data'` handler, or by calling the `.resume()` method.\n     * Until the data is consumed, the `'end'` event will not fire. Also, until\n     * the data is read it will consume memory that can eventually lead to a\n     * 'process out of memory' error.\n     *\n     * For backward compatibility, `res` will only emit `'error'` if there is an `'error'` listener registered.\n     *\n     * Set `Content-Length` header to limit the response body size.\n     * If `response.strictContentLength` is set to `true`, mismatching the `Content-Length` header value will result in an `Error` being thrown,\n     * identified by `code:``'ERR_HTTP_CONTENT_LENGTH_MISMATCH'`.\n     *\n     * `Content-Length` value should be in bytes, not characters. Use `Buffer.byteLength()` to determine the length of the body in bytes.\n     * @since v0.1.17\n     */\n    class ClientRequest extends OutgoingMessage {\n        /**\n         * The `request.aborted` property will be `true` if the request has\n         * been aborted.\n         * @since v0.11.14\n         * @deprecated Since v17.0.0, v16.12.0 - Check `destroyed` instead.\n         */\n        aborted: boolean;\n        /**\n         * The request host.\n         * @since v14.5.0, v12.19.0\n         */\n        host: string;\n        /**\n         * The request protocol.\n         * @since v14.5.0, v12.19.0\n         */\n        protocol: string;\n        /**\n         * When sending request through a keep-alive enabled agent, the underlying socket\n         * might be reused. But if server closes connection at unfortunate time, client\n         * may run into a 'ECONNRESET' error.\n         *\n         * ```js\n         * import http from 'node:http';\n         *\n         * // Server has a 5 seconds keep-alive timeout by default\n         * http\n         *   .createServer((req, res) => {\n         *     res.write('hello\\n');\n         *     res.end();\n         *   })\n         *   .listen(3000);\n         *\n         * setInterval(() => {\n         *   // Adapting a keep-alive agent\n         *   http.get('http://localhost:3000', { agent }, (res) => {\n         *     res.on('data', (data) => {\n         *       // Do nothing\n         *     });\n         *   });\n         * }, 5000); // Sending request on 5s interval so it's easy to hit idle timeout\n         * ```\n         *\n         * By marking a request whether it reused socket or not, we can do\n         * automatic error retry base on it.\n         *\n         * ```js\n         * import http from 'node:http';\n         * const agent = new http.Agent({ keepAlive: true });\n         *\n         * function retriableRequest() {\n         *   const req = http\n         *     .get('http://localhost:3000', { agent }, (res) => {\n         *       // ...\n         *     })\n         *     .on('error', (err) => {\n         *       // Check if retry is needed\n         *       if (req.reusedSocket &#x26;&#x26; err.code === 'ECONNRESET') {\n         *         retriableRequest();\n         *       }\n         *     });\n         * }\n         *\n         * retriableRequest();\n         * ```\n         * @since v13.0.0, v12.16.0\n         */\n        reusedSocket: boolean;\n        /**\n         * Limits maximum response headers count. If set to 0, no limit will be applied.\n         */\n        maxHeadersCount: number;\n        constructor(url: string | URL | ClientRequestArgs, cb?: (res: IncomingMessage) => void);\n        /**\n         * The request method.\n         * @since v0.1.97\n         */\n        method: string;\n        /**\n         * The request path.\n         * @since v0.4.0\n         */\n        path: string;\n        /**\n         * Marks the request as aborting. Calling this will cause remaining data\n         * in the response to be dropped and the socket to be destroyed.\n         * @since v0.3.8\n         * @deprecated Since v14.1.0,v13.14.0 - Use `destroy` instead.\n         */\n        abort(): void;\n        onSocket(socket: Socket): void;\n        /**\n         * Once a socket is assigned to this request and is connected `socket.setTimeout()` will be called.\n         * @since v0.5.9\n         * @param timeout Milliseconds before a request times out.\n         * @param callback Optional function to be called when a timeout occurs. Same as binding to the `'timeout'` event.\n         */\n        setTimeout(timeout: number, callback?: () => void): this;\n        /**\n         * Once a socket is assigned to this request and is connected `socket.setNoDelay()` will be called.\n         * @since v0.5.9\n         */\n        setNoDelay(noDelay?: boolean): void;\n        /**\n         * Once a socket is assigned to this request and is connected `socket.setKeepAlive()` will be called.\n         * @since v0.5.9\n         */\n        setSocketKeepAlive(enable?: boolean, initialDelay?: number): void;\n        /**\n         * Returns an array containing the unique names of the current outgoing raw\n         * headers. Header names are returned with their exact casing being set.\n         *\n         * ```js\n         * request.setHeader('Foo', 'bar');\n         * request.setHeader('Set-Cookie', ['foo=bar', 'bar=baz']);\n         *\n         * const headerNames = request.getRawHeaderNames();\n         * // headerNames === ['Foo', 'Set-Cookie']\n         * ```\n         * @since v15.13.0, v14.17.0\n         */\n        getRawHeaderNames(): string[];\n        /**\n         * @deprecated\n         */\n        addListener(event: \"abort\", listener: () => void): this;\n        addListener(\n            event: \"connect\",\n            listener: (response: IncomingMessage, socket: Socket, head: Buffer) => void,\n        ): this;\n        addListener(event: \"continue\", listener: () => void): this;\n        addListener(event: \"information\", listener: (info: InformationEvent) => void): this;\n        addListener(event: \"response\", listener: (response: IncomingMessage) => void): this;\n        addListener(event: \"socket\", listener: (socket: Socket) => void): this;\n        addListener(event: \"timeout\", listener: () => void): this;\n        addListener(\n            event: \"upgrade\",\n            listener: (response: IncomingMessage, socket: Socket, head: Buffer) => void,\n        ): this;\n        addListener(event: \"close\", listener: () => void): this;\n        addListener(event: \"drain\", listener: () => void): this;\n        addListener(event: \"error\", listener: (err: Error) => void): this;\n        addListener(event: \"finish\", listener: () => void): this;\n        addListener(event: \"pipe\", listener: (src: stream.Readable) => void): this;\n        addListener(event: \"unpipe\", listener: (src: stream.Readable) => void): this;\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\n        /**\n         * @deprecated\n         */\n        on(event: \"abort\", listener: () => void): this;\n        on(event: \"connect\", listener: (response: IncomingMessage, socket: Socket, head: Buffer) => void): this;\n        on(event: \"continue\", listener: () => void): this;\n        on(event: \"information\", listener: (info: InformationEvent) => void): this;\n        on(event: \"response\", listener: (response: IncomingMessage) => void): this;\n        on(event: \"socket\", listener: (socket: Socket) => void): this;\n        on(event: \"timeout\", listener: () => void): this;\n        on(event: \"upgrade\", listener: (response: IncomingMessage, socket: Socket, head: Buffer) => void): this;\n        on(event: \"close\", listener: () => void): this;\n        on(event: \"drain\", listener: () => void): this;\n        on(event: \"error\", listener: (err: Error) => void): this;\n        on(event: \"finish\", listener: () => void): this;\n        on(event: \"pipe\", listener: (src: stream.Readable) => void): this;\n        on(event: \"unpipe\", listener: (src: stream.Readable) => void): this;\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\n        /**\n         * @deprecated\n         */\n        once(event: \"abort\", listener: () => void): this;\n        once(event: \"connect\", listener: (response: IncomingMessage, socket: Socket, head: Buffer) => void): this;\n        once(event: \"continue\", listener: () => void): this;\n        once(event: \"information\", listener: (info: InformationEvent) => void): this;\n        once(event: \"response\", listener: (response: IncomingMessage) => void): this;\n        once(event: \"socket\", listener: (socket: Socket) => void): this;\n        once(event: \"timeout\", listener: () => void): this;\n        once(event: \"upgrade\", listener: (response: IncomingMessage, socket: Socket, head: Buffer) => void): this;\n        once(event: \"close\", listener: () => void): this;\n        once(event: \"drain\", listener: () => void): this;\n        once(event: \"error\", listener: (err: Error) => void): this;\n        once(event: \"finish\", listener: () => void): this;\n        once(event: \"pipe\", listener: (src: stream.Readable) => void): this;\n        once(event: \"unpipe\", listener: (src: stream.Readable) => void): this;\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\n        /**\n         * @deprecated\n         */\n        prependListener(event: \"abort\", listener: () => void): this;\n        prependListener(\n            event: \"connect\",\n            listener: (response: IncomingMessage, socket: Socket, head: Buffer) => void,\n        ): this;\n        prependListener(event: \"continue\", listener: () => void): this;\n        prependListener(event: \"information\", listener: (info: InformationEvent) => void): this;\n        prependListener(event: \"response\", listener: (response: IncomingMessage) => void): this;\n        prependListener(event: \"socket\", listener: (socket: Socket) => void): this;\n        prependListener(event: \"timeout\", listener: () => void): this;\n        prependListener(\n            event: \"upgrade\",\n            listener: (response: IncomingMessage, socket: Socket, head: Buffer) => void,\n        ): this;\n        prependListener(event: \"close\", listener: () => void): this;\n        prependListener(event: \"drain\", listener: () => void): this;\n        prependListener(event: \"error\", listener: (err: Error) => void): this;\n        prependListener(event: \"finish\", listener: () => void): this;\n        prependListener(event: \"pipe\", listener: (src: stream.Readable) => void): this;\n        prependListener(event: \"unpipe\", listener: (src: stream.Readable) => void): this;\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\n        /**\n         * @deprecated\n         */\n        prependOnceListener(event: \"abort\", listener: () => void): this;\n        prependOnceListener(\n            event: \"connect\",\n            listener: (response: IncomingMessage, socket: Socket, head: Buffer) => void,\n        ): this;\n        prependOnceListener(event: \"continue\", listener: () => void): this;\n        prependOnceListener(event: \"information\", listener: (info: InformationEvent) => void): this;\n        prependOnceListener(event: \"response\", listener: (response: IncomingMessage) => void): this;\n        prependOnceListener(event: \"socket\", listener: (socket: Socket) => void): this;\n        prependOnceListener(event: \"timeout\", listener: () => void): this;\n        prependOnceListener(\n            event: \"upgrade\",\n            listener: (response: IncomingMessage, socket: Socket, head: Buffer) => void,\n        ): this;\n        prependOnceListener(event: \"close\", listener: () => void): this;\n        prependOnceListener(event: \"drain\", listener: () => void): this;\n        prependOnceListener(event: \"error\", listener: (err: Error) => void): this;\n        prependOnceListener(event: \"finish\", listener: () => void): this;\n        prependOnceListener(event: \"pipe\", listener: (src: stream.Readable) => void): this;\n        prependOnceListener(event: \"unpipe\", listener: (src: stream.Readable) => void): this;\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\n    }\n    /**\n     * An `IncomingMessage` object is created by {@link Server} or {@link ClientRequest} and passed as the first argument to the `'request'` and `'response'` event respectively. It may be used to\n     * access response\n     * status, headers, and data.\n     *\n     * Different from its `socket` value which is a subclass of `stream.Duplex`, the `IncomingMessage` itself extends `stream.Readable` and is created separately to\n     * parse and emit the incoming HTTP headers and payload, as the underlying socket\n     * may be reused multiple times in case of keep-alive.\n     * @since v0.1.17\n     */\n    class IncomingMessage extends stream.Readable {\n        constructor(socket: Socket);\n        /**\n         * The `message.aborted` property will be `true` if the request has\n         * been aborted.\n         * @since v10.1.0\n         * @deprecated Since v17.0.0,v16.12.0 - Check `message.destroyed` from <a href=\"stream.html#class-streamreadable\" class=\"type\">stream.Readable</a>.\n         */\n        aborted: boolean;\n        /**\n         * In case of server request, the HTTP version sent by the client. In the case of\n         * client response, the HTTP version of the connected-to server.\n         * Probably either `'1.1'` or `'1.0'`.\n         *\n         * Also `message.httpVersionMajor` is the first integer and `message.httpVersionMinor` is the second.\n         * @since v0.1.1\n         */\n        httpVersion: string;\n        httpVersionMajor: number;\n        httpVersionMinor: number;\n        /**\n         * The `message.complete` property will be `true` if a complete HTTP message has\n         * been received and successfully parsed.\n         *\n         * This property is particularly useful as a means of determining if a client or\n         * server fully transmitted a message before a connection was terminated:\n         *\n         * ```js\n         * const req = http.request({\n         *   host: '127.0.0.1',\n         *   port: 8080,\n         *   method: 'POST',\n         * }, (res) => {\n         *   res.resume();\n         *   res.on('end', () => {\n         *     if (!res.complete)\n         *       console.error(\n         *         'The connection was terminated while the message was still being sent');\n         *   });\n         * });\n         * ```\n         * @since v0.3.0\n         */\n        complete: boolean;\n        /**\n         * Alias for `message.socket`.\n         * @since v0.1.90\n         * @deprecated Since v16.0.0 - Use `socket`.\n         */\n        connection: Socket;\n        /**\n         * The `net.Socket` object associated with the connection.\n         *\n         * With HTTPS support, use `request.socket.getPeerCertificate()` to obtain the\n         * client's authentication details.\n         *\n         * This property is guaranteed to be an instance of the `net.Socket` class,\n         * a subclass of `stream.Duplex`, unless the user specified a socket\n         * type other than `net.Socket` or internally nulled.\n         * @since v0.3.0\n         */\n        socket: Socket;\n        /**\n         * The request/response headers object.\n         *\n         * Key-value pairs of header names and values. Header names are lower-cased.\n         *\n         * ```js\n         * // Prints something like:\n         * //\n         * // { 'user-agent': 'curl/7.22.0',\n         * //   host: '127.0.0.1:8000',\n         * //   accept: '*' }\n         * console.log(request.headers);\n         * ```\n         *\n         * Duplicates in raw headers are handled in the following ways, depending on the\n         * header name:\n         *\n         * * Duplicates of `age`, `authorization`, `content-length`, `content-type`, `etag`, `expires`, `from`, `host`, `if-modified-since`, `if-unmodified-since`, `last-modified`, `location`,\n         * `max-forwards`, `proxy-authorization`, `referer`, `retry-after`, `server`, or `user-agent` are discarded.\n         * To allow duplicate values of the headers listed above to be joined,\n         * use the option `joinDuplicateHeaders` in {@link request} and {@link createServer}. See RFC 9110 Section 5.3 for more\n         * information.\n         * * `set-cookie` is always an array. Duplicates are added to the array.\n         * * For duplicate `cookie` headers, the values are joined together with `; `.\n         * * For all other headers, the values are joined together with `, `.\n         * @since v0.1.5\n         */\n        headers: IncomingHttpHeaders;\n        /**\n         * Similar to `message.headers`, but there is no join logic and the values are\n         * always arrays of strings, even for headers received just once.\n         *\n         * ```js\n         * // Prints something like:\n         * //\n         * // { 'user-agent': ['curl/7.22.0'],\n         * //   host: ['127.0.0.1:8000'],\n         * //   accept: ['*'] }\n         * console.log(request.headersDistinct);\n         * ```\n         * @since v18.3.0, v16.17.0\n         */\n        headersDistinct: NodeJS.Dict<string[]>;\n        /**\n         * The raw request/response headers list exactly as they were received.\n         *\n         * The keys and values are in the same list. It is _not_ a\n         * list of tuples. So, the even-numbered offsets are key values, and the\n         * odd-numbered offsets are the associated values.\n         *\n         * Header names are not lowercased, and duplicates are not merged.\n         *\n         * ```js\n         * // Prints something like:\n         * //\n         * // [ 'user-agent',\n         * //   'this is invalid because there can be only one',\n         * //   'User-Agent',\n         * //   'curl/7.22.0',\n         * //   'Host',\n         * //   '127.0.0.1:8000',\n         * //   'ACCEPT',\n         * //   '*' ]\n         * console.log(request.rawHeaders);\n         * ```\n         * @since v0.11.6\n         */\n        rawHeaders: string[];\n        /**\n         * The request/response trailers object. Only populated at the `'end'` event.\n         * @since v0.3.0\n         */\n        trailers: NodeJS.Dict<string>;\n        /**\n         * Similar to `message.trailers`, but there is no join logic and the values are\n         * always arrays of strings, even for headers received just once.\n         * Only populated at the `'end'` event.\n         * @since v18.3.0, v16.17.0\n         */\n        trailersDistinct: NodeJS.Dict<string[]>;\n        /**\n         * The raw request/response trailer keys and values exactly as they were\n         * received. Only populated at the `'end'` event.\n         * @since v0.11.6\n         */\n        rawTrailers: string[];\n        /**\n         * Calls `message.socket.setTimeout(msecs, callback)`.\n         * @since v0.5.9\n         */\n        setTimeout(msecs: number, callback?: () => void): this;\n        /**\n         * **Only valid for request obtained from {@link Server}.**\n         *\n         * The request method as a string. Read only. Examples: `'GET'`, `'DELETE'`.\n         * @since v0.1.1\n         */\n        method?: string | undefined;\n        /**\n         * **Only valid for request obtained from {@link Server}.**\n         *\n         * Request URL string. This contains only the URL that is present in the actual\n         * HTTP request. Take the following request:\n         *\n         * ```http\n         * GET /status?name=ryan HTTP/1.1\n         * Accept: text/plain\n         * ```\n         *\n         * To parse the URL into its parts:\n         *\n         * ```js\n         * new URL(`http://${process.env.HOST ?? 'localhost'}${request.url}`);\n         * ```\n         *\n         * When `request.url` is `'/status?name=ryan'` and `process.env.HOST` is undefined:\n         *\n         * ```console\n         * $ node\n         * > new URL(`http://${process.env.HOST ?? 'localhost'}${request.url}`);\n         * URL {\n         *   href: 'http://localhost/status?name=ryan',\n         *   origin: 'http://localhost',\n         *   protocol: 'http:',\n         *   username: '',\n         *   password: '',\n         *   host: 'localhost',\n         *   hostname: 'localhost',\n         *   port: '',\n         *   pathname: '/status',\n         *   search: '?name=ryan',\n         *   searchParams: URLSearchParams { 'name' => 'ryan' },\n         *   hash: ''\n         * }\n         * ```\n         *\n         * Ensure that you set `process.env.HOST` to the server's host name, or consider replacing this part entirely. If using `req.headers.host`, ensure proper\n         * validation is used, as clients may specify a custom `Host` header.\n         * @since v0.1.90\n         */\n        url?: string | undefined;\n        /**\n         * **Only valid for response obtained from {@link ClientRequest}.**\n         *\n         * The 3-digit HTTP response status code. E.G. `404`.\n         * @since v0.1.1\n         */\n        statusCode?: number | undefined;\n        /**\n         * **Only valid for response obtained from {@link ClientRequest}.**\n         *\n         * The HTTP response status message (reason phrase). E.G. `OK` or `Internal Server Error`.\n         * @since v0.11.10\n         */\n        statusMessage?: string | undefined;\n        /**\n         * Calls `destroy()` on the socket that received the `IncomingMessage`. If `error` is provided, an `'error'` event is emitted on the socket and `error` is passed\n         * as an argument to any listeners on the event.\n         * @since v0.3.0\n         */\n        destroy(error?: Error): this;\n    }\n    interface AgentOptions extends Partial<TcpSocketConnectOpts> {\n        /**\n         * Keep sockets around in a pool to be used by other requests in the future. Default = false\n         */\n        keepAlive?: boolean | undefined;\n        /**\n         * When using HTTP KeepAlive, how often to send TCP KeepAlive packets over sockets being kept alive. Default = 1000.\n         * Only relevant if keepAlive is set to true.\n         */\n        keepAliveMsecs?: number | undefined;\n        /**\n         * Maximum number of sockets to allow per host. Default for Node 0.10 is 5, default for Node 0.12 is Infinity\n         */\n        maxSockets?: number | undefined;\n        /**\n         * Maximum number of sockets allowed for all hosts in total. Each request will use a new socket until the maximum is reached. Default: Infinity.\n         */\n        maxTotalSockets?: number | undefined;\n        /**\n         * Maximum number of sockets to leave open in a free state. Only relevant if keepAlive is set to true. Default = 256.\n         */\n        maxFreeSockets?: number | undefined;\n        /**\n         * Socket timeout in milliseconds. This will set the timeout after the socket is connected.\n         */\n        timeout?: number | undefined;\n        /**\n         * Scheduling strategy to apply when picking the next free socket to use.\n         * @default `lifo`\n         */\n        scheduling?: \"fifo\" | \"lifo\" | undefined;\n    }\n    /**\n     * An `Agent` is responsible for managing connection persistence\n     * and reuse for HTTP clients. It maintains a queue of pending requests\n     * for a given host and port, reusing a single socket connection for each\n     * until the queue is empty, at which time the socket is either destroyed\n     * or put into a pool where it is kept to be used again for requests to the\n     * same host and port. Whether it is destroyed or pooled depends on the `keepAlive` `option`.\n     *\n     * Pooled connections have TCP Keep-Alive enabled for them, but servers may\n     * still close idle connections, in which case they will be removed from the\n     * pool and a new connection will be made when a new HTTP request is made for\n     * that host and port. Servers may also refuse to allow multiple requests\n     * over the same connection, in which case the connection will have to be\n     * remade for every request and cannot be pooled. The `Agent` will still make\n     * the requests to that server, but each one will occur over a new connection.\n     *\n     * When a connection is closed by the client or the server, it is removed\n     * from the pool. Any unused sockets in the pool will be unrefed so as not\n     * to keep the Node.js process running when there are no outstanding requests.\n     * (see `socket.unref()`).\n     *\n     * It is good practice, to `destroy()` an `Agent` instance when it is no\n     * longer in use, because unused sockets consume OS resources.\n     *\n     * Sockets are removed from an agent when the socket emits either\n     * a `'close'` event or an `'agentRemove'` event. When intending to keep one\n     * HTTP request open for a long time without keeping it in the agent, something\n     * like the following may be done:\n     *\n     * ```js\n     * http.get(options, (res) => {\n     *   // Do stuff\n     * }).on('socket', (socket) => {\n     *   socket.emit('agentRemove');\n     * });\n     * ```\n     *\n     * An agent may also be used for an individual request. By providing `{agent: false}` as an option to the `http.get()` or `http.request()` functions, a one-time use `Agent` with default options\n     * will be used\n     * for the client connection.\n     *\n     * `agent:false`:\n     *\n     * ```js\n     * http.get({\n     *   hostname: 'localhost',\n     *   port: 80,\n     *   path: '/',\n     *   agent: false,  // Create a new agent just for this one request\n     * }, (res) => {\n     *   // Do stuff with response\n     * });\n     * ```\n     *\n     * `options` in [`socket.connect()`](https://nodejs.org/docs/latest-v22.x/api/net.html#socketconnectoptions-connectlistener) are also supported.\n     *\n     * To configure any of them, a custom {@link Agent} instance must be created.\n     *\n     * ```js\n     * import http from 'node:http';\n     * const keepAliveAgent = new http.Agent({ keepAlive: true });\n     * options.agent = keepAliveAgent;\n     * http.request(options, onResponseCallback)\n     * ```\n     * @since v0.3.4\n     */\n    class Agent extends EventEmitter {\n        /**\n         * By default set to 256. For agents with `keepAlive` enabled, this\n         * sets the maximum number of sockets that will be left open in the free\n         * state.\n         * @since v0.11.7\n         */\n        maxFreeSockets: number;\n        /**\n         * By default set to `Infinity`. Determines how many concurrent sockets the agent\n         * can have open per origin. Origin is the returned value of `agent.getName()`.\n         * @since v0.3.6\n         */\n        maxSockets: number;\n        /**\n         * By default set to `Infinity`. Determines how many concurrent sockets the agent\n         * can have open. Unlike `maxSockets`, this parameter applies across all origins.\n         * @since v14.5.0, v12.19.0\n         */\n        maxTotalSockets: number;\n        /**\n         * An object which contains arrays of sockets currently awaiting use by\n         * the agent when `keepAlive` is enabled. Do not modify.\n         *\n         * Sockets in the `freeSockets` list will be automatically destroyed and\n         * removed from the array on `'timeout'`.\n         * @since v0.11.4\n         */\n        readonly freeSockets: NodeJS.ReadOnlyDict<Socket[]>;\n        /**\n         * An object which contains arrays of sockets currently in use by the\n         * agent. Do not modify.\n         * @since v0.3.6\n         */\n        readonly sockets: NodeJS.ReadOnlyDict<Socket[]>;\n        /**\n         * An object which contains queues of requests that have not yet been assigned to\n         * sockets. Do not modify.\n         * @since v0.5.9\n         */\n        readonly requests: NodeJS.ReadOnlyDict<IncomingMessage[]>;\n        constructor(opts?: AgentOptions);\n        /**\n         * Destroy any sockets that are currently in use by the agent.\n         *\n         * It is usually not necessary to do this. However, if using an\n         * agent with `keepAlive` enabled, then it is best to explicitly shut down\n         * the agent when it is no longer needed. Otherwise,\n         * sockets might stay open for quite a long time before the server\n         * terminates them.\n         * @since v0.11.4\n         */\n        destroy(): void;\n    }\n    const METHODS: string[];\n    const STATUS_CODES: {\n        [errorCode: number]: string | undefined;\n        [errorCode: string]: string | undefined;\n    };\n    /**\n     * Returns a new instance of {@link Server}.\n     *\n     * The `requestListener` is a function which is automatically\n     * added to the `'request'` event.\n     *\n     * ```js\n     * import http from 'node:http';\n     *\n     * // Create a local server to receive data from\n     * const server = http.createServer((req, res) => {\n     *   res.writeHead(200, { 'Content-Type': 'application/json' });\n     *   res.end(JSON.stringify({\n     *     data: 'Hello World!',\n     *   }));\n     * });\n     *\n     * server.listen(8000);\n     * ```\n     *\n     * ```js\n     * import http from 'node:http';\n     *\n     * // Create a local server to receive data from\n     * const server = http.createServer();\n     *\n     * // Listen to the request event\n     * server.on('request', (request, res) => {\n     *   res.writeHead(200, { 'Content-Type': 'application/json' });\n     *   res.end(JSON.stringify({\n     *     data: 'Hello World!',\n     *   }));\n     * });\n     *\n     * server.listen(8000);\n     * ```\n     * @since v0.1.13\n     */\n    function createServer<\n        Request extends typeof IncomingMessage = typeof IncomingMessage,\n        Response extends typeof ServerResponse<InstanceType<Request>> = typeof ServerResponse,\n    >(requestListener?: RequestListener<Request, Response>): Server<Request, Response>;\n    function createServer<\n        Request extends typeof IncomingMessage = typeof IncomingMessage,\n        Response extends typeof ServerResponse<InstanceType<Request>> = typeof ServerResponse,\n    >(\n        options: ServerOptions<Request, Response>,\n        requestListener?: RequestListener<Request, Response>,\n    ): Server<Request, Response>;\n    // although RequestOptions are passed as ClientRequestArgs to ClientRequest directly,\n    // create interface RequestOptions would make the naming more clear to developers\n    interface RequestOptions extends ClientRequestArgs {}\n    /**\n     * `options` in `socket.connect()` are also supported.\n     *\n     * Node.js maintains several connections per server to make HTTP requests.\n     * This function allows one to transparently issue requests.\n     *\n     * `url` can be a string or a `URL` object. If `url` is a\n     * string, it is automatically parsed with `new URL()`. If it is a `URL` object, it will be automatically converted to an ordinary `options` object.\n     *\n     * If both `url` and `options` are specified, the objects are merged, with the `options` properties taking precedence.\n     *\n     * The optional `callback` parameter will be added as a one-time listener for\n     * the `'response'` event.\n     *\n     * `http.request()` returns an instance of the {@link ClientRequest} class. The `ClientRequest` instance is a writable stream. If one needs to\n     * upload a file with a POST request, then write to the `ClientRequest` object.\n     *\n     * ```js\n     * import http from 'node:http';\n     * import { Buffer } from 'node:buffer';\n     *\n     * const postData = JSON.stringify({\n     *   'msg': 'Hello World!',\n     * });\n     *\n     * const options = {\n     *   hostname: 'www.google.com',\n     *   port: 80,\n     *   path: '/upload',\n     *   method: 'POST',\n     *   headers: {\n     *     'Content-Type': 'application/json',\n     *     'Content-Length': Buffer.byteLength(postData),\n     *   },\n     * };\n     *\n     * const req = http.request(options, (res) => {\n     *   console.log(`STATUS: ${res.statusCode}`);\n     *   console.log(`HEADERS: ${JSON.stringify(res.headers)}`);\n     *   res.setEncoding('utf8');\n     *   res.on('data', (chunk) => {\n     *     console.log(`BODY: ${chunk}`);\n     *   });\n     *   res.on('end', () => {\n     *     console.log('No more data in response.');\n     *   });\n     * });\n     *\n     * req.on('error', (e) => {\n     *   console.error(`problem with request: ${e.message}`);\n     * });\n     *\n     * // Write data to request body\n     * req.write(postData);\n     * req.end();\n     * ```\n     *\n     * In the example `req.end()` was called. With `http.request()` one\n     * must always call `req.end()` to signify the end of the request -\n     * even if there is no data being written to the request body.\n     *\n     * If any error is encountered during the request (be that with DNS resolution,\n     * TCP level errors, or actual HTTP parse errors) an `'error'` event is emitted\n     * on the returned request object. As with all `'error'` events, if no listeners\n     * are registered the error will be thrown.\n     *\n     * There are a few special headers that should be noted.\n     *\n     * * Sending a 'Connection: keep-alive' will notify Node.js that the connection to\n     * the server should be persisted until the next request.\n     * * Sending a 'Content-Length' header will disable the default chunked encoding.\n     * * Sending an 'Expect' header will immediately send the request headers.\n     * Usually, when sending 'Expect: 100-continue', both a timeout and a listener\n     * for the `'continue'` event should be set. See RFC 2616 Section 8.2.3 for more\n     * information.\n     * * Sending an Authorization header will override using the `auth` option\n     * to compute basic authentication.\n     *\n     * Example using a `URL` as `options`:\n     *\n     * ```js\n     * const options = new URL('http://abc:xyz@example.com');\n     *\n     * const req = http.request(options, (res) => {\n     *   // ...\n     * });\n     * ```\n     *\n     * In a successful request, the following events will be emitted in the following\n     * order:\n     *\n     * * `'socket'`\n     * * `'response'`\n     *    * `'data'` any number of times, on the `res` object\n     *    (`'data'` will not be emitted at all if the response body is empty, for\n     *    instance, in most redirects)\n     *    * `'end'` on the `res` object\n     * * `'close'`\n     *\n     * In the case of a connection error, the following events will be emitted:\n     *\n     * * `'socket'`\n     * * `'error'`\n     * * `'close'`\n     *\n     * In the case of a premature connection close before the response is received,\n     * the following events will be emitted in the following order:\n     *\n     * * `'socket'`\n     * * `'error'` with an error with message `'Error: socket hang up'` and code `'ECONNRESET'`\n     * * `'close'`\n     *\n     * In the case of a premature connection close after the response is received,\n     * the following events will be emitted in the following order:\n     *\n     * * `'socket'`\n     * * `'response'`\n     *    * `'data'` any number of times, on the `res` object\n     * * (connection closed here)\n     * * `'aborted'` on the `res` object\n     * * `'close'`\n     * * `'error'` on the `res` object with an error with message `'Error: aborted'` and code `'ECONNRESET'`\n     * * `'close'` on the `res` object\n     *\n     * If `req.destroy()` is called before a socket is assigned, the following\n     * events will be emitted in the following order:\n     *\n     * * (`req.destroy()` called here)\n     * * `'error'` with an error with message `'Error: socket hang up'` and code `'ECONNRESET'`, or the error with which `req.destroy()` was called\n     * * `'close'`\n     *\n     * If `req.destroy()` is called before the connection succeeds, the following\n     * events will be emitted in the following order:\n     *\n     * * `'socket'`\n     * * (`req.destroy()` called here)\n     * * `'error'` with an error with message `'Error: socket hang up'` and code `'ECONNRESET'`, or the error with which `req.destroy()` was called\n     * * `'close'`\n     *\n     * If `req.destroy()` is called after the response is received, the following\n     * events will be emitted in the following order:\n     *\n     * * `'socket'`\n     * * `'response'`\n     *    * `'data'` any number of times, on the `res` object\n     * * (`req.destroy()` called here)\n     * * `'aborted'` on the `res` object\n     * * `'close'`\n     * * `'error'` on the `res` object with an error with message `'Error: aborted'` and code `'ECONNRESET'`, or the error with which `req.destroy()` was called\n     * * `'close'` on the `res` object\n     *\n     * If `req.abort()` is called before a socket is assigned, the following\n     * events will be emitted in the following order:\n     *\n     * * (`req.abort()` called here)\n     * * `'abort'`\n     * * `'close'`\n     *\n     * If `req.abort()` is called before the connection succeeds, the following\n     * events will be emitted in the following order:\n     *\n     * * `'socket'`\n     * * (`req.abort()` called here)\n     * * `'abort'`\n     * * `'error'` with an error with message `'Error: socket hang up'` and code `'ECONNRESET'`\n     * * `'close'`\n     *\n     * If `req.abort()` is called after the response is received, the following\n     * events will be emitted in the following order:\n     *\n     * * `'socket'`\n     * * `'response'`\n     *    * `'data'` any number of times, on the `res` object\n     * * (`req.abort()` called here)\n     * * `'abort'`\n     * * `'aborted'` on the `res` object\n     * * `'error'` on the `res` object with an error with message `'Error: aborted'` and code `'ECONNRESET'`.\n     * * `'close'`\n     * * `'close'` on the `res` object\n     *\n     * Setting the `timeout` option or using the `setTimeout()` function will\n     * not abort the request or do anything besides add a `'timeout'` event.\n     *\n     * Passing an `AbortSignal` and then calling `abort()` on the corresponding `AbortController` will behave the same way as calling `.destroy()` on the\n     * request. Specifically, the `'error'` event will be emitted with an error with\n     * the message `'AbortError: The operation was aborted'`, the code `'ABORT_ERR'` and the `cause`, if one was provided.\n     * @since v0.3.6\n     */\n    function request(options: RequestOptions | string | URL, callback?: (res: IncomingMessage) => void): ClientRequest;\n    function request(\n        url: string | URL,\n        options: RequestOptions,\n        callback?: (res: IncomingMessage) => void,\n    ): ClientRequest;\n    /**\n     * Since most requests are GET requests without bodies, Node.js provides this\n     * convenience method. The only difference between this method and {@link request} is that it sets the method to GET by default and calls `req.end()` automatically. The callback must take care to\n     * consume the response\n     * data for reasons stated in {@link ClientRequest} section.\n     *\n     * The `callback` is invoked with a single argument that is an instance of {@link IncomingMessage}.\n     *\n     * JSON fetching example:\n     *\n     * ```js\n     * http.get('http://localhost:8000/', (res) => {\n     *   const { statusCode } = res;\n     *   const contentType = res.headers['content-type'];\n     *\n     *   let error;\n     *   // Any 2xx status code signals a successful response but\n     *   // here we're only checking for 200.\n     *   if (statusCode !== 200) {\n     *     error = new Error('Request Failed.\\n' +\n     *                       `Status Code: ${statusCode}`);\n     *   } else if (!/^application\\/json/.test(contentType)) {\n     *     error = new Error('Invalid content-type.\\n' +\n     *                       `Expected application/json but received ${contentType}`);\n     *   }\n     *   if (error) {\n     *     console.error(error.message);\n     *     // Consume response data to free up memory\n     *     res.resume();\n     *     return;\n     *   }\n     *\n     *   res.setEncoding('utf8');\n     *   let rawData = '';\n     *   res.on('data', (chunk) => { rawData += chunk; });\n     *   res.on('end', () => {\n     *     try {\n     *       const parsedData = JSON.parse(rawData);\n     *       console.log(parsedData);\n     *     } catch (e) {\n     *       console.error(e.message);\n     *     }\n     *   });\n     * }).on('error', (e) => {\n     *   console.error(`Got error: ${e.message}`);\n     * });\n     *\n     * // Create a local server to receive data from\n     * const server = http.createServer((req, res) => {\n     *   res.writeHead(200, { 'Content-Type': 'application/json' });\n     *   res.end(JSON.stringify({\n     *     data: 'Hello World!',\n     *   }));\n     * });\n     *\n     * server.listen(8000);\n     * ```\n     * @since v0.3.6\n     * @param options Accepts the same `options` as {@link request}, with the method set to GET by default.\n     */\n    function get(options: RequestOptions | string | URL, callback?: (res: IncomingMessage) => void): ClientRequest;\n    function get(url: string | URL, options: RequestOptions, callback?: (res: IncomingMessage) => void): ClientRequest;\n    /**\n     * Performs the low-level validations on the provided `name` that are done when `res.setHeader(name, value)` is called.\n     *\n     * Passing illegal value as `name` will result in a `TypeError` being thrown,\n     * identified by `code: 'ERR_INVALID_HTTP_TOKEN'`.\n     *\n     * It is not necessary to use this method before passing headers to an HTTP request\n     * or response. The HTTP module will automatically validate such headers.\n     *\n     * Example:\n     *\n     * ```js\n     * import { validateHeaderName } from 'node:http';\n     *\n     * try {\n     *   validateHeaderName('');\n     * } catch (err) {\n     *   console.error(err instanceof TypeError); // --> true\n     *   console.error(err.code); // --> 'ERR_INVALID_HTTP_TOKEN'\n     *   console.error(err.message); // --> 'Header name must be a valid HTTP token [\"\"]'\n     * }\n     * ```\n     * @since v14.3.0\n     * @param [label='Header name'] Label for error message.\n     */\n    function validateHeaderName(name: string): void;\n    /**\n     * Performs the low-level validations on the provided `value` that are done when `res.setHeader(name, value)` is called.\n     *\n     * Passing illegal value as `value` will result in a `TypeError` being thrown.\n     *\n     * * Undefined value error is identified by `code: 'ERR_HTTP_INVALID_HEADER_VALUE'`.\n     * * Invalid value character error is identified by `code: 'ERR_INVALID_CHAR'`.\n     *\n     * It is not necessary to use this method before passing headers to an HTTP request\n     * or response. The HTTP module will automatically validate such headers.\n     *\n     * Examples:\n     *\n     * ```js\n     * import { validateHeaderValue } from 'node:http';\n     *\n     * try {\n     *   validateHeaderValue('x-my-header', undefined);\n     * } catch (err) {\n     *   console.error(err instanceof TypeError); // --> true\n     *   console.error(err.code === 'ERR_HTTP_INVALID_HEADER_VALUE'); // --> true\n     *   console.error(err.message); // --> 'Invalid value \"undefined\" for header \"x-my-header\"'\n     * }\n     *\n     * try {\n     *   validateHeaderValue('x-my-header', 'oʊmɪɡə');\n     * } catch (err) {\n     *   console.error(err instanceof TypeError); // --> true\n     *   console.error(err.code === 'ERR_INVALID_CHAR'); // --> true\n     *   console.error(err.message); // --> 'Invalid character in header content [\"x-my-header\"]'\n     * }\n     * ```\n     * @since v14.3.0\n     * @param name Header name\n     * @param value Header value\n     */\n    function validateHeaderValue(name: string, value: string): void;\n    /**\n     * Set the maximum number of idle HTTP parsers.\n     * @since v18.8.0, v16.18.0\n     * @param [max=1000]\n     */\n    function setMaxIdleHTTPParsers(max: number): void;\n    /**\n     * Global instance of `Agent` which is used as the default for all HTTP client\n     * requests. Diverges from a default `Agent` configuration by having `keepAlive`\n     * enabled and a `timeout` of 5 seconds.\n     * @since v0.5.9\n     */\n    let globalAgent: Agent;\n    /**\n     * Read-only property specifying the maximum allowed size of HTTP headers in bytes.\n     * Defaults to 16KB. Configurable using the `--max-http-header-size` CLI option.\n     */\n    const maxHeaderSize: number;\n    /**\n     * A browser-compatible implementation of [WebSocket](https://nodejs.org/docs/latest/api/http.html#websocket).\n     * @since v22.5.0\n     */\n    const WebSocket: import(\"undici-types\").WebSocket;\n    /**\n     * @since v22.5.0\n     */\n    const CloseEvent: import(\"undici-types\").CloseEvent;\n    /**\n     * @since v22.5.0\n     */\n    const MessageEvent: import(\"undici-types\").MessageEvent;\n}\ndeclare module \"node:http\" {\n    export * from \"http\";\n}\n",
  '@types/node/http2.d.ts':
    '/**\n * The `node:http2` module provides an implementation of the [HTTP/2](https://tools.ietf.org/html/rfc7540) protocol.\n * It can be accessed using:\n *\n * ```js\n * import http2 from \'node:http2\';\n * ```\n * @since v8.4.0\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/http2.js)\n */\ndeclare module "http2" {\n    import EventEmitter = require("node:events");\n    import * as fs from "node:fs";\n    import * as net from "node:net";\n    import * as stream from "node:stream";\n    import * as tls from "node:tls";\n    import * as url from "node:url";\n    import {\n        IncomingHttpHeaders as Http1IncomingHttpHeaders,\n        IncomingMessage,\n        OutgoingHttpHeaders,\n        ServerResponse,\n    } from "node:http";\n    export { OutgoingHttpHeaders } from "node:http";\n    export interface IncomingHttpStatusHeader {\n        ":status"?: number | undefined;\n    }\n    export interface IncomingHttpHeaders extends Http1IncomingHttpHeaders {\n        ":path"?: string | undefined;\n        ":method"?: string | undefined;\n        ":authority"?: string | undefined;\n        ":scheme"?: string | undefined;\n    }\n    // Http2Stream\n    export interface StreamPriorityOptions {\n        exclusive?: boolean | undefined;\n        parent?: number | undefined;\n        weight?: number | undefined;\n        silent?: boolean | undefined;\n    }\n    export interface StreamState {\n        localWindowSize?: number | undefined;\n        state?: number | undefined;\n        localClose?: number | undefined;\n        remoteClose?: number | undefined;\n        sumDependencyWeight?: number | undefined;\n        weight?: number | undefined;\n    }\n    export interface ServerStreamResponseOptions {\n        endStream?: boolean | undefined;\n        waitForTrailers?: boolean | undefined;\n    }\n    export interface StatOptions {\n        offset: number;\n        length: number;\n    }\n    export interface ServerStreamFileResponseOptions {\n        // eslint-disable-next-line @typescript-eslint/no-invalid-void-type\n        statCheck?(stats: fs.Stats, headers: OutgoingHttpHeaders, statOptions: StatOptions): void | boolean;\n        waitForTrailers?: boolean | undefined;\n        offset?: number | undefined;\n        length?: number | undefined;\n    }\n    export interface ServerStreamFileResponseOptionsWithError extends ServerStreamFileResponseOptions {\n        onError?(err: NodeJS.ErrnoException): void;\n    }\n    export interface Http2Stream extends stream.Duplex {\n        /**\n         * Set to `true` if the `Http2Stream` instance was aborted abnormally. When set,\n         * the `\'aborted\'` event will have been emitted.\n         * @since v8.4.0\n         */\n        readonly aborted: boolean;\n        /**\n         * This property shows the number of characters currently buffered to be written.\n         * See `net.Socket.bufferSize` for details.\n         * @since v11.2.0, v10.16.0\n         */\n        readonly bufferSize: number;\n        /**\n         * Set to `true` if the `Http2Stream` instance has been closed.\n         * @since v9.4.0\n         */\n        readonly closed: boolean;\n        /**\n         * Set to `true` if the `Http2Stream` instance has been destroyed and is no longer\n         * usable.\n         * @since v8.4.0\n         */\n        readonly destroyed: boolean;\n        /**\n         * Set to `true` if the `END_STREAM` flag was set in the request or response\n         * HEADERS frame received, indicating that no additional data should be received\n         * and the readable side of the `Http2Stream` will be closed.\n         * @since v10.11.0\n         */\n        readonly endAfterHeaders: boolean;\n        /**\n         * The numeric stream identifier of this `Http2Stream` instance. Set to `undefined` if the stream identifier has not yet been assigned.\n         * @since v8.4.0\n         */\n        readonly id?: number | undefined;\n        /**\n         * Set to `true` if the `Http2Stream` instance has not yet been assigned a\n         * numeric stream identifier.\n         * @since v9.4.0\n         */\n        readonly pending: boolean;\n        /**\n         * Set to the `RST_STREAM` `error code` reported when the `Http2Stream` is\n         * destroyed after either receiving an `RST_STREAM` frame from the connected peer,\n         * calling `http2stream.close()`, or `http2stream.destroy()`. Will be `undefined` if the `Http2Stream` has not been closed.\n         * @since v8.4.0\n         */\n        readonly rstCode: number;\n        /**\n         * An object containing the outbound headers sent for this `Http2Stream`.\n         * @since v9.5.0\n         */\n        readonly sentHeaders: OutgoingHttpHeaders;\n        /**\n         * An array of objects containing the outbound informational (additional) headers\n         * sent for this `Http2Stream`.\n         * @since v9.5.0\n         */\n        readonly sentInfoHeaders?: OutgoingHttpHeaders[] | undefined;\n        /**\n         * An object containing the outbound trailers sent for this `HttpStream`.\n         * @since v9.5.0\n         */\n        readonly sentTrailers?: OutgoingHttpHeaders | undefined;\n        /**\n         * A reference to the `Http2Session` instance that owns this `Http2Stream`. The\n         * value will be `undefined` after the `Http2Stream` instance is destroyed.\n         * @since v8.4.0\n         */\n        readonly session: Http2Session | undefined;\n        /**\n         * Provides miscellaneous information about the current state of the `Http2Stream`.\n         *\n         * A current state of this `Http2Stream`.\n         * @since v8.4.0\n         */\n        readonly state: StreamState;\n        /**\n         * Closes the `Http2Stream` instance by sending an `RST_STREAM` frame to the\n         * connected HTTP/2 peer.\n         * @since v8.4.0\n         * @param [code=http2.constants.NGHTTP2_NO_ERROR] Unsigned 32-bit integer identifying the error code.\n         * @param callback An optional function registered to listen for the `\'close\'` event.\n         */\n        close(code?: number, callback?: () => void): void;\n        /**\n         * Updates the priority for this `Http2Stream` instance.\n         * @since v8.4.0\n         */\n        priority(options: StreamPriorityOptions): void;\n        /**\n         * ```js\n         * import http2 from \'node:http2\';\n         * const client = http2.connect(\'http://example.org:8000\');\n         * const { NGHTTP2_CANCEL } = http2.constants;\n         * const req = client.request({ \':path\': \'/\' });\n         *\n         * // Cancel the stream if there\'s no activity after 5 seconds\n         * req.setTimeout(5000, () => req.close(NGHTTP2_CANCEL));\n         * ```\n         * @since v8.4.0\n         */\n        setTimeout(msecs: number, callback?: () => void): void;\n        /**\n         * Sends a trailing `HEADERS` frame to the connected HTTP/2 peer. This method\n         * will cause the `Http2Stream` to be immediately closed and must only be\n         * called after the `\'wantTrailers\'` event has been emitted. When sending a\n         * request or sending a response, the `options.waitForTrailers` option must be set\n         * in order to keep the `Http2Stream` open after the final `DATA` frame so that\n         * trailers can be sent.\n         *\n         * ```js\n         * import http2 from \'node:http2\';\n         * const server = http2.createServer();\n         * server.on(\'stream\', (stream) => {\n         *   stream.respond(undefined, { waitForTrailers: true });\n         *   stream.on(\'wantTrailers\', () => {\n         *     stream.sendTrailers({ xyz: \'abc\' });\n         *   });\n         *   stream.end(\'Hello World\');\n         * });\n         * ```\n         *\n         * The HTTP/1 specification forbids trailers from containing HTTP/2 pseudo-header\n         * fields (e.g. `\':method\'`, `\':path\'`, etc).\n         * @since v10.0.0\n         */\n        sendTrailers(headers: OutgoingHttpHeaders): void;\n        addListener(event: "aborted", listener: () => void): this;\n        addListener(event: "close", listener: () => void): this;\n        addListener(event: "data", listener: (chunk: Buffer | string) => void): this;\n        addListener(event: "drain", listener: () => void): this;\n        addListener(event: "end", listener: () => void): this;\n        addListener(event: "error", listener: (err: Error) => void): this;\n        addListener(event: "finish", listener: () => void): this;\n        addListener(event: "frameError", listener: (frameType: number, errorCode: number) => void): this;\n        addListener(event: "pipe", listener: (src: stream.Readable) => void): this;\n        addListener(event: "unpipe", listener: (src: stream.Readable) => void): this;\n        addListener(event: "streamClosed", listener: (code: number) => void): this;\n        addListener(event: "timeout", listener: () => void): this;\n        addListener(event: "trailers", listener: (trailers: IncomingHttpHeaders, flags: number) => void): this;\n        addListener(event: "wantTrailers", listener: () => void): this;\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\n        emit(event: "aborted"): boolean;\n        emit(event: "close"): boolean;\n        emit(event: "data", chunk: Buffer | string): boolean;\n        emit(event: "drain"): boolean;\n        emit(event: "end"): boolean;\n        emit(event: "error", err: Error): boolean;\n        emit(event: "finish"): boolean;\n        emit(event: "frameError", frameType: number, errorCode: number): boolean;\n        emit(event: "pipe", src: stream.Readable): boolean;\n        emit(event: "unpipe", src: stream.Readable): boolean;\n        emit(event: "streamClosed", code: number): boolean;\n        emit(event: "timeout"): boolean;\n        emit(event: "trailers", trailers: IncomingHttpHeaders, flags: number): boolean;\n        emit(event: "wantTrailers"): boolean;\n        emit(event: string | symbol, ...args: any[]): boolean;\n        on(event: "aborted", listener: () => void): this;\n        on(event: "close", listener: () => void): this;\n        on(event: "data", listener: (chunk: Buffer | string) => void): this;\n        on(event: "drain", listener: () => void): this;\n        on(event: "end", listener: () => void): this;\n        on(event: "error", listener: (err: Error) => void): this;\n        on(event: "finish", listener: () => void): this;\n        on(event: "frameError", listener: (frameType: number, errorCode: number) => void): this;\n        on(event: "pipe", listener: (src: stream.Readable) => void): this;\n        on(event: "unpipe", listener: (src: stream.Readable) => void): this;\n        on(event: "streamClosed", listener: (code: number) => void): this;\n        on(event: "timeout", listener: () => void): this;\n        on(event: "trailers", listener: (trailers: IncomingHttpHeaders, flags: number) => void): this;\n        on(event: "wantTrailers", listener: () => void): this;\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\n        once(event: "aborted", listener: () => void): this;\n        once(event: "close", listener: () => void): this;\n        once(event: "data", listener: (chunk: Buffer | string) => void): this;\n        once(event: "drain", listener: () => void): this;\n        once(event: "end", listener: () => void): this;\n        once(event: "error", listener: (err: Error) => void): this;\n        once(event: "finish", listener: () => void): this;\n        once(event: "frameError", listener: (frameType: number, errorCode: number) => void): this;\n        once(event: "pipe", listener: (src: stream.Readable) => void): this;\n        once(event: "unpipe", listener: (src: stream.Readable) => void): this;\n        once(event: "streamClosed", listener: (code: number) => void): this;\n        once(event: "timeout", listener: () => void): this;\n        once(event: "trailers", listener: (trailers: IncomingHttpHeaders, flags: number) => void): this;\n        once(event: "wantTrailers", listener: () => void): this;\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\n        prependListener(event: "aborted", listener: () => void): this;\n        prependListener(event: "close", listener: () => void): this;\n        prependListener(event: "data", listener: (chunk: Buffer | string) => void): this;\n        prependListener(event: "drain", listener: () => void): this;\n        prependListener(event: "end", listener: () => void): this;\n        prependListener(event: "error", listener: (err: Error) => void): this;\n        prependListener(event: "finish", listener: () => void): this;\n        prependListener(event: "frameError", listener: (frameType: number, errorCode: number) => void): this;\n        prependListener(event: "pipe", listener: (src: stream.Readable) => void): this;\n        prependListener(event: "unpipe", listener: (src: stream.Readable) => void): this;\n        prependListener(event: "streamClosed", listener: (code: number) => void): this;\n        prependListener(event: "timeout", listener: () => void): this;\n        prependListener(event: "trailers", listener: (trailers: IncomingHttpHeaders, flags: number) => void): this;\n        prependListener(event: "wantTrailers", listener: () => void): this;\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\n        prependOnceListener(event: "aborted", listener: () => void): this;\n        prependOnceListener(event: "close", listener: () => void): this;\n        prependOnceListener(event: "data", listener: (chunk: Buffer | string) => void): this;\n        prependOnceListener(event: "drain", listener: () => void): this;\n        prependOnceListener(event: "end", listener: () => void): this;\n        prependOnceListener(event: "error", listener: (err: Error) => void): this;\n        prependOnceListener(event: "finish", listener: () => void): this;\n        prependOnceListener(event: "frameError", listener: (frameType: number, errorCode: number) => void): this;\n        prependOnceListener(event: "pipe", listener: (src: stream.Readable) => void): this;\n        prependOnceListener(event: "unpipe", listener: (src: stream.Readable) => void): this;\n        prependOnceListener(event: "streamClosed", listener: (code: number) => void): this;\n        prependOnceListener(event: "timeout", listener: () => void): this;\n        prependOnceListener(event: "trailers", listener: (trailers: IncomingHttpHeaders, flags: number) => void): this;\n        prependOnceListener(event: "wantTrailers", listener: () => void): this;\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\n    }\n    export interface ClientHttp2Stream extends Http2Stream {\n        addListener(event: "continue", listener: () => {}): this;\n        addListener(\n            event: "headers",\n            listener: (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void,\n        ): this;\n        addListener(event: "push", listener: (headers: IncomingHttpHeaders, flags: number) => void): this;\n        addListener(\n            event: "response",\n            listener: (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void,\n        ): this;\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\n        emit(event: "continue"): boolean;\n        emit(event: "headers", headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number): boolean;\n        emit(event: "push", headers: IncomingHttpHeaders, flags: number): boolean;\n        emit(event: "response", headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number): boolean;\n        emit(event: string | symbol, ...args: any[]): boolean;\n        on(event: "continue", listener: () => {}): this;\n        on(\n            event: "headers",\n            listener: (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void,\n        ): this;\n        on(event: "push", listener: (headers: IncomingHttpHeaders, flags: number) => void): this;\n        on(\n            event: "response",\n            listener: (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void,\n        ): this;\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\n        once(event: "continue", listener: () => {}): this;\n        once(\n            event: "headers",\n            listener: (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void,\n        ): this;\n        once(event: "push", listener: (headers: IncomingHttpHeaders, flags: number) => void): this;\n        once(\n            event: "response",\n            listener: (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void,\n        ): this;\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\n        prependListener(event: "continue", listener: () => {}): this;\n        prependListener(\n            event: "headers",\n            listener: (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void,\n        ): this;\n        prependListener(event: "push", listener: (headers: IncomingHttpHeaders, flags: number) => void): this;\n        prependListener(\n            event: "response",\n            listener: (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void,\n        ): this;\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\n        prependOnceListener(event: "continue", listener: () => {}): this;\n        prependOnceListener(\n            event: "headers",\n            listener: (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void,\n        ): this;\n        prependOnceListener(event: "push", listener: (headers: IncomingHttpHeaders, flags: number) => void): this;\n        prependOnceListener(\n            event: "response",\n            listener: (headers: IncomingHttpHeaders & IncomingHttpStatusHeader, flags: number) => void,\n        ): this;\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\n    }\n    export interface ServerHttp2Stream extends Http2Stream {\n        /**\n         * True if headers were sent, false otherwise (read-only).\n         * @since v8.4.0\n         */\n        readonly headersSent: boolean;\n        /**\n         * Read-only property mapped to the `SETTINGS_ENABLE_PUSH` flag of the remote\n         * client\'s most recent `SETTINGS` frame. Will be `true` if the remote peer\n         * accepts push streams, `false` otherwise. Settings are the same for every `Http2Stream` in the same `Http2Session`.\n         * @since v8.4.0\n         */\n        readonly pushAllowed: boolean;\n        /**\n         * Sends an additional informational `HEADERS` frame to the connected HTTP/2 peer.\n         * @since v8.4.0\n         */\n        additionalHeaders(headers: OutgoingHttpHeaders): void;\n        /**\n         * Initiates a push stream. The callback is invoked with the new `Http2Stream` instance created for the push stream passed as the second argument, or an `Error` passed as the first argument.\n         *\n         * ```js\n         * import http2 from \'node:http2\';\n         * const server = http2.createServer();\n         * server.on(\'stream\', (stream) => {\n         *   stream.respond({ \':status\': 200 });\n         *   stream.pushStream({ \':path\': \'/\' }, (err, pushStream, headers) => {\n         *     if (err) throw err;\n         *     pushStream.respond({ \':status\': 200 });\n         *     pushStream.end(\'some pushed data\');\n         *   });\n         *   stream.end(\'some data\');\n         * });\n         * ```\n         *\n         * Setting the weight of a push stream is not allowed in the `HEADERS` frame. Pass\n         * a `weight` value to `http2stream.priority` with the `silent` option set to `true` to enable server-side bandwidth balancing between concurrent streams.\n         *\n         * Calling `http2stream.pushStream()` from within a pushed stream is not permitted\n         * and will throw an error.\n         * @since v8.4.0\n         * @param callback Callback that is called once the push stream has been initiated.\n         */\n        pushStream(\n            headers: OutgoingHttpHeaders,\n            callback?: (err: Error | null, pushStream: ServerHttp2Stream, headers: OutgoingHttpHeaders) => void,\n        ): void;\n        pushStream(\n            headers: OutgoingHttpHeaders,\n            options?: StreamPriorityOptions,\n            callback?: (err: Error | null, pushStream: ServerHttp2Stream, headers: OutgoingHttpHeaders) => void,\n        ): void;\n        /**\n         * ```js\n         * import http2 from \'node:http2\';\n         * const server = http2.createServer();\n         * server.on(\'stream\', (stream) => {\n         *   stream.respond({ \':status\': 200 });\n         *   stream.end(\'some data\');\n         * });\n         * ```\n         *\n         * Initiates a response. When the `options.waitForTrailers` option is set, the `\'wantTrailers\'` event\n         * will be emitted immediately after queuing the last chunk of payload data to be sent.\n         * The `http2stream.sendTrailers()` method can then be used to send trailing header fields to the peer.\n         *\n         * When `options.waitForTrailers` is set, the `Http2Stream` will not automatically\n         * close when the final `DATA` frame is transmitted. User code must call either `http2stream.sendTrailers()` or `http2stream.close()` to close the `Http2Stream`.\n         *\n         * ```js\n         * import http2 from \'node:http2\';\n         * const server = http2.createServer();\n         * server.on(\'stream\', (stream) => {\n         *   stream.respond({ \':status\': 200 }, { waitForTrailers: true });\n         *   stream.on(\'wantTrailers\', () => {\n         *     stream.sendTrailers({ ABC: \'some value to send\' });\n         *   });\n         *   stream.end(\'some data\');\n         * });\n         * ```\n         * @since v8.4.0\n         */\n        respond(headers?: OutgoingHttpHeaders, options?: ServerStreamResponseOptions): void;\n        /**\n         * Initiates a response whose data is read from the given file descriptor. No\n         * validation is performed on the given file descriptor. If an error occurs while\n         * attempting to read data using the file descriptor, the `Http2Stream` will be\n         * closed using an `RST_STREAM` frame using the standard `INTERNAL_ERROR` code.\n         *\n         * When used, the `Http2Stream` object\'s `Duplex` interface will be closed\n         * automatically.\n         *\n         * ```js\n         * import http2 from \'node:http2\';\n         * import fs from \'node:fs\';\n         *\n         * const server = http2.createServer();\n         * server.on(\'stream\', (stream) => {\n         *   const fd = fs.openSync(\'/some/file\', \'r\');\n         *\n         *   const stat = fs.fstatSync(fd);\n         *   const headers = {\n         *     \'content-length\': stat.size,\n         *     \'last-modified\': stat.mtime.toUTCString(),\n         *     \'content-type\': \'text/plain; charset=utf-8\',\n         *   };\n         *   stream.respondWithFD(fd, headers);\n         *   stream.on(\'close\', () => fs.closeSync(fd));\n         * });\n         * ```\n         *\n         * The optional `options.statCheck` function may be specified to give user code\n         * an opportunity to set additional content headers based on the `fs.Stat` details\n         * of the given fd. If the `statCheck` function is provided, the `http2stream.respondWithFD()` method will\n         * perform an `fs.fstat()` call to collect details on the provided file descriptor.\n         *\n         * The `offset` and `length` options may be used to limit the response to a\n         * specific range subset. This can be used, for instance, to support HTTP Range\n         * requests.\n         *\n         * The file descriptor or `FileHandle` is not closed when the stream is closed,\n         * so it will need to be closed manually once it is no longer needed.\n         * Using the same file descriptor concurrently for multiple streams\n         * is not supported and may result in data loss. Re-using a file descriptor\n         * after a stream has finished is supported.\n         *\n         * When the `options.waitForTrailers` option is set, the `\'wantTrailers\'` event\n         * will be emitted immediately after queuing the last chunk of payload data to be\n         * sent. The `http2stream.sendTrailers()` method can then be used to sent trailing\n         * header fields to the peer.\n         *\n         * When `options.waitForTrailers` is set, the `Http2Stream` will not automatically\n         * close when the final `DATA` frame is transmitted. User code _must_ call either `http2stream.sendTrailers()`\n         * or `http2stream.close()` to close the `Http2Stream`.\n         *\n         * ```js\n         * import http2 from \'node:http2\';\n         * import fs from \'node:fs\';\n         *\n         * const server = http2.createServer();\n         * server.on(\'stream\', (stream) => {\n         *   const fd = fs.openSync(\'/some/file\', \'r\');\n         *\n         *   const stat = fs.fstatSync(fd);\n         *   const headers = {\n         *     \'content-length\': stat.size,\n         *     \'last-modified\': stat.mtime.toUTCString(),\n         *     \'content-type\': \'text/plain; charset=utf-8\',\n         *   };\n         *   stream.respondWithFD(fd, headers, { waitForTrailers: true });\n         *   stream.on(\'wantTrailers\', () => {\n         *     stream.sendTrailers({ ABC: \'some value to send\' });\n         *   });\n         *\n         *   stream.on(\'close\', () => fs.closeSync(fd));\n         * });\n         * ```\n         * @since v8.4.0\n         * @param fd A readable file descriptor.\n         */\n        respondWithFD(\n            fd: number | fs.promises.FileHandle,\n            headers?: OutgoingHttpHeaders,\n            options?: ServerStreamFileResponseOptions,\n        ): void;\n        /**\n         * Sends a regular file as the response. The `path` must specify a regular file\n         * or an `\'error\'` event will be emitted on the `Http2Stream` object.\n         *\n         * When used, the `Http2Stream` object\'s `Duplex` interface will be closed\n         * automatically.\n         *\n         * The optional `options.statCheck` function may be specified to give user code\n         * an opportunity to set additional content headers based on the `fs.Stat` details\n         * of the given file:\n         *\n         * If an error occurs while attempting to read the file data, the `Http2Stream` will be closed using an\n         * `RST_STREAM` frame using the standard `INTERNAL_ERROR` code.\n         * If the `onError` callback is defined, then it will be called. Otherwise, the stream will be destroyed.\n         *\n         * Example using a file path:\n         *\n         * ```js\n         * import http2 from \'node:http2\';\n         * const server = http2.createServer();\n         * server.on(\'stream\', (stream) => {\n         *   function statCheck(stat, headers) {\n         *     headers[\'last-modified\'] = stat.mtime.toUTCString();\n         *   }\n         *\n         *   function onError(err) {\n         *     // stream.respond() can throw if the stream has been destroyed by\n         *     // the other side.\n         *     try {\n         *       if (err.code === \'ENOENT\') {\n         *         stream.respond({ \':status\': 404 });\n         *       } else {\n         *         stream.respond({ \':status\': 500 });\n         *       }\n         *     } catch (err) {\n         *       // Perform actual error handling.\n         *       console.error(err);\n         *     }\n         *     stream.end();\n         *   }\n         *\n         *   stream.respondWithFile(\'/some/file\',\n         *                          { \'content-type\': \'text/plain; charset=utf-8\' },\n         *                          { statCheck, onError });\n         * });\n         * ```\n         *\n         * The `options.statCheck` function may also be used to cancel the send operation\n         * by returning `false`. For instance, a conditional request may check the stat\n         * results to determine if the file has been modified to return an appropriate `304` response:\n         *\n         * ```js\n         * import http2 from \'node:http2\';\n         * const server = http2.createServer();\n         * server.on(\'stream\', (stream) => {\n         *   function statCheck(stat, headers) {\n         *     // Check the stat here...\n         *     stream.respond({ \':status\': 304 });\n         *     return false; // Cancel the send operation\n         *   }\n         *   stream.respondWithFile(\'/some/file\',\n         *                          { \'content-type\': \'text/plain; charset=utf-8\' },\n         *                          { statCheck });\n         * });\n         * ```\n         *\n         * The `content-length` header field will be automatically set.\n         *\n         * The `offset` and `length` options may be used to limit the response to a\n         * specific range subset. This can be used, for instance, to support HTTP Range\n         * requests.\n         *\n         * The `options.onError` function may also be used to handle all the errors\n         * that could happen before the delivery of the file is initiated. The\n         * default behavior is to destroy the stream.\n         *\n         * When the `options.waitForTrailers` option is set, the `\'wantTrailers\'` event\n         * will be emitted immediately after queuing the last chunk of payload data to be\n         * sent. The `http2stream.sendTrailers()` method can then be used to sent trailing\n         * header fields to the peer.\n         *\n         * When `options.waitForTrailers` is set, the `Http2Stream` will not automatically\n         * close when the final `DATA` frame is transmitted. User code must call either`http2stream.sendTrailers()` or `http2stream.close()` to close the`Http2Stream`.\n         *\n         * ```js\n         * import http2 from \'node:http2\';\n         * const server = http2.createServer();\n         * server.on(\'stream\', (stream) => {\n         *   stream.respondWithFile(\'/some/file\',\n         *                          { \'content-type\': \'text/plain; charset=utf-8\' },\n         *                          { waitForTrailers: true });\n         *   stream.on(\'wantTrailers\', () => {\n         *     stream.sendTrailers({ ABC: \'some value to send\' });\n         *   });\n         * });\n         * ```\n         * @since v8.4.0\n         */\n        respondWithFile(\n            path: string,\n            headers?: OutgoingHttpHeaders,\n            options?: ServerStreamFileResponseOptionsWithError,\n        ): void;\n    }\n    // Http2Session\n    export interface Settings {\n        headerTableSize?: number | undefined;\n        enablePush?: boolean | undefined;\n        initialWindowSize?: number | undefined;\n        maxFrameSize?: number | undefined;\n        maxConcurrentStreams?: number | undefined;\n        maxHeaderListSize?: number | undefined;\n        enableConnectProtocol?: boolean | undefined;\n    }\n    export interface ClientSessionRequestOptions {\n        endStream?: boolean | undefined;\n        exclusive?: boolean | undefined;\n        parent?: number | undefined;\n        weight?: number | undefined;\n        waitForTrailers?: boolean | undefined;\n        signal?: AbortSignal | undefined;\n    }\n    export interface SessionState {\n        effectiveLocalWindowSize?: number | undefined;\n        effectiveRecvDataLength?: number | undefined;\n        nextStreamID?: number | undefined;\n        localWindowSize?: number | undefined;\n        lastProcStreamID?: number | undefined;\n        remoteWindowSize?: number | undefined;\n        outboundQueueSize?: number | undefined;\n        deflateDynamicTableSize?: number | undefined;\n        inflateDynamicTableSize?: number | undefined;\n    }\n    export interface Http2Session extends EventEmitter {\n        /**\n         * Value will be `undefined` if the `Http2Session` is not yet connected to a\n         * socket, `h2c` if the `Http2Session` is not connected to a `TLSSocket`, or\n         * will return the value of the connected `TLSSocket`\'s own `alpnProtocol` property.\n         * @since v9.4.0\n         */\n        readonly alpnProtocol?: string | undefined;\n        /**\n         * Will be `true` if this `Http2Session` instance has been closed, otherwise `false`.\n         * @since v9.4.0\n         */\n        readonly closed: boolean;\n        /**\n         * Will be `true` if this `Http2Session` instance is still connecting, will be set\n         * to `false` before emitting `connect` event and/or calling the `http2.connect` callback.\n         * @since v10.0.0\n         */\n        readonly connecting: boolean;\n        /**\n         * Will be `true` if this `Http2Session` instance has been destroyed and must no\n         * longer be used, otherwise `false`.\n         * @since v8.4.0\n         */\n        readonly destroyed: boolean;\n        /**\n         * Value is `undefined` if the `Http2Session` session socket has not yet been\n         * connected, `true` if the `Http2Session` is connected with a `TLSSocket`,\n         * and `false` if the `Http2Session` is connected to any other kind of socket\n         * or stream.\n         * @since v9.4.0\n         */\n        readonly encrypted?: boolean | undefined;\n        /**\n         * A prototype-less object describing the current local settings of this `Http2Session`.\n         * The local settings are local to _this_`Http2Session` instance.\n         * @since v8.4.0\n         */\n        readonly localSettings: Settings;\n        /**\n         * If the `Http2Session` is connected to a `TLSSocket`, the `originSet` property\n         * will return an `Array` of origins for which the `Http2Session` may be\n         * considered authoritative.\n         *\n         * The `originSet` property is only available when using a secure TLS connection.\n         * @since v9.4.0\n         */\n        readonly originSet?: string[] | undefined;\n        /**\n         * Indicates whether the `Http2Session` is currently waiting for acknowledgment of\n         * a sent `SETTINGS` frame. Will be `true` after calling the `http2session.settings()` method.\n         * Will be `false` once all sent `SETTINGS` frames have been acknowledged.\n         * @since v8.4.0\n         */\n        readonly pendingSettingsAck: boolean;\n        /**\n         * A prototype-less object describing the current remote settings of this`Http2Session`.\n         * The remote settings are set by the _connected_ HTTP/2 peer.\n         * @since v8.4.0\n         */\n        readonly remoteSettings: Settings;\n        /**\n         * Returns a `Proxy` object that acts as a `net.Socket` (or `tls.TLSSocket`) but\n         * limits available methods to ones safe to use with HTTP/2.\n         *\n         * `destroy`, `emit`, `end`, `pause`, `read`, `resume`, and `write` will throw\n         * an error with code `ERR_HTTP2_NO_SOCKET_MANIPULATION`. See `Http2Session and Sockets` for more information.\n         *\n         * `setTimeout` method will be called on this `Http2Session`.\n         *\n         * All other interactions will be routed directly to the socket.\n         * @since v8.4.0\n         */\n        readonly socket: net.Socket | tls.TLSSocket;\n        /**\n         * Provides miscellaneous information about the current state of the`Http2Session`.\n         *\n         * An object describing the current status of this `Http2Session`.\n         * @since v8.4.0\n         */\n        readonly state: SessionState;\n        /**\n         * The `http2session.type` will be equal to `http2.constants.NGHTTP2_SESSION_SERVER` if this `Http2Session` instance is a\n         * server, and `http2.constants.NGHTTP2_SESSION_CLIENT` if the instance is a\n         * client.\n         * @since v8.4.0\n         */\n        readonly type: number;\n        /**\n         * Gracefully closes the `Http2Session`, allowing any existing streams to\n         * complete on their own and preventing new `Http2Stream` instances from being\n         * created. Once closed, `http2session.destroy()`_might_ be called if there\n         * are no open `Http2Stream` instances.\n         *\n         * If specified, the `callback` function is registered as a handler for the`\'close\'` event.\n         * @since v9.4.0\n         */\n        close(callback?: () => void): void;\n        /**\n         * Immediately terminates the `Http2Session` and the associated `net.Socket` or `tls.TLSSocket`.\n         *\n         * Once destroyed, the `Http2Session` will emit the `\'close\'` event. If `error` is not undefined, an `\'error\'` event will be emitted immediately before the `\'close\'` event.\n         *\n         * If there are any remaining open `Http2Streams` associated with the `Http2Session`, those will also be destroyed.\n         * @since v8.4.0\n         * @param error An `Error` object if the `Http2Session` is being destroyed due to an error.\n         * @param code The HTTP/2 error code to send in the final `GOAWAY` frame. If unspecified, and `error` is not undefined, the default is `INTERNAL_ERROR`, otherwise defaults to `NO_ERROR`.\n         */\n        destroy(error?: Error, code?: number): void;\n        /**\n         * Transmits a `GOAWAY` frame to the connected peer _without_ shutting down the`Http2Session`.\n         * @since v9.4.0\n         * @param code An HTTP/2 error code\n         * @param lastStreamID The numeric ID of the last processed `Http2Stream`\n         * @param opaqueData A `TypedArray` or `DataView` instance containing additional data to be carried within the `GOAWAY` frame.\n         */\n        goaway(code?: number, lastStreamID?: number, opaqueData?: NodeJS.ArrayBufferView): void;\n        /**\n         * Sends a `PING` frame to the connected HTTP/2 peer. A `callback` function must\n         * be provided. The method will return `true` if the `PING` was sent, `false` otherwise.\n         *\n         * The maximum number of outstanding (unacknowledged) pings is determined by the `maxOutstandingPings` configuration option. The default maximum is 10.\n         *\n         * If provided, the `payload` must be a `Buffer`, `TypedArray`, or `DataView` containing 8 bytes of data that will be transmitted with the `PING` and\n         * returned with the ping acknowledgment.\n         *\n         * The callback will be invoked with three arguments: an error argument that will\n         * be `null` if the `PING` was successfully acknowledged, a `duration` argument\n         * that reports the number of milliseconds elapsed since the ping was sent and the\n         * acknowledgment was received, and a `Buffer` containing the 8-byte `PING` payload.\n         *\n         * ```js\n         * session.ping(Buffer.from(\'abcdefgh\'), (err, duration, payload) => {\n         *   if (!err) {\n         *     console.log(`Ping acknowledged in ${duration} milliseconds`);\n         *     console.log(`With payload \'${payload.toString()}\'`);\n         *   }\n         * });\n         * ```\n         *\n         * If the `payload` argument is not specified, the default payload will be the\n         * 64-bit timestamp (little endian) marking the start of the `PING` duration.\n         * @since v8.9.3\n         * @param payload Optional ping payload.\n         */\n        ping(callback: (err: Error | null, duration: number, payload: Buffer) => void): boolean;\n        ping(\n            payload: NodeJS.ArrayBufferView,\n            callback: (err: Error | null, duration: number, payload: Buffer) => void,\n        ): boolean;\n        /**\n         * Calls `ref()` on this `Http2Session` instance\'s underlying `net.Socket`.\n         * @since v9.4.0\n         */\n        ref(): void;\n        /**\n         * Sets the local endpoint\'s window size.\n         * The `windowSize` is the total window size to set, not\n         * the delta.\n         *\n         * ```js\n         * import http2 from \'node:http2\';\n         *\n         * const server = http2.createServer();\n         * const expectedWindowSize = 2 ** 20;\n         * server.on(\'connect\', (session) => {\n         *\n         *   // Set local window size to be 2 ** 20\n         *   session.setLocalWindowSize(expectedWindowSize);\n         * });\n         * ```\n         * @since v15.3.0, v14.18.0\n         */\n        setLocalWindowSize(windowSize: number): void;\n        /**\n         * Used to set a callback function that is called when there is no activity on\n         * the `Http2Session` after `msecs` milliseconds. The given `callback` is\n         * registered as a listener on the `\'timeout\'` event.\n         * @since v8.4.0\n         */\n        setTimeout(msecs: number, callback?: () => void): void;\n        /**\n         * Updates the current local settings for this `Http2Session` and sends a new `SETTINGS` frame to the connected HTTP/2 peer.\n         *\n         * Once called, the `http2session.pendingSettingsAck` property will be `true` while the session is waiting for the remote peer to acknowledge the new\n         * settings.\n         *\n         * The new settings will not become effective until the `SETTINGS` acknowledgment\n         * is received and the `\'localSettings\'` event is emitted. It is possible to send\n         * multiple `SETTINGS` frames while acknowledgment is still pending.\n         * @since v8.4.0\n         * @param callback Callback that is called once the session is connected or right away if the session is already connected.\n         */\n        settings(\n            settings: Settings,\n            callback?: (err: Error | null, settings: Settings, duration: number) => void,\n        ): void;\n        /**\n         * Calls `unref()` on this `Http2Session`instance\'s underlying `net.Socket`.\n         * @since v9.4.0\n         */\n        unref(): void;\n        addListener(event: "close", listener: () => void): this;\n        addListener(event: "error", listener: (err: Error) => void): this;\n        addListener(\n            event: "frameError",\n            listener: (frameType: number, errorCode: number, streamID: number) => void,\n        ): this;\n        addListener(\n            event: "goaway",\n            listener: (errorCode: number, lastStreamID: number, opaqueData?: Buffer) => void,\n        ): this;\n        addListener(event: "localSettings", listener: (settings: Settings) => void): this;\n        addListener(event: "ping", listener: () => void): this;\n        addListener(event: "remoteSettings", listener: (settings: Settings) => void): this;\n        addListener(event: "timeout", listener: () => void): this;\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\n        emit(event: "close"): boolean;\n        emit(event: "error", err: Error): boolean;\n        emit(event: "frameError", frameType: number, errorCode: number, streamID: number): boolean;\n        emit(event: "goaway", errorCode: number, lastStreamID: number, opaqueData?: Buffer): boolean;\n        emit(event: "localSettings", settings: Settings): boolean;\n        emit(event: "ping"): boolean;\n        emit(event: "remoteSettings", settings: Settings): boolean;\n        emit(event: "timeout"): boolean;\n        emit(event: string | symbol, ...args: any[]): boolean;\n        on(event: "close", listener: () => void): this;\n        on(event: "error", listener: (err: Error) => void): this;\n        on(event: "frameError", listener: (frameType: number, errorCode: number, streamID: number) => void): this;\n        on(event: "goaway", listener: (errorCode: number, lastStreamID: number, opaqueData?: Buffer) => void): this;\n        on(event: "localSettings", listener: (settings: Settings) => void): this;\n        on(event: "ping", listener: () => void): this;\n        on(event: "remoteSettings", listener: (settings: Settings) => void): this;\n        on(event: "timeout", listener: () => void): this;\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\n        once(event: "close", listener: () => void): this;\n        once(event: "error", listener: (err: Error) => void): this;\n        once(event: "frameError", listener: (frameType: number, errorCode: number, streamID: number) => void): this;\n        once(event: "goaway", listener: (errorCode: number, lastStreamID: number, opaqueData?: Buffer) => void): this;\n        once(event: "localSettings", listener: (settings: Settings) => void): this;\n        once(event: "ping", listener: () => void): this;\n        once(event: "remoteSettings", listener: (settings: Settings) => void): this;\n        once(event: "timeout", listener: () => void): this;\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\n        prependListener(event: "close", listener: () => void): this;\n        prependListener(event: "error", listener: (err: Error) => void): this;\n        prependListener(\n            event: "frameError",\n            listener: (frameType: number, errorCode: number, streamID: number) => void,\n        ): this;\n        prependListener(\n            event: "goaway",\n            listener: (errorCode: number, lastStreamID: number, opaqueData?: Buffer) => void,\n        ): this;\n        prependListener(event: "localSettings", listener: (settings: Settings) => void): this;\n        prependListener(event: "ping", listener: () => void): this;\n        prependListener(event: "remoteSettings", listener: (settings: Settings) => void): this;\n        prependListener(event: "timeout", listener: () => void): this;\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\n        prependOnceListener(event: "close", listener: () => void): this;\n        prependOnceListener(event: "error", listener: (err: Error) => void): this;\n        prependOnceListener(\n            event: "frameError",\n            listener: (frameType: number, errorCode: number, streamID: number) => void,\n        ): this;\n        prependOnceListener(\n            event: "goaway",\n            listener: (errorCode: number, lastStreamID: number, opaqueData?: Buffer) => void,\n        ): this;\n        prependOnceListener(event: "localSettings", listener: (settings: Settings) => void): this;\n        prependOnceListener(event: "ping", listener: () => void): this;\n        prependOnceListener(event: "remoteSettings", listener: (settings: Settings) => void): this;\n        prependOnceListener(event: "timeout", listener: () => void): this;\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\n    }\n    export interface ClientHttp2Session extends Http2Session {\n        /**\n         * For HTTP/2 Client `Http2Session` instances only, the `http2session.request()` creates and returns an `Http2Stream` instance that can be used to send an\n         * HTTP/2 request to the connected server.\n         *\n         * When a `ClientHttp2Session` is first created, the socket may not yet be\n         * connected. if `clienthttp2session.request()` is called during this time, the\n         * actual request will be deferred until the socket is ready to go.\n         * If the `session` is closed before the actual request be executed, an `ERR_HTTP2_GOAWAY_SESSION` is thrown.\n         *\n         * This method is only available if `http2session.type` is equal to `http2.constants.NGHTTP2_SESSION_CLIENT`.\n         *\n         * ```js\n         * import http2 from \'node:http2\';\n         * const clientSession = http2.connect(\'https://localhost:1234\');\n         * const {\n         *   HTTP2_HEADER_PATH,\n         *   HTTP2_HEADER_STATUS,\n         * } = http2.constants;\n         *\n         * const req = clientSession.request({ [HTTP2_HEADER_PATH]: \'/\' });\n         * req.on(\'response\', (headers) => {\n         *   console.log(headers[HTTP2_HEADER_STATUS]);\n         *   req.on(\'data\', (chunk) => { // ..  });\n         *   req.on(\'end\', () => { // ..  });\n         * });\n         * ```\n         *\n         * When the `options.waitForTrailers` option is set, the `\'wantTrailers\'` event\n         * is emitted immediately after queuing the last chunk of payload data to be sent.\n         * The `http2stream.sendTrailers()` method can then be called to send trailing\n         * headers to the peer.\n         *\n         * When `options.waitForTrailers` is set, the `Http2Stream` will not automatically\n         * close when the final `DATA` frame is transmitted. User code must call either`http2stream.sendTrailers()` or `http2stream.close()` to close the`Http2Stream`.\n         *\n         * When `options.signal` is set with an `AbortSignal` and then `abort` on the\n         * corresponding `AbortController` is called, the request will emit an `\'error\'`event with an `AbortError` error.\n         *\n         * The `:method` and `:path` pseudo-headers are not specified within `headers`,\n         * they respectively default to:\n         *\n         * * `:method` \\= `\'GET\'`\n         * * `:path` \\= `/`\n         * @since v8.4.0\n         */\n        request(headers?: OutgoingHttpHeaders, options?: ClientSessionRequestOptions): ClientHttp2Stream;\n        addListener(event: "altsvc", listener: (alt: string, origin: string, stream: number) => void): this;\n        addListener(event: "origin", listener: (origins: string[]) => void): this;\n        addListener(\n            event: "connect",\n            listener: (session: ClientHttp2Session, socket: net.Socket | tls.TLSSocket) => void,\n        ): this;\n        addListener(\n            event: "stream",\n            listener: (\n                stream: ClientHttp2Stream,\n                headers: IncomingHttpHeaders & IncomingHttpStatusHeader,\n                flags: number,\n            ) => void,\n        ): this;\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\n        emit(event: "altsvc", alt: string, origin: string, stream: number): boolean;\n        emit(event: "origin", origins: readonly string[]): boolean;\n        emit(event: "connect", session: ClientHttp2Session, socket: net.Socket | tls.TLSSocket): boolean;\n        emit(\n            event: "stream",\n            stream: ClientHttp2Stream,\n            headers: IncomingHttpHeaders & IncomingHttpStatusHeader,\n            flags: number,\n        ): boolean;\n        emit(event: string | symbol, ...args: any[]): boolean;\n        on(event: "altsvc", listener: (alt: string, origin: string, stream: number) => void): this;\n        on(event: "origin", listener: (origins: string[]) => void): this;\n        on(event: "connect", listener: (session: ClientHttp2Session, socket: net.Socket | tls.TLSSocket) => void): this;\n        on(\n            event: "stream",\n            listener: (\n                stream: ClientHttp2Stream,\n                headers: IncomingHttpHeaders & IncomingHttpStatusHeader,\n                flags: number,\n            ) => void,\n        ): this;\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\n        once(event: "altsvc", listener: (alt: string, origin: string, stream: number) => void): this;\n        once(event: "origin", listener: (origins: string[]) => void): this;\n        once(\n            event: "connect",\n            listener: (session: ClientHttp2Session, socket: net.Socket | tls.TLSSocket) => void,\n        ): this;\n        once(\n            event: "stream",\n            listener: (\n                stream: ClientHttp2Stream,\n                headers: IncomingHttpHeaders & IncomingHttpStatusHeader,\n                flags: number,\n            ) => void,\n        ): this;\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\n        prependListener(event: "altsvc", listener: (alt: string, origin: string, stream: number) => void): this;\n        prependListener(event: "origin", listener: (origins: string[]) => void): this;\n        prependListener(\n            event: "connect",\n            listener: (session: ClientHttp2Session, socket: net.Socket | tls.TLSSocket) => void,\n        ): this;\n        prependListener(\n            event: "stream",\n            listener: (\n                stream: ClientHttp2Stream,\n                headers: IncomingHttpHeaders & IncomingHttpStatusHeader,\n                flags: number,\n            ) => void,\n        ): this;\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\n        prependOnceListener(event: "altsvc", listener: (alt: string, origin: string, stream: number) => void): this;\n        prependOnceListener(event: "origin", listener: (origins: string[]) => void): this;\n        prependOnceListener(\n            event: "connect",\n            listener: (session: ClientHttp2Session, socket: net.Socket | tls.TLSSocket) => void,\n        ): this;\n        prependOnceListener(\n            event: "stream",\n            listener: (\n                stream: ClientHttp2Stream,\n                headers: IncomingHttpHeaders & IncomingHttpStatusHeader,\n                flags: number,\n            ) => void,\n        ): this;\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\n    }\n    export interface AlternativeServiceOptions {\n        origin: number | string | url.URL;\n    }\n    export interface ServerHttp2Session<\n        Http1Request extends typeof IncomingMessage = typeof IncomingMessage,\n        Http1Response extends typeof ServerResponse<InstanceType<Http1Request>> = typeof ServerResponse,\n        Http2Request extends typeof Http2ServerRequest = typeof Http2ServerRequest,\n        Http2Response extends typeof Http2ServerResponse<InstanceType<Http2Request>> = typeof Http2ServerResponse,\n    > extends Http2Session {\n        readonly server:\n            | Http2Server<Http1Request, Http1Response, Http2Request, Http2Response>\n            | Http2SecureServer<Http1Request, Http1Response, Http2Request, Http2Response>;\n        /**\n         * Submits an `ALTSVC` frame (as defined by [RFC 7838](https://tools.ietf.org/html/rfc7838)) to the connected client.\n         *\n         * ```js\n         * import http2 from \'node:http2\';\n         *\n         * const server = http2.createServer();\n         * server.on(\'session\', (session) => {\n         *   // Set altsvc for origin https://example.org:80\n         *   session.altsvc(\'h2=":8000"\', \'https://example.org:80\');\n         * });\n         *\n         * server.on(\'stream\', (stream) => {\n         *   // Set altsvc for a specific stream\n         *   stream.session.altsvc(\'h2=":8000"\', stream.id);\n         * });\n         * ```\n         *\n         * Sending an `ALTSVC` frame with a specific stream ID indicates that the alternate\n         * service is associated with the origin of the given `Http2Stream`.\n         *\n         * The `alt` and origin string _must_ contain only ASCII bytes and are\n         * strictly interpreted as a sequence of ASCII bytes. The special value `\'clear\'`may be passed to clear any previously set alternative service for a given\n         * domain.\n         *\n         * When a string is passed for the `originOrStream` argument, it will be parsed as\n         * a URL and the origin will be derived. For instance, the origin for the\n         * HTTP URL `\'https://example.org/foo/bar\'` is the ASCII string`\'https://example.org\'`. An error will be thrown if either the given string\n         * cannot be parsed as a URL or if a valid origin cannot be derived.\n         *\n         * A `URL` object, or any object with an `origin` property, may be passed as`originOrStream`, in which case the value of the `origin` property will be\n         * used. The value of the `origin` property _must_ be a properly serialized\n         * ASCII origin.\n         * @since v9.4.0\n         * @param alt A description of the alternative service configuration as defined by `RFC 7838`.\n         * @param originOrStream Either a URL string specifying the origin (or an `Object` with an `origin` property) or the numeric identifier of an active `Http2Stream` as given by the\n         * `http2stream.id` property.\n         */\n        altsvc(alt: string, originOrStream: number | string | url.URL | AlternativeServiceOptions): void;\n        /**\n         * Submits an `ORIGIN` frame (as defined by [RFC 8336](https://tools.ietf.org/html/rfc8336)) to the connected client\n         * to advertise the set of origins for which the server is capable of providing\n         * authoritative responses.\n         *\n         * ```js\n         * import http2 from \'node:http2\';\n         * const options = getSecureOptionsSomehow();\n         * const server = http2.createSecureServer(options);\n         * server.on(\'stream\', (stream) => {\n         *   stream.respond();\n         *   stream.end(\'ok\');\n         * });\n         * server.on(\'session\', (session) => {\n         *   session.origin(\'https://example.com\', \'https://example.org\');\n         * });\n         * ```\n         *\n         * When a string is passed as an `origin`, it will be parsed as a URL and the\n         * origin will be derived. For instance, the origin for the HTTP URL `\'https://example.org/foo/bar\'` is the ASCII string` \'https://example.org\'`. An error will be thrown if either the given\n         * string\n         * cannot be parsed as a URL or if a valid origin cannot be derived.\n         *\n         * A `URL` object, or any object with an `origin` property, may be passed as\n         * an `origin`, in which case the value of the `origin` property will be\n         * used. The value of the `origin` property _must_ be a properly serialized\n         * ASCII origin.\n         *\n         * Alternatively, the `origins` option may be used when creating a new HTTP/2\n         * server using the `http2.createSecureServer()` method:\n         *\n         * ```js\n         * import http2 from \'node:http2\';\n         * const options = getSecureOptionsSomehow();\n         * options.origins = [\'https://example.com\', \'https://example.org\'];\n         * const server = http2.createSecureServer(options);\n         * server.on(\'stream\', (stream) => {\n         *   stream.respond();\n         *   stream.end(\'ok\');\n         * });\n         * ```\n         * @since v10.12.0\n         * @param origins One or more URL Strings passed as separate arguments.\n         */\n        origin(\n            ...origins: Array<\n                | string\n                | url.URL\n                | {\n                    origin: string;\n                }\n            >\n        ): void;\n        addListener(\n            event: "connect",\n            listener: (\n                session: ServerHttp2Session<Http1Request, Http1Response, Http2Request, Http2Response>,\n                socket: net.Socket | tls.TLSSocket,\n            ) => void,\n        ): this;\n        addListener(\n            event: "stream",\n            listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void,\n        ): this;\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\n        emit(\n            event: "connect",\n            session: ServerHttp2Session<Http1Request, Http1Response, Http2Request, Http2Response>,\n            socket: net.Socket | tls.TLSSocket,\n        ): boolean;\n        emit(event: "stream", stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number): boolean;\n        emit(event: string | symbol, ...args: any[]): boolean;\n        on(\n            event: "connect",\n            listener: (\n                session: ServerHttp2Session<Http1Request, Http1Response, Http2Request, Http2Response>,\n                socket: net.Socket | tls.TLSSocket,\n            ) => void,\n        ): this;\n        on(\n            event: "stream",\n            listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void,\n        ): this;\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\n        once(\n            event: "connect",\n            listener: (\n                session: ServerHttp2Session<Http1Request, Http1Response, Http2Request, Http2Response>,\n                socket: net.Socket | tls.TLSSocket,\n            ) => void,\n        ): this;\n        once(\n            event: "stream",\n            listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void,\n        ): this;\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\n        prependListener(\n            event: "connect",\n            listener: (\n                session: ServerHttp2Session<Http1Request, Http1Response, Http2Request, Http2Response>,\n                socket: net.Socket | tls.TLSSocket,\n            ) => void,\n        ): this;\n        prependListener(\n            event: "stream",\n            listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void,\n        ): this;\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\n        prependOnceListener(\n            event: "connect",\n            listener: (\n                session: ServerHttp2Session<Http1Request, Http1Response, Http2Request, Http2Response>,\n                socket: net.Socket | tls.TLSSocket,\n            ) => void,\n        ): this;\n        prependOnceListener(\n            event: "stream",\n            listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void,\n        ): this;\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\n    }\n    // Http2Server\n    export interface SessionOptions {\n        /**\n         * Sets the maximum dynamic table size for deflating header fields.\n         * @default 4Kib\n         */\n        maxDeflateDynamicTableSize?: number | undefined;\n        /**\n         * Sets the maximum number of settings entries per `SETTINGS` frame.\n         * The minimum value allowed is `1`.\n         * @default 32\n         */\n        maxSettings?: number | undefined;\n        /**\n         * Sets the maximum memory that the `Http2Session` is permitted to use.\n         * The value is expressed in terms of number of megabytes, e.g. `1` equal 1 megabyte.\n         * The minimum value allowed is `1`.\n         * This is a credit based limit, existing `Http2Stream`s may cause this limit to be exceeded,\n         * but new `Http2Stream` instances will be rejected while this limit is exceeded.\n         * The current number of `Http2Stream` sessions, the current memory use of the header compression tables,\n         * current data queued to be sent, and unacknowledged `PING` and `SETTINGS` frames are all counted towards the current limit.\n         * @default 10\n         */\n        maxSessionMemory?: number | undefined;\n        /**\n         * Sets the maximum number of header entries.\n         * This is similar to `server.maxHeadersCount` or `request.maxHeadersCount` in the `node:http` module.\n         * The minimum value is `1`.\n         * @default 128\n         */\n        maxHeaderListPairs?: number | undefined;\n        /**\n         * Sets the maximum number of outstanding, unacknowledged pings.\n         * @default 10\n         */\n        maxOutstandingPings?: number | undefined;\n        /**\n         * Sets the maximum allowed size for a serialized, compressed block of headers.\n         * Attempts to send headers that exceed this limit will result in\n         * a `\'frameError\'` event being emitted and the stream being closed and destroyed.\n         */\n        maxSendHeaderBlockLength?: number | undefined;\n        /**\n         * Strategy used for determining the amount of padding to use for `HEADERS` and `DATA` frames.\n         * @default http2.constants.PADDING_STRATEGY_NONE\n         */\n        paddingStrategy?: number | undefined;\n        /**\n         * Sets the maximum number of concurrent streams for the remote peer as if a `SETTINGS` frame had been received.\n         * Will be overridden if the remote peer sets its own value for `maxConcurrentStreams`.\n         * @default 100\n         */\n        peerMaxConcurrentStreams?: number | undefined;\n        /**\n         * The initial settings to send to the remote peer upon connection.\n         */\n        settings?: Settings | undefined;\n        /**\n         * The array of integer values determines the settings types,\n         * which are included in the `CustomSettings`-property of the received remoteSettings.\n         * Please see the `CustomSettings`-property of the `Http2Settings` object for more information, on the allowed setting types.\n         */\n        remoteCustomSettings?: number[] | undefined;\n        /**\n         * Specifies a timeout in milliseconds that\n         * a server should wait when an [`\'unknownProtocol\'`][] is emitted. If the\n         * socket has not been destroyed by that time the server will destroy it.\n         * @default 100000\n         */\n        unknownProtocolTimeout?: number | undefined;\n    }\n    export interface ClientSessionOptions extends SessionOptions {\n        /**\n         * Sets the maximum number of reserved push streams the client will accept at any given time.\n         * Once the current number of currently reserved push streams exceeds reaches this limit,\n         * new push streams sent by the server will be automatically rejected.\n         * The minimum allowed value is 0. The maximum allowed value is 2<sup>32</sup>-1.\n         * A negative value sets this option to the maximum allowed value.\n         * @default 200\n         */\n        maxReservedRemoteStreams?: number | undefined;\n        /**\n         * An optional callback that receives the `URL` instance passed to `connect` and the `options` object,\n         * and returns any `Duplex` stream that is to be used as the connection for this session.\n         */\n        createConnection?: ((authority: url.URL, option: SessionOptions) => stream.Duplex) | undefined;\n        /**\n         * The protocol to connect with, if not set in the `authority`.\n         * Value may be either `\'http:\'` or `\'https:\'`.\n         * @default \'https:\'\n         */\n        protocol?: "http:" | "https:" | undefined;\n    }\n    export interface ServerSessionOptions<\n        Http1Request extends typeof IncomingMessage = typeof IncomingMessage,\n        Http1Response extends typeof ServerResponse<InstanceType<Http1Request>> = typeof ServerResponse,\n        Http2Request extends typeof Http2ServerRequest = typeof Http2ServerRequest,\n        Http2Response extends typeof Http2ServerResponse<InstanceType<Http2Request>> = typeof Http2ServerResponse,\n    > extends SessionOptions {\n        streamResetBurst?: number | undefined;\n        streamResetRate?: number | undefined;\n        Http1IncomingMessage?: Http1Request | undefined;\n        Http1ServerResponse?: Http1Response | undefined;\n        Http2ServerRequest?: Http2Request | undefined;\n        Http2ServerResponse?: Http2Response | undefined;\n    }\n    export interface SecureClientSessionOptions extends ClientSessionOptions, tls.ConnectionOptions {}\n    export interface SecureServerSessionOptions<\n        Http1Request extends typeof IncomingMessage = typeof IncomingMessage,\n        Http1Response extends typeof ServerResponse<InstanceType<Http1Request>> = typeof ServerResponse,\n        Http2Request extends typeof Http2ServerRequest = typeof Http2ServerRequest,\n        Http2Response extends typeof Http2ServerResponse<InstanceType<Http2Request>> = typeof Http2ServerResponse,\n    > extends ServerSessionOptions<Http1Request, Http1Response, Http2Request, Http2Response>, tls.TlsOptions {}\n    export interface ServerOptions<\n        Http1Request extends typeof IncomingMessage = typeof IncomingMessage,\n        Http1Response extends typeof ServerResponse<InstanceType<Http1Request>> = typeof ServerResponse,\n        Http2Request extends typeof Http2ServerRequest = typeof Http2ServerRequest,\n        Http2Response extends typeof Http2ServerResponse<InstanceType<Http2Request>> = typeof Http2ServerResponse,\n    > extends ServerSessionOptions<Http1Request, Http1Response, Http2Request, Http2Response> {}\n    export interface SecureServerOptions<\n        Http1Request extends typeof IncomingMessage = typeof IncomingMessage,\n        Http1Response extends typeof ServerResponse<InstanceType<Http1Request>> = typeof ServerResponse,\n        Http2Request extends typeof Http2ServerRequest = typeof Http2ServerRequest,\n        Http2Response extends typeof Http2ServerResponse<InstanceType<Http2Request>> = typeof Http2ServerResponse,\n    > extends SecureServerSessionOptions<Http1Request, Http1Response, Http2Request, Http2Response> {\n        allowHTTP1?: boolean | undefined;\n        origins?: string[] | undefined;\n    }\n    interface HTTP2ServerCommon {\n        setTimeout(msec?: number, callback?: () => void): this;\n        /**\n         * Throws ERR_HTTP2_INVALID_SETTING_VALUE for invalid settings values.\n         * Throws ERR_INVALID_ARG_TYPE for invalid settings argument.\n         */\n        updateSettings(settings: Settings): void;\n    }\n    export interface Http2Server<\n        Http1Request extends typeof IncomingMessage = typeof IncomingMessage,\n        Http1Response extends typeof ServerResponse<InstanceType<Http1Request>> = typeof ServerResponse,\n        Http2Request extends typeof Http2ServerRequest = typeof Http2ServerRequest,\n        Http2Response extends typeof Http2ServerResponse<InstanceType<Http2Request>> = typeof Http2ServerResponse,\n    > extends net.Server, HTTP2ServerCommon {\n        addListener(\n            event: "checkContinue",\n            listener: (request: InstanceType<Http2Request>, response: InstanceType<Http2Response>) => void,\n        ): this;\n        addListener(\n            event: "request",\n            listener: (request: InstanceType<Http2Request>, response: InstanceType<Http2Response>) => void,\n        ): this;\n        addListener(\n            event: "session",\n            listener: (session: ServerHttp2Session<Http1Request, Http1Response, Http2Request, Http2Response>) => void,\n        ): this;\n        addListener(event: "sessionError", listener: (err: Error) => void): this;\n        addListener(\n            event: "stream",\n            listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void,\n        ): this;\n        addListener(event: "timeout", listener: () => void): this;\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\n        emit(\n            event: "checkContinue",\n            request: InstanceType<Http2Request>,\n            response: InstanceType<Http2Response>,\n        ): boolean;\n        emit(event: "request", request: InstanceType<Http2Request>, response: InstanceType<Http2Response>): boolean;\n        emit(\n            event: "session",\n            session: ServerHttp2Session<Http1Request, Http1Response, Http2Request, Http2Response>,\n        ): boolean;\n        emit(event: "sessionError", err: Error): boolean;\n        emit(event: "stream", stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number): boolean;\n        emit(event: "timeout"): boolean;\n        emit(event: string | symbol, ...args: any[]): boolean;\n        on(\n            event: "checkContinue",\n            listener: (request: InstanceType<Http2Request>, response: InstanceType<Http2Response>) => void,\n        ): this;\n        on(\n            event: "request",\n            listener: (request: InstanceType<Http2Request>, response: InstanceType<Http2Response>) => void,\n        ): this;\n        on(\n            event: "session",\n            listener: (session: ServerHttp2Session<Http1Request, Http1Response, Http2Request, Http2Response>) => void,\n        ): this;\n        on(event: "sessionError", listener: (err: Error) => void): this;\n        on(\n            event: "stream",\n            listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void,\n        ): this;\n        on(event: "timeout", listener: () => void): this;\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\n        once(\n            event: "checkContinue",\n            listener: (request: InstanceType<Http2Request>, response: InstanceType<Http2Response>) => void,\n        ): this;\n        once(\n            event: "request",\n            listener: (request: InstanceType<Http2Request>, response: InstanceType<Http2Response>) => void,\n        ): this;\n        once(\n            event: "session",\n            listener: (session: ServerHttp2Session<Http1Request, Http1Response, Http2Request, Http2Response>) => void,\n        ): this;\n        once(event: "sessionError", listener: (err: Error) => void): this;\n        once(\n            event: "stream",\n            listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void,\n        ): this;\n        once(event: "timeout", listener: () => void): this;\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\n        prependListener(\n            event: "checkContinue",\n            listener: (request: InstanceType<Http2Request>, response: InstanceType<Http2Response>) => void,\n        ): this;\n        prependListener(\n            event: "request",\n            listener: (request: InstanceType<Http2Request>, response: InstanceType<Http2Response>) => void,\n        ): this;\n        prependListener(\n            event: "session",\n            listener: (session: ServerHttp2Session<Http1Request, Http1Response, Http2Request, Http2Response>) => void,\n        ): this;\n        prependListener(event: "sessionError", listener: (err: Error) => void): this;\n        prependListener(\n            event: "stream",\n            listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void,\n        ): this;\n        prependListener(event: "timeout", listener: () => void): this;\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\n        prependOnceListener(\n            event: "checkContinue",\n            listener: (request: InstanceType<Http2Request>, response: InstanceType<Http2Response>) => void,\n        ): this;\n        prependOnceListener(\n            event: "request",\n            listener: (request: InstanceType<Http2Request>, response: InstanceType<Http2Response>) => void,\n        ): this;\n        prependOnceListener(\n            event: "session",\n            listener: (session: ServerHttp2Session<Http1Request, Http1Response, Http2Request, Http2Response>) => void,\n        ): this;\n        prependOnceListener(event: "sessionError", listener: (err: Error) => void): this;\n        prependOnceListener(\n            event: "stream",\n            listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void,\n        ): this;\n        prependOnceListener(event: "timeout", listener: () => void): this;\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\n    }\n    export interface Http2SecureServer<\n        Http1Request extends typeof IncomingMessage = typeof IncomingMessage,\n        Http1Response extends typeof ServerResponse<InstanceType<Http1Request>> = typeof ServerResponse,\n        Http2Request extends typeof Http2ServerRequest = typeof Http2ServerRequest,\n        Http2Response extends typeof Http2ServerResponse<InstanceType<Http2Request>> = typeof Http2ServerResponse,\n    > extends tls.Server, HTTP2ServerCommon {\n        addListener(\n            event: "checkContinue",\n            listener: (request: InstanceType<Http2Request>, response: InstanceType<Http2Response>) => void,\n        ): this;\n        addListener(\n            event: "request",\n            listener: (request: InstanceType<Http2Request>, response: InstanceType<Http2Response>) => void,\n        ): this;\n        addListener(\n            event: "session",\n            listener: (session: ServerHttp2Session<Http1Request, Http1Response, Http2Request, Http2Response>) => void,\n        ): this;\n        addListener(event: "sessionError", listener: (err: Error) => void): this;\n        addListener(\n            event: "stream",\n            listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void,\n        ): this;\n        addListener(event: "timeout", listener: () => void): this;\n        addListener(event: "unknownProtocol", listener: (socket: tls.TLSSocket) => void): this;\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\n        emit(\n            event: "checkContinue",\n            request: InstanceType<Http2Request>,\n            response: InstanceType<Http2Response>,\n        ): boolean;\n        emit(event: "request", request: InstanceType<Http2Request>, response: InstanceType<Http2Response>): boolean;\n        emit(\n            event: "session",\n            session: ServerHttp2Session<Http1Request, Http1Response, Http2Request, Http2Response>,\n        ): boolean;\n        emit(event: "sessionError", err: Error): boolean;\n        emit(event: "stream", stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number): boolean;\n        emit(event: "timeout"): boolean;\n        emit(event: "unknownProtocol", socket: tls.TLSSocket): boolean;\n        emit(event: string | symbol, ...args: any[]): boolean;\n        on(\n            event: "checkContinue",\n            listener: (request: InstanceType<Http2Request>, response: InstanceType<Http2Response>) => void,\n        ): this;\n        on(\n            event: "request",\n            listener: (request: InstanceType<Http2Request>, response: InstanceType<Http2Response>) => void,\n        ): this;\n        on(\n            event: "session",\n            listener: (session: ServerHttp2Session<Http1Request, Http1Response, Http2Request, Http2Response>) => void,\n        ): this;\n        on(event: "sessionError", listener: (err: Error) => void): this;\n        on(\n            event: "stream",\n            listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void,\n        ): this;\n        on(event: "timeout", listener: () => void): this;\n        on(event: "unknownProtocol", listener: (socket: tls.TLSSocket) => void): this;\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\n        once(\n            event: "checkContinue",\n            listener: (request: InstanceType<Http2Request>, response: InstanceType<Http2Response>) => void,\n        ): this;\n        once(\n            event: "request",\n            listener: (request: InstanceType<Http2Request>, response: InstanceType<Http2Response>) => void,\n        ): this;\n        once(\n            event: "session",\n            listener: (session: ServerHttp2Session<Http1Request, Http1Response, Http2Request, Http2Response>) => void,\n        ): this;\n        once(event: "sessionError", listener: (err: Error) => void): this;\n        once(\n            event: "stream",\n            listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void,\n        ): this;\n        once(event: "timeout", listener: () => void): this;\n        once(event: "unknownProtocol", listener: (socket: tls.TLSSocket) => void): this;\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\n        prependListener(\n            event: "checkContinue",\n            listener: (request: InstanceType<Http2Request>, response: InstanceType<Http2Response>) => void,\n        ): this;\n        prependListener(\n            event: "request",\n            listener: (request: InstanceType<Http2Request>, response: InstanceType<Http2Response>) => void,\n        ): this;\n        prependListener(\n            event: "session",\n            listener: (session: ServerHttp2Session<Http1Request, Http1Response, Http2Request, Http2Response>) => void,\n        ): this;\n        prependListener(event: "sessionError", listener: (err: Error) => void): this;\n        prependListener(\n            event: "stream",\n            listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void,\n        ): this;\n        prependListener(event: "timeout", listener: () => void): this;\n        prependListener(event: "unknownProtocol", listener: (socket: tls.TLSSocket) => void): this;\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\n        prependOnceListener(\n            event: "checkContinue",\n            listener: (request: InstanceType<Http2Request>, response: InstanceType<Http2Response>) => void,\n        ): this;\n        prependOnceListener(\n            event: "request",\n            listener: (request: InstanceType<Http2Request>, response: InstanceType<Http2Response>) => void,\n        ): this;\n        prependOnceListener(\n            event: "session",\n            listener: (session: ServerHttp2Session<Http1Request, Http1Response, Http2Request, Http2Response>) => void,\n        ): this;\n        prependOnceListener(event: "sessionError", listener: (err: Error) => void): this;\n        prependOnceListener(\n            event: "stream",\n            listener: (stream: ServerHttp2Stream, headers: IncomingHttpHeaders, flags: number) => void,\n        ): this;\n        prependOnceListener(event: "timeout", listener: () => void): this;\n        prependOnceListener(event: "unknownProtocol", listener: (socket: tls.TLSSocket) => void): this;\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\n    }\n    /**\n     * A `Http2ServerRequest` object is created by {@link Server} or {@link SecureServer} and passed as the first argument to the `\'request\'` event. It may be used to access a request status,\n     * headers, and\n     * data.\n     * @since v8.4.0\n     */\n    export class Http2ServerRequest extends stream.Readable {\n        constructor(\n            stream: ServerHttp2Stream,\n            headers: IncomingHttpHeaders,\n            options: stream.ReadableOptions,\n            rawHeaders: readonly string[],\n        );\n        /**\n         * The `request.aborted` property will be `true` if the request has\n         * been aborted.\n         * @since v10.1.0\n         */\n        readonly aborted: boolean;\n        /**\n         * The request authority pseudo header field. Because HTTP/2 allows requests\n         * to set either `:authority` or `host`, this value is derived from `req.headers[\':authority\']` if present. Otherwise, it is derived from `req.headers[\'host\']`.\n         * @since v8.4.0\n         */\n        readonly authority: string;\n        /**\n         * See `request.socket`.\n         * @since v8.4.0\n         * @deprecated Since v13.0.0 - Use `socket`.\n         */\n        readonly connection: net.Socket | tls.TLSSocket;\n        /**\n         * The `request.complete` property will be `true` if the request has\n         * been completed, aborted, or destroyed.\n         * @since v12.10.0\n         */\n        readonly complete: boolean;\n        /**\n         * The request/response headers object.\n         *\n         * Key-value pairs of header names and values. Header names are lower-cased.\n         *\n         * ```js\n         * // Prints something like:\n         * //\n         * // { \'user-agent\': \'curl/7.22.0\',\n         * //   host: \'127.0.0.1:8000\',\n         * //   accept: \'*\' }\n         * console.log(request.headers);\n         * ```\n         *\n         * See `HTTP/2 Headers Object`.\n         *\n         * In HTTP/2, the request path, host name, protocol, and method are represented as\n         * special headers prefixed with the `:` character (e.g. `\':path\'`). These special\n         * headers will be included in the `request.headers` object. Care must be taken not\n         * to inadvertently modify these special headers or errors may occur. For instance,\n         * removing all headers from the request will cause errors to occur:\n         *\n         * ```js\n         * removeAllHeaders(request.headers);\n         * assert(request.url);   // Fails because the :path header has been removed\n         * ```\n         * @since v8.4.0\n         */\n        readonly headers: IncomingHttpHeaders;\n        /**\n         * In case of server request, the HTTP version sent by the client. In the case of\n         * client response, the HTTP version of the connected-to server. Returns `\'2.0\'`.\n         *\n         * Also `message.httpVersionMajor` is the first integer and `message.httpVersionMinor` is the second.\n         * @since v8.4.0\n         */\n        readonly httpVersion: string;\n        readonly httpVersionMinor: number;\n        readonly httpVersionMajor: number;\n        /**\n         * The request method as a string. Read-only. Examples: `\'GET\'`, `\'DELETE\'`.\n         * @since v8.4.0\n         */\n        readonly method: string;\n        /**\n         * The raw request/response headers list exactly as they were received.\n         *\n         * The keys and values are in the same list. It is _not_ a\n         * list of tuples. So, the even-numbered offsets are key values, and the\n         * odd-numbered offsets are the associated values.\n         *\n         * Header names are not lowercased, and duplicates are not merged.\n         *\n         * ```js\n         * // Prints something like:\n         * //\n         * // [ \'user-agent\',\n         * //   \'this is invalid because there can be only one\',\n         * //   \'User-Agent\',\n         * //   \'curl/7.22.0\',\n         * //   \'Host\',\n         * //   \'127.0.0.1:8000\',\n         * //   \'ACCEPT\',\n         * //   \'*\' ]\n         * console.log(request.rawHeaders);\n         * ```\n         * @since v8.4.0\n         */\n        readonly rawHeaders: string[];\n        /**\n         * The raw request/response trailer keys and values exactly as they were\n         * received. Only populated at the `\'end\'` event.\n         * @since v8.4.0\n         */\n        readonly rawTrailers: string[];\n        /**\n         * The request scheme pseudo header field indicating the scheme\n         * portion of the target URL.\n         * @since v8.4.0\n         */\n        readonly scheme: string;\n        /**\n         * Returns a `Proxy` object that acts as a `net.Socket` (or `tls.TLSSocket`) but\n         * applies getters, setters, and methods based on HTTP/2 logic.\n         *\n         * `destroyed`, `readable`, and `writable` properties will be retrieved from and\n         * set on `request.stream`.\n         *\n         * `destroy`, `emit`, `end`, `on` and `once` methods will be called on `request.stream`.\n         *\n         * `setTimeout` method will be called on `request.stream.session`.\n         *\n         * `pause`, `read`, `resume`, and `write` will throw an error with code `ERR_HTTP2_NO_SOCKET_MANIPULATION`. See `Http2Session and Sockets` for\n         * more information.\n         *\n         * All other interactions will be routed directly to the socket. With TLS support,\n         * use `request.socket.getPeerCertificate()` to obtain the client\'s\n         * authentication details.\n         * @since v8.4.0\n         */\n        readonly socket: net.Socket | tls.TLSSocket;\n        /**\n         * The `Http2Stream` object backing the request.\n         * @since v8.4.0\n         */\n        readonly stream: ServerHttp2Stream;\n        /**\n         * The request/response trailers object. Only populated at the `\'end\'` event.\n         * @since v8.4.0\n         */\n        readonly trailers: IncomingHttpHeaders;\n        /**\n         * Request URL string. This contains only the URL that is present in the actual\n         * HTTP request. If the request is:\n         *\n         * ```http\n         * GET /status?name=ryan HTTP/1.1\n         * Accept: text/plain\n         * ```\n         *\n         * Then `request.url` will be:\n         *\n         * ```js\n         * \'/status?name=ryan\'\n         * ```\n         *\n         * To parse the url into its parts, `new URL()` can be used:\n         *\n         * ```console\n         * $ node\n         * > new URL(\'/status?name=ryan\', \'http://example.com\')\n         * URL {\n         *   href: \'http://example.com/status?name=ryan\',\n         *   origin: \'http://example.com\',\n         *   protocol: \'http:\',\n         *   username: \'\',\n         *   password: \'\',\n         *   host: \'example.com\',\n         *   hostname: \'example.com\',\n         *   port: \'\',\n         *   pathname: \'/status\',\n         *   search: \'?name=ryan\',\n         *   searchParams: URLSearchParams { \'name\' => \'ryan\' },\n         *   hash: \'\'\n         * }\n         * ```\n         * @since v8.4.0\n         */\n        url: string;\n        /**\n         * Sets the `Http2Stream`\'s timeout value to `msecs`. If a callback is\n         * provided, then it is added as a listener on the `\'timeout\'` event on\n         * the response object.\n         *\n         * If no `\'timeout\'` listener is added to the request, the response, or\n         * the server, then `Http2Stream`s are destroyed when they time out. If a\n         * handler is assigned to the request, the response, or the server\'s `\'timeout\'`events, timed out sockets must be handled explicitly.\n         * @since v8.4.0\n         */\n        setTimeout(msecs: number, callback?: () => void): void;\n        read(size?: number): Buffer | string | null;\n        addListener(event: "aborted", listener: (hadError: boolean, code: number) => void): this;\n        addListener(event: "close", listener: () => void): this;\n        addListener(event: "data", listener: (chunk: Buffer | string) => void): this;\n        addListener(event: "end", listener: () => void): this;\n        addListener(event: "readable", listener: () => void): this;\n        addListener(event: "error", listener: (err: Error) => void): this;\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\n        emit(event: "aborted", hadError: boolean, code: number): boolean;\n        emit(event: "close"): boolean;\n        emit(event: "data", chunk: Buffer | string): boolean;\n        emit(event: "end"): boolean;\n        emit(event: "readable"): boolean;\n        emit(event: "error", err: Error): boolean;\n        emit(event: string | symbol, ...args: any[]): boolean;\n        on(event: "aborted", listener: (hadError: boolean, code: number) => void): this;\n        on(event: "close", listener: () => void): this;\n        on(event: "data", listener: (chunk: Buffer | string) => void): this;\n        on(event: "end", listener: () => void): this;\n        on(event: "readable", listener: () => void): this;\n        on(event: "error", listener: (err: Error) => void): this;\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\n        once(event: "aborted", listener: (hadError: boolean, code: number) => void): this;\n        once(event: "close", listener: () => void): this;\n        once(event: "data", listener: (chunk: Buffer | string) => void): this;\n        once(event: "end", listener: () => void): this;\n        once(event: "readable", listener: () => void): this;\n        once(event: "error", listener: (err: Error) => void): this;\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\n        prependListener(event: "aborted", listener: (hadError: boolean, code: number) => void): this;\n        prependListener(event: "close", listener: () => void): this;\n        prependListener(event: "data", listener: (chunk: Buffer | string) => void): this;\n        prependListener(event: "end", listener: () => void): this;\n        prependListener(event: "readable", listener: () => void): this;\n        prependListener(event: "error", listener: (err: Error) => void): this;\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\n        prependOnceListener(event: "aborted", listener: (hadError: boolean, code: number) => void): this;\n        prependOnceListener(event: "close", listener: () => void): this;\n        prependOnceListener(event: "data", listener: (chunk: Buffer | string) => void): this;\n        prependOnceListener(event: "end", listener: () => void): this;\n        prependOnceListener(event: "readable", listener: () => void): this;\n        prependOnceListener(event: "error", listener: (err: Error) => void): this;\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\n    }\n    /**\n     * This object is created internally by an HTTP server, not by the user. It is\n     * passed as the second parameter to the `\'request\'` event.\n     * @since v8.4.0\n     */\n    export class Http2ServerResponse<Request extends Http2ServerRequest = Http2ServerRequest> extends stream.Writable {\n        constructor(stream: ServerHttp2Stream);\n        /**\n         * See `response.socket`.\n         * @since v8.4.0\n         * @deprecated Since v13.0.0 - Use `socket`.\n         */\n        readonly connection: net.Socket | tls.TLSSocket;\n        /**\n         * Append a single header value to the header object.\n         *\n         * If the value is an array, this is equivalent to calling this method multiple times.\n         *\n         * If there were no previous values for the header, this is equivalent to calling {@link setHeader}.\n         *\n         * Attempting to set a header field name or value that contains invalid characters will result in a\n         * [TypeError](https://nodejs.org/docs/latest-v22.x/api/errors.html#class-typeerror) being thrown.\n         *\n         * ```js\n         * // Returns headers including "set-cookie: a" and "set-cookie: b"\n         * const server = http2.createServer((req, res) => {\n         *   res.setHeader(\'set-cookie\', \'a\');\n         *   res.appendHeader(\'set-cookie\', \'b\');\n         *   res.writeHead(200);\n         *   res.end(\'ok\');\n         * });\n         * ```\n         * @since v20.12.0\n         */\n        appendHeader(name: string, value: string | string[]): void;\n        /**\n         * Boolean value that indicates whether the response has completed. Starts\n         * as `false`. After `response.end()` executes, the value will be `true`.\n         * @since v8.4.0\n         * @deprecated Since v13.4.0,v12.16.0 - Use `writableEnded`.\n         */\n        readonly finished: boolean;\n        /**\n         * True if headers were sent, false otherwise (read-only).\n         * @since v8.4.0\n         */\n        readonly headersSent: boolean;\n        /**\n         * A reference to the original HTTP2 `request` object.\n         * @since v15.7.0\n         */\n        readonly req: Request;\n        /**\n         * Returns a `Proxy` object that acts as a `net.Socket` (or `tls.TLSSocket`) but\n         * applies getters, setters, and methods based on HTTP/2 logic.\n         *\n         * `destroyed`, `readable`, and `writable` properties will be retrieved from and\n         * set on `response.stream`.\n         *\n         * `destroy`, `emit`, `end`, `on` and `once` methods will be called on `response.stream`.\n         *\n         * `setTimeout` method will be called on `response.stream.session`.\n         *\n         * `pause`, `read`, `resume`, and `write` will throw an error with code `ERR_HTTP2_NO_SOCKET_MANIPULATION`. See `Http2Session and Sockets` for\n         * more information.\n         *\n         * All other interactions will be routed directly to the socket.\n         *\n         * ```js\n         * import http2 from \'node:http2\';\n         * const server = http2.createServer((req, res) => {\n         *   const ip = req.socket.remoteAddress;\n         *   const port = req.socket.remotePort;\n         *   res.end(`Your IP address is ${ip} and your source port is ${port}.`);\n         * }).listen(3000);\n         * ```\n         * @since v8.4.0\n         */\n        readonly socket: net.Socket | tls.TLSSocket;\n        /**\n         * The `Http2Stream` object backing the response.\n         * @since v8.4.0\n         */\n        readonly stream: ServerHttp2Stream;\n        /**\n         * When true, the Date header will be automatically generated and sent in\n         * the response if it is not already present in the headers. Defaults to true.\n         *\n         * This should only be disabled for testing; HTTP requires the Date header\n         * in responses.\n         * @since v8.4.0\n         */\n        sendDate: boolean;\n        /**\n         * When using implicit headers (not calling `response.writeHead()` explicitly),\n         * this property controls the status code that will be sent to the client when\n         * the headers get flushed.\n         *\n         * ```js\n         * response.statusCode = 404;\n         * ```\n         *\n         * After response header was sent to the client, this property indicates the\n         * status code which was sent out.\n         * @since v8.4.0\n         */\n        statusCode: number;\n        /**\n         * Status message is not supported by HTTP/2 (RFC 7540 8.1.2.4). It returns\n         * an empty string.\n         * @since v8.4.0\n         */\n        statusMessage: "";\n        /**\n         * This method adds HTTP trailing headers (a header but at the end of the\n         * message) to the response.\n         *\n         * Attempting to set a header field name or value that contains invalid characters\n         * will result in a `TypeError` being thrown.\n         * @since v8.4.0\n         */\n        addTrailers(trailers: OutgoingHttpHeaders): void;\n        /**\n         * This method signals to the server that all of the response headers and body\n         * have been sent; that server should consider this message complete.\n         * The method, `response.end()`, MUST be called on each response.\n         *\n         * If `data` is specified, it is equivalent to calling `response.write(data, encoding)` followed by `response.end(callback)`.\n         *\n         * If `callback` is specified, it will be called when the response stream\n         * is finished.\n         * @since v8.4.0\n         */\n        end(callback?: () => void): this;\n        end(data: string | Uint8Array, callback?: () => void): this;\n        end(data: string | Uint8Array, encoding: BufferEncoding, callback?: () => void): this;\n        /**\n         * Reads out a header that has already been queued but not sent to the client.\n         * The name is case-insensitive.\n         *\n         * ```js\n         * const contentType = response.getHeader(\'content-type\');\n         * ```\n         * @since v8.4.0\n         */\n        getHeader(name: string): string;\n        /**\n         * Returns an array containing the unique names of the current outgoing headers.\n         * All header names are lowercase.\n         *\n         * ```js\n         * response.setHeader(\'Foo\', \'bar\');\n         * response.setHeader(\'Set-Cookie\', [\'foo=bar\', \'bar=baz\']);\n         *\n         * const headerNames = response.getHeaderNames();\n         * // headerNames === [\'foo\', \'set-cookie\']\n         * ```\n         * @since v8.4.0\n         */\n        getHeaderNames(): string[];\n        /**\n         * Returns a shallow copy of the current outgoing headers. Since a shallow copy\n         * is used, array values may be mutated without additional calls to various\n         * header-related http module methods. The keys of the returned object are the\n         * header names and the values are the respective header values. All header names\n         * are lowercase.\n         *\n         * The object returned by the `response.getHeaders()` method _does not_ prototypically inherit from the JavaScript `Object`. This means that typical `Object` methods such as `obj.toString()`,\n         * `obj.hasOwnProperty()`, and others\n         * are not defined and _will not work_.\n         *\n         * ```js\n         * response.setHeader(\'Foo\', \'bar\');\n         * response.setHeader(\'Set-Cookie\', [\'foo=bar\', \'bar=baz\']);\n         *\n         * const headers = response.getHeaders();\n         * // headers === { foo: \'bar\', \'set-cookie\': [\'foo=bar\', \'bar=baz\'] }\n         * ```\n         * @since v8.4.0\n         */\n        getHeaders(): OutgoingHttpHeaders;\n        /**\n         * Returns `true` if the header identified by `name` is currently set in the\n         * outgoing headers. The header name matching is case-insensitive.\n         *\n         * ```js\n         * const hasContentType = response.hasHeader(\'content-type\');\n         * ```\n         * @since v8.4.0\n         */\n        hasHeader(name: string): boolean;\n        /**\n         * Removes a header that has been queued for implicit sending.\n         *\n         * ```js\n         * response.removeHeader(\'Content-Encoding\');\n         * ```\n         * @since v8.4.0\n         */\n        removeHeader(name: string): void;\n        /**\n         * Sets a single header value for implicit headers. If this header already exists\n         * in the to-be-sent headers, its value will be replaced. Use an array of strings\n         * here to send multiple headers with the same name.\n         *\n         * ```js\n         * response.setHeader(\'Content-Type\', \'text/html; charset=utf-8\');\n         * ```\n         *\n         * or\n         *\n         * ```js\n         * response.setHeader(\'Set-Cookie\', [\'type=ninja\', \'language=javascript\']);\n         * ```\n         *\n         * Attempting to set a header field name or value that contains invalid characters\n         * will result in a `TypeError` being thrown.\n         *\n         * When headers have been set with `response.setHeader()`, they will be merged\n         * with any headers passed to `response.writeHead()`, with the headers passed\n         * to `response.writeHead()` given precedence.\n         *\n         * ```js\n         * // Returns content-type = text/plain\n         * const server = http2.createServer((req, res) => {\n         *   res.setHeader(\'Content-Type\', \'text/html; charset=utf-8\');\n         *   res.setHeader(\'X-Foo\', \'bar\');\n         *   res.writeHead(200, { \'Content-Type\': \'text/plain; charset=utf-8\' });\n         *   res.end(\'ok\');\n         * });\n         * ```\n         * @since v8.4.0\n         */\n        setHeader(name: string, value: number | string | readonly string[]): void;\n        /**\n         * Sets the `Http2Stream`\'s timeout value to `msecs`. If a callback is\n         * provided, then it is added as a listener on the `\'timeout\'` event on\n         * the response object.\n         *\n         * If no `\'timeout\'` listener is added to the request, the response, or\n         * the server, then `Http2Stream` s are destroyed when they time out. If a\n         * handler is assigned to the request, the response, or the server\'s `\'timeout\'` events, timed out sockets must be handled explicitly.\n         * @since v8.4.0\n         */\n        setTimeout(msecs: number, callback?: () => void): void;\n        /**\n         * If this method is called and `response.writeHead()` has not been called,\n         * it will switch to implicit header mode and flush the implicit headers.\n         *\n         * This sends a chunk of the response body. This method may\n         * be called multiple times to provide successive parts of the body.\n         *\n         * In the `node:http` module, the response body is omitted when the\n         * request is a HEAD request. Similarly, the `204` and `304` responses _must not_ include a message body.\n         *\n         * `chunk` can be a string or a buffer. If `chunk` is a string,\n         * the second parameter specifies how to encode it into a byte stream.\n         * By default the `encoding` is `\'utf8\'`. `callback` will be called when this chunk\n         * of data is flushed.\n         *\n         * This is the raw HTTP body and has nothing to do with higher-level multi-part\n         * body encodings that may be used.\n         *\n         * The first time `response.write()` is called, it will send the buffered\n         * header information and the first chunk of the body to the client. The second\n         * time `response.write()` is called, Node.js assumes data will be streamed,\n         * and sends the new data separately. That is, the response is buffered up to the\n         * first chunk of the body.\n         *\n         * Returns `true` if the entire data was flushed successfully to the kernel\n         * buffer. Returns `false` if all or part of the data was queued in user memory.`\'drain\'` will be emitted when the buffer is free again.\n         * @since v8.4.0\n         */\n        write(chunk: string | Uint8Array, callback?: (err: Error) => void): boolean;\n        write(chunk: string | Uint8Array, encoding: BufferEncoding, callback?: (err: Error) => void): boolean;\n        /**\n         * Sends a status `100 Continue` to the client, indicating that the request body\n         * should be sent. See the `\'checkContinue\'` event on `Http2Server` and `Http2SecureServer`.\n         * @since v8.4.0\n         */\n        writeContinue(): void;\n        /**\n         * Sends a status `103 Early Hints` to the client with a Link header,\n         * indicating that the user agent can preload/preconnect the linked resources.\n         * The `hints` is an object containing the values of headers to be sent with\n         * early hints message.\n         *\n         * **Example**\n         *\n         * ```js\n         * const earlyHintsLink = \'</styles.css>; rel=preload; as=style\';\n         * response.writeEarlyHints({\n         *   \'link\': earlyHintsLink,\n         * });\n         *\n         * const earlyHintsLinks = [\n         *   \'</styles.css>; rel=preload; as=style\',\n         *   \'</scripts.js>; rel=preload; as=script\',\n         * ];\n         * response.writeEarlyHints({\n         *   \'link\': earlyHintsLinks,\n         * });\n         * ```\n         * @since v18.11.0\n         */\n        writeEarlyHints(hints: Record<string, string | string[]>): void;\n        /**\n         * Sends a response header to the request. The status code is a 3-digit HTTP\n         * status code, like `404`. The last argument, `headers`, are the response headers.\n         *\n         * Returns a reference to the `Http2ServerResponse`, so that calls can be chained.\n         *\n         * For compatibility with `HTTP/1`, a human-readable `statusMessage` may be\n         * passed as the second argument. However, because the `statusMessage` has no\n         * meaning within HTTP/2, the argument will have no effect and a process warning\n         * will be emitted.\n         *\n         * ```js\n         * const body = \'hello world\';\n         * response.writeHead(200, {\n         *   \'Content-Length\': Buffer.byteLength(body),\n         *   \'Content-Type\': \'text/plain; charset=utf-8\',\n         * });\n         * ```\n         *\n         * `Content-Length` is given in bytes not characters. The`Buffer.byteLength()` API may be used to determine the number of bytes in a\n         * given encoding. On outbound messages, Node.js does not check if Content-Length\n         * and the length of the body being transmitted are equal or not. However, when\n         * receiving messages, Node.js will automatically reject messages when the `Content-Length` does not match the actual payload size.\n         *\n         * This method may be called at most one time on a message before `response.end()` is called.\n         *\n         * If `response.write()` or `response.end()` are called before calling\n         * this, the implicit/mutable headers will be calculated and call this function.\n         *\n         * When headers have been set with `response.setHeader()`, they will be merged\n         * with any headers passed to `response.writeHead()`, with the headers passed\n         * to `response.writeHead()` given precedence.\n         *\n         * ```js\n         * // Returns content-type = text/plain\n         * const server = http2.createServer((req, res) => {\n         *   res.setHeader(\'Content-Type\', \'text/html; charset=utf-8\');\n         *   res.setHeader(\'X-Foo\', \'bar\');\n         *   res.writeHead(200, { \'Content-Type\': \'text/plain; charset=utf-8\' });\n         *   res.end(\'ok\');\n         * });\n         * ```\n         *\n         * Attempting to set a header field name or value that contains invalid characters\n         * will result in a `TypeError` being thrown.\n         * @since v8.4.0\n         */\n        writeHead(statusCode: number, headers?: OutgoingHttpHeaders): this;\n        writeHead(statusCode: number, statusMessage: string, headers?: OutgoingHttpHeaders): this;\n        /**\n         * Call `http2stream.pushStream()` with the given headers, and wrap the\n         * given `Http2Stream` on a newly created `Http2ServerResponse` as the callback\n         * parameter if successful. When `Http2ServerRequest` is closed, the callback is\n         * called with an error `ERR_HTTP2_INVALID_STREAM`.\n         * @since v8.4.0\n         * @param headers An object describing the headers\n         * @param callback Called once `http2stream.pushStream()` is finished, or either when the attempt to create the pushed `Http2Stream` has failed or has been rejected, or the state of\n         * `Http2ServerRequest` is closed prior to calling the `http2stream.pushStream()` method\n         */\n        createPushResponse(\n            headers: OutgoingHttpHeaders,\n            callback: (err: Error | null, res: Http2ServerResponse) => void,\n        ): void;\n        addListener(event: "close", listener: () => void): this;\n        addListener(event: "drain", listener: () => void): this;\n        addListener(event: "error", listener: (error: Error) => void): this;\n        addListener(event: "finish", listener: () => void): this;\n        addListener(event: "pipe", listener: (src: stream.Readable) => void): this;\n        addListener(event: "unpipe", listener: (src: stream.Readable) => void): this;\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\n        emit(event: "close"): boolean;\n        emit(event: "drain"): boolean;\n        emit(event: "error", error: Error): boolean;\n        emit(event: "finish"): boolean;\n        emit(event: "pipe", src: stream.Readable): boolean;\n        emit(event: "unpipe", src: stream.Readable): boolean;\n        emit(event: string | symbol, ...args: any[]): boolean;\n        on(event: "close", listener: () => void): this;\n        on(event: "drain", listener: () => void): this;\n        on(event: "error", listener: (error: Error) => void): this;\n        on(event: "finish", listener: () => void): this;\n        on(event: "pipe", listener: (src: stream.Readable) => void): this;\n        on(event: "unpipe", listener: (src: stream.Readable) => void): this;\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\n        once(event: "close", listener: () => void): this;\n        once(event: "drain", listener: () => void): this;\n        once(event: "error", listener: (error: Error) => void): this;\n        once(event: "finish", listener: () => void): this;\n        once(event: "pipe", listener: (src: stream.Readable) => void): this;\n        once(event: "unpipe", listener: (src: stream.Readable) => void): this;\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\n        prependListener(event: "close", listener: () => void): this;\n        prependListener(event: "drain", listener: () => void): this;\n        prependListener(event: "error", listener: (error: Error) => void): this;\n        prependListener(event: "finish", listener: () => void): this;\n        prependListener(event: "pipe", listener: (src: stream.Readable) => void): this;\n        prependListener(event: "unpipe", listener: (src: stream.Readable) => void): this;\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\n        prependOnceListener(event: "close", listener: () => void): this;\n        prependOnceListener(event: "drain", listener: () => void): this;\n        prependOnceListener(event: "error", listener: (error: Error) => void): this;\n        prependOnceListener(event: "finish", listener: () => void): this;\n        prependOnceListener(event: "pipe", listener: (src: stream.Readable) => void): this;\n        prependOnceListener(event: "unpipe", listener: (src: stream.Readable) => void): this;\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\n    }\n    export namespace constants {\n        const NGHTTP2_SESSION_SERVER: number;\n        const NGHTTP2_SESSION_CLIENT: number;\n        const NGHTTP2_STREAM_STATE_IDLE: number;\n        const NGHTTP2_STREAM_STATE_OPEN: number;\n        const NGHTTP2_STREAM_STATE_RESERVED_LOCAL: number;\n        const NGHTTP2_STREAM_STATE_RESERVED_REMOTE: number;\n        const NGHTTP2_STREAM_STATE_HALF_CLOSED_LOCAL: number;\n        const NGHTTP2_STREAM_STATE_HALF_CLOSED_REMOTE: number;\n        const NGHTTP2_STREAM_STATE_CLOSED: number;\n        const NGHTTP2_NO_ERROR: number;\n        const NGHTTP2_PROTOCOL_ERROR: number;\n        const NGHTTP2_INTERNAL_ERROR: number;\n        const NGHTTP2_FLOW_CONTROL_ERROR: number;\n        const NGHTTP2_SETTINGS_TIMEOUT: number;\n        const NGHTTP2_STREAM_CLOSED: number;\n        const NGHTTP2_FRAME_SIZE_ERROR: number;\n        const NGHTTP2_REFUSED_STREAM: number;\n        const NGHTTP2_CANCEL: number;\n        const NGHTTP2_COMPRESSION_ERROR: number;\n        const NGHTTP2_CONNECT_ERROR: number;\n        const NGHTTP2_ENHANCE_YOUR_CALM: number;\n        const NGHTTP2_INADEQUATE_SECURITY: number;\n        const NGHTTP2_HTTP_1_1_REQUIRED: number;\n        const NGHTTP2_ERR_FRAME_SIZE_ERROR: number;\n        const NGHTTP2_FLAG_NONE: number;\n        const NGHTTP2_FLAG_END_STREAM: number;\n        const NGHTTP2_FLAG_END_HEADERS: number;\n        const NGHTTP2_FLAG_ACK: number;\n        const NGHTTP2_FLAG_PADDED: number;\n        const NGHTTP2_FLAG_PRIORITY: number;\n        const DEFAULT_SETTINGS_HEADER_TABLE_SIZE: number;\n        const DEFAULT_SETTINGS_ENABLE_PUSH: number;\n        const DEFAULT_SETTINGS_INITIAL_WINDOW_SIZE: number;\n        const DEFAULT_SETTINGS_MAX_FRAME_SIZE: number;\n        const MAX_MAX_FRAME_SIZE: number;\n        const MIN_MAX_FRAME_SIZE: number;\n        const MAX_INITIAL_WINDOW_SIZE: number;\n        const NGHTTP2_DEFAULT_WEIGHT: number;\n        const NGHTTP2_SETTINGS_HEADER_TABLE_SIZE: number;\n        const NGHTTP2_SETTINGS_ENABLE_PUSH: number;\n        const NGHTTP2_SETTINGS_MAX_CONCURRENT_STREAMS: number;\n        const NGHTTP2_SETTINGS_INITIAL_WINDOW_SIZE: number;\n        const NGHTTP2_SETTINGS_MAX_FRAME_SIZE: number;\n        const NGHTTP2_SETTINGS_MAX_HEADER_LIST_SIZE: number;\n        const PADDING_STRATEGY_NONE: number;\n        const PADDING_STRATEGY_MAX: number;\n        const PADDING_STRATEGY_CALLBACK: number;\n        const HTTP2_HEADER_STATUS: string;\n        const HTTP2_HEADER_METHOD: string;\n        const HTTP2_HEADER_AUTHORITY: string;\n        const HTTP2_HEADER_SCHEME: string;\n        const HTTP2_HEADER_PATH: string;\n        const HTTP2_HEADER_ACCEPT_CHARSET: string;\n        const HTTP2_HEADER_ACCEPT_ENCODING: string;\n        const HTTP2_HEADER_ACCEPT_LANGUAGE: string;\n        const HTTP2_HEADER_ACCEPT_RANGES: string;\n        const HTTP2_HEADER_ACCEPT: string;\n        const HTTP2_HEADER_ACCESS_CONTROL_ALLOW_CREDENTIALS: string;\n        const HTTP2_HEADER_ACCESS_CONTROL_ALLOW_HEADERS: string;\n        const HTTP2_HEADER_ACCESS_CONTROL_ALLOW_METHODS: string;\n        const HTTP2_HEADER_ACCESS_CONTROL_ALLOW_ORIGIN: string;\n        const HTTP2_HEADER_ACCESS_CONTROL_EXPOSE_HEADERS: string;\n        const HTTP2_HEADER_ACCESS_CONTROL_REQUEST_HEADERS: string;\n        const HTTP2_HEADER_ACCESS_CONTROL_REQUEST_METHOD: string;\n        const HTTP2_HEADER_AGE: string;\n        const HTTP2_HEADER_ALLOW: string;\n        const HTTP2_HEADER_AUTHORIZATION: string;\n        const HTTP2_HEADER_CACHE_CONTROL: string;\n        const HTTP2_HEADER_CONNECTION: string;\n        const HTTP2_HEADER_CONTENT_DISPOSITION: string;\n        const HTTP2_HEADER_CONTENT_ENCODING: string;\n        const HTTP2_HEADER_CONTENT_LANGUAGE: string;\n        const HTTP2_HEADER_CONTENT_LENGTH: string;\n        const HTTP2_HEADER_CONTENT_LOCATION: string;\n        const HTTP2_HEADER_CONTENT_MD5: string;\n        const HTTP2_HEADER_CONTENT_RANGE: string;\n        const HTTP2_HEADER_CONTENT_TYPE: string;\n        const HTTP2_HEADER_COOKIE: string;\n        const HTTP2_HEADER_DATE: string;\n        const HTTP2_HEADER_ETAG: string;\n        const HTTP2_HEADER_EXPECT: string;\n        const HTTP2_HEADER_EXPIRES: string;\n        const HTTP2_HEADER_FROM: string;\n        const HTTP2_HEADER_HOST: string;\n        const HTTP2_HEADER_IF_MATCH: string;\n        const HTTP2_HEADER_IF_MODIFIED_SINCE: string;\n        const HTTP2_HEADER_IF_NONE_MATCH: string;\n        const HTTP2_HEADER_IF_RANGE: string;\n        const HTTP2_HEADER_IF_UNMODIFIED_SINCE: string;\n        const HTTP2_HEADER_LAST_MODIFIED: string;\n        const HTTP2_HEADER_LINK: string;\n        const HTTP2_HEADER_LOCATION: string;\n        const HTTP2_HEADER_MAX_FORWARDS: string;\n        const HTTP2_HEADER_PREFER: string;\n        const HTTP2_HEADER_PROXY_AUTHENTICATE: string;\n        const HTTP2_HEADER_PROXY_AUTHORIZATION: string;\n        const HTTP2_HEADER_RANGE: string;\n        const HTTP2_HEADER_REFERER: string;\n        const HTTP2_HEADER_REFRESH: string;\n        const HTTP2_HEADER_RETRY_AFTER: string;\n        const HTTP2_HEADER_SERVER: string;\n        const HTTP2_HEADER_SET_COOKIE: string;\n        const HTTP2_HEADER_STRICT_TRANSPORT_SECURITY: string;\n        const HTTP2_HEADER_TRANSFER_ENCODING: string;\n        const HTTP2_HEADER_TE: string;\n        const HTTP2_HEADER_UPGRADE: string;\n        const HTTP2_HEADER_USER_AGENT: string;\n        const HTTP2_HEADER_VARY: string;\n        const HTTP2_HEADER_VIA: string;\n        const HTTP2_HEADER_WWW_AUTHENTICATE: string;\n        const HTTP2_HEADER_HTTP2_SETTINGS: string;\n        const HTTP2_HEADER_KEEP_ALIVE: string;\n        const HTTP2_HEADER_PROXY_CONNECTION: string;\n        const HTTP2_METHOD_ACL: string;\n        const HTTP2_METHOD_BASELINE_CONTROL: string;\n        const HTTP2_METHOD_BIND: string;\n        const HTTP2_METHOD_CHECKIN: string;\n        const HTTP2_METHOD_CHECKOUT: string;\n        const HTTP2_METHOD_CONNECT: string;\n        const HTTP2_METHOD_COPY: string;\n        const HTTP2_METHOD_DELETE: string;\n        const HTTP2_METHOD_GET: string;\n        const HTTP2_METHOD_HEAD: string;\n        const HTTP2_METHOD_LABEL: string;\n        const HTTP2_METHOD_LINK: string;\n        const HTTP2_METHOD_LOCK: string;\n        const HTTP2_METHOD_MERGE: string;\n        const HTTP2_METHOD_MKACTIVITY: string;\n        const HTTP2_METHOD_MKCALENDAR: string;\n        const HTTP2_METHOD_MKCOL: string;\n        const HTTP2_METHOD_MKREDIRECTREF: string;\n        const HTTP2_METHOD_MKWORKSPACE: string;\n        const HTTP2_METHOD_MOVE: string;\n        const HTTP2_METHOD_OPTIONS: string;\n        const HTTP2_METHOD_ORDERPATCH: string;\n        const HTTP2_METHOD_PATCH: string;\n        const HTTP2_METHOD_POST: string;\n        const HTTP2_METHOD_PRI: string;\n        const HTTP2_METHOD_PROPFIND: string;\n        const HTTP2_METHOD_PROPPATCH: string;\n        const HTTP2_METHOD_PUT: string;\n        const HTTP2_METHOD_REBIND: string;\n        const HTTP2_METHOD_REPORT: string;\n        const HTTP2_METHOD_SEARCH: string;\n        const HTTP2_METHOD_TRACE: string;\n        const HTTP2_METHOD_UNBIND: string;\n        const HTTP2_METHOD_UNCHECKOUT: string;\n        const HTTP2_METHOD_UNLINK: string;\n        const HTTP2_METHOD_UNLOCK: string;\n        const HTTP2_METHOD_UPDATE: string;\n        const HTTP2_METHOD_UPDATEREDIRECTREF: string;\n        const HTTP2_METHOD_VERSION_CONTROL: string;\n        const HTTP_STATUS_CONTINUE: number;\n        const HTTP_STATUS_SWITCHING_PROTOCOLS: number;\n        const HTTP_STATUS_PROCESSING: number;\n        const HTTP_STATUS_OK: number;\n        const HTTP_STATUS_CREATED: number;\n        const HTTP_STATUS_ACCEPTED: number;\n        const HTTP_STATUS_NON_AUTHORITATIVE_INFORMATION: number;\n        const HTTP_STATUS_NO_CONTENT: number;\n        const HTTP_STATUS_RESET_CONTENT: number;\n        const HTTP_STATUS_PARTIAL_CONTENT: number;\n        const HTTP_STATUS_MULTI_STATUS: number;\n        const HTTP_STATUS_ALREADY_REPORTED: number;\n        const HTTP_STATUS_IM_USED: number;\n        const HTTP_STATUS_MULTIPLE_CHOICES: number;\n        const HTTP_STATUS_MOVED_PERMANENTLY: number;\n        const HTTP_STATUS_FOUND: number;\n        const HTTP_STATUS_SEE_OTHER: number;\n        const HTTP_STATUS_NOT_MODIFIED: number;\n        const HTTP_STATUS_USE_PROXY: number;\n        const HTTP_STATUS_TEMPORARY_REDIRECT: number;\n        const HTTP_STATUS_PERMANENT_REDIRECT: number;\n        const HTTP_STATUS_BAD_REQUEST: number;\n        const HTTP_STATUS_UNAUTHORIZED: number;\n        const HTTP_STATUS_PAYMENT_REQUIRED: number;\n        const HTTP_STATUS_FORBIDDEN: number;\n        const HTTP_STATUS_NOT_FOUND: number;\n        const HTTP_STATUS_METHOD_NOT_ALLOWED: number;\n        const HTTP_STATUS_NOT_ACCEPTABLE: number;\n        const HTTP_STATUS_PROXY_AUTHENTICATION_REQUIRED: number;\n        const HTTP_STATUS_REQUEST_TIMEOUT: number;\n        const HTTP_STATUS_CONFLICT: number;\n        const HTTP_STATUS_GONE: number;\n        const HTTP_STATUS_LENGTH_REQUIRED: number;\n        const HTTP_STATUS_PRECONDITION_FAILED: number;\n        const HTTP_STATUS_PAYLOAD_TOO_LARGE: number;\n        const HTTP_STATUS_URI_TOO_LONG: number;\n        const HTTP_STATUS_UNSUPPORTED_MEDIA_TYPE: number;\n        const HTTP_STATUS_RANGE_NOT_SATISFIABLE: number;\n        const HTTP_STATUS_EXPECTATION_FAILED: number;\n        const HTTP_STATUS_TEAPOT: number;\n        const HTTP_STATUS_MISDIRECTED_REQUEST: number;\n        const HTTP_STATUS_UNPROCESSABLE_ENTITY: number;\n        const HTTP_STATUS_LOCKED: number;\n        const HTTP_STATUS_FAILED_DEPENDENCY: number;\n        const HTTP_STATUS_UNORDERED_COLLECTION: number;\n        const HTTP_STATUS_UPGRADE_REQUIRED: number;\n        const HTTP_STATUS_PRECONDITION_REQUIRED: number;\n        const HTTP_STATUS_TOO_MANY_REQUESTS: number;\n        const HTTP_STATUS_REQUEST_HEADER_FIELDS_TOO_LARGE: number;\n        const HTTP_STATUS_UNAVAILABLE_FOR_LEGAL_REASONS: number;\n        const HTTP_STATUS_INTERNAL_SERVER_ERROR: number;\n        const HTTP_STATUS_NOT_IMPLEMENTED: number;\n        const HTTP_STATUS_BAD_GATEWAY: number;\n        const HTTP_STATUS_SERVICE_UNAVAILABLE: number;\n        const HTTP_STATUS_GATEWAY_TIMEOUT: number;\n        const HTTP_STATUS_HTTP_VERSION_NOT_SUPPORTED: number;\n        const HTTP_STATUS_VARIANT_ALSO_NEGOTIATES: number;\n        const HTTP_STATUS_INSUFFICIENT_STORAGE: number;\n        const HTTP_STATUS_LOOP_DETECTED: number;\n        const HTTP_STATUS_BANDWIDTH_LIMIT_EXCEEDED: number;\n        const HTTP_STATUS_NOT_EXTENDED: number;\n        const HTTP_STATUS_NETWORK_AUTHENTICATION_REQUIRED: number;\n    }\n    /**\n     * This symbol can be set as a property on the HTTP/2 headers object with\n     * an array value in order to provide a list of headers considered sensitive.\n     */\n    export const sensitiveHeaders: symbol;\n    /**\n     * Returns an object containing the default settings for an `Http2Session` instance. This method returns a new object instance every time it is called\n     * so instances returned may be safely modified for use.\n     * @since v8.4.0\n     */\n    export function getDefaultSettings(): Settings;\n    /**\n     * Returns a `Buffer` instance containing serialized representation of the given\n     * HTTP/2 settings as specified in the [HTTP/2](https://tools.ietf.org/html/rfc7540) specification. This is intended\n     * for use with the `HTTP2-Settings` header field.\n     *\n     * ```js\n     * import http2 from \'node:http2\';\n     *\n     * const packed = http2.getPackedSettings({ enablePush: false });\n     *\n     * console.log(packed.toString(\'base64\'));\n     * // Prints: AAIAAAAA\n     * ```\n     * @since v8.4.0\n     */\n    export function getPackedSettings(settings: Settings): Buffer;\n    /**\n     * Returns a `HTTP/2 Settings Object` containing the deserialized settings from\n     * the given `Buffer` as generated by `http2.getPackedSettings()`.\n     * @since v8.4.0\n     * @param buf The packed settings.\n     */\n    export function getUnpackedSettings(buf: Uint8Array): Settings;\n    /**\n     * Returns a `net.Server` instance that creates and manages `Http2Session` instances.\n     *\n     * Since there are no browsers known that support [unencrypted HTTP/2](https://http2.github.io/faq/#does-http2-require-encryption), the use of {@link createSecureServer} is necessary when\n     * communicating\n     * with browser clients.\n     *\n     * ```js\n     * import http2 from \'node:http2\';\n     *\n     * // Create an unencrypted HTTP/2 server.\n     * // Since there are no browsers known that support\n     * // unencrypted HTTP/2, the use of `http2.createSecureServer()`\n     * // is necessary when communicating with browser clients.\n     * const server = http2.createServer();\n     *\n     * server.on(\'stream\', (stream, headers) => {\n     *   stream.respond({\n     *     \'content-type\': \'text/html; charset=utf-8\',\n     *     \':status\': 200,\n     *   });\n     *   stream.end(\'<h1>Hello World</h1>\');\n     * });\n     *\n     * server.listen(8000);\n     * ```\n     * @since v8.4.0\n     * @param onRequestHandler See `Compatibility API`\n     */\n    export function createServer(\n        onRequestHandler?: (request: Http2ServerRequest, response: Http2ServerResponse) => void,\n    ): Http2Server;\n    export function createServer<\n        Http1Request extends typeof IncomingMessage = typeof IncomingMessage,\n        Http1Response extends typeof ServerResponse<InstanceType<Http1Request>> = typeof ServerResponse,\n        Http2Request extends typeof Http2ServerRequest = typeof Http2ServerRequest,\n        Http2Response extends typeof Http2ServerResponse<InstanceType<Http2Request>> = typeof Http2ServerResponse,\n    >(\n        options: ServerOptions<Http1Request, Http1Response, Http2Request, Http2Response>,\n        onRequestHandler?: (request: InstanceType<Http2Request>, response: InstanceType<Http2Response>) => void,\n    ): Http2Server<Http1Request, Http1Response, Http2Request, Http2Response>;\n    /**\n     * Returns a `tls.Server` instance that creates and manages `Http2Session` instances.\n     *\n     * ```js\n     * import http2 from \'node:http2\';\n     * import fs from \'node:fs\';\n     *\n     * const options = {\n     *   key: fs.readFileSync(\'server-key.pem\'),\n     *   cert: fs.readFileSync(\'server-cert.pem\'),\n     * };\n     *\n     * // Create a secure HTTP/2 server\n     * const server = http2.createSecureServer(options);\n     *\n     * server.on(\'stream\', (stream, headers) => {\n     *   stream.respond({\n     *     \'content-type\': \'text/html; charset=utf-8\',\n     *     \':status\': 200,\n     *   });\n     *   stream.end(\'<h1>Hello World</h1>\');\n     * });\n     *\n     * server.listen(8443);\n     * ```\n     * @since v8.4.0\n     * @param onRequestHandler See `Compatibility API`\n     */\n    export function createSecureServer(\n        onRequestHandler?: (request: Http2ServerRequest, response: Http2ServerResponse) => void,\n    ): Http2SecureServer;\n    export function createSecureServer<\n        Http1Request extends typeof IncomingMessage = typeof IncomingMessage,\n        Http1Response extends typeof ServerResponse<InstanceType<Http1Request>> = typeof ServerResponse,\n        Http2Request extends typeof Http2ServerRequest = typeof Http2ServerRequest,\n        Http2Response extends typeof Http2ServerResponse<InstanceType<Http2Request>> = typeof Http2ServerResponse,\n    >(\n        options: SecureServerOptions<Http1Request, Http1Response, Http2Request, Http2Response>,\n        onRequestHandler?: (request: InstanceType<Http2Request>, response: InstanceType<Http2Response>) => void,\n    ): Http2SecureServer<Http1Request, Http1Response, Http2Request, Http2Response>;\n    /**\n     * Returns a `ClientHttp2Session` instance.\n     *\n     * ```js\n     * import http2 from \'node:http2\';\n     * const client = http2.connect(\'https://localhost:1234\');\n     *\n     * // Use the client\n     *\n     * client.close();\n     * ```\n     * @since v8.4.0\n     * @param authority The remote HTTP/2 server to connect to. This must be in the form of a minimal, valid URL with the `http://` or `https://` prefix, host name, and IP port (if a non-default port\n     * is used). Userinfo (user ID and password), path, querystring, and fragment details in the URL will be ignored.\n     * @param listener Will be registered as a one-time listener of the {@link \'connect\'} event.\n     */\n    export function connect(\n        authority: string | url.URL,\n        listener: (session: ClientHttp2Session, socket: net.Socket | tls.TLSSocket) => void,\n    ): ClientHttp2Session;\n    export function connect(\n        authority: string | url.URL,\n        options?: ClientSessionOptions | SecureClientSessionOptions,\n        listener?: (session: ClientHttp2Session, socket: net.Socket | tls.TLSSocket) => void,\n    ): ClientHttp2Session;\n    /**\n     * Create an HTTP/2 server session from an existing socket.\n     * @param socket A Duplex Stream\n     * @param options Any `{@link createServer}` options can be provided.\n     * @since v20.12.0\n     */\n    export function performServerHandshake<\n        Http1Request extends typeof IncomingMessage = typeof IncomingMessage,\n        Http1Response extends typeof ServerResponse<InstanceType<Http1Request>> = typeof ServerResponse,\n        Http2Request extends typeof Http2ServerRequest = typeof Http2ServerRequest,\n        Http2Response extends typeof Http2ServerResponse<InstanceType<Http2Request>> = typeof Http2ServerResponse,\n    >(\n        socket: stream.Duplex,\n        options?: ServerOptions<Http1Request, Http1Response, Http2Request, Http2Response>,\n    ): ServerHttp2Session<Http1Request, Http1Response, Http2Request, Http2Response>;\n}\ndeclare module "node:http2" {\n    export * from "http2";\n}\n',
  '@types/node/https.d.ts':
    '/**\n * HTTPS is the HTTP protocol over TLS/SSL. In Node.js this is implemented as a\n * separate module.\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/https.js)\n */\ndeclare module "https" {\n    import { Duplex } from "node:stream";\n    import * as tls from "node:tls";\n    import * as http from "node:http";\n    import { URL } from "node:url";\n    type ServerOptions<\n        Request extends typeof http.IncomingMessage = typeof http.IncomingMessage,\n        Response extends typeof http.ServerResponse<InstanceType<Request>> = typeof http.ServerResponse,\n    > = tls.SecureContextOptions & tls.TlsOptions & http.ServerOptions<Request, Response>;\n    type RequestOptions =\n        & http.RequestOptions\n        & tls.SecureContextOptions\n        & {\n            checkServerIdentity?:\n                | ((hostname: string, cert: tls.DetailedPeerCertificate) => Error | undefined)\n                | undefined;\n            rejectUnauthorized?: boolean | undefined; // Defaults to true\n            servername?: string | undefined; // SNI TLS Extension\n        };\n    interface AgentOptions extends http.AgentOptions, tls.ConnectionOptions {\n        maxCachedSessions?: number | undefined;\n    }\n    /**\n     * An `Agent` object for HTTPS similar to `http.Agent`. See {@link request} for more information.\n     * @since v0.4.5\n     */\n    class Agent extends http.Agent {\n        constructor(options?: AgentOptions);\n        options: AgentOptions;\n    }\n    interface Server<\n        Request extends typeof http.IncomingMessage = typeof http.IncomingMessage,\n        Response extends typeof http.ServerResponse<InstanceType<Request>> = typeof http.ServerResponse,\n    > extends http.Server<Request, Response> {}\n    /**\n     * See `http.Server` for more information.\n     * @since v0.3.4\n     */\n    class Server<\n        Request extends typeof http.IncomingMessage = typeof http.IncomingMessage,\n        Response extends typeof http.ServerResponse<InstanceType<Request>> = typeof http.ServerResponse,\n    > extends tls.Server {\n        constructor(requestListener?: http.RequestListener<Request, Response>);\n        constructor(\n            options: ServerOptions<Request, Response>,\n            requestListener?: http.RequestListener<Request, Response>,\n        );\n        /**\n         * Closes all connections connected to this server.\n         * @since v18.2.0\n         */\n        closeAllConnections(): void;\n        /**\n         * Closes all connections connected to this server which are not sending a request or waiting for a response.\n         * @since v18.2.0\n         */\n        closeIdleConnections(): void;\n        addListener(event: string, listener: (...args: any[]) => void): this;\n        addListener(event: "keylog", listener: (line: Buffer, tlsSocket: tls.TLSSocket) => void): this;\n        addListener(\n            event: "newSession",\n            listener: (sessionId: Buffer, sessionData: Buffer, callback: (err: Error, resp: Buffer) => void) => void,\n        ): this;\n        addListener(\n            event: "OCSPRequest",\n            listener: (\n                certificate: Buffer,\n                issuer: Buffer,\n                callback: (err: Error | null, resp: Buffer) => void,\n            ) => void,\n        ): this;\n        addListener(\n            event: "resumeSession",\n            listener: (sessionId: Buffer, callback: (err: Error, sessionData: Buffer) => void) => void,\n        ): this;\n        addListener(event: "secureConnection", listener: (tlsSocket: tls.TLSSocket) => void): this;\n        addListener(event: "tlsClientError", listener: (err: Error, tlsSocket: tls.TLSSocket) => void): this;\n        addListener(event: "close", listener: () => void): this;\n        addListener(event: "connection", listener: (socket: Duplex) => void): this;\n        addListener(event: "error", listener: (err: Error) => void): this;\n        addListener(event: "listening", listener: () => void): this;\n        addListener(event: "checkContinue", listener: http.RequestListener<Request, Response>): this;\n        addListener(event: "checkExpectation", listener: http.RequestListener<Request, Response>): this;\n        addListener(event: "clientError", listener: (err: Error, socket: Duplex) => void): this;\n        addListener(\n            event: "connect",\n            listener: (req: InstanceType<Request>, socket: Duplex, head: Buffer) => void,\n        ): this;\n        addListener(event: "request", listener: http.RequestListener<Request, Response>): this;\n        addListener(\n            event: "upgrade",\n            listener: (req: InstanceType<Request>, socket: Duplex, head: Buffer) => void,\n        ): this;\n        emit(event: string, ...args: any[]): boolean;\n        emit(event: "keylog", line: Buffer, tlsSocket: tls.TLSSocket): boolean;\n        emit(\n            event: "newSession",\n            sessionId: Buffer,\n            sessionData: Buffer,\n            callback: (err: Error, resp: Buffer) => void,\n        ): boolean;\n        emit(\n            event: "OCSPRequest",\n            certificate: Buffer,\n            issuer: Buffer,\n            callback: (err: Error | null, resp: Buffer) => void,\n        ): boolean;\n        emit(event: "resumeSession", sessionId: Buffer, callback: (err: Error, sessionData: Buffer) => void): boolean;\n        emit(event: "secureConnection", tlsSocket: tls.TLSSocket): boolean;\n        emit(event: "tlsClientError", err: Error, tlsSocket: tls.TLSSocket): boolean;\n        emit(event: "close"): boolean;\n        emit(event: "connection", socket: Duplex): boolean;\n        emit(event: "error", err: Error): boolean;\n        emit(event: "listening"): boolean;\n        emit(\n            event: "checkContinue",\n            req: InstanceType<Request>,\n            res: InstanceType<Response>,\n        ): boolean;\n        emit(\n            event: "checkExpectation",\n            req: InstanceType<Request>,\n            res: InstanceType<Response>,\n        ): boolean;\n        emit(event: "clientError", err: Error, socket: Duplex): boolean;\n        emit(event: "connect", req: InstanceType<Request>, socket: Duplex, head: Buffer): boolean;\n        emit(\n            event: "request",\n            req: InstanceType<Request>,\n            res: InstanceType<Response>,\n        ): boolean;\n        emit(event: "upgrade", req: InstanceType<Request>, socket: Duplex, head: Buffer): boolean;\n        on(event: string, listener: (...args: any[]) => void): this;\n        on(event: "keylog", listener: (line: Buffer, tlsSocket: tls.TLSSocket) => void): this;\n        on(\n            event: "newSession",\n            listener: (sessionId: Buffer, sessionData: Buffer, callback: (err: Error, resp: Buffer) => void) => void,\n        ): this;\n        on(\n            event: "OCSPRequest",\n            listener: (\n                certificate: Buffer,\n                issuer: Buffer,\n                callback: (err: Error | null, resp: Buffer) => void,\n            ) => void,\n        ): this;\n        on(\n            event: "resumeSession",\n            listener: (sessionId: Buffer, callback: (err: Error, sessionData: Buffer) => void) => void,\n        ): this;\n        on(event: "secureConnection", listener: (tlsSocket: tls.TLSSocket) => void): this;\n        on(event: "tlsClientError", listener: (err: Error, tlsSocket: tls.TLSSocket) => void): this;\n        on(event: "close", listener: () => void): this;\n        on(event: "connection", listener: (socket: Duplex) => void): this;\n        on(event: "error", listener: (err: Error) => void): this;\n        on(event: "listening", listener: () => void): this;\n        on(event: "checkContinue", listener: http.RequestListener<Request, Response>): this;\n        on(event: "checkExpectation", listener: http.RequestListener<Request, Response>): this;\n        on(event: "clientError", listener: (err: Error, socket: Duplex) => void): this;\n        on(event: "connect", listener: (req: InstanceType<Request>, socket: Duplex, head: Buffer) => void): this;\n        on(event: "request", listener: http.RequestListener<Request, Response>): this;\n        on(event: "upgrade", listener: (req: InstanceType<Request>, socket: Duplex, head: Buffer) => void): this;\n        once(event: string, listener: (...args: any[]) => void): this;\n        once(event: "keylog", listener: (line: Buffer, tlsSocket: tls.TLSSocket) => void): this;\n        once(\n            event: "newSession",\n            listener: (sessionId: Buffer, sessionData: Buffer, callback: (err: Error, resp: Buffer) => void) => void,\n        ): this;\n        once(\n            event: "OCSPRequest",\n            listener: (\n                certificate: Buffer,\n                issuer: Buffer,\n                callback: (err: Error | null, resp: Buffer) => void,\n            ) => void,\n        ): this;\n        once(\n            event: "resumeSession",\n            listener: (sessionId: Buffer, callback: (err: Error, sessionData: Buffer) => void) => void,\n        ): this;\n        once(event: "secureConnection", listener: (tlsSocket: tls.TLSSocket) => void): this;\n        once(event: "tlsClientError", listener: (err: Error, tlsSocket: tls.TLSSocket) => void): this;\n        once(event: "close", listener: () => void): this;\n        once(event: "connection", listener: (socket: Duplex) => void): this;\n        once(event: "error", listener: (err: Error) => void): this;\n        once(event: "listening", listener: () => void): this;\n        once(event: "checkContinue", listener: http.RequestListener<Request, Response>): this;\n        once(event: "checkExpectation", listener: http.RequestListener<Request, Response>): this;\n        once(event: "clientError", listener: (err: Error, socket: Duplex) => void): this;\n        once(event: "connect", listener: (req: InstanceType<Request>, socket: Duplex, head: Buffer) => void): this;\n        once(event: "request", listener: http.RequestListener<Request, Response>): this;\n        once(event: "upgrade", listener: (req: InstanceType<Request>, socket: Duplex, head: Buffer) => void): this;\n        prependListener(event: string, listener: (...args: any[]) => void): this;\n        prependListener(event: "keylog", listener: (line: Buffer, tlsSocket: tls.TLSSocket) => void): this;\n        prependListener(\n            event: "newSession",\n            listener: (sessionId: Buffer, sessionData: Buffer, callback: (err: Error, resp: Buffer) => void) => void,\n        ): this;\n        prependListener(\n            event: "OCSPRequest",\n            listener: (\n                certificate: Buffer,\n                issuer: Buffer,\n                callback: (err: Error | null, resp: Buffer) => void,\n            ) => void,\n        ): this;\n        prependListener(\n            event: "resumeSession",\n            listener: (sessionId: Buffer, callback: (err: Error, sessionData: Buffer) => void) => void,\n        ): this;\n        prependListener(event: "secureConnection", listener: (tlsSocket: tls.TLSSocket) => void): this;\n        prependListener(event: "tlsClientError", listener: (err: Error, tlsSocket: tls.TLSSocket) => void): this;\n        prependListener(event: "close", listener: () => void): this;\n        prependListener(event: "connection", listener: (socket: Duplex) => void): this;\n        prependListener(event: "error", listener: (err: Error) => void): this;\n        prependListener(event: "listening", listener: () => void): this;\n        prependListener(event: "checkContinue", listener: http.RequestListener<Request, Response>): this;\n        prependListener(event: "checkExpectation", listener: http.RequestListener<Request, Response>): this;\n        prependListener(event: "clientError", listener: (err: Error, socket: Duplex) => void): this;\n        prependListener(\n            event: "connect",\n            listener: (req: InstanceType<Request>, socket: Duplex, head: Buffer) => void,\n        ): this;\n        prependListener(event: "request", listener: http.RequestListener<Request, Response>): this;\n        prependListener(\n            event: "upgrade",\n            listener: (req: InstanceType<Request>, socket: Duplex, head: Buffer) => void,\n        ): this;\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\n        prependOnceListener(event: "keylog", listener: (line: Buffer, tlsSocket: tls.TLSSocket) => void): this;\n        prependOnceListener(\n            event: "newSession",\n            listener: (sessionId: Buffer, sessionData: Buffer, callback: (err: Error, resp: Buffer) => void) => void,\n        ): this;\n        prependOnceListener(\n            event: "OCSPRequest",\n            listener: (\n                certificate: Buffer,\n                issuer: Buffer,\n                callback: (err: Error | null, resp: Buffer) => void,\n            ) => void,\n        ): this;\n        prependOnceListener(\n            event: "resumeSession",\n            listener: (sessionId: Buffer, callback: (err: Error, sessionData: Buffer) => void) => void,\n        ): this;\n        prependOnceListener(event: "secureConnection", listener: (tlsSocket: tls.TLSSocket) => void): this;\n        prependOnceListener(event: "tlsClientError", listener: (err: Error, tlsSocket: tls.TLSSocket) => void): this;\n        prependOnceListener(event: "close", listener: () => void): this;\n        prependOnceListener(event: "connection", listener: (socket: Duplex) => void): this;\n        prependOnceListener(event: "error", listener: (err: Error) => void): this;\n        prependOnceListener(event: "listening", listener: () => void): this;\n        prependOnceListener(event: "checkContinue", listener: http.RequestListener<Request, Response>): this;\n        prependOnceListener(event: "checkExpectation", listener: http.RequestListener<Request, Response>): this;\n        prependOnceListener(event: "clientError", listener: (err: Error, socket: Duplex) => void): this;\n        prependOnceListener(\n            event: "connect",\n            listener: (req: InstanceType<Request>, socket: Duplex, head: Buffer) => void,\n        ): this;\n        prependOnceListener(event: "request", listener: http.RequestListener<Request, Response>): this;\n        prependOnceListener(\n            event: "upgrade",\n            listener: (req: InstanceType<Request>, socket: Duplex, head: Buffer) => void,\n        ): this;\n    }\n    /**\n     * ```js\n     * // curl -k https://localhost:8000/\n     * import https from \'node:https\';\n     * import fs from \'node:fs\';\n     *\n     * const options = {\n     *   key: fs.readFileSync(\'test/fixtures/keys/agent2-key.pem\'),\n     *   cert: fs.readFileSync(\'test/fixtures/keys/agent2-cert.pem\'),\n     * };\n     *\n     * https.createServer(options, (req, res) => {\n     *   res.writeHead(200);\n     *   res.end(\'hello world\\n\');\n     * }).listen(8000);\n     * ```\n     *\n     * Or\n     *\n     * ```js\n     * import https from \'node:https\';\n     * import fs from \'node:fs\';\n     *\n     * const options = {\n     *   pfx: fs.readFileSync(\'test/fixtures/test_cert.pfx\'),\n     *   passphrase: \'sample\',\n     * };\n     *\n     * https.createServer(options, (req, res) => {\n     *   res.writeHead(200);\n     *   res.end(\'hello world\\n\');\n     * }).listen(8000);\n     * ```\n     * @since v0.3.4\n     * @param options Accepts `options` from `createServer`, `createSecureContext` and `createServer`.\n     * @param requestListener A listener to be added to the `\'request\'` event.\n     */\n    function createServer<\n        Request extends typeof http.IncomingMessage = typeof http.IncomingMessage,\n        Response extends typeof http.ServerResponse<InstanceType<Request>> = typeof http.ServerResponse,\n    >(requestListener?: http.RequestListener<Request, Response>): Server<Request, Response>;\n    function createServer<\n        Request extends typeof http.IncomingMessage = typeof http.IncomingMessage,\n        Response extends typeof http.ServerResponse<InstanceType<Request>> = typeof http.ServerResponse,\n    >(\n        options: ServerOptions<Request, Response>,\n        requestListener?: http.RequestListener<Request, Response>,\n    ): Server<Request, Response>;\n    /**\n     * Makes a request to a secure web server.\n     *\n     * The following additional `options` from `tls.connect()` are also accepted: `ca`, `cert`, `ciphers`, `clientCertEngine`, `crl`, `dhparam`, `ecdhCurve`, `honorCipherOrder`, `key`, `passphrase`,\n     * `pfx`, `rejectUnauthorized`, `secureOptions`, `secureProtocol`, `servername`, `sessionIdContext`, `highWaterMark`.\n     *\n     * `options` can be an object, a string, or a `URL` object. If `options` is a\n     * string, it is automatically parsed with `new URL()`. If it is a `URL` object, it will be automatically converted to an ordinary `options` object.\n     *\n     * `https.request()` returns an instance of the `http.ClientRequest` class. The `ClientRequest` instance is a writable stream. If one needs to\n     * upload a file with a POST request, then write to the `ClientRequest` object.\n     *\n     * ```js\n     * import https from \'node:https\';\n     *\n     * const options = {\n     *   hostname: \'encrypted.google.com\',\n     *   port: 443,\n     *   path: \'/\',\n     *   method: \'GET\',\n     * };\n     *\n     * const req = https.request(options, (res) => {\n     *   console.log(\'statusCode:\', res.statusCode);\n     *   console.log(\'headers:\', res.headers);\n     *\n     *   res.on(\'data\', (d) => {\n     *     process.stdout.write(d);\n     *   });\n     * });\n     *\n     * req.on(\'error\', (e) => {\n     *   console.error(e);\n     * });\n     * req.end();\n     * ```\n     *\n     * Example using options from `tls.connect()`:\n     *\n     * ```js\n     * const options = {\n     *   hostname: \'encrypted.google.com\',\n     *   port: 443,\n     *   path: \'/\',\n     *   method: \'GET\',\n     *   key: fs.readFileSync(\'test/fixtures/keys/agent2-key.pem\'),\n     *   cert: fs.readFileSync(\'test/fixtures/keys/agent2-cert.pem\'),\n     * };\n     * options.agent = new https.Agent(options);\n     *\n     * const req = https.request(options, (res) => {\n     *   // ...\n     * });\n     * ```\n     *\n     * Alternatively, opt out of connection pooling by not using an `Agent`.\n     *\n     * ```js\n     * const options = {\n     *   hostname: \'encrypted.google.com\',\n     *   port: 443,\n     *   path: \'/\',\n     *   method: \'GET\',\n     *   key: fs.readFileSync(\'test/fixtures/keys/agent2-key.pem\'),\n     *   cert: fs.readFileSync(\'test/fixtures/keys/agent2-cert.pem\'),\n     *   agent: false,\n     * };\n     *\n     * const req = https.request(options, (res) => {\n     *   // ...\n     * });\n     * ```\n     *\n     * Example using a `URL` as `options`:\n     *\n     * ```js\n     * const options = new URL(\'https://abc:xyz@example.com\');\n     *\n     * const req = https.request(options, (res) => {\n     *   // ...\n     * });\n     * ```\n     *\n     * Example pinning on certificate fingerprint, or the public key (similar to`pin-sha256`):\n     *\n     * ```js\n     * import tls from \'node:tls\';\n     * import https from \'node:https\';\n     * import crypto from \'node:crypto\';\n     *\n     * function sha256(s) {\n     *   return crypto.createHash(\'sha256\').update(s).digest(\'base64\');\n     * }\n     * const options = {\n     *   hostname: \'github.com\',\n     *   port: 443,\n     *   path: \'/\',\n     *   method: \'GET\',\n     *   checkServerIdentity: function(host, cert) {\n     *     // Make sure the certificate is issued to the host we are connected to\n     *     const err = tls.checkServerIdentity(host, cert);\n     *     if (err) {\n     *       return err;\n     *     }\n     *\n     *     // Pin the public key, similar to HPKP pin-sha256 pinning\n     *     const pubkey256 = \'pL1+qb9HTMRZJmuC/bB/ZI9d302BYrrqiVuRyW+DGrU=\';\n     *     if (sha256(cert.pubkey) !== pubkey256) {\n     *       const msg = \'Certificate verification error: \' +\n     *         `The public key of \'${cert.subject.CN}\' ` +\n     *         \'does not match our pinned fingerprint\';\n     *       return new Error(msg);\n     *     }\n     *\n     *     // Pin the exact certificate, rather than the pub key\n     *     const cert256 = \'25:FE:39:32:D9:63:8C:8A:FC:A1:9A:29:87:\' +\n     *       \'D8:3E:4C:1D:98:DB:71:E4:1A:48:03:98:EA:22:6A:BD:8B:93:16\';\n     *     if (cert.fingerprint256 !== cert256) {\n     *       const msg = \'Certificate verification error: \' +\n     *         `The certificate of \'${cert.subject.CN}\' ` +\n     *         \'does not match our pinned fingerprint\';\n     *       return new Error(msg);\n     *     }\n     *\n     *     // This loop is informational only.\n     *     // Print the certificate and public key fingerprints of all certs in the\n     *     // chain. Its common to pin the public key of the issuer on the public\n     *     // internet, while pinning the public key of the service in sensitive\n     *     // environments.\n     *     do {\n     *       console.log(\'Subject Common Name:\', cert.subject.CN);\n     *       console.log(\'  Certificate SHA256 fingerprint:\', cert.fingerprint256);\n     *\n     *       hash = crypto.createHash(\'sha256\');\n     *       console.log(\'  Public key ping-sha256:\', sha256(cert.pubkey));\n     *\n     *       lastprint256 = cert.fingerprint256;\n     *       cert = cert.issuerCertificate;\n     *     } while (cert.fingerprint256 !== lastprint256);\n     *\n     *   },\n     * };\n     *\n     * options.agent = new https.Agent(options);\n     * const req = https.request(options, (res) => {\n     *   console.log(\'All OK. Server matched our pinned cert or public key\');\n     *   console.log(\'statusCode:\', res.statusCode);\n     *   // Print the HPKP values\n     *   console.log(\'headers:\', res.headers[\'public-key-pins\']);\n     *\n     *   res.on(\'data\', (d) => {});\n     * });\n     *\n     * req.on(\'error\', (e) => {\n     *   console.error(e.message);\n     * });\n     * req.end();\n     * ```\n     *\n     * Outputs for example:\n     *\n     * ```text\n     * Subject Common Name: github.com\n     *   Certificate SHA256 fingerprint: 25:FE:39:32:D9:63:8C:8A:FC:A1:9A:29:87:D8:3E:4C:1D:98:DB:71:E4:1A:48:03:98:EA:22:6A:BD:8B:93:16\n     *   Public key ping-sha256: pL1+qb9HTMRZJmuC/bB/ZI9d302BYrrqiVuRyW+DGrU=\n     * Subject Common Name: DigiCert SHA2 Extended Validation Server CA\n     *   Certificate SHA256 fingerprint: 40:3E:06:2A:26:53:05:91:13:28:5B:AF:80:A0:D4:AE:42:2C:84:8C:9F:78:FA:D0:1F:C9:4B:C5:B8:7F:EF:1A\n     *   Public key ping-sha256: RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=\n     * Subject Common Name: DigiCert High Assurance EV Root CA\n     *   Certificate SHA256 fingerprint: 74:31:E5:F4:C3:C1:CE:46:90:77:4F:0B:61:E0:54:40:88:3B:A9:A0:1E:D0:0B:A6:AB:D7:80:6E:D3:B1:18:CF\n     *   Public key ping-sha256: WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18=\n     * All OK. Server matched our pinned cert or public key\n     * statusCode: 200\n     * headers: max-age=0; pin-sha256="WoiWRyIOVNa9ihaBciRSC7XHjliYS9VwUGOIud4PB18="; pin-sha256="RRM1dGqnDFsCJXBTHky16vi1obOlCgFFn/yOhI/y+ho=";\n     * pin-sha256="k2v657xBsOVe1PQRwOsHsw3bsGT2VzIqz5K+59sNQws="; pin-sha256="K87oWBWM9UZfyddvDfoxL+8lpNyoUB2ptGtn0fv6G2Q="; pin-sha256="IQBnNBEiFuhj+8x6X8XLgh01V9Ic5/V3IRQLNFFc7v4=";\n     * pin-sha256="iie1VXtL7HzAMF+/PVPR9xzT80kQxdZeJ+zduCB3uj0="; pin-sha256="LvRiGEjRqfzurezaWuj8Wie2gyHMrW5Q06LspMnox7A="; includeSubDomains\n     * ```\n     * @since v0.3.6\n     * @param options Accepts all `options` from `request`, with some differences in default values:\n     */\n    function request(\n        options: RequestOptions | string | URL,\n        callback?: (res: http.IncomingMessage) => void,\n    ): http.ClientRequest;\n    function request(\n        url: string | URL,\n        options: RequestOptions,\n        callback?: (res: http.IncomingMessage) => void,\n    ): http.ClientRequest;\n    /**\n     * Like `http.get()` but for HTTPS.\n     *\n     * `options` can be an object, a string, or a `URL` object. If `options` is a\n     * string, it is automatically parsed with `new URL()`. If it is a `URL` object, it will be automatically converted to an ordinary `options` object.\n     *\n     * ```js\n     * import https from \'node:https\';\n     *\n     * https.get(\'https://encrypted.google.com/\', (res) => {\n     *   console.log(\'statusCode:\', res.statusCode);\n     *   console.log(\'headers:\', res.headers);\n     *\n     *   res.on(\'data\', (d) => {\n     *     process.stdout.write(d);\n     *   });\n     *\n     * }).on(\'error\', (e) => {\n     *   console.error(e);\n     * });\n     * ```\n     * @since v0.3.6\n     * @param options Accepts the same `options` as {@link request}, with the `method` always set to `GET`.\n     */\n    function get(\n        options: RequestOptions | string | URL,\n        callback?: (res: http.IncomingMessage) => void,\n    ): http.ClientRequest;\n    function get(\n        url: string | URL,\n        options: RequestOptions,\n        callback?: (res: http.IncomingMessage) => void,\n    ): http.ClientRequest;\n    let globalAgent: Agent;\n}\ndeclare module "node:https" {\n    export * from "https";\n}\n',
  '@types/node/index.d.ts':
    '/**\n * License for programmatically and manually incorporated\n * documentation aka. `JSDoc` from https://github.com/nodejs/node/tree/master/doc\n *\n * Copyright Node.js contributors. All rights reserved.\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the "Software"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n */\n\n// NOTE: These definitions support Node.js and TypeScript 5.7+.\n\n// Reference required TypeScript libs:\n/// <reference lib="es2020" />\n\n// TypeScript backwards-compatibility definitions:\n/// <reference path="compatibility/index.d.ts" />\n\n// Definitions specific to TypeScript 5.7+:\n/// <reference path="globals.typedarray.d.ts" />\n/// <reference path="buffer.buffer.d.ts" />\n\n// Definitions for Node.js modules that are not specific to any version of TypeScript:\n/// <reference path="globals.d.ts" />\n/// <reference path="assert.d.ts" />\n/// <reference path="assert/strict.d.ts" />\n/// <reference path="async_hooks.d.ts" />\n/// <reference path="buffer.d.ts" />\n/// <reference path="child_process.d.ts" />\n/// <reference path="cluster.d.ts" />\n/// <reference path="console.d.ts" />\n/// <reference path="constants.d.ts" />\n/// <reference path="crypto.d.ts" />\n/// <reference path="dgram.d.ts" />\n/// <reference path="diagnostics_channel.d.ts" />\n/// <reference path="dns.d.ts" />\n/// <reference path="dns/promises.d.ts" />\n/// <reference path="dns/promises.d.ts" />\n/// <reference path="domain.d.ts" />\n/// <reference path="dom-events.d.ts" />\n/// <reference path="events.d.ts" />\n/// <reference path="fs.d.ts" />\n/// <reference path="fs/promises.d.ts" />\n/// <reference path="http.d.ts" />\n/// <reference path="http2.d.ts" />\n/// <reference path="https.d.ts" />\n/// <reference path="inspector.d.ts" />\n/// <reference path="module.d.ts" />\n/// <reference path="net.d.ts" />\n/// <reference path="os.d.ts" />\n/// <reference path="path.d.ts" />\n/// <reference path="perf_hooks.d.ts" />\n/// <reference path="process.d.ts" />\n/// <reference path="punycode.d.ts" />\n/// <reference path="querystring.d.ts" />\n/// <reference path="readline.d.ts" />\n/// <reference path="readline/promises.d.ts" />\n/// <reference path="repl.d.ts" />\n/// <reference path="sea.d.ts" />\n/// <reference path="sqlite.d.ts" />\n/// <reference path="stream.d.ts" />\n/// <reference path="stream/promises.d.ts" />\n/// <reference path="stream/consumers.d.ts" />\n/// <reference path="stream/web.d.ts" />\n/// <reference path="string_decoder.d.ts" />\n/// <reference path="test.d.ts" />\n/// <reference path="timers.d.ts" />\n/// <reference path="timers/promises.d.ts" />\n/// <reference path="tls.d.ts" />\n/// <reference path="trace_events.d.ts" />\n/// <reference path="tty.d.ts" />\n/// <reference path="url.d.ts" />\n/// <reference path="util.d.ts" />\n/// <reference path="v8.d.ts" />\n/// <reference path="vm.d.ts" />\n/// <reference path="wasi.d.ts" />\n/// <reference path="worker_threads.d.ts" />\n/// <reference path="zlib.d.ts" />\n',
  '@types/node/inspector.d.ts':
    "// These definitions are automatically generated by the generate-inspector script.\n// Do not edit this file directly.\n// See scripts/generate-inspector/README.md for information on how to update the protocol definitions.\n// Changes to the module itself should be added to the generator template (scripts/generate-inspector/inspector.d.ts.template).\n\n/**\n * The `node:inspector` module provides an API for interacting with the V8\n * inspector.\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/inspector.js)\n */\ndeclare module 'inspector' {\n    import EventEmitter = require('node:events');\n\n    interface InspectorNotification<T> {\n        method: string;\n        params: T;\n    }\n\n    namespace Schema {\n        /**\n         * Description of the protocol domain.\n         */\n        interface Domain {\n            /**\n             * Domain name.\n             */\n            name: string;\n            /**\n             * Domain version.\n             */\n            version: string;\n        }\n        interface GetDomainsReturnType {\n            /**\n             * List of supported domains.\n             */\n            domains: Domain[];\n        }\n    }\n    namespace Runtime {\n        /**\n         * Unique script identifier.\n         */\n        type ScriptId = string;\n        /**\n         * Unique object identifier.\n         */\n        type RemoteObjectId = string;\n        /**\n         * Primitive value which cannot be JSON-stringified.\n         */\n        type UnserializableValue = string;\n        /**\n         * Mirror object referencing original JavaScript object.\n         */\n        interface RemoteObject {\n            /**\n             * Object type.\n             */\n            type: string;\n            /**\n             * Object subtype hint. Specified for <code>object</code> type values only.\n             */\n            subtype?: string | undefined;\n            /**\n             * Object class (constructor) name. Specified for <code>object</code> type values only.\n             */\n            className?: string | undefined;\n            /**\n             * Remote object value in case of primitive values or JSON values (if it was requested).\n             */\n            value?: any;\n            /**\n             * Primitive value which can not be JSON-stringified does not have <code>value</code>, but gets this property.\n             */\n            unserializableValue?: UnserializableValue | undefined;\n            /**\n             * String representation of the object.\n             */\n            description?: string | undefined;\n            /**\n             * Unique object identifier (for non-primitive values).\n             */\n            objectId?: RemoteObjectId | undefined;\n            /**\n             * Preview containing abbreviated property values. Specified for <code>object</code> type values only.\n             * @experimental\n             */\n            preview?: ObjectPreview | undefined;\n            /**\n             * @experimental\n             */\n            customPreview?: CustomPreview | undefined;\n        }\n        /**\n         * @experimental\n         */\n        interface CustomPreview {\n            header: string;\n            hasBody: boolean;\n            formatterObjectId: RemoteObjectId;\n            bindRemoteObjectFunctionId: RemoteObjectId;\n            configObjectId?: RemoteObjectId | undefined;\n        }\n        /**\n         * Object containing abbreviated remote object value.\n         * @experimental\n         */\n        interface ObjectPreview {\n            /**\n             * Object type.\n             */\n            type: string;\n            /**\n             * Object subtype hint. Specified for <code>object</code> type values only.\n             */\n            subtype?: string | undefined;\n            /**\n             * String representation of the object.\n             */\n            description?: string | undefined;\n            /**\n             * True iff some of the properties or entries of the original object did not fit.\n             */\n            overflow: boolean;\n            /**\n             * List of the properties.\n             */\n            properties: PropertyPreview[];\n            /**\n             * List of the entries. Specified for <code>map</code> and <code>set</code> subtype values only.\n             */\n            entries?: EntryPreview[] | undefined;\n        }\n        /**\n         * @experimental\n         */\n        interface PropertyPreview {\n            /**\n             * Property name.\n             */\n            name: string;\n            /**\n             * Object type. Accessor means that the property itself is an accessor property.\n             */\n            type: string;\n            /**\n             * User-friendly property value string.\n             */\n            value?: string | undefined;\n            /**\n             * Nested value preview.\n             */\n            valuePreview?: ObjectPreview | undefined;\n            /**\n             * Object subtype hint. Specified for <code>object</code> type values only.\n             */\n            subtype?: string | undefined;\n        }\n        /**\n         * @experimental\n         */\n        interface EntryPreview {\n            /**\n             * Preview of the key. Specified for map-like collection entries.\n             */\n            key?: ObjectPreview | undefined;\n            /**\n             * Preview of the value.\n             */\n            value: ObjectPreview;\n        }\n        /**\n         * Object property descriptor.\n         */\n        interface PropertyDescriptor {\n            /**\n             * Property name or symbol description.\n             */\n            name: string;\n            /**\n             * The value associated with the property.\n             */\n            value?: RemoteObject | undefined;\n            /**\n             * True if the value associated with the property may be changed (data descriptors only).\n             */\n            writable?: boolean | undefined;\n            /**\n             * A function which serves as a getter for the property, or <code>undefined</code> if there is no getter (accessor descriptors only).\n             */\n            get?: RemoteObject | undefined;\n            /**\n             * A function which serves as a setter for the property, or <code>undefined</code> if there is no setter (accessor descriptors only).\n             */\n            set?: RemoteObject | undefined;\n            /**\n             * True if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.\n             */\n            configurable: boolean;\n            /**\n             * True if this property shows up during enumeration of the properties on the corresponding object.\n             */\n            enumerable: boolean;\n            /**\n             * True if the result was thrown during the evaluation.\n             */\n            wasThrown?: boolean | undefined;\n            /**\n             * True if the property is owned for the object.\n             */\n            isOwn?: boolean | undefined;\n            /**\n             * Property symbol object, if the property is of the <code>symbol</code> type.\n             */\n            symbol?: RemoteObject | undefined;\n        }\n        /**\n         * Object internal property descriptor. This property isn't normally visible in JavaScript code.\n         */\n        interface InternalPropertyDescriptor {\n            /**\n             * Conventional property name.\n             */\n            name: string;\n            /**\n             * The value associated with the property.\n             */\n            value?: RemoteObject | undefined;\n        }\n        /**\n         * Represents function call argument. Either remote object id <code>objectId</code>, primitive <code>value</code>, unserializable primitive value or neither of (for undefined) them should be specified.\n         */\n        interface CallArgument {\n            /**\n             * Primitive value or serializable javascript object.\n             */\n            value?: any;\n            /**\n             * Primitive value which can not be JSON-stringified.\n             */\n            unserializableValue?: UnserializableValue | undefined;\n            /**\n             * Remote object handle.\n             */\n            objectId?: RemoteObjectId | undefined;\n        }\n        /**\n         * Id of an execution context.\n         */\n        type ExecutionContextId = number;\n        /**\n         * Description of an isolated world.\n         */\n        interface ExecutionContextDescription {\n            /**\n             * Unique id of the execution context. It can be used to specify in which execution context script evaluation should be performed.\n             */\n            id: ExecutionContextId;\n            /**\n             * Execution context origin.\n             */\n            origin: string;\n            /**\n             * Human readable name describing given context.\n             */\n            name: string;\n            /**\n             * Embedder-specific auxiliary data.\n             */\n            auxData?: {} | undefined;\n        }\n        /**\n         * Detailed information about exception (or error) that was thrown during script compilation or execution.\n         */\n        interface ExceptionDetails {\n            /**\n             * Exception id.\n             */\n            exceptionId: number;\n            /**\n             * Exception text, which should be used together with exception object when available.\n             */\n            text: string;\n            /**\n             * Line number of the exception location (0-based).\n             */\n            lineNumber: number;\n            /**\n             * Column number of the exception location (0-based).\n             */\n            columnNumber: number;\n            /**\n             * Script ID of the exception location.\n             */\n            scriptId?: ScriptId | undefined;\n            /**\n             * URL of the exception location, to be used when the script was not reported.\n             */\n            url?: string | undefined;\n            /**\n             * JavaScript stack trace if available.\n             */\n            stackTrace?: StackTrace | undefined;\n            /**\n             * Exception object if available.\n             */\n            exception?: RemoteObject | undefined;\n            /**\n             * Identifier of the context where exception happened.\n             */\n            executionContextId?: ExecutionContextId | undefined;\n        }\n        /**\n         * Number of milliseconds since epoch.\n         */\n        type Timestamp = number;\n        /**\n         * Stack entry for runtime errors and assertions.\n         */\n        interface CallFrame {\n            /**\n             * JavaScript function name.\n             */\n            functionName: string;\n            /**\n             * JavaScript script id.\n             */\n            scriptId: ScriptId;\n            /**\n             * JavaScript script name or url.\n             */\n            url: string;\n            /**\n             * JavaScript script line number (0-based).\n             */\n            lineNumber: number;\n            /**\n             * JavaScript script column number (0-based).\n             */\n            columnNumber: number;\n        }\n        /**\n         * Call frames for assertions or error messages.\n         */\n        interface StackTrace {\n            /**\n             * String label of this stack trace. For async traces this may be a name of the function that initiated the async call.\n             */\n            description?: string | undefined;\n            /**\n             * JavaScript function name.\n             */\n            callFrames: CallFrame[];\n            /**\n             * Asynchronous JavaScript stack trace that preceded this stack, if available.\n             */\n            parent?: StackTrace | undefined;\n            /**\n             * Asynchronous JavaScript stack trace that preceded this stack, if available.\n             * @experimental\n             */\n            parentId?: StackTraceId | undefined;\n        }\n        /**\n         * Unique identifier of current debugger.\n         * @experimental\n         */\n        type UniqueDebuggerId = string;\n        /**\n         * If <code>debuggerId</code> is set stack trace comes from another debugger and can be resolved there. This allows to track cross-debugger calls. See <code>Runtime.StackTrace</code> and <code>Debugger.paused</code> for usages.\n         * @experimental\n         */\n        interface StackTraceId {\n            id: string;\n            debuggerId?: UniqueDebuggerId | undefined;\n        }\n        interface EvaluateParameterType {\n            /**\n             * Expression to evaluate.\n             */\n            expression: string;\n            /**\n             * Symbolic group name that can be used to release multiple objects.\n             */\n            objectGroup?: string | undefined;\n            /**\n             * Determines whether Command Line API should be available during the evaluation.\n             */\n            includeCommandLineAPI?: boolean | undefined;\n            /**\n             * In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides <code>setPauseOnException</code> state.\n             */\n            silent?: boolean | undefined;\n            /**\n             * Specifies in which execution context to perform evaluation. If the parameter is omitted the evaluation will be performed in the context of the inspected page.\n             */\n            contextId?: ExecutionContextId | undefined;\n            /**\n             * Whether the result is expected to be a JSON object that should be sent by value.\n             */\n            returnByValue?: boolean | undefined;\n            /**\n             * Whether preview should be generated for the result.\n             * @experimental\n             */\n            generatePreview?: boolean | undefined;\n            /**\n             * Whether execution should be treated as initiated by user in the UI.\n             */\n            userGesture?: boolean | undefined;\n            /**\n             * Whether execution should <code>await</code> for resulting value and return once awaited promise is resolved.\n             */\n            awaitPromise?: boolean | undefined;\n        }\n        interface AwaitPromiseParameterType {\n            /**\n             * Identifier of the promise.\n             */\n            promiseObjectId: RemoteObjectId;\n            /**\n             * Whether the result is expected to be a JSON object that should be sent by value.\n             */\n            returnByValue?: boolean | undefined;\n            /**\n             * Whether preview should be generated for the result.\n             */\n            generatePreview?: boolean | undefined;\n        }\n        interface CallFunctionOnParameterType {\n            /**\n             * Declaration of the function to call.\n             */\n            functionDeclaration: string;\n            /**\n             * Identifier of the object to call function on. Either objectId or executionContextId should be specified.\n             */\n            objectId?: RemoteObjectId | undefined;\n            /**\n             * Call arguments. All call arguments must belong to the same JavaScript world as the target object.\n             */\n            arguments?: CallArgument[] | undefined;\n            /**\n             * In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides <code>setPauseOnException</code> state.\n             */\n            silent?: boolean | undefined;\n            /**\n             * Whether the result is expected to be a JSON object which should be sent by value.\n             */\n            returnByValue?: boolean | undefined;\n            /**\n             * Whether preview should be generated for the result.\n             * @experimental\n             */\n            generatePreview?: boolean | undefined;\n            /**\n             * Whether execution should be treated as initiated by user in the UI.\n             */\n            userGesture?: boolean | undefined;\n            /**\n             * Whether execution should <code>await</code> for resulting value and return once awaited promise is resolved.\n             */\n            awaitPromise?: boolean | undefined;\n            /**\n             * Specifies execution context which global object will be used to call function on. Either executionContextId or objectId should be specified.\n             */\n            executionContextId?: ExecutionContextId | undefined;\n            /**\n             * Symbolic group name that can be used to release multiple objects. If objectGroup is not specified and objectId is, objectGroup will be inherited from object.\n             */\n            objectGroup?: string | undefined;\n        }\n        interface GetPropertiesParameterType {\n            /**\n             * Identifier of the object to return properties for.\n             */\n            objectId: RemoteObjectId;\n            /**\n             * If true, returns properties belonging only to the element itself, not to its prototype chain.\n             */\n            ownProperties?: boolean | undefined;\n            /**\n             * If true, returns accessor properties (with getter/setter) only; internal properties are not returned either.\n             * @experimental\n             */\n            accessorPropertiesOnly?: boolean | undefined;\n            /**\n             * Whether preview should be generated for the results.\n             * @experimental\n             */\n            generatePreview?: boolean | undefined;\n        }\n        interface ReleaseObjectParameterType {\n            /**\n             * Identifier of the object to release.\n             */\n            objectId: RemoteObjectId;\n        }\n        interface ReleaseObjectGroupParameterType {\n            /**\n             * Symbolic object group name.\n             */\n            objectGroup: string;\n        }\n        interface SetCustomObjectFormatterEnabledParameterType {\n            enabled: boolean;\n        }\n        interface CompileScriptParameterType {\n            /**\n             * Expression to compile.\n             */\n            expression: string;\n            /**\n             * Source url to be set for the script.\n             */\n            sourceURL: string;\n            /**\n             * Specifies whether the compiled script should be persisted.\n             */\n            persistScript: boolean;\n            /**\n             * Specifies in which execution context to perform script run. If the parameter is omitted the evaluation will be performed in the context of the inspected page.\n             */\n            executionContextId?: ExecutionContextId | undefined;\n        }\n        interface RunScriptParameterType {\n            /**\n             * Id of the script to run.\n             */\n            scriptId: ScriptId;\n            /**\n             * Specifies in which execution context to perform script run. If the parameter is omitted the evaluation will be performed in the context of the inspected page.\n             */\n            executionContextId?: ExecutionContextId | undefined;\n            /**\n             * Symbolic group name that can be used to release multiple objects.\n             */\n            objectGroup?: string | undefined;\n            /**\n             * In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides <code>setPauseOnException</code> state.\n             */\n            silent?: boolean | undefined;\n            /**\n             * Determines whether Command Line API should be available during the evaluation.\n             */\n            includeCommandLineAPI?: boolean | undefined;\n            /**\n             * Whether the result is expected to be a JSON object which should be sent by value.\n             */\n            returnByValue?: boolean | undefined;\n            /**\n             * Whether preview should be generated for the result.\n             */\n            generatePreview?: boolean | undefined;\n            /**\n             * Whether execution should <code>await</code> for resulting value and return once awaited promise is resolved.\n             */\n            awaitPromise?: boolean | undefined;\n        }\n        interface QueryObjectsParameterType {\n            /**\n             * Identifier of the prototype to return objects for.\n             */\n            prototypeObjectId: RemoteObjectId;\n        }\n        interface GlobalLexicalScopeNamesParameterType {\n            /**\n             * Specifies in which execution context to lookup global scope variables.\n             */\n            executionContextId?: ExecutionContextId | undefined;\n        }\n        interface EvaluateReturnType {\n            /**\n             * Evaluation result.\n             */\n            result: RemoteObject;\n            /**\n             * Exception details.\n             */\n            exceptionDetails?: ExceptionDetails | undefined;\n        }\n        interface AwaitPromiseReturnType {\n            /**\n             * Promise result. Will contain rejected value if promise was rejected.\n             */\n            result: RemoteObject;\n            /**\n             * Exception details if stack strace is available.\n             */\n            exceptionDetails?: ExceptionDetails | undefined;\n        }\n        interface CallFunctionOnReturnType {\n            /**\n             * Call result.\n             */\n            result: RemoteObject;\n            /**\n             * Exception details.\n             */\n            exceptionDetails?: ExceptionDetails | undefined;\n        }\n        interface GetPropertiesReturnType {\n            /**\n             * Object properties.\n             */\n            result: PropertyDescriptor[];\n            /**\n             * Internal object properties (only of the element itself).\n             */\n            internalProperties?: InternalPropertyDescriptor[] | undefined;\n            /**\n             * Exception details.\n             */\n            exceptionDetails?: ExceptionDetails | undefined;\n        }\n        interface CompileScriptReturnType {\n            /**\n             * Id of the script.\n             */\n            scriptId?: ScriptId | undefined;\n            /**\n             * Exception details.\n             */\n            exceptionDetails?: ExceptionDetails | undefined;\n        }\n        interface RunScriptReturnType {\n            /**\n             * Run result.\n             */\n            result: RemoteObject;\n            /**\n             * Exception details.\n             */\n            exceptionDetails?: ExceptionDetails | undefined;\n        }\n        interface QueryObjectsReturnType {\n            /**\n             * Array with objects.\n             */\n            objects: RemoteObject;\n        }\n        interface GlobalLexicalScopeNamesReturnType {\n            names: string[];\n        }\n        interface ExecutionContextCreatedEventDataType {\n            /**\n             * A newly created execution context.\n             */\n            context: ExecutionContextDescription;\n        }\n        interface ExecutionContextDestroyedEventDataType {\n            /**\n             * Id of the destroyed context\n             */\n            executionContextId: ExecutionContextId;\n        }\n        interface ExceptionThrownEventDataType {\n            /**\n             * Timestamp of the exception.\n             */\n            timestamp: Timestamp;\n            exceptionDetails: ExceptionDetails;\n        }\n        interface ExceptionRevokedEventDataType {\n            /**\n             * Reason describing why exception was revoked.\n             */\n            reason: string;\n            /**\n             * The id of revoked exception, as reported in <code>exceptionThrown</code>.\n             */\n            exceptionId: number;\n        }\n        interface ConsoleAPICalledEventDataType {\n            /**\n             * Type of the call.\n             */\n            type: string;\n            /**\n             * Call arguments.\n             */\n            args: RemoteObject[];\n            /**\n             * Identifier of the context where the call was made.\n             */\n            executionContextId: ExecutionContextId;\n            /**\n             * Call timestamp.\n             */\n            timestamp: Timestamp;\n            /**\n             * Stack trace captured when the call was made.\n             */\n            stackTrace?: StackTrace | undefined;\n            /**\n             * Console context descriptor for calls on non-default console context (not console.*): 'anonymous#unique-logger-id' for call on unnamed context, 'name#unique-logger-id' for call on named context.\n             * @experimental\n             */\n            context?: string | undefined;\n        }\n        interface InspectRequestedEventDataType {\n            object: RemoteObject;\n            hints: {};\n        }\n    }\n    namespace Debugger {\n        /**\n         * Breakpoint identifier.\n         */\n        type BreakpointId = string;\n        /**\n         * Call frame identifier.\n         */\n        type CallFrameId = string;\n        /**\n         * Location in the source code.\n         */\n        interface Location {\n            /**\n             * Script identifier as reported in the <code>Debugger.scriptParsed</code>.\n             */\n            scriptId: Runtime.ScriptId;\n            /**\n             * Line number in the script (0-based).\n             */\n            lineNumber: number;\n            /**\n             * Column number in the script (0-based).\n             */\n            columnNumber?: number | undefined;\n        }\n        /**\n         * Location in the source code.\n         * @experimental\n         */\n        interface ScriptPosition {\n            lineNumber: number;\n            columnNumber: number;\n        }\n        /**\n         * JavaScript call frame. Array of call frames form the call stack.\n         */\n        interface CallFrame {\n            /**\n             * Call frame identifier. This identifier is only valid while the virtual machine is paused.\n             */\n            callFrameId: CallFrameId;\n            /**\n             * Name of the JavaScript function called on this call frame.\n             */\n            functionName: string;\n            /**\n             * Location in the source code.\n             */\n            functionLocation?: Location | undefined;\n            /**\n             * Location in the source code.\n             */\n            location: Location;\n            /**\n             * JavaScript script name or url.\n             */\n            url: string;\n            /**\n             * Scope chain for this call frame.\n             */\n            scopeChain: Scope[];\n            /**\n             * <code>this</code> object for this call frame.\n             */\n            this: Runtime.RemoteObject;\n            /**\n             * The value being returned, if the function is at return point.\n             */\n            returnValue?: Runtime.RemoteObject | undefined;\n        }\n        /**\n         * Scope description.\n         */\n        interface Scope {\n            /**\n             * Scope type.\n             */\n            type: string;\n            /**\n             * Object representing the scope. For <code>global</code> and <code>with</code> scopes it represents the actual object; for the rest of the scopes, it is artificial transient object enumerating scope variables as its properties.\n             */\n            object: Runtime.RemoteObject;\n            name?: string | undefined;\n            /**\n             * Location in the source code where scope starts\n             */\n            startLocation?: Location | undefined;\n            /**\n             * Location in the source code where scope ends\n             */\n            endLocation?: Location | undefined;\n        }\n        /**\n         * Search match for resource.\n         */\n        interface SearchMatch {\n            /**\n             * Line number in resource content.\n             */\n            lineNumber: number;\n            /**\n             * Line with match content.\n             */\n            lineContent: string;\n        }\n        interface BreakLocation {\n            /**\n             * Script identifier as reported in the <code>Debugger.scriptParsed</code>.\n             */\n            scriptId: Runtime.ScriptId;\n            /**\n             * Line number in the script (0-based).\n             */\n            lineNumber: number;\n            /**\n             * Column number in the script (0-based).\n             */\n            columnNumber?: number | undefined;\n            type?: string | undefined;\n        }\n        interface SetBreakpointsActiveParameterType {\n            /**\n             * New value for breakpoints active state.\n             */\n            active: boolean;\n        }\n        interface SetSkipAllPausesParameterType {\n            /**\n             * New value for skip pauses state.\n             */\n            skip: boolean;\n        }\n        interface SetBreakpointByUrlParameterType {\n            /**\n             * Line number to set breakpoint at.\n             */\n            lineNumber: number;\n            /**\n             * URL of the resources to set breakpoint on.\n             */\n            url?: string | undefined;\n            /**\n             * Regex pattern for the URLs of the resources to set breakpoints on. Either <code>url</code> or <code>urlRegex</code> must be specified.\n             */\n            urlRegex?: string | undefined;\n            /**\n             * Script hash of the resources to set breakpoint on.\n             */\n            scriptHash?: string | undefined;\n            /**\n             * Offset in the line to set breakpoint at.\n             */\n            columnNumber?: number | undefined;\n            /**\n             * Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true.\n             */\n            condition?: string | undefined;\n        }\n        interface SetBreakpointParameterType {\n            /**\n             * Location to set breakpoint in.\n             */\n            location: Location;\n            /**\n             * Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true.\n             */\n            condition?: string | undefined;\n        }\n        interface RemoveBreakpointParameterType {\n            breakpointId: BreakpointId;\n        }\n        interface GetPossibleBreakpointsParameterType {\n            /**\n             * Start of range to search possible breakpoint locations in.\n             */\n            start: Location;\n            /**\n             * End of range to search possible breakpoint locations in (excluding). When not specified, end of scripts is used as end of range.\n             */\n            end?: Location | undefined;\n            /**\n             * Only consider locations which are in the same (non-nested) function as start.\n             */\n            restrictToFunction?: boolean | undefined;\n        }\n        interface ContinueToLocationParameterType {\n            /**\n             * Location to continue to.\n             */\n            location: Location;\n            targetCallFrames?: string | undefined;\n        }\n        interface PauseOnAsyncCallParameterType {\n            /**\n             * Debugger will pause when async call with given stack trace is started.\n             */\n            parentStackTraceId: Runtime.StackTraceId;\n        }\n        interface StepIntoParameterType {\n            /**\n             * Debugger will issue additional Debugger.paused notification if any async task is scheduled before next pause.\n             * @experimental\n             */\n            breakOnAsyncCall?: boolean | undefined;\n        }\n        interface GetStackTraceParameterType {\n            stackTraceId: Runtime.StackTraceId;\n        }\n        interface SearchInContentParameterType {\n            /**\n             * Id of the script to search in.\n             */\n            scriptId: Runtime.ScriptId;\n            /**\n             * String to search for.\n             */\n            query: string;\n            /**\n             * If true, search is case sensitive.\n             */\n            caseSensitive?: boolean | undefined;\n            /**\n             * If true, treats string parameter as regex.\n             */\n            isRegex?: boolean | undefined;\n        }\n        interface SetScriptSourceParameterType {\n            /**\n             * Id of the script to edit.\n             */\n            scriptId: Runtime.ScriptId;\n            /**\n             * New content of the script.\n             */\n            scriptSource: string;\n            /**\n             *  If true the change will not actually be applied. Dry run may be used to get result description without actually modifying the code.\n             */\n            dryRun?: boolean | undefined;\n        }\n        interface RestartFrameParameterType {\n            /**\n             * Call frame identifier to evaluate on.\n             */\n            callFrameId: CallFrameId;\n        }\n        interface GetScriptSourceParameterType {\n            /**\n             * Id of the script to get source for.\n             */\n            scriptId: Runtime.ScriptId;\n        }\n        interface SetPauseOnExceptionsParameterType {\n            /**\n             * Pause on exceptions mode.\n             */\n            state: string;\n        }\n        interface EvaluateOnCallFrameParameterType {\n            /**\n             * Call frame identifier to evaluate on.\n             */\n            callFrameId: CallFrameId;\n            /**\n             * Expression to evaluate.\n             */\n            expression: string;\n            /**\n             * String object group name to put result into (allows rapid releasing resulting object handles using <code>releaseObjectGroup</code>).\n             */\n            objectGroup?: string | undefined;\n            /**\n             * Specifies whether command line API should be available to the evaluated expression, defaults to false.\n             */\n            includeCommandLineAPI?: boolean | undefined;\n            /**\n             * In silent mode exceptions thrown during evaluation are not reported and do not pause execution. Overrides <code>setPauseOnException</code> state.\n             */\n            silent?: boolean | undefined;\n            /**\n             * Whether the result is expected to be a JSON object that should be sent by value.\n             */\n            returnByValue?: boolean | undefined;\n            /**\n             * Whether preview should be generated for the result.\n             * @experimental\n             */\n            generatePreview?: boolean | undefined;\n            /**\n             * Whether to throw an exception if side effect cannot be ruled out during evaluation.\n             */\n            throwOnSideEffect?: boolean | undefined;\n        }\n        interface SetVariableValueParameterType {\n            /**\n             * 0-based number of scope as was listed in scope chain. Only 'local', 'closure' and 'catch' scope types are allowed. Other scopes could be manipulated manually.\n             */\n            scopeNumber: number;\n            /**\n             * Variable name.\n             */\n            variableName: string;\n            /**\n             * New variable value.\n             */\n            newValue: Runtime.CallArgument;\n            /**\n             * Id of callframe that holds variable.\n             */\n            callFrameId: CallFrameId;\n        }\n        interface SetReturnValueParameterType {\n            /**\n             * New return value.\n             */\n            newValue: Runtime.CallArgument;\n        }\n        interface SetAsyncCallStackDepthParameterType {\n            /**\n             * Maximum depth of async call stacks. Setting to <code>0</code> will effectively disable collecting async call stacks (default).\n             */\n            maxDepth: number;\n        }\n        interface SetBlackboxPatternsParameterType {\n            /**\n             * Array of regexps that will be used to check script url for blackbox state.\n             */\n            patterns: string[];\n        }\n        interface SetBlackboxedRangesParameterType {\n            /**\n             * Id of the script.\n             */\n            scriptId: Runtime.ScriptId;\n            positions: ScriptPosition[];\n        }\n        interface EnableReturnType {\n            /**\n             * Unique identifier of the debugger.\n             * @experimental\n             */\n            debuggerId: Runtime.UniqueDebuggerId;\n        }\n        interface SetBreakpointByUrlReturnType {\n            /**\n             * Id of the created breakpoint for further reference.\n             */\n            breakpointId: BreakpointId;\n            /**\n             * List of the locations this breakpoint resolved into upon addition.\n             */\n            locations: Location[];\n        }\n        interface SetBreakpointReturnType {\n            /**\n             * Id of the created breakpoint for further reference.\n             */\n            breakpointId: BreakpointId;\n            /**\n             * Location this breakpoint resolved into.\n             */\n            actualLocation: Location;\n        }\n        interface GetPossibleBreakpointsReturnType {\n            /**\n             * List of the possible breakpoint locations.\n             */\n            locations: BreakLocation[];\n        }\n        interface GetStackTraceReturnType {\n            stackTrace: Runtime.StackTrace;\n        }\n        interface SearchInContentReturnType {\n            /**\n             * List of search matches.\n             */\n            result: SearchMatch[];\n        }\n        interface SetScriptSourceReturnType {\n            /**\n             * New stack trace in case editing has happened while VM was stopped.\n             */\n            callFrames?: CallFrame[] | undefined;\n            /**\n             * Whether current call stack  was modified after applying the changes.\n             */\n            stackChanged?: boolean | undefined;\n            /**\n             * Async stack trace, if any.\n             */\n            asyncStackTrace?: Runtime.StackTrace | undefined;\n            /**\n             * Async stack trace, if any.\n             * @experimental\n             */\n            asyncStackTraceId?: Runtime.StackTraceId | undefined;\n            /**\n             * Exception details if any.\n             */\n            exceptionDetails?: Runtime.ExceptionDetails | undefined;\n        }\n        interface RestartFrameReturnType {\n            /**\n             * New stack trace.\n             */\n            callFrames: CallFrame[];\n            /**\n             * Async stack trace, if any.\n             */\n            asyncStackTrace?: Runtime.StackTrace | undefined;\n            /**\n             * Async stack trace, if any.\n             * @experimental\n             */\n            asyncStackTraceId?: Runtime.StackTraceId | undefined;\n        }\n        interface GetScriptSourceReturnType {\n            /**\n             * Script source.\n             */\n            scriptSource: string;\n        }\n        interface EvaluateOnCallFrameReturnType {\n            /**\n             * Object wrapper for the evaluation result.\n             */\n            result: Runtime.RemoteObject;\n            /**\n             * Exception details.\n             */\n            exceptionDetails?: Runtime.ExceptionDetails | undefined;\n        }\n        interface ScriptParsedEventDataType {\n            /**\n             * Identifier of the script parsed.\n             */\n            scriptId: Runtime.ScriptId;\n            /**\n             * URL or name of the script parsed (if any).\n             */\n            url: string;\n            /**\n             * Line offset of the script within the resource with given URL (for script tags).\n             */\n            startLine: number;\n            /**\n             * Column offset of the script within the resource with given URL.\n             */\n            startColumn: number;\n            /**\n             * Last line of the script.\n             */\n            endLine: number;\n            /**\n             * Length of the last line of the script.\n             */\n            endColumn: number;\n            /**\n             * Specifies script creation context.\n             */\n            executionContextId: Runtime.ExecutionContextId;\n            /**\n             * Content hash of the script.\n             */\n            hash: string;\n            /**\n             * Embedder-specific auxiliary data.\n             */\n            executionContextAuxData?: {} | undefined;\n            /**\n             * True, if this script is generated as a result of the live edit operation.\n             * @experimental\n             */\n            isLiveEdit?: boolean | undefined;\n            /**\n             * URL of source map associated with script (if any).\n             */\n            sourceMapURL?: string | undefined;\n            /**\n             * True, if this script has sourceURL.\n             */\n            hasSourceURL?: boolean | undefined;\n            /**\n             * True, if this script is ES6 module.\n             */\n            isModule?: boolean | undefined;\n            /**\n             * This script length.\n             */\n            length?: number | undefined;\n            /**\n             * JavaScript top stack frame of where the script parsed event was triggered if available.\n             * @experimental\n             */\n            stackTrace?: Runtime.StackTrace | undefined;\n        }\n        interface ScriptFailedToParseEventDataType {\n            /**\n             * Identifier of the script parsed.\n             */\n            scriptId: Runtime.ScriptId;\n            /**\n             * URL or name of the script parsed (if any).\n             */\n            url: string;\n            /**\n             * Line offset of the script within the resource with given URL (for script tags).\n             */\n            startLine: number;\n            /**\n             * Column offset of the script within the resource with given URL.\n             */\n            startColumn: number;\n            /**\n             * Last line of the script.\n             */\n            endLine: number;\n            /**\n             * Length of the last line of the script.\n             */\n            endColumn: number;\n            /**\n             * Specifies script creation context.\n             */\n            executionContextId: Runtime.ExecutionContextId;\n            /**\n             * Content hash of the script.\n             */\n            hash: string;\n            /**\n             * Embedder-specific auxiliary data.\n             */\n            executionContextAuxData?: {} | undefined;\n            /**\n             * URL of source map associated with script (if any).\n             */\n            sourceMapURL?: string | undefined;\n            /**\n             * True, if this script has sourceURL.\n             */\n            hasSourceURL?: boolean | undefined;\n            /**\n             * True, if this script is ES6 module.\n             */\n            isModule?: boolean | undefined;\n            /**\n             * This script length.\n             */\n            length?: number | undefined;\n            /**\n             * JavaScript top stack frame of where the script parsed event was triggered if available.\n             * @experimental\n             */\n            stackTrace?: Runtime.StackTrace | undefined;\n        }\n        interface BreakpointResolvedEventDataType {\n            /**\n             * Breakpoint unique identifier.\n             */\n            breakpointId: BreakpointId;\n            /**\n             * Actual breakpoint location.\n             */\n            location: Location;\n        }\n        interface PausedEventDataType {\n            /**\n             * Call stack the virtual machine stopped on.\n             */\n            callFrames: CallFrame[];\n            /**\n             * Pause reason.\n             */\n            reason: string;\n            /**\n             * Object containing break-specific auxiliary properties.\n             */\n            data?: {} | undefined;\n            /**\n             * Hit breakpoints IDs\n             */\n            hitBreakpoints?: string[] | undefined;\n            /**\n             * Async stack trace, if any.\n             */\n            asyncStackTrace?: Runtime.StackTrace | undefined;\n            /**\n             * Async stack trace, if any.\n             * @experimental\n             */\n            asyncStackTraceId?: Runtime.StackTraceId | undefined;\n            /**\n             * Just scheduled async call will have this stack trace as parent stack during async execution. This field is available only after <code>Debugger.stepInto</code> call with <code>breakOnAsynCall</code> flag.\n             * @experimental\n             */\n            asyncCallStackTraceId?: Runtime.StackTraceId | undefined;\n        }\n    }\n    namespace Console {\n        /**\n         * Console message.\n         */\n        interface ConsoleMessage {\n            /**\n             * Message source.\n             */\n            source: string;\n            /**\n             * Message severity.\n             */\n            level: string;\n            /**\n             * Message text.\n             */\n            text: string;\n            /**\n             * URL of the message origin.\n             */\n            url?: string | undefined;\n            /**\n             * Line number in the resource that generated this message (1-based).\n             */\n            line?: number | undefined;\n            /**\n             * Column number in the resource that generated this message (1-based).\n             */\n            column?: number | undefined;\n        }\n        interface MessageAddedEventDataType {\n            /**\n             * Console message that has been added.\n             */\n            message: ConsoleMessage;\n        }\n    }\n    namespace Profiler {\n        /**\n         * Profile node. Holds callsite information, execution statistics and child nodes.\n         */\n        interface ProfileNode {\n            /**\n             * Unique id of the node.\n             */\n            id: number;\n            /**\n             * Function location.\n             */\n            callFrame: Runtime.CallFrame;\n            /**\n             * Number of samples where this node was on top of the call stack.\n             */\n            hitCount?: number | undefined;\n            /**\n             * Child node ids.\n             */\n            children?: number[] | undefined;\n            /**\n             * The reason of being not optimized. The function may be deoptimized or marked as don't optimize.\n             */\n            deoptReason?: string | undefined;\n            /**\n             * An array of source position ticks.\n             */\n            positionTicks?: PositionTickInfo[] | undefined;\n        }\n        /**\n         * Profile.\n         */\n        interface Profile {\n            /**\n             * The list of profile nodes. First item is the root node.\n             */\n            nodes: ProfileNode[];\n            /**\n             * Profiling start timestamp in microseconds.\n             */\n            startTime: number;\n            /**\n             * Profiling end timestamp in microseconds.\n             */\n            endTime: number;\n            /**\n             * Ids of samples top nodes.\n             */\n            samples?: number[] | undefined;\n            /**\n             * Time intervals between adjacent samples in microseconds. The first delta is relative to the profile startTime.\n             */\n            timeDeltas?: number[] | undefined;\n        }\n        /**\n         * Specifies a number of samples attributed to a certain source position.\n         */\n        interface PositionTickInfo {\n            /**\n             * Source line number (1-based).\n             */\n            line: number;\n            /**\n             * Number of samples attributed to the source line.\n             */\n            ticks: number;\n        }\n        /**\n         * Coverage data for a source range.\n         */\n        interface CoverageRange {\n            /**\n             * JavaScript script source offset for the range start.\n             */\n            startOffset: number;\n            /**\n             * JavaScript script source offset for the range end.\n             */\n            endOffset: number;\n            /**\n             * Collected execution count of the source range.\n             */\n            count: number;\n        }\n        /**\n         * Coverage data for a JavaScript function.\n         */\n        interface FunctionCoverage {\n            /**\n             * JavaScript function name.\n             */\n            functionName: string;\n            /**\n             * Source ranges inside the function with coverage data.\n             */\n            ranges: CoverageRange[];\n            /**\n             * Whether coverage data for this function has block granularity.\n             */\n            isBlockCoverage: boolean;\n        }\n        /**\n         * Coverage data for a JavaScript script.\n         */\n        interface ScriptCoverage {\n            /**\n             * JavaScript script id.\n             */\n            scriptId: Runtime.ScriptId;\n            /**\n             * JavaScript script name or url.\n             */\n            url: string;\n            /**\n             * Functions contained in the script that has coverage data.\n             */\n            functions: FunctionCoverage[];\n        }\n        interface SetSamplingIntervalParameterType {\n            /**\n             * New sampling interval in microseconds.\n             */\n            interval: number;\n        }\n        interface StartPreciseCoverageParameterType {\n            /**\n             * Collect accurate call counts beyond simple 'covered' or 'not covered'.\n             */\n            callCount?: boolean | undefined;\n            /**\n             * Collect block-based coverage.\n             */\n            detailed?: boolean | undefined;\n        }\n        interface StopReturnType {\n            /**\n             * Recorded profile.\n             */\n            profile: Profile;\n        }\n        interface TakePreciseCoverageReturnType {\n            /**\n             * Coverage data for the current isolate.\n             */\n            result: ScriptCoverage[];\n        }\n        interface GetBestEffortCoverageReturnType {\n            /**\n             * Coverage data for the current isolate.\n             */\n            result: ScriptCoverage[];\n        }\n        interface ConsoleProfileStartedEventDataType {\n            id: string;\n            /**\n             * Location of console.profile().\n             */\n            location: Debugger.Location;\n            /**\n             * Profile title passed as an argument to console.profile().\n             */\n            title?: string | undefined;\n        }\n        interface ConsoleProfileFinishedEventDataType {\n            id: string;\n            /**\n             * Location of console.profileEnd().\n             */\n            location: Debugger.Location;\n            profile: Profile;\n            /**\n             * Profile title passed as an argument to console.profile().\n             */\n            title?: string | undefined;\n        }\n    }\n    namespace HeapProfiler {\n        /**\n         * Heap snapshot object id.\n         */\n        type HeapSnapshotObjectId = string;\n        /**\n         * Sampling Heap Profile node. Holds callsite information, allocation statistics and child nodes.\n         */\n        interface SamplingHeapProfileNode {\n            /**\n             * Function location.\n             */\n            callFrame: Runtime.CallFrame;\n            /**\n             * Allocations size in bytes for the node excluding children.\n             */\n            selfSize: number;\n            /**\n             * Child nodes.\n             */\n            children: SamplingHeapProfileNode[];\n        }\n        /**\n         * Profile.\n         */\n        interface SamplingHeapProfile {\n            head: SamplingHeapProfileNode;\n        }\n        interface StartTrackingHeapObjectsParameterType {\n            trackAllocations?: boolean | undefined;\n        }\n        interface StopTrackingHeapObjectsParameterType {\n            /**\n             * If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken when the tracking is stopped.\n             */\n            reportProgress?: boolean | undefined;\n        }\n        interface TakeHeapSnapshotParameterType {\n            /**\n             * If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken.\n             */\n            reportProgress?: boolean | undefined;\n        }\n        interface GetObjectByHeapObjectIdParameterType {\n            objectId: HeapSnapshotObjectId;\n            /**\n             * Symbolic group name that can be used to release multiple objects.\n             */\n            objectGroup?: string | undefined;\n        }\n        interface AddInspectedHeapObjectParameterType {\n            /**\n             * Heap snapshot object id to be accessible by means of $x command line API.\n             */\n            heapObjectId: HeapSnapshotObjectId;\n        }\n        interface GetHeapObjectIdParameterType {\n            /**\n             * Identifier of the object to get heap object id for.\n             */\n            objectId: Runtime.RemoteObjectId;\n        }\n        interface StartSamplingParameterType {\n            /**\n             * Average sample interval in bytes. Poisson distribution is used for the intervals. The default value is 32768 bytes.\n             */\n            samplingInterval?: number | undefined;\n        }\n        interface GetObjectByHeapObjectIdReturnType {\n            /**\n             * Evaluation result.\n             */\n            result: Runtime.RemoteObject;\n        }\n        interface GetHeapObjectIdReturnType {\n            /**\n             * Id of the heap snapshot object corresponding to the passed remote object id.\n             */\n            heapSnapshotObjectId: HeapSnapshotObjectId;\n        }\n        interface StopSamplingReturnType {\n            /**\n             * Recorded sampling heap profile.\n             */\n            profile: SamplingHeapProfile;\n        }\n        interface GetSamplingProfileReturnType {\n            /**\n             * Return the sampling profile being collected.\n             */\n            profile: SamplingHeapProfile;\n        }\n        interface AddHeapSnapshotChunkEventDataType {\n            chunk: string;\n        }\n        interface ReportHeapSnapshotProgressEventDataType {\n            done: number;\n            total: number;\n            finished?: boolean | undefined;\n        }\n        interface LastSeenObjectIdEventDataType {\n            lastSeenObjectId: number;\n            timestamp: number;\n        }\n        interface HeapStatsUpdateEventDataType {\n            /**\n             * An array of triplets. Each triplet describes a fragment. The first integer is the fragment index, the second integer is a total count of objects for the fragment, the third integer is a total size of the objects for the fragment.\n             */\n            statsUpdate: number[];\n        }\n    }\n    namespace NodeTracing {\n        interface TraceConfig {\n            /**\n             * Controls how the trace buffer stores data.\n             */\n            recordMode?: string | undefined;\n            /**\n             * Included category filters.\n             */\n            includedCategories: string[];\n        }\n        interface StartParameterType {\n            traceConfig: TraceConfig;\n        }\n        interface GetCategoriesReturnType {\n            /**\n             * A list of supported tracing categories.\n             */\n            categories: string[];\n        }\n        interface DataCollectedEventDataType {\n            value: Array<{}>;\n        }\n    }\n    namespace NodeWorker {\n        type WorkerID = string;\n        /**\n         * Unique identifier of attached debugging session.\n         */\n        type SessionID = string;\n        interface WorkerInfo {\n            workerId: WorkerID;\n            type: string;\n            title: string;\n            url: string;\n        }\n        interface SendMessageToWorkerParameterType {\n            message: string;\n            /**\n             * Identifier of the session.\n             */\n            sessionId: SessionID;\n        }\n        interface EnableParameterType {\n            /**\n             * Whether to new workers should be paused until the frontend sends `Runtime.runIfWaitingForDebugger`\n             * message to run them.\n             */\n            waitForDebuggerOnStart: boolean;\n        }\n        interface DetachParameterType {\n            sessionId: SessionID;\n        }\n        interface AttachedToWorkerEventDataType {\n            /**\n             * Identifier assigned to the session used to send/receive messages.\n             */\n            sessionId: SessionID;\n            workerInfo: WorkerInfo;\n            waitingForDebugger: boolean;\n        }\n        interface DetachedFromWorkerEventDataType {\n            /**\n             * Detached session identifier.\n             */\n            sessionId: SessionID;\n        }\n        interface ReceivedMessageFromWorkerEventDataType {\n            /**\n             * Identifier of a session which sends a message.\n             */\n            sessionId: SessionID;\n            message: string;\n        }\n    }\n    namespace Network {\n        /**\n         * Resource type as it was perceived by the rendering engine.\n         */\n        type ResourceType = string;\n        /**\n         * Unique request identifier.\n         */\n        type RequestId = string;\n        /**\n         * UTC time in seconds, counted from January 1, 1970.\n         */\n        type TimeSinceEpoch = number;\n        /**\n         * Monotonically increasing time in seconds since an arbitrary point in the past.\n         */\n        type MonotonicTime = number;\n        /**\n         * Information about the request initiator.\n         */\n        interface Initiator {\n            /**\n             * Type of this initiator.\n             */\n            type: string;\n            /**\n             * Initiator JavaScript stack trace, set for Script only.\n             * Requires the Debugger domain to be enabled.\n             */\n            stack?: Runtime.StackTrace | undefined;\n            /**\n             * Initiator URL, set for Parser type or for Script type (when script is importing module) or for SignedExchange type.\n             */\n            url?: string | undefined;\n            /**\n             * Initiator line number, set for Parser type or for Script type (when script is importing\n             * module) (0-based).\n             */\n            lineNumber?: number | undefined;\n            /**\n             * Initiator column number, set for Parser type or for Script type (when script is importing\n             * module) (0-based).\n             */\n            columnNumber?: number | undefined;\n            /**\n             * Set if another request triggered this request (e.g. preflight).\n             */\n            requestId?: RequestId | undefined;\n        }\n        /**\n         * HTTP request data.\n         */\n        interface Request {\n            url: string;\n            method: string;\n            headers: Headers;\n        }\n        /**\n         * HTTP response data.\n         */\n        interface Response {\n            url: string;\n            status: number;\n            statusText: string;\n            headers: Headers;\n        }\n        /**\n         * Request / response headers as keys / values of JSON object.\n         */\n        interface Headers {\n        }\n        interface RequestWillBeSentEventDataType {\n            /**\n             * Request identifier.\n             */\n            requestId: RequestId;\n            /**\n             * Request data.\n             */\n            request: Request;\n            /**\n             * Request initiator.\n             */\n            initiator: Initiator;\n            /**\n             * Timestamp.\n             */\n            timestamp: MonotonicTime;\n            /**\n             * Timestamp.\n             */\n            wallTime: TimeSinceEpoch;\n        }\n        interface ResponseReceivedEventDataType {\n            /**\n             * Request identifier.\n             */\n            requestId: RequestId;\n            /**\n             * Timestamp.\n             */\n            timestamp: MonotonicTime;\n            /**\n             * Resource type.\n             */\n            type: ResourceType;\n            /**\n             * Response data.\n             */\n            response: Response;\n        }\n        interface LoadingFailedEventDataType {\n            /**\n             * Request identifier.\n             */\n            requestId: RequestId;\n            /**\n             * Timestamp.\n             */\n            timestamp: MonotonicTime;\n            /**\n             * Resource type.\n             */\n            type: ResourceType;\n            /**\n             * Error message.\n             */\n            errorText: string;\n        }\n        interface LoadingFinishedEventDataType {\n            /**\n             * Request identifier.\n             */\n            requestId: RequestId;\n            /**\n             * Timestamp.\n             */\n            timestamp: MonotonicTime;\n        }\n    }\n    namespace NodeRuntime {\n        interface NotifyWhenWaitingForDisconnectParameterType {\n            enabled: boolean;\n        }\n    }\n\n    /**\n     * The `inspector.Session` is used for dispatching messages to the V8 inspector\n     * back-end and receiving message responses and notifications.\n     */\n    class Session extends EventEmitter {\n        /**\n         * Create a new instance of the inspector.Session class.\n         * The inspector session needs to be connected through `session.connect()` before the messages can be dispatched to the inspector backend.\n         */\n        constructor();\n\n        /**\n         * Connects a session to the inspector back-end.\n         */\n        connect(): void;\n\n        /**\n         * Connects a session to the inspector back-end.\n         * An exception will be thrown if this API was not called on a Worker thread.\n         * @since v12.11.0\n         */\n        connectToMainThread(): void;\n\n        /**\n         * Immediately close the session. All pending message callbacks will be called with an error.\n         * `session.connect()` will need to be called to be able to send messages again.\n         * Reconnected session will lose all inspector state, such as enabled agents or configured breakpoints.\n         */\n        disconnect(): void;\n\n        /**\n         * Posts a message to the inspector back-end. `callback` will be notified when\n         * a response is received. `callback` is a function that accepts two optional\n         * arguments: error and message-specific result.\n         *\n         * ```js\n         * session.post('Runtime.evaluate', { expression: '2 + 2' },\n         *              (error, { result }) => console.log(result));\n         * // Output: { type: 'number', value: 4, description: '4' }\n         * ```\n         *\n         * The latest version of the V8 inspector protocol is published on the\n         * [Chrome DevTools Protocol Viewer](https://chromedevtools.github.io/devtools-protocol/v8/).\n         *\n         * Node.js inspector supports all the Chrome DevTools Protocol domains declared\n         * by V8. Chrome DevTools Protocol domain provides an interface for interacting\n         * with one of the runtime agents used to inspect the application state and listen\n         * to the run-time events.\n         */\n        post(method: string, callback?: (err: Error | null, params?: object) => void): void;\n        post(method: string, params?: object, callback?: (err: Error | null, params?: object) => void): void;\n        /**\n         * Returns supported domains.\n         */\n        post(method: 'Schema.getDomains', callback?: (err: Error | null, params: Schema.GetDomainsReturnType) => void): void;\n        /**\n         * Evaluates expression on global object.\n         */\n        post(method: 'Runtime.evaluate', params?: Runtime.EvaluateParameterType, callback?: (err: Error | null, params: Runtime.EvaluateReturnType) => void): void;\n        post(method: 'Runtime.evaluate', callback?: (err: Error | null, params: Runtime.EvaluateReturnType) => void): void;\n        /**\n         * Add handler to promise with given promise object id.\n         */\n        post(method: 'Runtime.awaitPromise', params?: Runtime.AwaitPromiseParameterType, callback?: (err: Error | null, params: Runtime.AwaitPromiseReturnType) => void): void;\n        post(method: 'Runtime.awaitPromise', callback?: (err: Error | null, params: Runtime.AwaitPromiseReturnType) => void): void;\n        /**\n         * Calls function with given declaration on the given object. Object group of the result is inherited from the target object.\n         */\n        post(method: 'Runtime.callFunctionOn', params?: Runtime.CallFunctionOnParameterType, callback?: (err: Error | null, params: Runtime.CallFunctionOnReturnType) => void): void;\n        post(method: 'Runtime.callFunctionOn', callback?: (err: Error | null, params: Runtime.CallFunctionOnReturnType) => void): void;\n        /**\n         * Returns properties of a given object. Object group of the result is inherited from the target object.\n         */\n        post(method: 'Runtime.getProperties', params?: Runtime.GetPropertiesParameterType, callback?: (err: Error | null, params: Runtime.GetPropertiesReturnType) => void): void;\n        post(method: 'Runtime.getProperties', callback?: (err: Error | null, params: Runtime.GetPropertiesReturnType) => void): void;\n        /**\n         * Releases remote object with given id.\n         */\n        post(method: 'Runtime.releaseObject', params?: Runtime.ReleaseObjectParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'Runtime.releaseObject', callback?: (err: Error | null) => void): void;\n        /**\n         * Releases all remote objects that belong to a given group.\n         */\n        post(method: 'Runtime.releaseObjectGroup', params?: Runtime.ReleaseObjectGroupParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'Runtime.releaseObjectGroup', callback?: (err: Error | null) => void): void;\n        /**\n         * Tells inspected instance to run if it was waiting for debugger to attach.\n         */\n        post(method: 'Runtime.runIfWaitingForDebugger', callback?: (err: Error | null) => void): void;\n        /**\n         * Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context.\n         */\n        post(method: 'Runtime.enable', callback?: (err: Error | null) => void): void;\n        /**\n         * Disables reporting of execution contexts creation.\n         */\n        post(method: 'Runtime.disable', callback?: (err: Error | null) => void): void;\n        /**\n         * Discards collected exceptions and console API calls.\n         */\n        post(method: 'Runtime.discardConsoleEntries', callback?: (err: Error | null) => void): void;\n        /**\n         * @experimental\n         */\n        post(method: 'Runtime.setCustomObjectFormatterEnabled', params?: Runtime.SetCustomObjectFormatterEnabledParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'Runtime.setCustomObjectFormatterEnabled', callback?: (err: Error | null) => void): void;\n        /**\n         * Compiles expression.\n         */\n        post(method: 'Runtime.compileScript', params?: Runtime.CompileScriptParameterType, callback?: (err: Error | null, params: Runtime.CompileScriptReturnType) => void): void;\n        post(method: 'Runtime.compileScript', callback?: (err: Error | null, params: Runtime.CompileScriptReturnType) => void): void;\n        /**\n         * Runs script with given id in a given context.\n         */\n        post(method: 'Runtime.runScript', params?: Runtime.RunScriptParameterType, callback?: (err: Error | null, params: Runtime.RunScriptReturnType) => void): void;\n        post(method: 'Runtime.runScript', callback?: (err: Error | null, params: Runtime.RunScriptReturnType) => void): void;\n        post(method: 'Runtime.queryObjects', params?: Runtime.QueryObjectsParameterType, callback?: (err: Error | null, params: Runtime.QueryObjectsReturnType) => void): void;\n        post(method: 'Runtime.queryObjects', callback?: (err: Error | null, params: Runtime.QueryObjectsReturnType) => void): void;\n        /**\n         * Returns all let, const and class variables from global scope.\n         */\n        post(\n            method: 'Runtime.globalLexicalScopeNames',\n            params?: Runtime.GlobalLexicalScopeNamesParameterType,\n            callback?: (err: Error | null, params: Runtime.GlobalLexicalScopeNamesReturnType) => void\n        ): void;\n        post(method: 'Runtime.globalLexicalScopeNames', callback?: (err: Error | null, params: Runtime.GlobalLexicalScopeNamesReturnType) => void): void;\n        /**\n         * Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received.\n         */\n        post(method: 'Debugger.enable', callback?: (err: Error | null, params: Debugger.EnableReturnType) => void): void;\n        /**\n         * Disables debugger for given page.\n         */\n        post(method: 'Debugger.disable', callback?: (err: Error | null) => void): void;\n        /**\n         * Activates / deactivates all breakpoints on the page.\n         */\n        post(method: 'Debugger.setBreakpointsActive', params?: Debugger.SetBreakpointsActiveParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'Debugger.setBreakpointsActive', callback?: (err: Error | null) => void): void;\n        /**\n         * Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc).\n         */\n        post(method: 'Debugger.setSkipAllPauses', params?: Debugger.SetSkipAllPausesParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'Debugger.setSkipAllPauses', callback?: (err: Error | null) => void): void;\n        /**\n         * Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads.\n         */\n        post(method: 'Debugger.setBreakpointByUrl', params?: Debugger.SetBreakpointByUrlParameterType, callback?: (err: Error | null, params: Debugger.SetBreakpointByUrlReturnType) => void): void;\n        post(method: 'Debugger.setBreakpointByUrl', callback?: (err: Error | null, params: Debugger.SetBreakpointByUrlReturnType) => void): void;\n        /**\n         * Sets JavaScript breakpoint at a given location.\n         */\n        post(method: 'Debugger.setBreakpoint', params?: Debugger.SetBreakpointParameterType, callback?: (err: Error | null, params: Debugger.SetBreakpointReturnType) => void): void;\n        post(method: 'Debugger.setBreakpoint', callback?: (err: Error | null, params: Debugger.SetBreakpointReturnType) => void): void;\n        /**\n         * Removes JavaScript breakpoint.\n         */\n        post(method: 'Debugger.removeBreakpoint', params?: Debugger.RemoveBreakpointParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'Debugger.removeBreakpoint', callback?: (err: Error | null) => void): void;\n        /**\n         * Returns possible locations for breakpoint. scriptId in start and end range locations should be the same.\n         */\n        post(\n            method: 'Debugger.getPossibleBreakpoints',\n            params?: Debugger.GetPossibleBreakpointsParameterType,\n            callback?: (err: Error | null, params: Debugger.GetPossibleBreakpointsReturnType) => void\n        ): void;\n        post(method: 'Debugger.getPossibleBreakpoints', callback?: (err: Error | null, params: Debugger.GetPossibleBreakpointsReturnType) => void): void;\n        /**\n         * Continues execution until specific location is reached.\n         */\n        post(method: 'Debugger.continueToLocation', params?: Debugger.ContinueToLocationParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'Debugger.continueToLocation', callback?: (err: Error | null) => void): void;\n        /**\n         * @experimental\n         */\n        post(method: 'Debugger.pauseOnAsyncCall', params?: Debugger.PauseOnAsyncCallParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'Debugger.pauseOnAsyncCall', callback?: (err: Error | null) => void): void;\n        /**\n         * Steps over the statement.\n         */\n        post(method: 'Debugger.stepOver', callback?: (err: Error | null) => void): void;\n        /**\n         * Steps into the function call.\n         */\n        post(method: 'Debugger.stepInto', params?: Debugger.StepIntoParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'Debugger.stepInto', callback?: (err: Error | null) => void): void;\n        /**\n         * Steps out of the function call.\n         */\n        post(method: 'Debugger.stepOut', callback?: (err: Error | null) => void): void;\n        /**\n         * Stops on the next JavaScript statement.\n         */\n        post(method: 'Debugger.pause', callback?: (err: Error | null) => void): void;\n        /**\n         * This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called.\n         * @experimental\n         */\n        post(method: 'Debugger.scheduleStepIntoAsync', callback?: (err: Error | null) => void): void;\n        /**\n         * Resumes JavaScript execution.\n         */\n        post(method: 'Debugger.resume', callback?: (err: Error | null) => void): void;\n        /**\n         * Returns stack trace with given <code>stackTraceId</code>.\n         * @experimental\n         */\n        post(method: 'Debugger.getStackTrace', params?: Debugger.GetStackTraceParameterType, callback?: (err: Error | null, params: Debugger.GetStackTraceReturnType) => void): void;\n        post(method: 'Debugger.getStackTrace', callback?: (err: Error | null, params: Debugger.GetStackTraceReturnType) => void): void;\n        /**\n         * Searches for given string in script content.\n         */\n        post(method: 'Debugger.searchInContent', params?: Debugger.SearchInContentParameterType, callback?: (err: Error | null, params: Debugger.SearchInContentReturnType) => void): void;\n        post(method: 'Debugger.searchInContent', callback?: (err: Error | null, params: Debugger.SearchInContentReturnType) => void): void;\n        /**\n         * Edits JavaScript source live.\n         */\n        post(method: 'Debugger.setScriptSource', params?: Debugger.SetScriptSourceParameterType, callback?: (err: Error | null, params: Debugger.SetScriptSourceReturnType) => void): void;\n        post(method: 'Debugger.setScriptSource', callback?: (err: Error | null, params: Debugger.SetScriptSourceReturnType) => void): void;\n        /**\n         * Restarts particular call frame from the beginning.\n         */\n        post(method: 'Debugger.restartFrame', params?: Debugger.RestartFrameParameterType, callback?: (err: Error | null, params: Debugger.RestartFrameReturnType) => void): void;\n        post(method: 'Debugger.restartFrame', callback?: (err: Error | null, params: Debugger.RestartFrameReturnType) => void): void;\n        /**\n         * Returns source for the script with given id.\n         */\n        post(method: 'Debugger.getScriptSource', params?: Debugger.GetScriptSourceParameterType, callback?: (err: Error | null, params: Debugger.GetScriptSourceReturnType) => void): void;\n        post(method: 'Debugger.getScriptSource', callback?: (err: Error | null, params: Debugger.GetScriptSourceReturnType) => void): void;\n        /**\n         * Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>.\n         */\n        post(method: 'Debugger.setPauseOnExceptions', params?: Debugger.SetPauseOnExceptionsParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'Debugger.setPauseOnExceptions', callback?: (err: Error | null) => void): void;\n        /**\n         * Evaluates expression on a given call frame.\n         */\n        post(method: 'Debugger.evaluateOnCallFrame', params?: Debugger.EvaluateOnCallFrameParameterType, callback?: (err: Error | null, params: Debugger.EvaluateOnCallFrameReturnType) => void): void;\n        post(method: 'Debugger.evaluateOnCallFrame', callback?: (err: Error | null, params: Debugger.EvaluateOnCallFrameReturnType) => void): void;\n        /**\n         * Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually.\n         */\n        post(method: 'Debugger.setVariableValue', params?: Debugger.SetVariableValueParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'Debugger.setVariableValue', callback?: (err: Error | null) => void): void;\n        /**\n         * Changes return value in top frame. Available only at return break position.\n         * @experimental\n         */\n        post(method: 'Debugger.setReturnValue', params?: Debugger.SetReturnValueParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'Debugger.setReturnValue', callback?: (err: Error | null) => void): void;\n        /**\n         * Enables or disables async call stacks tracking.\n         */\n        post(method: 'Debugger.setAsyncCallStackDepth', params?: Debugger.SetAsyncCallStackDepthParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'Debugger.setAsyncCallStackDepth', callback?: (err: Error | null) => void): void;\n        /**\n         * Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful.\n         * @experimental\n         */\n        post(method: 'Debugger.setBlackboxPatterns', params?: Debugger.SetBlackboxPatternsParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'Debugger.setBlackboxPatterns', callback?: (err: Error | null) => void): void;\n        /**\n         * Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted.\n         * @experimental\n         */\n        post(method: 'Debugger.setBlackboxedRanges', params?: Debugger.SetBlackboxedRangesParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'Debugger.setBlackboxedRanges', callback?: (err: Error | null) => void): void;\n        /**\n         * Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification.\n         */\n        post(method: 'Console.enable', callback?: (err: Error | null) => void): void;\n        /**\n         * Disables console domain, prevents further console messages from being reported to the client.\n         */\n        post(method: 'Console.disable', callback?: (err: Error | null) => void): void;\n        /**\n         * Does nothing.\n         */\n        post(method: 'Console.clearMessages', callback?: (err: Error | null) => void): void;\n        post(method: 'Profiler.enable', callback?: (err: Error | null) => void): void;\n        post(method: 'Profiler.disable', callback?: (err: Error | null) => void): void;\n        /**\n         * Changes CPU profiler sampling interval. Must be called before CPU profiles recording started.\n         */\n        post(method: 'Profiler.setSamplingInterval', params?: Profiler.SetSamplingIntervalParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'Profiler.setSamplingInterval', callback?: (err: Error | null) => void): void;\n        post(method: 'Profiler.start', callback?: (err: Error | null) => void): void;\n        post(method: 'Profiler.stop', callback?: (err: Error | null, params: Profiler.StopReturnType) => void): void;\n        /**\n         * Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters.\n         */\n        post(method: 'Profiler.startPreciseCoverage', params?: Profiler.StartPreciseCoverageParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'Profiler.startPreciseCoverage', callback?: (err: Error | null) => void): void;\n        /**\n         * Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code.\n         */\n        post(method: 'Profiler.stopPreciseCoverage', callback?: (err: Error | null) => void): void;\n        /**\n         * Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started.\n         */\n        post(method: 'Profiler.takePreciseCoverage', callback?: (err: Error | null, params: Profiler.TakePreciseCoverageReturnType) => void): void;\n        /**\n         * Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection.\n         */\n        post(method: 'Profiler.getBestEffortCoverage', callback?: (err: Error | null, params: Profiler.GetBestEffortCoverageReturnType) => void): void;\n        post(method: 'HeapProfiler.enable', callback?: (err: Error | null) => void): void;\n        post(method: 'HeapProfiler.disable', callback?: (err: Error | null) => void): void;\n        post(method: 'HeapProfiler.startTrackingHeapObjects', params?: HeapProfiler.StartTrackingHeapObjectsParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'HeapProfiler.startTrackingHeapObjects', callback?: (err: Error | null) => void): void;\n        post(method: 'HeapProfiler.stopTrackingHeapObjects', params?: HeapProfiler.StopTrackingHeapObjectsParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'HeapProfiler.stopTrackingHeapObjects', callback?: (err: Error | null) => void): void;\n        post(method: 'HeapProfiler.takeHeapSnapshot', params?: HeapProfiler.TakeHeapSnapshotParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'HeapProfiler.takeHeapSnapshot', callback?: (err: Error | null) => void): void;\n        post(method: 'HeapProfiler.collectGarbage', callback?: (err: Error | null) => void): void;\n        post(\n            method: 'HeapProfiler.getObjectByHeapObjectId',\n            params?: HeapProfiler.GetObjectByHeapObjectIdParameterType,\n            callback?: (err: Error | null, params: HeapProfiler.GetObjectByHeapObjectIdReturnType) => void\n        ): void;\n        post(method: 'HeapProfiler.getObjectByHeapObjectId', callback?: (err: Error | null, params: HeapProfiler.GetObjectByHeapObjectIdReturnType) => void): void;\n        /**\n         * Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions).\n         */\n        post(method: 'HeapProfiler.addInspectedHeapObject', params?: HeapProfiler.AddInspectedHeapObjectParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'HeapProfiler.addInspectedHeapObject', callback?: (err: Error | null) => void): void;\n        post(method: 'HeapProfiler.getHeapObjectId', params?: HeapProfiler.GetHeapObjectIdParameterType, callback?: (err: Error | null, params: HeapProfiler.GetHeapObjectIdReturnType) => void): void;\n        post(method: 'HeapProfiler.getHeapObjectId', callback?: (err: Error | null, params: HeapProfiler.GetHeapObjectIdReturnType) => void): void;\n        post(method: 'HeapProfiler.startSampling', params?: HeapProfiler.StartSamplingParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'HeapProfiler.startSampling', callback?: (err: Error | null) => void): void;\n        post(method: 'HeapProfiler.stopSampling', callback?: (err: Error | null, params: HeapProfiler.StopSamplingReturnType) => void): void;\n        post(method: 'HeapProfiler.getSamplingProfile', callback?: (err: Error | null, params: HeapProfiler.GetSamplingProfileReturnType) => void): void;\n        /**\n         * Gets supported tracing categories.\n         */\n        post(method: 'NodeTracing.getCategories', callback?: (err: Error | null, params: NodeTracing.GetCategoriesReturnType) => void): void;\n        /**\n         * Start trace events collection.\n         */\n        post(method: 'NodeTracing.start', params?: NodeTracing.StartParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'NodeTracing.start', callback?: (err: Error | null) => void): void;\n        /**\n         * Stop trace events collection. Remaining collected events will be sent as a sequence of\n         * dataCollected events followed by tracingComplete event.\n         */\n        post(method: 'NodeTracing.stop', callback?: (err: Error | null) => void): void;\n        /**\n         * Sends protocol message over session with given id.\n         */\n        post(method: 'NodeWorker.sendMessageToWorker', params?: NodeWorker.SendMessageToWorkerParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'NodeWorker.sendMessageToWorker', callback?: (err: Error | null) => void): void;\n        /**\n         * Instructs the inspector to attach to running workers. Will also attach to new workers\n         * as they start\n         */\n        post(method: 'NodeWorker.enable', params?: NodeWorker.EnableParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'NodeWorker.enable', callback?: (err: Error | null) => void): void;\n        /**\n         * Detaches from all running workers and disables attaching to new workers as they are started.\n         */\n        post(method: 'NodeWorker.disable', callback?: (err: Error | null) => void): void;\n        /**\n         * Detached from the worker with given sessionId.\n         */\n        post(method: 'NodeWorker.detach', params?: NodeWorker.DetachParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'NodeWorker.detach', callback?: (err: Error | null) => void): void;\n        /**\n         * Disables network tracking, prevents network events from being sent to the client.\n         */\n        post(method: 'Network.disable', callback?: (err: Error | null) => void): void;\n        /**\n         * Enables network tracking, network events will now be delivered to the client.\n         */\n        post(method: 'Network.enable', callback?: (err: Error | null) => void): void;\n        /**\n         * Enable the NodeRuntime events except by `NodeRuntime.waitingForDisconnect`.\n         */\n        post(method: 'NodeRuntime.enable', callback?: (err: Error | null) => void): void;\n        /**\n         * Disable NodeRuntime events\n         */\n        post(method: 'NodeRuntime.disable', callback?: (err: Error | null) => void): void;\n        /**\n         * Enable the `NodeRuntime.waitingForDisconnect`.\n         */\n        post(method: 'NodeRuntime.notifyWhenWaitingForDisconnect', params?: NodeRuntime.NotifyWhenWaitingForDisconnectParameterType, callback?: (err: Error | null) => void): void;\n        post(method: 'NodeRuntime.notifyWhenWaitingForDisconnect', callback?: (err: Error | null) => void): void;\n\n        addListener(event: string, listener: (...args: any[]) => void): this;\n        /**\n         * Emitted when any notification from the V8 Inspector is received.\n         */\n        addListener(event: 'inspectorNotification', listener: (message: InspectorNotification<object>) => void): this;\n        /**\n         * Issued when new execution context is created.\n         */\n        addListener(event: 'Runtime.executionContextCreated', listener: (message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>) => void): this;\n        /**\n         * Issued when execution context is destroyed.\n         */\n        addListener(event: 'Runtime.executionContextDestroyed', listener: (message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>) => void): this;\n        /**\n         * Issued when all executionContexts were cleared in browser\n         */\n        addListener(event: 'Runtime.executionContextsCleared', listener: () => void): this;\n        /**\n         * Issued when exception was thrown and unhandled.\n         */\n        addListener(event: 'Runtime.exceptionThrown', listener: (message: InspectorNotification<Runtime.ExceptionThrownEventDataType>) => void): this;\n        /**\n         * Issued when unhandled exception was revoked.\n         */\n        addListener(event: 'Runtime.exceptionRevoked', listener: (message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>) => void): this;\n        /**\n         * Issued when console API was called.\n         */\n        addListener(event: 'Runtime.consoleAPICalled', listener: (message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>) => void): this;\n        /**\n         * Issued when object should be inspected (for example, as a result of inspect() command line API call).\n         */\n        addListener(event: 'Runtime.inspectRequested', listener: (message: InspectorNotification<Runtime.InspectRequestedEventDataType>) => void): this;\n        /**\n         * Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.\n         */\n        addListener(event: 'Debugger.scriptParsed', listener: (message: InspectorNotification<Debugger.ScriptParsedEventDataType>) => void): this;\n        /**\n         * Fired when virtual machine fails to parse the script.\n         */\n        addListener(event: 'Debugger.scriptFailedToParse', listener: (message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>) => void): this;\n        /**\n         * Fired when breakpoint is resolved to an actual script and location.\n         */\n        addListener(event: 'Debugger.breakpointResolved', listener: (message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>) => void): this;\n        /**\n         * Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.\n         */\n        addListener(event: 'Debugger.paused', listener: (message: InspectorNotification<Debugger.PausedEventDataType>) => void): this;\n        /**\n         * Fired when the virtual machine resumed execution.\n         */\n        addListener(event: 'Debugger.resumed', listener: () => void): this;\n        /**\n         * Issued when new console message is added.\n         */\n        addListener(event: 'Console.messageAdded', listener: (message: InspectorNotification<Console.MessageAddedEventDataType>) => void): this;\n        /**\n         * Sent when new profile recording is started using console.profile() call.\n         */\n        addListener(event: 'Profiler.consoleProfileStarted', listener: (message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>) => void): this;\n        addListener(event: 'Profiler.consoleProfileFinished', listener: (message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>) => void): this;\n        addListener(event: 'HeapProfiler.addHeapSnapshotChunk', listener: (message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>) => void): this;\n        addListener(event: 'HeapProfiler.resetProfiles', listener: () => void): this;\n        addListener(event: 'HeapProfiler.reportHeapSnapshotProgress', listener: (message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>) => void): this;\n        /**\n         * If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.\n         */\n        addListener(event: 'HeapProfiler.lastSeenObjectId', listener: (message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>) => void): this;\n        /**\n         * If heap objects tracking has been started then backend may send update for one or more fragments\n         */\n        addListener(event: 'HeapProfiler.heapStatsUpdate', listener: (message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>) => void): this;\n        /**\n         * Contains an bucket of collected trace events.\n         */\n        addListener(event: 'NodeTracing.dataCollected', listener: (message: InspectorNotification<NodeTracing.DataCollectedEventDataType>) => void): this;\n        /**\n         * Signals that tracing is stopped and there is no trace buffers pending flush, all data were\n         * delivered via dataCollected events.\n         */\n        addListener(event: 'NodeTracing.tracingComplete', listener: () => void): this;\n        /**\n         * Issued when attached to a worker.\n         */\n        addListener(event: 'NodeWorker.attachedToWorker', listener: (message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>) => void): this;\n        /**\n         * Issued when detached from the worker.\n         */\n        addListener(event: 'NodeWorker.detachedFromWorker', listener: (message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>) => void): this;\n        /**\n         * Notifies about a new protocol message received from the session\n         * (session ID is provided in attachedToWorker notification).\n         */\n        addListener(event: 'NodeWorker.receivedMessageFromWorker', listener: (message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>) => void): this;\n        /**\n         * Fired when page is about to send HTTP request.\n         */\n        addListener(event: 'Network.requestWillBeSent', listener: (message: InspectorNotification<Network.RequestWillBeSentEventDataType>) => void): this;\n        /**\n         * Fired when HTTP response is available.\n         */\n        addListener(event: 'Network.responseReceived', listener: (message: InspectorNotification<Network.ResponseReceivedEventDataType>) => void): this;\n        addListener(event: 'Network.loadingFailed', listener: (message: InspectorNotification<Network.LoadingFailedEventDataType>) => void): this;\n        addListener(event: 'Network.loadingFinished', listener: (message: InspectorNotification<Network.LoadingFinishedEventDataType>) => void): this;\n        /**\n         * This event is fired instead of `Runtime.executionContextDestroyed` when\n         * enabled.\n         * It is fired when the Node process finished all code execution and is\n         * waiting for all frontends to disconnect.\n         */\n        addListener(event: 'NodeRuntime.waitingForDisconnect', listener: () => void): this;\n        /**\n         * This event is fired when the runtime is waiting for the debugger. For\n         * example, when inspector.waitingForDebugger is called\n         */\n        addListener(event: 'NodeRuntime.waitingForDebugger', listener: () => void): this;\n        emit(event: string | symbol, ...args: any[]): boolean;\n        emit(event: 'inspectorNotification', message: InspectorNotification<object>): boolean;\n        emit(event: 'Runtime.executionContextCreated', message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>): boolean;\n        emit(event: 'Runtime.executionContextDestroyed', message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>): boolean;\n        emit(event: 'Runtime.executionContextsCleared'): boolean;\n        emit(event: 'Runtime.exceptionThrown', message: InspectorNotification<Runtime.ExceptionThrownEventDataType>): boolean;\n        emit(event: 'Runtime.exceptionRevoked', message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>): boolean;\n        emit(event: 'Runtime.consoleAPICalled', message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>): boolean;\n        emit(event: 'Runtime.inspectRequested', message: InspectorNotification<Runtime.InspectRequestedEventDataType>): boolean;\n        emit(event: 'Debugger.scriptParsed', message: InspectorNotification<Debugger.ScriptParsedEventDataType>): boolean;\n        emit(event: 'Debugger.scriptFailedToParse', message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>): boolean;\n        emit(event: 'Debugger.breakpointResolved', message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>): boolean;\n        emit(event: 'Debugger.paused', message: InspectorNotification<Debugger.PausedEventDataType>): boolean;\n        emit(event: 'Debugger.resumed'): boolean;\n        emit(event: 'Console.messageAdded', message: InspectorNotification<Console.MessageAddedEventDataType>): boolean;\n        emit(event: 'Profiler.consoleProfileStarted', message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>): boolean;\n        emit(event: 'Profiler.consoleProfileFinished', message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>): boolean;\n        emit(event: 'HeapProfiler.addHeapSnapshotChunk', message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>): boolean;\n        emit(event: 'HeapProfiler.resetProfiles'): boolean;\n        emit(event: 'HeapProfiler.reportHeapSnapshotProgress', message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>): boolean;\n        emit(event: 'HeapProfiler.lastSeenObjectId', message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>): boolean;\n        emit(event: 'HeapProfiler.heapStatsUpdate', message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>): boolean;\n        emit(event: 'NodeTracing.dataCollected', message: InspectorNotification<NodeTracing.DataCollectedEventDataType>): boolean;\n        emit(event: 'NodeTracing.tracingComplete'): boolean;\n        emit(event: 'NodeWorker.attachedToWorker', message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>): boolean;\n        emit(event: 'NodeWorker.detachedFromWorker', message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>): boolean;\n        emit(event: 'NodeWorker.receivedMessageFromWorker', message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>): boolean;\n        emit(event: 'Network.requestWillBeSent', message: InspectorNotification<Network.RequestWillBeSentEventDataType>): boolean;\n        emit(event: 'Network.responseReceived', message: InspectorNotification<Network.ResponseReceivedEventDataType>): boolean;\n        emit(event: 'Network.loadingFailed', message: InspectorNotification<Network.LoadingFailedEventDataType>): boolean;\n        emit(event: 'Network.loadingFinished', message: InspectorNotification<Network.LoadingFinishedEventDataType>): boolean;\n        emit(event: 'NodeRuntime.waitingForDisconnect'): boolean;\n        emit(event: 'NodeRuntime.waitingForDebugger'): boolean;\n        on(event: string, listener: (...args: any[]) => void): this;\n        /**\n         * Emitted when any notification from the V8 Inspector is received.\n         */\n        on(event: 'inspectorNotification', listener: (message: InspectorNotification<object>) => void): this;\n        /**\n         * Issued when new execution context is created.\n         */\n        on(event: 'Runtime.executionContextCreated', listener: (message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>) => void): this;\n        /**\n         * Issued when execution context is destroyed.\n         */\n        on(event: 'Runtime.executionContextDestroyed', listener: (message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>) => void): this;\n        /**\n         * Issued when all executionContexts were cleared in browser\n         */\n        on(event: 'Runtime.executionContextsCleared', listener: () => void): this;\n        /**\n         * Issued when exception was thrown and unhandled.\n         */\n        on(event: 'Runtime.exceptionThrown', listener: (message: InspectorNotification<Runtime.ExceptionThrownEventDataType>) => void): this;\n        /**\n         * Issued when unhandled exception was revoked.\n         */\n        on(event: 'Runtime.exceptionRevoked', listener: (message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>) => void): this;\n        /**\n         * Issued when console API was called.\n         */\n        on(event: 'Runtime.consoleAPICalled', listener: (message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>) => void): this;\n        /**\n         * Issued when object should be inspected (for example, as a result of inspect() command line API call).\n         */\n        on(event: 'Runtime.inspectRequested', listener: (message: InspectorNotification<Runtime.InspectRequestedEventDataType>) => void): this;\n        /**\n         * Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.\n         */\n        on(event: 'Debugger.scriptParsed', listener: (message: InspectorNotification<Debugger.ScriptParsedEventDataType>) => void): this;\n        /**\n         * Fired when virtual machine fails to parse the script.\n         */\n        on(event: 'Debugger.scriptFailedToParse', listener: (message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>) => void): this;\n        /**\n         * Fired when breakpoint is resolved to an actual script and location.\n         */\n        on(event: 'Debugger.breakpointResolved', listener: (message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>) => void): this;\n        /**\n         * Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.\n         */\n        on(event: 'Debugger.paused', listener: (message: InspectorNotification<Debugger.PausedEventDataType>) => void): this;\n        /**\n         * Fired when the virtual machine resumed execution.\n         */\n        on(event: 'Debugger.resumed', listener: () => void): this;\n        /**\n         * Issued when new console message is added.\n         */\n        on(event: 'Console.messageAdded', listener: (message: InspectorNotification<Console.MessageAddedEventDataType>) => void): this;\n        /**\n         * Sent when new profile recording is started using console.profile() call.\n         */\n        on(event: 'Profiler.consoleProfileStarted', listener: (message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>) => void): this;\n        on(event: 'Profiler.consoleProfileFinished', listener: (message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>) => void): this;\n        on(event: 'HeapProfiler.addHeapSnapshotChunk', listener: (message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>) => void): this;\n        on(event: 'HeapProfiler.resetProfiles', listener: () => void): this;\n        on(event: 'HeapProfiler.reportHeapSnapshotProgress', listener: (message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>) => void): this;\n        /**\n         * If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.\n         */\n        on(event: 'HeapProfiler.lastSeenObjectId', listener: (message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>) => void): this;\n        /**\n         * If heap objects tracking has been started then backend may send update for one or more fragments\n         */\n        on(event: 'HeapProfiler.heapStatsUpdate', listener: (message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>) => void): this;\n        /**\n         * Contains an bucket of collected trace events.\n         */\n        on(event: 'NodeTracing.dataCollected', listener: (message: InspectorNotification<NodeTracing.DataCollectedEventDataType>) => void): this;\n        /**\n         * Signals that tracing is stopped and there is no trace buffers pending flush, all data were\n         * delivered via dataCollected events.\n         */\n        on(event: 'NodeTracing.tracingComplete', listener: () => void): this;\n        /**\n         * Issued when attached to a worker.\n         */\n        on(event: 'NodeWorker.attachedToWorker', listener: (message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>) => void): this;\n        /**\n         * Issued when detached from the worker.\n         */\n        on(event: 'NodeWorker.detachedFromWorker', listener: (message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>) => void): this;\n        /**\n         * Notifies about a new protocol message received from the session\n         * (session ID is provided in attachedToWorker notification).\n         */\n        on(event: 'NodeWorker.receivedMessageFromWorker', listener: (message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>) => void): this;\n        /**\n         * Fired when page is about to send HTTP request.\n         */\n        on(event: 'Network.requestWillBeSent', listener: (message: InspectorNotification<Network.RequestWillBeSentEventDataType>) => void): this;\n        /**\n         * Fired when HTTP response is available.\n         */\n        on(event: 'Network.responseReceived', listener: (message: InspectorNotification<Network.ResponseReceivedEventDataType>) => void): this;\n        on(event: 'Network.loadingFailed', listener: (message: InspectorNotification<Network.LoadingFailedEventDataType>) => void): this;\n        on(event: 'Network.loadingFinished', listener: (message: InspectorNotification<Network.LoadingFinishedEventDataType>) => void): this;\n        /**\n         * This event is fired instead of `Runtime.executionContextDestroyed` when\n         * enabled.\n         * It is fired when the Node process finished all code execution and is\n         * waiting for all frontends to disconnect.\n         */\n        on(event: 'NodeRuntime.waitingForDisconnect', listener: () => void): this;\n        /**\n         * This event is fired when the runtime is waiting for the debugger. For\n         * example, when inspector.waitingForDebugger is called\n         */\n        on(event: 'NodeRuntime.waitingForDebugger', listener: () => void): this;\n        once(event: string, listener: (...args: any[]) => void): this;\n        /**\n         * Emitted when any notification from the V8 Inspector is received.\n         */\n        once(event: 'inspectorNotification', listener: (message: InspectorNotification<object>) => void): this;\n        /**\n         * Issued when new execution context is created.\n         */\n        once(event: 'Runtime.executionContextCreated', listener: (message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>) => void): this;\n        /**\n         * Issued when execution context is destroyed.\n         */\n        once(event: 'Runtime.executionContextDestroyed', listener: (message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>) => void): this;\n        /**\n         * Issued when all executionContexts were cleared in browser\n         */\n        once(event: 'Runtime.executionContextsCleared', listener: () => void): this;\n        /**\n         * Issued when exception was thrown and unhandled.\n         */\n        once(event: 'Runtime.exceptionThrown', listener: (message: InspectorNotification<Runtime.ExceptionThrownEventDataType>) => void): this;\n        /**\n         * Issued when unhandled exception was revoked.\n         */\n        once(event: 'Runtime.exceptionRevoked', listener: (message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>) => void): this;\n        /**\n         * Issued when console API was called.\n         */\n        once(event: 'Runtime.consoleAPICalled', listener: (message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>) => void): this;\n        /**\n         * Issued when object should be inspected (for example, as a result of inspect() command line API call).\n         */\n        once(event: 'Runtime.inspectRequested', listener: (message: InspectorNotification<Runtime.InspectRequestedEventDataType>) => void): this;\n        /**\n         * Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.\n         */\n        once(event: 'Debugger.scriptParsed', listener: (message: InspectorNotification<Debugger.ScriptParsedEventDataType>) => void): this;\n        /**\n         * Fired when virtual machine fails to parse the script.\n         */\n        once(event: 'Debugger.scriptFailedToParse', listener: (message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>) => void): this;\n        /**\n         * Fired when breakpoint is resolved to an actual script and location.\n         */\n        once(event: 'Debugger.breakpointResolved', listener: (message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>) => void): this;\n        /**\n         * Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.\n         */\n        once(event: 'Debugger.paused', listener: (message: InspectorNotification<Debugger.PausedEventDataType>) => void): this;\n        /**\n         * Fired when the virtual machine resumed execution.\n         */\n        once(event: 'Debugger.resumed', listener: () => void): this;\n        /**\n         * Issued when new console message is added.\n         */\n        once(event: 'Console.messageAdded', listener: (message: InspectorNotification<Console.MessageAddedEventDataType>) => void): this;\n        /**\n         * Sent when new profile recording is started using console.profile() call.\n         */\n        once(event: 'Profiler.consoleProfileStarted', listener: (message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>) => void): this;\n        once(event: 'Profiler.consoleProfileFinished', listener: (message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>) => void): this;\n        once(event: 'HeapProfiler.addHeapSnapshotChunk', listener: (message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>) => void): this;\n        once(event: 'HeapProfiler.resetProfiles', listener: () => void): this;\n        once(event: 'HeapProfiler.reportHeapSnapshotProgress', listener: (message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>) => void): this;\n        /**\n         * If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.\n         */\n        once(event: 'HeapProfiler.lastSeenObjectId', listener: (message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>) => void): this;\n        /**\n         * If heap objects tracking has been started then backend may send update for one or more fragments\n         */\n        once(event: 'HeapProfiler.heapStatsUpdate', listener: (message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>) => void): this;\n        /**\n         * Contains an bucket of collected trace events.\n         */\n        once(event: 'NodeTracing.dataCollected', listener: (message: InspectorNotification<NodeTracing.DataCollectedEventDataType>) => void): this;\n        /**\n         * Signals that tracing is stopped and there is no trace buffers pending flush, all data were\n         * delivered via dataCollected events.\n         */\n        once(event: 'NodeTracing.tracingComplete', listener: () => void): this;\n        /**\n         * Issued when attached to a worker.\n         */\n        once(event: 'NodeWorker.attachedToWorker', listener: (message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>) => void): this;\n        /**\n         * Issued when detached from the worker.\n         */\n        once(event: 'NodeWorker.detachedFromWorker', listener: (message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>) => void): this;\n        /**\n         * Notifies about a new protocol message received from the session\n         * (session ID is provided in attachedToWorker notification).\n         */\n        once(event: 'NodeWorker.receivedMessageFromWorker', listener: (message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>) => void): this;\n        /**\n         * Fired when page is about to send HTTP request.\n         */\n        once(event: 'Network.requestWillBeSent', listener: (message: InspectorNotification<Network.RequestWillBeSentEventDataType>) => void): this;\n        /**\n         * Fired when HTTP response is available.\n         */\n        once(event: 'Network.responseReceived', listener: (message: InspectorNotification<Network.ResponseReceivedEventDataType>) => void): this;\n        once(event: 'Network.loadingFailed', listener: (message: InspectorNotification<Network.LoadingFailedEventDataType>) => void): this;\n        once(event: 'Network.loadingFinished', listener: (message: InspectorNotification<Network.LoadingFinishedEventDataType>) => void): this;\n        /**\n         * This event is fired instead of `Runtime.executionContextDestroyed` when\n         * enabled.\n         * It is fired when the Node process finished all code execution and is\n         * waiting for all frontends to disconnect.\n         */\n        once(event: 'NodeRuntime.waitingForDisconnect', listener: () => void): this;\n        /**\n         * This event is fired when the runtime is waiting for the debugger. For\n         * example, when inspector.waitingForDebugger is called\n         */\n        once(event: 'NodeRuntime.waitingForDebugger', listener: () => void): this;\n        prependListener(event: string, listener: (...args: any[]) => void): this;\n        /**\n         * Emitted when any notification from the V8 Inspector is received.\n         */\n        prependListener(event: 'inspectorNotification', listener: (message: InspectorNotification<object>) => void): this;\n        /**\n         * Issued when new execution context is created.\n         */\n        prependListener(event: 'Runtime.executionContextCreated', listener: (message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>) => void): this;\n        /**\n         * Issued when execution context is destroyed.\n         */\n        prependListener(event: 'Runtime.executionContextDestroyed', listener: (message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>) => void): this;\n        /**\n         * Issued when all executionContexts were cleared in browser\n         */\n        prependListener(event: 'Runtime.executionContextsCleared', listener: () => void): this;\n        /**\n         * Issued when exception was thrown and unhandled.\n         */\n        prependListener(event: 'Runtime.exceptionThrown', listener: (message: InspectorNotification<Runtime.ExceptionThrownEventDataType>) => void): this;\n        /**\n         * Issued when unhandled exception was revoked.\n         */\n        prependListener(event: 'Runtime.exceptionRevoked', listener: (message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>) => void): this;\n        /**\n         * Issued when console API was called.\n         */\n        prependListener(event: 'Runtime.consoleAPICalled', listener: (message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>) => void): this;\n        /**\n         * Issued when object should be inspected (for example, as a result of inspect() command line API call).\n         */\n        prependListener(event: 'Runtime.inspectRequested', listener: (message: InspectorNotification<Runtime.InspectRequestedEventDataType>) => void): this;\n        /**\n         * Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.\n         */\n        prependListener(event: 'Debugger.scriptParsed', listener: (message: InspectorNotification<Debugger.ScriptParsedEventDataType>) => void): this;\n        /**\n         * Fired when virtual machine fails to parse the script.\n         */\n        prependListener(event: 'Debugger.scriptFailedToParse', listener: (message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>) => void): this;\n        /**\n         * Fired when breakpoint is resolved to an actual script and location.\n         */\n        prependListener(event: 'Debugger.breakpointResolved', listener: (message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>) => void): this;\n        /**\n         * Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.\n         */\n        prependListener(event: 'Debugger.paused', listener: (message: InspectorNotification<Debugger.PausedEventDataType>) => void): this;\n        /**\n         * Fired when the virtual machine resumed execution.\n         */\n        prependListener(event: 'Debugger.resumed', listener: () => void): this;\n        /**\n         * Issued when new console message is added.\n         */\n        prependListener(event: 'Console.messageAdded', listener: (message: InspectorNotification<Console.MessageAddedEventDataType>) => void): this;\n        /**\n         * Sent when new profile recording is started using console.profile() call.\n         */\n        prependListener(event: 'Profiler.consoleProfileStarted', listener: (message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>) => void): this;\n        prependListener(event: 'Profiler.consoleProfileFinished', listener: (message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>) => void): this;\n        prependListener(event: 'HeapProfiler.addHeapSnapshotChunk', listener: (message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>) => void): this;\n        prependListener(event: 'HeapProfiler.resetProfiles', listener: () => void): this;\n        prependListener(event: 'HeapProfiler.reportHeapSnapshotProgress', listener: (message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>) => void): this;\n        /**\n         * If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.\n         */\n        prependListener(event: 'HeapProfiler.lastSeenObjectId', listener: (message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>) => void): this;\n        /**\n         * If heap objects tracking has been started then backend may send update for one or more fragments\n         */\n        prependListener(event: 'HeapProfiler.heapStatsUpdate', listener: (message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>) => void): this;\n        /**\n         * Contains an bucket of collected trace events.\n         */\n        prependListener(event: 'NodeTracing.dataCollected', listener: (message: InspectorNotification<NodeTracing.DataCollectedEventDataType>) => void): this;\n        /**\n         * Signals that tracing is stopped and there is no trace buffers pending flush, all data were\n         * delivered via dataCollected events.\n         */\n        prependListener(event: 'NodeTracing.tracingComplete', listener: () => void): this;\n        /**\n         * Issued when attached to a worker.\n         */\n        prependListener(event: 'NodeWorker.attachedToWorker', listener: (message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>) => void): this;\n        /**\n         * Issued when detached from the worker.\n         */\n        prependListener(event: 'NodeWorker.detachedFromWorker', listener: (message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>) => void): this;\n        /**\n         * Notifies about a new protocol message received from the session\n         * (session ID is provided in attachedToWorker notification).\n         */\n        prependListener(event: 'NodeWorker.receivedMessageFromWorker', listener: (message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>) => void): this;\n        /**\n         * Fired when page is about to send HTTP request.\n         */\n        prependListener(event: 'Network.requestWillBeSent', listener: (message: InspectorNotification<Network.RequestWillBeSentEventDataType>) => void): this;\n        /**\n         * Fired when HTTP response is available.\n         */\n        prependListener(event: 'Network.responseReceived', listener: (message: InspectorNotification<Network.ResponseReceivedEventDataType>) => void): this;\n        prependListener(event: 'Network.loadingFailed', listener: (message: InspectorNotification<Network.LoadingFailedEventDataType>) => void): this;\n        prependListener(event: 'Network.loadingFinished', listener: (message: InspectorNotification<Network.LoadingFinishedEventDataType>) => void): this;\n        /**\n         * This event is fired instead of `Runtime.executionContextDestroyed` when\n         * enabled.\n         * It is fired when the Node process finished all code execution and is\n         * waiting for all frontends to disconnect.\n         */\n        prependListener(event: 'NodeRuntime.waitingForDisconnect', listener: () => void): this;\n        /**\n         * This event is fired when the runtime is waiting for the debugger. For\n         * example, when inspector.waitingForDebugger is called\n         */\n        prependListener(event: 'NodeRuntime.waitingForDebugger', listener: () => void): this;\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\n        /**\n         * Emitted when any notification from the V8 Inspector is received.\n         */\n        prependOnceListener(event: 'inspectorNotification', listener: (message: InspectorNotification<object>) => void): this;\n        /**\n         * Issued when new execution context is created.\n         */\n        prependOnceListener(event: 'Runtime.executionContextCreated', listener: (message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>) => void): this;\n        /**\n         * Issued when execution context is destroyed.\n         */\n        prependOnceListener(event: 'Runtime.executionContextDestroyed', listener: (message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>) => void): this;\n        /**\n         * Issued when all executionContexts were cleared in browser\n         */\n        prependOnceListener(event: 'Runtime.executionContextsCleared', listener: () => void): this;\n        /**\n         * Issued when exception was thrown and unhandled.\n         */\n        prependOnceListener(event: 'Runtime.exceptionThrown', listener: (message: InspectorNotification<Runtime.ExceptionThrownEventDataType>) => void): this;\n        /**\n         * Issued when unhandled exception was revoked.\n         */\n        prependOnceListener(event: 'Runtime.exceptionRevoked', listener: (message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>) => void): this;\n        /**\n         * Issued when console API was called.\n         */\n        prependOnceListener(event: 'Runtime.consoleAPICalled', listener: (message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>) => void): this;\n        /**\n         * Issued when object should be inspected (for example, as a result of inspect() command line API call).\n         */\n        prependOnceListener(event: 'Runtime.inspectRequested', listener: (message: InspectorNotification<Runtime.InspectRequestedEventDataType>) => void): this;\n        /**\n         * Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.\n         */\n        prependOnceListener(event: 'Debugger.scriptParsed', listener: (message: InspectorNotification<Debugger.ScriptParsedEventDataType>) => void): this;\n        /**\n         * Fired when virtual machine fails to parse the script.\n         */\n        prependOnceListener(event: 'Debugger.scriptFailedToParse', listener: (message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>) => void): this;\n        /**\n         * Fired when breakpoint is resolved to an actual script and location.\n         */\n        prependOnceListener(event: 'Debugger.breakpointResolved', listener: (message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>) => void): this;\n        /**\n         * Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.\n         */\n        prependOnceListener(event: 'Debugger.paused', listener: (message: InspectorNotification<Debugger.PausedEventDataType>) => void): this;\n        /**\n         * Fired when the virtual machine resumed execution.\n         */\n        prependOnceListener(event: 'Debugger.resumed', listener: () => void): this;\n        /**\n         * Issued when new console message is added.\n         */\n        prependOnceListener(event: 'Console.messageAdded', listener: (message: InspectorNotification<Console.MessageAddedEventDataType>) => void): this;\n        /**\n         * Sent when new profile recording is started using console.profile() call.\n         */\n        prependOnceListener(event: 'Profiler.consoleProfileStarted', listener: (message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>) => void): this;\n        prependOnceListener(event: 'Profiler.consoleProfileFinished', listener: (message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>) => void): this;\n        prependOnceListener(event: 'HeapProfiler.addHeapSnapshotChunk', listener: (message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>) => void): this;\n        prependOnceListener(event: 'HeapProfiler.resetProfiles', listener: () => void): this;\n        prependOnceListener(event: 'HeapProfiler.reportHeapSnapshotProgress', listener: (message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>) => void): this;\n        /**\n         * If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.\n         */\n        prependOnceListener(event: 'HeapProfiler.lastSeenObjectId', listener: (message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>) => void): this;\n        /**\n         * If heap objects tracking has been started then backend may send update for one or more fragments\n         */\n        prependOnceListener(event: 'HeapProfiler.heapStatsUpdate', listener: (message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>) => void): this;\n        /**\n         * Contains an bucket of collected trace events.\n         */\n        prependOnceListener(event: 'NodeTracing.dataCollected', listener: (message: InspectorNotification<NodeTracing.DataCollectedEventDataType>) => void): this;\n        /**\n         * Signals that tracing is stopped and there is no trace buffers pending flush, all data were\n         * delivered via dataCollected events.\n         */\n        prependOnceListener(event: 'NodeTracing.tracingComplete', listener: () => void): this;\n        /**\n         * Issued when attached to a worker.\n         */\n        prependOnceListener(event: 'NodeWorker.attachedToWorker', listener: (message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>) => void): this;\n        /**\n         * Issued when detached from the worker.\n         */\n        prependOnceListener(event: 'NodeWorker.detachedFromWorker', listener: (message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>) => void): this;\n        /**\n         * Notifies about a new protocol message received from the session\n         * (session ID is provided in attachedToWorker notification).\n         */\n        prependOnceListener(event: 'NodeWorker.receivedMessageFromWorker', listener: (message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>) => void): this;\n        /**\n         * Fired when page is about to send HTTP request.\n         */\n        prependOnceListener(event: 'Network.requestWillBeSent', listener: (message: InspectorNotification<Network.RequestWillBeSentEventDataType>) => void): this;\n        /**\n         * Fired when HTTP response is available.\n         */\n        prependOnceListener(event: 'Network.responseReceived', listener: (message: InspectorNotification<Network.ResponseReceivedEventDataType>) => void): this;\n        prependOnceListener(event: 'Network.loadingFailed', listener: (message: InspectorNotification<Network.LoadingFailedEventDataType>) => void): this;\n        prependOnceListener(event: 'Network.loadingFinished', listener: (message: InspectorNotification<Network.LoadingFinishedEventDataType>) => void): this;\n        /**\n         * This event is fired instead of `Runtime.executionContextDestroyed` when\n         * enabled.\n         * It is fired when the Node process finished all code execution and is\n         * waiting for all frontends to disconnect.\n         */\n        prependOnceListener(event: 'NodeRuntime.waitingForDisconnect', listener: () => void): this;\n        /**\n         * This event is fired when the runtime is waiting for the debugger. For\n         * example, when inspector.waitingForDebugger is called\n         */\n        prependOnceListener(event: 'NodeRuntime.waitingForDebugger', listener: () => void): this;\n    }\n\n    /**\n     * Activate inspector on host and port. Equivalent to `node --inspect=[[host:]port]`, but can be done programmatically after node has\n     * started.\n     *\n     * If wait is `true`, will block until a client has connected to the inspect port\n     * and flow control has been passed to the debugger client.\n     *\n     * See the [security warning](https://nodejs.org/docs/latest-v22.x/api/cli.html#warning-binding-inspector-to-a-public-ipport-combination-is-insecure)\n     * regarding the `host` parameter usage.\n     * @param port Port to listen on for inspector connections. Defaults to what was specified on the CLI.\n     * @param host Host to listen on for inspector connections. Defaults to what was specified on the CLI.\n     * @param wait Block until a client has connected. Defaults to what was specified on the CLI.\n     * @returns Disposable that calls `inspector.close()`.\n     */\n    function open(port?: number, host?: string, wait?: boolean): Disposable;\n\n    /**\n     * Deactivate the inspector. Blocks until there are no active connections.\n     */\n    function close(): void;\n\n    /**\n     * Return the URL of the active inspector, or `undefined` if there is none.\n     *\n     * ```console\n     * $ node --inspect -p 'inspector.url()'\n     * Debugger listening on ws://127.0.0.1:9229/166e272e-7a30-4d09-97ce-f1c012b43c34\n     * For help, see: https://nodejs.org/en/docs/inspector\n     * ws://127.0.0.1:9229/166e272e-7a30-4d09-97ce-f1c012b43c34\n     *\n     * $ node --inspect=localhost:3000 -p 'inspector.url()'\n     * Debugger listening on ws://localhost:3000/51cf8d0e-3c36-4c59-8efd-54519839e56a\n     * For help, see: https://nodejs.org/en/docs/inspector\n     * ws://localhost:3000/51cf8d0e-3c36-4c59-8efd-54519839e56a\n     *\n     * $ node -p 'inspector.url()'\n     * undefined\n     * ```\n     */\n    function url(): string | undefined;\n\n    /**\n     * Blocks until a client (existing or connected later) has sent `Runtime.runIfWaitingForDebugger` command.\n     *\n     * An exception will be thrown if there is no active inspector.\n     * @since v12.7.0\n     */\n    function waitForDebugger(): void;\n\n    // These methods are exposed by the V8 inspector console API (inspector/v8-console.h).\n    // The method signatures differ from those of the Node.js console, and are deliberately\n    // typed permissively.\n    interface InspectorConsole {\n        debug(...data: any[]): void;\n        error(...data: any[]): void;\n        info(...data: any[]): void;\n        log(...data: any[]): void;\n        warn(...data: any[]): void;\n        dir(...data: any[]): void;\n        dirxml(...data: any[]): void;\n        table(...data: any[]): void;\n        trace(...data: any[]): void;\n        group(...data: any[]): void;\n        groupCollapsed(...data: any[]): void;\n        groupEnd(...data: any[]): void;\n        clear(...data: any[]): void;\n        count(label?: any): void;\n        countReset(label?: any): void;\n        assert(value?: any, ...data: any[]): void;\n        profile(label?: any): void;\n        profileEnd(label?: any): void;\n        time(label?: any): void;\n        timeLog(label?: any): void;\n        timeStamp(label?: any): void;\n    }\n\n    /**\n     * An object to send messages to the remote inspector console.\n     * @since v11.0.0\n     */\n    const console: InspectorConsole;\n\n    // DevTools protocol event broadcast methods\n    namespace Network {\n        /**\n         * This feature is only available with the `--experimental-network-inspection` flag enabled.\n         *\n         * Broadcasts the `Network.requestWillBeSent` event to connected frontends. This event indicates that\n         * the application is about to send an HTTP request.\n         * @since v22.6.0\n         * @experimental\n         */\n        function requestWillBeSent(params: RequestWillBeSentEventDataType): void;\n        /**\n         * This feature is only available with the `--experimental-network-inspection` flag enabled.\n         *\n         * Broadcasts the `Network.responseReceived` event to connected frontends. This event indicates that\n         * HTTP response is available.\n         * @since v22.6.0\n         * @experimental\n         */\n        function responseReceived(params: ResponseReceivedEventDataType): void;\n        /**\n         * This feature is only available with the `--experimental-network-inspection` flag enabled.\n         *\n         * Broadcasts the `Network.loadingFinished` event to connected frontends. This event indicates that\n         * HTTP request has finished loading.\n         * @since v22.6.0\n         * @experimental\n         */\n        function loadingFinished(params: LoadingFinishedEventDataType): void;\n        /**\n         * This feature is only available with the `--experimental-network-inspection` flag enabled.\n         *\n         * Broadcasts the `Network.loadingFailed` event to connected frontends. This event indicates that\n         * HTTP request has failed to load.\n         * @since v22.7.0\n         * @experimental\n         */\n        function loadingFailed(params: LoadingFailedEventDataType): void;\n    }\n}\n\n/**\n * The `node:inspector` module provides an API for interacting with the V8\n * inspector.\n */\ndeclare module 'node:inspector' {\n    export * from 'inspector';\n}\n\n/**\n * The `node:inspector/promises` module provides an API for interacting with the V8\n * inspector.\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/inspector/promises.js)\n * @since v19.0.0\n */\ndeclare module 'inspector/promises' {\n    import EventEmitter = require('node:events');\n    import {\n        open,\n        close,\n        url,\n        waitForDebugger,\n        console,\n        InspectorNotification,\n        Schema,\n        Runtime,\n        Debugger,\n        Console,\n        Profiler,\n        HeapProfiler,\n        NodeTracing,\n        NodeWorker,\n        Network,\n        NodeRuntime,\n    } from 'inspector';\n\n    /**\n     * The `inspector.Session` is used for dispatching messages to the V8 inspector\n     * back-end and receiving message responses and notifications.\n     * @since v19.0.0\n     */\n    class Session extends EventEmitter {\n        /**\n         * Create a new instance of the `inspector.Session` class.\n         * The inspector session needs to be connected through `session.connect()` before the messages can be dispatched to the inspector backend.\n         */\n        constructor();\n\n        /**\n         * Connects a session to the inspector back-end.\n         */\n        connect(): void;\n\n        /**\n         * Connects a session to the inspector back-end.\n         * An exception will be thrown if this API was not called on a Worker thread.\n         */\n        connectToMainThread(): void;\n\n        /**\n         * Immediately close the session. All pending message callbacks will be called with an error.\n         * `session.connect()` will need to be called to be able to send messages again.\n         * Reconnected session will lose all inspector state, such as enabled agents or configured breakpoints.\n         */\n        disconnect(): void;\n\n        /**\n         * Posts a message to the inspector back-end.\n         *\n         * ```js\n         * import { Session } from 'node:inspector/promises';\n         * try {\n         *   const session = new Session();\n         *   session.connect();\n         *   const result = await session.post('Runtime.evaluate', { expression: '2 + 2' });\n         *   console.log(result);\n         * } catch (error) {\n         *   console.error(error);\n         * }\n         * // Output: { result: { type: 'number', value: 4, description: '4' } }\n         * ```\n         *\n         * The latest version of the V8 inspector protocol is published on the\n         * [Chrome DevTools Protocol Viewer](https://chromedevtools.github.io/devtools-protocol/v8/).\n         *\n         * Node.js inspector supports all the Chrome DevTools Protocol domains declared\n         * by V8. Chrome DevTools Protocol domain provides an interface for interacting\n         * with one of the runtime agents used to inspect the application state and listen\n         * to the run-time events.\n         */\n        post(method: string, params?: object): Promise<void>;\n        /**\n         * Returns supported domains.\n         */\n        post(method: 'Schema.getDomains'): Promise<Schema.GetDomainsReturnType>;\n        /**\n         * Evaluates expression on global object.\n         */\n        post(method: 'Runtime.evaluate', params?: Runtime.EvaluateParameterType): Promise<Runtime.EvaluateReturnType>;\n        /**\n         * Add handler to promise with given promise object id.\n         */\n        post(method: 'Runtime.awaitPromise', params?: Runtime.AwaitPromiseParameterType): Promise<Runtime.AwaitPromiseReturnType>;\n        /**\n         * Calls function with given declaration on the given object. Object group of the result is inherited from the target object.\n         */\n        post(method: 'Runtime.callFunctionOn', params?: Runtime.CallFunctionOnParameterType): Promise<Runtime.CallFunctionOnReturnType>;\n        /**\n         * Returns properties of a given object. Object group of the result is inherited from the target object.\n         */\n        post(method: 'Runtime.getProperties', params?: Runtime.GetPropertiesParameterType): Promise<Runtime.GetPropertiesReturnType>;\n        /**\n         * Releases remote object with given id.\n         */\n        post(method: 'Runtime.releaseObject', params?: Runtime.ReleaseObjectParameterType): Promise<void>;\n        /**\n         * Releases all remote objects that belong to a given group.\n         */\n        post(method: 'Runtime.releaseObjectGroup', params?: Runtime.ReleaseObjectGroupParameterType): Promise<void>;\n        /**\n         * Tells inspected instance to run if it was waiting for debugger to attach.\n         */\n        post(method: 'Runtime.runIfWaitingForDebugger'): Promise<void>;\n        /**\n         * Enables reporting of execution contexts creation by means of <code>executionContextCreated</code> event. When the reporting gets enabled the event will be sent immediately for each existing execution context.\n         */\n        post(method: 'Runtime.enable'): Promise<void>;\n        /**\n         * Disables reporting of execution contexts creation.\n         */\n        post(method: 'Runtime.disable'): Promise<void>;\n        /**\n         * Discards collected exceptions and console API calls.\n         */\n        post(method: 'Runtime.discardConsoleEntries'): Promise<void>;\n        /**\n         * @experimental\n         */\n        post(method: 'Runtime.setCustomObjectFormatterEnabled', params?: Runtime.SetCustomObjectFormatterEnabledParameterType): Promise<void>;\n        /**\n         * Compiles expression.\n         */\n        post(method: 'Runtime.compileScript', params?: Runtime.CompileScriptParameterType): Promise<Runtime.CompileScriptReturnType>;\n        /**\n         * Runs script with given id in a given context.\n         */\n        post(method: 'Runtime.runScript', params?: Runtime.RunScriptParameterType): Promise<Runtime.RunScriptReturnType>;\n        post(method: 'Runtime.queryObjects', params?: Runtime.QueryObjectsParameterType): Promise<Runtime.QueryObjectsReturnType>;\n        /**\n         * Returns all let, const and class variables from global scope.\n         */\n        post(method: 'Runtime.globalLexicalScopeNames', params?: Runtime.GlobalLexicalScopeNamesParameterType): Promise<Runtime.GlobalLexicalScopeNamesReturnType>;\n        /**\n         * Enables debugger for the given page. Clients should not assume that the debugging has been enabled until the result for this command is received.\n         */\n        post(method: 'Debugger.enable'): Promise<Debugger.EnableReturnType>;\n        /**\n         * Disables debugger for given page.\n         */\n        post(method: 'Debugger.disable'): Promise<void>;\n        /**\n         * Activates / deactivates all breakpoints on the page.\n         */\n        post(method: 'Debugger.setBreakpointsActive', params?: Debugger.SetBreakpointsActiveParameterType): Promise<void>;\n        /**\n         * Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc).\n         */\n        post(method: 'Debugger.setSkipAllPauses', params?: Debugger.SetSkipAllPausesParameterType): Promise<void>;\n        /**\n         * Sets JavaScript breakpoint at given location specified either by URL or URL regex. Once this command is issued, all existing parsed scripts will have breakpoints resolved and returned in <code>locations</code> property. Further matching script parsing will result in subsequent <code>breakpointResolved</code> events issued. This logical breakpoint will survive page reloads.\n         */\n        post(method: 'Debugger.setBreakpointByUrl', params?: Debugger.SetBreakpointByUrlParameterType): Promise<Debugger.SetBreakpointByUrlReturnType>;\n        /**\n         * Sets JavaScript breakpoint at a given location.\n         */\n        post(method: 'Debugger.setBreakpoint', params?: Debugger.SetBreakpointParameterType): Promise<Debugger.SetBreakpointReturnType>;\n        /**\n         * Removes JavaScript breakpoint.\n         */\n        post(method: 'Debugger.removeBreakpoint', params?: Debugger.RemoveBreakpointParameterType): Promise<void>;\n        /**\n         * Returns possible locations for breakpoint. scriptId in start and end range locations should be the same.\n         */\n        post(method: 'Debugger.getPossibleBreakpoints', params?: Debugger.GetPossibleBreakpointsParameterType): Promise<Debugger.GetPossibleBreakpointsReturnType>;\n        /**\n         * Continues execution until specific location is reached.\n         */\n        post(method: 'Debugger.continueToLocation', params?: Debugger.ContinueToLocationParameterType): Promise<void>;\n        /**\n         * @experimental\n         */\n        post(method: 'Debugger.pauseOnAsyncCall', params?: Debugger.PauseOnAsyncCallParameterType): Promise<void>;\n        /**\n         * Steps over the statement.\n         */\n        post(method: 'Debugger.stepOver'): Promise<void>;\n        /**\n         * Steps into the function call.\n         */\n        post(method: 'Debugger.stepInto', params?: Debugger.StepIntoParameterType): Promise<void>;\n        /**\n         * Steps out of the function call.\n         */\n        post(method: 'Debugger.stepOut'): Promise<void>;\n        /**\n         * Stops on the next JavaScript statement.\n         */\n        post(method: 'Debugger.pause'): Promise<void>;\n        /**\n         * This method is deprecated - use Debugger.stepInto with breakOnAsyncCall and Debugger.pauseOnAsyncTask instead. Steps into next scheduled async task if any is scheduled before next pause. Returns success when async task is actually scheduled, returns error if no task were scheduled or another scheduleStepIntoAsync was called.\n         * @experimental\n         */\n        post(method: 'Debugger.scheduleStepIntoAsync'): Promise<void>;\n        /**\n         * Resumes JavaScript execution.\n         */\n        post(method: 'Debugger.resume'): Promise<void>;\n        /**\n         * Returns stack trace with given <code>stackTraceId</code>.\n         * @experimental\n         */\n        post(method: 'Debugger.getStackTrace', params?: Debugger.GetStackTraceParameterType): Promise<Debugger.GetStackTraceReturnType>;\n        /**\n         * Searches for given string in script content.\n         */\n        post(method: 'Debugger.searchInContent', params?: Debugger.SearchInContentParameterType): Promise<Debugger.SearchInContentReturnType>;\n        /**\n         * Edits JavaScript source live.\n         */\n        post(method: 'Debugger.setScriptSource', params?: Debugger.SetScriptSourceParameterType): Promise<Debugger.SetScriptSourceReturnType>;\n        /**\n         * Restarts particular call frame from the beginning.\n         */\n        post(method: 'Debugger.restartFrame', params?: Debugger.RestartFrameParameterType): Promise<Debugger.RestartFrameReturnType>;\n        /**\n         * Returns source for the script with given id.\n         */\n        post(method: 'Debugger.getScriptSource', params?: Debugger.GetScriptSourceParameterType): Promise<Debugger.GetScriptSourceReturnType>;\n        /**\n         * Defines pause on exceptions state. Can be set to stop on all exceptions, uncaught exceptions or no exceptions. Initial pause on exceptions state is <code>none</code>.\n         */\n        post(method: 'Debugger.setPauseOnExceptions', params?: Debugger.SetPauseOnExceptionsParameterType): Promise<void>;\n        /**\n         * Evaluates expression on a given call frame.\n         */\n        post(method: 'Debugger.evaluateOnCallFrame', params?: Debugger.EvaluateOnCallFrameParameterType): Promise<Debugger.EvaluateOnCallFrameReturnType>;\n        /**\n         * Changes value of variable in a callframe. Object-based scopes are not supported and must be mutated manually.\n         */\n        post(method: 'Debugger.setVariableValue', params?: Debugger.SetVariableValueParameterType): Promise<void>;\n        /**\n         * Changes return value in top frame. Available only at return break position.\n         * @experimental\n         */\n        post(method: 'Debugger.setReturnValue', params?: Debugger.SetReturnValueParameterType): Promise<void>;\n        /**\n         * Enables or disables async call stacks tracking.\n         */\n        post(method: 'Debugger.setAsyncCallStackDepth', params?: Debugger.SetAsyncCallStackDepthParameterType): Promise<void>;\n        /**\n         * Replace previous blackbox patterns with passed ones. Forces backend to skip stepping/pausing in scripts with url matching one of the patterns. VM will try to leave blackboxed script by performing 'step in' several times, finally resorting to 'step out' if unsuccessful.\n         * @experimental\n         */\n        post(method: 'Debugger.setBlackboxPatterns', params?: Debugger.SetBlackboxPatternsParameterType): Promise<void>;\n        /**\n         * Makes backend skip steps in the script in blackboxed ranges. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful. Positions array contains positions where blackbox state is changed. First interval isn't blackboxed. Array should be sorted.\n         * @experimental\n         */\n        post(method: 'Debugger.setBlackboxedRanges', params?: Debugger.SetBlackboxedRangesParameterType): Promise<void>;\n        /**\n         * Enables console domain, sends the messages collected so far to the client by means of the <code>messageAdded</code> notification.\n         */\n        post(method: 'Console.enable'): Promise<void>;\n        /**\n         * Disables console domain, prevents further console messages from being reported to the client.\n         */\n        post(method: 'Console.disable'): Promise<void>;\n        /**\n         * Does nothing.\n         */\n        post(method: 'Console.clearMessages'): Promise<void>;\n        post(method: 'Profiler.enable'): Promise<void>;\n        post(method: 'Profiler.disable'): Promise<void>;\n        /**\n         * Changes CPU profiler sampling interval. Must be called before CPU profiles recording started.\n         */\n        post(method: 'Profiler.setSamplingInterval', params?: Profiler.SetSamplingIntervalParameterType): Promise<void>;\n        post(method: 'Profiler.start'): Promise<void>;\n        post(method: 'Profiler.stop'): Promise<Profiler.StopReturnType>;\n        /**\n         * Enable precise code coverage. Coverage data for JavaScript executed before enabling precise code coverage may be incomplete. Enabling prevents running optimized code and resets execution counters.\n         */\n        post(method: 'Profiler.startPreciseCoverage', params?: Profiler.StartPreciseCoverageParameterType): Promise<void>;\n        /**\n         * Disable precise code coverage. Disabling releases unnecessary execution count records and allows executing optimized code.\n         */\n        post(method: 'Profiler.stopPreciseCoverage'): Promise<void>;\n        /**\n         * Collect coverage data for the current isolate, and resets execution counters. Precise code coverage needs to have started.\n         */\n        post(method: 'Profiler.takePreciseCoverage'): Promise<Profiler.TakePreciseCoverageReturnType>;\n        /**\n         * Collect coverage data for the current isolate. The coverage data may be incomplete due to garbage collection.\n         */\n        post(method: 'Profiler.getBestEffortCoverage'): Promise<Profiler.GetBestEffortCoverageReturnType>;\n        post(method: 'HeapProfiler.enable'): Promise<void>;\n        post(method: 'HeapProfiler.disable'): Promise<void>;\n        post(method: 'HeapProfiler.startTrackingHeapObjects', params?: HeapProfiler.StartTrackingHeapObjectsParameterType): Promise<void>;\n        post(method: 'HeapProfiler.stopTrackingHeapObjects', params?: HeapProfiler.StopTrackingHeapObjectsParameterType): Promise<void>;\n        post(method: 'HeapProfiler.takeHeapSnapshot', params?: HeapProfiler.TakeHeapSnapshotParameterType): Promise<void>;\n        post(method: 'HeapProfiler.collectGarbage'): Promise<void>;\n        post(method: 'HeapProfiler.getObjectByHeapObjectId', params?: HeapProfiler.GetObjectByHeapObjectIdParameterType): Promise<HeapProfiler.GetObjectByHeapObjectIdReturnType>;\n        /**\n         * Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions).\n         */\n        post(method: 'HeapProfiler.addInspectedHeapObject', params?: HeapProfiler.AddInspectedHeapObjectParameterType): Promise<void>;\n        post(method: 'HeapProfiler.getHeapObjectId', params?: HeapProfiler.GetHeapObjectIdParameterType): Promise<HeapProfiler.GetHeapObjectIdReturnType>;\n        post(method: 'HeapProfiler.startSampling', params?: HeapProfiler.StartSamplingParameterType): Promise<void>;\n        post(method: 'HeapProfiler.stopSampling'): Promise<HeapProfiler.StopSamplingReturnType>;\n        post(method: 'HeapProfiler.getSamplingProfile'): Promise<HeapProfiler.GetSamplingProfileReturnType>;\n        /**\n         * Gets supported tracing categories.\n         */\n        post(method: 'NodeTracing.getCategories'): Promise<NodeTracing.GetCategoriesReturnType>;\n        /**\n         * Start trace events collection.\n         */\n        post(method: 'NodeTracing.start', params?: NodeTracing.StartParameterType): Promise<void>;\n        /**\n         * Stop trace events collection. Remaining collected events will be sent as a sequence of\n         * dataCollected events followed by tracingComplete event.\n         */\n        post(method: 'NodeTracing.stop'): Promise<void>;\n        /**\n         * Sends protocol message over session with given id.\n         */\n        post(method: 'NodeWorker.sendMessageToWorker', params?: NodeWorker.SendMessageToWorkerParameterType): Promise<void>;\n        /**\n         * Instructs the inspector to attach to running workers. Will also attach to new workers\n         * as they start\n         */\n        post(method: 'NodeWorker.enable', params?: NodeWorker.EnableParameterType): Promise<void>;\n        /**\n         * Detaches from all running workers and disables attaching to new workers as they are started.\n         */\n        post(method: 'NodeWorker.disable'): Promise<void>;\n        /**\n         * Detached from the worker with given sessionId.\n         */\n        post(method: 'NodeWorker.detach', params?: NodeWorker.DetachParameterType): Promise<void>;\n        /**\n         * Disables network tracking, prevents network events from being sent to the client.\n         */\n        post(method: 'Network.disable'): Promise<void>;\n        /**\n         * Enables network tracking, network events will now be delivered to the client.\n         */\n        post(method: 'Network.enable'): Promise<void>;\n        /**\n         * Enable the NodeRuntime events except by `NodeRuntime.waitingForDisconnect`.\n         */\n        post(method: 'NodeRuntime.enable'): Promise<void>;\n        /**\n         * Disable NodeRuntime events\n         */\n        post(method: 'NodeRuntime.disable'): Promise<void>;\n        /**\n         * Enable the `NodeRuntime.waitingForDisconnect`.\n         */\n        post(method: 'NodeRuntime.notifyWhenWaitingForDisconnect', params?: NodeRuntime.NotifyWhenWaitingForDisconnectParameterType): Promise<void>;\n\n        addListener(event: string, listener: (...args: any[]) => void): this;\n        /**\n         * Emitted when any notification from the V8 Inspector is received.\n         */\n        addListener(event: 'inspectorNotification', listener: (message: InspectorNotification<object>) => void): this;\n        /**\n         * Issued when new execution context is created.\n         */\n        addListener(event: 'Runtime.executionContextCreated', listener: (message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>) => void): this;\n        /**\n         * Issued when execution context is destroyed.\n         */\n        addListener(event: 'Runtime.executionContextDestroyed', listener: (message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>) => void): this;\n        /**\n         * Issued when all executionContexts were cleared in browser\n         */\n        addListener(event: 'Runtime.executionContextsCleared', listener: () => void): this;\n        /**\n         * Issued when exception was thrown and unhandled.\n         */\n        addListener(event: 'Runtime.exceptionThrown', listener: (message: InspectorNotification<Runtime.ExceptionThrownEventDataType>) => void): this;\n        /**\n         * Issued when unhandled exception was revoked.\n         */\n        addListener(event: 'Runtime.exceptionRevoked', listener: (message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>) => void): this;\n        /**\n         * Issued when console API was called.\n         */\n        addListener(event: 'Runtime.consoleAPICalled', listener: (message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>) => void): this;\n        /**\n         * Issued when object should be inspected (for example, as a result of inspect() command line API call).\n         */\n        addListener(event: 'Runtime.inspectRequested', listener: (message: InspectorNotification<Runtime.InspectRequestedEventDataType>) => void): this;\n        /**\n         * Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.\n         */\n        addListener(event: 'Debugger.scriptParsed', listener: (message: InspectorNotification<Debugger.ScriptParsedEventDataType>) => void): this;\n        /**\n         * Fired when virtual machine fails to parse the script.\n         */\n        addListener(event: 'Debugger.scriptFailedToParse', listener: (message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>) => void): this;\n        /**\n         * Fired when breakpoint is resolved to an actual script and location.\n         */\n        addListener(event: 'Debugger.breakpointResolved', listener: (message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>) => void): this;\n        /**\n         * Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.\n         */\n        addListener(event: 'Debugger.paused', listener: (message: InspectorNotification<Debugger.PausedEventDataType>) => void): this;\n        /**\n         * Fired when the virtual machine resumed execution.\n         */\n        addListener(event: 'Debugger.resumed', listener: () => void): this;\n        /**\n         * Issued when new console message is added.\n         */\n        addListener(event: 'Console.messageAdded', listener: (message: InspectorNotification<Console.MessageAddedEventDataType>) => void): this;\n        /**\n         * Sent when new profile recording is started using console.profile() call.\n         */\n        addListener(event: 'Profiler.consoleProfileStarted', listener: (message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>) => void): this;\n        addListener(event: 'Profiler.consoleProfileFinished', listener: (message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>) => void): this;\n        addListener(event: 'HeapProfiler.addHeapSnapshotChunk', listener: (message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>) => void): this;\n        addListener(event: 'HeapProfiler.resetProfiles', listener: () => void): this;\n        addListener(event: 'HeapProfiler.reportHeapSnapshotProgress', listener: (message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>) => void): this;\n        /**\n         * If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.\n         */\n        addListener(event: 'HeapProfiler.lastSeenObjectId', listener: (message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>) => void): this;\n        /**\n         * If heap objects tracking has been started then backend may send update for one or more fragments\n         */\n        addListener(event: 'HeapProfiler.heapStatsUpdate', listener: (message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>) => void): this;\n        /**\n         * Contains an bucket of collected trace events.\n         */\n        addListener(event: 'NodeTracing.dataCollected', listener: (message: InspectorNotification<NodeTracing.DataCollectedEventDataType>) => void): this;\n        /**\n         * Signals that tracing is stopped and there is no trace buffers pending flush, all data were\n         * delivered via dataCollected events.\n         */\n        addListener(event: 'NodeTracing.tracingComplete', listener: () => void): this;\n        /**\n         * Issued when attached to a worker.\n         */\n        addListener(event: 'NodeWorker.attachedToWorker', listener: (message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>) => void): this;\n        /**\n         * Issued when detached from the worker.\n         */\n        addListener(event: 'NodeWorker.detachedFromWorker', listener: (message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>) => void): this;\n        /**\n         * Notifies about a new protocol message received from the session\n         * (session ID is provided in attachedToWorker notification).\n         */\n        addListener(event: 'NodeWorker.receivedMessageFromWorker', listener: (message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>) => void): this;\n        /**\n         * Fired when page is about to send HTTP request.\n         */\n        addListener(event: 'Network.requestWillBeSent', listener: (message: InspectorNotification<Network.RequestWillBeSentEventDataType>) => void): this;\n        /**\n         * Fired when HTTP response is available.\n         */\n        addListener(event: 'Network.responseReceived', listener: (message: InspectorNotification<Network.ResponseReceivedEventDataType>) => void): this;\n        addListener(event: 'Network.loadingFailed', listener: (message: InspectorNotification<Network.LoadingFailedEventDataType>) => void): this;\n        addListener(event: 'Network.loadingFinished', listener: (message: InspectorNotification<Network.LoadingFinishedEventDataType>) => void): this;\n        /**\n         * This event is fired instead of `Runtime.executionContextDestroyed` when\n         * enabled.\n         * It is fired when the Node process finished all code execution and is\n         * waiting for all frontends to disconnect.\n         */\n        addListener(event: 'NodeRuntime.waitingForDisconnect', listener: () => void): this;\n        /**\n         * This event is fired when the runtime is waiting for the debugger. For\n         * example, when inspector.waitingForDebugger is called\n         */\n        addListener(event: 'NodeRuntime.waitingForDebugger', listener: () => void): this;\n        emit(event: string | symbol, ...args: any[]): boolean;\n        emit(event: 'inspectorNotification', message: InspectorNotification<object>): boolean;\n        emit(event: 'Runtime.executionContextCreated', message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>): boolean;\n        emit(event: 'Runtime.executionContextDestroyed', message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>): boolean;\n        emit(event: 'Runtime.executionContextsCleared'): boolean;\n        emit(event: 'Runtime.exceptionThrown', message: InspectorNotification<Runtime.ExceptionThrownEventDataType>): boolean;\n        emit(event: 'Runtime.exceptionRevoked', message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>): boolean;\n        emit(event: 'Runtime.consoleAPICalled', message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>): boolean;\n        emit(event: 'Runtime.inspectRequested', message: InspectorNotification<Runtime.InspectRequestedEventDataType>): boolean;\n        emit(event: 'Debugger.scriptParsed', message: InspectorNotification<Debugger.ScriptParsedEventDataType>): boolean;\n        emit(event: 'Debugger.scriptFailedToParse', message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>): boolean;\n        emit(event: 'Debugger.breakpointResolved', message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>): boolean;\n        emit(event: 'Debugger.paused', message: InspectorNotification<Debugger.PausedEventDataType>): boolean;\n        emit(event: 'Debugger.resumed'): boolean;\n        emit(event: 'Console.messageAdded', message: InspectorNotification<Console.MessageAddedEventDataType>): boolean;\n        emit(event: 'Profiler.consoleProfileStarted', message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>): boolean;\n        emit(event: 'Profiler.consoleProfileFinished', message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>): boolean;\n        emit(event: 'HeapProfiler.addHeapSnapshotChunk', message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>): boolean;\n        emit(event: 'HeapProfiler.resetProfiles'): boolean;\n        emit(event: 'HeapProfiler.reportHeapSnapshotProgress', message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>): boolean;\n        emit(event: 'HeapProfiler.lastSeenObjectId', message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>): boolean;\n        emit(event: 'HeapProfiler.heapStatsUpdate', message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>): boolean;\n        emit(event: 'NodeTracing.dataCollected', message: InspectorNotification<NodeTracing.DataCollectedEventDataType>): boolean;\n        emit(event: 'NodeTracing.tracingComplete'): boolean;\n        emit(event: 'NodeWorker.attachedToWorker', message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>): boolean;\n        emit(event: 'NodeWorker.detachedFromWorker', message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>): boolean;\n        emit(event: 'NodeWorker.receivedMessageFromWorker', message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>): boolean;\n        emit(event: 'Network.requestWillBeSent', message: InspectorNotification<Network.RequestWillBeSentEventDataType>): boolean;\n        emit(event: 'Network.responseReceived', message: InspectorNotification<Network.ResponseReceivedEventDataType>): boolean;\n        emit(event: 'Network.loadingFailed', message: InspectorNotification<Network.LoadingFailedEventDataType>): boolean;\n        emit(event: 'Network.loadingFinished', message: InspectorNotification<Network.LoadingFinishedEventDataType>): boolean;\n        emit(event: 'NodeRuntime.waitingForDisconnect'): boolean;\n        emit(event: 'NodeRuntime.waitingForDebugger'): boolean;\n        on(event: string, listener: (...args: any[]) => void): this;\n        /**\n         * Emitted when any notification from the V8 Inspector is received.\n         */\n        on(event: 'inspectorNotification', listener: (message: InspectorNotification<object>) => void): this;\n        /**\n         * Issued when new execution context is created.\n         */\n        on(event: 'Runtime.executionContextCreated', listener: (message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>) => void): this;\n        /**\n         * Issued when execution context is destroyed.\n         */\n        on(event: 'Runtime.executionContextDestroyed', listener: (message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>) => void): this;\n        /**\n         * Issued when all executionContexts were cleared in browser\n         */\n        on(event: 'Runtime.executionContextsCleared', listener: () => void): this;\n        /**\n         * Issued when exception was thrown and unhandled.\n         */\n        on(event: 'Runtime.exceptionThrown', listener: (message: InspectorNotification<Runtime.ExceptionThrownEventDataType>) => void): this;\n        /**\n         * Issued when unhandled exception was revoked.\n         */\n        on(event: 'Runtime.exceptionRevoked', listener: (message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>) => void): this;\n        /**\n         * Issued when console API was called.\n         */\n        on(event: 'Runtime.consoleAPICalled', listener: (message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>) => void): this;\n        /**\n         * Issued when object should be inspected (for example, as a result of inspect() command line API call).\n         */\n        on(event: 'Runtime.inspectRequested', listener: (message: InspectorNotification<Runtime.InspectRequestedEventDataType>) => void): this;\n        /**\n         * Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.\n         */\n        on(event: 'Debugger.scriptParsed', listener: (message: InspectorNotification<Debugger.ScriptParsedEventDataType>) => void): this;\n        /**\n         * Fired when virtual machine fails to parse the script.\n         */\n        on(event: 'Debugger.scriptFailedToParse', listener: (message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>) => void): this;\n        /**\n         * Fired when breakpoint is resolved to an actual script and location.\n         */\n        on(event: 'Debugger.breakpointResolved', listener: (message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>) => void): this;\n        /**\n         * Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.\n         */\n        on(event: 'Debugger.paused', listener: (message: InspectorNotification<Debugger.PausedEventDataType>) => void): this;\n        /**\n         * Fired when the virtual machine resumed execution.\n         */\n        on(event: 'Debugger.resumed', listener: () => void): this;\n        /**\n         * Issued when new console message is added.\n         */\n        on(event: 'Console.messageAdded', listener: (message: InspectorNotification<Console.MessageAddedEventDataType>) => void): this;\n        /**\n         * Sent when new profile recording is started using console.profile() call.\n         */\n        on(event: 'Profiler.consoleProfileStarted', listener: (message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>) => void): this;\n        on(event: 'Profiler.consoleProfileFinished', listener: (message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>) => void): this;\n        on(event: 'HeapProfiler.addHeapSnapshotChunk', listener: (message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>) => void): this;\n        on(event: 'HeapProfiler.resetProfiles', listener: () => void): this;\n        on(event: 'HeapProfiler.reportHeapSnapshotProgress', listener: (message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>) => void): this;\n        /**\n         * If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.\n         */\n        on(event: 'HeapProfiler.lastSeenObjectId', listener: (message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>) => void): this;\n        /**\n         * If heap objects tracking has been started then backend may send update for one or more fragments\n         */\n        on(event: 'HeapProfiler.heapStatsUpdate', listener: (message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>) => void): this;\n        /**\n         * Contains an bucket of collected trace events.\n         */\n        on(event: 'NodeTracing.dataCollected', listener: (message: InspectorNotification<NodeTracing.DataCollectedEventDataType>) => void): this;\n        /**\n         * Signals that tracing is stopped and there is no trace buffers pending flush, all data were\n         * delivered via dataCollected events.\n         */\n        on(event: 'NodeTracing.tracingComplete', listener: () => void): this;\n        /**\n         * Issued when attached to a worker.\n         */\n        on(event: 'NodeWorker.attachedToWorker', listener: (message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>) => void): this;\n        /**\n         * Issued when detached from the worker.\n         */\n        on(event: 'NodeWorker.detachedFromWorker', listener: (message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>) => void): this;\n        /**\n         * Notifies about a new protocol message received from the session\n         * (session ID is provided in attachedToWorker notification).\n         */\n        on(event: 'NodeWorker.receivedMessageFromWorker', listener: (message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>) => void): this;\n        /**\n         * Fired when page is about to send HTTP request.\n         */\n        on(event: 'Network.requestWillBeSent', listener: (message: InspectorNotification<Network.RequestWillBeSentEventDataType>) => void): this;\n        /**\n         * Fired when HTTP response is available.\n         */\n        on(event: 'Network.responseReceived', listener: (message: InspectorNotification<Network.ResponseReceivedEventDataType>) => void): this;\n        on(event: 'Network.loadingFailed', listener: (message: InspectorNotification<Network.LoadingFailedEventDataType>) => void): this;\n        on(event: 'Network.loadingFinished', listener: (message: InspectorNotification<Network.LoadingFinishedEventDataType>) => void): this;\n        /**\n         * This event is fired instead of `Runtime.executionContextDestroyed` when\n         * enabled.\n         * It is fired when the Node process finished all code execution and is\n         * waiting for all frontends to disconnect.\n         */\n        on(event: 'NodeRuntime.waitingForDisconnect', listener: () => void): this;\n        /**\n         * This event is fired when the runtime is waiting for the debugger. For\n         * example, when inspector.waitingForDebugger is called\n         */\n        on(event: 'NodeRuntime.waitingForDebugger', listener: () => void): this;\n        once(event: string, listener: (...args: any[]) => void): this;\n        /**\n         * Emitted when any notification from the V8 Inspector is received.\n         */\n        once(event: 'inspectorNotification', listener: (message: InspectorNotification<object>) => void): this;\n        /**\n         * Issued when new execution context is created.\n         */\n        once(event: 'Runtime.executionContextCreated', listener: (message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>) => void): this;\n        /**\n         * Issued when execution context is destroyed.\n         */\n        once(event: 'Runtime.executionContextDestroyed', listener: (message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>) => void): this;\n        /**\n         * Issued when all executionContexts were cleared in browser\n         */\n        once(event: 'Runtime.executionContextsCleared', listener: () => void): this;\n        /**\n         * Issued when exception was thrown and unhandled.\n         */\n        once(event: 'Runtime.exceptionThrown', listener: (message: InspectorNotification<Runtime.ExceptionThrownEventDataType>) => void): this;\n        /**\n         * Issued when unhandled exception was revoked.\n         */\n        once(event: 'Runtime.exceptionRevoked', listener: (message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>) => void): this;\n        /**\n         * Issued when console API was called.\n         */\n        once(event: 'Runtime.consoleAPICalled', listener: (message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>) => void): this;\n        /**\n         * Issued when object should be inspected (for example, as a result of inspect() command line API call).\n         */\n        once(event: 'Runtime.inspectRequested', listener: (message: InspectorNotification<Runtime.InspectRequestedEventDataType>) => void): this;\n        /**\n         * Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.\n         */\n        once(event: 'Debugger.scriptParsed', listener: (message: InspectorNotification<Debugger.ScriptParsedEventDataType>) => void): this;\n        /**\n         * Fired when virtual machine fails to parse the script.\n         */\n        once(event: 'Debugger.scriptFailedToParse', listener: (message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>) => void): this;\n        /**\n         * Fired when breakpoint is resolved to an actual script and location.\n         */\n        once(event: 'Debugger.breakpointResolved', listener: (message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>) => void): this;\n        /**\n         * Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.\n         */\n        once(event: 'Debugger.paused', listener: (message: InspectorNotification<Debugger.PausedEventDataType>) => void): this;\n        /**\n         * Fired when the virtual machine resumed execution.\n         */\n        once(event: 'Debugger.resumed', listener: () => void): this;\n        /**\n         * Issued when new console message is added.\n         */\n        once(event: 'Console.messageAdded', listener: (message: InspectorNotification<Console.MessageAddedEventDataType>) => void): this;\n        /**\n         * Sent when new profile recording is started using console.profile() call.\n         */\n        once(event: 'Profiler.consoleProfileStarted', listener: (message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>) => void): this;\n        once(event: 'Profiler.consoleProfileFinished', listener: (message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>) => void): this;\n        once(event: 'HeapProfiler.addHeapSnapshotChunk', listener: (message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>) => void): this;\n        once(event: 'HeapProfiler.resetProfiles', listener: () => void): this;\n        once(event: 'HeapProfiler.reportHeapSnapshotProgress', listener: (message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>) => void): this;\n        /**\n         * If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.\n         */\n        once(event: 'HeapProfiler.lastSeenObjectId', listener: (message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>) => void): this;\n        /**\n         * If heap objects tracking has been started then backend may send update for one or more fragments\n         */\n        once(event: 'HeapProfiler.heapStatsUpdate', listener: (message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>) => void): this;\n        /**\n         * Contains an bucket of collected trace events.\n         */\n        once(event: 'NodeTracing.dataCollected', listener: (message: InspectorNotification<NodeTracing.DataCollectedEventDataType>) => void): this;\n        /**\n         * Signals that tracing is stopped and there is no trace buffers pending flush, all data were\n         * delivered via dataCollected events.\n         */\n        once(event: 'NodeTracing.tracingComplete', listener: () => void): this;\n        /**\n         * Issued when attached to a worker.\n         */\n        once(event: 'NodeWorker.attachedToWorker', listener: (message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>) => void): this;\n        /**\n         * Issued when detached from the worker.\n         */\n        once(event: 'NodeWorker.detachedFromWorker', listener: (message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>) => void): this;\n        /**\n         * Notifies about a new protocol message received from the session\n         * (session ID is provided in attachedToWorker notification).\n         */\n        once(event: 'NodeWorker.receivedMessageFromWorker', listener: (message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>) => void): this;\n        /**\n         * Fired when page is about to send HTTP request.\n         */\n        once(event: 'Network.requestWillBeSent', listener: (message: InspectorNotification<Network.RequestWillBeSentEventDataType>) => void): this;\n        /**\n         * Fired when HTTP response is available.\n         */\n        once(event: 'Network.responseReceived', listener: (message: InspectorNotification<Network.ResponseReceivedEventDataType>) => void): this;\n        once(event: 'Network.loadingFailed', listener: (message: InspectorNotification<Network.LoadingFailedEventDataType>) => void): this;\n        once(event: 'Network.loadingFinished', listener: (message: InspectorNotification<Network.LoadingFinishedEventDataType>) => void): this;\n        /**\n         * This event is fired instead of `Runtime.executionContextDestroyed` when\n         * enabled.\n         * It is fired when the Node process finished all code execution and is\n         * waiting for all frontends to disconnect.\n         */\n        once(event: 'NodeRuntime.waitingForDisconnect', listener: () => void): this;\n        /**\n         * This event is fired when the runtime is waiting for the debugger. For\n         * example, when inspector.waitingForDebugger is called\n         */\n        once(event: 'NodeRuntime.waitingForDebugger', listener: () => void): this;\n        prependListener(event: string, listener: (...args: any[]) => void): this;\n        /**\n         * Emitted when any notification from the V8 Inspector is received.\n         */\n        prependListener(event: 'inspectorNotification', listener: (message: InspectorNotification<object>) => void): this;\n        /**\n         * Issued when new execution context is created.\n         */\n        prependListener(event: 'Runtime.executionContextCreated', listener: (message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>) => void): this;\n        /**\n         * Issued when execution context is destroyed.\n         */\n        prependListener(event: 'Runtime.executionContextDestroyed', listener: (message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>) => void): this;\n        /**\n         * Issued when all executionContexts were cleared in browser\n         */\n        prependListener(event: 'Runtime.executionContextsCleared', listener: () => void): this;\n        /**\n         * Issued when exception was thrown and unhandled.\n         */\n        prependListener(event: 'Runtime.exceptionThrown', listener: (message: InspectorNotification<Runtime.ExceptionThrownEventDataType>) => void): this;\n        /**\n         * Issued when unhandled exception was revoked.\n         */\n        prependListener(event: 'Runtime.exceptionRevoked', listener: (message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>) => void): this;\n        /**\n         * Issued when console API was called.\n         */\n        prependListener(event: 'Runtime.consoleAPICalled', listener: (message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>) => void): this;\n        /**\n         * Issued when object should be inspected (for example, as a result of inspect() command line API call).\n         */\n        prependListener(event: 'Runtime.inspectRequested', listener: (message: InspectorNotification<Runtime.InspectRequestedEventDataType>) => void): this;\n        /**\n         * Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.\n         */\n        prependListener(event: 'Debugger.scriptParsed', listener: (message: InspectorNotification<Debugger.ScriptParsedEventDataType>) => void): this;\n        /**\n         * Fired when virtual machine fails to parse the script.\n         */\n        prependListener(event: 'Debugger.scriptFailedToParse', listener: (message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>) => void): this;\n        /**\n         * Fired when breakpoint is resolved to an actual script and location.\n         */\n        prependListener(event: 'Debugger.breakpointResolved', listener: (message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>) => void): this;\n        /**\n         * Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.\n         */\n        prependListener(event: 'Debugger.paused', listener: (message: InspectorNotification<Debugger.PausedEventDataType>) => void): this;\n        /**\n         * Fired when the virtual machine resumed execution.\n         */\n        prependListener(event: 'Debugger.resumed', listener: () => void): this;\n        /**\n         * Issued when new console message is added.\n         */\n        prependListener(event: 'Console.messageAdded', listener: (message: InspectorNotification<Console.MessageAddedEventDataType>) => void): this;\n        /**\n         * Sent when new profile recording is started using console.profile() call.\n         */\n        prependListener(event: 'Profiler.consoleProfileStarted', listener: (message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>) => void): this;\n        prependListener(event: 'Profiler.consoleProfileFinished', listener: (message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>) => void): this;\n        prependListener(event: 'HeapProfiler.addHeapSnapshotChunk', listener: (message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>) => void): this;\n        prependListener(event: 'HeapProfiler.resetProfiles', listener: () => void): this;\n        prependListener(event: 'HeapProfiler.reportHeapSnapshotProgress', listener: (message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>) => void): this;\n        /**\n         * If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.\n         */\n        prependListener(event: 'HeapProfiler.lastSeenObjectId', listener: (message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>) => void): this;\n        /**\n         * If heap objects tracking has been started then backend may send update for one or more fragments\n         */\n        prependListener(event: 'HeapProfiler.heapStatsUpdate', listener: (message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>) => void): this;\n        /**\n         * Contains an bucket of collected trace events.\n         */\n        prependListener(event: 'NodeTracing.dataCollected', listener: (message: InspectorNotification<NodeTracing.DataCollectedEventDataType>) => void): this;\n        /**\n         * Signals that tracing is stopped and there is no trace buffers pending flush, all data were\n         * delivered via dataCollected events.\n         */\n        prependListener(event: 'NodeTracing.tracingComplete', listener: () => void): this;\n        /**\n         * Issued when attached to a worker.\n         */\n        prependListener(event: 'NodeWorker.attachedToWorker', listener: (message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>) => void): this;\n        /**\n         * Issued when detached from the worker.\n         */\n        prependListener(event: 'NodeWorker.detachedFromWorker', listener: (message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>) => void): this;\n        /**\n         * Notifies about a new protocol message received from the session\n         * (session ID is provided in attachedToWorker notification).\n         */\n        prependListener(event: 'NodeWorker.receivedMessageFromWorker', listener: (message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>) => void): this;\n        /**\n         * Fired when page is about to send HTTP request.\n         */\n        prependListener(event: 'Network.requestWillBeSent', listener: (message: InspectorNotification<Network.RequestWillBeSentEventDataType>) => void): this;\n        /**\n         * Fired when HTTP response is available.\n         */\n        prependListener(event: 'Network.responseReceived', listener: (message: InspectorNotification<Network.ResponseReceivedEventDataType>) => void): this;\n        prependListener(event: 'Network.loadingFailed', listener: (message: InspectorNotification<Network.LoadingFailedEventDataType>) => void): this;\n        prependListener(event: 'Network.loadingFinished', listener: (message: InspectorNotification<Network.LoadingFinishedEventDataType>) => void): this;\n        /**\n         * This event is fired instead of `Runtime.executionContextDestroyed` when\n         * enabled.\n         * It is fired when the Node process finished all code execution and is\n         * waiting for all frontends to disconnect.\n         */\n        prependListener(event: 'NodeRuntime.waitingForDisconnect', listener: () => void): this;\n        /**\n         * This event is fired when the runtime is waiting for the debugger. For\n         * example, when inspector.waitingForDebugger is called\n         */\n        prependListener(event: 'NodeRuntime.waitingForDebugger', listener: () => void): this;\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\n        /**\n         * Emitted when any notification from the V8 Inspector is received.\n         */\n        prependOnceListener(event: 'inspectorNotification', listener: (message: InspectorNotification<object>) => void): this;\n        /**\n         * Issued when new execution context is created.\n         */\n        prependOnceListener(event: 'Runtime.executionContextCreated', listener: (message: InspectorNotification<Runtime.ExecutionContextCreatedEventDataType>) => void): this;\n        /**\n         * Issued when execution context is destroyed.\n         */\n        prependOnceListener(event: 'Runtime.executionContextDestroyed', listener: (message: InspectorNotification<Runtime.ExecutionContextDestroyedEventDataType>) => void): this;\n        /**\n         * Issued when all executionContexts were cleared in browser\n         */\n        prependOnceListener(event: 'Runtime.executionContextsCleared', listener: () => void): this;\n        /**\n         * Issued when exception was thrown and unhandled.\n         */\n        prependOnceListener(event: 'Runtime.exceptionThrown', listener: (message: InspectorNotification<Runtime.ExceptionThrownEventDataType>) => void): this;\n        /**\n         * Issued when unhandled exception was revoked.\n         */\n        prependOnceListener(event: 'Runtime.exceptionRevoked', listener: (message: InspectorNotification<Runtime.ExceptionRevokedEventDataType>) => void): this;\n        /**\n         * Issued when console API was called.\n         */\n        prependOnceListener(event: 'Runtime.consoleAPICalled', listener: (message: InspectorNotification<Runtime.ConsoleAPICalledEventDataType>) => void): this;\n        /**\n         * Issued when object should be inspected (for example, as a result of inspect() command line API call).\n         */\n        prependOnceListener(event: 'Runtime.inspectRequested', listener: (message: InspectorNotification<Runtime.InspectRequestedEventDataType>) => void): this;\n        /**\n         * Fired when virtual machine parses script. This event is also fired for all known and uncollected scripts upon enabling debugger.\n         */\n        prependOnceListener(event: 'Debugger.scriptParsed', listener: (message: InspectorNotification<Debugger.ScriptParsedEventDataType>) => void): this;\n        /**\n         * Fired when virtual machine fails to parse the script.\n         */\n        prependOnceListener(event: 'Debugger.scriptFailedToParse', listener: (message: InspectorNotification<Debugger.ScriptFailedToParseEventDataType>) => void): this;\n        /**\n         * Fired when breakpoint is resolved to an actual script and location.\n         */\n        prependOnceListener(event: 'Debugger.breakpointResolved', listener: (message: InspectorNotification<Debugger.BreakpointResolvedEventDataType>) => void): this;\n        /**\n         * Fired when the virtual machine stopped on breakpoint or exception or any other stop criteria.\n         */\n        prependOnceListener(event: 'Debugger.paused', listener: (message: InspectorNotification<Debugger.PausedEventDataType>) => void): this;\n        /**\n         * Fired when the virtual machine resumed execution.\n         */\n        prependOnceListener(event: 'Debugger.resumed', listener: () => void): this;\n        /**\n         * Issued when new console message is added.\n         */\n        prependOnceListener(event: 'Console.messageAdded', listener: (message: InspectorNotification<Console.MessageAddedEventDataType>) => void): this;\n        /**\n         * Sent when new profile recording is started using console.profile() call.\n         */\n        prependOnceListener(event: 'Profiler.consoleProfileStarted', listener: (message: InspectorNotification<Profiler.ConsoleProfileStartedEventDataType>) => void): this;\n        prependOnceListener(event: 'Profiler.consoleProfileFinished', listener: (message: InspectorNotification<Profiler.ConsoleProfileFinishedEventDataType>) => void): this;\n        prependOnceListener(event: 'HeapProfiler.addHeapSnapshotChunk', listener: (message: InspectorNotification<HeapProfiler.AddHeapSnapshotChunkEventDataType>) => void): this;\n        prependOnceListener(event: 'HeapProfiler.resetProfiles', listener: () => void): this;\n        prependOnceListener(event: 'HeapProfiler.reportHeapSnapshotProgress', listener: (message: InspectorNotification<HeapProfiler.ReportHeapSnapshotProgressEventDataType>) => void): this;\n        /**\n         * If heap objects tracking has been started then backend regularly sends a current value for last seen object id and corresponding timestamp. If the were changes in the heap since last event then one or more heapStatsUpdate events will be sent before a new lastSeenObjectId event.\n         */\n        prependOnceListener(event: 'HeapProfiler.lastSeenObjectId', listener: (message: InspectorNotification<HeapProfiler.LastSeenObjectIdEventDataType>) => void): this;\n        /**\n         * If heap objects tracking has been started then backend may send update for one or more fragments\n         */\n        prependOnceListener(event: 'HeapProfiler.heapStatsUpdate', listener: (message: InspectorNotification<HeapProfiler.HeapStatsUpdateEventDataType>) => void): this;\n        /**\n         * Contains an bucket of collected trace events.\n         */\n        prependOnceListener(event: 'NodeTracing.dataCollected', listener: (message: InspectorNotification<NodeTracing.DataCollectedEventDataType>) => void): this;\n        /**\n         * Signals that tracing is stopped and there is no trace buffers pending flush, all data were\n         * delivered via dataCollected events.\n         */\n        prependOnceListener(event: 'NodeTracing.tracingComplete', listener: () => void): this;\n        /**\n         * Issued when attached to a worker.\n         */\n        prependOnceListener(event: 'NodeWorker.attachedToWorker', listener: (message: InspectorNotification<NodeWorker.AttachedToWorkerEventDataType>) => void): this;\n        /**\n         * Issued when detached from the worker.\n         */\n        prependOnceListener(event: 'NodeWorker.detachedFromWorker', listener: (message: InspectorNotification<NodeWorker.DetachedFromWorkerEventDataType>) => void): this;\n        /**\n         * Notifies about a new protocol message received from the session\n         * (session ID is provided in attachedToWorker notification).\n         */\n        prependOnceListener(event: 'NodeWorker.receivedMessageFromWorker', listener: (message: InspectorNotification<NodeWorker.ReceivedMessageFromWorkerEventDataType>) => void): this;\n        /**\n         * Fired when page is about to send HTTP request.\n         */\n        prependOnceListener(event: 'Network.requestWillBeSent', listener: (message: InspectorNotification<Network.RequestWillBeSentEventDataType>) => void): this;\n        /**\n         * Fired when HTTP response is available.\n         */\n        prependOnceListener(event: 'Network.responseReceived', listener: (message: InspectorNotification<Network.ResponseReceivedEventDataType>) => void): this;\n        prependOnceListener(event: 'Network.loadingFailed', listener: (message: InspectorNotification<Network.LoadingFailedEventDataType>) => void): this;\n        prependOnceListener(event: 'Network.loadingFinished', listener: (message: InspectorNotification<Network.LoadingFinishedEventDataType>) => void): this;\n        /**\n         * This event is fired instead of `Runtime.executionContextDestroyed` when\n         * enabled.\n         * It is fired when the Node process finished all code execution and is\n         * waiting for all frontends to disconnect.\n         */\n        prependOnceListener(event: 'NodeRuntime.waitingForDisconnect', listener: () => void): this;\n        /**\n         * This event is fired when the runtime is waiting for the debugger. For\n         * example, when inspector.waitingForDebugger is called\n         */\n        prependOnceListener(event: 'NodeRuntime.waitingForDebugger', listener: () => void): this;\n    }\n\n    export {\n        Session,\n        open,\n        close,\n        url,\n        waitForDebugger,\n        console,\n        InspectorNotification,\n        Schema,\n        Runtime,\n        Debugger,\n        Console,\n        Profiler,\n        HeapProfiler,\n        NodeTracing,\n        NodeWorker,\n        Network,\n        NodeRuntime,\n    };\n}\n\n/**\n * The `node:inspector/promises` module provides an API for interacting with the V8\n * inspector.\n * @since v19.0.0\n */\ndeclare module 'node:inspector/promises' {\n    export * from 'inspector/promises';\n}\n",
  '@types/node/module.d.ts':
    "/**\n * @since v0.3.7\n */\ndeclare module \"module\" {\n    import { URL } from \"node:url\";\n    class Module {\n        constructor(id: string, parent?: Module);\n    }\n    interface Module extends NodeJS.Module {}\n    namespace Module {\n        export { Module };\n    }\n    namespace Module {\n        /**\n         * A list of the names of all modules provided by Node.js. Can be used to verify\n         * if a module is maintained by a third party or not.\n         *\n         * Note: the list doesn't contain prefix-only modules like `node:test`.\n         * @since v9.3.0, v8.10.0, v6.13.0\n         */\n        const builtinModules: readonly string[];\n        /**\n         * @since v12.2.0\n         * @param path Filename to be used to construct the require\n         * function. Must be a file URL object, file URL string, or absolute path\n         * string.\n         */\n        function createRequire(path: string | URL): NodeJS.Require;\n        namespace constants {\n            /**\n             * The following constants are returned as the `status` field in the object returned by\n             * {@link enableCompileCache} to indicate the result of the attempt to enable the\n             * [module compile cache](https://nodejs.org/docs/latest-v22.x/api/module.html#module-compile-cache).\n             * @since v22.8.0\n             */\n            namespace compileCacheStatus {\n                /**\n                 * Node.js has enabled the compile cache successfully. The directory used to store the\n                 * compile cache will be returned in the `directory` field in the\n                 * returned object.\n                 */\n                const ENABLED: number;\n                /**\n                 * The compile cache has already been enabled before, either by a previous call to\n                 * {@link enableCompileCache}, or by the `NODE_COMPILE_CACHE=dir`\n                 * environment variable. The directory used to store the\n                 * compile cache will be returned in the `directory` field in the\n                 * returned object.\n                 */\n                const ALREADY_ENABLED: number;\n                /**\n                 * Node.js fails to enable the compile cache. This can be caused by the lack of\n                 * permission to use the specified directory, or various kinds of file system errors.\n                 * The detail of the failure will be returned in the `message` field in the\n                 * returned object.\n                 */\n                const FAILED: number;\n                /**\n                 * Node.js cannot enable the compile cache because the environment variable\n                 * `NODE_DISABLE_COMPILE_CACHE=1` has been set.\n                 */\n                const DISABLED: number;\n            }\n        }\n        interface EnableCompileCacheResult {\n            /**\n             * One of the {@link constants.compileCacheStatus}\n             */\n            status: number;\n            /**\n             * If Node.js cannot enable the compile cache, this contains\n             * the error message. Only set if `status` is `module.constants.compileCacheStatus.FAILED`.\n             */\n            message?: string;\n            /**\n             * If the compile cache is enabled, this contains the directory\n             * where the compile cache is stored. Only set if  `status` is\n             * `module.constants.compileCacheStatus.ENABLED` or\n             * `module.constants.compileCacheStatus.ALREADY_ENABLED`.\n             */\n            directory?: string;\n        }\n        /**\n         * Enable [module compile cache](https://nodejs.org/docs/latest-v22.x/api/module.html#module-compile-cache)\n         * in the current Node.js instance.\n         *\n         * If `cacheDir` is not specified, Node.js will either use the directory specified by the\n         * `NODE_COMPILE_CACHE=dir` environment variable if it's set, or use\n         * `path.join(os.tmpdir(), 'node-compile-cache')` otherwise. For general use cases, it's\n         * recommended to call `module.enableCompileCache()` without specifying the `cacheDir`,\n         * so that the directory can be overridden by the `NODE_COMPILE_CACHE` environment\n         * variable when necessary.\n         *\n         * Since compile cache is supposed to be a quiet optimization that is not required for the\n         * application to be functional, this method is designed to not throw any exception when the\n         * compile cache cannot be enabled. Instead, it will return an object containing an error\n         * message in the `message` field to aid debugging.\n         * If compile cache is enabled successfully, the `directory` field in the returned object\n         * contains the path to the directory where the compile cache is stored. The `status`\n         * field in the returned object would be one of the `module.constants.compileCacheStatus`\n         * values to indicate the result of the attempt to enable the\n         * [module compile cache](https://nodejs.org/docs/latest-v22.x/api/module.html#module-compile-cache).\n         *\n         * This method only affects the current Node.js instance. To enable it in child worker threads,\n         * either call this method in child worker threads too, or set the\n         * `process.env.NODE_COMPILE_CACHE` value to compile cache directory so the behavior can\n         * be inherited into the child workers. The directory can be obtained either from the\n         * `directory` field returned by this method, or with {@link getCompileCacheDir}.\n         * @since v22.8.0\n         * @param cacheDir Optional path to specify the directory where the compile cache\n         * will be stored/retrieved.\n         */\n        function enableCompileCache(cacheDir?: string): EnableCompileCacheResult;\n        /**\n         * Flush the [module compile cache](https://nodejs.org/docs/latest-v22.x/api/module.html#module-compile-cache)\n         * accumulated from modules already loaded\n         * in the current Node.js instance to disk. This returns after all the flushing\n         * file system operations come to an end, no matter they succeed or not. If there\n         * are any errors, this will fail silently, since compile cache misses should not\n         * interfere with the actual operation of the application.\n         * @since v22.10.0\n         */\n        function flushCompileCache(): void;\n        /**\n         * @since v22.8.0\n         * @return Path to the [module compile cache](https://nodejs.org/docs/latest-v22.x/api/module.html#module-compile-cache)\n         * directory if it is enabled, or `undefined` otherwise.\n         */\n        function getCompileCacheDir(): string | undefined;\n        /**\n         * ```text\n         * /path/to/project\n         *   ├ packages/\n         *     ├ bar/\n         *       ├ bar.js\n         *       └ package.json // name = '@foo/bar'\n         *     └ qux/\n         *       ├ node_modules/\n         *         └ some-package/\n         *           └ package.json // name = 'some-package'\n         *       ├ qux.js\n         *       └ package.json // name = '@foo/qux'\n         *   ├ main.js\n         *   └ package.json // name = '@foo'\n         * ```\n         * ```js\n         * // /path/to/project/packages/bar/bar.js\n         * import { findPackageJSON } from 'node:module';\n         *\n         * findPackageJSON('..', import.meta.url);\n         * // '/path/to/project/package.json'\n         * // Same result when passing an absolute specifier instead:\n         * findPackageJSON(new URL('../', import.meta.url));\n         * findPackageJSON(import.meta.resolve('../'));\n         *\n         * findPackageJSON('some-package', import.meta.url);\n         * // '/path/to/project/packages/bar/node_modules/some-package/package.json'\n         * // When passing an absolute specifier, you might get a different result if the\n         * // resolved module is inside a subfolder that has nested `package.json`.\n         * findPackageJSON(import.meta.resolve('some-package'));\n         * // '/path/to/project/packages/bar/node_modules/some-package/some-subfolder/package.json'\n         *\n         * findPackageJSON('@foo/qux', import.meta.url);\n         * // '/path/to/project/packages/qux/package.json'\n         * ```\n         * @since v22.14.0\n         * @param specifier The specifier for the module whose `package.json` to\n         * retrieve. When passing a _bare specifier_, the `package.json` at the root of\n         * the package is returned. When passing a _relative specifier_ or an _absolute specifier_,\n         * the closest parent `package.json` is returned.\n         * @param base The absolute location (`file:` URL string or FS path) of the\n         * containing  module. For CJS, use `__filename` (not `__dirname`!); for ESM, use\n         * `import.meta.url`. You do not need to pass it if `specifier` is an _absolute specifier_.\n         * @returns A path if the `package.json` is found. When `startLocation`\n         * is a package, the package's root `package.json`; when a relative or unresolved, the closest\n         * `package.json` to the `startLocation`.\n         */\n        function findPackageJSON(specifier: string | URL, base?: string | URL): string | undefined;\n        /**\n         * @since v18.6.0, v16.17.0\n         */\n        function isBuiltin(moduleName: string): boolean;\n        interface RegisterOptions<Data> {\n            /**\n             * If you want to resolve `specifier` relative to a\n             * base URL, such as `import.meta.url`, you can pass that URL here. This\n             * property is ignored if the `parentURL` is supplied as the second argument.\n             * @default 'data:'\n             */\n            parentURL?: string | URL | undefined;\n            /**\n             * Any arbitrary, cloneable JavaScript value to pass into the\n             * {@link initialize} hook.\n             */\n            data?: Data | undefined;\n            /**\n             * [Transferable objects](https://nodejs.org/docs/latest-v22.x/api/worker_threads.html#portpostmessagevalue-transferlist)\n             * to be passed into the `initialize` hook.\n             */\n            transferList?: any[] | undefined;\n        }\n        /* eslint-disable @definitelytyped/no-unnecessary-generics */\n        /**\n         * Register a module that exports hooks that customize Node.js module\n         * resolution and loading behavior. See\n         * [Customization hooks](https://nodejs.org/docs/latest-v22.x/api/module.html#customization-hooks).\n         *\n         * This feature requires `--allow-worker` if used with the\n         * [Permission Model](https://nodejs.org/docs/latest-v22.x/api/permissions.html#permission-model).\n         * @since v20.6.0, v18.19.0\n         * @param specifier Customization hooks to be registered; this should be\n         * the same string that would be passed to `import()`, except that if it is\n         * relative, it is resolved relative to `parentURL`.\n         * @param parentURL f you want to resolve `specifier` relative to a base\n         * URL, such as `import.meta.url`, you can pass that URL here.\n         */\n        function register<Data = any>(\n            specifier: string | URL,\n            parentURL?: string | URL,\n            options?: RegisterOptions<Data>,\n        ): void;\n        function register<Data = any>(specifier: string | URL, options?: RegisterOptions<Data>): void;\n        interface RegisterHooksOptions {\n            /**\n             * See [load hook](https://nodejs.org/docs/latest-v22.x/api/module.html#loadurl-context-nextload).\n             * @default undefined\n             */\n            load?: LoadHookSync | undefined;\n            /**\n             * See [resolve hook](https://nodejs.org/docs/latest-v22.x/api/module.html#resolvespecifier-context-nextresolve).\n             * @default undefined\n             */\n            resolve?: ResolveHookSync | undefined;\n        }\n        interface ModuleHooks {\n            /**\n             * Deregister the hook instance.\n             */\n            deregister(): void;\n        }\n        /**\n         * Register [hooks](https://nodejs.org/docs/latest-v22.x/api/module.html#customization-hooks)\n         * that customize Node.js module resolution and loading behavior.\n         * @since v22.15.0\n         * @experimental\n         */\n        function registerHooks(options: RegisterHooksOptions): ModuleHooks;\n        interface StripTypeScriptTypesOptions {\n            /**\n             * Possible values are:\n             * * `'strip'` Only strip type annotations without performing the transformation of TypeScript features.\n             * * `'transform'` Strip type annotations and transform TypeScript features to JavaScript.\n             * @default 'strip'\n             */\n            mode?: \"strip\" | \"transform\" | undefined;\n            /**\n             * Only when `mode` is `'transform'`, if `true`, a source map\n             * will be generated for the transformed code.\n             * @default false\n             */\n            sourceMap?: boolean | undefined;\n            /**\n             * Specifies the source url used in the source map.\n             */\n            sourceUrl?: string | undefined;\n        }\n        /**\n         * `module.stripTypeScriptTypes()` removes type annotations from TypeScript code. It\n         * can be used to strip type annotations from TypeScript code before running it\n         * with `vm.runInContext()` or `vm.compileFunction()`.\n         * By default, it will throw an error if the code contains TypeScript features\n         * that require transformation such as `Enums`,\n         * see [type-stripping](https://nodejs.org/docs/latest-v22.x/api/typescript.md#type-stripping) for more information.\n         * When mode is `'transform'`, it also transforms TypeScript features to JavaScript,\n         * see [transform TypeScript features](https://nodejs.org/docs/latest-v22.x/api/typescript.md#typescript-features) for more information.\n         * When mode is `'strip'`, source maps are not generated, because locations are preserved.\n         * If `sourceMap` is provided, when mode is `'strip'`, an error will be thrown.\n         *\n         * _WARNING_: The output of this function should not be considered stable across Node.js versions,\n         * due to changes in the TypeScript parser.\n         *\n         * ```js\n         * import { stripTypeScriptTypes } from 'node:module';\n         * const code = 'const a: number = 1;';\n         * const strippedCode = stripTypeScriptTypes(code);\n         * console.log(strippedCode);\n         * // Prints: const a         = 1;\n         * ```\n         *\n         * If `sourceUrl` is provided, it will be used appended as a comment at the end of the output:\n         *\n         * ```js\n         * import { stripTypeScriptTypes } from 'node:module';\n         * const code = 'const a: number = 1;';\n         * const strippedCode = stripTypeScriptTypes(code, { mode: 'strip', sourceUrl: 'source.ts' });\n         * console.log(strippedCode);\n         * // Prints: const a         = 1\\n\\n//# sourceURL=source.ts;\n         * ```\n         *\n         * When `mode` is `'transform'`, the code is transformed to JavaScript:\n         *\n         * ```js\n         * import { stripTypeScriptTypes } from 'node:module';\n         * const code = `\n         *   namespace MathUtil {\n         *     export const add = (a: number, b: number) => a + b;\n         *   }`;\n         * const strippedCode = stripTypeScriptTypes(code, { mode: 'transform', sourceMap: true });\n         * console.log(strippedCode);\n         * // Prints:\n         * // var MathUtil;\n         * // (function(MathUtil) {\n         * //     MathUtil.add = (a, b)=>a + b;\n         * // })(MathUtil || (MathUtil = {}));\n         * // # sourceMappingURL=data:application/json;base64, ...\n         * ```\n         * @since v22.13.0\n         * @param code The code to strip type annotations from.\n         * @returns The code with type annotations stripped.\n         */\n        function stripTypeScriptTypes(code: string, options?: StripTypeScriptTypesOptions): string;\n        /* eslint-enable @definitelytyped/no-unnecessary-generics */\n        /**\n         * The `module.syncBuiltinESMExports()` method updates all the live bindings for\n         * builtin `ES Modules` to match the properties of the `CommonJS` exports. It\n         * does not add or remove exported names from the `ES Modules`.\n         *\n         * ```js\n         * import fs from 'node:fs';\n         * import assert from 'node:assert';\n         * import { syncBuiltinESMExports } from 'node:module';\n         *\n         * fs.readFile = newAPI;\n         *\n         * delete fs.readFileSync;\n         *\n         * function newAPI() {\n         *   // ...\n         * }\n         *\n         * fs.newAPI = newAPI;\n         *\n         * syncBuiltinESMExports();\n         *\n         * import('node:fs').then((esmFS) => {\n         *   // It syncs the existing readFile property with the new value\n         *   assert.strictEqual(esmFS.readFile, newAPI);\n         *   // readFileSync has been deleted from the required fs\n         *   assert.strictEqual('readFileSync' in fs, false);\n         *   // syncBuiltinESMExports() does not remove readFileSync from esmFS\n         *   assert.strictEqual('readFileSync' in esmFS, true);\n         *   // syncBuiltinESMExports() does not add names\n         *   assert.strictEqual(esmFS.newAPI, undefined);\n         * });\n         * ```\n         * @since v12.12.0\n         */\n        function syncBuiltinESMExports(): void;\n        interface ImportAttributes extends NodeJS.Dict<string> {\n            type?: string | undefined;\n        }\n        type ModuleFormat =\n            | \"builtin\"\n            | \"commonjs\"\n            | \"commonjs-typescript\"\n            | \"json\"\n            | \"module\"\n            | \"module-typescript\"\n            | \"wasm\";\n        type ModuleSource = string | ArrayBuffer | NodeJS.TypedArray;\n        /**\n         * The `initialize` hook provides a way to define a custom function that runs in\n         * the hooks thread when the hooks module is initialized. Initialization happens\n         * when the hooks module is registered via {@link register}.\n         *\n         * This hook can receive data from a {@link register} invocation, including\n         * ports and other transferable objects. The return value of `initialize` can be a\n         * `Promise`, in which case it will be awaited before the main application thread\n         * execution resumes.\n         */\n        type InitializeHook<Data = any> = (data: Data) => void | Promise<void>;\n        interface ResolveHookContext {\n            /**\n             * Export conditions of the relevant `package.json`\n             */\n            conditions: string[];\n            /**\n             *  An object whose key-value pairs represent the assertions for the module to import\n             */\n            importAttributes: ImportAttributes;\n            /**\n             * The module importing this one, or undefined if this is the Node.js entry point\n             */\n            parentURL: string | undefined;\n        }\n        interface ResolveFnOutput {\n            /**\n             * A hint to the load hook (it might be ignored); can be an intermediary value.\n             */\n            format?: string | null | undefined;\n            /**\n             * The import attributes to use when caching the module (optional; if excluded the input will be used)\n             */\n            importAttributes?: ImportAttributes | undefined;\n            /**\n             * A signal that this hook intends to terminate the chain of `resolve` hooks.\n             * @default false\n             */\n            shortCircuit?: boolean | undefined;\n            /**\n             * The absolute URL to which this input resolves\n             */\n            url: string;\n        }\n        /**\n         * The `resolve` hook chain is responsible for telling Node.js where to find and\n         * how to cache a given `import` statement or expression, or `require` call. It can\n         * optionally return a format (such as `'module'`) as a hint to the `load` hook. If\n         * a format is specified, the `load` hook is ultimately responsible for providing\n         * the final `format` value (and it is free to ignore the hint provided by\n         * `resolve`); if `resolve` provides a `format`, a custom `load` hook is required\n         * even if only to pass the value to the Node.js default `load` hook.\n         */\n        type ResolveHook = (\n            specifier: string,\n            context: ResolveHookContext,\n            nextResolve: (\n                specifier: string,\n                context?: Partial<ResolveHookContext>,\n            ) => ResolveFnOutput | Promise<ResolveFnOutput>,\n        ) => ResolveFnOutput | Promise<ResolveFnOutput>;\n        type ResolveHookSync = (\n            specifier: string,\n            context: ResolveHookContext,\n            nextResolve: (\n                specifier: string,\n                context?: Partial<ResolveHookContext>,\n            ) => ResolveFnOutput,\n        ) => ResolveFnOutput;\n        interface LoadHookContext {\n            /**\n             * Export conditions of the relevant `package.json`\n             */\n            conditions: string[];\n            /**\n             * The format optionally supplied by the `resolve` hook chain (can be an intermediary value).\n             */\n            format: string | null | undefined;\n            /**\n             *  An object whose key-value pairs represent the assertions for the module to import\n             */\n            importAttributes: ImportAttributes;\n        }\n        interface LoadFnOutput {\n            format: string | null | undefined;\n            /**\n             * A signal that this hook intends to terminate the chain of `resolve` hooks.\n             * @default false\n             */\n            shortCircuit?: boolean | undefined;\n            /**\n             * The source for Node.js to evaluate\n             */\n            source?: ModuleSource | undefined;\n        }\n        /**\n         * The `load` hook provides a way to define a custom method of determining how a\n         * URL should be interpreted, retrieved, and parsed. It is also in charge of\n         * validating the import attributes.\n         */\n        type LoadHook = (\n            url: string,\n            context: LoadHookContext,\n            nextLoad: (\n                url: string,\n                context?: Partial<LoadHookContext>,\n            ) => LoadFnOutput | Promise<LoadFnOutput>,\n        ) => LoadFnOutput | Promise<LoadFnOutput>;\n        type LoadHookSync = (\n            url: string,\n            context: LoadHookContext,\n            nextLoad: (\n                url: string,\n                context?: Partial<LoadHookContext>,\n            ) => LoadFnOutput,\n        ) => LoadFnOutput;\n        /**\n         * `path` is the resolved path for the file for which a corresponding source map\n         * should be fetched.\n         * @since v13.7.0, v12.17.0\n         * @return Returns `module.SourceMap` if a source map is found, `undefined` otherwise.\n         */\n        function findSourceMap(path: string): SourceMap | undefined;\n        interface SourceMapConstructorOptions {\n            /**\n             * @since v21.0.0, v20.5.0\n             */\n            lineLengths?: readonly number[] | undefined;\n        }\n        interface SourceMapPayload {\n            file: string;\n            version: number;\n            sources: string[];\n            sourcesContent: string[];\n            names: string[];\n            mappings: string;\n            sourceRoot: string;\n        }\n        interface SourceMapping {\n            generatedLine: number;\n            generatedColumn: number;\n            originalSource: string;\n            originalLine: number;\n            originalColumn: number;\n        }\n        interface SourceOrigin {\n            /**\n             * The name of the range in the source map, if one was provided\n             */\n            name: string | undefined;\n            /**\n             * The file name of the original source, as reported in the SourceMap\n             */\n            fileName: string;\n            /**\n             * The 1-indexed lineNumber of the corresponding call site in the original source\n             */\n            lineNumber: number;\n            /**\n             * The 1-indexed columnNumber of the corresponding call site in the original source\n             */\n            columnNumber: number;\n        }\n        /**\n         * @since v13.7.0, v12.17.0\n         */\n        class SourceMap {\n            constructor(payload: SourceMapPayload, options?: SourceMapConstructorOptions);\n            /**\n             * Getter for the payload used to construct the `SourceMap` instance.\n             */\n            readonly payload: SourceMapPayload;\n            /**\n             * Given a line offset and column offset in the generated source\n             * file, returns an object representing the SourceMap range in the\n             * original file if found, or an empty object if not.\n             *\n             * The object returned contains the following keys:\n             *\n             * The returned value represents the raw range as it appears in the\n             * SourceMap, based on zero-indexed offsets, _not_ 1-indexed line and\n             * column numbers as they appear in Error messages and CallSite\n             * objects.\n             *\n             * To get the corresponding 1-indexed line and column numbers from a\n             * lineNumber and columnNumber as they are reported by Error stacks\n             * and CallSite objects, use `sourceMap.findOrigin(lineNumber, columnNumber)`\n             * @param lineOffset The zero-indexed line number offset in the generated source\n             * @param columnOffset The zero-indexed column number offset in the generated source\n             */\n            findEntry(lineOffset: number, columnOffset: number): SourceMapping | {};\n            /**\n             * Given a 1-indexed `lineNumber` and `columnNumber` from a call site in the generated source,\n             * find the corresponding call site location in the original source.\n             *\n             * If the `lineNumber` and `columnNumber` provided are not found in any source map,\n             * then an empty object is returned.\n             * @param lineNumber The 1-indexed line number of the call site in the generated source\n             * @param columnNumber The 1-indexed column number of the call site in the generated source\n             */\n            findOrigin(lineNumber: number, columnNumber: number): SourceOrigin | {};\n        }\n        function runMain(main?: string): void;\n        function wrap(script: string): string;\n    }\n    global {\n        interface ImportMeta {\n            /**\n             * The directory name of the current module. This is the same as the `path.dirname()` of the `import.meta.filename`.\n             * **Caveat:** only present on `file:` modules.\n             */\n            dirname: string;\n            /**\n             * The full absolute path and filename of the current module, with symlinks resolved.\n             * This is the same as the `url.fileURLToPath()` of the `import.meta.url`.\n             * **Caveat:** only local modules support this property. Modules not using the `file:` protocol will not provide it.\n             */\n            filename: string;\n            /**\n             * The absolute `file:` URL of the module.\n             */\n            url: string;\n            /**\n             * Provides a module-relative resolution function scoped to each module, returning\n             * the URL string.\n             *\n             * Second `parent` parameter is only used when the `--experimental-import-meta-resolve`\n             * command flag enabled.\n             *\n             * @since v20.6.0\n             *\n             * @param specifier The module specifier to resolve relative to `parent`.\n             * @param parent The absolute parent module URL to resolve from.\n             * @returns The absolute (`file:`) URL string for the resolved module.\n             */\n            resolve(specifier: string, parent?: string | URL | undefined): string;\n        }\n        namespace NodeJS {\n            interface Module {\n                /**\n                 * The module objects required for the first time by this one.\n                 * @since v0.1.16\n                 */\n                children: Module[];\n                /**\n                 * The `module.exports` object is created by the `Module` system. Sometimes this is\n                 * not acceptable; many want their module to be an instance of some class. To do\n                 * this, assign the desired export object to `module.exports`.\n                 * @since v0.1.16\n                 */\n                exports: any;\n                /**\n                 * The fully resolved filename of the module.\n                 * @since v0.1.16\n                 */\n                filename: string;\n                /**\n                 * The identifier for the module. Typically this is the fully resolved\n                 * filename.\n                 * @since v0.1.16\n                 */\n                id: string;\n                /**\n                 * `true` if the module is running during the Node.js preload\n                 * phase.\n                 * @since v15.4.0, v14.17.0\n                 */\n                isPreloading: boolean;\n                /**\n                 * Whether or not the module is done loading, or is in the process of\n                 * loading.\n                 * @since v0.1.16\n                 */\n                loaded: boolean;\n                /**\n                 * The module that first required this one, or `null` if the current module is the\n                 * entry point of the current process, or `undefined` if the module was loaded by\n                 * something that is not a CommonJS module (e.g. REPL or `import`).\n                 * @since v0.1.16\n                 * @deprecated Please use `require.main` and `module.children` instead.\n                 */\n                parent: Module | null | undefined;\n                /**\n                 * The directory name of the module. This is usually the same as the\n                 * `path.dirname()` of the `module.id`.\n                 * @since v11.14.0\n                 */\n                path: string;\n                /**\n                 * The search paths for the module.\n                 * @since v0.4.0\n                 */\n                paths: string[];\n                /**\n                 * The `module.require()` method provides a way to load a module as if\n                 * `require()` was called from the original module.\n                 * @since v0.5.1\n                 */\n                require(id: string): any;\n            }\n            interface Require {\n                /**\n                 * Used to import modules, `JSON`, and local files.\n                 * @since v0.1.13\n                 */\n                (id: string): any;\n                /**\n                 * Modules are cached in this object when they are required. By deleting a key\n                 * value from this object, the next `require` will reload the module.\n                 * This does not apply to\n                 * [native addons](https://nodejs.org/docs/latest-v22.x/api/addons.html),\n                 * for which reloading will result in an error.\n                 * @since v0.3.0\n                 */\n                cache: Dict<Module>;\n                /**\n                 * Instruct `require` on how to handle certain file extensions.\n                 * @since v0.3.0\n                 * @deprecated\n                 */\n                extensions: RequireExtensions;\n                /**\n                 * The `Module` object representing the entry script loaded when the Node.js\n                 * process launched, or `undefined` if the entry point of the program is not a\n                 * CommonJS module.\n                 * @since v0.1.17\n                 */\n                main: Module | undefined;\n                /**\n                 * @since v0.3.0\n                 */\n                resolve: RequireResolve;\n            }\n            /** @deprecated */\n            interface RequireExtensions extends Dict<(module: Module, filename: string) => any> {\n                \".js\": (module: Module, filename: string) => any;\n                \".json\": (module: Module, filename: string) => any;\n                \".node\": (module: Module, filename: string) => any;\n            }\n            interface RequireResolveOptions {\n                /**\n                 * Paths to resolve module location from. If present, these\n                 * paths are used instead of the default resolution paths, with the exception\n                 * of\n                 * [GLOBAL\\_FOLDERS](https://nodejs.org/docs/latest-v22.x/api/modules.html#loading-from-the-global-folders)\n                 * like `$HOME/.node_modules`, which are\n                 * always included. Each of these paths is used as a starting point for\n                 * the module resolution algorithm, meaning that the `node_modules` hierarchy\n                 * is checked from this location.\n                 * @since v8.9.0\n                 */\n                paths?: string[] | undefined;\n            }\n            interface RequireResolve {\n                /**\n                 * Use the internal `require()` machinery to look up the location of a module,\n                 * but rather than loading the module, just return the resolved filename.\n                 *\n                 * If the module can not be found, a `MODULE_NOT_FOUND` error is thrown.\n                 * @since v0.3.0\n                 * @param request The module path to resolve.\n                 */\n                (request: string, options?: RequireResolveOptions): string;\n                /**\n                 * Returns an array containing the paths searched during resolution of `request` or\n                 * `null` if the `request` string references a core module, for example `http` or\n                 * `fs`.\n                 * @since v8.9.0\n                 * @param request The module path whose lookup paths are being retrieved.\n                 */\n                paths(request: string): string[] | null;\n            }\n        }\n        /**\n         * The directory name of the current module. This is the same as the\n         * `path.dirname()` of the `__filename`.\n         * @since v0.1.27\n         */\n        var __dirname: string;\n        /**\n         * The file name of the current module. This is the current module file's absolute\n         * path with symlinks resolved.\n         *\n         * For a main program this is not necessarily the same as the file name used in the\n         * command line.\n         * @since v0.0.1\n         */\n        var __filename: string;\n        /**\n         * The `exports` variable is available within a module's file-level scope, and is\n         * assigned the value of `module.exports` before the module is evaluated.\n         * @since v0.1.16\n         */\n        var exports: NodeJS.Module[\"exports\"];\n        /**\n         * A reference to the current module.\n         * @since v0.1.16\n         */\n        var module: NodeJS.Module;\n        /**\n         * @since v0.1.13\n         */\n        var require: NodeJS.Require;\n        // Global-scope aliases for backwards compatibility with @types/node <13.0.x\n        /** @deprecated Use `NodeJS.Module` instead. */\n        interface NodeModule extends NodeJS.Module {}\n        /** @deprecated Use `NodeJS.Require` instead. */\n        interface NodeRequire extends NodeJS.Require {}\n        /** @deprecated Use `NodeJS.RequireResolve` instead. */\n        interface RequireResolve extends NodeJS.RequireResolve {}\n    }\n    export = Module;\n}\ndeclare module \"node:module\" {\n    import module = require(\"module\");\n    export = module;\n}\n",
  '@types/node/net.d.ts':
    '/**\n * > Stability: 2 - Stable\n *\n * The `node:net` module provides an asynchronous network API for creating stream-based\n * TCP or `IPC` servers ({@link createServer}) and clients\n * ({@link createConnection}).\n *\n * It can be accessed using:\n *\n * ```js\n * import net from \'node:net\';\n * ```\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/net.js)\n */\ndeclare module "net" {\n    import * as stream from "node:stream";\n    import { Abortable, EventEmitter } from "node:events";\n    import * as dns from "node:dns";\n    type LookupFunction = (\n        hostname: string,\n        options: dns.LookupOptions,\n        callback: (err: NodeJS.ErrnoException | null, address: string | dns.LookupAddress[], family?: number) => void,\n    ) => void;\n    interface AddressInfo {\n        address: string;\n        family: string;\n        port: number;\n    }\n    interface SocketConstructorOpts {\n        fd?: number | undefined;\n        allowHalfOpen?: boolean | undefined;\n        onread?: OnReadOpts | undefined;\n        readable?: boolean | undefined;\n        writable?: boolean | undefined;\n        signal?: AbortSignal;\n    }\n    interface OnReadOpts {\n        buffer: Uint8Array | (() => Uint8Array);\n        /**\n         * This function is called for every chunk of incoming data.\n         * Two arguments are passed to it: the number of bytes written to `buffer` and a reference to `buffer`.\n         * Return `false` from this function to implicitly `pause()` the socket.\n         */\n        callback(bytesWritten: number, buffer: Uint8Array): boolean;\n    }\n    // TODO: remove empty ConnectOpts placeholder at next major @types/node version.\n    /** @deprecated */\n    interface ConnectOpts {}\n    interface TcpSocketConnectOpts {\n        port: number;\n        host?: string | undefined;\n        localAddress?: string | undefined;\n        localPort?: number | undefined;\n        hints?: number | undefined;\n        family?: number | undefined;\n        lookup?: LookupFunction | undefined;\n        noDelay?: boolean | undefined;\n        keepAlive?: boolean | undefined;\n        keepAliveInitialDelay?: number | undefined;\n        /**\n         * @since v18.13.0\n         */\n        autoSelectFamily?: boolean | undefined;\n        /**\n         * @since v18.13.0\n         */\n        autoSelectFamilyAttemptTimeout?: number | undefined;\n        blockList?: BlockList | undefined;\n    }\n    interface IpcSocketConnectOpts {\n        path: string;\n    }\n    type SocketConnectOpts = TcpSocketConnectOpts | IpcSocketConnectOpts;\n    type SocketReadyState = "opening" | "open" | "readOnly" | "writeOnly" | "closed";\n    /**\n     * This class is an abstraction of a TCP socket or a streaming `IPC` endpoint\n     * (uses named pipes on Windows, and Unix domain sockets otherwise). It is also\n     * an `EventEmitter`.\n     *\n     * A `net.Socket` can be created by the user and used directly to interact with\n     * a server. For example, it is returned by {@link createConnection},\n     * so the user can use it to talk to the server.\n     *\n     * It can also be created by Node.js and passed to the user when a connection\n     * is received. For example, it is passed to the listeners of a `\'connection\'` event emitted on a {@link Server}, so the user can use\n     * it to interact with the client.\n     * @since v0.3.4\n     */\n    class Socket extends stream.Duplex {\n        constructor(options?: SocketConstructorOpts);\n        /**\n         * Destroys the socket after all data is written. If the `finish` event was already emitted the socket is destroyed immediately.\n         * If the socket is still writable it implicitly calls `socket.end()`.\n         * @since v0.3.4\n         */\n        destroySoon(): void;\n        /**\n         * Sends data on the socket. The second parameter specifies the encoding in the\n         * case of a string. It defaults to UTF8 encoding.\n         *\n         * Returns `true` if the entire data was flushed successfully to the kernel\n         * buffer. Returns `false` if all or part of the data was queued in user memory.`\'drain\'` will be emitted when the buffer is again free.\n         *\n         * The optional `callback` parameter will be executed when the data is finally\n         * written out, which may not be immediately.\n         *\n         * See `Writable` stream `write()` method for more\n         * information.\n         * @since v0.1.90\n         * @param [encoding=\'utf8\'] Only used when data is `string`.\n         */\n        write(buffer: Uint8Array | string, cb?: (err?: Error | null) => void): boolean;\n        write(str: Uint8Array | string, encoding?: BufferEncoding, cb?: (err?: Error | null) => void): boolean;\n        /**\n         * Initiate a connection on a given socket.\n         *\n         * Possible signatures:\n         *\n         * * `socket.connect(options[, connectListener])`\n         * * `socket.connect(path[, connectListener])` for `IPC` connections.\n         * * `socket.connect(port[, host][, connectListener])` for TCP connections.\n         * * Returns: `net.Socket` The socket itself.\n         *\n         * This function is asynchronous. When the connection is established, the `\'connect\'` event will be emitted. If there is a problem connecting,\n         * instead of a `\'connect\'` event, an `\'error\'` event will be emitted with\n         * the error passed to the `\'error\'` listener.\n         * The last parameter `connectListener`, if supplied, will be added as a listener\n         * for the `\'connect\'` event **once**.\n         *\n         * This function should only be used for reconnecting a socket after`\'close\'` has been emitted or otherwise it may lead to undefined\n         * behavior.\n         */\n        connect(options: SocketConnectOpts, connectionListener?: () => void): this;\n        connect(port: number, host: string, connectionListener?: () => void): this;\n        connect(port: number, connectionListener?: () => void): this;\n        connect(path: string, connectionListener?: () => void): this;\n        /**\n         * Set the encoding for the socket as a `Readable Stream`. See `readable.setEncoding()` for more information.\n         * @since v0.1.90\n         * @return The socket itself.\n         */\n        setEncoding(encoding?: BufferEncoding): this;\n        /**\n         * Pauses the reading of data. That is, `\'data\'` events will not be emitted.\n         * Useful to throttle back an upload.\n         * @return The socket itself.\n         */\n        pause(): this;\n        /**\n         * Close the TCP connection by sending an RST packet and destroy the stream.\n         * If this TCP socket is in connecting status, it will send an RST packet and destroy this TCP socket once it is connected.\n         * Otherwise, it will call `socket.destroy` with an `ERR_SOCKET_CLOSED` Error.\n         * If this is not a TCP socket (for example, a pipe), calling this method will immediately throw an `ERR_INVALID_HANDLE_TYPE` Error.\n         * @since v18.3.0, v16.17.0\n         */\n        resetAndDestroy(): this;\n        /**\n         * Resumes reading after a call to `socket.pause()`.\n         * @return The socket itself.\n         */\n        resume(): this;\n        /**\n         * Sets the socket to timeout after `timeout` milliseconds of inactivity on\n         * the socket. By default `net.Socket` do not have a timeout.\n         *\n         * When an idle timeout is triggered the socket will receive a `\'timeout\'` event but the connection will not be severed. The user must manually call `socket.end()` or `socket.destroy()` to\n         * end the connection.\n         *\n         * ```js\n         * socket.setTimeout(3000);\n         * socket.on(\'timeout\', () => {\n         *   console.log(\'socket timeout\');\n         *   socket.end();\n         * });\n         * ```\n         *\n         * If `timeout` is 0, then the existing idle timeout is disabled.\n         *\n         * The optional `callback` parameter will be added as a one-time listener for the `\'timeout\'` event.\n         * @since v0.1.90\n         * @return The socket itself.\n         */\n        setTimeout(timeout: number, callback?: () => void): this;\n        /**\n         * Enable/disable the use of Nagle\'s algorithm.\n         *\n         * When a TCP connection is created, it will have Nagle\'s algorithm enabled.\n         *\n         * Nagle\'s algorithm delays data before it is sent via the network. It attempts\n         * to optimize throughput at the expense of latency.\n         *\n         * Passing `true` for `noDelay` or not passing an argument will disable Nagle\'s\n         * algorithm for the socket. Passing `false` for `noDelay` will enable Nagle\'s\n         * algorithm.\n         * @since v0.1.90\n         * @param [noDelay=true]\n         * @return The socket itself.\n         */\n        setNoDelay(noDelay?: boolean): this;\n        /**\n         * Enable/disable keep-alive functionality, and optionally set the initial\n         * delay before the first keepalive probe is sent on an idle socket.\n         *\n         * Set `initialDelay` (in milliseconds) to set the delay between the last\n         * data packet received and the first keepalive probe. Setting `0` for`initialDelay` will leave the value unchanged from the default\n         * (or previous) setting.\n         *\n         * Enabling the keep-alive functionality will set the following socket options:\n         *\n         * * `SO_KEEPALIVE=1`\n         * * `TCP_KEEPIDLE=initialDelay`\n         * * `TCP_KEEPCNT=10`\n         * * `TCP_KEEPINTVL=1`\n         * @since v0.1.92\n         * @param [enable=false]\n         * @param [initialDelay=0]\n         * @return The socket itself.\n         */\n        setKeepAlive(enable?: boolean, initialDelay?: number): this;\n        /**\n         * Returns the bound `address`, the address `family` name and `port` of the\n         * socket as reported by the operating system:`{ port: 12346, family: \'IPv4\', address: \'127.0.0.1\' }`\n         * @since v0.1.90\n         */\n        address(): AddressInfo | {};\n        /**\n         * Calling `unref()` on a socket will allow the program to exit if this is the only\n         * active socket in the event system. If the socket is already `unref`ed calling`unref()` again will have no effect.\n         * @since v0.9.1\n         * @return The socket itself.\n         */\n        unref(): this;\n        /**\n         * Opposite of `unref()`, calling `ref()` on a previously `unref`ed socket will _not_ let the program exit if it\'s the only socket left (the default behavior).\n         * If the socket is `ref`ed calling `ref` again will have no effect.\n         * @since v0.9.1\n         * @return The socket itself.\n         */\n        ref(): this;\n        /**\n         * This property is only present if the family autoselection algorithm is enabled in `socket.connect(options)`\n         * and it is an array of the addresses that have been attempted.\n         *\n         * Each address is a string in the form of `$IP:$PORT`.\n         * If the connection was successful, then the last address is the one that the socket is currently connected to.\n         * @since v19.4.0\n         */\n        readonly autoSelectFamilyAttemptedAddresses: string[];\n        /**\n         * This property shows the number of characters buffered for writing. The buffer\n         * may contain strings whose length after encoding is not yet known. So this number\n         * is only an approximation of the number of bytes in the buffer.\n         *\n         * `net.Socket` has the property that `socket.write()` always works. This is to\n         * help users get up and running quickly. The computer cannot always keep up\n         * with the amount of data that is written to a socket. The network connection\n         * simply might be too slow. Node.js will internally queue up the data written to a\n         * socket and send it out over the wire when it is possible.\n         *\n         * The consequence of this internal buffering is that memory may grow.\n         * Users who experience large or growing `bufferSize` should attempt to\n         * "throttle" the data flows in their program with `socket.pause()` and `socket.resume()`.\n         * @since v0.3.8\n         * @deprecated Since v14.6.0 - Use `writableLength` instead.\n         */\n        readonly bufferSize: number;\n        /**\n         * The amount of received bytes.\n         * @since v0.5.3\n         */\n        readonly bytesRead: number;\n        /**\n         * The amount of bytes sent.\n         * @since v0.5.3\n         */\n        readonly bytesWritten: number;\n        /**\n         * If `true`, `socket.connect(options[, connectListener])` was\n         * called and has not yet finished. It will stay `true` until the socket becomes\n         * connected, then it is set to `false` and the `\'connect\'` event is emitted. Note\n         * that the `socket.connect(options[, connectListener])` callback is a listener for the `\'connect\'` event.\n         * @since v6.1.0\n         */\n        readonly connecting: boolean;\n        /**\n         * This is `true` if the socket is not connected yet, either because `.connect()`has not yet been called or because it is still in the process of connecting\n         * (see `socket.connecting`).\n         * @since v11.2.0, v10.16.0\n         */\n        readonly pending: boolean;\n        /**\n         * See `writable.destroyed` for further details.\n         */\n        readonly destroyed: boolean;\n        /**\n         * The string representation of the local IP address the remote client is\n         * connecting on. For example, in a server listening on `\'0.0.0.0\'`, if a client\n         * connects on `\'192.168.1.1\'`, the value of `socket.localAddress` would be`\'192.168.1.1\'`.\n         * @since v0.9.6\n         */\n        readonly localAddress?: string;\n        /**\n         * The numeric representation of the local port. For example, `80` or `21`.\n         * @since v0.9.6\n         */\n        readonly localPort?: number;\n        /**\n         * The string representation of the local IP family. `\'IPv4\'` or `\'IPv6\'`.\n         * @since v18.8.0, v16.18.0\n         */\n        readonly localFamily?: string;\n        /**\n         * This property represents the state of the connection as a string.\n         *\n         * * If the stream is connecting `socket.readyState` is `opening`.\n         * * If the stream is readable and writable, it is `open`.\n         * * If the stream is readable and not writable, it is `readOnly`.\n         * * If the stream is not readable and writable, it is `writeOnly`.\n         * @since v0.5.0\n         */\n        readonly readyState: SocketReadyState;\n        /**\n         * The string representation of the remote IP address. For example,`\'74.125.127.100\'` or `\'2001:4860:a005::68\'`. Value may be `undefined` if\n         * the socket is destroyed (for example, if the client disconnected).\n         * @since v0.5.10\n         */\n        readonly remoteAddress?: string | undefined;\n        /**\n         * The string representation of the remote IP family. `\'IPv4\'` or `\'IPv6\'`. Value may be `undefined` if\n         * the socket is destroyed (for example, if the client disconnected).\n         * @since v0.11.14\n         */\n        readonly remoteFamily?: string | undefined;\n        /**\n         * The numeric representation of the remote port. For example, `80` or `21`. Value may be `undefined` if\n         * the socket is destroyed (for example, if the client disconnected).\n         * @since v0.5.10\n         */\n        readonly remotePort?: number | undefined;\n        /**\n         * The socket timeout in milliseconds as set by `socket.setTimeout()`.\n         * It is `undefined` if a timeout has not been set.\n         * @since v10.7.0\n         */\n        readonly timeout?: number | undefined;\n        /**\n         * Half-closes the socket. i.e., it sends a FIN packet. It is possible the\n         * server will still send some data.\n         *\n         * See `writable.end()` for further details.\n         * @since v0.1.90\n         * @param [encoding=\'utf8\'] Only used when data is `string`.\n         * @param callback Optional callback for when the socket is finished.\n         * @return The socket itself.\n         */\n        end(callback?: () => void): this;\n        end(buffer: Uint8Array | string, callback?: () => void): this;\n        end(str: Uint8Array | string, encoding?: BufferEncoding, callback?: () => void): this;\n        /**\n         * events.EventEmitter\n         *   1. close\n         *   2. connect\n         *   3. connectionAttempt\n         *   4. connectionAttemptFailed\n         *   5. connectionAttemptTimeout\n         *   6. data\n         *   7. drain\n         *   8. end\n         *   9. error\n         *   10. lookup\n         *   11. ready\n         *   12. timeout\n         */\n        addListener(event: string, listener: (...args: any[]) => void): this;\n        addListener(event: "close", listener: (hadError: boolean) => void): this;\n        addListener(event: "connect", listener: () => void): this;\n        addListener(event: "connectionAttempt", listener: (ip: string, port: number, family: number) => void): this;\n        addListener(\n            event: "connectionAttemptFailed",\n            listener: (ip: string, port: number, family: number, error: Error) => void,\n        ): this;\n        addListener(\n            event: "connectionAttemptTimeout",\n            listener: (ip: string, port: number, family: number) => void,\n        ): this;\n        addListener(event: "data", listener: (data: Buffer) => void): this;\n        addListener(event: "drain", listener: () => void): this;\n        addListener(event: "end", listener: () => void): this;\n        addListener(event: "error", listener: (err: Error) => void): this;\n        addListener(\n            event: "lookup",\n            listener: (err: Error, address: string, family: string | number, host: string) => void,\n        ): this;\n        addListener(event: "ready", listener: () => void): this;\n        addListener(event: "timeout", listener: () => void): this;\n        emit(event: string | symbol, ...args: any[]): boolean;\n        emit(event: "close", hadError: boolean): boolean;\n        emit(event: "connect"): boolean;\n        emit(event: "connectionAttempt", ip: string, port: number, family: number): boolean;\n        emit(event: "connectionAttemptFailed", ip: string, port: number, family: number, error: Error): boolean;\n        emit(event: "connectionAttemptTimeout", ip: string, port: number, family: number): boolean;\n        emit(event: "data", data: Buffer): boolean;\n        emit(event: "drain"): boolean;\n        emit(event: "end"): boolean;\n        emit(event: "error", err: Error): boolean;\n        emit(event: "lookup", err: Error, address: string, family: string | number, host: string): boolean;\n        emit(event: "ready"): boolean;\n        emit(event: "timeout"): boolean;\n        on(event: string, listener: (...args: any[]) => void): this;\n        on(event: "close", listener: (hadError: boolean) => void): this;\n        on(event: "connect", listener: () => void): this;\n        on(event: "connectionAttempt", listener: (ip: string, port: number, family: number) => void): this;\n        on(\n            event: "connectionAttemptFailed",\n            listener: (ip: string, port: number, family: number, error: Error) => void,\n        ): this;\n        on(event: "connectionAttemptTimeout", listener: (ip: string, port: number, family: number) => void): this;\n        on(event: "data", listener: (data: Buffer) => void): this;\n        on(event: "drain", listener: () => void): this;\n        on(event: "end", listener: () => void): this;\n        on(event: "error", listener: (err: Error) => void): this;\n        on(\n            event: "lookup",\n            listener: (err: Error, address: string, family: string | number, host: string) => void,\n        ): this;\n        on(event: "ready", listener: () => void): this;\n        on(event: "timeout", listener: () => void): this;\n        once(event: string, listener: (...args: any[]) => void): this;\n        once(event: "close", listener: (hadError: boolean) => void): this;\n        once(event: "connectionAttempt", listener: (ip: string, port: number, family: number) => void): this;\n        once(\n            event: "connectionAttemptFailed",\n            listener: (ip: string, port: number, family: number, error: Error) => void,\n        ): this;\n        once(event: "connectionAttemptTimeout", listener: (ip: string, port: number, family: number) => void): this;\n        once(event: "connect", listener: () => void): this;\n        once(event: "data", listener: (data: Buffer) => void): this;\n        once(event: "drain", listener: () => void): this;\n        once(event: "end", listener: () => void): this;\n        once(event: "error", listener: (err: Error) => void): this;\n        once(\n            event: "lookup",\n            listener: (err: Error, address: string, family: string | number, host: string) => void,\n        ): this;\n        once(event: "ready", listener: () => void): this;\n        once(event: "timeout", listener: () => void): this;\n        prependListener(event: string, listener: (...args: any[]) => void): this;\n        prependListener(event: "close", listener: (hadError: boolean) => void): this;\n        prependListener(event: "connect", listener: () => void): this;\n        prependListener(event: "connectionAttempt", listener: (ip: string, port: number, family: number) => void): this;\n        prependListener(\n            event: "connectionAttemptFailed",\n            listener: (ip: string, port: number, family: number, error: Error) => void,\n        ): this;\n        prependListener(\n            event: "connectionAttemptTimeout",\n            listener: (ip: string, port: number, family: number) => void,\n        ): this;\n        prependListener(event: "data", listener: (data: Buffer) => void): this;\n        prependListener(event: "drain", listener: () => void): this;\n        prependListener(event: "end", listener: () => void): this;\n        prependListener(event: "error", listener: (err: Error) => void): this;\n        prependListener(\n            event: "lookup",\n            listener: (err: Error, address: string, family: string | number, host: string) => void,\n        ): this;\n        prependListener(event: "ready", listener: () => void): this;\n        prependListener(event: "timeout", listener: () => void): this;\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\n        prependOnceListener(event: "close", listener: (hadError: boolean) => void): this;\n        prependOnceListener(event: "connect", listener: () => void): this;\n        prependOnceListener(\n            event: "connectionAttempt",\n            listener: (ip: string, port: number, family: number) => void,\n        ): this;\n        prependOnceListener(\n            event: "connectionAttemptFailed",\n            listener: (ip: string, port: number, family: number, error: Error) => void,\n        ): this;\n        prependOnceListener(\n            event: "connectionAttemptTimeout",\n            listener: (ip: string, port: number, family: number) => void,\n        ): this;\n        prependOnceListener(event: "data", listener: (data: Buffer) => void): this;\n        prependOnceListener(event: "drain", listener: () => void): this;\n        prependOnceListener(event: "end", listener: () => void): this;\n        prependOnceListener(event: "error", listener: (err: Error) => void): this;\n        prependOnceListener(\n            event: "lookup",\n            listener: (err: Error, address: string, family: string | number, host: string) => void,\n        ): this;\n        prependOnceListener(event: "ready", listener: () => void): this;\n        prependOnceListener(event: "timeout", listener: () => void): this;\n    }\n    interface ListenOptions extends Abortable {\n        backlog?: number | undefined;\n        exclusive?: boolean | undefined;\n        host?: string | undefined;\n        /**\n         * @default false\n         */\n        ipv6Only?: boolean | undefined;\n        reusePort?: boolean | undefined;\n        path?: string | undefined;\n        port?: number | undefined;\n        readableAll?: boolean | undefined;\n        writableAll?: boolean | undefined;\n    }\n    interface ServerOpts {\n        /**\n         * Indicates whether half-opened TCP connections are allowed.\n         * @default false\n         */\n        allowHalfOpen?: boolean | undefined;\n        /**\n         * Indicates whether the socket should be paused on incoming connections.\n         * @default false\n         */\n        pauseOnConnect?: boolean | undefined;\n        /**\n         * If set to `true`, it disables the use of Nagle\'s algorithm immediately after a new incoming connection is received.\n         * @default false\n         * @since v16.5.0\n         */\n        noDelay?: boolean | undefined;\n        /**\n         * If set to `true`, it enables keep-alive functionality on the socket immediately after a new incoming connection is received,\n         * similarly on what is done in `socket.setKeepAlive([enable][, initialDelay])`.\n         * @default false\n         * @since v16.5.0\n         */\n        keepAlive?: boolean | undefined;\n        /**\n         * If set to a positive number, it sets the initial delay before the first keepalive probe is sent on an idle socket.\n         * @default 0\n         * @since v16.5.0\n         */\n        keepAliveInitialDelay?: number | undefined;\n        /**\n         * Optionally overrides all `net.Socket`s\' `readableHighWaterMark` and `writableHighWaterMark`.\n         * @default See [stream.getDefaultHighWaterMark()](https://nodejs.org/docs/latest-v22.x/api/stream.html#streamgetdefaulthighwatermarkobjectmode).\n         * @since v18.17.0, v20.1.0\n         */\n        highWaterMark?: number | undefined;\n        /**\n         * `blockList` can be used for disabling inbound\n         * access to specific IP addresses, IP ranges, or IP subnets. This does not\n         * work if the server is behind a reverse proxy, NAT, etc. because the address\n         * checked against the block list is the address of the proxy, or the one\n         * specified by the NAT.\n         * @since v22.13.0\n         */\n        blockList?: BlockList | undefined;\n    }\n    interface DropArgument {\n        localAddress?: string;\n        localPort?: number;\n        localFamily?: string;\n        remoteAddress?: string;\n        remotePort?: number;\n        remoteFamily?: string;\n    }\n    /**\n     * This class is used to create a TCP or `IPC` server.\n     * @since v0.1.90\n     */\n    class Server extends EventEmitter {\n        constructor(connectionListener?: (socket: Socket) => void);\n        constructor(options?: ServerOpts, connectionListener?: (socket: Socket) => void);\n        /**\n         * Start a server listening for connections. A `net.Server` can be a TCP or\n         * an `IPC` server depending on what it listens to.\n         *\n         * Possible signatures:\n         *\n         * * `server.listen(handle[, backlog][, callback])`\n         * * `server.listen(options[, callback])`\n         * * `server.listen(path[, backlog][, callback])` for `IPC` servers\n         * * `server.listen([port[, host[, backlog]]][, callback])` for TCP servers\n         *\n         * This function is asynchronous. When the server starts listening, the `\'listening\'` event will be emitted. The last parameter `callback`will be added as a listener for the `\'listening\'`\n         * event.\n         *\n         * All `listen()` methods can take a `backlog` parameter to specify the maximum\n         * length of the queue of pending connections. The actual length will be determined\n         * by the OS through sysctl settings such as `tcp_max_syn_backlog` and `somaxconn` on Linux. The default value of this parameter is 511 (not 512).\n         *\n         * All {@link Socket} are set to `SO_REUSEADDR` (see [`socket(7)`](https://man7.org/linux/man-pages/man7/socket.7.html) for\n         * details).\n         *\n         * The `server.listen()` method can be called again if and only if there was an\n         * error during the first `server.listen()` call or `server.close()` has been\n         * called. Otherwise, an `ERR_SERVER_ALREADY_LISTEN` error will be thrown.\n         *\n         * One of the most common errors raised when listening is `EADDRINUSE`.\n         * This happens when another server is already listening on the requested`port`/`path`/`handle`. One way to handle this would be to retry\n         * after a certain amount of time:\n         *\n         * ```js\n         * server.on(\'error\', (e) => {\n         *   if (e.code === \'EADDRINUSE\') {\n         *     console.error(\'Address in use, retrying...\');\n         *     setTimeout(() => {\n         *       server.close();\n         *       server.listen(PORT, HOST);\n         *     }, 1000);\n         *   }\n         * });\n         * ```\n         */\n        listen(port?: number, hostname?: string, backlog?: number, listeningListener?: () => void): this;\n        listen(port?: number, hostname?: string, listeningListener?: () => void): this;\n        listen(port?: number, backlog?: number, listeningListener?: () => void): this;\n        listen(port?: number, listeningListener?: () => void): this;\n        listen(path: string, backlog?: number, listeningListener?: () => void): this;\n        listen(path: string, listeningListener?: () => void): this;\n        listen(options: ListenOptions, listeningListener?: () => void): this;\n        listen(handle: any, backlog?: number, listeningListener?: () => void): this;\n        listen(handle: any, listeningListener?: () => void): this;\n        /**\n         * Stops the server from accepting new connections and keeps existing\n         * connections. This function is asynchronous, the server is finally closed\n         * when all connections are ended and the server emits a `\'close\'` event.\n         * The optional `callback` will be called once the `\'close\'` event occurs. Unlike\n         * that event, it will be called with an `Error` as its only argument if the server\n         * was not open when it was closed.\n         * @since v0.1.90\n         * @param callback Called when the server is closed.\n         */\n        close(callback?: (err?: Error) => void): this;\n        /**\n         * Returns the bound `address`, the address `family` name, and `port` of the server\n         * as reported by the operating system if listening on an IP socket\n         * (useful to find which port was assigned when getting an OS-assigned address):`{ port: 12346, family: \'IPv4\', address: \'127.0.0.1\' }`.\n         *\n         * For a server listening on a pipe or Unix domain socket, the name is returned\n         * as a string.\n         *\n         * ```js\n         * const server = net.createServer((socket) => {\n         *   socket.end(\'goodbye\\n\');\n         * }).on(\'error\', (err) => {\n         *   // Handle errors here.\n         *   throw err;\n         * });\n         *\n         * // Grab an arbitrary unused port.\n         * server.listen(() => {\n         *   console.log(\'opened server on\', server.address());\n         * });\n         * ```\n         *\n         * `server.address()` returns `null` before the `\'listening\'` event has been\n         * emitted or after calling `server.close()`.\n         * @since v0.1.90\n         */\n        address(): AddressInfo | string | null;\n        /**\n         * Asynchronously get the number of concurrent connections on the server. Works\n         * when sockets were sent to forks.\n         *\n         * Callback should take two arguments `err` and `count`.\n         * @since v0.9.7\n         */\n        getConnections(cb: (error: Error | null, count: number) => void): this;\n        /**\n         * Opposite of `unref()`, calling `ref()` on a previously `unref`ed server will _not_ let the program exit if it\'s the only server left (the default behavior).\n         * If the server is `ref`ed calling `ref()` again will have no effect.\n         * @since v0.9.1\n         */\n        ref(): this;\n        /**\n         * Calling `unref()` on a server will allow the program to exit if this is the only\n         * active server in the event system. If the server is already `unref`ed calling`unref()` again will have no effect.\n         * @since v0.9.1\n         */\n        unref(): this;\n        /**\n         * Set this property to reject connections when the server\'s connection count gets\n         * high.\n         *\n         * It is not recommended to use this option once a socket has been sent to a child\n         * with `child_process.fork()`.\n         * @since v0.2.0\n         */\n        maxConnections: number;\n        connections: number;\n        /**\n         * Indicates whether or not the server is listening for connections.\n         * @since v5.7.0\n         */\n        readonly listening: boolean;\n        /**\n         * events.EventEmitter\n         *   1. close\n         *   2. connection\n         *   3. error\n         *   4. listening\n         *   5. drop\n         */\n        addListener(event: string, listener: (...args: any[]) => void): this;\n        addListener(event: "close", listener: () => void): this;\n        addListener(event: "connection", listener: (socket: Socket) => void): this;\n        addListener(event: "error", listener: (err: Error) => void): this;\n        addListener(event: "listening", listener: () => void): this;\n        addListener(event: "drop", listener: (data?: DropArgument) => void): this;\n        emit(event: string | symbol, ...args: any[]): boolean;\n        emit(event: "close"): boolean;\n        emit(event: "connection", socket: Socket): boolean;\n        emit(event: "error", err: Error): boolean;\n        emit(event: "listening"): boolean;\n        emit(event: "drop", data?: DropArgument): boolean;\n        on(event: string, listener: (...args: any[]) => void): this;\n        on(event: "close", listener: () => void): this;\n        on(event: "connection", listener: (socket: Socket) => void): this;\n        on(event: "error", listener: (err: Error) => void): this;\n        on(event: "listening", listener: () => void): this;\n        on(event: "drop", listener: (data?: DropArgument) => void): this;\n        once(event: string, listener: (...args: any[]) => void): this;\n        once(event: "close", listener: () => void): this;\n        once(event: "connection", listener: (socket: Socket) => void): this;\n        once(event: "error", listener: (err: Error) => void): this;\n        once(event: "listening", listener: () => void): this;\n        once(event: "drop", listener: (data?: DropArgument) => void): this;\n        prependListener(event: string, listener: (...args: any[]) => void): this;\n        prependListener(event: "close", listener: () => void): this;\n        prependListener(event: "connection", listener: (socket: Socket) => void): this;\n        prependListener(event: "error", listener: (err: Error) => void): this;\n        prependListener(event: "listening", listener: () => void): this;\n        prependListener(event: "drop", listener: (data?: DropArgument) => void): this;\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\n        prependOnceListener(event: "close", listener: () => void): this;\n        prependOnceListener(event: "connection", listener: (socket: Socket) => void): this;\n        prependOnceListener(event: "error", listener: (err: Error) => void): this;\n        prependOnceListener(event: "listening", listener: () => void): this;\n        prependOnceListener(event: "drop", listener: (data?: DropArgument) => void): this;\n        /**\n         * Calls {@link Server.close()} and returns a promise that fulfills when the server has closed.\n         * @since v20.5.0\n         */\n        [Symbol.asyncDispose](): Promise<void>;\n    }\n    type IPVersion = "ipv4" | "ipv6";\n    /**\n     * The `BlockList` object can be used with some network APIs to specify rules for\n     * disabling inbound or outbound access to specific IP addresses, IP ranges, or\n     * IP subnets.\n     * @since v15.0.0, v14.18.0\n     */\n    class BlockList {\n        /**\n         * Adds a rule to block the given IP address.\n         * @since v15.0.0, v14.18.0\n         * @param address An IPv4 or IPv6 address.\n         * @param [type=\'ipv4\'] Either `\'ipv4\'` or `\'ipv6\'`.\n         */\n        addAddress(address: string, type?: IPVersion): void;\n        addAddress(address: SocketAddress): void;\n        /**\n         * Adds a rule to block a range of IP addresses from `start` (inclusive) to`end` (inclusive).\n         * @since v15.0.0, v14.18.0\n         * @param start The starting IPv4 or IPv6 address in the range.\n         * @param end The ending IPv4 or IPv6 address in the range.\n         * @param [type=\'ipv4\'] Either `\'ipv4\'` or `\'ipv6\'`.\n         */\n        addRange(start: string, end: string, type?: IPVersion): void;\n        addRange(start: SocketAddress, end: SocketAddress): void;\n        /**\n         * Adds a rule to block a range of IP addresses specified as a subnet mask.\n         * @since v15.0.0, v14.18.0\n         * @param net The network IPv4 or IPv6 address.\n         * @param prefix The number of CIDR prefix bits. For IPv4, this must be a value between `0` and `32`. For IPv6, this must be between `0` and `128`.\n         * @param [type=\'ipv4\'] Either `\'ipv4\'` or `\'ipv6\'`.\n         */\n        addSubnet(net: SocketAddress, prefix: number): void;\n        addSubnet(net: string, prefix: number, type?: IPVersion): void;\n        /**\n         * Returns `true` if the given IP address matches any of the rules added to the`BlockList`.\n         *\n         * ```js\n         * const blockList = new net.BlockList();\n         * blockList.addAddress(\'123.123.123.123\');\n         * blockList.addRange(\'10.0.0.1\', \'10.0.0.10\');\n         * blockList.addSubnet(\'8592:757c:efae:4e45::\', 64, \'ipv6\');\n         *\n         * console.log(blockList.check(\'123.123.123.123\'));  // Prints: true\n         * console.log(blockList.check(\'10.0.0.3\'));  // Prints: true\n         * console.log(blockList.check(\'222.111.111.222\'));  // Prints: false\n         *\n         * // IPv6 notation for IPv4 addresses works:\n         * console.log(blockList.check(\'::ffff:7b7b:7b7b\', \'ipv6\')); // Prints: true\n         * console.log(blockList.check(\'::ffff:123.123.123.123\', \'ipv6\')); // Prints: true\n         * ```\n         * @since v15.0.0, v14.18.0\n         * @param address The IP address to check\n         * @param [type=\'ipv4\'] Either `\'ipv4\'` or `\'ipv6\'`.\n         */\n        check(address: SocketAddress): boolean;\n        check(address: string, type?: IPVersion): boolean;\n        /**\n         * The list of rules added to the blocklist.\n         * @since v15.0.0, v14.18.0\n         */\n        rules: readonly string[];\n        /**\n         * Returns `true` if the `value` is a `net.BlockList`.\n         * @since v22.13.0\n         * @param value Any JS value\n         */\n        static isBlockList(value: unknown): value is BlockList;\n    }\n    interface TcpNetConnectOpts extends TcpSocketConnectOpts, SocketConstructorOpts {\n        timeout?: number | undefined;\n    }\n    interface IpcNetConnectOpts extends IpcSocketConnectOpts, SocketConstructorOpts {\n        timeout?: number | undefined;\n    }\n    type NetConnectOpts = TcpNetConnectOpts | IpcNetConnectOpts;\n    /**\n     * Creates a new TCP or `IPC` server.\n     *\n     * If `allowHalfOpen` is set to `true`, when the other end of the socket\n     * signals the end of transmission, the server will only send back the end of\n     * transmission when `socket.end()` is explicitly called. For example, in the\n     * context of TCP, when a FIN packed is received, a FIN packed is sent\n     * back only when `socket.end()` is explicitly called. Until then the\n     * connection is half-closed (non-readable but still writable). See `\'end\'` event and [RFC 1122](https://tools.ietf.org/html/rfc1122) (section 4.2.2.13) for more information.\n     *\n     * If `pauseOnConnect` is set to `true`, then the socket associated with each\n     * incoming connection will be paused, and no data will be read from its handle.\n     * This allows connections to be passed between processes without any data being\n     * read by the original process. To begin reading data from a paused socket, call `socket.resume()`.\n     *\n     * The server can be a TCP server or an `IPC` server, depending on what it `listen()` to.\n     *\n     * Here is an example of a TCP echo server which listens for connections\n     * on port 8124:\n     *\n     * ```js\n     * import net from \'node:net\';\n     * const server = net.createServer((c) => {\n     *   // \'connection\' listener.\n     *   console.log(\'client connected\');\n     *   c.on(\'end\', () => {\n     *     console.log(\'client disconnected\');\n     *   });\n     *   c.write(\'hello\\r\\n\');\n     *   c.pipe(c);\n     * });\n     * server.on(\'error\', (err) => {\n     *   throw err;\n     * });\n     * server.listen(8124, () => {\n     *   console.log(\'server bound\');\n     * });\n     * ```\n     *\n     * Test this by using `telnet`:\n     *\n     * ```bash\n     * telnet localhost 8124\n     * ```\n     *\n     * To listen on the socket `/tmp/echo.sock`:\n     *\n     * ```js\n     * server.listen(\'/tmp/echo.sock\', () => {\n     *   console.log(\'server bound\');\n     * });\n     * ```\n     *\n     * Use `nc` to connect to a Unix domain socket server:\n     *\n     * ```bash\n     * nc -U /tmp/echo.sock\n     * ```\n     * @since v0.5.0\n     * @param connectionListener Automatically set as a listener for the {@link \'connection\'} event.\n     */\n    function createServer(connectionListener?: (socket: Socket) => void): Server;\n    function createServer(options?: ServerOpts, connectionListener?: (socket: Socket) => void): Server;\n    /**\n     * Aliases to {@link createConnection}.\n     *\n     * Possible signatures:\n     *\n     * * {@link connect}\n     * * {@link connect} for `IPC` connections.\n     * * {@link connect} for TCP connections.\n     */\n    function connect(options: NetConnectOpts, connectionListener?: () => void): Socket;\n    function connect(port: number, host?: string, connectionListener?: () => void): Socket;\n    function connect(path: string, connectionListener?: () => void): Socket;\n    /**\n     * A factory function, which creates a new {@link Socket},\n     * immediately initiates connection with `socket.connect()`,\n     * then returns the `net.Socket` that starts the connection.\n     *\n     * When the connection is established, a `\'connect\'` event will be emitted\n     * on the returned socket. The last parameter `connectListener`, if supplied,\n     * will be added as a listener for the `\'connect\'` event **once**.\n     *\n     * Possible signatures:\n     *\n     * * {@link createConnection}\n     * * {@link createConnection} for `IPC` connections.\n     * * {@link createConnection} for TCP connections.\n     *\n     * The {@link connect} function is an alias to this function.\n     */\n    function createConnection(options: NetConnectOpts, connectionListener?: () => void): Socket;\n    function createConnection(port: number, host?: string, connectionListener?: () => void): Socket;\n    function createConnection(path: string, connectionListener?: () => void): Socket;\n    /**\n     * Gets the current default value of the `autoSelectFamily` option of `socket.connect(options)`.\n     * The initial default value is `true`, unless the command line option`--no-network-family-autoselection` is provided.\n     * @since v19.4.0\n     */\n    function getDefaultAutoSelectFamily(): boolean;\n    /**\n     * Sets the default value of the `autoSelectFamily` option of `socket.connect(options)`.\n     * @param value The new default value.\n     * The initial default value is `true`, unless the command line option\n     * `--no-network-family-autoselection` is provided.\n     * @since v19.4.0\n     */\n    function setDefaultAutoSelectFamily(value: boolean): void;\n    /**\n     * Gets the current default value of the `autoSelectFamilyAttemptTimeout` option of `socket.connect(options)`.\n     * The initial default value is `250` or the value specified via the command line option `--network-family-autoselection-attempt-timeout`.\n     * @returns The current default value of the `autoSelectFamilyAttemptTimeout` option.\n     * @since v19.8.0, v18.8.0\n     */\n    function getDefaultAutoSelectFamilyAttemptTimeout(): number;\n    /**\n     * Sets the default value of the `autoSelectFamilyAttemptTimeout` option of `socket.connect(options)`.\n     * @param value The new default value, which must be a positive number. If the number is less than `10`, the value `10` is used instead. The initial default value is `250` or the value specified via the command line\n     * option `--network-family-autoselection-attempt-timeout`.\n     * @since v19.8.0, v18.8.0\n     */\n    function setDefaultAutoSelectFamilyAttemptTimeout(value: number): void;\n    /**\n     * Returns `6` if `input` is an IPv6 address. Returns `4` if `input` is an IPv4\n     * address in [dot-decimal notation](https://en.wikipedia.org/wiki/Dot-decimal_notation) with no leading zeroes. Otherwise, returns`0`.\n     *\n     * ```js\n     * net.isIP(\'::1\'); // returns 6\n     * net.isIP(\'127.0.0.1\'); // returns 4\n     * net.isIP(\'127.000.000.001\'); // returns 0\n     * net.isIP(\'127.0.0.1/24\'); // returns 0\n     * net.isIP(\'fhqwhgads\'); // returns 0\n     * ```\n     * @since v0.3.0\n     */\n    function isIP(input: string): number;\n    /**\n     * Returns `true` if `input` is an IPv4 address in [dot-decimal notation](https://en.wikipedia.org/wiki/Dot-decimal_notation) with no\n     * leading zeroes. Otherwise, returns `false`.\n     *\n     * ```js\n     * net.isIPv4(\'127.0.0.1\'); // returns true\n     * net.isIPv4(\'127.000.000.001\'); // returns false\n     * net.isIPv4(\'127.0.0.1/24\'); // returns false\n     * net.isIPv4(\'fhqwhgads\'); // returns false\n     * ```\n     * @since v0.3.0\n     */\n    function isIPv4(input: string): boolean;\n    /**\n     * Returns `true` if `input` is an IPv6 address. Otherwise, returns `false`.\n     *\n     * ```js\n     * net.isIPv6(\'::1\'); // returns true\n     * net.isIPv6(\'fhqwhgads\'); // returns false\n     * ```\n     * @since v0.3.0\n     */\n    function isIPv6(input: string): boolean;\n    interface SocketAddressInitOptions {\n        /**\n         * The network address as either an IPv4 or IPv6 string.\n         * @default 127.0.0.1\n         */\n        address?: string | undefined;\n        /**\n         * @default `\'ipv4\'`\n         */\n        family?: IPVersion | undefined;\n        /**\n         * An IPv6 flow-label used only if `family` is `\'ipv6\'`.\n         * @default 0\n         */\n        flowlabel?: number | undefined;\n        /**\n         * An IP port.\n         * @default 0\n         */\n        port?: number | undefined;\n    }\n    /**\n     * @since v15.14.0, v14.18.0\n     */\n    class SocketAddress {\n        constructor(options: SocketAddressInitOptions);\n        /**\n         * Either \\`\'ipv4\'\\` or \\`\'ipv6\'\\`.\n         * @since v15.14.0, v14.18.0\n         */\n        readonly address: string;\n        /**\n         * Either \\`\'ipv4\'\\` or \\`\'ipv6\'\\`.\n         * @since v15.14.0, v14.18.0\n         */\n        readonly family: IPVersion;\n        /**\n         * @since v15.14.0, v14.18.0\n         */\n        readonly port: number;\n        /**\n         * @since v15.14.0, v14.18.0\n         */\n        readonly flowlabel: number;\n        /**\n         * @since v22.13.0\n         * @param input An input string containing an IP address and optional port,\n         * e.g. `123.1.2.3:1234` or `[1::1]:1234`.\n         * @returns Returns a `SocketAddress` if parsing was successful.\n         * Otherwise returns `undefined`.\n         */\n        static parse(input: string): SocketAddress | undefined;\n    }\n}\ndeclare module "node:net" {\n    export * from "net";\n}\n',
  '@types/node/os.d.ts':
    "/**\n * The `node:os` module provides operating system-related utility methods and\n * properties. It can be accessed using:\n *\n * ```js\n * import os from 'node:os';\n * ```\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/os.js)\n */\ndeclare module \"os\" {\n    interface CpuInfo {\n        model: string;\n        speed: number;\n        times: {\n            /** The number of milliseconds the CPU has spent in user mode. */\n            user: number;\n            /** The number of milliseconds the CPU has spent in nice mode. */\n            nice: number;\n            /** The number of milliseconds the CPU has spent in sys mode. */\n            sys: number;\n            /** The number of milliseconds the CPU has spent in idle mode. */\n            idle: number;\n            /** The number of milliseconds the CPU has spent in irq mode. */\n            irq: number;\n        };\n    }\n    interface NetworkInterfaceBase {\n        address: string;\n        netmask: string;\n        mac: string;\n        internal: boolean;\n        cidr: string | null;\n    }\n    interface NetworkInterfaceInfoIPv4 extends NetworkInterfaceBase {\n        family: \"IPv4\";\n        scopeid?: undefined;\n    }\n    interface NetworkInterfaceInfoIPv6 extends NetworkInterfaceBase {\n        family: \"IPv6\";\n        scopeid: number;\n    }\n    interface UserInfo<T> {\n        username: T;\n        uid: number;\n        gid: number;\n        shell: T | null;\n        homedir: T;\n    }\n    type NetworkInterfaceInfo = NetworkInterfaceInfoIPv4 | NetworkInterfaceInfoIPv6;\n    /**\n     * Returns the host name of the operating system as a string.\n     * @since v0.3.3\n     */\n    function hostname(): string;\n    /**\n     * Returns an array containing the 1, 5, and 15 minute load averages.\n     *\n     * The load average is a measure of system activity calculated by the operating\n     * system and expressed as a fractional number.\n     *\n     * The load average is a Unix-specific concept. On Windows, the return value is\n     * always `[0, 0, 0]`.\n     * @since v0.3.3\n     */\n    function loadavg(): number[];\n    /**\n     * Returns the system uptime in number of seconds.\n     * @since v0.3.3\n     */\n    function uptime(): number;\n    /**\n     * Returns the amount of free system memory in bytes as an integer.\n     * @since v0.3.3\n     */\n    function freemem(): number;\n    /**\n     * Returns the total amount of system memory in bytes as an integer.\n     * @since v0.3.3\n     */\n    function totalmem(): number;\n    /**\n     * Returns an array of objects containing information about each logical CPU core.\n     * The array will be empty if no CPU information is available, such as if the `/proc` file system is unavailable.\n     *\n     * The properties included on each object include:\n     *\n     * ```js\n     * [\n     *   {\n     *     model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',\n     *     speed: 2926,\n     *     times: {\n     *       user: 252020,\n     *       nice: 0,\n     *       sys: 30340,\n     *       idle: 1070356870,\n     *       irq: 0,\n     *     },\n     *   },\n     *   {\n     *     model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',\n     *     speed: 2926,\n     *     times: {\n     *       user: 306960,\n     *       nice: 0,\n     *       sys: 26980,\n     *       idle: 1071569080,\n     *       irq: 0,\n     *     },\n     *   },\n     *   {\n     *     model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',\n     *     speed: 2926,\n     *     times: {\n     *       user: 248450,\n     *       nice: 0,\n     *       sys: 21750,\n     *       idle: 1070919370,\n     *       irq: 0,\n     *     },\n     *   },\n     *   {\n     *     model: 'Intel(R) Core(TM) i7 CPU         860  @ 2.80GHz',\n     *     speed: 2926,\n     *     times: {\n     *       user: 256880,\n     *       nice: 0,\n     *       sys: 19430,\n     *       idle: 1070905480,\n     *       irq: 20,\n     *     },\n     *   },\n     * ]\n     * ```\n     *\n     * `nice` values are POSIX-only. On Windows, the `nice` values of all processors\n     * are always 0.\n     *\n     * `os.cpus().length` should not be used to calculate the amount of parallelism\n     * available to an application. Use {@link availableParallelism} for this purpose.\n     * @since v0.3.3\n     */\n    function cpus(): CpuInfo[];\n    /**\n     * Returns an estimate of the default amount of parallelism a program should use.\n     * Always returns a value greater than zero.\n     *\n     * This function is a small wrapper about libuv's [`uv_available_parallelism()`](https://docs.libuv.org/en/v1.x/misc.html#c.uv_available_parallelism).\n     * @since v19.4.0, v18.14.0\n     */\n    function availableParallelism(): number;\n    /**\n     * Returns the operating system name as returned by [`uname(3)`](https://linux.die.net/man/3/uname). For example, it\n     * returns `'Linux'` on Linux, `'Darwin'` on macOS, and `'Windows_NT'` on Windows.\n     *\n     * See [https://en.wikipedia.org/wiki/Uname#Examples](https://en.wikipedia.org/wiki/Uname#Examples) for additional information\n     * about the output of running [`uname(3)`](https://linux.die.net/man/3/uname) on various operating systems.\n     * @since v0.3.3\n     */\n    function type(): string;\n    /**\n     * Returns the operating system as a string.\n     *\n     * On POSIX systems, the operating system release is determined by calling [`uname(3)`](https://linux.die.net/man/3/uname). On Windows, `GetVersionExW()` is used. See\n     * [https://en.wikipedia.org/wiki/Uname#Examples](https://en.wikipedia.org/wiki/Uname#Examples) for more information.\n     * @since v0.3.3\n     */\n    function release(): string;\n    /**\n     * Returns an object containing network interfaces that have been assigned a\n     * network address.\n     *\n     * Each key on the returned object identifies a network interface. The associated\n     * value is an array of objects that each describe an assigned network address.\n     *\n     * The properties available on the assigned network address object include:\n     *\n     * ```js\n     * {\n     *   lo: [\n     *     {\n     *       address: '127.0.0.1',\n     *       netmask: '255.0.0.0',\n     *       family: 'IPv4',\n     *       mac: '00:00:00:00:00:00',\n     *       internal: true,\n     *       cidr: '127.0.0.1/8'\n     *     },\n     *     {\n     *       address: '::1',\n     *       netmask: 'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff',\n     *       family: 'IPv6',\n     *       mac: '00:00:00:00:00:00',\n     *       scopeid: 0,\n     *       internal: true,\n     *       cidr: '::1/128'\n     *     }\n     *   ],\n     *   eth0: [\n     *     {\n     *       address: '192.168.1.108',\n     *       netmask: '255.255.255.0',\n     *       family: 'IPv4',\n     *       mac: '01:02:03:0a:0b:0c',\n     *       internal: false,\n     *       cidr: '192.168.1.108/24'\n     *     },\n     *     {\n     *       address: 'fe80::a00:27ff:fe4e:66a1',\n     *       netmask: 'ffff:ffff:ffff:ffff::',\n     *       family: 'IPv6',\n     *       mac: '01:02:03:0a:0b:0c',\n     *       scopeid: 1,\n     *       internal: false,\n     *       cidr: 'fe80::a00:27ff:fe4e:66a1/64'\n     *     }\n     *   ]\n     * }\n     * ```\n     * @since v0.6.0\n     */\n    function networkInterfaces(): NodeJS.Dict<NetworkInterfaceInfo[]>;\n    /**\n     * Returns the string path of the current user's home directory.\n     *\n     * On POSIX, it uses the `$HOME` environment variable if defined. Otherwise it\n     * uses the [effective UID](https://en.wikipedia.org/wiki/User_identifier#Effective_user_ID) to look up the user's home directory.\n     *\n     * On Windows, it uses the `USERPROFILE` environment variable if defined.\n     * Otherwise it uses the path to the profile directory of the current user.\n     * @since v2.3.0\n     */\n    function homedir(): string;\n    /**\n     * Returns information about the currently effective user. On POSIX platforms,\n     * this is typically a subset of the password file. The returned object includes\n     * the `username`, `uid`, `gid`, `shell`, and `homedir`. On Windows, the `uid` and `gid` fields are `-1`, and `shell` is `null`.\n     *\n     * The value of `homedir` returned by `os.userInfo()` is provided by the operating\n     * system. This differs from the result of `os.homedir()`, which queries\n     * environment variables for the home directory before falling back to the\n     * operating system response.\n     *\n     * Throws a [`SystemError`](https://nodejs.org/docs/latest-v22.x/api/errors.html#class-systemerror) if a user has no `username` or `homedir`.\n     * @since v6.0.0\n     */\n    function userInfo(options: { encoding: \"buffer\" }): UserInfo<Buffer>;\n    function userInfo(options?: { encoding: BufferEncoding }): UserInfo<string>;\n    type SignalConstants = {\n        [key in NodeJS.Signals]: number;\n    };\n    namespace constants {\n        const UV_UDP_REUSEADDR: number;\n        namespace signals {}\n        const signals: SignalConstants;\n        namespace errno {\n            const E2BIG: number;\n            const EACCES: number;\n            const EADDRINUSE: number;\n            const EADDRNOTAVAIL: number;\n            const EAFNOSUPPORT: number;\n            const EAGAIN: number;\n            const EALREADY: number;\n            const EBADF: number;\n            const EBADMSG: number;\n            const EBUSY: number;\n            const ECANCELED: number;\n            const ECHILD: number;\n            const ECONNABORTED: number;\n            const ECONNREFUSED: number;\n            const ECONNRESET: number;\n            const EDEADLK: number;\n            const EDESTADDRREQ: number;\n            const EDOM: number;\n            const EDQUOT: number;\n            const EEXIST: number;\n            const EFAULT: number;\n            const EFBIG: number;\n            const EHOSTUNREACH: number;\n            const EIDRM: number;\n            const EILSEQ: number;\n            const EINPROGRESS: number;\n            const EINTR: number;\n            const EINVAL: number;\n            const EIO: number;\n            const EISCONN: number;\n            const EISDIR: number;\n            const ELOOP: number;\n            const EMFILE: number;\n            const EMLINK: number;\n            const EMSGSIZE: number;\n            const EMULTIHOP: number;\n            const ENAMETOOLONG: number;\n            const ENETDOWN: number;\n            const ENETRESET: number;\n            const ENETUNREACH: number;\n            const ENFILE: number;\n            const ENOBUFS: number;\n            const ENODATA: number;\n            const ENODEV: number;\n            const ENOENT: number;\n            const ENOEXEC: number;\n            const ENOLCK: number;\n            const ENOLINK: number;\n            const ENOMEM: number;\n            const ENOMSG: number;\n            const ENOPROTOOPT: number;\n            const ENOSPC: number;\n            const ENOSR: number;\n            const ENOSTR: number;\n            const ENOSYS: number;\n            const ENOTCONN: number;\n            const ENOTDIR: number;\n            const ENOTEMPTY: number;\n            const ENOTSOCK: number;\n            const ENOTSUP: number;\n            const ENOTTY: number;\n            const ENXIO: number;\n            const EOPNOTSUPP: number;\n            const EOVERFLOW: number;\n            const EPERM: number;\n            const EPIPE: number;\n            const EPROTO: number;\n            const EPROTONOSUPPORT: number;\n            const EPROTOTYPE: number;\n            const ERANGE: number;\n            const EROFS: number;\n            const ESPIPE: number;\n            const ESRCH: number;\n            const ESTALE: number;\n            const ETIME: number;\n            const ETIMEDOUT: number;\n            const ETXTBSY: number;\n            const EWOULDBLOCK: number;\n            const EXDEV: number;\n            const WSAEINTR: number;\n            const WSAEBADF: number;\n            const WSAEACCES: number;\n            const WSAEFAULT: number;\n            const WSAEINVAL: number;\n            const WSAEMFILE: number;\n            const WSAEWOULDBLOCK: number;\n            const WSAEINPROGRESS: number;\n            const WSAEALREADY: number;\n            const WSAENOTSOCK: number;\n            const WSAEDESTADDRREQ: number;\n            const WSAEMSGSIZE: number;\n            const WSAEPROTOTYPE: number;\n            const WSAENOPROTOOPT: number;\n            const WSAEPROTONOSUPPORT: number;\n            const WSAESOCKTNOSUPPORT: number;\n            const WSAEOPNOTSUPP: number;\n            const WSAEPFNOSUPPORT: number;\n            const WSAEAFNOSUPPORT: number;\n            const WSAEADDRINUSE: number;\n            const WSAEADDRNOTAVAIL: number;\n            const WSAENETDOWN: number;\n            const WSAENETUNREACH: number;\n            const WSAENETRESET: number;\n            const WSAECONNABORTED: number;\n            const WSAECONNRESET: number;\n            const WSAENOBUFS: number;\n            const WSAEISCONN: number;\n            const WSAENOTCONN: number;\n            const WSAESHUTDOWN: number;\n            const WSAETOOMANYREFS: number;\n            const WSAETIMEDOUT: number;\n            const WSAECONNREFUSED: number;\n            const WSAELOOP: number;\n            const WSAENAMETOOLONG: number;\n            const WSAEHOSTDOWN: number;\n            const WSAEHOSTUNREACH: number;\n            const WSAENOTEMPTY: number;\n            const WSAEPROCLIM: number;\n            const WSAEUSERS: number;\n            const WSAEDQUOT: number;\n            const WSAESTALE: number;\n            const WSAEREMOTE: number;\n            const WSASYSNOTREADY: number;\n            const WSAVERNOTSUPPORTED: number;\n            const WSANOTINITIALISED: number;\n            const WSAEDISCON: number;\n            const WSAENOMORE: number;\n            const WSAECANCELLED: number;\n            const WSAEINVALIDPROCTABLE: number;\n            const WSAEINVALIDPROVIDER: number;\n            const WSAEPROVIDERFAILEDINIT: number;\n            const WSASYSCALLFAILURE: number;\n            const WSASERVICE_NOT_FOUND: number;\n            const WSATYPE_NOT_FOUND: number;\n            const WSA_E_NO_MORE: number;\n            const WSA_E_CANCELLED: number;\n            const WSAEREFUSED: number;\n        }\n        namespace dlopen {\n            const RTLD_LAZY: number;\n            const RTLD_NOW: number;\n            const RTLD_GLOBAL: number;\n            const RTLD_LOCAL: number;\n            const RTLD_DEEPBIND: number;\n        }\n        namespace priority {\n            const PRIORITY_LOW: number;\n            const PRIORITY_BELOW_NORMAL: number;\n            const PRIORITY_NORMAL: number;\n            const PRIORITY_ABOVE_NORMAL: number;\n            const PRIORITY_HIGH: number;\n            const PRIORITY_HIGHEST: number;\n        }\n    }\n    const devNull: string;\n    /**\n     * The operating system-specific end-of-line marker.\n     * * `\\n` on POSIX\n     * * `\\r\\n` on Windows\n     */\n    const EOL: string;\n    /**\n     * Returns the operating system CPU architecture for which the Node.js binary was\n     * compiled. Possible values are `'arm'`, `'arm64'`, `'ia32'`, `'loong64'`, `'mips'`, `'mipsel'`, `'ppc'`, `'ppc64'`, `'riscv64'`, `'s390'`, `'s390x'`,\n     * and `'x64'`.\n     *\n     * The return value is equivalent to [process.arch](https://nodejs.org/docs/latest-v22.x/api/process.html#processarch).\n     * @since v0.5.0\n     */\n    function arch(): string;\n    /**\n     * Returns a string identifying the kernel version.\n     *\n     * On POSIX systems, the operating system release is determined by calling [`uname(3)`](https://linux.die.net/man/3/uname). On Windows, `RtlGetVersion()` is used, and if it is not\n     * available, `GetVersionExW()` will be used. See [https://en.wikipedia.org/wiki/Uname#Examples](https://en.wikipedia.org/wiki/Uname#Examples) for more information.\n     * @since v13.11.0, v12.17.0\n     */\n    function version(): string;\n    /**\n     * Returns a string identifying the operating system platform for which\n     * the Node.js binary was compiled. The value is set at compile time.\n     * Possible values are `'aix'`, `'darwin'`, `'freebsd'`, `'linux'`, `'openbsd'`, `'sunos'`, and `'win32'`.\n     *\n     * The return value is equivalent to `process.platform`.\n     *\n     * The value `'android'` may also be returned if Node.js is built on the Android\n     * operating system. [Android support is experimental](https://github.com/nodejs/node/blob/HEAD/BUILDING.md#androidandroid-based-devices-eg-firefox-os).\n     * @since v0.5.0\n     */\n    function platform(): NodeJS.Platform;\n    /**\n     * Returns the machine type as a string, such as `arm`, `arm64`, `aarch64`, `mips`, `mips64`, `ppc64`, `ppc64le`, `s390`, `s390x`, `i386`, `i686`, `x86_64`.\n     *\n     * On POSIX systems, the machine type is determined by calling [`uname(3)`](https://linux.die.net/man/3/uname). On Windows, `RtlGetVersion()` is used, and if it is not\n     * available, `GetVersionExW()` will be used. See [https://en.wikipedia.org/wiki/Uname#Examples](https://en.wikipedia.org/wiki/Uname#Examples) for more information.\n     * @since v18.9.0, v16.18.0\n     */\n    function machine(): string;\n    /**\n     * Returns the operating system's default directory for temporary files as a\n     * string.\n     * @since v0.9.9\n     */\n    function tmpdir(): string;\n    /**\n     * Returns a string identifying the endianness of the CPU for which the Node.js\n     * binary was compiled.\n     *\n     * Possible values are `'BE'` for big endian and `'LE'` for little endian.\n     * @since v0.9.4\n     */\n    function endianness(): \"BE\" | \"LE\";\n    /**\n     * Returns the scheduling priority for the process specified by `pid`. If `pid` is\n     * not provided or is `0`, the priority of the current process is returned.\n     * @since v10.10.0\n     * @param [pid=0] The process ID to retrieve scheduling priority for.\n     */\n    function getPriority(pid?: number): number;\n    /**\n     * Attempts to set the scheduling priority for the process specified by `pid`. If `pid` is not provided or is `0`, the process ID of the current process is used.\n     *\n     * The `priority` input must be an integer between `-20` (high priority) and `19` (low priority). Due to differences between Unix priority levels and Windows\n     * priority classes, `priority` is mapped to one of six priority constants in `os.constants.priority`. When retrieving a process priority level, this range\n     * mapping may cause the return value to be slightly different on Windows. To avoid\n     * confusion, set `priority` to one of the priority constants.\n     *\n     * On Windows, setting priority to `PRIORITY_HIGHEST` requires elevated user\n     * privileges. Otherwise the set priority will be silently reduced to `PRIORITY_HIGH`.\n     * @since v10.10.0\n     * @param [pid=0] The process ID to set scheduling priority for.\n     * @param priority The scheduling priority to assign to the process.\n     */\n    function setPriority(priority: number): void;\n    function setPriority(pid: number, priority: number): void;\n}\ndeclare module \"node:os\" {\n    export * from \"os\";\n}\n",
  '@types/node/path.d.ts':
    "declare module \"path/posix\" {\n    import path = require(\"path\");\n    export = path;\n}\ndeclare module \"path/win32\" {\n    import path = require(\"path\");\n    export = path;\n}\n/**\n * The `node:path` module provides utilities for working with file and directory\n * paths. It can be accessed using:\n *\n * ```js\n * import path from 'node:path';\n * ```\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/path.js)\n */\ndeclare module \"path\" {\n    namespace path {\n        /**\n         * A parsed path object generated by path.parse() or consumed by path.format().\n         */\n        interface ParsedPath {\n            /**\n             * The root of the path such as '/' or 'c:\\'\n             */\n            root: string;\n            /**\n             * The full directory path such as '/home/user/dir' or 'c:\\path\\dir'\n             */\n            dir: string;\n            /**\n             * The file name including extension (if any) such as 'index.html'\n             */\n            base: string;\n            /**\n             * The file extension (if any) such as '.html'\n             */\n            ext: string;\n            /**\n             * The file name without extension (if any) such as 'index'\n             */\n            name: string;\n        }\n        interface FormatInputPathObject {\n            /**\n             * The root of the path such as '/' or 'c:\\'\n             */\n            root?: string | undefined;\n            /**\n             * The full directory path such as '/home/user/dir' or 'c:\\path\\dir'\n             */\n            dir?: string | undefined;\n            /**\n             * The file name including extension (if any) such as 'index.html'\n             */\n            base?: string | undefined;\n            /**\n             * The file extension (if any) such as '.html'\n             */\n            ext?: string | undefined;\n            /**\n             * The file name without extension (if any) such as 'index'\n             */\n            name?: string | undefined;\n        }\n        interface PlatformPath {\n            /**\n             * Normalize a string path, reducing '..' and '.' parts.\n             * When multiple slashes are found, they're replaced by a single one; when the path contains a trailing slash, it is preserved. On Windows backslashes are used.\n             *\n             * @param path string path to normalize.\n             * @throws {TypeError} if `path` is not a string.\n             */\n            normalize(path: string): string;\n            /**\n             * Join all arguments together and normalize the resulting path.\n             *\n             * @param paths paths to join.\n             * @throws {TypeError} if any of the path segments is not a string.\n             */\n            join(...paths: string[]): string;\n            /**\n             * The right-most parameter is considered {to}. Other parameters are considered an array of {from}.\n             *\n             * Starting from leftmost {from} parameter, resolves {to} to an absolute path.\n             *\n             * If {to} isn't already absolute, {from} arguments are prepended in right to left order,\n             * until an absolute path is found. If after using all {from} paths still no absolute path is found,\n             * the current working directory is used as well. The resulting path is normalized,\n             * and trailing slashes are removed unless the path gets resolved to the root directory.\n             *\n             * @param paths A sequence of paths or path segments.\n             * @throws {TypeError} if any of the arguments is not a string.\n             */\n            resolve(...paths: string[]): string;\n            /**\n             * The `path.matchesGlob()` method determines if `path` matches the `pattern`.\n             * @param path The path to glob-match against.\n             * @param pattern The glob to check the path against.\n             * @returns Whether or not the `path` matched the `pattern`.\n             * @throws {TypeError} if `path` or `pattern` are not strings.\n             * @since v22.5.0\n             */\n            matchesGlob(path: string, pattern: string): boolean;\n            /**\n             * Determines whether {path} is an absolute path. An absolute path will always resolve to the same location, regardless of the working directory.\n             *\n             * If the given {path} is a zero-length string, `false` will be returned.\n             *\n             * @param path path to test.\n             * @throws {TypeError} if `path` is not a string.\n             */\n            isAbsolute(path: string): boolean;\n            /**\n             * Solve the relative path from {from} to {to} based on the current working directory.\n             * At times we have two absolute paths, and we need to derive the relative path from one to the other. This is actually the reverse transform of path.resolve.\n             *\n             * @throws {TypeError} if either `from` or `to` is not a string.\n             */\n            relative(from: string, to: string): string;\n            /**\n             * Return the directory name of a path. Similar to the Unix dirname command.\n             *\n             * @param path the path to evaluate.\n             * @throws {TypeError} if `path` is not a string.\n             */\n            dirname(path: string): string;\n            /**\n             * Return the last portion of a path. Similar to the Unix basename command.\n             * Often used to extract the file name from a fully qualified path.\n             *\n             * @param path the path to evaluate.\n             * @param suffix optionally, an extension to remove from the result.\n             * @throws {TypeError} if `path` is not a string or if `ext` is given and is not a string.\n             */\n            basename(path: string, suffix?: string): string;\n            /**\n             * Return the extension of the path, from the last '.' to end of string in the last portion of the path.\n             * If there is no '.' in the last portion of the path or the first character of it is '.', then it returns an empty string.\n             *\n             * @param path the path to evaluate.\n             * @throws {TypeError} if `path` is not a string.\n             */\n            extname(path: string): string;\n            /**\n             * The platform-specific file separator. '\\\\' or '/'.\n             */\n            readonly sep: \"\\\\\" | \"/\";\n            /**\n             * The platform-specific file delimiter. ';' or ':'.\n             */\n            readonly delimiter: \";\" | \":\";\n            /**\n             * Returns an object from a path string - the opposite of format().\n             *\n             * @param path path to evaluate.\n             * @throws {TypeError} if `path` is not a string.\n             */\n            parse(path: string): ParsedPath;\n            /**\n             * Returns a path string from an object - the opposite of parse().\n             *\n             * @param pathObject path to evaluate.\n             */\n            format(pathObject: FormatInputPathObject): string;\n            /**\n             * On Windows systems only, returns an equivalent namespace-prefixed path for the given path.\n             * If path is not a string, path will be returned without modifications.\n             * This method is meaningful only on Windows system.\n             * On POSIX systems, the method is non-operational and always returns path without modifications.\n             */\n            toNamespacedPath(path: string): string;\n            /**\n             * Posix specific pathing.\n             * Same as parent object on posix.\n             */\n            readonly posix: PlatformPath;\n            /**\n             * Windows specific pathing.\n             * Same as parent object on windows\n             */\n            readonly win32: PlatformPath;\n        }\n    }\n    const path: path.PlatformPath;\n    export = path;\n}\ndeclare module \"node:path\" {\n    import path = require(\"path\");\n    export = path;\n}\ndeclare module \"node:path/posix\" {\n    import path = require(\"path/posix\");\n    export = path;\n}\ndeclare module \"node:path/win32\" {\n    import path = require(\"path/win32\");\n    export = path;\n}\n",
  '@types/node/perf_hooks.d.ts':
    "/**\n * This module provides an implementation of a subset of the W3C [Web Performance APIs](https://w3c.github.io/perf-timing-primer/) as well as additional APIs for\n * Node.js-specific performance measurements.\n *\n * Node.js supports the following [Web Performance APIs](https://w3c.github.io/perf-timing-primer/):\n *\n * * [High Resolution Time](https://www.w3.org/TR/hr-time-2)\n * * [Performance Timeline](https://w3c.github.io/performance-timeline/)\n * * [User Timing](https://www.w3.org/TR/user-timing/)\n * * [Resource Timing](https://www.w3.org/TR/resource-timing-2/)\n *\n * ```js\n * import { PerformanceObserver, performance } from 'node:perf_hooks';\n *\n * const obs = new PerformanceObserver((items) => {\n *   console.log(items.getEntries()[0].duration);\n *   performance.clearMarks();\n * });\n * obs.observe({ type: 'measure' });\n * performance.measure('Start to Now');\n *\n * performance.mark('A');\n * doSomeLongRunningProcess(() => {\n *   performance.measure('A to Now', 'A');\n *\n *   performance.mark('B');\n *   performance.measure('A to B', 'A', 'B');\n * });\n * ```\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/perf_hooks.js)\n */\ndeclare module \"perf_hooks\" {\n    import { AsyncResource } from \"node:async_hooks\";\n    type EntryType =\n        | \"dns\" // Node.js only\n        | \"function\" // Node.js only\n        | \"gc\" // Node.js only\n        | \"http2\" // Node.js only\n        | \"http\" // Node.js only\n        | \"mark\" // available on the Web\n        | \"measure\" // available on the Web\n        | \"net\" // Node.js only\n        | \"node\" // Node.js only\n        | \"resource\"; // available on the Web\n    interface NodeGCPerformanceDetail {\n        /**\n         * When `performanceEntry.entryType` is equal to 'gc', the `performance.kind` property identifies\n         * the type of garbage collection operation that occurred.\n         * See perf_hooks.constants for valid values.\n         */\n        readonly kind?: number | undefined;\n        /**\n         * When `performanceEntry.entryType` is equal to 'gc', the `performance.flags`\n         * property contains additional information about garbage collection operation.\n         * See perf_hooks.constants for valid values.\n         */\n        readonly flags?: number | undefined;\n    }\n    /**\n     * The constructor of this class is not exposed to users directly.\n     * @since v8.5.0\n     */\n    class PerformanceEntry {\n        protected constructor();\n        /**\n         * The total number of milliseconds elapsed for this entry. This value will not\n         * be meaningful for all Performance Entry types.\n         * @since v8.5.0\n         */\n        readonly duration: number;\n        /**\n         * The name of the performance entry.\n         * @since v8.5.0\n         */\n        readonly name: string;\n        /**\n         * The high resolution millisecond timestamp marking the starting time of the\n         * Performance Entry.\n         * @since v8.5.0\n         */\n        readonly startTime: number;\n        /**\n         * The type of the performance entry. It may be one of:\n         *\n         * * `'node'` (Node.js only)\n         * * `'mark'` (available on the Web)\n         * * `'measure'` (available on the Web)\n         * * `'gc'` (Node.js only)\n         * * `'function'` (Node.js only)\n         * * `'http2'` (Node.js only)\n         * * `'http'` (Node.js only)\n         * @since v8.5.0\n         */\n        readonly entryType: EntryType;\n        /**\n         * Additional detail specific to the `entryType`.\n         * @since v16.0.0\n         */\n        readonly detail?: NodeGCPerformanceDetail | unknown | undefined; // TODO: Narrow this based on entry type.\n        toJSON(): any;\n    }\n    /**\n     * Exposes marks created via the `Performance.mark()` method.\n     * @since v18.2.0, v16.17.0\n     */\n    class PerformanceMark extends PerformanceEntry {\n        readonly duration: 0;\n        readonly entryType: \"mark\";\n    }\n    /**\n     * Exposes measures created via the `Performance.measure()` method.\n     *\n     * The constructor of this class is not exposed to users directly.\n     * @since v18.2.0, v16.17.0\n     */\n    class PerformanceMeasure extends PerformanceEntry {\n        readonly entryType: \"measure\";\n    }\n    interface UVMetrics {\n        /**\n         * Number of event loop iterations.\n         */\n        readonly loopCount: number;\n        /**\n         * Number of events that have been processed by the event handler.\n         */\n        readonly events: number;\n        /**\n         * Number of events that were waiting to be processed when the event provider was called.\n         */\n        readonly eventsWaiting: number;\n    }\n    /**\n     * _This property is an extension by Node.js. It is not available in Web browsers._\n     *\n     * Provides timing details for Node.js itself. The constructor of this class\n     * is not exposed to users.\n     * @since v8.5.0\n     */\n    class PerformanceNodeTiming extends PerformanceEntry {\n        readonly entryType: \"node\";\n        /**\n         * The high resolution millisecond timestamp at which the Node.js process\n         * completed bootstrapping. If bootstrapping has not yet finished, the property\n         * has the value of -1.\n         * @since v8.5.0\n         */\n        readonly bootstrapComplete: number;\n        /**\n         * The high resolution millisecond timestamp at which the Node.js environment was\n         * initialized.\n         * @since v8.5.0\n         */\n        readonly environment: number;\n        /**\n         * The high resolution millisecond timestamp of the amount of time the event loop\n         * has been idle within the event loop's event provider (e.g. `epoll_wait`). This\n         * does not take CPU usage into consideration. If the event loop has not yet\n         * started (e.g., in the first tick of the main script), the property has the\n         * value of 0.\n         * @since v14.10.0, v12.19.0\n         */\n        readonly idleTime: number;\n        /**\n         * The high resolution millisecond timestamp at which the Node.js event loop\n         * exited. If the event loop has not yet exited, the property has the value of -1\\.\n         * It can only have a value of not -1 in a handler of the `'exit'` event.\n         * @since v8.5.0\n         */\n        readonly loopExit: number;\n        /**\n         * The high resolution millisecond timestamp at which the Node.js event loop\n         * started. If the event loop has not yet started (e.g., in the first tick of the\n         * main script), the property has the value of -1.\n         * @since v8.5.0\n         */\n        readonly loopStart: number;\n        /**\n         * The high resolution millisecond timestamp at which the Node.js process was initialized.\n         * @since v8.5.0\n         */\n        readonly nodeStart: number;\n        /**\n         * This is a wrapper to the `uv_metrics_info` function.\n         * It returns the current set of event loop metrics.\n         *\n         * It is recommended to use this property inside a function whose execution was\n         * scheduled using `setImmediate` to avoid collecting metrics before finishing all\n         * operations scheduled during the current loop iteration.\n         * @since v22.8.0, v20.18.0\n         */\n        readonly uvMetricsInfo: UVMetrics;\n        /**\n         * The high resolution millisecond timestamp at which the V8 platform was\n         * initialized.\n         * @since v8.5.0\n         */\n        readonly v8Start: number;\n    }\n    interface EventLoopUtilization {\n        idle: number;\n        active: number;\n        utilization: number;\n    }\n    /**\n     * @param utilization1 The result of a previous call to `eventLoopUtilization()`.\n     * @param utilization2 The result of a previous call to `eventLoopUtilization()` prior to `utilization1`.\n     */\n    type EventLoopUtilityFunction = (\n        utilization1?: EventLoopUtilization,\n        utilization2?: EventLoopUtilization,\n    ) => EventLoopUtilization;\n    interface MarkOptions {\n        /**\n         * Additional optional detail to include with the mark.\n         */\n        detail?: unknown | undefined;\n        /**\n         * An optional timestamp to be used as the mark time.\n         * @default `performance.now()`\n         */\n        startTime?: number | undefined;\n    }\n    interface MeasureOptions {\n        /**\n         * Additional optional detail to include with the mark.\n         */\n        detail?: unknown | undefined;\n        /**\n         * Duration between start and end times.\n         */\n        duration?: number | undefined;\n        /**\n         * Timestamp to be used as the end time, or a string identifying a previously recorded mark.\n         */\n        end?: number | string | undefined;\n        /**\n         * Timestamp to be used as the start time, or a string identifying a previously recorded mark.\n         */\n        start?: number | string | undefined;\n    }\n    interface TimerifyOptions {\n        /**\n         * A histogram object created using `perf_hooks.createHistogram()` that will record runtime\n         * durations in nanoseconds.\n         */\n        histogram?: RecordableHistogram | undefined;\n    }\n    interface Performance {\n        /**\n         * If `name` is not provided, removes all `PerformanceMark` objects from the Performance Timeline.\n         * If `name` is provided, removes only the named mark.\n         * @since v8.5.0\n         */\n        clearMarks(name?: string): void;\n        /**\n         * If `name` is not provided, removes all `PerformanceMeasure` objects from the Performance Timeline.\n         * If `name` is provided, removes only the named measure.\n         * @since v16.7.0\n         */\n        clearMeasures(name?: string): void;\n        /**\n         * If `name` is not provided, removes all `PerformanceResourceTiming` objects from the Resource Timeline.\n         * If `name` is provided, removes only the named resource.\n         * @since v18.2.0, v16.17.0\n         */\n        clearResourceTimings(name?: string): void;\n        /**\n         * eventLoopUtilization is similar to CPU utilization except that it is calculated using high precision wall-clock time.\n         * It represents the percentage of time the event loop has spent outside the event loop's event provider (e.g. epoll_wait).\n         * No other CPU idle time is taken into consideration.\n         */\n        eventLoopUtilization: EventLoopUtilityFunction;\n        /**\n         * Returns a list of `PerformanceEntry` objects in chronological order with respect to `performanceEntry.startTime`.\n         * If you are only interested in performance entries of certain types or that have certain names, see\n         * `performance.getEntriesByType()` and `performance.getEntriesByName()`.\n         * @since v16.7.0\n         */\n        getEntries(): PerformanceEntry[];\n        /**\n         * Returns a list of `PerformanceEntry` objects in chronological order with respect to `performanceEntry.startTime`\n         * whose `performanceEntry.name` is equal to `name`, and optionally, whose `performanceEntry.entryType` is equal to `type`.\n         * @param name\n         * @param type\n         * @since v16.7.0\n         */\n        getEntriesByName(name: string, type?: EntryType): PerformanceEntry[];\n        /**\n         * Returns a list of `PerformanceEntry` objects in chronological order with respect to `performanceEntry.startTime`\n         * whose `performanceEntry.entryType` is equal to `type`.\n         * @param type\n         * @since v16.7.0\n         */\n        getEntriesByType(type: EntryType): PerformanceEntry[];\n        /**\n         * Creates a new `PerformanceMark` entry in the Performance Timeline.\n         * A `PerformanceMark` is a subclass of `PerformanceEntry` whose `performanceEntry.entryType` is always `'mark'`,\n         * and whose `performanceEntry.duration` is always `0`.\n         * Performance marks are used to mark specific significant moments in the Performance Timeline.\n         *\n         * The created `PerformanceMark` entry is put in the global Performance Timeline and can be queried with\n         * `performance.getEntries`, `performance.getEntriesByName`, and `performance.getEntriesByType`. When the observation is\n         * performed, the entries should be cleared from the global Performance Timeline manually with `performance.clearMarks`.\n         * @param name\n         */\n        mark(name: string, options?: MarkOptions): PerformanceMark;\n        /**\n         * Creates a new `PerformanceResourceTiming` entry in the Resource Timeline.\n         * A `PerformanceResourceTiming` is a subclass of `PerformanceEntry` whose `performanceEntry.entryType` is always `'resource'`.\n         * Performance resources are used to mark moments in the Resource Timeline.\n         * @param timingInfo [Fetch Timing Info](https://fetch.spec.whatwg.org/#fetch-timing-info)\n         * @param requestedUrl The resource url\n         * @param initiatorType The initiator name, e.g: 'fetch'\n         * @param global\n         * @param cacheMode The cache mode must be an empty string ('') or 'local'\n         * @param bodyInfo [Fetch Response Body Info](https://fetch.spec.whatwg.org/#response-body-info)\n         * @param responseStatus The response's status code\n         * @param deliveryType The delivery type. Default: ''.\n         * @since v18.2.0, v16.17.0\n         */\n        markResourceTiming(\n            timingInfo: object,\n            requestedUrl: string,\n            initiatorType: string,\n            global: object,\n            cacheMode: \"\" | \"local\",\n            bodyInfo: object,\n            responseStatus: number,\n            deliveryType?: string,\n        ): PerformanceResourceTiming;\n        /**\n         * Creates a new PerformanceMeasure entry in the Performance Timeline.\n         * A PerformanceMeasure is a subclass of PerformanceEntry whose performanceEntry.entryType is always 'measure',\n         * and whose performanceEntry.duration measures the number of milliseconds elapsed since startMark and endMark.\n         *\n         * The startMark argument may identify any existing PerformanceMark in the the Performance Timeline, or may identify\n         * any of the timestamp properties provided by the PerformanceNodeTiming class. If the named startMark does not exist,\n         * then startMark is set to timeOrigin by default.\n         *\n         * The endMark argument must identify any existing PerformanceMark in the the Performance Timeline or any of the timestamp\n         * properties provided by the PerformanceNodeTiming class. If the named endMark does not exist, an error will be thrown.\n         * @param name\n         * @param startMark\n         * @param endMark\n         * @return The PerformanceMeasure entry that was created\n         */\n        measure(name: string, startMark?: string, endMark?: string): PerformanceMeasure;\n        measure(name: string, options: MeasureOptions): PerformanceMeasure;\n        /**\n         * _This property is an extension by Node.js. It is not available in Web browsers._\n         *\n         * An instance of the `PerformanceNodeTiming` class that provides performance metrics for specific Node.js operational milestones.\n         * @since v8.5.0\n         */\n        readonly nodeTiming: PerformanceNodeTiming;\n        /**\n         * Returns the current high resolution millisecond timestamp, where 0 represents the start of the current `node` process.\n         * @since v8.5.0\n         */\n        now(): number;\n        /**\n         * Sets the global performance resource timing buffer size to the specified number of \"resource\" type performance entry objects.\n         *\n         * By default the max buffer size is set to 250.\n         * @since v18.8.0\n         */\n        setResourceTimingBufferSize(maxSize: number): void;\n        /**\n         * The [`timeOrigin`](https://w3c.github.io/hr-time/#dom-performance-timeorigin) specifies the high resolution millisecond timestamp\n         * at which the current `node` process began, measured in Unix time.\n         * @since v8.5.0\n         */\n        readonly timeOrigin: number;\n        /**\n         * _This property is an extension by Node.js. It is not available in Web browsers._\n         *\n         * Wraps a function within a new function that measures the running time of the wrapped function.\n         * A `PerformanceObserver` must be subscribed to the `'function'` event type in order for the timing details to be accessed.\n         *\n         * ```js\n         * import {\n         *   performance,\n         *   PerformanceObserver,\n         * } from 'node:perf_hooks';\n         *\n         * function someFunction() {\n         *   console.log('hello world');\n         * }\n         *\n         * const wrapped = performance.timerify(someFunction);\n         *\n         * const obs = new PerformanceObserver((list) => {\n         *   console.log(list.getEntries()[0].duration);\n         *\n         *   performance.clearMarks();\n         *   performance.clearMeasures();\n         *   obs.disconnect();\n         * });\n         * obs.observe({ entryTypes: ['function'] });\n         *\n         * // A performance timeline entry will be created\n         * wrapped();\n         * ```\n         *\n         * If the wrapped function returns a promise, a finally handler will be attached to the promise and the duration will be reported\n         * once the finally handler is invoked.\n         * @param fn\n         */\n        timerify<T extends (...params: any[]) => any>(fn: T, options?: TimerifyOptions): T;\n        /**\n         * An object which is JSON representation of the performance object. It is similar to\n         * [`window.performance.toJSON`](https://developer.mozilla.org/en-US/docs/Web/API/Performance/toJSON) in browsers.\n         * @since v16.1.0\n         */\n        toJSON(): any;\n    }\n    class PerformanceObserverEntryList {\n        /**\n         * Returns a list of `PerformanceEntry` objects in chronological order\n         * with respect to `performanceEntry.startTime`.\n         *\n         * ```js\n         * import {\n         *   performance,\n         *   PerformanceObserver,\n         * } from 'node:perf_hooks';\n         *\n         * const obs = new PerformanceObserver((perfObserverList, observer) => {\n         *   console.log(perfObserverList.getEntries());\n         *\n         *    * [\n         *    *   PerformanceEntry {\n         *    *     name: 'test',\n         *    *     entryType: 'mark',\n         *    *     startTime: 81.465639,\n         *    *     duration: 0,\n         *    *     detail: null\n         *    *   },\n         *    *   PerformanceEntry {\n         *    *     name: 'meow',\n         *    *     entryType: 'mark',\n         *    *     startTime: 81.860064,\n         *    *     duration: 0,\n         *    *     detail: null\n         *    *   }\n         *    * ]\n         *\n         *   performance.clearMarks();\n         *   performance.clearMeasures();\n         *   observer.disconnect();\n         * });\n         * obs.observe({ type: 'mark' });\n         *\n         * performance.mark('test');\n         * performance.mark('meow');\n         * ```\n         * @since v8.5.0\n         */\n        getEntries(): PerformanceEntry[];\n        /**\n         * Returns a list of `PerformanceEntry` objects in chronological order\n         * with respect to `performanceEntry.startTime` whose `performanceEntry.name` is\n         * equal to `name`, and optionally, whose `performanceEntry.entryType` is equal to`type`.\n         *\n         * ```js\n         * import {\n         *   performance,\n         *   PerformanceObserver,\n         * } from 'node:perf_hooks';\n         *\n         * const obs = new PerformanceObserver((perfObserverList, observer) => {\n         *   console.log(perfObserverList.getEntriesByName('meow'));\n         *\n         *    * [\n         *    *   PerformanceEntry {\n         *    *     name: 'meow',\n         *    *     entryType: 'mark',\n         *    *     startTime: 98.545991,\n         *    *     duration: 0,\n         *    *     detail: null\n         *    *   }\n         *    * ]\n         *\n         *   console.log(perfObserverList.getEntriesByName('nope')); // []\n         *\n         *   console.log(perfObserverList.getEntriesByName('test', 'mark'));\n         *\n         *    * [\n         *    *   PerformanceEntry {\n         *    *     name: 'test',\n         *    *     entryType: 'mark',\n         *    *     startTime: 63.518931,\n         *    *     duration: 0,\n         *    *     detail: null\n         *    *   }\n         *    * ]\n         *\n         *   console.log(perfObserverList.getEntriesByName('test', 'measure')); // []\n         *\n         *   performance.clearMarks();\n         *   performance.clearMeasures();\n         *   observer.disconnect();\n         * });\n         * obs.observe({ entryTypes: ['mark', 'measure'] });\n         *\n         * performance.mark('test');\n         * performance.mark('meow');\n         * ```\n         * @since v8.5.0\n         */\n        getEntriesByName(name: string, type?: EntryType): PerformanceEntry[];\n        /**\n         * Returns a list of `PerformanceEntry` objects in chronological order\n         * with respect to `performanceEntry.startTime` whose `performanceEntry.entryType` is equal to `type`.\n         *\n         * ```js\n         * import {\n         *   performance,\n         *   PerformanceObserver,\n         * } from 'node:perf_hooks';\n         *\n         * const obs = new PerformanceObserver((perfObserverList, observer) => {\n         *   console.log(perfObserverList.getEntriesByType('mark'));\n         *\n         *    * [\n         *    *   PerformanceEntry {\n         *    *     name: 'test',\n         *    *     entryType: 'mark',\n         *    *     startTime: 55.897834,\n         *    *     duration: 0,\n         *    *     detail: null\n         *    *   },\n         *    *   PerformanceEntry {\n         *    *     name: 'meow',\n         *    *     entryType: 'mark',\n         *    *     startTime: 56.350146,\n         *    *     duration: 0,\n         *    *     detail: null\n         *    *   }\n         *    * ]\n         *\n         *   performance.clearMarks();\n         *   performance.clearMeasures();\n         *   observer.disconnect();\n         * });\n         * obs.observe({ type: 'mark' });\n         *\n         * performance.mark('test');\n         * performance.mark('meow');\n         * ```\n         * @since v8.5.0\n         */\n        getEntriesByType(type: EntryType): PerformanceEntry[];\n    }\n    type PerformanceObserverCallback = (list: PerformanceObserverEntryList, observer: PerformanceObserver) => void;\n    /**\n     * @since v8.5.0\n     */\n    class PerformanceObserver extends AsyncResource {\n        constructor(callback: PerformanceObserverCallback);\n        /**\n         * Disconnects the `PerformanceObserver` instance from all notifications.\n         * @since v8.5.0\n         */\n        disconnect(): void;\n        /**\n         * Subscribes the `PerformanceObserver` instance to notifications of new `PerformanceEntry` instances identified either by `options.entryTypes` or `options.type`:\n         *\n         * ```js\n         * import {\n         *   performance,\n         *   PerformanceObserver,\n         * } from 'node:perf_hooks';\n         *\n         * const obs = new PerformanceObserver((list, observer) => {\n         *   // Called once asynchronously. `list` contains three items.\n         * });\n         * obs.observe({ type: 'mark' });\n         *\n         * for (let n = 0; n < 3; n++)\n         *   performance.mark(`test${n}`);\n         * ```\n         * @since v8.5.0\n         */\n        observe(\n            options:\n                | {\n                    entryTypes: readonly EntryType[];\n                    buffered?: boolean | undefined;\n                }\n                | {\n                    type: EntryType;\n                    buffered?: boolean | undefined;\n                },\n        ): void;\n        /**\n         * @since v16.0.0\n         * @returns Current list of entries stored in the performance observer, emptying it out.\n         */\n        takeRecords(): PerformanceEntry[];\n    }\n    /**\n     * Provides detailed network timing data regarding the loading of an application's resources.\n     *\n     * The constructor of this class is not exposed to users directly.\n     * @since v18.2.0, v16.17.0\n     */\n    class PerformanceResourceTiming extends PerformanceEntry {\n        readonly entryType: \"resource\";\n        protected constructor();\n        /**\n         * The high resolution millisecond timestamp at immediately before dispatching the `fetch`\n         * request. If the resource is not intercepted by a worker the property will always return 0.\n         * @since v18.2.0, v16.17.0\n         */\n        readonly workerStart: number;\n        /**\n         * The high resolution millisecond timestamp that represents the start time of the fetch which\n         * initiates the redirect.\n         * @since v18.2.0, v16.17.0\n         */\n        readonly redirectStart: number;\n        /**\n         * The high resolution millisecond timestamp that will be created immediately after receiving\n         * the last byte of the response of the last redirect.\n         * @since v18.2.0, v16.17.0\n         */\n        readonly redirectEnd: number;\n        /**\n         * The high resolution millisecond timestamp immediately before the Node.js starts to fetch the resource.\n         * @since v18.2.0, v16.17.0\n         */\n        readonly fetchStart: number;\n        /**\n         * The high resolution millisecond timestamp immediately before the Node.js starts the domain name lookup\n         * for the resource.\n         * @since v18.2.0, v16.17.0\n         */\n        readonly domainLookupStart: number;\n        /**\n         * The high resolution millisecond timestamp representing the time immediately after the Node.js finished\n         * the domain name lookup for the resource.\n         * @since v18.2.0, v16.17.0\n         */\n        readonly domainLookupEnd: number;\n        /**\n         * The high resolution millisecond timestamp representing the time immediately before Node.js starts to\n         * establish the connection to the server to retrieve the resource.\n         * @since v18.2.0, v16.17.0\n         */\n        readonly connectStart: number;\n        /**\n         * The high resolution millisecond timestamp representing the time immediately after Node.js finishes\n         * establishing the connection to the server to retrieve the resource.\n         * @since v18.2.0, v16.17.0\n         */\n        readonly connectEnd: number;\n        /**\n         * The high resolution millisecond timestamp representing the time immediately before Node.js starts the\n         * handshake process to secure the current connection.\n         * @since v18.2.0, v16.17.0\n         */\n        readonly secureConnectionStart: number;\n        /**\n         * The high resolution millisecond timestamp representing the time immediately before Node.js receives the\n         * first byte of the response from the server.\n         * @since v18.2.0, v16.17.0\n         */\n        readonly requestStart: number;\n        /**\n         * The high resolution millisecond timestamp representing the time immediately after Node.js receives the\n         * last byte of the resource or immediately before the transport connection is closed, whichever comes first.\n         * @since v18.2.0, v16.17.0\n         */\n        readonly responseEnd: number;\n        /**\n         * A number representing the size (in octets) of the fetched resource. The size includes the response header\n         * fields plus the response payload body.\n         * @since v18.2.0, v16.17.0\n         */\n        readonly transferSize: number;\n        /**\n         * A number representing the size (in octets) received from the fetch (HTTP or cache), of the payload body, before\n         * removing any applied content-codings.\n         * @since v18.2.0, v16.17.0\n         */\n        readonly encodedBodySize: number;\n        /**\n         * A number representing the size (in octets) received from the fetch (HTTP or cache), of the message body, after\n         * removing any applied content-codings.\n         * @since v18.2.0, v16.17.0\n         */\n        readonly decodedBodySize: number;\n        /**\n         * Returns a `object` that is the JSON representation of the `PerformanceResourceTiming` object\n         * @since v18.2.0, v16.17.0\n         */\n        toJSON(): any;\n    }\n    namespace constants {\n        const NODE_PERFORMANCE_GC_MAJOR: number;\n        const NODE_PERFORMANCE_GC_MINOR: number;\n        const NODE_PERFORMANCE_GC_INCREMENTAL: number;\n        const NODE_PERFORMANCE_GC_WEAKCB: number;\n        const NODE_PERFORMANCE_GC_FLAGS_NO: number;\n        const NODE_PERFORMANCE_GC_FLAGS_CONSTRUCT_RETAINED: number;\n        const NODE_PERFORMANCE_GC_FLAGS_FORCED: number;\n        const NODE_PERFORMANCE_GC_FLAGS_SYNCHRONOUS_PHANTOM_PROCESSING: number;\n        const NODE_PERFORMANCE_GC_FLAGS_ALL_AVAILABLE_GARBAGE: number;\n        const NODE_PERFORMANCE_GC_FLAGS_ALL_EXTERNAL_MEMORY: number;\n        const NODE_PERFORMANCE_GC_FLAGS_SCHEDULE_IDLE: number;\n    }\n    const performance: Performance;\n    interface EventLoopMonitorOptions {\n        /**\n         * The sampling rate in milliseconds.\n         * Must be greater than zero.\n         * @default 10\n         */\n        resolution?: number | undefined;\n    }\n    interface Histogram {\n        /**\n         * The number of samples recorded by the histogram.\n         * @since v17.4.0, v16.14.0\n         */\n        readonly count: number;\n        /**\n         * The number of samples recorded by the histogram.\n         * v17.4.0, v16.14.0\n         */\n        readonly countBigInt: bigint;\n        /**\n         * The number of times the event loop delay exceeded the maximum 1 hour event\n         * loop delay threshold.\n         * @since v11.10.0\n         */\n        readonly exceeds: number;\n        /**\n         * The number of times the event loop delay exceeded the maximum 1 hour event loop delay threshold.\n         * @since v17.4.0, v16.14.0\n         */\n        readonly exceedsBigInt: bigint;\n        /**\n         * The maximum recorded event loop delay.\n         * @since v11.10.0\n         */\n        readonly max: number;\n        /**\n         * The maximum recorded event loop delay.\n         * v17.4.0, v16.14.0\n         */\n        readonly maxBigInt: number;\n        /**\n         * The mean of the recorded event loop delays.\n         * @since v11.10.0\n         */\n        readonly mean: number;\n        /**\n         * The minimum recorded event loop delay.\n         * @since v11.10.0\n         */\n        readonly min: number;\n        /**\n         * The minimum recorded event loop delay.\n         * v17.4.0, v16.14.0\n         */\n        readonly minBigInt: bigint;\n        /**\n         * Returns the value at the given percentile.\n         * @since v11.10.0\n         * @param percentile A percentile value in the range (0, 100].\n         */\n        percentile(percentile: number): number;\n        /**\n         * Returns the value at the given percentile.\n         * @since v17.4.0, v16.14.0\n         * @param percentile A percentile value in the range (0, 100].\n         */\n        percentileBigInt(percentile: number): bigint;\n        /**\n         * Returns a `Map` object detailing the accumulated percentile distribution.\n         * @since v11.10.0\n         */\n        readonly percentiles: Map<number, number>;\n        /**\n         * Returns a `Map` object detailing the accumulated percentile distribution.\n         * @since v17.4.0, v16.14.0\n         */\n        readonly percentilesBigInt: Map<bigint, bigint>;\n        /**\n         * Resets the collected histogram data.\n         * @since v11.10.0\n         */\n        reset(): void;\n        /**\n         * The standard deviation of the recorded event loop delays.\n         * @since v11.10.0\n         */\n        readonly stddev: number;\n    }\n    interface IntervalHistogram extends Histogram {\n        /**\n         * Enables the update interval timer. Returns `true` if the timer was\n         * started, `false` if it was already started.\n         * @since v11.10.0\n         */\n        enable(): boolean;\n        /**\n         * Disables the update interval timer. Returns `true` if the timer was\n         * stopped, `false` if it was already stopped.\n         * @since v11.10.0\n         */\n        disable(): boolean;\n    }\n    interface RecordableHistogram extends Histogram {\n        /**\n         * @since v15.9.0, v14.18.0\n         * @param val The amount to record in the histogram.\n         */\n        record(val: number | bigint): void;\n        /**\n         * Calculates the amount of time (in nanoseconds) that has passed since the\n         * previous call to `recordDelta()` and records that amount in the histogram.\n         * @since v15.9.0, v14.18.0\n         */\n        recordDelta(): void;\n        /**\n         * Adds the values from `other` to this histogram.\n         * @since v17.4.0, v16.14.0\n         */\n        add(other: RecordableHistogram): void;\n    }\n    /**\n     * _This property is an extension by Node.js. It is not available in Web browsers._\n     *\n     * Creates an `IntervalHistogram` object that samples and reports the event loop\n     * delay over time. The delays will be reported in nanoseconds.\n     *\n     * Using a timer to detect approximate event loop delay works because the\n     * execution of timers is tied specifically to the lifecycle of the libuv\n     * event loop. That is, a delay in the loop will cause a delay in the execution\n     * of the timer, and those delays are specifically what this API is intended to\n     * detect.\n     *\n     * ```js\n     * import { monitorEventLoopDelay } from 'node:perf_hooks';\n     * const h = monitorEventLoopDelay({ resolution: 20 });\n     * h.enable();\n     * // Do something.\n     * h.disable();\n     * console.log(h.min);\n     * console.log(h.max);\n     * console.log(h.mean);\n     * console.log(h.stddev);\n     * console.log(h.percentiles);\n     * console.log(h.percentile(50));\n     * console.log(h.percentile(99));\n     * ```\n     * @since v11.10.0\n     */\n    function monitorEventLoopDelay(options?: EventLoopMonitorOptions): IntervalHistogram;\n    interface CreateHistogramOptions {\n        /**\n         * The minimum recordable value. Must be an integer value greater than 0.\n         * @default 1\n         */\n        lowest?: number | bigint | undefined;\n        /**\n         * The maximum recordable value. Must be an integer value greater than min.\n         * @default Number.MAX_SAFE_INTEGER\n         */\n        highest?: number | bigint | undefined;\n        /**\n         * The number of accuracy digits. Must be a number between 1 and 5.\n         * @default 3\n         */\n        figures?: number | undefined;\n    }\n    /**\n     * Returns a `RecordableHistogram`.\n     * @since v15.9.0, v14.18.0\n     */\n    function createHistogram(options?: CreateHistogramOptions): RecordableHistogram;\n    import {\n        performance as _performance,\n        PerformanceEntry as _PerformanceEntry,\n        PerformanceMark as _PerformanceMark,\n        PerformanceMeasure as _PerformanceMeasure,\n        PerformanceObserver as _PerformanceObserver,\n        PerformanceObserverEntryList as _PerformanceObserverEntryList,\n        PerformanceResourceTiming as _PerformanceResourceTiming,\n    } from \"perf_hooks\";\n    global {\n        /**\n         * `PerformanceEntry` is a global reference for `import { PerformanceEntry } from 'node:perf_hooks'`\n         * @see https://nodejs.org/docs/latest-v22.x/api/globals.html#performanceentry\n         * @since v19.0.0\n         */\n        var PerformanceEntry: typeof globalThis extends {\n            onmessage: any;\n            PerformanceEntry: infer T;\n        } ? T\n            : typeof _PerformanceEntry;\n        /**\n         * `PerformanceMark` is a global reference for `import { PerformanceMark } from 'node:perf_hooks'`\n         * @see https://nodejs.org/docs/latest-v22.x/api/globals.html#performancemark\n         * @since v19.0.0\n         */\n        var PerformanceMark: typeof globalThis extends {\n            onmessage: any;\n            PerformanceMark: infer T;\n        } ? T\n            : typeof _PerformanceMark;\n        /**\n         * `PerformanceMeasure` is a global reference for `import { PerformanceMeasure } from 'node:perf_hooks'`\n         * @see https://nodejs.org/docs/latest-v22.x/api/globals.html#performancemeasure\n         * @since v19.0.0\n         */\n        var PerformanceMeasure: typeof globalThis extends {\n            onmessage: any;\n            PerformanceMeasure: infer T;\n        } ? T\n            : typeof _PerformanceMeasure;\n        /**\n         * `PerformanceObserver` is a global reference for `import { PerformanceObserver } from 'node:perf_hooks'`\n         * @see https://nodejs.org/docs/latest-v22.x/api/globals.html#performanceobserver\n         * @since v19.0.0\n         */\n        var PerformanceObserver: typeof globalThis extends {\n            onmessage: any;\n            PerformanceObserver: infer T;\n        } ? T\n            : typeof _PerformanceObserver;\n        /**\n         * `PerformanceObserverEntryList` is a global reference for `import { PerformanceObserverEntryList } from 'node:perf_hooks'`\n         * @see https://nodejs.org/docs/latest-v22.x/api/globals.html#performanceobserverentrylist\n         * @since v19.0.0\n         */\n        var PerformanceObserverEntryList: typeof globalThis extends {\n            onmessage: any;\n            PerformanceObserverEntryList: infer T;\n        } ? T\n            : typeof _PerformanceObserverEntryList;\n        /**\n         * `PerformanceResourceTiming` is a global reference for `import { PerformanceResourceTiming } from 'node:perf_hooks'`\n         * @see https://nodejs.org/docs/latest-v22.x/api/globals.html#performanceresourcetiming\n         * @since v19.0.0\n         */\n        var PerformanceResourceTiming: typeof globalThis extends {\n            onmessage: any;\n            PerformanceResourceTiming: infer T;\n        } ? T\n            : typeof _PerformanceResourceTiming;\n        /**\n         * `performance` is a global reference for `import { performance } from 'node:perf_hooks'`\n         * @see https://nodejs.org/docs/latest-v22.x/api/globals.html#performance\n         * @since v16.0.0\n         */\n        var performance: typeof globalThis extends {\n            onmessage: any;\n            performance: infer T;\n        } ? T\n            : typeof _performance;\n    }\n}\ndeclare module \"node:perf_hooks\" {\n    export * from \"perf_hooks\";\n}\n",
  '@types/node/process.d.ts':
    'declare module "process" {\n    import * as tty from "node:tty";\n    import { Worker } from "node:worker_threads";\n\n    interface BuiltInModule {\n        "assert": typeof import("assert");\n        "node:assert": typeof import("node:assert");\n        "assert/strict": typeof import("assert/strict");\n        "node:assert/strict": typeof import("node:assert/strict");\n        "async_hooks": typeof import("async_hooks");\n        "node:async_hooks": typeof import("node:async_hooks");\n        "buffer": typeof import("buffer");\n        "node:buffer": typeof import("node:buffer");\n        "child_process": typeof import("child_process");\n        "node:child_process": typeof import("node:child_process");\n        "cluster": typeof import("cluster");\n        "node:cluster": typeof import("node:cluster");\n        "console": typeof import("console");\n        "node:console": typeof import("node:console");\n        "constants": typeof import("constants");\n        "node:constants": typeof import("node:constants");\n        "crypto": typeof import("crypto");\n        "node:crypto": typeof import("node:crypto");\n        "dgram": typeof import("dgram");\n        "node:dgram": typeof import("node:dgram");\n        "diagnostics_channel": typeof import("diagnostics_channel");\n        "node:diagnostics_channel": typeof import("node:diagnostics_channel");\n        "dns": typeof import("dns");\n        "node:dns": typeof import("node:dns");\n        "dns/promises": typeof import("dns/promises");\n        "node:dns/promises": typeof import("node:dns/promises");\n        "domain": typeof import("domain");\n        "node:domain": typeof import("node:domain");\n        "events": typeof import("events");\n        "node:events": typeof import("node:events");\n        "fs": typeof import("fs");\n        "node:fs": typeof import("node:fs");\n        "fs/promises": typeof import("fs/promises");\n        "node:fs/promises": typeof import("node:fs/promises");\n        "http": typeof import("http");\n        "node:http": typeof import("node:http");\n        "http2": typeof import("http2");\n        "node:http2": typeof import("node:http2");\n        "https": typeof import("https");\n        "node:https": typeof import("node:https");\n        "inspector": typeof import("inspector");\n        "node:inspector": typeof import("node:inspector");\n        "inspector/promises": typeof import("inspector/promises");\n        "node:inspector/promises": typeof import("node:inspector/promises");\n        "module": typeof import("module");\n        "node:module": typeof import("node:module");\n        "net": typeof import("net");\n        "node:net": typeof import("node:net");\n        "os": typeof import("os");\n        "node:os": typeof import("node:os");\n        "path": typeof import("path");\n        "node:path": typeof import("node:path");\n        "path/posix": typeof import("path/posix");\n        "node:path/posix": typeof import("node:path/posix");\n        "path/win32": typeof import("path/win32");\n        "node:path/win32": typeof import("node:path/win32");\n        "perf_hooks": typeof import("perf_hooks");\n        "node:perf_hooks": typeof import("node:perf_hooks");\n        "process": typeof import("process");\n        "node:process": typeof import("node:process");\n        "punycode": typeof import("punycode");\n        "node:punycode": typeof import("node:punycode");\n        "querystring": typeof import("querystring");\n        "node:querystring": typeof import("node:querystring");\n        "readline": typeof import("readline");\n        "node:readline": typeof import("node:readline");\n        "readline/promises": typeof import("readline/promises");\n        "node:readline/promises": typeof import("node:readline/promises");\n        "repl": typeof import("repl");\n        "node:repl": typeof import("node:repl");\n        "node:sea": typeof import("node:sea");\n        "node:sqlite": typeof import("node:sqlite");\n        "stream": typeof import("stream");\n        "node:stream": typeof import("node:stream");\n        "stream/consumers": typeof import("stream/consumers");\n        "node:stream/consumers": typeof import("node:stream/consumers");\n        "stream/promises": typeof import("stream/promises");\n        "node:stream/promises": typeof import("node:stream/promises");\n        "stream/web": typeof import("stream/web");\n        "node:stream/web": typeof import("node:stream/web");\n        "string_decoder": typeof import("string_decoder");\n        "node:string_decoder": typeof import("node:string_decoder");\n        "node:test": typeof import("node:test");\n        "node:test/reporters": typeof import("node:test/reporters");\n        "timers": typeof import("timers");\n        "node:timers": typeof import("node:timers");\n        "timers/promises": typeof import("timers/promises");\n        "node:timers/promises": typeof import("node:timers/promises");\n        "tls": typeof import("tls");\n        "node:tls": typeof import("node:tls");\n        "trace_events": typeof import("trace_events");\n        "node:trace_events": typeof import("node:trace_events");\n        "tty": typeof import("tty");\n        "node:tty": typeof import("node:tty");\n        "url": typeof import("url");\n        "node:url": typeof import("node:url");\n        "util": typeof import("util");\n        "node:util": typeof import("node:util");\n        "sys": typeof import("util");\n        "node:sys": typeof import("node:util");\n        "util/types": typeof import("util/types");\n        "node:util/types": typeof import("node:util/types");\n        "v8": typeof import("v8");\n        "node:v8": typeof import("node:v8");\n        "vm": typeof import("vm");\n        "node:vm": typeof import("node:vm");\n        "wasi": typeof import("wasi");\n        "node:wasi": typeof import("node:wasi");\n        "worker_threads": typeof import("worker_threads");\n        "node:worker_threads": typeof import("node:worker_threads");\n        "zlib": typeof import("zlib");\n        "node:zlib": typeof import("node:zlib");\n    }\n    global {\n        var process: NodeJS.Process;\n        namespace NodeJS {\n            // this namespace merge is here because these are specifically used\n            // as the type for process.stdin, process.stdout, and process.stderr.\n            // they can\'t live in tty.d.ts because we need to disambiguate the imported name.\n            interface ReadStream extends tty.ReadStream {}\n            interface WriteStream extends tty.WriteStream {}\n            interface MemoryUsageFn {\n                /**\n                 * The `process.memoryUsage()` method iterate over each page to gather informations about memory\n                 * usage which can be slow depending on the program memory allocations.\n                 */\n                (): MemoryUsage;\n                /**\n                 * method returns an integer representing the Resident Set Size (RSS) in bytes.\n                 */\n                rss(): number;\n            }\n            interface MemoryUsage {\n                /**\n                 * Resident Set Size, is the amount of space occupied in the main memory device (that is a subset of the total allocated memory) for the\n                 * process, including all C++ and JavaScript objects and code.\n                 */\n                rss: number;\n                /**\n                 * Refers to V8\'s memory usage.\n                 */\n                heapTotal: number;\n                /**\n                 * Refers to V8\'s memory usage.\n                 */\n                heapUsed: number;\n                external: number;\n                /**\n                 * Refers to memory allocated for `ArrayBuffer`s and `SharedArrayBuffer`s, including all Node.js Buffers. This is also included\n                 * in the external value. When Node.js is used as an embedded library, this value may be `0` because allocations for `ArrayBuffer`s\n                 * may not be tracked in that case.\n                 */\n                arrayBuffers: number;\n            }\n            interface CpuUsage {\n                user: number;\n                system: number;\n            }\n            interface ProcessRelease {\n                name: string;\n                sourceUrl?: string | undefined;\n                headersUrl?: string | undefined;\n                libUrl?: string | undefined;\n                lts?: string | undefined;\n            }\n            interface ProcessFeatures {\n                /**\n                 * A boolean value that is `true` if the current Node.js build is caching builtin modules.\n                 * @since v12.0.0\n                 */\n                readonly cached_builtins: boolean;\n                /**\n                 * A boolean value that is `true` if the current Node.js build is a debug build.\n                 * @since v0.5.5\n                 */\n                readonly debug: boolean;\n                /**\n                 * A boolean value that is `true` if the current Node.js build includes the inspector.\n                 * @since v11.10.0\n                 */\n                readonly inspector: boolean;\n                /**\n                 * A boolean value that is `true` if the current Node.js build includes support for IPv6.\n                 *\n                 * Since all Node.js builds have IPv6 support, this value is always `true`.\n                 * @since v0.5.3\n                 * @deprecated This property is always true, and any checks based on it are redundant.\n                 */\n                readonly ipv6: boolean;\n                /**\n                 * A boolean value that is `true` if the current Node.js build supports\n                 * [loading ECMAScript modules using `require()`](https://nodejs.org/docs/latest-v22.x/api/modules.md#loading-ecmascript-modules-using-require).\n                 * @since v22.10.0\n                 */\n                readonly require_module: boolean;\n                /**\n                 * A boolean value that is `true` if the current Node.js build includes support for TLS.\n                 * @since v0.5.3\n                 */\n                readonly tls: boolean;\n                /**\n                 * A boolean value that is `true` if the current Node.js build includes support for ALPN in TLS.\n                 *\n                 * In Node.js 11.0.0 and later versions, the OpenSSL dependencies feature unconditional ALPN support.\n                 * This value is therefore identical to that of `process.features.tls`.\n                 * @since v4.8.0\n                 * @deprecated Use `process.features.tls` instead.\n                 */\n                readonly tls_alpn: boolean;\n                /**\n                 * A boolean value that is `true` if the current Node.js build includes support for OCSP in TLS.\n                 *\n                 * In Node.js 11.0.0 and later versions, the OpenSSL dependencies feature unconditional OCSP support.\n                 * This value is therefore identical to that of `process.features.tls`.\n                 * @since v0.11.13\n                 * @deprecated Use `process.features.tls` instead.\n                 */\n                readonly tls_ocsp: boolean;\n                /**\n                 * A boolean value that is `true` if the current Node.js build includes support for SNI in TLS.\n                 *\n                 * In Node.js 11.0.0 and later versions, the OpenSSL dependencies feature unconditional SNI support.\n                 * This value is therefore identical to that of `process.features.tls`.\n                 * @since v0.5.3\n                 * @deprecated Use `process.features.tls` instead.\n                 */\n                readonly tls_sni: boolean;\n                /**\n                 * A value that is `"strip"` if Node.js is run with `--experimental-strip-types`,\n                 * `"transform"` if Node.js is run with `--experimental-transform-types`, and `false` otherwise.\n                 * @since v22.10.0\n                 */\n                readonly typescript: "strip" | "transform" | false;\n                /**\n                 * A boolean value that is `true` if the current Node.js build includes support for libuv.\n                 *\n                 * Since it\'s not possible to build Node.js without libuv, this value is always `true`.\n                 * @since v0.5.3\n                 * @deprecated This property is always true, and any checks based on it are redundant.\n                 */\n                readonly uv: boolean;\n            }\n            interface ProcessVersions extends Dict<string> {\n                http_parser: string;\n                node: string;\n                v8: string;\n                ares: string;\n                uv: string;\n                zlib: string;\n                modules: string;\n                openssl: string;\n            }\n            type Platform =\n                | "aix"\n                | "android"\n                | "darwin"\n                | "freebsd"\n                | "haiku"\n                | "linux"\n                | "openbsd"\n                | "sunos"\n                | "win32"\n                | "cygwin"\n                | "netbsd";\n            type Architecture =\n                | "arm"\n                | "arm64"\n                | "ia32"\n                | "loong64"\n                | "mips"\n                | "mipsel"\n                | "ppc"\n                | "ppc64"\n                | "riscv64"\n                | "s390"\n                | "s390x"\n                | "x64";\n            type Signals =\n                | "SIGABRT"\n                | "SIGALRM"\n                | "SIGBUS"\n                | "SIGCHLD"\n                | "SIGCONT"\n                | "SIGFPE"\n                | "SIGHUP"\n                | "SIGILL"\n                | "SIGINT"\n                | "SIGIO"\n                | "SIGIOT"\n                | "SIGKILL"\n                | "SIGPIPE"\n                | "SIGPOLL"\n                | "SIGPROF"\n                | "SIGPWR"\n                | "SIGQUIT"\n                | "SIGSEGV"\n                | "SIGSTKFLT"\n                | "SIGSTOP"\n                | "SIGSYS"\n                | "SIGTERM"\n                | "SIGTRAP"\n                | "SIGTSTP"\n                | "SIGTTIN"\n                | "SIGTTOU"\n                | "SIGUNUSED"\n                | "SIGURG"\n                | "SIGUSR1"\n                | "SIGUSR2"\n                | "SIGVTALRM"\n                | "SIGWINCH"\n                | "SIGXCPU"\n                | "SIGXFSZ"\n                | "SIGBREAK"\n                | "SIGLOST"\n                | "SIGINFO";\n            type UncaughtExceptionOrigin = "uncaughtException" | "unhandledRejection";\n            type MultipleResolveType = "resolve" | "reject";\n            type BeforeExitListener = (code: number) => void;\n            type DisconnectListener = () => void;\n            type ExitListener = (code: number) => void;\n            type RejectionHandledListener = (promise: Promise<unknown>) => void;\n            type UncaughtExceptionListener = (error: Error, origin: UncaughtExceptionOrigin) => void;\n            /**\n             * Most of the time the unhandledRejection will be an Error, but this should not be relied upon\n             * as *anything* can be thrown/rejected, it is therefore unsafe to assume that the value is an Error.\n             */\n            type UnhandledRejectionListener = (reason: unknown, promise: Promise<unknown>) => void;\n            type WarningListener = (warning: Error) => void;\n            type MessageListener = (message: unknown, sendHandle: unknown) => void;\n            type SignalsListener = (signal: Signals) => void;\n            type MultipleResolveListener = (\n                type: MultipleResolveType,\n                promise: Promise<unknown>,\n                value: unknown,\n            ) => void;\n            type WorkerListener = (worker: Worker) => void;\n            interface Socket extends ReadWriteStream {\n                isTTY?: true | undefined;\n            }\n            // Alias for compatibility\n            interface ProcessEnv extends Dict<string> {\n                /**\n                 * Can be used to change the default timezone at runtime\n                 */\n                TZ?: string;\n            }\n            interface HRTime {\n                /**\n                 * This is the legacy version of {@link process.hrtime.bigint()}\n                 * before bigint was introduced in JavaScript.\n                 *\n                 * The `process.hrtime()` method returns the current high-resolution real time in a `[seconds, nanoseconds]` tuple `Array`,\n                 * where `nanoseconds` is the remaining part of the real time that can\'t be represented in second precision.\n                 *\n                 * `time` is an optional parameter that must be the result of a previous `process.hrtime()` call to diff with the current time.\n                 * If the parameter passed in is not a tuple `Array`, a TypeError will be thrown.\n                 * Passing in a user-defined array instead of the result of a previous call to `process.hrtime()` will lead to undefined behavior.\n                 *\n                 * These times are relative to an arbitrary time in the past,\n                 * and not related to the time of day and therefore not subject to clock drift.\n                 * The primary use is for measuring performance between intervals:\n                 * ```js\n                 * const { hrtime } = require(\'node:process\');\n                 * const NS_PER_SEC = 1e9;\n                 * const time = hrtime();\n                 * // [ 1800216, 25 ]\n                 *\n                 * setTimeout(() => {\n                 *   const diff = hrtime(time);\n                 *   // [ 1, 552 ]\n                 *\n                 *   console.log(`Benchmark took ${diff[0] * NS_PER_SEC + diff[1]} nanoseconds`);\n                 *   // Benchmark took 1000000552 nanoseconds\n                 * }, 1000);\n                 * ```\n                 * @since 0.7.6\n                 * @legacy Use {@link process.hrtime.bigint()} instead.\n                 * @param time The result of a previous call to `process.hrtime()`\n                 */\n                (time?: [number, number]): [number, number];\n                /**\n                 * The `bigint` version of the {@link process.hrtime()} method returning the current high-resolution real time in nanoseconds as a `bigint`.\n                 *\n                 * Unlike {@link process.hrtime()}, it does not support an additional time argument since the difference can just be computed directly by subtraction of the two `bigint`s.\n                 * ```js\n                 * import { hrtime } from \'node:process\';\n                 *\n                 * const start = hrtime.bigint();\n                 * // 191051479007711n\n                 *\n                 * setTimeout(() => {\n                 *   const end = hrtime.bigint();\n                 *   // 191052633396993n\n                 *\n                 *   console.log(`Benchmark took ${end - start} nanoseconds`);\n                 *   // Benchmark took 1154389282 nanoseconds\n                 * }, 1000);\n                 * ```\n                 * @since v10.7.0\n                 */\n                bigint(): bigint;\n            }\n            interface ProcessPermission {\n                /**\n                 * Verifies that the process is able to access the given scope and reference.\n                 * If no reference is provided, a global scope is assumed, for instance, `process.permission.has(\'fs.read\')`\n                 * will check if the process has ALL file system read permissions.\n                 *\n                 * The reference has a meaning based on the provided scope. For example, the reference when the scope is File System means files and folders.\n                 *\n                 * The available scopes are:\n                 *\n                 * * `fs` - All File System\n                 * * `fs.read` - File System read operations\n                 * * `fs.write` - File System write operations\n                 * * `child` - Child process spawning operations\n                 * * `worker` - Worker thread spawning operation\n                 *\n                 * ```js\n                 * // Check if the process has permission to read the README file\n                 * process.permission.has(\'fs.read\', \'./README.md\');\n                 * // Check if the process has read permission operations\n                 * process.permission.has(\'fs.read\');\n                 * ```\n                 * @since v20.0.0\n                 */\n                has(scope: string, reference?: string): boolean;\n            }\n            interface ProcessReport {\n                /**\n                 * Write reports in a compact format, single-line JSON, more easily consumable by log processing systems\n                 * than the default multi-line format designed for human consumption.\n                 * @since v13.12.0, v12.17.0\n                 */\n                compact: boolean;\n                /**\n                 * Directory where the report is written.\n                 * The default value is the empty string, indicating that reports are written to the current\n                 * working directory of the Node.js process.\n                 */\n                directory: string;\n                /**\n                 * Filename where the report is written. If set to the empty string, the output filename will be comprised\n                 * of a timestamp, PID, and sequence number. The default value is the empty string.\n                 */\n                filename: string;\n                /**\n                 * Returns a JavaScript Object representation of a diagnostic report for the running process.\n                 * The report\'s JavaScript stack trace is taken from `err`, if present.\n                 */\n                getReport(err?: Error): object;\n                /**\n                 * If true, a diagnostic report is generated on fatal errors,\n                 * such as out of memory errors or failed C++ assertions.\n                 * @default false\n                 */\n                reportOnFatalError: boolean;\n                /**\n                 * If true, a diagnostic report is generated when the process\n                 * receives the signal specified by process.report.signal.\n                 * @default false\n                 */\n                reportOnSignal: boolean;\n                /**\n                 * If true, a diagnostic report is generated on uncaught exception.\n                 * @default false\n                 */\n                reportOnUncaughtException: boolean;\n                /**\n                 * The signal used to trigger the creation of a diagnostic report.\n                 * @default \'SIGUSR2\'\n                 */\n                signal: Signals;\n                /**\n                 * Writes a diagnostic report to a file. If filename is not provided, the default filename\n                 * includes the date, time, PID, and a sequence number.\n                 * The report\'s JavaScript stack trace is taken from `err`, if present.\n                 *\n                 * If the value of filename is set to `\'stdout\'` or `\'stderr\'`, the report is written\n                 * to the stdout or stderr of the process respectively.\n                 * @param fileName Name of the file where the report is written.\n                 * This should be a relative path, that will be appended to the directory specified in\n                 * `process.report.directory`, or the current working directory of the Node.js process,\n                 * if unspecified.\n                 * @param err A custom error used for reporting the JavaScript stack.\n                 * @return Filename of the generated report.\n                 */\n                writeReport(fileName?: string, err?: Error): string;\n                writeReport(err?: Error): string;\n            }\n            interface ResourceUsage {\n                fsRead: number;\n                fsWrite: number;\n                involuntaryContextSwitches: number;\n                ipcReceived: number;\n                ipcSent: number;\n                majorPageFault: number;\n                maxRSS: number;\n                minorPageFault: number;\n                sharedMemorySize: number;\n                signalsCount: number;\n                swappedOut: number;\n                systemCPUTime: number;\n                unsharedDataSize: number;\n                unsharedStackSize: number;\n                userCPUTime: number;\n                voluntaryContextSwitches: number;\n            }\n            interface EmitWarningOptions {\n                /**\n                 * When `warning` is a `string`, `type` is the name to use for the _type_ of warning being emitted.\n                 *\n                 * @default \'Warning\'\n                 */\n                type?: string | undefined;\n                /**\n                 * A unique identifier for the warning instance being emitted.\n                 */\n                code?: string | undefined;\n                /**\n                 * When `warning` is a `string`, `ctor` is an optional function used to limit the generated stack trace.\n                 *\n                 * @default process.emitWarning\n                 */\n                ctor?: Function | undefined;\n                /**\n                 * Additional text to include with the error.\n                 */\n                detail?: string | undefined;\n            }\n            interface ProcessConfig {\n                readonly target_defaults: {\n                    readonly cflags: any[];\n                    readonly default_configuration: string;\n                    readonly defines: string[];\n                    readonly include_dirs: string[];\n                    readonly libraries: string[];\n                };\n                readonly variables: {\n                    readonly clang: number;\n                    readonly host_arch: string;\n                    readonly node_install_npm: boolean;\n                    readonly node_install_waf: boolean;\n                    readonly node_prefix: string;\n                    readonly node_shared_openssl: boolean;\n                    readonly node_shared_v8: boolean;\n                    readonly node_shared_zlib: boolean;\n                    readonly node_use_dtrace: boolean;\n                    readonly node_use_etw: boolean;\n                    readonly node_use_openssl: boolean;\n                    readonly target_arch: string;\n                    readonly v8_no_strict_aliasing: number;\n                    readonly v8_use_snapshot: boolean;\n                    readonly visibility: string;\n                };\n            }\n            interface Process extends EventEmitter {\n                /**\n                 * The `process.stdout` property returns a stream connected to`stdout` (fd `1`). It is a `net.Socket` (which is a `Duplex` stream) unless fd `1` refers to a file, in which case it is\n                 * a `Writable` stream.\n                 *\n                 * For example, to copy `process.stdin` to `process.stdout`:\n                 *\n                 * ```js\n                 * import { stdin, stdout } from \'node:process\';\n                 *\n                 * stdin.pipe(stdout);\n                 * ```\n                 *\n                 * `process.stdout` differs from other Node.js streams in important ways. See `note on process I/O` for more information.\n                 */\n                stdout: WriteStream & {\n                    fd: 1;\n                };\n                /**\n                 * The `process.stderr` property returns a stream connected to`stderr` (fd `2`). It is a `net.Socket` (which is a `Duplex` stream) unless fd `2` refers to a file, in which case it is\n                 * a `Writable` stream.\n                 *\n                 * `process.stderr` differs from other Node.js streams in important ways. See `note on process I/O` for more information.\n                 */\n                stderr: WriteStream & {\n                    fd: 2;\n                };\n                /**\n                 * The `process.stdin` property returns a stream connected to`stdin` (fd `0`). It is a `net.Socket` (which is a `Duplex` stream) unless fd `0` refers to a file, in which case it is\n                 * a `Readable` stream.\n                 *\n                 * For details of how to read from `stdin` see `readable.read()`.\n                 *\n                 * As a `Duplex` stream, `process.stdin` can also be used in "old" mode that\n                 * is compatible with scripts written for Node.js prior to v0.10\\.\n                 * For more information see `Stream compatibility`.\n                 *\n                 * In "old" streams mode the `stdin` stream is paused by default, so one\n                 * must call `process.stdin.resume()` to read from it. Note also that calling `process.stdin.resume()` itself would switch stream to "old" mode.\n                 */\n                stdin: ReadStream & {\n                    fd: 0;\n                };\n                /**\n                 * The `process.argv` property returns an array containing the command-line\n                 * arguments passed when the Node.js process was launched. The first element will\n                 * be {@link execPath}. See `process.argv0` if access to the original value\n                 * of `argv[0]` is needed. The second element will be the path to the JavaScript\n                 * file being executed. The remaining elements will be any additional command-line\n                 * arguments.\n                 *\n                 * For example, assuming the following script for `process-args.js`:\n                 *\n                 * ```js\n                 * import { argv } from \'node:process\';\n                 *\n                 * // print process.argv\n                 * argv.forEach((val, index) => {\n                 *   console.log(`${index}: ${val}`);\n                 * });\n                 * ```\n                 *\n                 * Launching the Node.js process as:\n                 *\n                 * ```bash\n                 * node process-args.js one two=three four\n                 * ```\n                 *\n                 * Would generate the output:\n                 *\n                 * ```text\n                 * 0: /usr/local/bin/node\n                 * 1: /Users/mjr/work/node/process-args.js\n                 * 2: one\n                 * 3: two=three\n                 * 4: four\n                 * ```\n                 * @since v0.1.27\n                 */\n                argv: string[];\n                /**\n                 * The `process.argv0` property stores a read-only copy of the original value of`argv[0]` passed when Node.js starts.\n                 *\n                 * ```console\n                 * $ bash -c \'exec -a customArgv0 ./node\'\n                 * > process.argv[0]\n                 * \'/Volumes/code/external/node/out/Release/node\'\n                 * > process.argv0\n                 * \'customArgv0\'\n                 * ```\n                 * @since v6.4.0\n                 */\n                argv0: string;\n                /**\n                 * The `process.execArgv` property returns the set of Node.js-specific command-line\n                 * options passed when the Node.js process was launched. These options do not\n                 * appear in the array returned by the {@link argv} property, and do not\n                 * include the Node.js executable, the name of the script, or any options following\n                 * the script name. These options are useful in order to spawn child processes with\n                 * the same execution environment as the parent.\n                 *\n                 * ```bash\n                 * node --icu-data-dir=./foo --require ./bar.js script.js --version\n                 * ```\n                 *\n                 * Results in `process.execArgv`:\n                 *\n                 * ```js\n                 * ["--icu-data-dir=./foo", "--require", "./bar.js"]\n                 * ```\n                 *\n                 * And `process.argv`:\n                 *\n                 * ```js\n                 * [\'/usr/local/bin/node\', \'script.js\', \'--version\']\n                 * ```\n                 *\n                 * Refer to `Worker constructor` for the detailed behavior of worker\n                 * threads with this property.\n                 * @since v0.7.7\n                 */\n                execArgv: string[];\n                /**\n                 * The `process.execPath` property returns the absolute pathname of the executable\n                 * that started the Node.js process. Symbolic links, if any, are resolved.\n                 *\n                 * ```js\n                 * \'/usr/local/bin/node\'\n                 * ```\n                 * @since v0.1.100\n                 */\n                execPath: string;\n                /**\n                 * The `process.abort()` method causes the Node.js process to exit immediately and\n                 * generate a core file.\n                 *\n                 * This feature is not available in `Worker` threads.\n                 * @since v0.7.0\n                 */\n                abort(): never;\n                /**\n                 * The `process.chdir()` method changes the current working directory of the\n                 * Node.js process or throws an exception if doing so fails (for instance, if\n                 * the specified `directory` does not exist).\n                 *\n                 * ```js\n                 * import { chdir, cwd } from \'node:process\';\n                 *\n                 * console.log(`Starting directory: ${cwd()}`);\n                 * try {\n                 *   chdir(\'/tmp\');\n                 *   console.log(`New directory: ${cwd()}`);\n                 * } catch (err) {\n                 *   console.error(`chdir: ${err}`);\n                 * }\n                 * ```\n                 *\n                 * This feature is not available in `Worker` threads.\n                 * @since v0.1.17\n                 */\n                chdir(directory: string): void;\n                /**\n                 * The `process.cwd()` method returns the current working directory of the Node.js\n                 * process.\n                 *\n                 * ```js\n                 * import { cwd } from \'node:process\';\n                 *\n                 * console.log(`Current directory: ${cwd()}`);\n                 * ```\n                 * @since v0.1.8\n                 */\n                cwd(): string;\n                /**\n                 * The port used by the Node.js debugger when enabled.\n                 *\n                 * ```js\n                 * import process from \'node:process\';\n                 *\n                 * process.debugPort = 5858;\n                 * ```\n                 * @since v0.7.2\n                 */\n                debugPort: number;\n                /**\n                 * The `process.dlopen()` method allows dynamically loading shared objects. It is primarily used by `require()` to load C++ Addons, and\n                 * should not be used directly, except in special cases. In other words, `require()` should be preferred over `process.dlopen()`\n                 * unless there are specific reasons such as custom dlopen flags or loading from ES modules.\n                 *\n                 * The `flags` argument is an integer that allows to specify dlopen behavior. See the `[os.constants.dlopen](https://nodejs.org/docs/latest-v22.x/api/os.html#dlopen-constants)`\n                 * documentation for details.\n                 *\n                 * An important requirement when calling `process.dlopen()` is that the `module` instance must be passed. Functions exported by the C++ Addon\n                 * are then accessible via `module.exports`.\n                 *\n                 * The example below shows how to load a C++ Addon, named `local.node`, that exports a `foo` function. All the symbols are loaded before the call returns, by passing the `RTLD_NOW` constant.\n                 * In this example the constant is assumed to be available.\n                 *\n                 * ```js\n                 * import { dlopen } from \'node:process\';\n                 * import { constants } from \'node:os\';\n                 * import { fileURLToPath } from \'node:url\';\n                 *\n                 * const module = { exports: {} };\n                 * dlopen(module, fileURLToPath(new URL(\'local.node\', import.meta.url)),\n                 *        constants.dlopen.RTLD_NOW);\n                 * module.exports.foo();\n                 * ```\n                 */\n                dlopen(module: object, filename: string, flags?: number): void;\n                /**\n                 * The `process.emitWarning()` method can be used to emit custom or application\n                 * specific process warnings. These can be listened for by adding a handler to the `\'warning\'` event.\n                 *\n                 * ```js\n                 * import { emitWarning } from \'node:process\';\n                 *\n                 * // Emit a warning using a string.\n                 * emitWarning(\'Something happened!\');\n                 * // Emits: (node: 56338) Warning: Something happened!\n                 * ```\n                 *\n                 * ```js\n                 * import { emitWarning } from \'node:process\';\n                 *\n                 * // Emit a warning using a string and a type.\n                 * emitWarning(\'Something Happened!\', \'CustomWarning\');\n                 * // Emits: (node:56338) CustomWarning: Something Happened!\n                 * ```\n                 *\n                 * ```js\n                 * import { emitWarning } from \'node:process\';\n                 *\n                 * emitWarning(\'Something happened!\', \'CustomWarning\', \'WARN001\');\n                 * // Emits: (node:56338) [WARN001] CustomWarning: Something happened!\n                 * ```js\n                 *\n                 * In each of the previous examples, an `Error` object is generated internally by `process.emitWarning()` and passed through to the `\'warning\'` handler.\n                 *\n                 * ```js\n                 * import process from \'node:process\';\n                 *\n                 * process.on(\'warning\', (warning) => {\n                 *   console.warn(warning.name);    // \'Warning\'\n                 *   console.warn(warning.message); // \'Something happened!\'\n                 *   console.warn(warning.code);    // \'MY_WARNING\'\n                 *   console.warn(warning.stack);   // Stack trace\n                 *   console.warn(warning.detail);  // \'This is some additional information\'\n                 * });\n                 * ```\n                 *\n                 * If `warning` is passed as an `Error` object, it will be passed through to the `\'warning\'` event handler\n                 * unmodified (and the optional `type`, `code` and `ctor` arguments will be ignored):\n                 *\n                 * ```js\n                 * import { emitWarning } from \'node:process\';\n                 *\n                 * // Emit a warning using an Error object.\n                 * const myWarning = new Error(\'Something happened!\');\n                 * // Use the Error name property to specify the type name\n                 * myWarning.name = \'CustomWarning\';\n                 * myWarning.code = \'WARN001\';\n                 *\n                 * emitWarning(myWarning);\n                 * // Emits: (node:56338) [WARN001] CustomWarning: Something happened!\n                 * ```\n                 *\n                 * A `TypeError` is thrown if `warning` is anything other than a string or `Error` object.\n                 *\n                 * While process warnings use `Error` objects, the process warning mechanism is not a replacement for normal error handling mechanisms.\n                 *\n                 * The following additional handling is implemented if the warning `type` is `\'DeprecationWarning\'`:\n                 * * If the `--throw-deprecation` command-line flag is used, the deprecation warning is thrown as an exception rather than being emitted as an event.\n                 * * If the `--no-deprecation` command-line flag is used, the deprecation warning is suppressed.\n                 * * If the `--trace-deprecation` command-line flag is used, the deprecation warning is printed to `stderr` along with the full stack trace.\n                 * @since v8.0.0\n                 * @param warning The warning to emit.\n                 */\n                emitWarning(warning: string | Error, ctor?: Function): void;\n                emitWarning(warning: string | Error, type?: string, ctor?: Function): void;\n                emitWarning(warning: string | Error, type?: string, code?: string, ctor?: Function): void;\n                emitWarning(warning: string | Error, options?: EmitWarningOptions): void;\n                /**\n                 * The `process.env` property returns an object containing the user environment.\n                 * See [`environ(7)`](http://man7.org/linux/man-pages/man7/environ.7.html).\n                 *\n                 * An example of this object looks like:\n                 *\n                 * ```js\n                 * {\n                 *   TERM: \'xterm-256color\',\n                 *   SHELL: \'/usr/local/bin/bash\',\n                 *   USER: \'maciej\',\n                 *   PATH: \'~/.bin/:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin\',\n                 *   PWD: \'/Users/maciej\',\n                 *   EDITOR: \'vim\',\n                 *   SHLVL: \'1\',\n                 *   HOME: \'/Users/maciej\',\n                 *   LOGNAME: \'maciej\',\n                 *   _: \'/usr/local/bin/node\'\n                 * }\n                 * ```\n                 *\n                 * It is possible to modify this object, but such modifications will not be\n                 * reflected outside the Node.js process, or (unless explicitly requested)\n                 * to other `Worker` threads.\n                 * In other words, the following example would not work:\n                 *\n                 * ```bash\n                 * node -e \'process.env.foo = "bar"\' &#x26;&#x26; echo $foo\n                 * ```\n                 *\n                 * While the following will:\n                 *\n                 * ```js\n                 * import { env } from \'node:process\';\n                 *\n                 * env.foo = \'bar\';\n                 * console.log(env.foo);\n                 * ```\n                 *\n                 * Assigning a property on `process.env` will implicitly convert the value\n                 * to a string. **This behavior is deprecated.** Future versions of Node.js may\n                 * throw an error when the value is not a string, number, or boolean.\n                 *\n                 * ```js\n                 * import { env } from \'node:process\';\n                 *\n                 * env.test = null;\n                 * console.log(env.test);\n                 * // => \'null\'\n                 * env.test = undefined;\n                 * console.log(env.test);\n                 * // => \'undefined\'\n                 * ```\n                 *\n                 * Use `delete` to delete a property from `process.env`.\n                 *\n                 * ```js\n                 * import { env } from \'node:process\';\n                 *\n                 * env.TEST = 1;\n                 * delete env.TEST;\n                 * console.log(env.TEST);\n                 * // => undefined\n                 * ```\n                 *\n                 * On Windows operating systems, environment variables are case-insensitive.\n                 *\n                 * ```js\n                 * import { env } from \'node:process\';\n                 *\n                 * env.TEST = 1;\n                 * console.log(env.test);\n                 * // => 1\n                 * ```\n                 *\n                 * Unless explicitly specified when creating a `Worker` instance,\n                 * each `Worker` thread has its own copy of `process.env`, based on its\n                 * parent thread\'s `process.env`, or whatever was specified as the `env` option\n                 * to the `Worker` constructor. Changes to `process.env` will not be visible\n                 * across `Worker` threads, and only the main thread can make changes that\n                 * are visible to the operating system or to native add-ons. On Windows, a copy of `process.env` on a `Worker` instance operates in a case-sensitive manner\n                 * unlike the main thread.\n                 * @since v0.1.27\n                 */\n                env: ProcessEnv;\n                /**\n                 * The `process.exit()` method instructs Node.js to terminate the process\n                 * synchronously with an exit status of `code`. If `code` is omitted, exit uses\n                 * either the \'success\' code `0` or the value of `process.exitCode` if it has been\n                 * set. Node.js will not terminate until all the `\'exit\'` event listeners are\n                 * called.\n                 *\n                 * To exit with a \'failure\' code:\n                 *\n                 * ```js\n                 * import { exit } from \'node:process\';\n                 *\n                 * exit(1);\n                 * ```\n                 *\n                 * The shell that executed Node.js should see the exit code as `1`.\n                 *\n                 * Calling `process.exit()` will force the process to exit as quickly as possible\n                 * even if there are still asynchronous operations pending that have not yet\n                 * completed fully, including I/O operations to `process.stdout` and `process.stderr`.\n                 *\n                 * In most situations, it is not actually necessary to call `process.exit()` explicitly. The Node.js process will exit on its own _if there is no additional_\n                 * _work pending_ in the event loop. The `process.exitCode` property can be set to\n                 * tell the process which exit code to use when the process exits gracefully.\n                 *\n                 * For instance, the following example illustrates a _misuse_ of the `process.exit()` method that could lead to data printed to stdout being\n                 * truncated and lost:\n                 *\n                 * ```js\n                 * import { exit } from \'node:process\';\n                 *\n                 * // This is an example of what *not* to do:\n                 * if (someConditionNotMet()) {\n                 *   printUsageToStdout();\n                 *   exit(1);\n                 * }\n                 * ```\n                 *\n                 * The reason this is problematic is because writes to `process.stdout` in Node.js\n                 * are sometimes _asynchronous_ and may occur over multiple ticks of the Node.js\n                 * event loop. Calling `process.exit()`, however, forces the process to exit _before_ those additional writes to `stdout` can be performed.\n                 *\n                 * Rather than calling `process.exit()` directly, the code _should_ set the `process.exitCode` and allow the process to exit naturally by avoiding\n                 * scheduling any additional work for the event loop:\n                 *\n                 * ```js\n                 * import process from \'node:process\';\n                 *\n                 * // How to properly set the exit code while letting\n                 * // the process exit gracefully.\n                 * if (someConditionNotMet()) {\n                 *   printUsageToStdout();\n                 *   process.exitCode = 1;\n                 * }\n                 * ```\n                 *\n                 * If it is necessary to terminate the Node.js process due to an error condition,\n                 * throwing an _uncaught_ error and allowing the process to terminate accordingly\n                 * is safer than calling `process.exit()`.\n                 *\n                 * In `Worker` threads, this function stops the current thread rather\n                 * than the current process.\n                 * @since v0.1.13\n                 * @param [code=0] The exit code. For string type, only integer strings (e.g.,\'1\') are allowed.\n                 */\n                exit(code?: number | string | null | undefined): never;\n                /**\n                 * A number which will be the process exit code, when the process either\n                 * exits gracefully, or is exited via {@link exit} without specifying\n                 * a code.\n                 *\n                 * Specifying a code to {@link exit} will override any\n                 * previous setting of `process.exitCode`.\n                 * @default undefined\n                 * @since v0.11.8\n                 */\n                exitCode?: number | string | number | undefined;\n                finalization: {\n                    /**\n                     * This function registers a callback to be called when the process emits the `exit` event if the `ref` object was not garbage collected.\n                     * If the object `ref` was garbage collected before the `exit` event is emitted, the callback will be removed from the finalization registry, and it will not be called on process exit.\n                     *\n                     * Inside the callback you can release the resources allocated by the `ref` object.\n                     * Be aware that all limitations applied to the `beforeExit` event are also applied to the callback function,\n                     * this means that there is a possibility that the callback will not be called under special circumstances.\n                     *\n                     * The idea of ​​this function is to help you free up resources when the starts process exiting, but also let the object be garbage collected if it is no longer being used.\n                     * @param ref The reference to the resource that is being tracked.\n                     * @param callback The callback function to be called when the resource is finalized.\n                     * @since v22.5.0\n                     * @experimental\n                     */\n                    register<T extends object>(ref: T, callback: (ref: T, event: "exit") => void): void;\n                    /**\n                     * This function behaves exactly like the `register`, except that the callback will be called when the process emits the `beforeExit` event if `ref` object was not garbage collected.\n                     *\n                     * Be aware that all limitations applied to the `beforeExit` event are also applied to the callback function, this means that there is a possibility that the callback will not be called under special circumstances.\n                     * @param ref The reference to the resource that is being tracked.\n                     * @param callback The callback function to be called when the resource is finalized.\n                     * @since v22.5.0\n                     * @experimental\n                     */\n                    registerBeforeExit<T extends object>(ref: T, callback: (ref: T, event: "beforeExit") => void): void;\n                    /**\n                     * This function remove the register of the object from the finalization registry, so the callback will not be called anymore.\n                     * @param ref The reference to the resource that was registered previously.\n                     * @since v22.5.0\n                     * @experimental\n                     */\n                    unregister(ref: object): void;\n                };\n                /**\n                 * The `process.getActiveResourcesInfo()` method returns an array of strings containing\n                 * the types of the active resources that are currently keeping the event loop alive.\n                 *\n                 * ```js\n                 * import { getActiveResourcesInfo } from \'node:process\';\n                 * import { setTimeout } from \'node:timers\';\n\n                 * console.log(\'Before:\', getActiveResourcesInfo());\n                 * setTimeout(() => {}, 1000);\n                 * console.log(\'After:\', getActiveResourcesInfo());\n                 * // Prints:\n                 * //   Before: [ \'TTYWrap\', \'TTYWrap\', \'TTYWrap\' ]\n                 * //   After: [ \'TTYWrap\', \'TTYWrap\', \'TTYWrap\', \'Timeout\' ]\n                 * ```\n                 * @since v17.3.0, v16.14.0\n                 */\n                getActiveResourcesInfo(): string[];\n                /**\n                 * Provides a way to load built-in modules in a globally available function.\n                 * @param id ID of the built-in module being requested.\n                 */\n                getBuiltinModule<ID extends keyof BuiltInModule>(id: ID): BuiltInModule[ID];\n                getBuiltinModule(id: string): object | undefined;\n                /**\n                 * The `process.getgid()` method returns the numerical group identity of the\n                 * process. (See [`getgid(2)`](http://man7.org/linux/man-pages/man2/getgid.2.html).)\n                 *\n                 * ```js\n                 * import process from \'node:process\';\n                 *\n                 * if (process.getgid) {\n                 *   console.log(`Current gid: ${process.getgid()}`);\n                 * }\n                 * ```\n                 *\n                 * This function is only available on POSIX platforms (i.e. not Windows or\n                 * Android).\n                 * @since v0.1.31\n                 */\n                getgid?: () => number;\n                /**\n                 * The `process.setgid()` method sets the group identity of the process. (See [`setgid(2)`](http://man7.org/linux/man-pages/man2/setgid.2.html).) The `id` can be passed as either a\n                 * numeric ID or a group name\n                 * string. If a group name is specified, this method blocks while resolving the\n                 * associated numeric ID.\n                 *\n                 * ```js\n                 * import process from \'node:process\';\n                 *\n                 * if (process.getgid &#x26;&#x26; process.setgid) {\n                 *   console.log(`Current gid: ${process.getgid()}`);\n                 *   try {\n                 *     process.setgid(501);\n                 *     console.log(`New gid: ${process.getgid()}`);\n                 *   } catch (err) {\n                 *     console.log(`Failed to set gid: ${err}`);\n                 *   }\n                 * }\n                 * ```\n                 *\n                 * This function is only available on POSIX platforms (i.e. not Windows or\n                 * Android).\n                 * This feature is not available in `Worker` threads.\n                 * @since v0.1.31\n                 * @param id The group name or ID\n                 */\n                setgid?: (id: number | string) => void;\n                /**\n                 * The `process.getuid()` method returns the numeric user identity of the process.\n                 * (See [`getuid(2)`](http://man7.org/linux/man-pages/man2/getuid.2.html).)\n                 *\n                 * ```js\n                 * import process from \'node:process\';\n                 *\n                 * if (process.getuid) {\n                 *   console.log(`Current uid: ${process.getuid()}`);\n                 * }\n                 * ```\n                 *\n                 * This function is only available on POSIX platforms (i.e. not Windows or\n                 * Android).\n                 * @since v0.1.28\n                 */\n                getuid?: () => number;\n                /**\n                 * The `process.setuid(id)` method sets the user identity of the process. (See [`setuid(2)`](http://man7.org/linux/man-pages/man2/setuid.2.html).) The `id` can be passed as either a\n                 * numeric ID or a username string.\n                 * If a username is specified, the method blocks while resolving the associated\n                 * numeric ID.\n                 *\n                 * ```js\n                 * import process from \'node:process\';\n                 *\n                 * if (process.getuid &#x26;&#x26; process.setuid) {\n                 *   console.log(`Current uid: ${process.getuid()}`);\n                 *   try {\n                 *     process.setuid(501);\n                 *     console.log(`New uid: ${process.getuid()}`);\n                 *   } catch (err) {\n                 *     console.log(`Failed to set uid: ${err}`);\n                 *   }\n                 * }\n                 * ```\n                 *\n                 * This function is only available on POSIX platforms (i.e. not Windows or\n                 * Android).\n                 * This feature is not available in `Worker` threads.\n                 * @since v0.1.28\n                 */\n                setuid?: (id: number | string) => void;\n                /**\n                 * The `process.geteuid()` method returns the numerical effective user identity of\n                 * the process. (See [`geteuid(2)`](http://man7.org/linux/man-pages/man2/geteuid.2.html).)\n                 *\n                 * ```js\n                 * import process from \'node:process\';\n                 *\n                 * if (process.geteuid) {\n                 *   console.log(`Current uid: ${process.geteuid()}`);\n                 * }\n                 * ```\n                 *\n                 * This function is only available on POSIX platforms (i.e. not Windows or\n                 * Android).\n                 * @since v2.0.0\n                 */\n                geteuid?: () => number;\n                /**\n                 * The `process.seteuid()` method sets the effective user identity of the process.\n                 * (See [`seteuid(2)`](http://man7.org/linux/man-pages/man2/seteuid.2.html).) The `id` can be passed as either a numeric ID or a username\n                 * string. If a username is specified, the method blocks while resolving the\n                 * associated numeric ID.\n                 *\n                 * ```js\n                 * import process from \'node:process\';\n                 *\n                 * if (process.geteuid &#x26;&#x26; process.seteuid) {\n                 *   console.log(`Current uid: ${process.geteuid()}`);\n                 *   try {\n                 *     process.seteuid(501);\n                 *     console.log(`New uid: ${process.geteuid()}`);\n                 *   } catch (err) {\n                 *     console.log(`Failed to set uid: ${err}`);\n                 *   }\n                 * }\n                 * ```\n                 *\n                 * This function is only available on POSIX platforms (i.e. not Windows or\n                 * Android).\n                 * This feature is not available in `Worker` threads.\n                 * @since v2.0.0\n                 * @param id A user name or ID\n                 */\n                seteuid?: (id: number | string) => void;\n                /**\n                 * The `process.getegid()` method returns the numerical effective group identity\n                 * of the Node.js process. (See [`getegid(2)`](http://man7.org/linux/man-pages/man2/getegid.2.html).)\n                 *\n                 * ```js\n                 * import process from \'node:process\';\n                 *\n                 * if (process.getegid) {\n                 *   console.log(`Current gid: ${process.getegid()}`);\n                 * }\n                 * ```\n                 *\n                 * This function is only available on POSIX platforms (i.e. not Windows or\n                 * Android).\n                 * @since v2.0.0\n                 */\n                getegid?: () => number;\n                /**\n                 * The `process.setegid()` method sets the effective group identity of the process.\n                 * (See [`setegid(2)`](http://man7.org/linux/man-pages/man2/setegid.2.html).) The `id` can be passed as either a numeric ID or a group\n                 * name string. If a group name is specified, this method blocks while resolving\n                 * the associated a numeric ID.\n                 *\n                 * ```js\n                 * import process from \'node:process\';\n                 *\n                 * if (process.getegid &#x26;&#x26; process.setegid) {\n                 *   console.log(`Current gid: ${process.getegid()}`);\n                 *   try {\n                 *     process.setegid(501);\n                 *     console.log(`New gid: ${process.getegid()}`);\n                 *   } catch (err) {\n                 *     console.log(`Failed to set gid: ${err}`);\n                 *   }\n                 * }\n                 * ```\n                 *\n                 * This function is only available on POSIX platforms (i.e. not Windows or\n                 * Android).\n                 * This feature is not available in `Worker` threads.\n                 * @since v2.0.0\n                 * @param id A group name or ID\n                 */\n                setegid?: (id: number | string) => void;\n                /**\n                 * The `process.getgroups()` method returns an array with the supplementary group\n                 * IDs. POSIX leaves it unspecified if the effective group ID is included but\n                 * Node.js ensures it always is.\n                 *\n                 * ```js\n                 * import process from \'node:process\';\n                 *\n                 * if (process.getgroups) {\n                 *   console.log(process.getgroups()); // [ 16, 21, 297 ]\n                 * }\n                 * ```\n                 *\n                 * This function is only available on POSIX platforms (i.e. not Windows or\n                 * Android).\n                 * @since v0.9.4\n                 */\n                getgroups?: () => number[];\n                /**\n                 * The `process.setgroups()` method sets the supplementary group IDs for the\n                 * Node.js process. This is a privileged operation that requires the Node.js\n                 * process to have `root` or the `CAP_SETGID` capability.\n                 *\n                 * The `groups` array can contain numeric group IDs, group names, or both.\n                 *\n                 * ```js\n                 * import process from \'node:process\';\n                 *\n                 * if (process.getgroups &#x26;&#x26; process.setgroups) {\n                 *   try {\n                 *     process.setgroups([501]);\n                 *     console.log(process.getgroups()); // new groups\n                 *   } catch (err) {\n                 *     console.log(`Failed to set groups: ${err}`);\n                 *   }\n                 * }\n                 * ```\n                 *\n                 * This function is only available on POSIX platforms (i.e. not Windows or\n                 * Android).\n                 * This feature is not available in `Worker` threads.\n                 * @since v0.9.4\n                 */\n                setgroups?: (groups: ReadonlyArray<string | number>) => void;\n                /**\n                 * The `process.setUncaughtExceptionCaptureCallback()` function sets a function\n                 * that will be invoked when an uncaught exception occurs, which will receive the\n                 * exception value itself as its first argument.\n                 *\n                 * If such a function is set, the `\'uncaughtException\'` event will\n                 * not be emitted. If `--abort-on-uncaught-exception` was passed from the\n                 * command line or set through `v8.setFlagsFromString()`, the process will\n                 * not abort. Actions configured to take place on exceptions such as report\n                 * generations will be affected too\n                 *\n                 * To unset the capture function, `process.setUncaughtExceptionCaptureCallback(null)` may be used. Calling this\n                 * method with a non-`null` argument while another capture function is set will\n                 * throw an error.\n                 *\n                 * Using this function is mutually exclusive with using the deprecated `domain` built-in module.\n                 * @since v9.3.0\n                 */\n                setUncaughtExceptionCaptureCallback(cb: ((err: Error) => void) | null): void;\n                /**\n                 * Indicates whether a callback has been set using {@link setUncaughtExceptionCaptureCallback}.\n                 * @since v9.3.0\n                 */\n                hasUncaughtExceptionCaptureCallback(): boolean;\n                /**\n                 * The `process.sourceMapsEnabled` property returns whether the [Source Map v3](https://sourcemaps.info/spec.html) support for stack traces is enabled.\n                 * @since v20.7.0\n                 * @experimental\n                 */\n                readonly sourceMapsEnabled: boolean;\n                /**\n                 * This function enables or disables the [Source Map v3](https://sourcemaps.info/spec.html) support for\n                 * stack traces.\n                 *\n                 * It provides same features as launching Node.js process with commandline options `--enable-source-maps`.\n                 *\n                 * Only source maps in JavaScript files that are loaded after source maps has been\n                 * enabled will be parsed and loaded.\n                 * @since v16.6.0, v14.18.0\n                 * @experimental\n                 */\n                setSourceMapsEnabled(value: boolean): void;\n                /**\n                 * The `process.version` property contains the Node.js version string.\n                 *\n                 * ```js\n                 * import { version } from \'node:process\';\n                 *\n                 * console.log(`Version: ${version}`);\n                 * // Version: v14.8.0\n                 * ```\n                 *\n                 * To get the version string without the prepended _v_, use`process.versions.node`.\n                 * @since v0.1.3\n                 */\n                readonly version: string;\n                /**\n                 * The `process.versions` property returns an object listing the version strings of\n                 * Node.js and its dependencies. `process.versions.modules` indicates the current\n                 * ABI version, which is increased whenever a C++ API changes. Node.js will refuse\n                 * to load modules that were compiled against a different module ABI version.\n                 *\n                 * ```js\n                 * import { versions } from \'node:process\';\n                 *\n                 * console.log(versions);\n                 * ```\n                 *\n                 * Will generate an object similar to:\n                 *\n                 * ```console\n                 * { node: \'20.2.0\',\n                 *   acorn: \'8.8.2\',\n                 *   ada: \'2.4.0\',\n                 *   ares: \'1.19.0\',\n                 *   base64: \'0.5.0\',\n                 *   brotli: \'1.0.9\',\n                 *   cjs_module_lexer: \'1.2.2\',\n                 *   cldr: \'43.0\',\n                 *   icu: \'73.1\',\n                 *   llhttp: \'8.1.0\',\n                 *   modules: \'115\',\n                 *   napi: \'8\',\n                 *   nghttp2: \'1.52.0\',\n                 *   nghttp3: \'0.7.0\',\n                 *   ngtcp2: \'0.8.1\',\n                 *   openssl: \'3.0.8+quic\',\n                 *   simdutf: \'3.2.9\',\n                 *   tz: \'2023c\',\n                 *   undici: \'5.22.0\',\n                 *   unicode: \'15.0\',\n                 *   uv: \'1.44.2\',\n                 *   uvwasi: \'0.0.16\',\n                 *   v8: \'11.3.244.8-node.9\',\n                 *   zlib: \'1.2.13\' }\n                 * ```\n                 * @since v0.2.0\n                 */\n                readonly versions: ProcessVersions;\n                /**\n                 * The `process.config` property returns a frozen `Object` containing the\n                 * JavaScript representation of the configure options used to compile the current\n                 * Node.js executable. This is the same as the `config.gypi` file that was produced\n                 * when running the `./configure` script.\n                 *\n                 * An example of the possible output looks like:\n                 *\n                 * ```js\n                 * {\n                 *   target_defaults:\n                 *    { cflags: [],\n                 *      default_configuration: \'Release\',\n                 *      defines: [],\n                 *      include_dirs: [],\n                 *      libraries: [] },\n                 *   variables:\n                 *    {\n                 *      host_arch: \'x64\',\n                 *      napi_build_version: 5,\n                 *      node_install_npm: \'true\',\n                 *      node_prefix: \'\',\n                 *      node_shared_cares: \'false\',\n                 *      node_shared_http_parser: \'false\',\n                 *      node_shared_libuv: \'false\',\n                 *      node_shared_zlib: \'false\',\n                 *      node_use_openssl: \'true\',\n                 *      node_shared_openssl: \'false\',\n                 *      strict_aliasing: \'true\',\n                 *      target_arch: \'x64\',\n                 *      v8_use_snapshot: 1\n                 *    }\n                 * }\n                 * ```\n                 * @since v0.7.7\n                 */\n                readonly config: ProcessConfig;\n                /**\n                 * The `process.kill()` method sends the `signal` to the process identified by`pid`.\n                 *\n                 * Signal names are strings such as `\'SIGINT\'` or `\'SIGHUP\'`. See `Signal Events` and [`kill(2)`](http://man7.org/linux/man-pages/man2/kill.2.html) for more information.\n                 *\n                 * This method will throw an error if the target `pid` does not exist. As a special\n                 * case, a signal of `0` can be used to test for the existence of a process.\n                 * Windows platforms will throw an error if the `pid` is used to kill a process\n                 * group.\n                 *\n                 * Even though the name of this function is `process.kill()`, it is really just a\n                 * signal sender, like the `kill` system call. The signal sent may do something\n                 * other than kill the target process.\n                 *\n                 * ```js\n                 * import process, { kill } from \'node:process\';\n                 *\n                 * process.on(\'SIGHUP\', () => {\n                 *   console.log(\'Got SIGHUP signal.\');\n                 * });\n                 *\n                 * setTimeout(() => {\n                 *   console.log(\'Exiting.\');\n                 *   process.exit(0);\n                 * }, 100);\n                 *\n                 * kill(process.pid, \'SIGHUP\');\n                 * ```\n                 *\n                 * When `SIGUSR1` is received by a Node.js process, Node.js will start the\n                 * debugger. See `Signal Events`.\n                 * @since v0.0.6\n                 * @param pid A process ID\n                 * @param [signal=\'SIGTERM\'] The signal to send, either as a string or number.\n                 */\n                kill(pid: number, signal?: string | number): true;\n                /**\n                 * Loads the environment configuration from a `.env` file into `process.env`. If\n                 * the file is not found, error will be thrown.\n                 *\n                 * To load a specific .env file by specifying its path, use the following code:\n                 *\n                 * ```js\n                 * import { loadEnvFile } from \'node:process\';\n                 *\n                 * loadEnvFile(\'./development.env\')\n                 * ```\n                 * @since v20.12.0\n                 * @param path The path to the .env file\n                 */\n                loadEnvFile(path?: string | URL | Buffer): void;\n                /**\n                 * The `process.pid` property returns the PID of the process.\n                 *\n                 * ```js\n                 * import { pid } from \'node:process\';\n                 *\n                 * console.log(`This process is pid ${pid}`);\n                 * ```\n                 * @since v0.1.15\n                 */\n                readonly pid: number;\n                /**\n                 * The `process.ppid` property returns the PID of the parent of the\n                 * current process.\n                 *\n                 * ```js\n                 * import { ppid } from \'node:process\';\n                 *\n                 * console.log(`The parent process is pid ${ppid}`);\n                 * ```\n                 * @since v9.2.0, v8.10.0, v6.13.0\n                 */\n                readonly ppid: number;\n                /**\n                 * The `process.title` property returns the current process title (i.e. returns\n                 * the current value of `ps`). Assigning a new value to `process.title` modifies\n                 * the current value of `ps`.\n                 *\n                 * When a new value is assigned, different platforms will impose different maximum\n                 * length restrictions on the title. Usually such restrictions are quite limited.\n                 * For instance, on Linux and macOS, `process.title` is limited to the size of the\n                 * binary name plus the length of the command-line arguments because setting the `process.title` overwrites the `argv` memory of the process. Node.js v0.8\n                 * allowed for longer process title strings by also overwriting the `environ` memory but that was potentially insecure and confusing in some (rather obscure)\n                 * cases.\n                 *\n                 * Assigning a value to `process.title` might not result in an accurate label\n                 * within process manager applications such as macOS Activity Monitor or Windows\n                 * Services Manager.\n                 * @since v0.1.104\n                 */\n                title: string;\n                /**\n                 * The operating system CPU architecture for which the Node.js binary was compiled.\n                 * Possible values are: `\'arm\'`, `\'arm64\'`, `\'ia32\'`, `\'loong64\'`, `\'mips\'`, `\'mipsel\'`, `\'ppc\'`, `\'ppc64\'`, `\'riscv64\'`, `\'s390\'`, `\'s390x\'`, and `\'x64\'`.\n                 *\n                 * ```js\n                 * import { arch } from \'node:process\';\n                 *\n                 * console.log(`This processor architecture is ${arch}`);\n                 * ```\n                 * @since v0.5.0\n                 */\n                readonly arch: Architecture;\n                /**\n                 * The `process.platform` property returns a string identifying the operating\n                 * system platform for which the Node.js binary was compiled.\n                 *\n                 * Currently possible values are:\n                 *\n                 * * `\'aix\'`\n                 * * `\'darwin\'`\n                 * * `\'freebsd\'`\n                 * * `\'linux\'`\n                 * * `\'openbsd\'`\n                 * * `\'sunos\'`\n                 * * `\'win32\'`\n                 *\n                 * ```js\n                 * import { platform } from \'node:process\';\n                 *\n                 * console.log(`This platform is ${platform}`);\n                 * ```\n                 *\n                 * The value `\'android\'` may also be returned if the Node.js is built on the\n                 * Android operating system. However, Android support in Node.js [is experimental](https://github.com/nodejs/node/blob/HEAD/BUILDING.md#androidandroid-based-devices-eg-firefox-os).\n                 * @since v0.1.16\n                 */\n                readonly platform: Platform;\n                /**\n                 * The `process.mainModule` property provides an alternative way of retrieving `require.main`. The difference is that if the main module changes at\n                 * runtime, `require.main` may still refer to the original main module in\n                 * modules that were required before the change occurred. Generally, it\'s\n                 * safe to assume that the two refer to the same module.\n                 *\n                 * As with `require.main`, `process.mainModule` will be `undefined` if there\n                 * is no entry script.\n                 * @since v0.1.17\n                 * @deprecated Since v14.0.0 - Use `main` instead.\n                 */\n                mainModule?: Module | undefined;\n                memoryUsage: MemoryUsageFn;\n                /**\n                 * Gets the amount of memory available to the process (in bytes) based on\n                 * limits imposed by the OS. If there is no such constraint, or the constraint\n                 * is unknown, `0` is returned.\n                 *\n                 * See [`uv_get_constrained_memory`](https://docs.libuv.org/en/v1.x/misc.html#c.uv_get_constrained_memory) for more\n                 * information.\n                 * @since v19.6.0, v18.15.0\n                 * @experimental\n                 */\n                constrainedMemory(): number;\n                /**\n                 * Gets the amount of free memory that is still available to the process (in bytes).\n                 * See [`uv_get_available_memory`](https://nodejs.org/docs/latest-v22.x/api/process.html#processavailablememory) for more information.\n                 * @experimental\n                 * @since v20.13.0\n                 */\n                availableMemory(): number;\n                /**\n                 * The `process.cpuUsage()` method returns the user and system CPU time usage of\n                 * the current process, in an object with properties `user` and `system`, whose\n                 * values are microsecond values (millionth of a second). These values measure time\n                 * spent in user and system code respectively, and may end up being greater than\n                 * actual elapsed time if multiple CPU cores are performing work for this process.\n                 *\n                 * The result of a previous call to `process.cpuUsage()` can be passed as the\n                 * argument to the function, to get a diff reading.\n                 *\n                 * ```js\n                 * import { cpuUsage } from \'node:process\';\n                 *\n                 * const startUsage = cpuUsage();\n                 * // { user: 38579, system: 6986 }\n                 *\n                 * // spin the CPU for 500 milliseconds\n                 * const now = Date.now();\n                 * while (Date.now() - now < 500);\n                 *\n                 * console.log(cpuUsage(startUsage));\n                 * // { user: 514883, system: 11226 }\n                 * ```\n                 * @since v6.1.0\n                 * @param previousValue A previous return value from calling `process.cpuUsage()`\n                 */\n                cpuUsage(previousValue?: CpuUsage): CpuUsage;\n                /**\n                 * `process.nextTick()` adds `callback` to the "next tick queue". This queue is\n                 * fully drained after the current operation on the JavaScript stack runs to\n                 * completion and before the event loop is allowed to continue. It\'s possible to\n                 * create an infinite loop if one were to recursively call `process.nextTick()`.\n                 * See the [Event Loop](https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#process-nexttick) guide for more background.\n                 *\n                 * ```js\n                 * import { nextTick } from \'node:process\';\n                 *\n                 * console.log(\'start\');\n                 * nextTick(() => {\n                 *   console.log(\'nextTick callback\');\n                 * });\n                 * console.log(\'scheduled\');\n                 * // Output:\n                 * // start\n                 * // scheduled\n                 * // nextTick callback\n                 * ```\n                 *\n                 * This is important when developing APIs in order to give users the opportunity\n                 * to assign event handlers _after_ an object has been constructed but before any\n                 * I/O has occurred:\n                 *\n                 * ```js\n                 * import { nextTick } from \'node:process\';\n                 *\n                 * function MyThing(options) {\n                 *   this.setupOptions(options);\n                 *\n                 *   nextTick(() => {\n                 *     this.startDoingStuff();\n                 *   });\n                 * }\n                 *\n                 * const thing = new MyThing();\n                 * thing.getReadyForStuff();\n                 *\n                 * // thing.startDoingStuff() gets called now, not before.\n                 * ```\n                 *\n                 * It is very important for APIs to be either 100% synchronous or 100%\n                 * asynchronous. Consider this example:\n                 *\n                 * ```js\n                 * // WARNING!  DO NOT USE!  BAD UNSAFE HAZARD!\n                 * function maybeSync(arg, cb) {\n                 *   if (arg) {\n                 *     cb();\n                 *     return;\n                 *   }\n                 *\n                 *   fs.stat(\'file\', cb);\n                 * }\n                 * ```\n                 *\n                 * This API is hazardous because in the following case:\n                 *\n                 * ```js\n                 * const maybeTrue = Math.random() > 0.5;\n                 *\n                 * maybeSync(maybeTrue, () => {\n                 *   foo();\n                 * });\n                 *\n                 * bar();\n                 * ```\n                 *\n                 * It is not clear whether `foo()` or `bar()` will be called first.\n                 *\n                 * The following approach is much better:\n                 *\n                 * ```js\n                 * import { nextTick } from \'node:process\';\n                 *\n                 * function definitelyAsync(arg, cb) {\n                 *   if (arg) {\n                 *     nextTick(cb);\n                 *     return;\n                 *   }\n                 *\n                 *   fs.stat(\'file\', cb);\n                 * }\n                 * ```\n                 * @since v0.1.26\n                 * @param args Additional arguments to pass when invoking the `callback`\n                 */\n                nextTick(callback: Function, ...args: any[]): void;\n                /**\n                 * This API is available through the [--permission](https://nodejs.org/api/cli.html#--permission) flag.\n                 *\n                 * `process.permission` is an object whose methods are used to manage permissions for the current process.\n                 * Additional documentation is available in the [Permission Model](https://nodejs.org/api/permissions.html#permission-model).\n                 * @since v20.0.0\n                 */\n                permission: ProcessPermission;\n                /**\n                 * The `process.release` property returns an `Object` containing metadata related\n                 * to the current release, including URLs for the source tarball and headers-only\n                 * tarball.\n                 *\n                 * `process.release` contains the following properties:\n                 *\n                 * ```js\n                 * {\n                 *   name: \'node\',\n                 *   lts: \'Hydrogen\',\n                 *   sourceUrl: \'https://nodejs.org/download/release/v18.12.0/node-v18.12.0.tar.gz\',\n                 *   headersUrl: \'https://nodejs.org/download/release/v18.12.0/node-v18.12.0-headers.tar.gz\',\n                 *   libUrl: \'https://nodejs.org/download/release/v18.12.0/win-x64/node.lib\'\n                 * }\n                 * ```\n                 *\n                 * In custom builds from non-release versions of the source tree, only the `name` property may be present. The additional properties should not be\n                 * relied upon to exist.\n                 * @since v3.0.0\n                 */\n                readonly release: ProcessRelease;\n                readonly features: ProcessFeatures;\n                /**\n                 * `process.umask()` returns the Node.js process\'s file mode creation mask. Child\n                 * processes inherit the mask from the parent process.\n                 * @since v0.1.19\n                 * @deprecated Calling `process.umask()` with no argument causes the process-wide umask to be written twice. This introduces a race condition between threads, and is a potential\n                 * security vulnerability. There is no safe, cross-platform alternative API.\n                 */\n                umask(): number;\n                /**\n                 * Can only be set if not in worker thread.\n                 */\n                umask(mask: string | number): number;\n                /**\n                 * The `process.uptime()` method returns the number of seconds the current Node.js\n                 * process has been running.\n                 *\n                 * The return value includes fractions of a second. Use `Math.floor()` to get whole\n                 * seconds.\n                 * @since v0.5.0\n                 */\n                uptime(): number;\n                hrtime: HRTime;\n                /**\n                 * If the Node.js process was spawned with an IPC channel, the process.channel property is a reference to the IPC channel.\n                 * If no IPC channel exists, this property is undefined.\n                 * @since v7.1.0\n                 */\n                channel?: {\n                    /**\n                     * This method makes the IPC channel keep the event loop of the process running if .unref() has been called before.\n                     * @since v7.1.0\n                     */\n                    ref(): void;\n                    /**\n                     * This method makes the IPC channel not keep the event loop of the process running, and lets it finish even while the channel is open.\n                     * @since v7.1.0\n                     */\n                    unref(): void;\n                };\n                /**\n                 * If Node.js is spawned with an IPC channel, the `process.send()` method can be\n                 * used to send messages to the parent process. Messages will be received as a `\'message\'` event on the parent\'s `ChildProcess` object.\n                 *\n                 * If Node.js was not spawned with an IPC channel, `process.send` will be `undefined`.\n                 *\n                 * The message goes through serialization and parsing. The resulting message might\n                 * not be the same as what is originally sent.\n                 * @since v0.5.9\n                 * @param options used to parameterize the sending of certain types of handles. `options` supports the following properties:\n                 */\n                send?(\n                    message: any,\n                    sendHandle?: any,\n                    options?: {\n                        keepOpen?: boolean | undefined;\n                    },\n                    callback?: (error: Error | null) => void,\n                ): boolean;\n                /**\n                 * If the Node.js process is spawned with an IPC channel (see the `Child Process` and `Cluster` documentation), the `process.disconnect()` method will close the\n                 * IPC channel to the parent process, allowing the child process to exit gracefully\n                 * once there are no other connections keeping it alive.\n                 *\n                 * The effect of calling `process.disconnect()` is the same as calling `ChildProcess.disconnect()` from the parent process.\n                 *\n                 * If the Node.js process was not spawned with an IPC channel, `process.disconnect()` will be `undefined`.\n                 * @since v0.7.2\n                 */\n                disconnect(): void;\n                /**\n                 * If the Node.js process is spawned with an IPC channel (see the `Child Process` and `Cluster` documentation), the `process.connected` property will return `true` so long as the IPC\n                 * channel is connected and will return `false` after `process.disconnect()` is called.\n                 *\n                 * Once `process.connected` is `false`, it is no longer possible to send messages\n                 * over the IPC channel using `process.send()`.\n                 * @since v0.7.2\n                 */\n                connected: boolean;\n                /**\n                 * The `process.allowedNodeEnvironmentFlags` property is a special,\n                 * read-only `Set` of flags allowable within the `NODE_OPTIONS` environment variable.\n                 *\n                 * `process.allowedNodeEnvironmentFlags` extends `Set`, but overrides `Set.prototype.has` to recognize several different possible flag\n                 * representations. `process.allowedNodeEnvironmentFlags.has()` will\n                 * return `true` in the following cases:\n                 *\n                 * * Flags may omit leading single (`-`) or double (`--`) dashes; e.g., `inspect-brk` for `--inspect-brk`, or `r` for `-r`.\n                 * * Flags passed through to V8 (as listed in `--v8-options`) may replace\n                 * one or more _non-leading_ dashes for an underscore, or vice-versa;\n                 * e.g., `--perf_basic_prof`, `--perf-basic-prof`, `--perf_basic-prof`,\n                 * etc.\n                 * * Flags may contain one or more equals (`=`) characters; all\n                 * characters after and including the first equals will be ignored;\n                 * e.g., `--stack-trace-limit=100`.\n                 * * Flags _must_ be allowable within `NODE_OPTIONS`.\n                 *\n                 * When iterating over `process.allowedNodeEnvironmentFlags`, flags will\n                 * appear only _once_; each will begin with one or more dashes. Flags\n                 * passed through to V8 will contain underscores instead of non-leading\n                 * dashes:\n                 *\n                 * ```js\n                 * import { allowedNodeEnvironmentFlags } from \'node:process\';\n                 *\n                 * allowedNodeEnvironmentFlags.forEach((flag) => {\n                 *   // -r\n                 *   // --inspect-brk\n                 *   // --abort_on_uncaught_exception\n                 *   // ...\n                 * });\n                 * ```\n                 *\n                 * The methods `add()`, `clear()`, and `delete()` of`process.allowedNodeEnvironmentFlags` do nothing, and will fail\n                 * silently.\n                 *\n                 * If Node.js was compiled _without_ `NODE_OPTIONS` support (shown in {@link config}), `process.allowedNodeEnvironmentFlags` will\n                 * contain what _would have_ been allowable.\n                 * @since v10.10.0\n                 */\n                allowedNodeEnvironmentFlags: ReadonlySet<string>;\n                /**\n                 * `process.report` is an object whose methods are used to generate diagnostic reports for the current process.\n                 * Additional documentation is available in the [report documentation](https://nodejs.org/docs/latest-v22.x/api/report.html).\n                 * @since v11.8.0\n                 */\n                report: ProcessReport;\n                /**\n                 * ```js\n                 * import { resourceUsage } from \'node:process\';\n                 *\n                 * console.log(resourceUsage());\n                 * /*\n                 *   Will output:\n                 *   {\n                 *     userCPUTime: 82872,\n                 *     systemCPUTime: 4143,\n                 *     maxRSS: 33164,\n                 *     sharedMemorySize: 0,\n                 *     unsharedDataSize: 0,\n                 *     unsharedStackSize: 0,\n                 *     minorPageFault: 2469,\n                 *     majorPageFault: 0,\n                 *     swappedOut: 0,\n                 *     fsRead: 0,\n                 *     fsWrite: 8,\n                 *     ipcSent: 0,\n                 *     ipcReceived: 0,\n                 *     signalsCount: 0,\n                 *     voluntaryContextSwitches: 79,\n                 *     involuntaryContextSwitches: 1\n                 *   }\n                 *\n                 * ```\n                 * @since v12.6.0\n                 * @return the resource usage for the current process. All of these values come from the `uv_getrusage` call which returns a [`uv_rusage_t` struct][uv_rusage_t].\n                 */\n                resourceUsage(): ResourceUsage;\n                /**\n                 * The initial value of `process.throwDeprecation` indicates whether the `--throw-deprecation` flag is set on the current Node.js process. `process.throwDeprecation`\n                 * is mutable, so whether or not deprecation warnings result in errors may be altered at runtime. See the documentation for the \'warning\' event and the emitWarning()\n                 * method for more information.\n                 *\n                 * ```bash\n                 * $ node --throw-deprecation -p "process.throwDeprecation"\n                 * true\n                 * $ node -p "process.throwDeprecation"\n                 * undefined\n                 * $ node\n                 * > process.emitWarning(\'test\', \'DeprecationWarning\');\n                 * undefined\n                 * > (node:26598) DeprecationWarning: test\n                 * > process.throwDeprecation = true;\n                 * true\n                 * > process.emitWarning(\'test\', \'DeprecationWarning\');\n                 * Thrown:\n                 * [DeprecationWarning: test] { name: \'DeprecationWarning\' }\n                 * ```\n                 * @since v0.9.12\n                 */\n                throwDeprecation: boolean;\n                /**\n                 * The `process.traceDeprecation` property indicates whether the `--trace-deprecation` flag is set on the current Node.js process. See the\n                 * documentation for the `\'warning\' event` and the `emitWarning() method` for more information about this\n                 * flag\'s behavior.\n                 * @since v0.8.0\n                 */\n                traceDeprecation: boolean;\n                /**\n                 * An object is "refable" if it implements the Node.js "Refable protocol".\n                 * Specifically, this means that the object implements the `Symbol.for(\'nodejs.ref\')`\n                 * and `Symbol.for(\'nodejs.unref\')` methods. "Ref\'d" objects will keep the Node.js\n                 * event loop alive, while "unref\'d" objects will not. Historically, this was\n                 * implemented by using `ref()` and `unref()` methods directly on the objects.\n                 * This pattern, however, is being deprecated in favor of the "Refable protocol"\n                 * in order to better support Web Platform API types whose APIs cannot be modified\n                 * to add `ref()` and `unref()` methods but still need to support that behavior.\n                 * @since v22.14.0\n                 * @experimental\n                 * @param maybeRefable An object that may be "refable".\n                 */\n                ref(maybeRefable: any): void;\n                /**\n                 * An object is "unrefable" if it implements the Node.js "Refable protocol".\n                 * Specifically, this means that the object implements the `Symbol.for(\'nodejs.ref\')`\n                 * and `Symbol.for(\'nodejs.unref\')` methods. "Ref\'d" objects will keep the Node.js\n                 * event loop alive, while "unref\'d" objects will not. Historically, this was\n                 * implemented by using `ref()` and `unref()` methods directly on the objects.\n                 * This pattern, however, is being deprecated in favor of the "Refable protocol"\n                 * in order to better support Web Platform API types whose APIs cannot be modified\n                 * to add `ref()` and `unref()` methods but still need to support that behavior.\n                 * @since v22.14.0\n                 * @experimental\n                 * @param maybeRefable An object that may be "unref\'d".\n                 */\n                unref(maybeRefable: any): void;\n                /**\n                 * Replaces the current process with a new process.\n                 *\n                 * This is achieved by using the `execve` POSIX function and therefore no memory or other\n                 * resources from the current process are preserved, except for the standard input,\n                 * standard output and standard error file descriptor.\n                 *\n                 * All other resources are discarded by the system when the processes are swapped, without triggering\n                 * any exit or close events and without running any cleanup handler.\n                 *\n                 * This function will never return, unless an error occurred.\n                 *\n                 * This function is not available on Windows or IBM i.\n                 * @since v22.15.0\n                 * @experimental\n                 * @param file The name or path of the executable file to run.\n                 * @param args List of string arguments. No argument can contain a null-byte (`\\u0000`).\n                 * @param env Environment key-value pairs.\n                 * No key or value can contain a null-byte (`\\u0000`).\n                 * **Default:** `process.env`.\n                 */\n                execve?(file: string, args?: readonly string[], env?: ProcessEnv): never;\n                /* EventEmitter */\n                addListener(event: "beforeExit", listener: BeforeExitListener): this;\n                addListener(event: "disconnect", listener: DisconnectListener): this;\n                addListener(event: "exit", listener: ExitListener): this;\n                addListener(event: "rejectionHandled", listener: RejectionHandledListener): this;\n                addListener(event: "uncaughtException", listener: UncaughtExceptionListener): this;\n                addListener(event: "uncaughtExceptionMonitor", listener: UncaughtExceptionListener): this;\n                addListener(event: "unhandledRejection", listener: UnhandledRejectionListener): this;\n                addListener(event: "warning", listener: WarningListener): this;\n                addListener(event: "message", listener: MessageListener): this;\n                addListener(event: Signals, listener: SignalsListener): this;\n                addListener(event: "multipleResolves", listener: MultipleResolveListener): this;\n                addListener(event: "worker", listener: WorkerListener): this;\n                emit(event: "beforeExit", code: number): boolean;\n                emit(event: "disconnect"): boolean;\n                emit(event: "exit", code: number): boolean;\n                emit(event: "rejectionHandled", promise: Promise<unknown>): boolean;\n                emit(event: "uncaughtException", error: Error): boolean;\n                emit(event: "uncaughtExceptionMonitor", error: Error): boolean;\n                emit(event: "unhandledRejection", reason: unknown, promise: Promise<unknown>): boolean;\n                emit(event: "warning", warning: Error): boolean;\n                emit(event: "message", message: unknown, sendHandle: unknown): this;\n                emit(event: Signals, signal?: Signals): boolean;\n                emit(\n                    event: "multipleResolves",\n                    type: MultipleResolveType,\n                    promise: Promise<unknown>,\n                    value: unknown,\n                ): this;\n                emit(event: "worker", listener: WorkerListener): this;\n                on(event: "beforeExit", listener: BeforeExitListener): this;\n                on(event: "disconnect", listener: DisconnectListener): this;\n                on(event: "exit", listener: ExitListener): this;\n                on(event: "rejectionHandled", listener: RejectionHandledListener): this;\n                on(event: "uncaughtException", listener: UncaughtExceptionListener): this;\n                on(event: "uncaughtExceptionMonitor", listener: UncaughtExceptionListener): this;\n                on(event: "unhandledRejection", listener: UnhandledRejectionListener): this;\n                on(event: "warning", listener: WarningListener): this;\n                on(event: "message", listener: MessageListener): this;\n                on(event: Signals, listener: SignalsListener): this;\n                on(event: "multipleResolves", listener: MultipleResolveListener): this;\n                on(event: "worker", listener: WorkerListener): this;\n                on(event: string | symbol, listener: (...args: any[]) => void): this;\n                once(event: "beforeExit", listener: BeforeExitListener): this;\n                once(event: "disconnect", listener: DisconnectListener): this;\n                once(event: "exit", listener: ExitListener): this;\n                once(event: "rejectionHandled", listener: RejectionHandledListener): this;\n                once(event: "uncaughtException", listener: UncaughtExceptionListener): this;\n                once(event: "uncaughtExceptionMonitor", listener: UncaughtExceptionListener): this;\n                once(event: "unhandledRejection", listener: UnhandledRejectionListener): this;\n                once(event: "warning", listener: WarningListener): this;\n                once(event: "message", listener: MessageListener): this;\n                once(event: Signals, listener: SignalsListener): this;\n                once(event: "multipleResolves", listener: MultipleResolveListener): this;\n                once(event: "worker", listener: WorkerListener): this;\n                once(event: string | symbol, listener: (...args: any[]) => void): this;\n                prependListener(event: "beforeExit", listener: BeforeExitListener): this;\n                prependListener(event: "disconnect", listener: DisconnectListener): this;\n                prependListener(event: "exit", listener: ExitListener): this;\n                prependListener(event: "rejectionHandled", listener: RejectionHandledListener): this;\n                prependListener(event: "uncaughtException", listener: UncaughtExceptionListener): this;\n                prependListener(event: "uncaughtExceptionMonitor", listener: UncaughtExceptionListener): this;\n                prependListener(event: "unhandledRejection", listener: UnhandledRejectionListener): this;\n                prependListener(event: "warning", listener: WarningListener): this;\n                prependListener(event: "message", listener: MessageListener): this;\n                prependListener(event: Signals, listener: SignalsListener): this;\n                prependListener(event: "multipleResolves", listener: MultipleResolveListener): this;\n                prependListener(event: "worker", listener: WorkerListener): this;\n                prependOnceListener(event: "beforeExit", listener: BeforeExitListener): this;\n                prependOnceListener(event: "disconnect", listener: DisconnectListener): this;\n                prependOnceListener(event: "exit", listener: ExitListener): this;\n                prependOnceListener(event: "rejectionHandled", listener: RejectionHandledListener): this;\n                prependOnceListener(event: "uncaughtException", listener: UncaughtExceptionListener): this;\n                prependOnceListener(event: "uncaughtExceptionMonitor", listener: UncaughtExceptionListener): this;\n                prependOnceListener(event: "unhandledRejection", listener: UnhandledRejectionListener): this;\n                prependOnceListener(event: "warning", listener: WarningListener): this;\n                prependOnceListener(event: "message", listener: MessageListener): this;\n                prependOnceListener(event: Signals, listener: SignalsListener): this;\n                prependOnceListener(event: "multipleResolves", listener: MultipleResolveListener): this;\n                prependOnceListener(event: "worker", listener: WorkerListener): this;\n                listeners(event: "beforeExit"): BeforeExitListener[];\n                listeners(event: "disconnect"): DisconnectListener[];\n                listeners(event: "exit"): ExitListener[];\n                listeners(event: "rejectionHandled"): RejectionHandledListener[];\n                listeners(event: "uncaughtException"): UncaughtExceptionListener[];\n                listeners(event: "uncaughtExceptionMonitor"): UncaughtExceptionListener[];\n                listeners(event: "unhandledRejection"): UnhandledRejectionListener[];\n                listeners(event: "warning"): WarningListener[];\n                listeners(event: "message"): MessageListener[];\n                listeners(event: Signals): SignalsListener[];\n                listeners(event: "multipleResolves"): MultipleResolveListener[];\n                listeners(event: "worker"): WorkerListener[];\n            }\n        }\n    }\n    export = process;\n}\ndeclare module "node:process" {\n    import process = require("process");\n    export = process;\n}\n',
  '@types/node/punycode.d.ts':
    "/**\n * **The version of the punycode module bundled in Node.js is being deprecated. **In a future major version of Node.js this module will be removed. Users\n * currently depending on the `punycode` module should switch to using the\n * userland-provided [Punycode.js](https://github.com/bestiejs/punycode.js) module instead. For punycode-based URL\n * encoding, see `url.domainToASCII` or, more generally, the `WHATWG URL API`.\n *\n * The `punycode` module is a bundled version of the [Punycode.js](https://github.com/bestiejs/punycode.js) module. It\n * can be accessed using:\n *\n * ```js\n * import punycode from 'node:punycode';\n * ```\n *\n * [Punycode](https://tools.ietf.org/html/rfc3492) is a character encoding scheme defined by RFC 3492 that is\n * primarily intended for use in Internationalized Domain Names. Because host\n * names in URLs are limited to ASCII characters only, Domain Names that contain\n * non-ASCII characters must be converted into ASCII using the Punycode scheme.\n * For instance, the Japanese character that translates into the English word, `'example'` is `'例'`. The Internationalized Domain Name, `'例.com'` (equivalent\n * to `'example.com'`) is represented by Punycode as the ASCII string `'xn--fsq.com'`.\n *\n * The `punycode` module provides a simple implementation of the Punycode standard.\n *\n * The `punycode` module is a third-party dependency used by Node.js and\n * made available to developers as a convenience. Fixes or other modifications to\n * the module must be directed to the [Punycode.js](https://github.com/bestiejs/punycode.js) project.\n * @deprecated Since v7.0.0 - Deprecated\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/punycode.js)\n */\ndeclare module \"punycode\" {\n    /**\n     * The `punycode.decode()` method converts a [Punycode](https://tools.ietf.org/html/rfc3492) string of ASCII-only\n     * characters to the equivalent string of Unicode codepoints.\n     *\n     * ```js\n     * punycode.decode('maana-pta'); // 'mañana'\n     * punycode.decode('--dqo34k'); // '☃-⌘'\n     * ```\n     * @since v0.5.1\n     */\n    function decode(string: string): string;\n    /**\n     * The `punycode.encode()` method converts a string of Unicode codepoints to a [Punycode](https://tools.ietf.org/html/rfc3492) string of ASCII-only characters.\n     *\n     * ```js\n     * punycode.encode('mañana'); // 'maana-pta'\n     * punycode.encode('☃-⌘'); // '--dqo34k'\n     * ```\n     * @since v0.5.1\n     */\n    function encode(string: string): string;\n    /**\n     * The `punycode.toUnicode()` method converts a string representing a domain name\n     * containing [Punycode](https://tools.ietf.org/html/rfc3492) encoded characters into Unicode. Only the [Punycode](https://tools.ietf.org/html/rfc3492) encoded parts of the domain name are be\n     * converted.\n     *\n     * ```js\n     * // decode domain names\n     * punycode.toUnicode('xn--maana-pta.com'); // 'mañana.com'\n     * punycode.toUnicode('xn----dqo34k.com');  // '☃-⌘.com'\n     * punycode.toUnicode('example.com');       // 'example.com'\n     * ```\n     * @since v0.6.1\n     */\n    function toUnicode(domain: string): string;\n    /**\n     * The `punycode.toASCII()` method converts a Unicode string representing an\n     * Internationalized Domain Name to [Punycode](https://tools.ietf.org/html/rfc3492). Only the non-ASCII parts of the\n     * domain name will be converted. Calling `punycode.toASCII()` on a string that\n     * already only contains ASCII characters will have no effect.\n     *\n     * ```js\n     * // encode domain names\n     * punycode.toASCII('mañana.com');  // 'xn--maana-pta.com'\n     * punycode.toASCII('☃-⌘.com');   // 'xn----dqo34k.com'\n     * punycode.toASCII('example.com'); // 'example.com'\n     * ```\n     * @since v0.6.1\n     */\n    function toASCII(domain: string): string;\n    /**\n     * @deprecated since v7.0.0\n     * The version of the punycode module bundled in Node.js is being deprecated.\n     * In a future major version of Node.js this module will be removed.\n     * Users currently depending on the punycode module should switch to using\n     * the userland-provided Punycode.js module instead.\n     */\n    const ucs2: ucs2;\n    interface ucs2 {\n        /**\n         * @deprecated since v7.0.0\n         * The version of the punycode module bundled in Node.js is being deprecated.\n         * In a future major version of Node.js this module will be removed.\n         * Users currently depending on the punycode module should switch to using\n         * the userland-provided Punycode.js module instead.\n         */\n        decode(string: string): number[];\n        /**\n         * @deprecated since v7.0.0\n         * The version of the punycode module bundled in Node.js is being deprecated.\n         * In a future major version of Node.js this module will be removed.\n         * Users currently depending on the punycode module should switch to using\n         * the userland-provided Punycode.js module instead.\n         */\n        encode(codePoints: readonly number[]): string;\n    }\n    /**\n     * @deprecated since v7.0.0\n     * The version of the punycode module bundled in Node.js is being deprecated.\n     * In a future major version of Node.js this module will be removed.\n     * Users currently depending on the punycode module should switch to using\n     * the userland-provided Punycode.js module instead.\n     */\n    const version: string;\n}\ndeclare module \"node:punycode\" {\n    export * from \"punycode\";\n}\n",
  '@types/node/querystring.d.ts':
    "/**\n * The `node:querystring` module provides utilities for parsing and formatting URL\n * query strings. It can be accessed using:\n *\n * ```js\n * import querystring from 'node:querystring';\n * ```\n *\n * `querystring` is more performant than `URLSearchParams` but is not a\n * standardized API. Use `URLSearchParams` when performance is not critical or\n * when compatibility with browser code is desirable.\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/querystring.js)\n */\ndeclare module \"querystring\" {\n    interface StringifyOptions {\n        /**\n         * The function to use when converting URL-unsafe characters to percent-encoding in the query string.\n         * @default `querystring.escape()`\n         */\n        encodeURIComponent?: ((str: string) => string) | undefined;\n    }\n    interface ParseOptions {\n        /**\n         * Specifies the maximum number of keys to parse. Specify `0` to remove key counting limitations.\n         * @default 1000\n         */\n        maxKeys?: number | undefined;\n        /**\n         * The function to use when decoding percent-encoded characters in the query string.\n         * @default `querystring.unescape()`\n         */\n        decodeURIComponent?: ((str: string) => string) | undefined;\n    }\n    interface ParsedUrlQuery extends NodeJS.Dict<string | string[]> {}\n    interface ParsedUrlQueryInput extends\n        NodeJS.Dict<\n            | string\n            | number\n            | boolean\n            | bigint\n            | ReadonlyArray<string | number | boolean | bigint>\n            | null\n        >\n    {}\n    /**\n     * The `querystring.stringify()` method produces a URL query string from a\n     * given `obj` by iterating through the object's \"own properties\".\n     *\n     * It serializes the following types of values passed in `obj`: [string](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type) |\n     * [number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type) |\n     * [bigint](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) |\n     * [boolean](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type) |\n     * [string\\[\\]](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#String_type) |\n     * [number\\[\\]](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Number_type) |\n     * [bigint\\[\\]](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt) |\n     * [boolean\\[\\]](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Boolean_type) The numeric values must be finite. Any other input values will be coerced to\n     * empty strings.\n     *\n     * ```js\n     * querystring.stringify({ foo: 'bar', baz: ['qux', 'quux'], corge: '' });\n     * // Returns 'foo=bar&#x26;baz=qux&#x26;baz=quux&#x26;corge='\n     *\n     * querystring.stringify({ foo: 'bar', baz: 'qux' }, ';', ':');\n     * // Returns 'foo:bar;baz:qux'\n     * ```\n     *\n     * By default, characters requiring percent-encoding within the query string will\n     * be encoded as UTF-8\\. If an alternative encoding is required, then an alternative `encodeURIComponent` option will need to be specified:\n     *\n     * ```js\n     * // Assuming gbkEncodeURIComponent function already exists,\n     *\n     * querystring.stringify({ w: '中文', foo: 'bar' }, null, null,\n     *                       { encodeURIComponent: gbkEncodeURIComponent });\n     * ```\n     * @since v0.1.25\n     * @param obj The object to serialize into a URL query string\n     * @param [sep='&'] The substring used to delimit key and value pairs in the query string.\n     * @param [eq='='] . The substring used to delimit keys and values in the query string.\n     */\n    function stringify(obj?: ParsedUrlQueryInput, sep?: string, eq?: string, options?: StringifyOptions): string;\n    /**\n     * The `querystring.parse()` method parses a URL query string (`str`) into a\n     * collection of key and value pairs.\n     *\n     * For example, the query string `'foo=bar&#x26;abc=xyz&#x26;abc=123'` is parsed into:\n     *\n     * ```json\n     * {\n     *   \"foo\": \"bar\",\n     *   \"abc\": [\"xyz\", \"123\"]\n     * }\n     * ```\n     *\n     * The object returned by the `querystring.parse()` method _does not_ prototypically inherit from the JavaScript `Object`. This means that typical `Object` methods such as `obj.toString()`,\n     * `obj.hasOwnProperty()`, and others\n     * are not defined and _will not work_.\n     *\n     * By default, percent-encoded characters within the query string will be assumed\n     * to use UTF-8 encoding. If an alternative character encoding is used, then an\n     * alternative `decodeURIComponent` option will need to be specified:\n     *\n     * ```js\n     * // Assuming gbkDecodeURIComponent function already exists...\n     *\n     * querystring.parse('w=%D6%D0%CE%C4&#x26;foo=bar', null, null,\n     *                   { decodeURIComponent: gbkDecodeURIComponent });\n     * ```\n     * @since v0.1.25\n     * @param str The URL query string to parse\n     * @param [sep='&'] The substring used to delimit key and value pairs in the query string.\n     * @param [eq='='] The substring used to delimit keys and values in the query string.\n     */\n    function parse(str: string, sep?: string, eq?: string, options?: ParseOptions): ParsedUrlQuery;\n    /**\n     * The querystring.encode() function is an alias for querystring.stringify().\n     */\n    const encode: typeof stringify;\n    /**\n     * The querystring.decode() function is an alias for querystring.parse().\n     */\n    const decode: typeof parse;\n    /**\n     * The `querystring.escape()` method performs URL percent-encoding on the given `str` in a manner that is optimized for the specific requirements of URL\n     * query strings.\n     *\n     * The `querystring.escape()` method is used by `querystring.stringify()` and is\n     * generally not expected to be used directly. It is exported primarily to allow\n     * application code to provide a replacement percent-encoding implementation if\n     * necessary by assigning `querystring.escape` to an alternative function.\n     * @since v0.1.25\n     */\n    function escape(str: string): string;\n    /**\n     * The `querystring.unescape()` method performs decoding of URL percent-encoded\n     * characters on the given `str`.\n     *\n     * The `querystring.unescape()` method is used by `querystring.parse()` and is\n     * generally not expected to be used directly. It is exported primarily to allow\n     * application code to provide a replacement decoding implementation if\n     * necessary by assigning `querystring.unescape` to an alternative function.\n     *\n     * By default, the `querystring.unescape()` method will attempt to use the\n     * JavaScript built-in `decodeURIComponent()` method to decode. If that fails,\n     * a safer equivalent that does not throw on malformed URLs will be used.\n     * @since v0.1.25\n     */\n    function unescape(str: string): string;\n}\ndeclare module \"node:querystring\" {\n    export * from \"querystring\";\n}\n",
  '@types/node/readline.d.ts':
    "/**\n * The `node:readline` module provides an interface for reading data from a [Readable](https://nodejs.org/docs/latest-v22.x/api/stream.html#readable-streams) stream\n * (such as [`process.stdin`](https://nodejs.org/docs/latest-v22.x/api/process.html#processstdin)) one line at a time.\n *\n * To use the promise-based APIs:\n *\n * ```js\n * import * as readline from 'node:readline/promises';\n * ```\n *\n * To use the callback and sync APIs:\n *\n * ```js\n * import * as readline from 'node:readline';\n * ```\n *\n * The following simple example illustrates the basic use of the `node:readline` module.\n *\n * ```js\n * import * as readline from 'node:readline/promises';\n * import { stdin as input, stdout as output } from 'node:process';\n *\n * const rl = readline.createInterface({ input, output });\n *\n * const answer = await rl.question('What do you think of Node.js? ');\n *\n * console.log(`Thank you for your valuable feedback: ${answer}`);\n *\n * rl.close();\n * ```\n *\n * Once this code is invoked, the Node.js application will not terminate until the `readline.Interface` is closed because the interface waits for data to be\n * received on the `input` stream.\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/readline.js)\n */\ndeclare module \"readline\" {\n    import { Abortable, EventEmitter } from \"node:events\";\n    import * as promises from \"node:readline/promises\";\n    export { promises };\n    export interface Key {\n        sequence?: string | undefined;\n        name?: string | undefined;\n        ctrl?: boolean | undefined;\n        meta?: boolean | undefined;\n        shift?: boolean | undefined;\n    }\n    /**\n     * Instances of the `readline.Interface` class are constructed using the `readline.createInterface()` method. Every instance is associated with a\n     * single `input` [Readable](https://nodejs.org/docs/latest-v22.x/api/stream.html#readable-streams) stream and a single `output` [Writable](https://nodejs.org/docs/latest-v22.x/api/stream.html#writable-streams) stream.\n     * The `output` stream is used to print prompts for user input that arrives on,\n     * and is read from, the `input` stream.\n     * @since v0.1.104\n     */\n    export class Interface extends EventEmitter implements Disposable {\n        readonly terminal: boolean;\n        /**\n         * The current input data being processed by node.\n         *\n         * This can be used when collecting input from a TTY stream to retrieve the\n         * current value that has been processed thus far, prior to the `line` event\n         * being emitted. Once the `line` event has been emitted, this property will\n         * be an empty string.\n         *\n         * Be aware that modifying the value during the instance runtime may have\n         * unintended consequences if `rl.cursor` is not also controlled.\n         *\n         * **If not using a TTY stream for input, use the `'line'` event.**\n         *\n         * One possible use case would be as follows:\n         *\n         * ```js\n         * const values = ['lorem ipsum', 'dolor sit amet'];\n         * const rl = readline.createInterface(process.stdin);\n         * const showResults = debounce(() => {\n         *   console.log(\n         *     '\\n',\n         *     values.filter((val) => val.startsWith(rl.line)).join(' '),\n         *   );\n         * }, 300);\n         * process.stdin.on('keypress', (c, k) => {\n         *   showResults();\n         * });\n         * ```\n         * @since v0.1.98\n         */\n        readonly line: string;\n        /**\n         * The cursor position relative to `rl.line`.\n         *\n         * This will track where the current cursor lands in the input string, when\n         * reading input from a TTY stream. The position of cursor determines the\n         * portion of the input string that will be modified as input is processed,\n         * as well as the column where the terminal caret will be rendered.\n         * @since v0.1.98\n         */\n        readonly cursor: number;\n        /**\n         * NOTE: According to the documentation:\n         *\n         * > Instances of the `readline.Interface` class are constructed using the\n         * > `readline.createInterface()` method.\n         *\n         * @see https://nodejs.org/dist/latest-v22.x/docs/api/readline.html#class-interfaceconstructor\n         */\n        protected constructor(\n            input: NodeJS.ReadableStream,\n            output?: NodeJS.WritableStream,\n            completer?: Completer | AsyncCompleter,\n            terminal?: boolean,\n        );\n        /**\n         * NOTE: According to the documentation:\n         *\n         * > Instances of the `readline.Interface` class are constructed using the\n         * > `readline.createInterface()` method.\n         *\n         * @see https://nodejs.org/dist/latest-v22.x/docs/api/readline.html#class-interfaceconstructor\n         */\n        protected constructor(options: ReadLineOptions);\n        /**\n         * The `rl.getPrompt()` method returns the current prompt used by `rl.prompt()`.\n         * @since v15.3.0, v14.17.0\n         * @return the current prompt string\n         */\n        getPrompt(): string;\n        /**\n         * The `rl.setPrompt()` method sets the prompt that will be written to `output` whenever `rl.prompt()` is called.\n         * @since v0.1.98\n         */\n        setPrompt(prompt: string): void;\n        /**\n         * The `rl.prompt()` method writes the `Interface` instances configured`prompt` to a new line in `output` in order to provide a user with a new\n         * location at which to provide input.\n         *\n         * When called, `rl.prompt()` will resume the `input` stream if it has been\n         * paused.\n         *\n         * If the `Interface` was created with `output` set to `null` or `undefined` the prompt is not written.\n         * @since v0.1.98\n         * @param preserveCursor If `true`, prevents the cursor placement from being reset to `0`.\n         */\n        prompt(preserveCursor?: boolean): void;\n        /**\n         * The `rl.question()` method displays the `query` by writing it to the `output`,\n         * waits for user input to be provided on `input`, then invokes the `callback` function passing the provided input as the first argument.\n         *\n         * When called, `rl.question()` will resume the `input` stream if it has been\n         * paused.\n         *\n         * If the `Interface` was created with `output` set to `null` or `undefined` the `query` is not written.\n         *\n         * The `callback` function passed to `rl.question()` does not follow the typical\n         * pattern of accepting an `Error` object or `null` as the first argument.\n         * The `callback` is called with the provided answer as the only argument.\n         *\n         * An error will be thrown if calling `rl.question()` after `rl.close()`.\n         *\n         * Example usage:\n         *\n         * ```js\n         * rl.question('What is your favorite food? ', (answer) => {\n         *   console.log(`Oh, so your favorite food is ${answer}`);\n         * });\n         * ```\n         *\n         * Using an `AbortController` to cancel a question.\n         *\n         * ```js\n         * const ac = new AbortController();\n         * const signal = ac.signal;\n         *\n         * rl.question('What is your favorite food? ', { signal }, (answer) => {\n         *   console.log(`Oh, so your favorite food is ${answer}`);\n         * });\n         *\n         * signal.addEventListener('abort', () => {\n         *   console.log('The food question timed out');\n         * }, { once: true });\n         *\n         * setTimeout(() => ac.abort(), 10000);\n         * ```\n         * @since v0.3.3\n         * @param query A statement or query to write to `output`, prepended to the prompt.\n         * @param callback A callback function that is invoked with the user's input in response to the `query`.\n         */\n        question(query: string, callback: (answer: string) => void): void;\n        question(query: string, options: Abortable, callback: (answer: string) => void): void;\n        /**\n         * The `rl.pause()` method pauses the `input` stream, allowing it to be resumed\n         * later if necessary.\n         *\n         * Calling `rl.pause()` does not immediately pause other events (including `'line'`) from being emitted by the `Interface` instance.\n         * @since v0.3.4\n         */\n        pause(): this;\n        /**\n         * The `rl.resume()` method resumes the `input` stream if it has been paused.\n         * @since v0.3.4\n         */\n        resume(): this;\n        /**\n         * The `rl.close()` method closes the `Interface` instance and\n         * relinquishes control over the `input` and `output` streams. When called,\n         * the `'close'` event will be emitted.\n         *\n         * Calling `rl.close()` does not immediately stop other events (including `'line'`)\n         * from being emitted by the `Interface` instance.\n         * @since v0.1.98\n         */\n        close(): void;\n        /**\n         * Alias for `rl.close()`.\n         * @since v22.15.0\n         */\n        [Symbol.dispose](): void;\n        /**\n         * The `rl.write()` method will write either `data` or a key sequence identified\n         * by `key` to the `output`. The `key` argument is supported only if `output` is\n         * a `TTY` text terminal. See `TTY keybindings` for a list of key\n         * combinations.\n         *\n         * If `key` is specified, `data` is ignored.\n         *\n         * When called, `rl.write()` will resume the `input` stream if it has been\n         * paused.\n         *\n         * If the `Interface` was created with `output` set to `null` or `undefined` the `data` and `key` are not written.\n         *\n         * ```js\n         * rl.write('Delete this!');\n         * // Simulate Ctrl+U to delete the line written previously\n         * rl.write(null, { ctrl: true, name: 'u' });\n         * ```\n         *\n         * The `rl.write()` method will write the data to the `readline` `Interface`'s `input` _as if it were provided by the user_.\n         * @since v0.1.98\n         */\n        write(data: string | Buffer, key?: Key): void;\n        write(data: undefined | null | string | Buffer, key: Key): void;\n        /**\n         * Returns the real position of the cursor in relation to the input\n         * prompt + string. Long input (wrapping) strings, as well as multiple\n         * line prompts are included in the calculations.\n         * @since v13.5.0, v12.16.0\n         */\n        getCursorPos(): CursorPos;\n        /**\n         * events.EventEmitter\n         * 1. close\n         * 2. line\n         * 3. pause\n         * 4. resume\n         * 5. SIGCONT\n         * 6. SIGINT\n         * 7. SIGTSTP\n         * 8. history\n         */\n        addListener(event: string, listener: (...args: any[]) => void): this;\n        addListener(event: \"close\", listener: () => void): this;\n        addListener(event: \"line\", listener: (input: string) => void): this;\n        addListener(event: \"pause\", listener: () => void): this;\n        addListener(event: \"resume\", listener: () => void): this;\n        addListener(event: \"SIGCONT\", listener: () => void): this;\n        addListener(event: \"SIGINT\", listener: () => void): this;\n        addListener(event: \"SIGTSTP\", listener: () => void): this;\n        addListener(event: \"history\", listener: (history: string[]) => void): this;\n        emit(event: string | symbol, ...args: any[]): boolean;\n        emit(event: \"close\"): boolean;\n        emit(event: \"line\", input: string): boolean;\n        emit(event: \"pause\"): boolean;\n        emit(event: \"resume\"): boolean;\n        emit(event: \"SIGCONT\"): boolean;\n        emit(event: \"SIGINT\"): boolean;\n        emit(event: \"SIGTSTP\"): boolean;\n        emit(event: \"history\", history: string[]): boolean;\n        on(event: string, listener: (...args: any[]) => void): this;\n        on(event: \"close\", listener: () => void): this;\n        on(event: \"line\", listener: (input: string) => void): this;\n        on(event: \"pause\", listener: () => void): this;\n        on(event: \"resume\", listener: () => void): this;\n        on(event: \"SIGCONT\", listener: () => void): this;\n        on(event: \"SIGINT\", listener: () => void): this;\n        on(event: \"SIGTSTP\", listener: () => void): this;\n        on(event: \"history\", listener: (history: string[]) => void): this;\n        once(event: string, listener: (...args: any[]) => void): this;\n        once(event: \"close\", listener: () => void): this;\n        once(event: \"line\", listener: (input: string) => void): this;\n        once(event: \"pause\", listener: () => void): this;\n        once(event: \"resume\", listener: () => void): this;\n        once(event: \"SIGCONT\", listener: () => void): this;\n        once(event: \"SIGINT\", listener: () => void): this;\n        once(event: \"SIGTSTP\", listener: () => void): this;\n        once(event: \"history\", listener: (history: string[]) => void): this;\n        prependListener(event: string, listener: (...args: any[]) => void): this;\n        prependListener(event: \"close\", listener: () => void): this;\n        prependListener(event: \"line\", listener: (input: string) => void): this;\n        prependListener(event: \"pause\", listener: () => void): this;\n        prependListener(event: \"resume\", listener: () => void): this;\n        prependListener(event: \"SIGCONT\", listener: () => void): this;\n        prependListener(event: \"SIGINT\", listener: () => void): this;\n        prependListener(event: \"SIGTSTP\", listener: () => void): this;\n        prependListener(event: \"history\", listener: (history: string[]) => void): this;\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\n        prependOnceListener(event: \"close\", listener: () => void): this;\n        prependOnceListener(event: \"line\", listener: (input: string) => void): this;\n        prependOnceListener(event: \"pause\", listener: () => void): this;\n        prependOnceListener(event: \"resume\", listener: () => void): this;\n        prependOnceListener(event: \"SIGCONT\", listener: () => void): this;\n        prependOnceListener(event: \"SIGINT\", listener: () => void): this;\n        prependOnceListener(event: \"SIGTSTP\", listener: () => void): this;\n        prependOnceListener(event: \"history\", listener: (history: string[]) => void): this;\n        [Symbol.asyncIterator](): NodeJS.AsyncIterator<string>;\n    }\n    export type ReadLine = Interface; // type forwarded for backwards compatibility\n    export type Completer = (line: string) => CompleterResult;\n    export type AsyncCompleter = (\n        line: string,\n        callback: (err?: null | Error, result?: CompleterResult) => void,\n    ) => void;\n    export type CompleterResult = [string[], string];\n    export interface ReadLineOptions {\n        /**\n         * The [`Readable`](https://nodejs.org/docs/latest-v22.x/api/stream.html#readable-streams) stream to listen to\n         */\n        input: NodeJS.ReadableStream;\n        /**\n         * The [`Writable`](https://nodejs.org/docs/latest-v22.x/api/stream.html#writable-streams) stream to write readline data to.\n         */\n        output?: NodeJS.WritableStream | undefined;\n        /**\n         * An optional function used for Tab autocompletion.\n         */\n        completer?: Completer | AsyncCompleter | undefined;\n        /**\n         * `true` if the `input` and `output` streams should be treated like a TTY,\n         * and have ANSI/VT100 escape codes written to it.\n         * Default: checking `isTTY` on the `output` stream upon instantiation.\n         */\n        terminal?: boolean | undefined;\n        /**\n         * Initial list of history lines.\n         * This option makes sense only if `terminal` is set to `true` by the user or by an internal `output` check,\n         * otherwise the history caching mechanism is not initialized at all.\n         * @default []\n         */\n        history?: string[] | undefined;\n        /**\n         * Maximum number of history lines retained.\n         * To disable the history set this value to `0`.\n         * This option makes sense only if `terminal` is set to `true` by the user or by an internal `output` check,\n         * otherwise the history caching mechanism is not initialized at all.\n         * @default 30\n         */\n        historySize?: number | undefined;\n        /**\n         * If `true`, when a new input line added to the history list duplicates an older one,\n         * this removes the older line from the list.\n         * @default false\n         */\n        removeHistoryDuplicates?: boolean | undefined;\n        /**\n         * The prompt string to use.\n         * @default \"> \"\n         */\n        prompt?: string | undefined;\n        /**\n         * If the delay between `\\r` and `\\n` exceeds `crlfDelay` milliseconds,\n         * both `\\r` and `\\n` will be treated as separate end-of-line input.\n         * `crlfDelay` will be coerced to a number no less than `100`.\n         * It can be set to `Infinity`, in which case\n         * `\\r` followed by `\\n` will always be considered a single newline\n         * (which may be reasonable for [reading files](https://nodejs.org/docs/latest-v22.x/api/readline.html#example-read-file-stream-line-by-line) with `\\r\\n` line delimiter).\n         * @default 100\n         */\n        crlfDelay?: number | undefined;\n        /**\n         * The duration `readline` will wait for a character\n         * (when reading an ambiguous key sequence in milliseconds\n         * one that can both form a complete key sequence using the input read so far\n         * and can take additional input to complete a longer key sequence).\n         * @default 500\n         */\n        escapeCodeTimeout?: number | undefined;\n        /**\n         * The number of spaces a tab is equal to (minimum 1).\n         * @default 8\n         */\n        tabSize?: number | undefined;\n        /**\n         * Allows closing the interface using an AbortSignal.\n         * Aborting the signal will internally call `close` on the interface.\n         */\n        signal?: AbortSignal | undefined;\n    }\n    /**\n     * The `readline.createInterface()` method creates a new `readline.Interface` instance.\n     *\n     * ```js\n     * import readline from 'node:readline';\n     * const rl = readline.createInterface({\n     *   input: process.stdin,\n     *   output: process.stdout,\n     * });\n     * ```\n     *\n     * Once the `readline.Interface` instance is created, the most common case is to\n     * listen for the `'line'` event:\n     *\n     * ```js\n     * rl.on('line', (line) => {\n     *   console.log(`Received: ${line}`);\n     * });\n     * ```\n     *\n     * If `terminal` is `true` for this instance then the `output` stream will get\n     * the best compatibility if it defines an `output.columns` property and emits\n     * a `'resize'` event on the `output` if or when the columns ever change\n     * (`process.stdout` does this automatically when it is a TTY).\n     *\n     * When creating a `readline.Interface` using `stdin` as input, the program\n     * will not terminate until it receives an [EOF character](https://en.wikipedia.org/wiki/End-of-file#EOF_character). To exit without\n     * waiting for user input, call `process.stdin.unref()`.\n     * @since v0.1.98\n     */\n    export function createInterface(\n        input: NodeJS.ReadableStream,\n        output?: NodeJS.WritableStream,\n        completer?: Completer | AsyncCompleter,\n        terminal?: boolean,\n    ): Interface;\n    export function createInterface(options: ReadLineOptions): Interface;\n    /**\n     * The `readline.emitKeypressEvents()` method causes the given `Readable` stream to begin emitting `'keypress'` events corresponding to received input.\n     *\n     * Optionally, `interface` specifies a `readline.Interface` instance for which\n     * autocompletion is disabled when copy-pasted input is detected.\n     *\n     * If the `stream` is a `TTY`, then it must be in raw mode.\n     *\n     * This is automatically called by any readline instance on its `input` if the `input` is a terminal. Closing the `readline` instance does not stop\n     * the `input` from emitting `'keypress'` events.\n     *\n     * ```js\n     * readline.emitKeypressEvents(process.stdin);\n     * if (process.stdin.isTTY)\n     *   process.stdin.setRawMode(true);\n     * ```\n     *\n     * ## Example: Tiny CLI\n     *\n     * The following example illustrates the use of `readline.Interface` class to\n     * implement a small command-line interface:\n     *\n     * ```js\n     * import readline from 'node:readline';\n     * const rl = readline.createInterface({\n     *   input: process.stdin,\n     *   output: process.stdout,\n     *   prompt: 'OHAI> ',\n     * });\n     *\n     * rl.prompt();\n     *\n     * rl.on('line', (line) => {\n     *   switch (line.trim()) {\n     *     case 'hello':\n     *       console.log('world!');\n     *       break;\n     *     default:\n     *       console.log(`Say what? I might have heard '${line.trim()}'`);\n     *       break;\n     *   }\n     *   rl.prompt();\n     * }).on('close', () => {\n     *   console.log('Have a great day!');\n     *   process.exit(0);\n     * });\n     * ```\n     *\n     * ## Example: Read file stream line-by-Line\n     *\n     * A common use case for `readline` is to consume an input file one line at a\n     * time. The easiest way to do so is leveraging the `fs.ReadStream` API as\n     * well as a `for await...of` loop:\n     *\n     * ```js\n     * import fs from 'node:fs';\n     * import readline from 'node:readline';\n     *\n     * async function processLineByLine() {\n     *   const fileStream = fs.createReadStream('input.txt');\n     *\n     *   const rl = readline.createInterface({\n     *     input: fileStream,\n     *     crlfDelay: Infinity,\n     *   });\n     *   // Note: we use the crlfDelay option to recognize all instances of CR LF\n     *   // ('\\r\\n') in input.txt as a single line break.\n     *\n     *   for await (const line of rl) {\n     *     // Each line in input.txt will be successively available here as `line`.\n     *     console.log(`Line from file: ${line}`);\n     *   }\n     * }\n     *\n     * processLineByLine();\n     * ```\n     *\n     * Alternatively, one could use the `'line'` event:\n     *\n     * ```js\n     * import fs from 'node:fs';\n     * import readline from 'node:readline';\n     *\n     * const rl = readline.createInterface({\n     *   input: fs.createReadStream('sample.txt'),\n     *   crlfDelay: Infinity,\n     * });\n     *\n     * rl.on('line', (line) => {\n     *   console.log(`Line from file: ${line}`);\n     * });\n     * ```\n     *\n     * Currently, `for await...of` loop can be a bit slower. If `async` / `await` flow and speed are both essential, a mixed approach can be applied:\n     *\n     * ```js\n     * import { once } from 'node:events';\n     * import { createReadStream } from 'node:fs';\n     * import { createInterface } from 'node:readline';\n     *\n     * (async function processLineByLine() {\n     *   try {\n     *     const rl = createInterface({\n     *       input: createReadStream('big-file.txt'),\n     *       crlfDelay: Infinity,\n     *     });\n     *\n     *     rl.on('line', (line) => {\n     *       // Process the line.\n     *     });\n     *\n     *     await once(rl, 'close');\n     *\n     *     console.log('File processed.');\n     *   } catch (err) {\n     *     console.error(err);\n     *   }\n     * })();\n     * ```\n     * @since v0.7.7\n     */\n    export function emitKeypressEvents(stream: NodeJS.ReadableStream, readlineInterface?: Interface): void;\n    export type Direction = -1 | 0 | 1;\n    export interface CursorPos {\n        rows: number;\n        cols: number;\n    }\n    /**\n     * The `readline.clearLine()` method clears current line of given [TTY](https://nodejs.org/docs/latest-v22.x/api/tty.html) stream\n     * in a specified direction identified by `dir`.\n     * @since v0.7.7\n     * @param callback Invoked once the operation completes.\n     * @return `false` if `stream` wishes for the calling code to wait for the `'drain'` event to be emitted before continuing to write additional data; otherwise `true`.\n     */\n    export function clearLine(stream: NodeJS.WritableStream, dir: Direction, callback?: () => void): boolean;\n    /**\n     * The `readline.clearScreenDown()` method clears the given [TTY](https://nodejs.org/docs/latest-v22.x/api/tty.html) stream from\n     * the current position of the cursor down.\n     * @since v0.7.7\n     * @param callback Invoked once the operation completes.\n     * @return `false` if `stream` wishes for the calling code to wait for the `'drain'` event to be emitted before continuing to write additional data; otherwise `true`.\n     */\n    export function clearScreenDown(stream: NodeJS.WritableStream, callback?: () => void): boolean;\n    /**\n     * The `readline.cursorTo()` method moves cursor to the specified position in a\n     * given [TTY](https://nodejs.org/docs/latest-v22.x/api/tty.html) `stream`.\n     * @since v0.7.7\n     * @param callback Invoked once the operation completes.\n     * @return `false` if `stream` wishes for the calling code to wait for the `'drain'` event to be emitted before continuing to write additional data; otherwise `true`.\n     */\n    export function cursorTo(stream: NodeJS.WritableStream, x: number, y?: number, callback?: () => void): boolean;\n    /**\n     * The `readline.moveCursor()` method moves the cursor _relative_ to its current\n     * position in a given [TTY](https://nodejs.org/docs/latest-v22.x/api/tty.html) `stream`.\n     * @since v0.7.7\n     * @param callback Invoked once the operation completes.\n     * @return `false` if `stream` wishes for the calling code to wait for the `'drain'` event to be emitted before continuing to write additional data; otherwise `true`.\n     */\n    export function moveCursor(stream: NodeJS.WritableStream, dx: number, dy: number, callback?: () => void): boolean;\n}\ndeclare module \"node:readline\" {\n    export * from \"readline\";\n}\n",
  '@types/node/readline/promises.d.ts':
    "/**\n * @since v17.0.0\n * @experimental\n */\ndeclare module \"readline/promises\" {\n    import { Abortable } from \"node:events\";\n    import {\n        CompleterResult,\n        Direction,\n        Interface as _Interface,\n        ReadLineOptions as _ReadLineOptions,\n    } from \"node:readline\";\n    /**\n     * Instances of the `readlinePromises.Interface` class are constructed using the `readlinePromises.createInterface()` method. Every instance is associated with a\n     * single `input` `Readable` stream and a single `output` `Writable` stream.\n     * The `output` stream is used to print prompts for user input that arrives on,\n     * and is read from, the `input` stream.\n     * @since v17.0.0\n     */\n    class Interface extends _Interface {\n        /**\n         * The `rl.question()` method displays the `query` by writing it to the `output`,\n         * waits for user input to be provided on `input`, then invokes the `callback` function passing the provided input as the first argument.\n         *\n         * When called, `rl.question()` will resume the `input` stream if it has been\n         * paused.\n         *\n         * If the `Interface` was created with `output` set to `null` or `undefined` the `query` is not written.\n         *\n         * If the question is called after `rl.close()`, it returns a rejected promise.\n         *\n         * Example usage:\n         *\n         * ```js\n         * const answer = await rl.question('What is your favorite food? ');\n         * console.log(`Oh, so your favorite food is ${answer}`);\n         * ```\n         *\n         * Using an `AbortSignal` to cancel a question.\n         *\n         * ```js\n         * const signal = AbortSignal.timeout(10_000);\n         *\n         * signal.addEventListener('abort', () => {\n         *   console.log('The food question timed out');\n         * }, { once: true });\n         *\n         * const answer = await rl.question('What is your favorite food? ', { signal });\n         * console.log(`Oh, so your favorite food is ${answer}`);\n         * ```\n         * @since v17.0.0\n         * @param query A statement or query to write to `output`, prepended to the prompt.\n         * @return A promise that is fulfilled with the user's input in response to the `query`.\n         */\n        question(query: string): Promise<string>;\n        question(query: string, options: Abortable): Promise<string>;\n    }\n    /**\n     * @since v17.0.0\n     */\n    class Readline {\n        /**\n         * @param stream A TTY stream.\n         */\n        constructor(\n            stream: NodeJS.WritableStream,\n            options?: {\n                autoCommit?: boolean;\n            },\n        );\n        /**\n         * The `rl.clearLine()` method adds to the internal list of pending action an\n         * action that clears current line of the associated `stream` in a specified\n         * direction identified by `dir`.\n         * Call `rl.commit()` to see the effect of this method, unless `autoCommit: true` was passed to the constructor.\n         * @since v17.0.0\n         * @return this\n         */\n        clearLine(dir: Direction): this;\n        /**\n         * The `rl.clearScreenDown()` method adds to the internal list of pending action an\n         * action that clears the associated stream from the current position of the\n         * cursor down.\n         * Call `rl.commit()` to see the effect of this method, unless `autoCommit: true` was passed to the constructor.\n         * @since v17.0.0\n         * @return this\n         */\n        clearScreenDown(): this;\n        /**\n         * The `rl.commit()` method sends all the pending actions to the associated `stream` and clears the internal list of pending actions.\n         * @since v17.0.0\n         */\n        commit(): Promise<void>;\n        /**\n         * The `rl.cursorTo()` method adds to the internal list of pending action an action\n         * that moves cursor to the specified position in the associated `stream`.\n         * Call `rl.commit()` to see the effect of this method, unless `autoCommit: true` was passed to the constructor.\n         * @since v17.0.0\n         * @return this\n         */\n        cursorTo(x: number, y?: number): this;\n        /**\n         * The `rl.moveCursor()` method adds to the internal list of pending action an\n         * action that moves the cursor _relative_ to its current position in the\n         * associated `stream`.\n         * Call `rl.commit()` to see the effect of this method, unless `autoCommit: true` was passed to the constructor.\n         * @since v17.0.0\n         * @return this\n         */\n        moveCursor(dx: number, dy: number): this;\n        /**\n         * The `rl.rollback` methods clears the internal list of pending actions without\n         * sending it to the associated `stream`.\n         * @since v17.0.0\n         * @return this\n         */\n        rollback(): this;\n    }\n    type Completer = (line: string) => CompleterResult | Promise<CompleterResult>;\n    interface ReadLineOptions extends Omit<_ReadLineOptions, \"completer\"> {\n        /**\n         * An optional function used for Tab autocompletion.\n         */\n        completer?: Completer | undefined;\n    }\n    /**\n     * The `readlinePromises.createInterface()` method creates a new `readlinePromises.Interface` instance.\n     *\n     * ```js\n     * import readlinePromises from 'node:readline/promises';\n     * const rl = readlinePromises.createInterface({\n     *   input: process.stdin,\n     *   output: process.stdout,\n     * });\n     * ```\n     *\n     * Once the `readlinePromises.Interface` instance is created, the most common case\n     * is to listen for the `'line'` event:\n     *\n     * ```js\n     * rl.on('line', (line) => {\n     *   console.log(`Received: ${line}`);\n     * });\n     * ```\n     *\n     * If `terminal` is `true` for this instance then the `output` stream will get\n     * the best compatibility if it defines an `output.columns` property and emits\n     * a `'resize'` event on the `output` if or when the columns ever change\n     * (`process.stdout` does this automatically when it is a TTY).\n     * @since v17.0.0\n     */\n    function createInterface(\n        input: NodeJS.ReadableStream,\n        output?: NodeJS.WritableStream,\n        completer?: Completer,\n        terminal?: boolean,\n    ): Interface;\n    function createInterface(options: ReadLineOptions): Interface;\n}\ndeclare module \"node:readline/promises\" {\n    export * from \"readline/promises\";\n}\n",
  '@types/node/repl.d.ts':
    '/**\n * The `node:repl` module provides a Read-Eval-Print-Loop (REPL) implementation\n * that is available both as a standalone program or includible in other\n * applications. It can be accessed using:\n *\n * ```js\n * import repl from \'node:repl\';\n * ```\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/repl.js)\n */\ndeclare module "repl" {\n    import { AsyncCompleter, Completer, Interface } from "node:readline";\n    import { Context } from "node:vm";\n    import { InspectOptions } from "node:util";\n    interface ReplOptions {\n        /**\n         * The input prompt to display.\n         * @default "> "\n         */\n        prompt?: string | undefined;\n        /**\n         * The `Readable` stream from which REPL input will be read.\n         * @default process.stdin\n         */\n        input?: NodeJS.ReadableStream | undefined;\n        /**\n         * The `Writable` stream to which REPL output will be written.\n         * @default process.stdout\n         */\n        output?: NodeJS.WritableStream | undefined;\n        /**\n         * If `true`, specifies that the output should be treated as a TTY terminal, and have\n         * ANSI/VT100 escape codes written to it.\n         * Default: checking the value of the `isTTY` property on the output stream upon\n         * instantiation.\n         */\n        terminal?: boolean | undefined;\n        /**\n         * The function to be used when evaluating each given line of input.\n         * Default: an async wrapper for the JavaScript `eval()` function. An `eval` function can\n         * error with `repl.Recoverable` to indicate the input was incomplete and prompt for\n         * additional lines.\n         *\n         * @see https://nodejs.org/dist/latest-v22.x/docs/api/repl.html#repl_default_evaluation\n         * @see https://nodejs.org/dist/latest-v22.x/docs/api/repl.html#repl_custom_evaluation_functions\n         */\n        eval?: REPLEval | undefined;\n        /**\n         * Defines if the repl prints output previews or not.\n         * @default `true` Always `false` in case `terminal` is falsy.\n         */\n        preview?: boolean | undefined;\n        /**\n         * If `true`, specifies that the default `writer` function should include ANSI color\n         * styling to REPL output. If a custom `writer` function is provided then this has no\n         * effect.\n         * @default the REPL instance\'s `terminal` value\n         */\n        useColors?: boolean | undefined;\n        /**\n         * If `true`, specifies that the default evaluation function will use the JavaScript\n         * `global` as the context as opposed to creating a new separate context for the REPL\n         * instance. The node CLI REPL sets this value to `true`.\n         * @default false\n         */\n        useGlobal?: boolean | undefined;\n        /**\n         * If `true`, specifies that the default writer will not output the return value of a\n         * command if it evaluates to `undefined`.\n         * @default false\n         */\n        ignoreUndefined?: boolean | undefined;\n        /**\n         * The function to invoke to format the output of each command before writing to `output`.\n         * @default a wrapper for `util.inspect`\n         *\n         * @see https://nodejs.org/dist/latest-v22.x/docs/api/repl.html#repl_customizing_repl_output\n         */\n        writer?: REPLWriter | undefined;\n        /**\n         * An optional function used for custom Tab auto completion.\n         *\n         * @see https://nodejs.org/dist/latest-v22.x/docs/api/readline.html#readline_use_of_the_completer_function\n         */\n        completer?: Completer | AsyncCompleter | undefined;\n        /**\n         * A flag that specifies whether the default evaluator executes all JavaScript commands in\n         * strict mode or default (sloppy) mode.\n         * Accepted values are:\n         * - `repl.REPL_MODE_SLOPPY` - evaluates expressions in sloppy mode.\n         * - `repl.REPL_MODE_STRICT` - evaluates expressions in strict mode. This is equivalent to\n         *   prefacing every repl statement with `\'use strict\'`.\n         */\n        replMode?: typeof REPL_MODE_SLOPPY | typeof REPL_MODE_STRICT | undefined;\n        /**\n         * Stop evaluating the current piece of code when `SIGINT` is received, i.e. `Ctrl+C` is\n         * pressed. This cannot be used together with a custom `eval` function.\n         * @default false\n         */\n        breakEvalOnSigint?: boolean | undefined;\n    }\n    type REPLEval = (\n        this: REPLServer,\n        evalCmd: string,\n        context: Context,\n        file: string,\n        cb: (err: Error | null, result: any) => void,\n    ) => void;\n    type REPLWriter = (this: REPLServer, obj: any) => string;\n    /**\n     * This is the default "writer" value, if none is passed in the REPL options,\n     * and it can be overridden by custom print functions.\n     */\n    const writer: REPLWriter & {\n        options: InspectOptions;\n    };\n    type REPLCommandAction = (this: REPLServer, text: string) => void;\n    interface REPLCommand {\n        /**\n         * Help text to be displayed when `.help` is entered.\n         */\n        help?: string | undefined;\n        /**\n         * The function to execute, optionally accepting a single string argument.\n         */\n        action: REPLCommandAction;\n    }\n    /**\n     * Instances of `repl.REPLServer` are created using the {@link start} method\n     * or directly using the JavaScript `new` keyword.\n     *\n     * ```js\n     * import repl from \'node:repl\';\n     *\n     * const options = { useColors: true };\n     *\n     * const firstInstance = repl.start(options);\n     * const secondInstance = new repl.REPLServer(options);\n     * ```\n     * @since v0.1.91\n     */\n    class REPLServer extends Interface {\n        /**\n         * The `vm.Context` provided to the `eval` function to be used for JavaScript\n         * evaluation.\n         */\n        readonly context: Context;\n        /**\n         * @deprecated since v14.3.0 - Use `input` instead.\n         */\n        readonly inputStream: NodeJS.ReadableStream;\n        /**\n         * @deprecated since v14.3.0 - Use `output` instead.\n         */\n        readonly outputStream: NodeJS.WritableStream;\n        /**\n         * The `Readable` stream from which REPL input will be read.\n         */\n        readonly input: NodeJS.ReadableStream;\n        /**\n         * The `Writable` stream to which REPL output will be written.\n         */\n        readonly output: NodeJS.WritableStream;\n        /**\n         * The commands registered via `replServer.defineCommand()`.\n         */\n        readonly commands: NodeJS.ReadOnlyDict<REPLCommand>;\n        /**\n         * A value indicating whether the REPL is currently in "editor mode".\n         *\n         * @see https://nodejs.org/dist/latest-v22.x/docs/api/repl.html#repl_commands_and_special_keys\n         */\n        readonly editorMode: boolean;\n        /**\n         * A value indicating whether the `_` variable has been assigned.\n         *\n         * @see https://nodejs.org/dist/latest-v22.x/docs/api/repl.html#repl_assignment_of_the_underscore_variable\n         */\n        readonly underscoreAssigned: boolean;\n        /**\n         * The last evaluation result from the REPL (assigned to the `_` variable inside of the REPL).\n         *\n         * @see https://nodejs.org/dist/latest-v22.x/docs/api/repl.html#repl_assignment_of_the_underscore_variable\n         */\n        readonly last: any;\n        /**\n         * A value indicating whether the `_error` variable has been assigned.\n         *\n         * @since v9.8.0\n         * @see https://nodejs.org/dist/latest-v22.x/docs/api/repl.html#repl_assignment_of_the_underscore_variable\n         */\n        readonly underscoreErrAssigned: boolean;\n        /**\n         * The last error raised inside the REPL (assigned to the `_error` variable inside of the REPL).\n         *\n         * @since v9.8.0\n         * @see https://nodejs.org/dist/latest-v22.x/docs/api/repl.html#repl_assignment_of_the_underscore_variable\n         */\n        readonly lastError: any;\n        /**\n         * Specified in the REPL options, this is the function to be used when evaluating each\n         * given line of input. If not specified in the REPL options, this is an async wrapper\n         * for the JavaScript `eval()` function.\n         */\n        readonly eval: REPLEval;\n        /**\n         * Specified in the REPL options, this is a value indicating whether the default\n         * `writer` function should include ANSI color styling to REPL output.\n         */\n        readonly useColors: boolean;\n        /**\n         * Specified in the REPL options, this is a value indicating whether the default `eval`\n         * function will use the JavaScript `global` as the context as opposed to creating a new\n         * separate context for the REPL instance.\n         */\n        readonly useGlobal: boolean;\n        /**\n         * Specified in the REPL options, this is a value indicating whether the default `writer`\n         * function should output the result of a command if it evaluates to `undefined`.\n         */\n        readonly ignoreUndefined: boolean;\n        /**\n         * Specified in the REPL options, this is the function to invoke to format the output of\n         * each command before writing to `outputStream`. If not specified in the REPL options,\n         * this will be a wrapper for `util.inspect`.\n         */\n        readonly writer: REPLWriter;\n        /**\n         * Specified in the REPL options, this is the function to use for custom Tab auto-completion.\n         */\n        readonly completer: Completer | AsyncCompleter;\n        /**\n         * Specified in the REPL options, this is a flag that specifies whether the default `eval`\n         * function should execute all JavaScript commands in strict mode or default (sloppy) mode.\n         * Possible values are:\n         * - `repl.REPL_MODE_SLOPPY` - evaluates expressions in sloppy mode.\n         * - `repl.REPL_MODE_STRICT` - evaluates expressions in strict mode. This is equivalent to\n         *    prefacing every repl statement with `\'use strict\'`.\n         */\n        readonly replMode: typeof REPL_MODE_SLOPPY | typeof REPL_MODE_STRICT;\n        /**\n         * NOTE: According to the documentation:\n         *\n         * > Instances of `repl.REPLServer` are created using the `repl.start()` method and\n         * > _should not_ be created directly using the JavaScript `new` keyword.\n         *\n         * `REPLServer` cannot be subclassed due to implementation specifics in NodeJS.\n         *\n         * @see https://nodejs.org/dist/latest-v22.x/docs/api/repl.html#repl_class_replserver\n         */\n        private constructor();\n        /**\n         * The `replServer.defineCommand()` method is used to add new `.`\\-prefixed commands\n         * to the REPL instance. Such commands are invoked by typing a `.` followed by the `keyword`. The `cmd` is either a `Function` or an `Object` with the following\n         * properties:\n         *\n         * The following example shows two new commands added to the REPL instance:\n         *\n         * ```js\n         * import repl from \'node:repl\';\n         *\n         * const replServer = repl.start({ prompt: \'> \' });\n         * replServer.defineCommand(\'sayhello\', {\n         *   help: \'Say hello\',\n         *   action(name) {\n         *     this.clearBufferedCommand();\n         *     console.log(`Hello, ${name}!`);\n         *     this.displayPrompt();\n         *   },\n         * });\n         * replServer.defineCommand(\'saybye\', function saybye() {\n         *   console.log(\'Goodbye!\');\n         *   this.close();\n         * });\n         * ```\n         *\n         * The new commands can then be used from within the REPL instance:\n         *\n         * ```console\n         * > .sayhello Node.js User\n         * Hello, Node.js User!\n         * > .saybye\n         * Goodbye!\n         * ```\n         * @since v0.3.0\n         * @param keyword The command keyword (_without_ a leading `.` character).\n         * @param cmd The function to invoke when the command is processed.\n         */\n        defineCommand(keyword: string, cmd: REPLCommandAction | REPLCommand): void;\n        /**\n         * The `replServer.displayPrompt()` method readies the REPL instance for input\n         * from the user, printing the configured `prompt` to a new line in the `output` and resuming the `input` to accept new input.\n         *\n         * When multi-line input is being entered, an ellipsis is printed rather than the\n         * \'prompt\'.\n         *\n         * When `preserveCursor` is `true`, the cursor placement will not be reset to `0`.\n         *\n         * The `replServer.displayPrompt` method is primarily intended to be called from\n         * within the action function for commands registered using the `replServer.defineCommand()` method.\n         * @since v0.1.91\n         */\n        displayPrompt(preserveCursor?: boolean): void;\n        /**\n         * The `replServer.clearBufferedCommand()` method clears any command that has been\n         * buffered but not yet executed. This method is primarily intended to be\n         * called from within the action function for commands registered using the `replServer.defineCommand()` method.\n         * @since v9.0.0\n         */\n        clearBufferedCommand(): void;\n        /**\n         * Initializes a history log file for the REPL instance. When executing the\n         * Node.js binary and using the command-line REPL, a history file is initialized\n         * by default. However, this is not the case when creating a REPL\n         * programmatically. Use this method to initialize a history log file when working\n         * with REPL instances programmatically.\n         * @since v11.10.0\n         * @param historyPath the path to the history file\n         * @param callback called when history writes are ready or upon error\n         */\n        setupHistory(path: string, callback: (err: Error | null, repl: this) => void): void;\n        /**\n         * events.EventEmitter\n         * 1. close - inherited from `readline.Interface`\n         * 2. line - inherited from `readline.Interface`\n         * 3. pause - inherited from `readline.Interface`\n         * 4. resume - inherited from `readline.Interface`\n         * 5. SIGCONT - inherited from `readline.Interface`\n         * 6. SIGINT - inherited from `readline.Interface`\n         * 7. SIGTSTP - inherited from `readline.Interface`\n         * 8. exit\n         * 9. reset\n         */\n        addListener(event: string, listener: (...args: any[]) => void): this;\n        addListener(event: "close", listener: () => void): this;\n        addListener(event: "line", listener: (input: string) => void): this;\n        addListener(event: "pause", listener: () => void): this;\n        addListener(event: "resume", listener: () => void): this;\n        addListener(event: "SIGCONT", listener: () => void): this;\n        addListener(event: "SIGINT", listener: () => void): this;\n        addListener(event: "SIGTSTP", listener: () => void): this;\n        addListener(event: "exit", listener: () => void): this;\n        addListener(event: "reset", listener: (context: Context) => void): this;\n        emit(event: string | symbol, ...args: any[]): boolean;\n        emit(event: "close"): boolean;\n        emit(event: "line", input: string): boolean;\n        emit(event: "pause"): boolean;\n        emit(event: "resume"): boolean;\n        emit(event: "SIGCONT"): boolean;\n        emit(event: "SIGINT"): boolean;\n        emit(event: "SIGTSTP"): boolean;\n        emit(event: "exit"): boolean;\n        emit(event: "reset", context: Context): boolean;\n        on(event: string, listener: (...args: any[]) => void): this;\n        on(event: "close", listener: () => void): this;\n        on(event: "line", listener: (input: string) => void): this;\n        on(event: "pause", listener: () => void): this;\n        on(event: "resume", listener: () => void): this;\n        on(event: "SIGCONT", listener: () => void): this;\n        on(event: "SIGINT", listener: () => void): this;\n        on(event: "SIGTSTP", listener: () => void): this;\n        on(event: "exit", listener: () => void): this;\n        on(event: "reset", listener: (context: Context) => void): this;\n        once(event: string, listener: (...args: any[]) => void): this;\n        once(event: "close", listener: () => void): this;\n        once(event: "line", listener: (input: string) => void): this;\n        once(event: "pause", listener: () => void): this;\n        once(event: "resume", listener: () => void): this;\n        once(event: "SIGCONT", listener: () => void): this;\n        once(event: "SIGINT", listener: () => void): this;\n        once(event: "SIGTSTP", listener: () => void): this;\n        once(event: "exit", listener: () => void): this;\n        once(event: "reset", listener: (context: Context) => void): this;\n        prependListener(event: string, listener: (...args: any[]) => void): this;\n        prependListener(event: "close", listener: () => void): this;\n        prependListener(event: "line", listener: (input: string) => void): this;\n        prependListener(event: "pause", listener: () => void): this;\n        prependListener(event: "resume", listener: () => void): this;\n        prependListener(event: "SIGCONT", listener: () => void): this;\n        prependListener(event: "SIGINT", listener: () => void): this;\n        prependListener(event: "SIGTSTP", listener: () => void): this;\n        prependListener(event: "exit", listener: () => void): this;\n        prependListener(event: "reset", listener: (context: Context) => void): this;\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\n        prependOnceListener(event: "close", listener: () => void): this;\n        prependOnceListener(event: "line", listener: (input: string) => void): this;\n        prependOnceListener(event: "pause", listener: () => void): this;\n        prependOnceListener(event: "resume", listener: () => void): this;\n        prependOnceListener(event: "SIGCONT", listener: () => void): this;\n        prependOnceListener(event: "SIGINT", listener: () => void): this;\n        prependOnceListener(event: "SIGTSTP", listener: () => void): this;\n        prependOnceListener(event: "exit", listener: () => void): this;\n        prependOnceListener(event: "reset", listener: (context: Context) => void): this;\n    }\n    /**\n     * A flag passed in the REPL options. Evaluates expressions in sloppy mode.\n     */\n    const REPL_MODE_SLOPPY: unique symbol;\n    /**\n     * A flag passed in the REPL options. Evaluates expressions in strict mode.\n     * This is equivalent to prefacing every repl statement with `\'use strict\'`.\n     */\n    const REPL_MODE_STRICT: unique symbol;\n    /**\n     * The `repl.start()` method creates and starts a {@link REPLServer} instance.\n     *\n     * If `options` is a string, then it specifies the input prompt:\n     *\n     * ```js\n     * import repl from \'node:repl\';\n     *\n     * // a Unix style prompt\n     * repl.start(\'$ \');\n     * ```\n     * @since v0.1.91\n     */\n    function start(options?: string | ReplOptions): REPLServer;\n    /**\n     * Indicates a recoverable error that a `REPLServer` can use to support multi-line input.\n     *\n     * @see https://nodejs.org/dist/latest-v22.x/docs/api/repl.html#repl_recoverable_errors\n     */\n    class Recoverable extends SyntaxError {\n        err: Error;\n        constructor(err: Error);\n    }\n}\ndeclare module "node:repl" {\n    export * from "repl";\n}\n',
  '@types/node/sea.d.ts':
    '/**\n * This feature allows the distribution of a Node.js application conveniently to a\n * system that does not have Node.js installed.\n *\n * Node.js supports the creation of [single executable applications](https://github.com/nodejs/single-executable) by allowing\n * the injection of a blob prepared by Node.js, which can contain a bundled script,\n * into the `node` binary. During start up, the program checks if anything has been\n * injected. If the blob is found, it executes the script in the blob. Otherwise\n * Node.js operates as it normally does.\n *\n * The single executable application feature currently only supports running a\n * single embedded script using the `CommonJS` module system.\n *\n * Users can create a single executable application from their bundled script\n * with the `node` binary itself and any tool which can inject resources into the\n * binary.\n *\n * Here are the steps for creating a single executable application using one such\n * tool, [postject](https://github.com/nodejs/postject):\n *\n * 1. Create a JavaScript file:\n * ```bash\n * echo \'console.log(`Hello, ${process.argv[2]}!`);\' > hello.js\n * ```\n * 2. Create a configuration file building a blob that can be injected into the\n * single executable application (see `Generating single executable preparation blobs` for details):\n * ```bash\n * echo \'{ "main": "hello.js", "output": "sea-prep.blob" }\' > sea-config.json\n * ```\n * 3. Generate the blob to be injected:\n * ```bash\n * node --experimental-sea-config sea-config.json\n * ```\n * 4. Create a copy of the `node` executable and name it according to your needs:\n *    * On systems other than Windows:\n * ```bash\n * cp $(command -v node) hello\n * ```\n *    * On Windows:\n * ```text\n * node -e "require(\'fs\').copyFileSync(process.execPath, \'hello.exe\')"\n * ```\n * The `.exe` extension is necessary.\n * 5. Remove the signature of the binary (macOS and Windows only):\n *    * On macOS:\n * ```bash\n * codesign --remove-signature hello\n * ```\n *    * On Windows (optional):\n * [signtool](https://learn.microsoft.com/en-us/windows/win32/seccrypto/signtool) can be used from the installed [Windows SDK](https://developer.microsoft.com/en-us/windows/downloads/windows-sdk/).\n * If this step is\n * skipped, ignore any signature-related warning from postject.\n * ```powershell\n * signtool remove /s hello.exe\n * ```\n * 6. Inject the blob into the copied binary by running `postject` with\n * the following options:\n *    * `hello` / `hello.exe` \\- The name of the copy of the `node` executable\n *    created in step 4.\n *    * `NODE_SEA_BLOB` \\- The name of the resource / note / section in the binary\n *    where the contents of the blob will be stored.\n *    * `sea-prep.blob` \\- The name of the blob created in step 1.\n *    * `--sentinel-fuse NODE_SEA_FUSE_fce680ab2cc467b6e072b8b5df1996b2` \\- The [fuse](https://www.electronjs.org/docs/latest/tutorial/fuses) used by the Node.js project to detect if a file has been\n * injected.\n *    * `--macho-segment-name NODE_SEA` (only needed on macOS) - The name of the\n *    segment in the binary where the contents of the blob will be\n *    stored.\n * To summarize, here is the required command for each platform:\n *    * On Linux:\n *    ```bash\n *    npx postject hello NODE_SEA_BLOB sea-prep.blob \\\n *        --sentinel-fuse NODE_SEA_FUSE_fce680ab2cc467b6e072b8b5df1996b2\n *    ```\n *    * On Windows - PowerShell:\n *    ```powershell\n *    npx postject hello.exe NODE_SEA_BLOB sea-prep.blob `\n *        --sentinel-fuse NODE_SEA_FUSE_fce680ab2cc467b6e072b8b5df1996b2\n *    ```\n *    * On Windows - Command Prompt:\n *    ```text\n *    npx postject hello.exe NODE_SEA_BLOB sea-prep.blob ^\n *        --sentinel-fuse NODE_SEA_FUSE_fce680ab2cc467b6e072b8b5df1996b2\n *    ```\n *    * On macOS:\n *    ```bash\n *    npx postject hello NODE_SEA_BLOB sea-prep.blob \\\n *        --sentinel-fuse NODE_SEA_FUSE_fce680ab2cc467b6e072b8b5df1996b2 \\\n *        --macho-segment-name NODE_SEA\n *    ```\n * 7. Sign the binary (macOS and Windows only):\n *    * On macOS:\n * ```bash\n * codesign --sign - hello\n * ```\n *    * On Windows (optional):\n * A certificate needs to be present for this to work. However, the unsigned\n * binary would still be runnable.\n * ```powershell\n * signtool sign /fd SHA256 hello.exe\n * ```\n * 8. Run the binary:\n *    * On systems other than Windows\n * ```console\n * $ ./hello world\n * Hello, world!\n * ```\n *    * On Windows\n * ```console\n * $ .\\hello.exe world\n * Hello, world!\n * ```\n * @since v19.7.0, v18.16.0\n * @experimental\n * @see [source](https://github.com/nodejs/node/blob/v22.x/src/node_sea.cc)\n */\ndeclare module "node:sea" {\n    type AssetKey = string;\n    /**\n     * @since v20.12.0\n     * @return Whether this script is running inside a single-executable application.\n     */\n    function isSea(): boolean;\n    /**\n     * This method can be used to retrieve the assets configured to be bundled into the\n     * single-executable application at build time.\n     * An error is thrown when no matching asset can be found.\n     * @since v20.12.0\n     */\n    function getAsset(key: AssetKey): ArrayBuffer;\n    function getAsset(key: AssetKey, encoding: string): string;\n    /**\n     * Similar to `sea.getAsset()`, but returns the result in a [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob).\n     * An error is thrown when no matching asset can be found.\n     * @since v20.12.0\n     */\n    function getAssetAsBlob(key: AssetKey, options?: {\n        type: string;\n    }): Blob;\n    /**\n     * This method can be used to retrieve the assets configured to be bundled into the\n     * single-executable application at build time.\n     * An error is thrown when no matching asset can be found.\n     *\n     * Unlike `sea.getRawAsset()` or `sea.getAssetAsBlob()`, this method does not\n     * return a copy. Instead, it returns the raw asset bundled inside the executable.\n     *\n     * For now, users should avoid writing to the returned array buffer. If the\n     * injected section is not marked as writable or not aligned properly,\n     * writes to the returned array buffer is likely to result in a crash.\n     * @since v20.12.0\n     */\n    function getRawAsset(key: AssetKey): ArrayBuffer;\n}\n',
  '@types/node/sqlite.d.ts':
    "/**\n * The `node:sqlite` module facilitates working with SQLite databases.\n * To access it:\n *\n * ```js\n * import sqlite from 'node:sqlite';\n * ```\n *\n * This module is only available under the `node:` scheme. The following will not\n * work:\n *\n * ```js\n * import sqlite from 'sqlite';\n * ```\n *\n * The following example shows the basic usage of the `node:sqlite` module to open\n * an in-memory database, write data to the database, and then read the data back.\n *\n * ```js\n * import { DatabaseSync } from 'node:sqlite';\n * const database = new DatabaseSync(':memory:');\n *\n * // Execute SQL statements from strings.\n * database.exec(`\n *   CREATE TABLE data(\n *     key INTEGER PRIMARY KEY,\n *     value TEXT\n *   ) STRICT\n * `);\n * // Create a prepared statement to insert data into the database.\n * const insert = database.prepare('INSERT INTO data (key, value) VALUES (?, ?)');\n * // Execute the prepared statement with bound values.\n * insert.run(1, 'hello');\n * insert.run(2, 'world');\n * // Create a prepared statement to read data from the database.\n * const query = database.prepare('SELECT * FROM data ORDER BY key');\n * // Execute the prepared statement and log the result set.\n * console.log(query.all());\n * // Prints: [ { key: 1, value: 'hello' }, { key: 2, value: 'world' } ]\n * ```\n * @since v22.5.0\n * @experimental\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/sqlite.js)\n */\ndeclare module \"node:sqlite\" {\n    type SQLInputValue = null | number | bigint | string | NodeJS.ArrayBufferView;\n    type SQLOutputValue = null | number | bigint | string | Uint8Array;\n    /** @deprecated Use `SQLInputValue` or `SQLOutputValue` instead. */\n    type SupportedValueType = SQLOutputValue;\n    interface DatabaseSyncOptions {\n        /**\n         * If `true`, the database is opened by the constructor. When\n         * this value is `false`, the database must be opened via the `open()` method.\n         * @since v22.5.0\n         * @default true\n         */\n        open?: boolean | undefined;\n        /**\n         * If `true`, foreign key constraints\n         * are enabled. This is recommended but can be disabled for compatibility with\n         * legacy database schemas. The enforcement of foreign key constraints can be\n         * enabled and disabled after opening the database using\n         * [`PRAGMA foreign_keys`](https://www.sqlite.org/pragma.html#pragma_foreign_keys).\n         * @since v22.10.0\n         * @default true\n         */\n        enableForeignKeyConstraints?: boolean | undefined;\n        /**\n         * If `true`, SQLite will accept\n         * [double-quoted string literals](https://www.sqlite.org/quirks.html#dblquote).\n         * This is not recommended but can be\n         * enabled for compatibility with legacy database schemas.\n         * @since v22.10.0\n         * @default false\n         */\n        enableDoubleQuotedStringLiterals?: boolean | undefined;\n        /**\n         * If `true`, the database is opened in read-only mode.\n         * If the database does not exist, opening it will fail.\n         * @since v22.12.0\n         * @default false\n         */\n        readOnly?: boolean | undefined;\n        /**\n         * If `true`, the `loadExtension` SQL function\n         * and the `loadExtension()` method are enabled.\n         * You can call `enableLoadExtension(false)` later to disable this feature.\n         * @since v22.13.0\n         * @default false\n         */\n        allowExtension?: boolean | undefined;\n    }\n    interface CreateSessionOptions {\n        /**\n         * A specific table to track changes for. By default, changes to all tables are tracked.\n         * @since v22.12.0\n         */\n        table?: string | undefined;\n        /**\n         * Name of the database to track. This is useful when multiple databases have been added using\n         * [`ATTACH DATABASE`](https://www.sqlite.org/lang_attach.html).\n         * @since v22.12.0\n         * @default 'main'\n         */\n        db?: string | undefined;\n    }\n    interface ApplyChangesetOptions {\n        /**\n         * Skip changes that, when targeted table name is supplied to this function, return a truthy value.\n         * By default, all changes are attempted.\n         * @since v22.12.0\n         */\n        filter?: ((tableName: string) => boolean) | undefined;\n        /**\n         * A function that determines how to handle conflicts. The function receives one argument,\n         * which can be one of the following values:\n         *\n         * * `SQLITE_CHANGESET_DATA`: A `DELETE` or `UPDATE` change does not contain the expected \"before\" values.\n         * * `SQLITE_CHANGESET_NOTFOUND`: A row matching the primary key of the `DELETE` or `UPDATE` change does not exist.\n         * * `SQLITE_CHANGESET_CONFLICT`: An `INSERT` change results in a duplicate primary key.\n         * * `SQLITE_CHANGESET_FOREIGN_KEY`: Applying a change would result in a foreign key violation.\n         * * `SQLITE_CHANGESET_CONSTRAINT`: Applying a change results in a `UNIQUE`, `CHECK`, or `NOT NULL` constraint\n         * violation.\n         *\n         * The function should return one of the following values:\n         *\n         * * `SQLITE_CHANGESET_OMIT`: Omit conflicting changes.\n         * * `SQLITE_CHANGESET_REPLACE`: Replace existing values with conflicting changes (only valid with\n             `SQLITE_CHANGESET_DATA` or `SQLITE_CHANGESET_CONFLICT` conflicts).\n         * * `SQLITE_CHANGESET_ABORT`: Abort on conflict and roll back the database.\n         *\n         * When an error is thrown in the conflict handler or when any other value is returned from the handler,\n         * applying the changeset is aborted and the database is rolled back.\n         *\n         * **Default**: A function that returns `SQLITE_CHANGESET_ABORT`.\n         * @since v22.12.0\n         */\n        onConflict?: ((conflictType: number) => number) | undefined;\n    }\n    interface FunctionOptions {\n        /**\n         * If `true`, the [`SQLITE_DETERMINISTIC`](https://www.sqlite.org/c3ref/c_deterministic.html) flag is\n         * set on the created function.\n         * @default false\n         */\n        deterministic?: boolean | undefined;\n        /**\n         * If `true`, the [`SQLITE_DIRECTONLY`](https://www.sqlite.org/c3ref/c_directonly.html) flag is set on\n         * the created function.\n         * @default false\n         */\n        directOnly?: boolean | undefined;\n        /**\n         * If `true`, integer arguments to `function`\n         * are converted to `BigInt`s. If `false`, integer arguments are passed as\n         * JavaScript numbers.\n         * @default false\n         */\n        useBigIntArguments?: boolean | undefined;\n        /**\n         * If `true`, `function` may be invoked with any number of\n         * arguments (between zero and\n         * [`SQLITE_MAX_FUNCTION_ARG`](https://www.sqlite.org/limits.html#max_function_arg)). If `false`,\n         * `function` must be invoked with exactly `function.length` arguments.\n         * @default false\n         */\n        varargs?: boolean | undefined;\n    }\n    /**\n     * This class represents a single [connection](https://www.sqlite.org/c3ref/sqlite3.html) to a SQLite database. All APIs\n     * exposed by this class execute synchronously.\n     * @since v22.5.0\n     */\n    class DatabaseSync implements Disposable {\n        /**\n         * Constructs a new `DatabaseSync` instance.\n         * @param path The path of the database.\n         * A SQLite database can be stored in a file or completely [in memory](https://www.sqlite.org/inmemorydb.html).\n         * To use a file-backed database, the path should be a file path.\n         * To use an in-memory database, the path should be the special name `':memory:'`.\n         * @param options Configuration options for the database connection.\n         */\n        constructor(path: string | Buffer | URL, options?: DatabaseSyncOptions);\n        /**\n         * Closes the database connection. An exception is thrown if the database is not\n         * open. This method is a wrapper around [`sqlite3_close_v2()`](https://www.sqlite.org/c3ref/close.html).\n         * @since v22.5.0\n         */\n        close(): void;\n        /**\n         * Loads a shared library into the database connection. This method is a wrapper\n         * around [`sqlite3_load_extension()`](https://www.sqlite.org/c3ref/load_extension.html). It is required to enable the\n         * `allowExtension` option when constructing the `DatabaseSync` instance.\n         * @since v22.13.0\n         * @param path The path to the shared library to load.\n         */\n        loadExtension(path: string): void;\n        /**\n         * Enables or disables the `loadExtension` SQL function, and the `loadExtension()`\n         * method. When `allowExtension` is `false` when constructing, you cannot enable\n         * loading extensions for security reasons.\n         * @since v22.13.0\n         * @param allow Whether to allow loading extensions.\n         */\n        enableLoadExtension(allow: boolean): void;\n        /**\n         * This method allows one or more SQL statements to be executed without returning\n         * any results. This method is useful when executing SQL statements read from a\n         * file. This method is a wrapper around [`sqlite3_exec()`](https://www.sqlite.org/c3ref/exec.html).\n         * @since v22.5.0\n         * @param sql A SQL string to execute.\n         */\n        exec(sql: string): void;\n        /**\n         * This method is used to create SQLite user-defined functions. This method is a\n         * wrapper around [`sqlite3_create_function_v2()`](https://www.sqlite.org/c3ref/create_function.html).\n         * @since v22.13.0\n         * @param name The name of the SQLite function to create.\n         * @param options Optional configuration settings for the function.\n         * @param func The JavaScript function to call when the SQLite\n         * function is invoked. The return value of this function should be a valid\n         * SQLite data type: see\n         * [Type conversion between JavaScript and SQLite](https://nodejs.org/docs/latest-v22.x/api/sqlite.html#type-conversion-between-javascript-and-sqlite).\n         * The result defaults to `NULL` if the return value is `undefined`.\n         */\n        function(\n            name: string,\n            options: FunctionOptions,\n            func: (...args: SQLOutputValue[]) => SQLInputValue,\n        ): void;\n        function(name: string, func: (...args: SQLOutputValue[]) => SQLInputValue): void;\n        /**\n         * Whether the database is currently open or not.\n         * @since v22.15.0\n         */\n        readonly isOpen: boolean;\n        /**\n         * Opens the database specified in the `path` argument of the `DatabaseSync`constructor. This method should only be used when the database is not opened via\n         * the constructor. An exception is thrown if the database is already open.\n         * @since v22.5.0\n         */\n        open(): void;\n        /**\n         * Compiles a SQL statement into a [prepared statement](https://www.sqlite.org/c3ref/stmt.html). This method is a wrapper\n         * around [`sqlite3_prepare_v2()`](https://www.sqlite.org/c3ref/prepare.html).\n         * @since v22.5.0\n         * @param sql A SQL string to compile to a prepared statement.\n         * @return The prepared statement.\n         */\n        prepare(sql: string): StatementSync;\n        /**\n         * Creates and attaches a session to the database. This method is a wrapper around\n         * [`sqlite3session_create()`](https://www.sqlite.org/session/sqlite3session_create.html) and\n         * [`sqlite3session_attach()`](https://www.sqlite.org/session/sqlite3session_attach.html).\n         * @param options The configuration options for the session.\n         * @returns A session handle.\n         * @since v22.12.0\n         */\n        createSession(options?: CreateSessionOptions): Session;\n        /**\n         * An exception is thrown if the database is not\n         * open. This method is a wrapper around\n         * [`sqlite3changeset_apply()`](https://www.sqlite.org/session/sqlite3changeset_apply.html).\n         *\n         * ```js\n         * const sourceDb = new DatabaseSync(':memory:');\n         * const targetDb = new DatabaseSync(':memory:');\n         *\n         * sourceDb.exec('CREATE TABLE data(key INTEGER PRIMARY KEY, value TEXT)');\n         * targetDb.exec('CREATE TABLE data(key INTEGER PRIMARY KEY, value TEXT)');\n         *\n         * const session = sourceDb.createSession();\n         *\n         * const insert = sourceDb.prepare('INSERT INTO data (key, value) VALUES (?, ?)');\n         * insert.run(1, 'hello');\n         * insert.run(2, 'world');\n         *\n         * const changeset = session.changeset();\n         * targetDb.applyChangeset(changeset);\n         * // Now that the changeset has been applied, targetDb contains the same data as sourceDb.\n         * ```\n         * @param changeset A binary changeset or patchset.\n         * @param options The configuration options for how the changes will be applied.\n         * @returns Whether the changeset was applied successfully without being aborted.\n         * @since v22.12.0\n         */\n        applyChangeset(changeset: Uint8Array, options?: ApplyChangesetOptions): boolean;\n        /**\n         * Closes the database connection. If the database connection is already closed\n         * then this is a no-op.\n         * @since v22.15.0\n         * @experimental\n         */\n        [Symbol.dispose](): void;\n    }\n    /**\n     * @since v22.12.0\n     */\n    interface Session {\n        /**\n         * Retrieves a changeset containing all changes since the changeset was created. Can be called multiple times.\n         * An exception is thrown if the database or the session is not open. This method is a wrapper around\n         * [`sqlite3session_changeset()`](https://www.sqlite.org/session/sqlite3session_changeset.html).\n         * @returns Binary changeset that can be applied to other databases.\n         * @since v22.12.0\n         */\n        changeset(): Uint8Array;\n        /**\n         * Similar to the method above, but generates a more compact patchset. See\n         * [Changesets and Patchsets](https://www.sqlite.org/sessionintro.html#changesets_and_patchsets)\n         * in the documentation of SQLite. An exception is thrown if the database or the session is not open. This method is a\n         * wrapper around\n         * [`sqlite3session_patchset()`](https://www.sqlite.org/session/sqlite3session_patchset.html).\n         * @returns Binary patchset that can be applied to other databases.\n         * @since v22.12.0\n         */\n        patchset(): Uint8Array;\n        /**\n         * Closes the session. An exception is thrown if the database or the session is not open. This method is a\n         * wrapper around\n         * [`sqlite3session_delete()`](https://www.sqlite.org/session/sqlite3session_delete.html).\n         */\n        close(): void;\n    }\n    interface StatementResultingChanges {\n        /**\n         * The number of rows modified, inserted, or deleted by the most recently completed `INSERT`, `UPDATE`, or `DELETE` statement.\n         * This field is either a number or a `BigInt` depending on the prepared statement's configuration.\n         * This property is the result of [`sqlite3_changes64()`](https://www.sqlite.org/c3ref/changes.html).\n         */\n        changes: number | bigint;\n        /**\n         * The most recently inserted rowid.\n         * This field is either a number or a `BigInt` depending on the prepared statement's configuration.\n         * This property is the result of [`sqlite3_last_insert_rowid()`](https://www.sqlite.org/c3ref/last_insert_rowid.html).\n         */\n        lastInsertRowid: number | bigint;\n    }\n    /**\n     * This class represents a single [prepared statement](https://www.sqlite.org/c3ref/stmt.html). This class cannot be\n     * instantiated via its constructor. Instead, instances are created via the`database.prepare()` method. All APIs exposed by this class execute\n     * synchronously.\n     *\n     * A prepared statement is an efficient binary representation of the SQL used to\n     * create it. Prepared statements are parameterizable, and can be invoked multiple\n     * times with different bound values. Parameters also offer protection against [SQL injection](https://en.wikipedia.org/wiki/SQL_injection) attacks. For these reasons, prepared statements are\n     * preferred\n     * over hand-crafted SQL strings when handling user input.\n     * @since v22.5.0\n     */\n    class StatementSync {\n        private constructor();\n        /**\n         * This method executes a prepared statement and returns all results as an array of\n         * objects. If the prepared statement does not return any results, this method\n         * returns an empty array. The prepared statement [parameters are bound](https://www.sqlite.org/c3ref/bind_blob.html) using\n         * the values in `namedParameters` and `anonymousParameters`.\n         * @since v22.5.0\n         * @param namedParameters An optional object used to bind named parameters. The keys of this object are used to configure the mapping.\n         * @param anonymousParameters Zero or more values to bind to anonymous parameters.\n         * @return An array of objects. Each object corresponds to a row returned by executing the prepared statement. The keys and values of each object correspond to the column names and values of\n         * the row.\n         */\n        all(...anonymousParameters: SQLInputValue[]): Record<string, SQLOutputValue>[];\n        all(\n            namedParameters: Record<string, SQLInputValue>,\n            ...anonymousParameters: SQLInputValue[]\n        ): Record<string, SQLOutputValue>[];\n        /**\n         * The source SQL text of the prepared statement with parameter\n         * placeholders replaced by the values that were used during the most recent\n         * execution of this prepared statement. This property is a wrapper around\n         * [`sqlite3_expanded_sql()`](https://www.sqlite.org/c3ref/expanded_sql.html).\n         * @since v22.5.0\n         */\n        readonly expandedSQL: string;\n        /**\n         * This method executes a prepared statement and returns the first result as an\n         * object. If the prepared statement does not return any results, this method\n         * returns `undefined`. The prepared statement [parameters are bound](https://www.sqlite.org/c3ref/bind_blob.html) using the\n         * values in `namedParameters` and `anonymousParameters`.\n         * @since v22.5.0\n         * @param namedParameters An optional object used to bind named parameters. The keys of this object are used to configure the mapping.\n         * @param anonymousParameters Zero or more values to bind to anonymous parameters.\n         * @return An object corresponding to the first row returned by executing the prepared statement. The keys and values of the object correspond to the column names and values of the row. If no\n         * rows were returned from the database then this method returns `undefined`.\n         */\n        get(...anonymousParameters: SQLInputValue[]): Record<string, SQLOutputValue> | undefined;\n        get(\n            namedParameters: Record<string, SQLInputValue>,\n            ...anonymousParameters: SQLInputValue[]\n        ): Record<string, SQLOutputValue> | undefined;\n        /**\n         * This method executes a prepared statement and returns an iterator of\n         * objects. If the prepared statement does not return any results, this method\n         * returns an empty iterator. The prepared statement [parameters are bound](https://www.sqlite.org/c3ref/bind_blob.html) using\n         * the values in `namedParameters` and `anonymousParameters`.\n         * @since v22.13.0\n         * @param namedParameters An optional object used to bind named parameters.\n         * The keys of this object are used to configure the mapping.\n         * @param anonymousParameters Zero or more values to bind to anonymous parameters.\n         * @returns An iterable iterator of objects. Each object corresponds to a row\n         * returned by executing the prepared statement. The keys and values of each\n         * object correspond to the column names and values of the row.\n         */\n        iterate(...anonymousParameters: SQLInputValue[]): NodeJS.Iterator<Record<string, SQLOutputValue>>;\n        iterate(\n            namedParameters: Record<string, SQLInputValue>,\n            ...anonymousParameters: SQLInputValue[]\n        ): NodeJS.Iterator<Record<string, SQLOutputValue>>;\n        /**\n         * This method executes a prepared statement and returns an object summarizing the\n         * resulting changes. The prepared statement [parameters are bound](https://www.sqlite.org/c3ref/bind_blob.html) using the\n         * values in `namedParameters` and `anonymousParameters`.\n         * @since v22.5.0\n         * @param namedParameters An optional object used to bind named parameters. The keys of this object are used to configure the mapping.\n         * @param anonymousParameters Zero or more values to bind to anonymous parameters.\n         */\n        run(...anonymousParameters: SQLInputValue[]): StatementResultingChanges;\n        run(\n            namedParameters: Record<string, SQLInputValue>,\n            ...anonymousParameters: SQLInputValue[]\n        ): StatementResultingChanges;\n        /**\n         * The names of SQLite parameters begin with a prefix character. By default,`node:sqlite` requires that this prefix character is present when binding\n         * parameters. However, with the exception of dollar sign character, these\n         * prefix characters also require extra quoting when used in object keys.\n         *\n         * To improve ergonomics, this method can be used to also allow bare named\n         * parameters, which do not require the prefix character in JavaScript code. There\n         * are several caveats to be aware of when enabling bare named parameters:\n         *\n         * * The prefix character is still required in SQL.\n         * * The prefix character is still allowed in JavaScript. In fact, prefixed names\n         * will have slightly better binding performance.\n         * * Using ambiguous named parameters, such as `$k` and `@k`, in the same prepared\n         * statement will result in an exception as it cannot be determined how to bind\n         * a bare name.\n         * @since v22.5.0\n         * @param enabled Enables or disables support for binding named parameters without the prefix character.\n         */\n        setAllowBareNamedParameters(enabled: boolean): void;\n        /**\n         * By default, if an unknown name is encountered while binding parameters, an\n         * exception is thrown. This method allows unknown named parameters to be ignored.\n         * @since v22.15.0\n         * @param enabled Enables or disables support for unknown named parameters.\n         */\n        setAllowUnknownNamedParameters(enabled: boolean): void;\n        /**\n         * When reading from the database, SQLite `INTEGER`s are mapped to JavaScript\n         * numbers by default. However, SQLite `INTEGER`s can store values larger than\n         * JavaScript numbers are capable of representing. In such cases, this method can\n         * be used to read `INTEGER` data using JavaScript `BigInt`s. This method has no\n         * impact on database write operations where numbers and `BigInt`s are both\n         * supported at all times.\n         * @since v22.5.0\n         * @param enabled Enables or disables the use of `BigInt`s when reading `INTEGER` fields from the database.\n         */\n        setReadBigInts(enabled: boolean): void;\n        /**\n         * The source SQL text of the prepared statement. This property is a\n         * wrapper around [`sqlite3_sql()`](https://www.sqlite.org/c3ref/expanded_sql.html).\n         * @since v22.5.0\n         */\n        readonly sourceSQL: string;\n    }\n    /**\n     * @since v22.13.0\n     */\n    namespace constants {\n        /**\n         * The conflict handler is invoked with this constant when processing a DELETE or UPDATE change if a row with the required PRIMARY KEY fields is present in the database, but one or more other (non primary-key) fields modified by the update do not contain the expected \"before\" values.\n         * @since v22.14.0\n         */\n        const SQLITE_CHANGESET_DATA: number;\n        /**\n         * The conflict handler is invoked with this constant when processing a DELETE or UPDATE change if a row with the required PRIMARY KEY fields is not present in the database.\n         * @since v22.14.0\n         */\n        const SQLITE_CHANGESET_NOTFOUND: number;\n        /**\n         * This constant is passed to the conflict handler while processing an INSERT change if the operation would result in duplicate primary key values.\n         * @since v22.14.0\n         */\n        const SQLITE_CHANGESET_CONFLICT: number;\n        /**\n         * If foreign key handling is enabled, and applying a changeset leaves the database in a state containing foreign key violations, the conflict handler is invoked with this constant exactly once before the changeset is committed. If the conflict handler returns `SQLITE_CHANGESET_OMIT`, the changes, including those that caused the foreign key constraint violation, are committed. Or, if it returns `SQLITE_CHANGESET_ABORT`, the changeset is rolled back.\n         * @since v22.14.0\n         */\n        const SQLITE_CHANGESET_FOREIGN_KEY: number;\n        /**\n         * Conflicting changes are omitted.\n         * @since v22.12.0\n         */\n        const SQLITE_CHANGESET_OMIT: number;\n        /**\n         * Conflicting changes replace existing values. Note that this value can only be returned when the type of conflict is either `SQLITE_CHANGESET_DATA` or `SQLITE_CHANGESET_CONFLICT`.\n         * @since v22.12.0\n         */\n        const SQLITE_CHANGESET_REPLACE: number;\n        /**\n         * Abort when a change encounters a conflict and roll back database.\n         * @since v22.12.0\n         */\n        const SQLITE_CHANGESET_ABORT: number;\n    }\n}\n",
  '@types/node/stream.d.ts':
    '/**\n * A stream is an abstract interface for working with streaming data in Node.js.\n * The `node:stream` module provides an API for implementing the stream interface.\n *\n * There are many stream objects provided by Node.js. For instance, a [request to an HTTP server](https://nodejs.org/docs/latest-v22.x/api/http.html#class-httpincomingmessage)\n * and [`process.stdout`](https://nodejs.org/docs/latest-v22.x/api/process.html#processstdout) are both stream instances.\n *\n * Streams can be readable, writable, or both. All streams are instances of [`EventEmitter`](https://nodejs.org/docs/latest-v22.x/api/events.html#class-eventemitter).\n *\n * To access the `node:stream` module:\n *\n * ```js\n * import stream from \'node:stream\';\n * ```\n *\n * The `node:stream` module is useful for creating new types of stream instances.\n * It is usually not necessary to use the `node:stream` module to consume streams.\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/stream.js)\n */\ndeclare module "stream" {\n    import { Abortable, EventEmitter } from "node:events";\n    import { Blob as NodeBlob } from "node:buffer";\n    import * as streamPromises from "node:stream/promises";\n    import * as streamWeb from "node:stream/web";\n\n    type ComposeFnParam = (source: any) => void;\n\n    class Stream extends EventEmitter {\n        pipe<T extends NodeJS.WritableStream>(\n            destination: T,\n            options?: {\n                end?: boolean | undefined;\n            },\n        ): T;\n        compose<T extends NodeJS.ReadableStream>(\n            stream: T | ComposeFnParam | Iterable<T> | AsyncIterable<T>,\n            options?: { signal: AbortSignal },\n        ): T;\n    }\n    namespace Stream {\n        export { Stream, streamPromises as promises };\n    }\n    namespace Stream {\n        interface StreamOptions<T extends Stream> extends Abortable {\n            emitClose?: boolean | undefined;\n            highWaterMark?: number | undefined;\n            objectMode?: boolean | undefined;\n            construct?(this: T, callback: (error?: Error | null) => void): void;\n            destroy?(this: T, error: Error | null, callback: (error?: Error | null) => void): void;\n            autoDestroy?: boolean | undefined;\n        }\n        interface ReadableOptions<T extends Readable = Readable> extends StreamOptions<T> {\n            encoding?: BufferEncoding | undefined;\n            read?(this: T, size: number): void;\n        }\n        interface ArrayOptions {\n            /**\n             * The maximum concurrent invocations of `fn` to call on the stream at once.\n             * @default 1\n             */\n            concurrency?: number;\n            /** Allows destroying the stream if the signal is aborted. */\n            signal?: AbortSignal;\n        }\n        /**\n         * @since v0.9.4\n         */\n        class Readable extends Stream implements NodeJS.ReadableStream {\n            /**\n             * A utility method for creating Readable Streams out of iterators.\n             * @since v12.3.0, v10.17.0\n             * @param iterable Object implementing the `Symbol.asyncIterator` or `Symbol.iterator` iterable protocol. Emits an \'error\' event if a null value is passed.\n             * @param options Options provided to `new stream.Readable([options])`. By default, `Readable.from()` will set `options.objectMode` to `true`, unless this is explicitly opted out by setting `options.objectMode` to `false`.\n             */\n            static from(iterable: Iterable<any> | AsyncIterable<any>, options?: ReadableOptions): Readable;\n            /**\n             * A utility method for creating a `Readable` from a web `ReadableStream`.\n             * @since v17.0.0\n             * @experimental\n             */\n            static fromWeb(\n                readableStream: streamWeb.ReadableStream,\n                options?: Pick<ReadableOptions, "encoding" | "highWaterMark" | "objectMode" | "signal">,\n            ): Readable;\n            /**\n             * A utility method for creating a web `ReadableStream` from a `Readable`.\n             * @since v17.0.0\n             * @experimental\n             */\n            static toWeb(\n                streamReadable: Readable,\n                options?: {\n                    strategy?: streamWeb.QueuingStrategy | undefined;\n                },\n            ): streamWeb.ReadableStream;\n            /**\n             * Returns whether the stream has been read from or cancelled.\n             * @since v16.8.0\n             */\n            static isDisturbed(stream: Readable | NodeJS.ReadableStream): boolean;\n            /**\n             * Returns whether the stream was destroyed or errored before emitting `\'end\'`.\n             * @since v16.8.0\n             * @experimental\n             */\n            readonly readableAborted: boolean;\n            /**\n             * Is `true` if it is safe to call {@link read}, which means\n             * the stream has not been destroyed or emitted `\'error\'` or `\'end\'`.\n             * @since v11.4.0\n             */\n            readable: boolean;\n            /**\n             * Returns whether `\'data\'` has been emitted.\n             * @since v16.7.0, v14.18.0\n             * @experimental\n             */\n            readonly readableDidRead: boolean;\n            /**\n             * Getter for the property `encoding` of a given `Readable` stream. The `encoding` property can be set using the {@link setEncoding} method.\n             * @since v12.7.0\n             */\n            readonly readableEncoding: BufferEncoding | null;\n            /**\n             * Becomes `true` when [`\'end\'`](https://nodejs.org/docs/latest-v22.x/api/stream.html#event-end) event is emitted.\n             * @since v12.9.0\n             */\n            readonly readableEnded: boolean;\n            /**\n             * This property reflects the current state of a `Readable` stream as described\n             * in the [Three states](https://nodejs.org/docs/latest-v22.x/api/stream.html#three-states) section.\n             * @since v9.4.0\n             */\n            readonly readableFlowing: boolean | null;\n            /**\n             * Returns the value of `highWaterMark` passed when creating this `Readable`.\n             * @since v9.3.0\n             */\n            readonly readableHighWaterMark: number;\n            /**\n             * This property contains the number of bytes (or objects) in the queue\n             * ready to be read. The value provides introspection data regarding\n             * the status of the `highWaterMark`.\n             * @since v9.4.0\n             */\n            readonly readableLength: number;\n            /**\n             * Getter for the property `objectMode` of a given `Readable` stream.\n             * @since v12.3.0\n             */\n            readonly readableObjectMode: boolean;\n            /**\n             * Is `true` after `readable.destroy()` has been called.\n             * @since v8.0.0\n             */\n            destroyed: boolean;\n            /**\n             * Is `true` after `\'close\'` has been emitted.\n             * @since v18.0.0\n             */\n            readonly closed: boolean;\n            /**\n             * Returns error if the stream has been destroyed with an error.\n             * @since v18.0.0\n             */\n            readonly errored: Error | null;\n            constructor(opts?: ReadableOptions);\n            _construct?(callback: (error?: Error | null) => void): void;\n            _read(size: number): void;\n            /**\n             * The `readable.read()` method reads data out of the internal buffer and\n             * returns it. If no data is available to be read, `null` is returned. By default,\n             * the data is returned as a `Buffer` object unless an encoding has been\n             * specified using the `readable.setEncoding()` method or the stream is operating\n             * in object mode.\n             *\n             * The optional `size` argument specifies a specific number of bytes to read. If\n             * `size` bytes are not available to be read, `null` will be returned _unless_ the\n             * stream has ended, in which case all of the data remaining in the internal buffer\n             * will be returned.\n             *\n             * If the `size` argument is not specified, all of the data contained in the\n             * internal buffer will be returned.\n             *\n             * The `size` argument must be less than or equal to 1 GiB.\n             *\n             * The `readable.read()` method should only be called on `Readable` streams\n             * operating in paused mode. In flowing mode, `readable.read()` is called\n             * automatically until the internal buffer is fully drained.\n             *\n             * ```js\n             * const readable = getReadableStreamSomehow();\n             *\n             * // \'readable\' may be triggered multiple times as data is buffered in\n             * readable.on(\'readable\', () => {\n             *   let chunk;\n             *   console.log(\'Stream is readable (new data received in buffer)\');\n             *   // Use a loop to make sure we read all currently available data\n             *   while (null !== (chunk = readable.read())) {\n             *     console.log(`Read ${chunk.length} bytes of data...`);\n             *   }\n             * });\n             *\n             * // \'end\' will be triggered once when there is no more data available\n             * readable.on(\'end\', () => {\n             *   console.log(\'Reached end of stream.\');\n             * });\n             * ```\n             *\n             * Each call to `readable.read()` returns a chunk of data, or `null`. The chunks\n             * are not concatenated. A `while` loop is necessary to consume all data\n             * currently in the buffer. When reading a large file `.read()` may return `null`,\n             * having consumed all buffered content so far, but there is still more data to\n             * come not yet buffered. In this case a new `\'readable\'` event will be emitted\n             * when there is more data in the buffer. Finally the `\'end\'` event will be\n             * emitted when there is no more data to come.\n             *\n             * Therefore to read a file\'s whole contents from a `readable`, it is necessary\n             * to collect chunks across multiple `\'readable\'` events:\n             *\n             * ```js\n             * const chunks = [];\n             *\n             * readable.on(\'readable\', () => {\n             *   let chunk;\n             *   while (null !== (chunk = readable.read())) {\n             *     chunks.push(chunk);\n             *   }\n             * });\n             *\n             * readable.on(\'end\', () => {\n             *   const content = chunks.join(\'\');\n             * });\n             * ```\n             *\n             * A `Readable` stream in object mode will always return a single item from\n             * a call to `readable.read(size)`, regardless of the value of the `size` argument.\n             *\n             * If the `readable.read()` method returns a chunk of data, a `\'data\'` event will\n             * also be emitted.\n             *\n             * Calling {@link read} after the `\'end\'` event has\n             * been emitted will return `null`. No runtime error will be raised.\n             * @since v0.9.4\n             * @param size Optional argument to specify how much data to read.\n             */\n            read(size?: number): any;\n            /**\n             * The `readable.setEncoding()` method sets the character encoding for\n             * data read from the `Readable` stream.\n             *\n             * By default, no encoding is assigned and stream data will be returned as `Buffer` objects. Setting an encoding causes the stream data\n             * to be returned as strings of the specified encoding rather than as `Buffer` objects. For instance, calling `readable.setEncoding(\'utf8\')` will cause the\n             * output data to be interpreted as UTF-8 data, and passed as strings. Calling `readable.setEncoding(\'hex\')` will cause the data to be encoded in hexadecimal\n             * string format.\n             *\n             * The `Readable` stream will properly handle multi-byte characters delivered\n             * through the stream that would otherwise become improperly decoded if simply\n             * pulled from the stream as `Buffer` objects.\n             *\n             * ```js\n             * const readable = getReadableStreamSomehow();\n             * readable.setEncoding(\'utf8\');\n             * readable.on(\'data\', (chunk) => {\n             *   assert.equal(typeof chunk, \'string\');\n             *   console.log(\'Got %d characters of string data:\', chunk.length);\n             * });\n             * ```\n             * @since v0.9.4\n             * @param encoding The encoding to use.\n             */\n            setEncoding(encoding: BufferEncoding): this;\n            /**\n             * The `readable.pause()` method will cause a stream in flowing mode to stop\n             * emitting `\'data\'` events, switching out of flowing mode. Any data that\n             * becomes available will remain in the internal buffer.\n             *\n             * ```js\n             * const readable = getReadableStreamSomehow();\n             * readable.on(\'data\', (chunk) => {\n             *   console.log(`Received ${chunk.length} bytes of data.`);\n             *   readable.pause();\n             *   console.log(\'There will be no additional data for 1 second.\');\n             *   setTimeout(() => {\n             *     console.log(\'Now data will start flowing again.\');\n             *     readable.resume();\n             *   }, 1000);\n             * });\n             * ```\n             *\n             * The `readable.pause()` method has no effect if there is a `\'readable\'` event listener.\n             * @since v0.9.4\n             */\n            pause(): this;\n            /**\n             * The `readable.resume()` method causes an explicitly paused `Readable` stream to\n             * resume emitting `\'data\'` events, switching the stream into flowing mode.\n             *\n             * The `readable.resume()` method can be used to fully consume the data from a\n             * stream without actually processing any of that data:\n             *\n             * ```js\n             * getReadableStreamSomehow()\n             *   .resume()\n             *   .on(\'end\', () => {\n             *     console.log(\'Reached the end, but did not read anything.\');\n             *   });\n             * ```\n             *\n             * The `readable.resume()` method has no effect if there is a `\'readable\'` event listener.\n             * @since v0.9.4\n             */\n            resume(): this;\n            /**\n             * The `readable.isPaused()` method returns the current operating state of the `Readable`.\n             * This is used primarily by the mechanism that underlies the `readable.pipe()` method.\n             * In most typical cases, there will be no reason to use this method directly.\n             *\n             * ```js\n             * const readable = new stream.Readable();\n             *\n             * readable.isPaused(); // === false\n             * readable.pause();\n             * readable.isPaused(); // === true\n             * readable.resume();\n             * readable.isPaused(); // === false\n             * ```\n             * @since v0.11.14\n             */\n            isPaused(): boolean;\n            /**\n             * The `readable.unpipe()` method detaches a `Writable` stream previously attached\n             * using the {@link pipe} method.\n             *\n             * If the `destination` is not specified, then _all_ pipes are detached.\n             *\n             * If the `destination` is specified, but no pipe is set up for it, then\n             * the method does nothing.\n             *\n             * ```js\n             * import fs from \'node:fs\';\n             * const readable = getReadableStreamSomehow();\n             * const writable = fs.createWriteStream(\'file.txt\');\n             * // All the data from readable goes into \'file.txt\',\n             * // but only for the first second.\n             * readable.pipe(writable);\n             * setTimeout(() => {\n             *   console.log(\'Stop writing to file.txt.\');\n             *   readable.unpipe(writable);\n             *   console.log(\'Manually close the file stream.\');\n             *   writable.end();\n             * }, 1000);\n             * ```\n             * @since v0.9.4\n             * @param destination Optional specific stream to unpipe\n             */\n            unpipe(destination?: NodeJS.WritableStream): this;\n            /**\n             * Passing `chunk` as `null` signals the end of the stream (EOF) and behaves the\n             * same as `readable.push(null)`, after which no more data can be written. The EOF\n             * signal is put at the end of the buffer and any buffered data will still be\n             * flushed.\n             *\n             * The `readable.unshift()` method pushes a chunk of data back into the internal\n             * buffer. This is useful in certain situations where a stream is being consumed by\n             * code that needs to "un-consume" some amount of data that it has optimistically\n             * pulled out of the source, so that the data can be passed on to some other party.\n             *\n             * The `stream.unshift(chunk)` method cannot be called after the `\'end\'` event\n             * has been emitted or a runtime error will be thrown.\n             *\n             * Developers using `stream.unshift()` often should consider switching to\n             * use of a `Transform` stream instead. See the `API for stream implementers` section for more information.\n             *\n             * ```js\n             * // Pull off a header delimited by \\n\\n.\n             * // Use unshift() if we get too much.\n             * // Call the callback with (error, header, stream).\n             * import { StringDecoder } from \'node:string_decoder\';\n             * function parseHeader(stream, callback) {\n             *   stream.on(\'error\', callback);\n             *   stream.on(\'readable\', onReadable);\n             *   const decoder = new StringDecoder(\'utf8\');\n             *   let header = \'\';\n             *   function onReadable() {\n             *     let chunk;\n             *     while (null !== (chunk = stream.read())) {\n             *       const str = decoder.write(chunk);\n             *       if (str.includes(\'\\n\\n\')) {\n             *         // Found the header boundary.\n             *         const split = str.split(/\\n\\n/);\n             *         header += split.shift();\n             *         const remaining = split.join(\'\\n\\n\');\n             *         const buf = Buffer.from(remaining, \'utf8\');\n             *         stream.removeListener(\'error\', callback);\n             *         // Remove the \'readable\' listener before unshifting.\n             *         stream.removeListener(\'readable\', onReadable);\n             *         if (buf.length)\n             *           stream.unshift(buf);\n             *         // Now the body of the message can be read from the stream.\n             *         callback(null, header, stream);\n             *         return;\n             *       }\n             *       // Still reading the header.\n             *       header += str;\n             *     }\n             *   }\n             * }\n             * ```\n             *\n             * Unlike {@link push}, `stream.unshift(chunk)` will not\n             * end the reading process by resetting the internal reading state of the stream.\n             * This can cause unexpected results if `readable.unshift()` is called during a\n             * read (i.e. from within a {@link _read} implementation on a\n             * custom stream). Following the call to `readable.unshift()` with an immediate {@link push} will reset the reading state appropriately,\n             * however it is best to simply avoid calling `readable.unshift()` while in the\n             * process of performing a read.\n             * @since v0.9.11\n             * @param chunk Chunk of data to unshift onto the read queue. For streams not operating in object mode, `chunk` must\n             * be a {string}, {Buffer}, {TypedArray}, {DataView} or `null`. For object mode streams, `chunk` may be any JavaScript value.\n             * @param encoding Encoding of string chunks. Must be a valid `Buffer` encoding, such as `\'utf8\'` or `\'ascii\'`.\n             */\n            unshift(chunk: any, encoding?: BufferEncoding): void;\n            /**\n             * Prior to Node.js 0.10, streams did not implement the entire `node:stream` module API as it is currently defined. (See `Compatibility` for more\n             * information.)\n             *\n             * When using an older Node.js library that emits `\'data\'` events and has a {@link pause} method that is advisory only, the `readable.wrap()` method can be used to create a `Readable`\n             * stream that uses\n             * the old stream as its data source.\n             *\n             * It will rarely be necessary to use `readable.wrap()` but the method has been\n             * provided as a convenience for interacting with older Node.js applications and\n             * libraries.\n             *\n             * ```js\n             * import { OldReader } from \'./old-api-module.js\';\n             * import { Readable } from \'node:stream\';\n             * const oreader = new OldReader();\n             * const myReader = new Readable().wrap(oreader);\n             *\n             * myReader.on(\'readable\', () => {\n             *   myReader.read(); // etc.\n             * });\n             * ```\n             * @since v0.9.4\n             * @param stream An "old style" readable stream\n             */\n            wrap(stream: NodeJS.ReadableStream): this;\n            push(chunk: any, encoding?: BufferEncoding): boolean;\n            /**\n             * The iterator created by this method gives users the option to cancel the destruction\n             * of the stream if the `for await...of` loop is exited by `return`, `break`, or `throw`,\n             * or if the iterator should destroy the stream if the stream emitted an error during iteration.\n             * @since v16.3.0\n             * @param options.destroyOnReturn When set to `false`, calling `return` on the async iterator,\n             * or exiting a `for await...of` iteration using a `break`, `return`, or `throw` will not destroy the stream.\n             * **Default: `true`**.\n             */\n            iterator(options?: { destroyOnReturn?: boolean }): NodeJS.AsyncIterator<any>;\n            /**\n             * This method allows mapping over the stream. The *fn* function will be called for every chunk in the stream.\n             * If the *fn* function returns a promise - that promise will be `await`ed before being passed to the result stream.\n             * @since v17.4.0, v16.14.0\n             * @param fn a function to map over every chunk in the stream. Async or not.\n             * @returns a stream mapped with the function *fn*.\n             */\n            map(fn: (data: any, options?: Pick<ArrayOptions, "signal">) => any, options?: ArrayOptions): Readable;\n            /**\n             * This method allows filtering the stream. For each chunk in the stream the *fn* function will be called\n             * and if it returns a truthy value, the chunk will be passed to the result stream.\n             * If the *fn* function returns a promise - that promise will be `await`ed.\n             * @since v17.4.0, v16.14.0\n             * @param fn a function to filter chunks from the stream. Async or not.\n             * @returns a stream filtered with the predicate *fn*.\n             */\n            filter(\n                fn: (data: any, options?: Pick<ArrayOptions, "signal">) => boolean | Promise<boolean>,\n                options?: ArrayOptions,\n            ): Readable;\n            /**\n             * This method allows iterating a stream. For each chunk in the stream the *fn* function will be called.\n             * If the *fn* function returns a promise - that promise will be `await`ed.\n             *\n             * This method is different from `for await...of` loops in that it can optionally process chunks concurrently.\n             * In addition, a `forEach` iteration can only be stopped by having passed a `signal` option\n             * and aborting the related AbortController while `for await...of` can be stopped with `break` or `return`.\n             * In either case the stream will be destroyed.\n             *\n             * This method is different from listening to the `\'data\'` event in that it uses the `readable` event\n             * in the underlying machinary and can limit the number of concurrent *fn* calls.\n             * @since v17.5.0\n             * @param fn a function to call on each chunk of the stream. Async or not.\n             * @returns a promise for when the stream has finished.\n             */\n            forEach(\n                fn: (data: any, options?: Pick<ArrayOptions, "signal">) => void | Promise<void>,\n                options?: ArrayOptions,\n            ): Promise<void>;\n            /**\n             * This method allows easily obtaining the contents of a stream.\n             *\n             * As this method reads the entire stream into memory, it negates the benefits of streams. It\'s intended\n             * for interoperability and convenience, not as the primary way to consume streams.\n             * @since v17.5.0\n             * @returns a promise containing an array with the contents of the stream.\n             */\n            toArray(options?: Pick<ArrayOptions, "signal">): Promise<any[]>;\n            /**\n             * This method is similar to `Array.prototype.some` and calls *fn* on each chunk in the stream\n             * until the awaited return value is `true` (or any truthy value). Once an *fn* call on a chunk\n             * `await`ed return value is truthy, the stream is destroyed and the promise is fulfilled with `true`.\n             * If none of the *fn* calls on the chunks return a truthy value, the promise is fulfilled with `false`.\n             * @since v17.5.0\n             * @param fn a function to call on each chunk of the stream. Async or not.\n             * @returns a promise evaluating to `true` if *fn* returned a truthy value for at least one of the chunks.\n             */\n            some(\n                fn: (data: any, options?: Pick<ArrayOptions, "signal">) => boolean | Promise<boolean>,\n                options?: ArrayOptions,\n            ): Promise<boolean>;\n            /**\n             * This method is similar to `Array.prototype.find` and calls *fn* on each chunk in the stream\n             * to find a chunk with a truthy value for *fn*. Once an *fn* call\'s awaited return value is truthy,\n             * the stream is destroyed and the promise is fulfilled with value for which *fn* returned a truthy value.\n             * If all of the *fn* calls on the chunks return a falsy value, the promise is fulfilled with `undefined`.\n             * @since v17.5.0\n             * @param fn a function to call on each chunk of the stream. Async or not.\n             * @returns a promise evaluating to the first chunk for which *fn* evaluated with a truthy value,\n             * or `undefined` if no element was found.\n             */\n            find<T>(\n                fn: (data: any, options?: Pick<ArrayOptions, "signal">) => data is T,\n                options?: ArrayOptions,\n            ): Promise<T | undefined>;\n            find(\n                fn: (data: any, options?: Pick<ArrayOptions, "signal">) => boolean | Promise<boolean>,\n                options?: ArrayOptions,\n            ): Promise<any>;\n            /**\n             * This method is similar to `Array.prototype.every` and calls *fn* on each chunk in the stream\n             * to check if all awaited return values are truthy value for *fn*. Once an *fn* call on a chunk\n             * `await`ed return value is falsy, the stream is destroyed and the promise is fulfilled with `false`.\n             * If all of the *fn* calls on the chunks return a truthy value, the promise is fulfilled with `true`.\n             * @since v17.5.0\n             * @param fn a function to call on each chunk of the stream. Async or not.\n             * @returns a promise evaluating to `true` if *fn* returned a truthy value for every one of the chunks.\n             */\n            every(\n                fn: (data: any, options?: Pick<ArrayOptions, "signal">) => boolean | Promise<boolean>,\n                options?: ArrayOptions,\n            ): Promise<boolean>;\n            /**\n             * This method returns a new stream by applying the given callback to each chunk of the stream\n             * and then flattening the result.\n             *\n             * It is possible to return a stream or another iterable or async iterable from *fn* and the result streams\n             * will be merged (flattened) into the returned stream.\n             * @since v17.5.0\n             * @param fn a function to map over every chunk in the stream. May be async. May be a stream or generator.\n             * @returns a stream flat-mapped with the function *fn*.\n             */\n            flatMap(fn: (data: any, options?: Pick<ArrayOptions, "signal">) => any, options?: ArrayOptions): Readable;\n            /**\n             * This method returns a new stream with the first *limit* chunks dropped from the start.\n             * @since v17.5.0\n             * @param limit the number of chunks to drop from the readable.\n             * @returns a stream with *limit* chunks dropped from the start.\n             */\n            drop(limit: number, options?: Pick<ArrayOptions, "signal">): Readable;\n            /**\n             * This method returns a new stream with the first *limit* chunks.\n             * @since v17.5.0\n             * @param limit the number of chunks to take from the readable.\n             * @returns a stream with *limit* chunks taken.\n             */\n            take(limit: number, options?: Pick<ArrayOptions, "signal">): Readable;\n            /**\n             * This method returns a new stream with chunks of the underlying stream paired with a counter\n             * in the form `[index, chunk]`. The first index value is `0` and it increases by 1 for each chunk produced.\n             * @since v17.5.0\n             * @returns a stream of indexed pairs.\n             */\n            asIndexedPairs(options?: Pick<ArrayOptions, "signal">): Readable;\n            /**\n             * This method calls *fn* on each chunk of the stream in order, passing it the result from the calculation\n             * on the previous element. It returns a promise for the final value of the reduction.\n             *\n             * If no *initial* value is supplied the first chunk of the stream is used as the initial value.\n             * If the stream is empty, the promise is rejected with a `TypeError` with the `ERR_INVALID_ARGS` code property.\n             *\n             * The reducer function iterates the stream element-by-element which means that there is no *concurrency* parameter\n             * or parallelism. To perform a reduce concurrently, you can extract the async function to `readable.map` method.\n             * @since v17.5.0\n             * @param fn a reducer function to call over every chunk in the stream. Async or not.\n             * @param initial the initial value to use in the reduction.\n             * @returns a promise for the final value of the reduction.\n             */\n            reduce<T = any>(\n                fn: (previous: any, data: any, options?: Pick<ArrayOptions, "signal">) => T,\n                initial?: undefined,\n                options?: Pick<ArrayOptions, "signal">,\n            ): Promise<T>;\n            reduce<T = any>(\n                fn: (previous: T, data: any, options?: Pick<ArrayOptions, "signal">) => T,\n                initial: T,\n                options?: Pick<ArrayOptions, "signal">,\n            ): Promise<T>;\n            _destroy(error: Error | null, callback: (error?: Error | null) => void): void;\n            /**\n             * Destroy the stream. Optionally emit an `\'error\'` event, and emit a `\'close\'` event (unless `emitClose` is set to `false`). After this call, the readable\n             * stream will release any internal resources and subsequent calls to `push()` will be ignored.\n             *\n             * Once `destroy()` has been called any further calls will be a no-op and no\n             * further errors except from `_destroy()` may be emitted as `\'error\'`.\n             *\n             * Implementors should not override this method, but instead implement `readable._destroy()`.\n             * @since v8.0.0\n             * @param error Error which will be passed as payload in `\'error\'` event\n             */\n            destroy(error?: Error): this;\n            /**\n             * Event emitter\n             * The defined events on documents including:\n             * 1. close\n             * 2. data\n             * 3. end\n             * 4. error\n             * 5. pause\n             * 6. readable\n             * 7. resume\n             */\n            addListener(event: "close", listener: () => void): this;\n            addListener(event: "data", listener: (chunk: any) => void): this;\n            addListener(event: "end", listener: () => void): this;\n            addListener(event: "error", listener: (err: Error) => void): this;\n            addListener(event: "pause", listener: () => void): this;\n            addListener(event: "readable", listener: () => void): this;\n            addListener(event: "resume", listener: () => void): this;\n            addListener(event: string | symbol, listener: (...args: any[]) => void): this;\n            emit(event: "close"): boolean;\n            emit(event: "data", chunk: any): boolean;\n            emit(event: "end"): boolean;\n            emit(event: "error", err: Error): boolean;\n            emit(event: "pause"): boolean;\n            emit(event: "readable"): boolean;\n            emit(event: "resume"): boolean;\n            emit(event: string | symbol, ...args: any[]): boolean;\n            on(event: "close", listener: () => void): this;\n            on(event: "data", listener: (chunk: any) => void): this;\n            on(event: "end", listener: () => void): this;\n            on(event: "error", listener: (err: Error) => void): this;\n            on(event: "pause", listener: () => void): this;\n            on(event: "readable", listener: () => void): this;\n            on(event: "resume", listener: () => void): this;\n            on(event: string | symbol, listener: (...args: any[]) => void): this;\n            once(event: "close", listener: () => void): this;\n            once(event: "data", listener: (chunk: any) => void): this;\n            once(event: "end", listener: () => void): this;\n            once(event: "error", listener: (err: Error) => void): this;\n            once(event: "pause", listener: () => void): this;\n            once(event: "readable", listener: () => void): this;\n            once(event: "resume", listener: () => void): this;\n            once(event: string | symbol, listener: (...args: any[]) => void): this;\n            prependListener(event: "close", listener: () => void): this;\n            prependListener(event: "data", listener: (chunk: any) => void): this;\n            prependListener(event: "end", listener: () => void): this;\n            prependListener(event: "error", listener: (err: Error) => void): this;\n            prependListener(event: "pause", listener: () => void): this;\n            prependListener(event: "readable", listener: () => void): this;\n            prependListener(event: "resume", listener: () => void): this;\n            prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\n            prependOnceListener(event: "close", listener: () => void): this;\n            prependOnceListener(event: "data", listener: (chunk: any) => void): this;\n            prependOnceListener(event: "end", listener: () => void): this;\n            prependOnceListener(event: "error", listener: (err: Error) => void): this;\n            prependOnceListener(event: "pause", listener: () => void): this;\n            prependOnceListener(event: "readable", listener: () => void): this;\n            prependOnceListener(event: "resume", listener: () => void): this;\n            prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\n            removeListener(event: "close", listener: () => void): this;\n            removeListener(event: "data", listener: (chunk: any) => void): this;\n            removeListener(event: "end", listener: () => void): this;\n            removeListener(event: "error", listener: (err: Error) => void): this;\n            removeListener(event: "pause", listener: () => void): this;\n            removeListener(event: "readable", listener: () => void): this;\n            removeListener(event: "resume", listener: () => void): this;\n            removeListener(event: string | symbol, listener: (...args: any[]) => void): this;\n            [Symbol.asyncIterator](): NodeJS.AsyncIterator<any>;\n            /**\n             * Calls `readable.destroy()` with an `AbortError` and returns a promise that fulfills when the stream is finished.\n             * @since v20.4.0\n             */\n            [Symbol.asyncDispose](): Promise<void>;\n        }\n        interface WritableOptions<T extends Writable = Writable> extends StreamOptions<T> {\n            decodeStrings?: boolean | undefined;\n            defaultEncoding?: BufferEncoding | undefined;\n            write?(\n                this: T,\n                chunk: any,\n                encoding: BufferEncoding,\n                callback: (error?: Error | null) => void,\n            ): void;\n            writev?(\n                this: T,\n                chunks: Array<{\n                    chunk: any;\n                    encoding: BufferEncoding;\n                }>,\n                callback: (error?: Error | null) => void,\n            ): void;\n            final?(this: T, callback: (error?: Error | null) => void): void;\n        }\n        /**\n         * @since v0.9.4\n         */\n        class Writable extends Stream implements NodeJS.WritableStream {\n            /**\n             * A utility method for creating a `Writable` from a web `WritableStream`.\n             * @since v17.0.0\n             * @experimental\n             */\n            static fromWeb(\n                writableStream: streamWeb.WritableStream,\n                options?: Pick<WritableOptions, "decodeStrings" | "highWaterMark" | "objectMode" | "signal">,\n            ): Writable;\n            /**\n             * A utility method for creating a web `WritableStream` from a `Writable`.\n             * @since v17.0.0\n             * @experimental\n             */\n            static toWeb(streamWritable: Writable): streamWeb.WritableStream;\n            /**\n             * Is `true` if it is safe to call `writable.write()`, which means\n             * the stream has not been destroyed, errored, or ended.\n             * @since v11.4.0\n             */\n            readonly writable: boolean;\n            /**\n             * Returns whether the stream was destroyed or errored before emitting `\'finish\'`.\n             * @since v18.0.0, v16.17.0\n             * @experimental\n             */\n            readonly writableAborted: boolean;\n            /**\n             * Is `true` after `writable.end()` has been called. This property\n             * does not indicate whether the data has been flushed, for this use `writable.writableFinished` instead.\n             * @since v12.9.0\n             */\n            readonly writableEnded: boolean;\n            /**\n             * Is set to `true` immediately before the `\'finish\'` event is emitted.\n             * @since v12.6.0\n             */\n            readonly writableFinished: boolean;\n            /**\n             * Return the value of `highWaterMark` passed when creating this `Writable`.\n             * @since v9.3.0\n             */\n            readonly writableHighWaterMark: number;\n            /**\n             * This property contains the number of bytes (or objects) in the queue\n             * ready to be written. The value provides introspection data regarding\n             * the status of the `highWaterMark`.\n             * @since v9.4.0\n             */\n            readonly writableLength: number;\n            /**\n             * Getter for the property `objectMode` of a given `Writable` stream.\n             * @since v12.3.0\n             */\n            readonly writableObjectMode: boolean;\n            /**\n             * Number of times `writable.uncork()` needs to be\n             * called in order to fully uncork the stream.\n             * @since v13.2.0, v12.16.0\n             */\n            readonly writableCorked: number;\n            /**\n             * Is `true` after `writable.destroy()` has been called.\n             * @since v8.0.0\n             */\n            destroyed: boolean;\n            /**\n             * Is `true` after `\'close\'` has been emitted.\n             * @since v18.0.0\n             */\n            readonly closed: boolean;\n            /**\n             * Returns error if the stream has been destroyed with an error.\n             * @since v18.0.0\n             */\n            readonly errored: Error | null;\n            /**\n             * Is `true` if the stream\'s buffer has been full and stream will emit `\'drain\'`.\n             * @since v15.2.0, v14.17.0\n             */\n            readonly writableNeedDrain: boolean;\n            constructor(opts?: WritableOptions);\n            _write(chunk: any, encoding: BufferEncoding, callback: (error?: Error | null) => void): void;\n            _writev?(\n                chunks: Array<{\n                    chunk: any;\n                    encoding: BufferEncoding;\n                }>,\n                callback: (error?: Error | null) => void,\n            ): void;\n            _construct?(callback: (error?: Error | null) => void): void;\n            _destroy(error: Error | null, callback: (error?: Error | null) => void): void;\n            _final(callback: (error?: Error | null) => void): void;\n            /**\n             * The `writable.write()` method writes some data to the stream, and calls the\n             * supplied `callback` once the data has been fully handled. If an error\n             * occurs, the `callback` will be called with the error as its\n             * first argument. The `callback` is called asynchronously and before `\'error\'` is\n             * emitted.\n             *\n             * The return value is `true` if the internal buffer is less than the `highWaterMark` configured when the stream was created after admitting `chunk`.\n             * If `false` is returned, further attempts to write data to the stream should\n             * stop until the `\'drain\'` event is emitted.\n             *\n             * While a stream is not draining, calls to `write()` will buffer `chunk`, and\n             * return false. Once all currently buffered chunks are drained (accepted for\n             * delivery by the operating system), the `\'drain\'` event will be emitted.\n             * Once `write()` returns false, do not write more chunks\n             * until the `\'drain\'` event is emitted. While calling `write()` on a stream that\n             * is not draining is allowed, Node.js will buffer all written chunks until\n             * maximum memory usage occurs, at which point it will abort unconditionally.\n             * Even before it aborts, high memory usage will cause poor garbage collector\n             * performance and high RSS (which is not typically released back to the system,\n             * even after the memory is no longer required). Since TCP sockets may never\n             * drain if the remote peer does not read the data, writing a socket that is\n             * not draining may lead to a remotely exploitable vulnerability.\n             *\n             * Writing data while the stream is not draining is particularly\n             * problematic for a `Transform`, because the `Transform` streams are paused\n             * by default until they are piped or a `\'data\'` or `\'readable\'` event handler\n             * is added.\n             *\n             * If the data to be written can be generated or fetched on demand, it is\n             * recommended to encapsulate the logic into a `Readable` and use {@link pipe}. However, if calling `write()` is preferred, it is\n             * possible to respect backpressure and avoid memory issues using the `\'drain\'` event:\n             *\n             * ```js\n             * function write(data, cb) {\n             *   if (!stream.write(data)) {\n             *     stream.once(\'drain\', cb);\n             *   } else {\n             *     process.nextTick(cb);\n             *   }\n             * }\n             *\n             * // Wait for cb to be called before doing any other write.\n             * write(\'hello\', () => {\n             *   console.log(\'Write completed, do more writes now.\');\n             * });\n             * ```\n             *\n             * A `Writable` stream in object mode will always ignore the `encoding` argument.\n             * @since v0.9.4\n             * @param chunk Optional data to write. For streams not operating in object mode, `chunk` must be a {string}, {Buffer},\n             * {TypedArray} or {DataView}. For object mode streams, `chunk` may be any JavaScript value other than `null`.\n             * @param [encoding=\'utf8\'] The encoding, if `chunk` is a string.\n             * @param callback Callback for when this chunk of data is flushed.\n             * @return `false` if the stream wishes for the calling code to wait for the `\'drain\'` event to be emitted before continuing to write additional data; otherwise `true`.\n             */\n            write(chunk: any, callback?: (error: Error | null | undefined) => void): boolean;\n            write(chunk: any, encoding: BufferEncoding, callback?: (error: Error | null | undefined) => void): boolean;\n            /**\n             * The `writable.setDefaultEncoding()` method sets the default `encoding` for a `Writable` stream.\n             * @since v0.11.15\n             * @param encoding The new default encoding\n             */\n            setDefaultEncoding(encoding: BufferEncoding): this;\n            /**\n             * Calling the `writable.end()` method signals that no more data will be written\n             * to the `Writable`. The optional `chunk` and `encoding` arguments allow one\n             * final additional chunk of data to be written immediately before closing the\n             * stream.\n             *\n             * Calling the {@link write} method after calling {@link end} will raise an error.\n             *\n             * ```js\n             * // Write \'hello, \' and then end with \'world!\'.\n             * import fs from \'node:fs\';\n             * const file = fs.createWriteStream(\'example.txt\');\n             * file.write(\'hello, \');\n             * file.end(\'world!\');\n             * // Writing more now is not allowed!\n             * ```\n             * @since v0.9.4\n             * @param chunk Optional data to write. For streams not operating in object mode, `chunk` must be a {string}, {Buffer},\n             * {TypedArray} or {DataView}. For object mode streams, `chunk` may be any JavaScript value other than `null`.\n             * @param encoding The encoding if `chunk` is a string\n             * @param callback Callback for when the stream is finished.\n             */\n            end(cb?: () => void): this;\n            end(chunk: any, cb?: () => void): this;\n            end(chunk: any, encoding: BufferEncoding, cb?: () => void): this;\n            /**\n             * The `writable.cork()` method forces all written data to be buffered in memory.\n             * The buffered data will be flushed when either the {@link uncork} or {@link end} methods are called.\n             *\n             * The primary intent of `writable.cork()` is to accommodate a situation in which\n             * several small chunks are written to the stream in rapid succession. Instead of\n             * immediately forwarding them to the underlying destination, `writable.cork()` buffers all the chunks until `writable.uncork()` is called, which will pass them\n             * all to `writable._writev()`, if present. This prevents a head-of-line blocking\n             * situation where data is being buffered while waiting for the first small chunk\n             * to be processed. However, use of `writable.cork()` without implementing `writable._writev()` may have an adverse effect on throughput.\n             *\n             * See also: `writable.uncork()`, `writable._writev()`.\n             * @since v0.11.2\n             */\n            cork(): void;\n            /**\n             * The `writable.uncork()` method flushes all data buffered since {@link cork} was called.\n             *\n             * When using `writable.cork()` and `writable.uncork()` to manage the buffering\n             * of writes to a stream, defer calls to `writable.uncork()` using `process.nextTick()`. Doing so allows batching of all `writable.write()` calls that occur within a given Node.js event\n             * loop phase.\n             *\n             * ```js\n             * stream.cork();\n             * stream.write(\'some \');\n             * stream.write(\'data \');\n             * process.nextTick(() => stream.uncork());\n             * ```\n             *\n             * If the `writable.cork()` method is called multiple times on a stream, the\n             * same number of calls to `writable.uncork()` must be called to flush the buffered\n             * data.\n             *\n             * ```js\n             * stream.cork();\n             * stream.write(\'some \');\n             * stream.cork();\n             * stream.write(\'data \');\n             * process.nextTick(() => {\n             *   stream.uncork();\n             *   // The data will not be flushed until uncork() is called a second time.\n             *   stream.uncork();\n             * });\n             * ```\n             *\n             * See also: `writable.cork()`.\n             * @since v0.11.2\n             */\n            uncork(): void;\n            /**\n             * Destroy the stream. Optionally emit an `\'error\'` event, and emit a `\'close\'` event (unless `emitClose` is set to `false`). After this call, the writable\n             * stream has ended and subsequent calls to `write()` or `end()` will result in\n             * an `ERR_STREAM_DESTROYED` error.\n             * This is a destructive and immediate way to destroy a stream. Previous calls to `write()` may not have drained, and may trigger an `ERR_STREAM_DESTROYED` error.\n             * Use `end()` instead of destroy if data should flush before close, or wait for\n             * the `\'drain\'` event before destroying the stream.\n             *\n             * Once `destroy()` has been called any further calls will be a no-op and no\n             * further errors except from `_destroy()` may be emitted as `\'error\'`.\n             *\n             * Implementors should not override this method,\n             * but instead implement `writable._destroy()`.\n             * @since v8.0.0\n             * @param error Optional, an error to emit with `\'error\'` event.\n             */\n            destroy(error?: Error): this;\n            /**\n             * Event emitter\n             * The defined events on documents including:\n             * 1. close\n             * 2. drain\n             * 3. error\n             * 4. finish\n             * 5. pipe\n             * 6. unpipe\n             */\n            addListener(event: "close", listener: () => void): this;\n            addListener(event: "drain", listener: () => void): this;\n            addListener(event: "error", listener: (err: Error) => void): this;\n            addListener(event: "finish", listener: () => void): this;\n            addListener(event: "pipe", listener: (src: Readable) => void): this;\n            addListener(event: "unpipe", listener: (src: Readable) => void): this;\n            addListener(event: string | symbol, listener: (...args: any[]) => void): this;\n            emit(event: "close"): boolean;\n            emit(event: "drain"): boolean;\n            emit(event: "error", err: Error): boolean;\n            emit(event: "finish"): boolean;\n            emit(event: "pipe", src: Readable): boolean;\n            emit(event: "unpipe", src: Readable): boolean;\n            emit(event: string | symbol, ...args: any[]): boolean;\n            on(event: "close", listener: () => void): this;\n            on(event: "drain", listener: () => void): this;\n            on(event: "error", listener: (err: Error) => void): this;\n            on(event: "finish", listener: () => void): this;\n            on(event: "pipe", listener: (src: Readable) => void): this;\n            on(event: "unpipe", listener: (src: Readable) => void): this;\n            on(event: string | symbol, listener: (...args: any[]) => void): this;\n            once(event: "close", listener: () => void): this;\n            once(event: "drain", listener: () => void): this;\n            once(event: "error", listener: (err: Error) => void): this;\n            once(event: "finish", listener: () => void): this;\n            once(event: "pipe", listener: (src: Readable) => void): this;\n            once(event: "unpipe", listener: (src: Readable) => void): this;\n            once(event: string | symbol, listener: (...args: any[]) => void): this;\n            prependListener(event: "close", listener: () => void): this;\n            prependListener(event: "drain", listener: () => void): this;\n            prependListener(event: "error", listener: (err: Error) => void): this;\n            prependListener(event: "finish", listener: () => void): this;\n            prependListener(event: "pipe", listener: (src: Readable) => void): this;\n            prependListener(event: "unpipe", listener: (src: Readable) => void): this;\n            prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\n            prependOnceListener(event: "close", listener: () => void): this;\n            prependOnceListener(event: "drain", listener: () => void): this;\n            prependOnceListener(event: "error", listener: (err: Error) => void): this;\n            prependOnceListener(event: "finish", listener: () => void): this;\n            prependOnceListener(event: "pipe", listener: (src: Readable) => void): this;\n            prependOnceListener(event: "unpipe", listener: (src: Readable) => void): this;\n            prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\n            removeListener(event: "close", listener: () => void): this;\n            removeListener(event: "drain", listener: () => void): this;\n            removeListener(event: "error", listener: (err: Error) => void): this;\n            removeListener(event: "finish", listener: () => void): this;\n            removeListener(event: "pipe", listener: (src: Readable) => void): this;\n            removeListener(event: "unpipe", listener: (src: Readable) => void): this;\n            removeListener(event: string | symbol, listener: (...args: any[]) => void): this;\n        }\n        interface DuplexOptions<T extends Duplex = Duplex> extends ReadableOptions<T>, WritableOptions<T> {\n            allowHalfOpen?: boolean | undefined;\n            readableObjectMode?: boolean | undefined;\n            writableObjectMode?: boolean | undefined;\n            readableHighWaterMark?: number | undefined;\n            writableHighWaterMark?: number | undefined;\n            writableCorked?: number | undefined;\n        }\n        /**\n         * Duplex streams are streams that implement both the `Readable` and `Writable` interfaces.\n         *\n         * Examples of `Duplex` streams include:\n         *\n         * * `TCP sockets`\n         * * `zlib streams`\n         * * `crypto streams`\n         * @since v0.9.4\n         */\n        class Duplex extends Stream implements NodeJS.ReadWriteStream {\n            /**\n             * If `false` then the stream will automatically end the writable side when the\n             * readable side ends. Set initially by the `allowHalfOpen` constructor option,\n             * which defaults to `true`.\n             *\n             * This can be changed manually to change the half-open behavior of an existing\n             * `Duplex` stream instance, but must be changed before the `\'end\'` event is emitted.\n             * @since v0.9.4\n             */\n            allowHalfOpen: boolean;\n            constructor(opts?: DuplexOptions);\n            /**\n             * A utility method for creating duplex streams.\n             *\n             * - `Stream` converts writable stream into writable `Duplex` and readable stream\n             *   to `Duplex`.\n             * - `Blob` converts into readable `Duplex`.\n             * - `string` converts into readable `Duplex`.\n             * - `ArrayBuffer` converts into readable `Duplex`.\n             * - `AsyncIterable` converts into a readable `Duplex`. Cannot yield `null`.\n             * - `AsyncGeneratorFunction` converts into a readable/writable transform\n             *   `Duplex`. Must take a source `AsyncIterable` as first parameter. Cannot yield\n             *   `null`.\n             * - `AsyncFunction` converts into a writable `Duplex`. Must return\n             *   either `null` or `undefined`\n             * - `Object ({ writable, readable })` converts `readable` and\n             *   `writable` into `Stream` and then combines them into `Duplex` where the\n             *   `Duplex` will write to the `writable` and read from the `readable`.\n             * - `Promise` converts into readable `Duplex`. Value `null` is ignored.\n             *\n             * @since v16.8.0\n             */\n            static from(\n                src:\n                    | Stream\n                    | NodeBlob\n                    | ArrayBuffer\n                    | string\n                    | Iterable<any>\n                    | AsyncIterable<any>\n                    | AsyncGeneratorFunction\n                    | Promise<any>\n                    | Object,\n            ): Duplex;\n            /**\n             * A utility method for creating a web `ReadableStream` and `WritableStream` from a `Duplex`.\n             * @since v17.0.0\n             * @experimental\n             */\n            static toWeb(streamDuplex: Duplex): {\n                readable: streamWeb.ReadableStream;\n                writable: streamWeb.WritableStream;\n            };\n            /**\n             * A utility method for creating a `Duplex` from a web `ReadableStream` and `WritableStream`.\n             * @since v17.0.0\n             * @experimental\n             */\n            static fromWeb(\n                duplexStream: {\n                    readable: streamWeb.ReadableStream;\n                    writable: streamWeb.WritableStream;\n                },\n                options?: Pick<\n                    DuplexOptions,\n                    "allowHalfOpen" | "decodeStrings" | "encoding" | "highWaterMark" | "objectMode" | "signal"\n                >,\n            ): Duplex;\n            /**\n             * Event emitter\n             * The defined events on documents including:\n             * 1.  close\n             * 2.  data\n             * 3.  drain\n             * 4.  end\n             * 5.  error\n             * 6.  finish\n             * 7.  pause\n             * 8.  pipe\n             * 9.  readable\n             * 10. resume\n             * 11. unpipe\n             */\n            addListener(event: "close", listener: () => void): this;\n            addListener(event: "data", listener: (chunk: any) => void): this;\n            addListener(event: "drain", listener: () => void): this;\n            addListener(event: "end", listener: () => void): this;\n            addListener(event: "error", listener: (err: Error) => void): this;\n            addListener(event: "finish", listener: () => void): this;\n            addListener(event: "pause", listener: () => void): this;\n            addListener(event: "pipe", listener: (src: Readable) => void): this;\n            addListener(event: "readable", listener: () => void): this;\n            addListener(event: "resume", listener: () => void): this;\n            addListener(event: "unpipe", listener: (src: Readable) => void): this;\n            addListener(event: string | symbol, listener: (...args: any[]) => void): this;\n            emit(event: "close"): boolean;\n            emit(event: "data", chunk: any): boolean;\n            emit(event: "drain"): boolean;\n            emit(event: "end"): boolean;\n            emit(event: "error", err: Error): boolean;\n            emit(event: "finish"): boolean;\n            emit(event: "pause"): boolean;\n            emit(event: "pipe", src: Readable): boolean;\n            emit(event: "readable"): boolean;\n            emit(event: "resume"): boolean;\n            emit(event: "unpipe", src: Readable): boolean;\n            emit(event: string | symbol, ...args: any[]): boolean;\n            on(event: "close", listener: () => void): this;\n            on(event: "data", listener: (chunk: any) => void): this;\n            on(event: "drain", listener: () => void): this;\n            on(event: "end", listener: () => void): this;\n            on(event: "error", listener: (err: Error) => void): this;\n            on(event: "finish", listener: () => void): this;\n            on(event: "pause", listener: () => void): this;\n            on(event: "pipe", listener: (src: Readable) => void): this;\n            on(event: "readable", listener: () => void): this;\n            on(event: "resume", listener: () => void): this;\n            on(event: "unpipe", listener: (src: Readable) => void): this;\n            on(event: string | symbol, listener: (...args: any[]) => void): this;\n            once(event: "close", listener: () => void): this;\n            once(event: "data", listener: (chunk: any) => void): this;\n            once(event: "drain", listener: () => void): this;\n            once(event: "end", listener: () => void): this;\n            once(event: "error", listener: (err: Error) => void): this;\n            once(event: "finish", listener: () => void): this;\n            once(event: "pause", listener: () => void): this;\n            once(event: "pipe", listener: (src: Readable) => void): this;\n            once(event: "readable", listener: () => void): this;\n            once(event: "resume", listener: () => void): this;\n            once(event: "unpipe", listener: (src: Readable) => void): this;\n            once(event: string | symbol, listener: (...args: any[]) => void): this;\n            prependListener(event: "close", listener: () => void): this;\n            prependListener(event: "data", listener: (chunk: any) => void): this;\n            prependListener(event: "drain", listener: () => void): this;\n            prependListener(event: "end", listener: () => void): this;\n            prependListener(event: "error", listener: (err: Error) => void): this;\n            prependListener(event: "finish", listener: () => void): this;\n            prependListener(event: "pause", listener: () => void): this;\n            prependListener(event: "pipe", listener: (src: Readable) => void): this;\n            prependListener(event: "readable", listener: () => void): this;\n            prependListener(event: "resume", listener: () => void): this;\n            prependListener(event: "unpipe", listener: (src: Readable) => void): this;\n            prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\n            prependOnceListener(event: "close", listener: () => void): this;\n            prependOnceListener(event: "data", listener: (chunk: any) => void): this;\n            prependOnceListener(event: "drain", listener: () => void): this;\n            prependOnceListener(event: "end", listener: () => void): this;\n            prependOnceListener(event: "error", listener: (err: Error) => void): this;\n            prependOnceListener(event: "finish", listener: () => void): this;\n            prependOnceListener(event: "pause", listener: () => void): this;\n            prependOnceListener(event: "pipe", listener: (src: Readable) => void): this;\n            prependOnceListener(event: "readable", listener: () => void): this;\n            prependOnceListener(event: "resume", listener: () => void): this;\n            prependOnceListener(event: "unpipe", listener: (src: Readable) => void): this;\n            prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\n            removeListener(event: "close", listener: () => void): this;\n            removeListener(event: "data", listener: (chunk: any) => void): this;\n            removeListener(event: "drain", listener: () => void): this;\n            removeListener(event: "end", listener: () => void): this;\n            removeListener(event: "error", listener: (err: Error) => void): this;\n            removeListener(event: "finish", listener: () => void): this;\n            removeListener(event: "pause", listener: () => void): this;\n            removeListener(event: "pipe", listener: (src: Readable) => void): this;\n            removeListener(event: "readable", listener: () => void): this;\n            removeListener(event: "resume", listener: () => void): this;\n            removeListener(event: "unpipe", listener: (src: Readable) => void): this;\n            removeListener(event: string | symbol, listener: (...args: any[]) => void): this;\n        }\n        interface Duplex extends Readable, Writable {}\n        /**\n         * The utility function `duplexPair` returns an Array with two items,\n         * each being a `Duplex` stream connected to the other side:\n         *\n         * ```js\n         * const [ sideA, sideB ] = duplexPair();\n         * ```\n         *\n         * Whatever is written to one stream is made readable on the other. It provides\n         * behavior analogous to a network connection, where the data written by the client\n         * becomes readable by the server, and vice-versa.\n         *\n         * The Duplex streams are symmetrical; one or the other may be used without any\n         * difference in behavior.\n         * @param options A value to pass to both {@link Duplex} constructors,\n         * to set options such as buffering.\n         * @since v22.6.0\n         */\n        function duplexPair(options?: DuplexOptions): [Duplex, Duplex];\n        type TransformCallback = (error?: Error | null, data?: any) => void;\n        interface TransformOptions<T extends Transform = Transform> extends DuplexOptions<T> {\n            transform?(this: T, chunk: any, encoding: BufferEncoding, callback: TransformCallback): void;\n            flush?(this: T, callback: TransformCallback): void;\n        }\n        /**\n         * Transform streams are `Duplex` streams where the output is in some way\n         * related to the input. Like all `Duplex` streams, `Transform` streams\n         * implement both the `Readable` and `Writable` interfaces.\n         *\n         * Examples of `Transform` streams include:\n         *\n         * * `zlib streams`\n         * * `crypto streams`\n         * @since v0.9.4\n         */\n        class Transform extends Duplex {\n            constructor(opts?: TransformOptions);\n            _transform(chunk: any, encoding: BufferEncoding, callback: TransformCallback): void;\n            _flush(callback: TransformCallback): void;\n        }\n        /**\n         * The `stream.PassThrough` class is a trivial implementation of a `Transform` stream that simply passes the input bytes across to the output. Its purpose is\n         * primarily for examples and testing, but there are some use cases where `stream.PassThrough` is useful as a building block for novel sorts of streams.\n         */\n        class PassThrough extends Transform {}\n        /**\n         * A stream to attach a signal to.\n         *\n         * Attaches an AbortSignal to a readable or writeable stream. This lets code\n         * control stream destruction using an `AbortController`.\n         *\n         * Calling `abort` on the `AbortController` corresponding to the passed `AbortSignal` will behave the same way as calling `.destroy(new AbortError())` on the\n         * stream, and `controller.error(new AbortError())` for webstreams.\n         *\n         * ```js\n         * import fs from \'node:fs\';\n         *\n         * const controller = new AbortController();\n         * const read = addAbortSignal(\n         *   controller.signal,\n         *   fs.createReadStream((\'object.json\')),\n         * );\n         * // Later, abort the operation closing the stream\n         * controller.abort();\n         * ```\n         *\n         * Or using an `AbortSignal` with a readable stream as an async iterable:\n         *\n         * ```js\n         * const controller = new AbortController();\n         * setTimeout(() => controller.abort(), 10_000); // set a timeout\n         * const stream = addAbortSignal(\n         *   controller.signal,\n         *   fs.createReadStream((\'object.json\')),\n         * );\n         * (async () => {\n         *   try {\n         *     for await (const chunk of stream) {\n         *       await process(chunk);\n         *     }\n         *   } catch (e) {\n         *     if (e.name === \'AbortError\') {\n         *       // The operation was cancelled\n         *     } else {\n         *       throw e;\n         *     }\n         *   }\n         * })();\n         * ```\n         *\n         * Or using an `AbortSignal` with a ReadableStream:\n         *\n         * ```js\n         * const controller = new AbortController();\n         * const rs = new ReadableStream({\n         *   start(controller) {\n         *     controller.enqueue(\'hello\');\n         *     controller.enqueue(\'world\');\n         *     controller.close();\n         *   },\n         * });\n         *\n         * addAbortSignal(controller.signal, rs);\n         *\n         * finished(rs, (err) => {\n         *   if (err) {\n         *     if (err.name === \'AbortError\') {\n         *       // The operation was cancelled\n         *     }\n         *   }\n         * });\n         *\n         * const reader = rs.getReader();\n         *\n         * reader.read().then(({ value, done }) => {\n         *   console.log(value); // hello\n         *   console.log(done); // false\n         *   controller.abort();\n         * });\n         * ```\n         * @since v15.4.0\n         * @param signal A signal representing possible cancellation\n         * @param stream A stream to attach a signal to.\n         */\n        function addAbortSignal<T extends Stream>(signal: AbortSignal, stream: T): T;\n        /**\n         * Returns the default highWaterMark used by streams.\n         * Defaults to `65536` (64 KiB), or `16` for `objectMode`.\n         * @since v19.9.0\n         */\n        function getDefaultHighWaterMark(objectMode: boolean): number;\n        /**\n         * Sets the default highWaterMark used by streams.\n         * @since v19.9.0\n         * @param value highWaterMark value\n         */\n        function setDefaultHighWaterMark(objectMode: boolean, value: number): void;\n        interface FinishedOptions extends Abortable {\n            error?: boolean | undefined;\n            readable?: boolean | undefined;\n            writable?: boolean | undefined;\n        }\n        /**\n         * A readable and/or writable stream/webstream.\n         *\n         * A function to get notified when a stream is no longer readable, writable\n         * or has experienced an error or a premature close event.\n         *\n         * ```js\n         * import { finished } from \'node:stream\';\n         * import fs from \'node:fs\';\n         *\n         * const rs = fs.createReadStream(\'archive.tar\');\n         *\n         * finished(rs, (err) => {\n         *   if (err) {\n         *     console.error(\'Stream failed.\', err);\n         *   } else {\n         *     console.log(\'Stream is done reading.\');\n         *   }\n         * });\n         *\n         * rs.resume(); // Drain the stream.\n         * ```\n         *\n         * Especially useful in error handling scenarios where a stream is destroyed\n         * prematurely (like an aborted HTTP request), and will not emit `\'end\'` or `\'finish\'`.\n         *\n         * The `finished` API provides [`promise version`](https://nodejs.org/docs/latest-v22.x/api/stream.html#streamfinishedstream-options).\n         *\n         * `stream.finished()` leaves dangling event listeners (in particular `\'error\'`, `\'end\'`, `\'finish\'` and `\'close\'`) after `callback` has been\n         * invoked. The reason for this is so that unexpected `\'error\'` events (due to\n         * incorrect stream implementations) do not cause unexpected crashes.\n         * If this is unwanted behavior then the returned cleanup function needs to be\n         * invoked in the callback:\n         *\n         * ```js\n         * const cleanup = finished(rs, (err) => {\n         *   cleanup();\n         *   // ...\n         * });\n         * ```\n         * @since v10.0.0\n         * @param stream A readable and/or writable stream.\n         * @param callback A callback function that takes an optional error argument.\n         * @returns A cleanup function which removes all registered listeners.\n         */\n        function finished(\n            stream: NodeJS.ReadableStream | NodeJS.WritableStream | NodeJS.ReadWriteStream,\n            options: FinishedOptions,\n            callback: (err?: NodeJS.ErrnoException | null) => void,\n        ): () => void;\n        function finished(\n            stream: NodeJS.ReadableStream | NodeJS.WritableStream | NodeJS.ReadWriteStream,\n            callback: (err?: NodeJS.ErrnoException | null) => void,\n        ): () => void;\n        namespace finished {\n            function __promisify__(\n                stream: NodeJS.ReadableStream | NodeJS.WritableStream | NodeJS.ReadWriteStream,\n                options?: FinishedOptions,\n            ): Promise<void>;\n        }\n        type PipelineSourceFunction<T> = () => Iterable<T> | AsyncIterable<T>;\n        type PipelineSource<T> = Iterable<T> | AsyncIterable<T> | NodeJS.ReadableStream | PipelineSourceFunction<T>;\n        type PipelineTransform<S extends PipelineTransformSource<any>, U> =\n            | NodeJS.ReadWriteStream\n            | ((\n                source: S extends (...args: any[]) => Iterable<infer ST> | AsyncIterable<infer ST> ? AsyncIterable<ST>\n                    : S,\n            ) => AsyncIterable<U>);\n        type PipelineTransformSource<T> = PipelineSource<T> | PipelineTransform<any, T>;\n        type PipelineDestinationIterableFunction<T> = (source: AsyncIterable<T>) => AsyncIterable<any>;\n        type PipelineDestinationPromiseFunction<T, P> = (source: AsyncIterable<T>) => Promise<P>;\n        type PipelineDestination<S extends PipelineTransformSource<any>, P> = S extends\n            PipelineTransformSource<infer ST> ?\n                | NodeJS.WritableStream\n                | PipelineDestinationIterableFunction<ST>\n                | PipelineDestinationPromiseFunction<ST, P>\n            : never;\n        type PipelineCallback<S extends PipelineDestination<any, any>> = S extends\n            PipelineDestinationPromiseFunction<any, infer P> ? (err: NodeJS.ErrnoException | null, value: P) => void\n            : (err: NodeJS.ErrnoException | null) => void;\n        type PipelinePromise<S extends PipelineDestination<any, any>> = S extends\n            PipelineDestinationPromiseFunction<any, infer P> ? Promise<P> : Promise<void>;\n        interface PipelineOptions {\n            signal?: AbortSignal | undefined;\n            end?: boolean | undefined;\n        }\n        /**\n         * A module method to pipe between streams and generators forwarding errors and\n         * properly cleaning up and provide a callback when the pipeline is complete.\n         *\n         * ```js\n         * import { pipeline } from \'node:stream\';\n         * import fs from \'node:fs\';\n         * import zlib from \'node:zlib\';\n         *\n         * // Use the pipeline API to easily pipe a series of streams\n         * // together and get notified when the pipeline is fully done.\n         *\n         * // A pipeline to gzip a potentially huge tar file efficiently:\n         *\n         * pipeline(\n         *   fs.createReadStream(\'archive.tar\'),\n         *   zlib.createGzip(),\n         *   fs.createWriteStream(\'archive.tar.gz\'),\n         *   (err) => {\n         *     if (err) {\n         *       console.error(\'Pipeline failed.\', err);\n         *     } else {\n         *       console.log(\'Pipeline succeeded.\');\n         *     }\n         *   },\n         * );\n         * ```\n         *\n         * The `pipeline` API provides a [`promise version`](https://nodejs.org/docs/latest-v22.x/api/stream.html#streampipelinesource-transforms-destination-options).\n         *\n         * `stream.pipeline()` will call `stream.destroy(err)` on all streams except:\n         *\n         * * `Readable` streams which have emitted `\'end\'` or `\'close\'`.\n         * * `Writable` streams which have emitted `\'finish\'` or `\'close\'`.\n         *\n         * `stream.pipeline()` leaves dangling event listeners on the streams\n         * after the `callback` has been invoked. In the case of reuse of streams after\n         * failure, this can cause event listener leaks and swallowed errors. If the last\n         * stream is readable, dangling event listeners will be removed so that the last\n         * stream can be consumed later.\n         *\n         * `stream.pipeline()` closes all the streams when an error is raised.\n         * The `IncomingRequest` usage with `pipeline` could lead to an unexpected behavior\n         * once it would destroy the socket without sending the expected response.\n         * See the example below:\n         *\n         * ```js\n         * import fs from \'node:fs\';\n         * import http from \'node:http\';\n         * import { pipeline } from \'node:stream\';\n         *\n         * const server = http.createServer((req, res) => {\n         *   const fileStream = fs.createReadStream(\'./fileNotExist.txt\');\n         *   pipeline(fileStream, res, (err) => {\n         *     if (err) {\n         *       console.log(err); // No such file\n         *       // this message can\'t be sent once `pipeline` already destroyed the socket\n         *       return res.end(\'error!!!\');\n         *     }\n         *   });\n         * });\n         * ```\n         * @since v10.0.0\n         * @param callback Called when the pipeline is fully done.\n         */\n        function pipeline<A extends PipelineSource<any>, B extends PipelineDestination<A, any>>(\n            source: A,\n            destination: B,\n            callback: PipelineCallback<B>,\n        ): B extends NodeJS.WritableStream ? B : NodeJS.WritableStream;\n        function pipeline<\n            A extends PipelineSource<any>,\n            T1 extends PipelineTransform<A, any>,\n            B extends PipelineDestination<T1, any>,\n        >(\n            source: A,\n            transform1: T1,\n            destination: B,\n            callback: PipelineCallback<B>,\n        ): B extends NodeJS.WritableStream ? B : NodeJS.WritableStream;\n        function pipeline<\n            A extends PipelineSource<any>,\n            T1 extends PipelineTransform<A, any>,\n            T2 extends PipelineTransform<T1, any>,\n            B extends PipelineDestination<T2, any>,\n        >(\n            source: A,\n            transform1: T1,\n            transform2: T2,\n            destination: B,\n            callback: PipelineCallback<B>,\n        ): B extends NodeJS.WritableStream ? B : NodeJS.WritableStream;\n        function pipeline<\n            A extends PipelineSource<any>,\n            T1 extends PipelineTransform<A, any>,\n            T2 extends PipelineTransform<T1, any>,\n            T3 extends PipelineTransform<T2, any>,\n            B extends PipelineDestination<T3, any>,\n        >(\n            source: A,\n            transform1: T1,\n            transform2: T2,\n            transform3: T3,\n            destination: B,\n            callback: PipelineCallback<B>,\n        ): B extends NodeJS.WritableStream ? B : NodeJS.WritableStream;\n        function pipeline<\n            A extends PipelineSource<any>,\n            T1 extends PipelineTransform<A, any>,\n            T2 extends PipelineTransform<T1, any>,\n            T3 extends PipelineTransform<T2, any>,\n            T4 extends PipelineTransform<T3, any>,\n            B extends PipelineDestination<T4, any>,\n        >(\n            source: A,\n            transform1: T1,\n            transform2: T2,\n            transform3: T3,\n            transform4: T4,\n            destination: B,\n            callback: PipelineCallback<B>,\n        ): B extends NodeJS.WritableStream ? B : NodeJS.WritableStream;\n        function pipeline(\n            streams: ReadonlyArray<NodeJS.ReadableStream | NodeJS.WritableStream | NodeJS.ReadWriteStream>,\n            callback: (err: NodeJS.ErrnoException | null) => void,\n        ): NodeJS.WritableStream;\n        function pipeline(\n            stream1: NodeJS.ReadableStream,\n            stream2: NodeJS.ReadWriteStream | NodeJS.WritableStream,\n            ...streams: Array<\n                NodeJS.ReadWriteStream | NodeJS.WritableStream | ((err: NodeJS.ErrnoException | null) => void)\n            >\n        ): NodeJS.WritableStream;\n        namespace pipeline {\n            function __promisify__<A extends PipelineSource<any>, B extends PipelineDestination<A, any>>(\n                source: A,\n                destination: B,\n                options?: PipelineOptions,\n            ): PipelinePromise<B>;\n            function __promisify__<\n                A extends PipelineSource<any>,\n                T1 extends PipelineTransform<A, any>,\n                B extends PipelineDestination<T1, any>,\n            >(\n                source: A,\n                transform1: T1,\n                destination: B,\n                options?: PipelineOptions,\n            ): PipelinePromise<B>;\n            function __promisify__<\n                A extends PipelineSource<any>,\n                T1 extends PipelineTransform<A, any>,\n                T2 extends PipelineTransform<T1, any>,\n                B extends PipelineDestination<T2, any>,\n            >(\n                source: A,\n                transform1: T1,\n                transform2: T2,\n                destination: B,\n                options?: PipelineOptions,\n            ): PipelinePromise<B>;\n            function __promisify__<\n                A extends PipelineSource<any>,\n                T1 extends PipelineTransform<A, any>,\n                T2 extends PipelineTransform<T1, any>,\n                T3 extends PipelineTransform<T2, any>,\n                B extends PipelineDestination<T3, any>,\n            >(\n                source: A,\n                transform1: T1,\n                transform2: T2,\n                transform3: T3,\n                destination: B,\n                options?: PipelineOptions,\n            ): PipelinePromise<B>;\n            function __promisify__<\n                A extends PipelineSource<any>,\n                T1 extends PipelineTransform<A, any>,\n                T2 extends PipelineTransform<T1, any>,\n                T3 extends PipelineTransform<T2, any>,\n                T4 extends PipelineTransform<T3, any>,\n                B extends PipelineDestination<T4, any>,\n            >(\n                source: A,\n                transform1: T1,\n                transform2: T2,\n                transform3: T3,\n                transform4: T4,\n                destination: B,\n                options?: PipelineOptions,\n            ): PipelinePromise<B>;\n            function __promisify__(\n                streams: ReadonlyArray<NodeJS.ReadableStream | NodeJS.WritableStream | NodeJS.ReadWriteStream>,\n                options?: PipelineOptions,\n            ): Promise<void>;\n            function __promisify__(\n                stream1: NodeJS.ReadableStream,\n                stream2: NodeJS.ReadWriteStream | NodeJS.WritableStream,\n                ...streams: Array<NodeJS.ReadWriteStream | NodeJS.WritableStream | PipelineOptions>\n            ): Promise<void>;\n        }\n        interface Pipe {\n            close(): void;\n            hasRef(): boolean;\n            ref(): void;\n            unref(): void;\n        }\n        /**\n         * Returns whether the stream has encountered an error.\n         * @since v17.3.0, v16.14.0\n         * @experimental\n         */\n        function isErrored(stream: Readable | Writable | NodeJS.ReadableStream | NodeJS.WritableStream): boolean;\n        /**\n         * Returns whether the stream is readable.\n         * @since v17.4.0, v16.14.0\n         * @experimental\n         */\n        function isReadable(stream: Readable | NodeJS.ReadableStream): boolean;\n    }\n    export = Stream;\n}\ndeclare module "node:stream" {\n    import stream = require("stream");\n    export = stream;\n}\n',
  '@types/node/stream/consumers.d.ts':
    '/**\n * The utility consumer functions provide common options for consuming\n * streams.\n * @since v16.7.0\n */\ndeclare module "stream/consumers" {\n    import { Blob as NodeBlob } from "node:buffer";\n    import { ReadableStream as WebReadableStream } from "node:stream/web";\n    /**\n     * @since v16.7.0\n     * @returns Fulfills with an `ArrayBuffer` containing the full contents of the stream.\n     */\n    function arrayBuffer(stream: WebReadableStream | NodeJS.ReadableStream | AsyncIterable<any>): Promise<ArrayBuffer>;\n    /**\n     * @since v16.7.0\n     * @returns Fulfills with a `Blob` containing the full contents of the stream.\n     */\n    function blob(stream: WebReadableStream | NodeJS.ReadableStream | AsyncIterable<any>): Promise<NodeBlob>;\n    /**\n     * @since v16.7.0\n     * @returns Fulfills with a `Buffer` containing the full contents of the stream.\n     */\n    function buffer(stream: WebReadableStream | NodeJS.ReadableStream | AsyncIterable<any>): Promise<Buffer>;\n    /**\n     * @since v16.7.0\n     * @returns Fulfills with the contents of the stream parsed as a\n     * UTF-8 encoded string that is then passed through `JSON.parse()`.\n     */\n    function json(stream: WebReadableStream | NodeJS.ReadableStream | AsyncIterable<any>): Promise<unknown>;\n    /**\n     * @since v16.7.0\n     * @returns Fulfills with the contents of the stream parsed as a UTF-8 encoded string.\n     */\n    function text(stream: WebReadableStream | NodeJS.ReadableStream | AsyncIterable<any>): Promise<string>;\n}\ndeclare module "node:stream/consumers" {\n    export * from "stream/consumers";\n}\n',
  '@types/node/stream/promises.d.ts':
    'declare module "stream/promises" {\n    import {\n        FinishedOptions as _FinishedOptions,\n        PipelineDestination,\n        PipelineOptions,\n        PipelinePromise,\n        PipelineSource,\n        PipelineTransform,\n    } from "node:stream";\n    interface FinishedOptions extends _FinishedOptions {\n        /**\n         * If true, removes the listeners registered by this function before the promise is fulfilled.\n         * @default false\n         */\n        cleanup?: boolean | undefined;\n    }\n    function finished(\n        stream: NodeJS.ReadableStream | NodeJS.WritableStream | NodeJS.ReadWriteStream,\n        options?: FinishedOptions,\n    ): Promise<void>;\n    function pipeline<A extends PipelineSource<any>, B extends PipelineDestination<A, any>>(\n        source: A,\n        destination: B,\n        options?: PipelineOptions,\n    ): PipelinePromise<B>;\n    function pipeline<\n        A extends PipelineSource<any>,\n        T1 extends PipelineTransform<A, any>,\n        B extends PipelineDestination<T1, any>,\n    >(\n        source: A,\n        transform1: T1,\n        destination: B,\n        options?: PipelineOptions,\n    ): PipelinePromise<B>;\n    function pipeline<\n        A extends PipelineSource<any>,\n        T1 extends PipelineTransform<A, any>,\n        T2 extends PipelineTransform<T1, any>,\n        B extends PipelineDestination<T2, any>,\n    >(\n        source: A,\n        transform1: T1,\n        transform2: T2,\n        destination: B,\n        options?: PipelineOptions,\n    ): PipelinePromise<B>;\n    function pipeline<\n        A extends PipelineSource<any>,\n        T1 extends PipelineTransform<A, any>,\n        T2 extends PipelineTransform<T1, any>,\n        T3 extends PipelineTransform<T2, any>,\n        B extends PipelineDestination<T3, any>,\n    >(\n        source: A,\n        transform1: T1,\n        transform2: T2,\n        transform3: T3,\n        destination: B,\n        options?: PipelineOptions,\n    ): PipelinePromise<B>;\n    function pipeline<\n        A extends PipelineSource<any>,\n        T1 extends PipelineTransform<A, any>,\n        T2 extends PipelineTransform<T1, any>,\n        T3 extends PipelineTransform<T2, any>,\n        T4 extends PipelineTransform<T3, any>,\n        B extends PipelineDestination<T4, any>,\n    >(\n        source: A,\n        transform1: T1,\n        transform2: T2,\n        transform3: T3,\n        transform4: T4,\n        destination: B,\n        options?: PipelineOptions,\n    ): PipelinePromise<B>;\n    function pipeline(\n        streams: ReadonlyArray<NodeJS.ReadableStream | NodeJS.WritableStream | NodeJS.ReadWriteStream>,\n        options?: PipelineOptions,\n    ): Promise<void>;\n    function pipeline(\n        stream1: NodeJS.ReadableStream,\n        stream2: NodeJS.ReadWriteStream | NodeJS.WritableStream,\n        ...streams: Array<NodeJS.ReadWriteStream | NodeJS.WritableStream | PipelineOptions>\n    ): Promise<void>;\n}\ndeclare module "node:stream/promises" {\n    export * from "stream/promises";\n}\n',
  '@types/node/stream/web.d.ts':
    'type _ByteLengthQueuingStrategy = typeof globalThis extends { onmessage: any } ? {}\n    : import("stream/web").ByteLengthQueuingStrategy;\ntype _CompressionStream = typeof globalThis extends { onmessage: any; ReportingObserver: any } ? {}\n    : import("stream/web").CompressionStream;\ntype _CountQueuingStrategy = typeof globalThis extends { onmessage: any } ? {}\n    : import("stream/web").CountQueuingStrategy;\ntype _DecompressionStream = typeof globalThis extends { onmessage: any; ReportingObserver: any } ? {}\n    : import("stream/web").DecompressionStream;\ntype _ReadableByteStreamController = typeof globalThis extends { onmessage: any } ? {}\n    : import("stream/web").ReadableByteStreamController;\ntype _ReadableStream<R = any> = typeof globalThis extends { onmessage: any } ? {}\n    : import("stream/web").ReadableStream<R>;\ntype _ReadableStreamBYOBReader = typeof globalThis extends { onmessage: any } ? {}\n    : import("stream/web").ReadableStreamBYOBReader;\ntype _ReadableStreamBYOBRequest = typeof globalThis extends { onmessage: any } ? {}\n    : import("stream/web").ReadableStreamBYOBRequest;\ntype _ReadableStreamDefaultController<R = any> = typeof globalThis extends { onmessage: any } ? {}\n    : import("stream/web").ReadableStreamDefaultController<R>;\ntype _ReadableStreamDefaultReader<R = any> = typeof globalThis extends { onmessage: any } ? {}\n    : import("stream/web").ReadableStreamDefaultReader<R>;\ntype _TextDecoderStream = typeof globalThis extends { onmessage: any } ? {}\n    : import("stream/web").TextDecoderStream;\ntype _TextEncoderStream = typeof globalThis extends { onmessage: any } ? {}\n    : import("stream/web").TextEncoderStream;\ntype _TransformStream<I = any, O = any> = typeof globalThis extends { onmessage: any } ? {}\n    : import("stream/web").TransformStream<I, O>;\ntype _TransformStreamDefaultController<O = any> = typeof globalThis extends { onmessage: any } ? {}\n    : import("stream/web").TransformStreamDefaultController<O>;\ntype _WritableStream<W = any> = typeof globalThis extends { onmessage: any } ? {}\n    : import("stream/web").WritableStream<W>;\ntype _WritableStreamDefaultController = typeof globalThis extends { onmessage: any } ? {}\n    : import("stream/web").WritableStreamDefaultController;\ntype _WritableStreamDefaultWriter<W = any> = typeof globalThis extends { onmessage: any } ? {}\n    : import("stream/web").WritableStreamDefaultWriter<W>;\n\ndeclare module "stream/web" {\n    // stub module, pending copy&paste from .d.ts or manual impl\n    // copy from lib.dom.d.ts\n    interface ReadableWritablePair<R = any, W = any> {\n        readable: ReadableStream<R>;\n        /**\n         * Provides a convenient, chainable way of piping this readable stream\n         * through a transform stream (or any other { writable, readable }\n         * pair). It simply pipes the stream into the writable side of the\n         * supplied pair, and returns the readable side for further use.\n         *\n         * Piping a stream will lock it for the duration of the pipe, preventing\n         * any other consumer from acquiring a reader.\n         */\n        writable: WritableStream<W>;\n    }\n    interface StreamPipeOptions {\n        preventAbort?: boolean;\n        preventCancel?: boolean;\n        /**\n         * Pipes this readable stream to a given writable stream destination.\n         * The way in which the piping process behaves under various error\n         * conditions can be customized with a number of passed options. It\n         * returns a promise that fulfills when the piping process completes\n         * successfully, or rejects if any errors were encountered.\n         *\n         * Piping a stream will lock it for the duration of the pipe, preventing\n         * any other consumer from acquiring a reader.\n         *\n         * Errors and closures of the source and destination streams propagate\n         * as follows:\n         *\n         * An error in this source readable stream will abort destination,\n         * unless preventAbort is truthy. The returned promise will be rejected\n         * with the source\'s error, or with any error that occurs during\n         * aborting the destination.\n         *\n         * An error in destination will cancel this source readable stream,\n         * unless preventCancel is truthy. The returned promise will be rejected\n         * with the destination\'s error, or with any error that occurs during\n         * canceling the source.\n         *\n         * When this source readable stream closes, destination will be closed,\n         * unless preventClose is truthy. The returned promise will be fulfilled\n         * once this process completes, unless an error is encountered while\n         * closing the destination, in which case it will be rejected with that\n         * error.\n         *\n         * If destination starts out closed or closing, this source readable\n         * stream will be canceled, unless preventCancel is true. The returned\n         * promise will be rejected with an error indicating piping to a closed\n         * stream failed, or with any error that occurs during canceling the\n         * source.\n         *\n         * The signal option can be set to an AbortSignal to allow aborting an\n         * ongoing pipe operation via the corresponding AbortController. In this\n         * case, this source readable stream will be canceled, and destination\n         * aborted, unless the respective options preventCancel or preventAbort\n         * are set.\n         */\n        preventClose?: boolean;\n        signal?: AbortSignal;\n    }\n    interface ReadableStreamGenericReader {\n        readonly closed: Promise<void>;\n        cancel(reason?: any): Promise<void>;\n    }\n    type ReadableStreamController<T> = ReadableStreamDefaultController<T>;\n    interface ReadableStreamReadValueResult<T> {\n        done: false;\n        value: T;\n    }\n    interface ReadableStreamReadDoneResult<T> {\n        done: true;\n        value?: T;\n    }\n    type ReadableStreamReadResult<T> = ReadableStreamReadValueResult<T> | ReadableStreamReadDoneResult<T>;\n    interface ReadableByteStreamControllerCallback {\n        (controller: ReadableByteStreamController): void | PromiseLike<void>;\n    }\n    interface UnderlyingSinkAbortCallback {\n        (reason?: any): void | PromiseLike<void>;\n    }\n    interface UnderlyingSinkCloseCallback {\n        (): void | PromiseLike<void>;\n    }\n    interface UnderlyingSinkStartCallback {\n        (controller: WritableStreamDefaultController): any;\n    }\n    interface UnderlyingSinkWriteCallback<W> {\n        (chunk: W, controller: WritableStreamDefaultController): void | PromiseLike<void>;\n    }\n    interface UnderlyingSourceCancelCallback {\n        (reason?: any): void | PromiseLike<void>;\n    }\n    interface UnderlyingSourcePullCallback<R> {\n        (controller: ReadableStreamController<R>): void | PromiseLike<void>;\n    }\n    interface UnderlyingSourceStartCallback<R> {\n        (controller: ReadableStreamController<R>): any;\n    }\n    interface TransformerFlushCallback<O> {\n        (controller: TransformStreamDefaultController<O>): void | PromiseLike<void>;\n    }\n    interface TransformerStartCallback<O> {\n        (controller: TransformStreamDefaultController<O>): any;\n    }\n    interface TransformerTransformCallback<I, O> {\n        (chunk: I, controller: TransformStreamDefaultController<O>): void | PromiseLike<void>;\n    }\n    interface UnderlyingByteSource {\n        autoAllocateChunkSize?: number;\n        cancel?: ReadableStreamErrorCallback;\n        pull?: ReadableByteStreamControllerCallback;\n        start?: ReadableByteStreamControllerCallback;\n        type: "bytes";\n    }\n    interface UnderlyingSource<R = any> {\n        cancel?: UnderlyingSourceCancelCallback;\n        pull?: UnderlyingSourcePullCallback<R>;\n        start?: UnderlyingSourceStartCallback<R>;\n        type?: undefined;\n    }\n    interface UnderlyingSink<W = any> {\n        abort?: UnderlyingSinkAbortCallback;\n        close?: UnderlyingSinkCloseCallback;\n        start?: UnderlyingSinkStartCallback;\n        type?: undefined;\n        write?: UnderlyingSinkWriteCallback<W>;\n    }\n    interface ReadableStreamErrorCallback {\n        (reason: any): void | PromiseLike<void>;\n    }\n    interface ReadableStreamAsyncIterator<T> extends NodeJS.AsyncIterator<T, NodeJS.BuiltinIteratorReturn, unknown> {\n        [Symbol.asyncIterator](): ReadableStreamAsyncIterator<T>;\n    }\n    /** This Streams API interface represents a readable stream of byte data. */\n    interface ReadableStream<R = any> {\n        readonly locked: boolean;\n        cancel(reason?: any): Promise<void>;\n        getReader(options: { mode: "byob" }): ReadableStreamBYOBReader;\n        getReader(): ReadableStreamDefaultReader<R>;\n        getReader(options?: ReadableStreamGetReaderOptions): ReadableStreamReader<R>;\n        pipeThrough<T>(transform: ReadableWritablePair<T, R>, options?: StreamPipeOptions): ReadableStream<T>;\n        pipeTo(destination: WritableStream<R>, options?: StreamPipeOptions): Promise<void>;\n        tee(): [ReadableStream<R>, ReadableStream<R>];\n        values(options?: { preventCancel?: boolean }): ReadableStreamAsyncIterator<R>;\n        [Symbol.asyncIterator](): ReadableStreamAsyncIterator<R>;\n    }\n    const ReadableStream: {\n        prototype: ReadableStream;\n        from<T>(iterable: Iterable<T> | AsyncIterable<T>): ReadableStream<T>;\n        new(underlyingSource: UnderlyingByteSource, strategy?: QueuingStrategy<Uint8Array>): ReadableStream<Uint8Array>;\n        new<R = any>(underlyingSource?: UnderlyingSource<R>, strategy?: QueuingStrategy<R>): ReadableStream<R>;\n    };\n    type ReadableStreamReaderMode = "byob";\n    interface ReadableStreamGetReaderOptions {\n        /**\n         * Creates a ReadableStreamBYOBReader and locks the stream to the new reader.\n         *\n         * This call behaves the same way as the no-argument variant, except that it only works on readable byte streams, i.e. streams which were constructed specifically with the ability to handle "bring your own buffer" reading. The returned BYOB reader provides the ability to directly read individual chunks from the stream via its read() method, into developer-supplied buffers, allowing more precise control over allocation.\n         */\n        mode?: ReadableStreamReaderMode;\n    }\n    type ReadableStreamReader<T> = ReadableStreamDefaultReader<T> | ReadableStreamBYOBReader;\n    interface ReadableStreamDefaultReader<R = any> extends ReadableStreamGenericReader {\n        read(): Promise<ReadableStreamReadResult<R>>;\n        releaseLock(): void;\n    }\n    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader) */\n    interface ReadableStreamBYOBReader extends ReadableStreamGenericReader {\n        /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader/read) */\n        read<T extends ArrayBufferView>(\n            view: T,\n            options?: {\n                min?: number;\n            },\n        ): Promise<ReadableStreamReadResult<T>>;\n        /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader/releaseLock) */\n        releaseLock(): void;\n    }\n    const ReadableStreamDefaultReader: {\n        prototype: ReadableStreamDefaultReader;\n        new<R = any>(stream: ReadableStream<R>): ReadableStreamDefaultReader<R>;\n    };\n    const ReadableStreamBYOBReader: {\n        prototype: ReadableStreamBYOBReader;\n        new(stream: ReadableStream): ReadableStreamBYOBReader;\n    };\n    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBRequest) */\n    interface ReadableStreamBYOBRequest {\n        /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBRequest/view) */\n        readonly view: ArrayBufferView | null;\n        /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBRequest/respond) */\n        respond(bytesWritten: number): void;\n        /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBRequest/respondWithNewView) */\n        respondWithNewView(view: ArrayBufferView): void;\n    }\n    const ReadableStreamBYOBRequest: {\n        prototype: ReadableStreamBYOBRequest;\n        new(): ReadableStreamBYOBRequest;\n    };\n    interface ReadableByteStreamController {\n        readonly byobRequest: undefined;\n        readonly desiredSize: number | null;\n        close(): void;\n        enqueue(chunk: ArrayBufferView): void;\n        error(error?: any): void;\n    }\n    const ReadableByteStreamController: {\n        prototype: ReadableByteStreamController;\n        new(): ReadableByteStreamController;\n    };\n    interface ReadableStreamDefaultController<R = any> {\n        readonly desiredSize: number | null;\n        close(): void;\n        enqueue(chunk?: R): void;\n        error(e?: any): void;\n    }\n    const ReadableStreamDefaultController: {\n        prototype: ReadableStreamDefaultController;\n        new(): ReadableStreamDefaultController;\n    };\n    interface Transformer<I = any, O = any> {\n        flush?: TransformerFlushCallback<O>;\n        readableType?: undefined;\n        start?: TransformerStartCallback<O>;\n        transform?: TransformerTransformCallback<I, O>;\n        writableType?: undefined;\n    }\n    interface TransformStream<I = any, O = any> {\n        readonly readable: ReadableStream<O>;\n        readonly writable: WritableStream<I>;\n    }\n    const TransformStream: {\n        prototype: TransformStream;\n        new<I = any, O = any>(\n            transformer?: Transformer<I, O>,\n            writableStrategy?: QueuingStrategy<I>,\n            readableStrategy?: QueuingStrategy<O>,\n        ): TransformStream<I, O>;\n    };\n    interface TransformStreamDefaultController<O = any> {\n        readonly desiredSize: number | null;\n        enqueue(chunk?: O): void;\n        error(reason?: any): void;\n        terminate(): void;\n    }\n    const TransformStreamDefaultController: {\n        prototype: TransformStreamDefaultController;\n        new(): TransformStreamDefaultController;\n    };\n    /**\n     * This Streams API interface provides a standard abstraction for writing\n     * streaming data to a destination, known as a sink. This object comes with\n     * built-in back pressure and queuing.\n     */\n    interface WritableStream<W = any> {\n        readonly locked: boolean;\n        abort(reason?: any): Promise<void>;\n        close(): Promise<void>;\n        getWriter(): WritableStreamDefaultWriter<W>;\n    }\n    const WritableStream: {\n        prototype: WritableStream;\n        new<W = any>(underlyingSink?: UnderlyingSink<W>, strategy?: QueuingStrategy<W>): WritableStream<W>;\n    };\n    /**\n     * This Streams API interface is the object returned by\n     * WritableStream.getWriter() and once created locks the < writer to the\n     * WritableStream ensuring that no other streams can write to the underlying\n     * sink.\n     */\n    interface WritableStreamDefaultWriter<W = any> {\n        readonly closed: Promise<void>;\n        readonly desiredSize: number | null;\n        readonly ready: Promise<void>;\n        abort(reason?: any): Promise<void>;\n        close(): Promise<void>;\n        releaseLock(): void;\n        write(chunk?: W): Promise<void>;\n    }\n    const WritableStreamDefaultWriter: {\n        prototype: WritableStreamDefaultWriter;\n        new<W = any>(stream: WritableStream<W>): WritableStreamDefaultWriter<W>;\n    };\n    /**\n     * This Streams API interface represents a controller allowing control of a\n     * WritableStream\'s state. When constructing a WritableStream, the\n     * underlying sink is given a corresponding WritableStreamDefaultController\n     * instance to manipulate.\n     */\n    interface WritableStreamDefaultController {\n        error(e?: any): void;\n    }\n    const WritableStreamDefaultController: {\n        prototype: WritableStreamDefaultController;\n        new(): WritableStreamDefaultController;\n    };\n    interface QueuingStrategy<T = any> {\n        highWaterMark?: number;\n        size?: QueuingStrategySize<T>;\n    }\n    interface QueuingStrategySize<T = any> {\n        (chunk?: T): number;\n    }\n    interface QueuingStrategyInit {\n        /**\n         * Creates a new ByteLengthQueuingStrategy with the provided high water\n         * mark.\n         *\n         * Note that the provided high water mark will not be validated ahead of\n         * time. Instead, if it is negative, NaN, or not a number, the resulting\n         * ByteLengthQueuingStrategy will cause the corresponding stream\n         * constructor to throw.\n         */\n        highWaterMark: number;\n    }\n    /**\n     * This Streams API interface provides a built-in byte length queuing\n     * strategy that can be used when constructing streams.\n     */\n    interface ByteLengthQueuingStrategy extends QueuingStrategy<ArrayBufferView> {\n        readonly highWaterMark: number;\n        readonly size: QueuingStrategySize<ArrayBufferView>;\n    }\n    const ByteLengthQueuingStrategy: {\n        prototype: ByteLengthQueuingStrategy;\n        new(init: QueuingStrategyInit): ByteLengthQueuingStrategy;\n    };\n    /**\n     * This Streams API interface provides a built-in byte length queuing\n     * strategy that can be used when constructing streams.\n     */\n    interface CountQueuingStrategy extends QueuingStrategy {\n        readonly highWaterMark: number;\n        readonly size: QueuingStrategySize;\n    }\n    const CountQueuingStrategy: {\n        prototype: CountQueuingStrategy;\n        new(init: QueuingStrategyInit): CountQueuingStrategy;\n    };\n    interface TextEncoderStream {\n        /** Returns "utf-8". */\n        readonly encoding: "utf-8";\n        readonly readable: ReadableStream<Uint8Array>;\n        readonly writable: WritableStream<string>;\n        readonly [Symbol.toStringTag]: string;\n    }\n    const TextEncoderStream: {\n        prototype: TextEncoderStream;\n        new(): TextEncoderStream;\n    };\n    interface TextDecoderOptions {\n        fatal?: boolean;\n        ignoreBOM?: boolean;\n    }\n    type BufferSource = ArrayBufferView | ArrayBuffer;\n    interface TextDecoderStream {\n        /** Returns encoding\'s name, lower cased. */\n        readonly encoding: string;\n        /** Returns `true` if error mode is "fatal", and `false` otherwise. */\n        readonly fatal: boolean;\n        /** Returns `true` if ignore BOM flag is set, and `false` otherwise. */\n        readonly ignoreBOM: boolean;\n        readonly readable: ReadableStream<string>;\n        readonly writable: WritableStream<BufferSource>;\n        readonly [Symbol.toStringTag]: string;\n    }\n    const TextDecoderStream: {\n        prototype: TextDecoderStream;\n        new(encoding?: string, options?: TextDecoderOptions): TextDecoderStream;\n    };\n    interface CompressionStream {\n        readonly readable: ReadableStream;\n        readonly writable: WritableStream;\n    }\n    const CompressionStream: {\n        prototype: CompressionStream;\n        new(format: "deflate" | "deflate-raw" | "gzip"): CompressionStream;\n    };\n    interface DecompressionStream {\n        readonly writable: WritableStream;\n        readonly readable: ReadableStream;\n    }\n    const DecompressionStream: {\n        prototype: DecompressionStream;\n        new(format: "deflate" | "deflate-raw" | "gzip"): DecompressionStream;\n    };\n\n    global {\n        interface ByteLengthQueuingStrategy extends _ByteLengthQueuingStrategy {}\n        /**\n         * `ByteLengthQueuingStrategy` class is a global reference for `import { ByteLengthQueuingStrategy } from \'node:stream/web\'`.\n         * https://nodejs.org/api/globals.html#class-bytelengthqueuingstrategy\n         * @since v18.0.0\n         */\n        var ByteLengthQueuingStrategy: typeof globalThis extends { onmessage: any; ByteLengthQueuingStrategy: infer T }\n            ? T\n            : typeof import("stream/web").ByteLengthQueuingStrategy;\n\n        interface CompressionStream extends _CompressionStream {}\n        /**\n         * `CompressionStream` class is a global reference for `import { CompressionStream } from \'node:stream/web\'`.\n         * https://nodejs.org/api/globals.html#class-compressionstream\n         * @since v18.0.0\n         */\n        var CompressionStream: typeof globalThis extends {\n            onmessage: any;\n            // CompressionStream, DecompressionStream and ReportingObserver was introduced in the same commit.\n            // If ReportingObserver check is removed, the type here will form a circular reference in TS5.0+lib.dom.d.ts\n            ReportingObserver: any;\n            CompressionStream: infer T;\n        } ? T\n            // TS 4.8, 4.9, 5.0\n            : typeof globalThis extends { onmessage: any; TransformStream: { prototype: infer T } } ? {\n                    prototype: T;\n                    new(format: "deflate" | "deflate-raw" | "gzip"): T;\n                }\n            : typeof import("stream/web").CompressionStream;\n\n        interface CountQueuingStrategy extends _CountQueuingStrategy {}\n        /**\n         * `CountQueuingStrategy` class is a global reference for `import { CountQueuingStrategy } from \'node:stream/web\'`.\n         * https://nodejs.org/api/globals.html#class-countqueuingstrategy\n         * @since v18.0.0\n         */\n        var CountQueuingStrategy: typeof globalThis extends { onmessage: any; CountQueuingStrategy: infer T } ? T\n            : typeof import("stream/web").CountQueuingStrategy;\n\n        interface DecompressionStream extends _DecompressionStream {}\n        /**\n         * `DecompressionStream` class is a global reference for `import { DecompressionStream } from \'node:stream/web\'`.\n         * https://nodejs.org/api/globals.html#class-decompressionstream\n         * @since v18.0.0\n         */\n        var DecompressionStream: typeof globalThis extends {\n            onmessage: any;\n            // CompressionStream, DecompressionStream and ReportingObserver was introduced in the same commit.\n            // If ReportingObserver check is removed, the type here will form a circular reference in TS5.0+lib.dom.d.ts\n            ReportingObserver: any;\n            DecompressionStream: infer T extends object;\n        } ? T\n            // TS 4.8, 4.9, 5.0\n            : typeof globalThis extends { onmessage: any; TransformStream: { prototype: infer T } } ? {\n                    prototype: T;\n                    new(format: "deflate" | "deflate-raw" | "gzip"): T;\n                }\n            : typeof import("stream/web").DecompressionStream;\n\n        interface ReadableByteStreamController extends _ReadableByteStreamController {}\n        /**\n         * `ReadableByteStreamController` class is a global reference for `import { ReadableByteStreamController } from \'node:stream/web\'`.\n         * https://nodejs.org/api/globals.html#class-readablebytestreamcontroller\n         * @since v18.0.0\n         */\n        var ReadableByteStreamController: typeof globalThis extends\n            { onmessage: any; ReadableByteStreamController: infer T } ? T\n            : typeof import("stream/web").ReadableByteStreamController;\n\n        interface ReadableStream<R = any> extends _ReadableStream<R> {}\n        /**\n         * `ReadableStream` class is a global reference for `import { ReadableStream } from \'node:stream/web\'`.\n         * https://nodejs.org/api/globals.html#class-readablestream\n         * @since v18.0.0\n         */\n        var ReadableStream: typeof globalThis extends { onmessage: any; ReadableStream: infer T } ? T\n            : typeof import("stream/web").ReadableStream;\n\n        interface ReadableStreamBYOBReader extends _ReadableStreamBYOBReader {}\n        /**\n         * `ReadableStreamBYOBReader` class is a global reference for `import { ReadableStreamBYOBReader } from \'node:stream/web\'`.\n         * https://nodejs.org/api/globals.html#class-readablestreambyobreader\n         * @since v18.0.0\n         */\n        var ReadableStreamBYOBReader: typeof globalThis extends { onmessage: any; ReadableStreamBYOBReader: infer T }\n            ? T\n            : typeof import("stream/web").ReadableStreamBYOBReader;\n\n        interface ReadableStreamBYOBRequest extends _ReadableStreamBYOBRequest {}\n        /**\n         * `ReadableStreamBYOBRequest` class is a global reference for `import { ReadableStreamBYOBRequest } from \'node:stream/web\'`.\n         * https://nodejs.org/api/globals.html#class-readablestreambyobrequest\n         * @since v18.0.0\n         */\n        var ReadableStreamBYOBRequest: typeof globalThis extends { onmessage: any; ReadableStreamBYOBRequest: infer T }\n            ? T\n            : typeof import("stream/web").ReadableStreamBYOBRequest;\n\n        interface ReadableStreamDefaultController<R = any> extends _ReadableStreamDefaultController<R> {}\n        /**\n         * `ReadableStreamDefaultController` class is a global reference for `import { ReadableStreamDefaultController } from \'node:stream/web\'`.\n         * https://nodejs.org/api/globals.html#class-readablestreamdefaultcontroller\n         * @since v18.0.0\n         */\n        var ReadableStreamDefaultController: typeof globalThis extends\n            { onmessage: any; ReadableStreamDefaultController: infer T } ? T\n            : typeof import("stream/web").ReadableStreamDefaultController;\n\n        interface ReadableStreamDefaultReader<R = any> extends _ReadableStreamDefaultReader<R> {}\n        /**\n         * `ReadableStreamDefaultReader` class is a global reference for `import { ReadableStreamDefaultReader } from \'node:stream/web\'`.\n         * https://nodejs.org/api/globals.html#class-readablestreamdefaultreader\n         * @since v18.0.0\n         */\n        var ReadableStreamDefaultReader: typeof globalThis extends\n            { onmessage: any; ReadableStreamDefaultReader: infer T } ? T\n            : typeof import("stream/web").ReadableStreamDefaultReader;\n\n        interface TextDecoderStream extends _TextDecoderStream {}\n        /**\n         * `TextDecoderStream` class is a global reference for `import { TextDecoderStream } from \'node:stream/web\'`.\n         * https://nodejs.org/api/globals.html#class-textdecoderstream\n         * @since v18.0.0\n         */\n        var TextDecoderStream: typeof globalThis extends { onmessage: any; TextDecoderStream: infer T } ? T\n            : typeof import("stream/web").TextDecoderStream;\n\n        interface TextEncoderStream extends _TextEncoderStream {}\n        /**\n         * `TextEncoderStream` class is a global reference for `import { TextEncoderStream } from \'node:stream/web\'`.\n         * https://nodejs.org/api/globals.html#class-textencoderstream\n         * @since v18.0.0\n         */\n        var TextEncoderStream: typeof globalThis extends { onmessage: any; TextEncoderStream: infer T } ? T\n            : typeof import("stream/web").TextEncoderStream;\n\n        interface TransformStream<I = any, O = any> extends _TransformStream<I, O> {}\n        /**\n         * `TransformStream` class is a global reference for `import { TransformStream } from \'node:stream/web\'`.\n         * https://nodejs.org/api/globals.html#class-transformstream\n         * @since v18.0.0\n         */\n        var TransformStream: typeof globalThis extends { onmessage: any; TransformStream: infer T } ? T\n            : typeof import("stream/web").TransformStream;\n\n        interface TransformStreamDefaultController<O = any> extends _TransformStreamDefaultController<O> {}\n        /**\n         * `TransformStreamDefaultController` class is a global reference for `import { TransformStreamDefaultController } from \'node:stream/web\'`.\n         * https://nodejs.org/api/globals.html#class-transformstreamdefaultcontroller\n         * @since v18.0.0\n         */\n        var TransformStreamDefaultController: typeof globalThis extends\n            { onmessage: any; TransformStreamDefaultController: infer T } ? T\n            : typeof import("stream/web").TransformStreamDefaultController;\n\n        interface WritableStream<W = any> extends _WritableStream<W> {}\n        /**\n         * `WritableStream` class is a global reference for `import { WritableStream } from \'node:stream/web\'`.\n         * https://nodejs.org/api/globals.html#class-writablestream\n         * @since v18.0.0\n         */\n        var WritableStream: typeof globalThis extends { onmessage: any; WritableStream: infer T } ? T\n            : typeof import("stream/web").WritableStream;\n\n        interface WritableStreamDefaultController extends _WritableStreamDefaultController {}\n        /**\n         * `WritableStreamDefaultController` class is a global reference for `import { WritableStreamDefaultController } from \'node:stream/web\'`.\n         * https://nodejs.org/api/globals.html#class-writablestreamdefaultcontroller\n         * @since v18.0.0\n         */\n        var WritableStreamDefaultController: typeof globalThis extends\n            { onmessage: any; WritableStreamDefaultController: infer T } ? T\n            : typeof import("stream/web").WritableStreamDefaultController;\n\n        interface WritableStreamDefaultWriter<W = any> extends _WritableStreamDefaultWriter<W> {}\n        /**\n         * `WritableStreamDefaultWriter` class is a global reference for `import { WritableStreamDefaultWriter } from \'node:stream/web\'`.\n         * https://nodejs.org/api/globals.html#class-writablestreamdefaultwriter\n         * @since v18.0.0\n         */\n        var WritableStreamDefaultWriter: typeof globalThis extends\n            { onmessage: any; WritableStreamDefaultWriter: infer T } ? T\n            : typeof import("stream/web").WritableStreamDefaultWriter;\n    }\n}\ndeclare module "node:stream/web" {\n    export * from "stream/web";\n}\n',
  '@types/node/string_decoder.d.ts':
    "/**\n * The `node:string_decoder` module provides an API for decoding `Buffer` objects\n * into strings in a manner that preserves encoded multi-byte UTF-8 and UTF-16\n * characters. It can be accessed using:\n *\n * ```js\n * import { StringDecoder } from 'node:string_decoder';\n * ```\n *\n * The following example shows the basic use of the `StringDecoder` class.\n *\n * ```js\n * import { StringDecoder } from 'node:string_decoder';\n * const decoder = new StringDecoder('utf8');\n *\n * const cent = Buffer.from([0xC2, 0xA2]);\n * console.log(decoder.write(cent)); // Prints: ¢\n *\n * const euro = Buffer.from([0xE2, 0x82, 0xAC]);\n * console.log(decoder.write(euro)); // Prints: €\n * ```\n *\n * When a `Buffer` instance is written to the `StringDecoder` instance, an\n * internal buffer is used to ensure that the decoded string does not contain\n * any incomplete multibyte characters. These are held in the buffer until the\n * next call to `stringDecoder.write()` or until `stringDecoder.end()` is called.\n *\n * In the following example, the three UTF-8 encoded bytes of the European Euro\n * symbol (`€`) are written over three separate operations:\n *\n * ```js\n * import { StringDecoder } from 'node:string_decoder';\n * const decoder = new StringDecoder('utf8');\n *\n * decoder.write(Buffer.from([0xE2]));\n * decoder.write(Buffer.from([0x82]));\n * console.log(decoder.end(Buffer.from([0xAC]))); // Prints: €\n * ```\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/string_decoder.js)\n */\ndeclare module \"string_decoder\" {\n    class StringDecoder {\n        constructor(encoding?: BufferEncoding);\n        /**\n         * Returns a decoded string, ensuring that any incomplete multibyte characters at\n         * the end of the `Buffer`, or `TypedArray`, or `DataView` are omitted from the\n         * returned string and stored in an internal buffer for the next call to `stringDecoder.write()` or `stringDecoder.end()`.\n         * @since v0.1.99\n         * @param buffer The bytes to decode.\n         */\n        write(buffer: string | Buffer | NodeJS.ArrayBufferView): string;\n        /**\n         * Returns any remaining input stored in the internal buffer as a string. Bytes\n         * representing incomplete UTF-8 and UTF-16 characters will be replaced with\n         * substitution characters appropriate for the character encoding.\n         *\n         * If the `buffer` argument is provided, one final call to `stringDecoder.write()` is performed before returning the remaining input.\n         * After `end()` is called, the `stringDecoder` object can be reused for new input.\n         * @since v0.9.3\n         * @param buffer The bytes to decode.\n         */\n        end(buffer?: string | Buffer | NodeJS.ArrayBufferView): string;\n    }\n}\ndeclare module \"node:string_decoder\" {\n    export * from \"string_decoder\";\n}\n",
  '@types/node/test.d.ts':
    "/**\n * The `node:test` module facilitates the creation of JavaScript tests.\n * To access it:\n *\n * ```js\n * import test from 'node:test';\n * ```\n *\n * This module is only available under the `node:` scheme. The following will not\n * work:\n *\n * ```js\n * import test from 'node:test';\n * ```\n *\n * Tests created via the `test` module consist of a single function that is\n * processed in one of three ways:\n *\n * 1. A synchronous function that is considered failing if it throws an exception,\n * and is considered passing otherwise.\n * 2. A function that returns a `Promise` that is considered failing if the `Promise` rejects, and is considered passing if the `Promise` fulfills.\n * 3. A function that receives a callback function. If the callback receives any\n * truthy value as its first argument, the test is considered failing. If a\n * falsy value is passed as the first argument to the callback, the test is\n * considered passing. If the test function receives a callback function and\n * also returns a `Promise`, the test will fail.\n *\n * The following example illustrates how tests are written using the `test` module.\n *\n * ```js\n * test('synchronous passing test', (t) => {\n *   // This test passes because it does not throw an exception.\n *   assert.strictEqual(1, 1);\n * });\n *\n * test('synchronous failing test', (t) => {\n *   // This test fails because it throws an exception.\n *   assert.strictEqual(1, 2);\n * });\n *\n * test('asynchronous passing test', async (t) => {\n *   // This test passes because the Promise returned by the async\n *   // function is settled and not rejected.\n *   assert.strictEqual(1, 1);\n * });\n *\n * test('asynchronous failing test', async (t) => {\n *   // This test fails because the Promise returned by the async\n *   // function is rejected.\n *   assert.strictEqual(1, 2);\n * });\n *\n * test('failing test using Promises', (t) => {\n *   // Promises can be used directly as well.\n *   return new Promise((resolve, reject) => {\n *     setImmediate(() => {\n *       reject(new Error('this will cause the test to fail'));\n *     });\n *   });\n * });\n *\n * test('callback passing test', (t, done) => {\n *   // done() is the callback function. When the setImmediate() runs, it invokes\n *   // done() with no arguments.\n *   setImmediate(done);\n * });\n *\n * test('callback failing test', (t, done) => {\n *   // When the setImmediate() runs, done() is invoked with an Error object and\n *   // the test fails.\n *   setImmediate(() => {\n *     done(new Error('callback failure'));\n *   });\n * });\n * ```\n *\n * If any tests fail, the process exit code is set to `1`.\n * @since v18.0.0, v16.17.0\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/test.js)\n */\ndeclare module \"node:test\" {\n    import { Readable } from \"node:stream\";\n    /**\n     * **Note:** `shard` is used to horizontally parallelize test running across\n     * machines or processes, ideal for large-scale executions across varied\n     * environments. It's incompatible with `watch` mode, tailored for rapid\n     * code iteration by automatically rerunning tests on file changes.\n     *\n     * ```js\n     * import { tap } from 'node:test/reporters';\n     * import { run } from 'node:test';\n     * import process from 'node:process';\n     * import path from 'node:path';\n     *\n     * run({ files: [path.resolve('./tests/test.js')] })\n     *   .compose(tap)\n     *   .pipe(process.stdout);\n     * ```\n     * @since v18.9.0, v16.19.0\n     * @param options Configuration options for running tests.\n     */\n    function run(options?: RunOptions): TestsStream;\n    /**\n     * The `test()` function is the value imported from the `test` module. Each\n     * invocation of this function results in reporting the test to the `TestsStream`.\n     *\n     * The `TestContext` object passed to the `fn` argument can be used to perform\n     * actions related to the current test. Examples include skipping the test, adding\n     * additional diagnostic information, or creating subtests.\n     *\n     * `test()` returns a `Promise` that fulfills once the test completes.\n     * if `test()` is called within a suite, it fulfills immediately.\n     * The return value can usually be discarded for top level tests.\n     * However, the return value from subtests should be used to prevent the parent\n     * test from finishing first and cancelling the subtest\n     * as shown in the following example.\n     *\n     * ```js\n     * test('top level test', async (t) => {\n     *   // The setTimeout() in the following subtest would cause it to outlive its\n     *   // parent test if 'await' is removed on the next line. Once the parent test\n     *   // completes, it will cancel any outstanding subtests.\n     *   await t.test('longer running subtest', async (t) => {\n     *     return new Promise((resolve, reject) => {\n     *       setTimeout(resolve, 1000);\n     *     });\n     *   });\n     * });\n     * ```\n     *\n     * The `timeout` option can be used to fail the test if it takes longer than `timeout` milliseconds to complete. However, it is not a reliable mechanism for\n     * canceling tests because a running test might block the application thread and\n     * thus prevent the scheduled cancellation.\n     * @since v18.0.0, v16.17.0\n     * @param name The name of the test, which is displayed when reporting test results.\n     * Defaults to the `name` property of `fn`, or `'<anonymous>'` if `fn` does not have a name.\n     * @param options Configuration options for the test.\n     * @param fn The function under test. The first argument to this function is a {@link TestContext} object.\n     * If the test uses callbacks, the callback function is passed as the second argument.\n     * @return Fulfilled with `undefined` once the test completes, or immediately if the test runs within a suite.\n     */\n    function test(name?: string, fn?: TestFn): Promise<void>;\n    function test(name?: string, options?: TestOptions, fn?: TestFn): Promise<void>;\n    function test(options?: TestOptions, fn?: TestFn): Promise<void>;\n    function test(fn?: TestFn): Promise<void>;\n    namespace test {\n        export {\n            after,\n            afterEach,\n            assert,\n            before,\n            beforeEach,\n            describe,\n            it,\n            mock,\n            only,\n            run,\n            skip,\n            snapshot,\n            suite,\n            test,\n            todo,\n        };\n    }\n    /**\n     * The `suite()` function is imported from the `node:test` module.\n     * @param name The name of the suite, which is displayed when reporting test results.\n     * Defaults to the `name` property of `fn`, or `'<anonymous>'` if `fn` does not have a name.\n     * @param options Configuration options for the suite. This supports the same options as {@link test}.\n     * @param fn The suite function declaring nested tests and suites. The first argument to this function is a {@link SuiteContext} object.\n     * @return Immediately fulfilled with `undefined`.\n     * @since v20.13.0\n     */\n    function suite(name?: string, options?: TestOptions, fn?: SuiteFn): Promise<void>;\n    function suite(name?: string, fn?: SuiteFn): Promise<void>;\n    function suite(options?: TestOptions, fn?: SuiteFn): Promise<void>;\n    function suite(fn?: SuiteFn): Promise<void>;\n    namespace suite {\n        /**\n         * Shorthand for skipping a suite. This is the same as calling {@link suite} with `options.skip` set to `true`.\n         * @since v20.13.0\n         */\n        function skip(name?: string, options?: TestOptions, fn?: SuiteFn): Promise<void>;\n        function skip(name?: string, fn?: SuiteFn): Promise<void>;\n        function skip(options?: TestOptions, fn?: SuiteFn): Promise<void>;\n        function skip(fn?: SuiteFn): Promise<void>;\n        /**\n         * Shorthand for marking a suite as `TODO`. This is the same as calling {@link suite} with `options.todo` set to `true`.\n         * @since v20.13.0\n         */\n        function todo(name?: string, options?: TestOptions, fn?: SuiteFn): Promise<void>;\n        function todo(name?: string, fn?: SuiteFn): Promise<void>;\n        function todo(options?: TestOptions, fn?: SuiteFn): Promise<void>;\n        function todo(fn?: SuiteFn): Promise<void>;\n        /**\n         * Shorthand for marking a suite as `only`. This is the same as calling {@link suite} with `options.only` set to `true`.\n         * @since v20.13.0\n         */\n        function only(name?: string, options?: TestOptions, fn?: SuiteFn): Promise<void>;\n        function only(name?: string, fn?: SuiteFn): Promise<void>;\n        function only(options?: TestOptions, fn?: SuiteFn): Promise<void>;\n        function only(fn?: SuiteFn): Promise<void>;\n    }\n    /**\n     * Alias for {@link suite}.\n     *\n     * The `describe()` function is imported from the `node:test` module.\n     */\n    function describe(name?: string, options?: TestOptions, fn?: SuiteFn): Promise<void>;\n    function describe(name?: string, fn?: SuiteFn): Promise<void>;\n    function describe(options?: TestOptions, fn?: SuiteFn): Promise<void>;\n    function describe(fn?: SuiteFn): Promise<void>;\n    namespace describe {\n        /**\n         * Shorthand for skipping a suite. This is the same as calling {@link describe} with `options.skip` set to `true`.\n         * @since v18.15.0\n         */\n        function skip(name?: string, options?: TestOptions, fn?: SuiteFn): Promise<void>;\n        function skip(name?: string, fn?: SuiteFn): Promise<void>;\n        function skip(options?: TestOptions, fn?: SuiteFn): Promise<void>;\n        function skip(fn?: SuiteFn): Promise<void>;\n        /**\n         * Shorthand for marking a suite as `TODO`. This is the same as calling {@link describe} with `options.todo` set to `true`.\n         * @since v18.15.0\n         */\n        function todo(name?: string, options?: TestOptions, fn?: SuiteFn): Promise<void>;\n        function todo(name?: string, fn?: SuiteFn): Promise<void>;\n        function todo(options?: TestOptions, fn?: SuiteFn): Promise<void>;\n        function todo(fn?: SuiteFn): Promise<void>;\n        /**\n         * Shorthand for marking a suite as `only`. This is the same as calling {@link describe} with `options.only` set to `true`.\n         * @since v18.15.0\n         */\n        function only(name?: string, options?: TestOptions, fn?: SuiteFn): Promise<void>;\n        function only(name?: string, fn?: SuiteFn): Promise<void>;\n        function only(options?: TestOptions, fn?: SuiteFn): Promise<void>;\n        function only(fn?: SuiteFn): Promise<void>;\n    }\n    /**\n     * Alias for {@link test}.\n     *\n     * The `it()` function is imported from the `node:test` module.\n     * @since v18.6.0, v16.17.0\n     */\n    function it(name?: string, options?: TestOptions, fn?: TestFn): Promise<void>;\n    function it(name?: string, fn?: TestFn): Promise<void>;\n    function it(options?: TestOptions, fn?: TestFn): Promise<void>;\n    function it(fn?: TestFn): Promise<void>;\n    namespace it {\n        /**\n         * Shorthand for skipping a test. This is the same as calling {@link it} with `options.skip` set to `true`.\n         */\n        function skip(name?: string, options?: TestOptions, fn?: TestFn): Promise<void>;\n        function skip(name?: string, fn?: TestFn): Promise<void>;\n        function skip(options?: TestOptions, fn?: TestFn): Promise<void>;\n        function skip(fn?: TestFn): Promise<void>;\n        /**\n         * Shorthand for marking a test as `TODO`. This is the same as calling {@link it} with `options.todo` set to `true`.\n         */\n        function todo(name?: string, options?: TestOptions, fn?: TestFn): Promise<void>;\n        function todo(name?: string, fn?: TestFn): Promise<void>;\n        function todo(options?: TestOptions, fn?: TestFn): Promise<void>;\n        function todo(fn?: TestFn): Promise<void>;\n        /**\n         * Shorthand for marking a test as `only`. This is the same as calling {@link it} with `options.only` set to `true`.\n         * @since v18.15.0\n         */\n        function only(name?: string, options?: TestOptions, fn?: TestFn): Promise<void>;\n        function only(name?: string, fn?: TestFn): Promise<void>;\n        function only(options?: TestOptions, fn?: TestFn): Promise<void>;\n        function only(fn?: TestFn): Promise<void>;\n    }\n    /**\n     * Shorthand for skipping a test. This is the same as calling {@link test} with `options.skip` set to `true`.\n     * @since v20.2.0\n     */\n    function skip(name?: string, options?: TestOptions, fn?: TestFn): Promise<void>;\n    function skip(name?: string, fn?: TestFn): Promise<void>;\n    function skip(options?: TestOptions, fn?: TestFn): Promise<void>;\n    function skip(fn?: TestFn): Promise<void>;\n    /**\n     * Shorthand for marking a test as `TODO`. This is the same as calling {@link test} with `options.todo` set to `true`.\n     * @since v20.2.0\n     */\n    function todo(name?: string, options?: TestOptions, fn?: TestFn): Promise<void>;\n    function todo(name?: string, fn?: TestFn): Promise<void>;\n    function todo(options?: TestOptions, fn?: TestFn): Promise<void>;\n    function todo(fn?: TestFn): Promise<void>;\n    /**\n     * Shorthand for marking a test as `only`. This is the same as calling {@link test} with `options.only` set to `true`.\n     * @since v20.2.0\n     */\n    function only(name?: string, options?: TestOptions, fn?: TestFn): Promise<void>;\n    function only(name?: string, fn?: TestFn): Promise<void>;\n    function only(options?: TestOptions, fn?: TestFn): Promise<void>;\n    function only(fn?: TestFn): Promise<void>;\n    /**\n     * The type of a function passed to {@link test}. The first argument to this function is a {@link TestContext} object.\n     * If the test uses callbacks, the callback function is passed as the second argument.\n     */\n    type TestFn = (t: TestContext, done: (result?: any) => void) => void | Promise<void>;\n    /**\n     * The type of a suite test function. The argument to this function is a {@link SuiteContext} object.\n     */\n    type SuiteFn = (s: SuiteContext) => void | Promise<void>;\n    interface TestShard {\n        /**\n         * A positive integer between 1 and `total` that specifies the index of the shard to run.\n         */\n        index: number;\n        /**\n         * A positive integer that specifies the total number of shards to split the test files to.\n         */\n        total: number;\n    }\n    interface RunOptions {\n        /**\n         * If a number is provided, then that many test processes would run in parallel, where each process corresponds to one test file.\n         * If `true`, it would run `os.availableParallelism() - 1` test files in parallel. If `false`, it would only run one test file at a time.\n         * @default false\n         */\n        concurrency?: number | boolean | undefined;\n        /**\n         * An array containing the list of files to run. If omitted, files are run according to the\n         * [test runner execution model](https://nodejs.org/docs/latest-v22.x/api/test.html#test-runner-execution-model).\n         */\n        files?: readonly string[] | undefined;\n        /**\n         * Configures the test runner to exit the process once all known\n         * tests have finished executing even if the event loop would\n         * otherwise remain active.\n         * @default false\n         */\n        forceExit?: boolean | undefined;\n        /**\n         * An array containing the list of glob patterns to match test files.\n         * This option cannot be used together with `files`. If omitted, files are run according to the\n         * [test runner execution model](https://nodejs.org/docs/latest-v22.x/api/test.html#test-runner-execution-model).\n         * @since v22.6.0\n         */\n        globPatterns?: readonly string[] | undefined;\n        /**\n         * Sets inspector port of test child process.\n         * This can be a number, or a function that takes no arguments and returns a\n         * number. If a nullish value is provided, each process gets its own port,\n         * incremented from the primary's `process.debugPort`. This option is ignored\n         * if the `isolation` option is set to `'none'` as no child processes are\n         * spawned.\n         * @default undefined\n         */\n        inspectPort?: number | (() => number) | undefined;\n        /**\n         * Configures the type of test isolation. If set to\n         * `'process'`, each test file is run in a separate child process. If set to\n         * `'none'`, all test files run in the current process.\n         * @default 'process'\n         * @since v22.8.0\n         */\n        isolation?: \"process\" | \"none\" | undefined;\n        /**\n         * If truthy, the test context will only run tests that have the `only` option set\n         */\n        only?: boolean | undefined;\n        /**\n         * A function that accepts the `TestsStream` instance and can be used to setup listeners before any tests are run.\n         * @default undefined\n         */\n        setup?: ((reporter: TestsStream) => void | Promise<void>) | undefined;\n        /**\n         * An array of CLI flags to pass to the `node` executable when\n         * spawning the subprocesses. This option has no effect when `isolation` is `'none`'.\n         * @since v22.10.0\n         * @default []\n         */\n        execArgv?: readonly string[] | undefined;\n        /**\n         * An array of CLI flags to pass to each test file when spawning the\n         * subprocesses. This option has no effect when `isolation` is `'none'`.\n         * @since v22.10.0\n         * @default []\n         */\n        argv?: readonly string[] | undefined;\n        /**\n         * Allows aborting an in-progress test execution.\n         */\n        signal?: AbortSignal | undefined;\n        /**\n         * If provided, only run tests whose name matches the provided pattern.\n         * Strings are interpreted as JavaScript regular expressions.\n         * @default undefined\n         */\n        testNamePatterns?: string | RegExp | ReadonlyArray<string | RegExp> | undefined;\n        /**\n         * A String, RegExp or a RegExp Array, that can be used to exclude running tests whose\n         * name matches the provided pattern. Test name patterns are interpreted as JavaScript\n         * regular expressions. For each test that is executed, any corresponding test hooks,\n         * such as `beforeEach()`, are also run.\n         * @default undefined\n         * @since v22.1.0\n         */\n        testSkipPatterns?: string | RegExp | ReadonlyArray<string | RegExp> | undefined;\n        /**\n         * The number of milliseconds after which the test execution will fail.\n         * If unspecified, subtests inherit this value from their parent.\n         * @default Infinity\n         */\n        timeout?: number | undefined;\n        /**\n         * Whether to run in watch mode or not.\n         * @default false\n         */\n        watch?: boolean | undefined;\n        /**\n         * Running tests in a specific shard.\n         * @default undefined\n         */\n        shard?: TestShard | undefined;\n        /**\n         * enable [code coverage](https://nodejs.org/docs/latest-v22.x/api/test.html#collecting-code-coverage) collection.\n         * @since v22.10.0\n         * @default false\n         */\n        coverage?: boolean | undefined;\n        /**\n         * Excludes specific files from code coverage\n         * using a glob pattern, which can match both absolute and relative file paths.\n         * This property is only applicable when `coverage` was set to `true`.\n         * If both `coverageExcludeGlobs` and `coverageIncludeGlobs` are provided,\n         * files must meet **both** criteria to be included in the coverage report.\n         * @since v22.10.0\n         * @default undefined\n         */\n        coverageExcludeGlobs?: string | readonly string[] | undefined;\n        /**\n         * Includes specific files in code coverage\n         * using a glob pattern, which can match both absolute and relative file paths.\n         * This property is only applicable when `coverage` was set to `true`.\n         * If both `coverageExcludeGlobs` and `coverageIncludeGlobs` are provided,\n         * files must meet **both** criteria to be included in the coverage report.\n         * @since v22.10.0\n         * @default undefined\n         */\n        coverageIncludeGlobs?: string | readonly string[] | undefined;\n        /**\n         * Require a minimum percent of covered lines. If code\n         * coverage does not reach the threshold specified, the process will exit with code `1`.\n         * @since v22.10.0\n         * @default 0\n         */\n        lineCoverage?: number | undefined;\n        /**\n         * Require a minimum percent of covered branches. If code\n         * coverage does not reach the threshold specified, the process will exit with code `1`.\n         * @since v22.10.0\n         * @default 0\n         */\n        branchCoverage?: number | undefined;\n        /**\n         * Require a minimum percent of covered functions. If code\n         * coverage does not reach the threshold specified, the process will exit with code `1`.\n         * @since v22.10.0\n         * @default 0\n         */\n        functionCoverage?: number | undefined;\n    }\n    /**\n     * A successful call to `run()` will return a new `TestsStream` object, streaming a series of events representing the execution of the tests.\n     *\n     * Some of the events are guaranteed to be emitted in the same order as the tests are defined, while others are emitted in the order that the tests execute.\n     * @since v18.9.0, v16.19.0\n     */\n    class TestsStream extends Readable implements NodeJS.ReadableStream {\n        addListener(event: \"test:coverage\", listener: (data: TestCoverage) => void): this;\n        addListener(event: \"test:complete\", listener: (data: TestComplete) => void): this;\n        addListener(event: \"test:dequeue\", listener: (data: TestDequeue) => void): this;\n        addListener(event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this;\n        addListener(event: \"test:enqueue\", listener: (data: TestEnqueue) => void): this;\n        addListener(event: \"test:fail\", listener: (data: TestFail) => void): this;\n        addListener(event: \"test:pass\", listener: (data: TestPass) => void): this;\n        addListener(event: \"test:plan\", listener: (data: TestPlan) => void): this;\n        addListener(event: \"test:start\", listener: (data: TestStart) => void): this;\n        addListener(event: \"test:stderr\", listener: (data: TestStderr) => void): this;\n        addListener(event: \"test:stdout\", listener: (data: TestStdout) => void): this;\n        addListener(event: \"test:summary\", listener: (data: TestSummary) => void): this;\n        addListener(event: \"test:watch:drained\", listener: () => void): this;\n        addListener(event: string, listener: (...args: any[]) => void): this;\n        emit(event: \"test:coverage\", data: TestCoverage): boolean;\n        emit(event: \"test:complete\", data: TestComplete): boolean;\n        emit(event: \"test:dequeue\", data: TestDequeue): boolean;\n        emit(event: \"test:diagnostic\", data: DiagnosticData): boolean;\n        emit(event: \"test:enqueue\", data: TestEnqueue): boolean;\n        emit(event: \"test:fail\", data: TestFail): boolean;\n        emit(event: \"test:pass\", data: TestPass): boolean;\n        emit(event: \"test:plan\", data: TestPlan): boolean;\n        emit(event: \"test:start\", data: TestStart): boolean;\n        emit(event: \"test:stderr\", data: TestStderr): boolean;\n        emit(event: \"test:stdout\", data: TestStdout): boolean;\n        emit(event: \"test:summary\", data: TestSummary): boolean;\n        emit(event: \"test:watch:drained\"): boolean;\n        emit(event: string | symbol, ...args: any[]): boolean;\n        on(event: \"test:coverage\", listener: (data: TestCoverage) => void): this;\n        on(event: \"test:complete\", listener: (data: TestComplete) => void): this;\n        on(event: \"test:dequeue\", listener: (data: TestDequeue) => void): this;\n        on(event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this;\n        on(event: \"test:enqueue\", listener: (data: TestEnqueue) => void): this;\n        on(event: \"test:fail\", listener: (data: TestFail) => void): this;\n        on(event: \"test:pass\", listener: (data: TestPass) => void): this;\n        on(event: \"test:plan\", listener: (data: TestPlan) => void): this;\n        on(event: \"test:start\", listener: (data: TestStart) => void): this;\n        on(event: \"test:stderr\", listener: (data: TestStderr) => void): this;\n        on(event: \"test:stdout\", listener: (data: TestStdout) => void): this;\n        on(event: \"test:summary\", listener: (data: TestSummary) => void): this;\n        on(event: \"test:watch:drained\", listener: () => void): this;\n        on(event: string, listener: (...args: any[]) => void): this;\n        once(event: \"test:coverage\", listener: (data: TestCoverage) => void): this;\n        once(event: \"test:complete\", listener: (data: TestComplete) => void): this;\n        once(event: \"test:dequeue\", listener: (data: TestDequeue) => void): this;\n        once(event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this;\n        once(event: \"test:enqueue\", listener: (data: TestEnqueue) => void): this;\n        once(event: \"test:fail\", listener: (data: TestFail) => void): this;\n        once(event: \"test:pass\", listener: (data: TestPass) => void): this;\n        once(event: \"test:plan\", listener: (data: TestPlan) => void): this;\n        once(event: \"test:start\", listener: (data: TestStart) => void): this;\n        once(event: \"test:stderr\", listener: (data: TestStderr) => void): this;\n        once(event: \"test:stdout\", listener: (data: TestStdout) => void): this;\n        once(event: \"test:summary\", listener: (data: TestSummary) => void): this;\n        once(event: \"test:watch:drained\", listener: () => void): this;\n        once(event: string, listener: (...args: any[]) => void): this;\n        prependListener(event: \"test:coverage\", listener: (data: TestCoverage) => void): this;\n        prependListener(event: \"test:complete\", listener: (data: TestComplete) => void): this;\n        prependListener(event: \"test:dequeue\", listener: (data: TestDequeue) => void): this;\n        prependListener(event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this;\n        prependListener(event: \"test:enqueue\", listener: (data: TestEnqueue) => void): this;\n        prependListener(event: \"test:fail\", listener: (data: TestFail) => void): this;\n        prependListener(event: \"test:pass\", listener: (data: TestPass) => void): this;\n        prependListener(event: \"test:plan\", listener: (data: TestPlan) => void): this;\n        prependListener(event: \"test:start\", listener: (data: TestStart) => void): this;\n        prependListener(event: \"test:stderr\", listener: (data: TestStderr) => void): this;\n        prependListener(event: \"test:stdout\", listener: (data: TestStdout) => void): this;\n        prependListener(event: \"test:summary\", listener: (data: TestSummary) => void): this;\n        prependListener(event: \"test:watch:drained\", listener: () => void): this;\n        prependListener(event: string, listener: (...args: any[]) => void): this;\n        prependOnceListener(event: \"test:coverage\", listener: (data: TestCoverage) => void): this;\n        prependOnceListener(event: \"test:complete\", listener: (data: TestComplete) => void): this;\n        prependOnceListener(event: \"test:dequeue\", listener: (data: TestDequeue) => void): this;\n        prependOnceListener(event: \"test:diagnostic\", listener: (data: DiagnosticData) => void): this;\n        prependOnceListener(event: \"test:enqueue\", listener: (data: TestEnqueue) => void): this;\n        prependOnceListener(event: \"test:fail\", listener: (data: TestFail) => void): this;\n        prependOnceListener(event: \"test:pass\", listener: (data: TestPass) => void): this;\n        prependOnceListener(event: \"test:plan\", listener: (data: TestPlan) => void): this;\n        prependOnceListener(event: \"test:start\", listener: (data: TestStart) => void): this;\n        prependOnceListener(event: \"test:stderr\", listener: (data: TestStderr) => void): this;\n        prependOnceListener(event: \"test:stdout\", listener: (data: TestStdout) => void): this;\n        prependOnceListener(event: \"test:summary\", listener: (data: TestSummary) => void): this;\n        prependOnceListener(event: \"test:watch:drained\", listener: () => void): this;\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\n    }\n    /**\n     * An instance of `TestContext` is passed to each test function in order to\n     * interact with the test runner. However, the `TestContext` constructor is not\n     * exposed as part of the API.\n     * @since v18.0.0, v16.17.0\n     */\n    class TestContext {\n        /**\n         * An object containing assertion methods bound to the test context.\n         * The top-level functions from the `node:assert` module are exposed here for the purpose of creating test plans.\n         *\n         * **Note:** Some of the functions from `node:assert` contain type assertions. If these are called via the\n         * TestContext `assert` object, then the context parameter in the test's function signature **must be explicitly typed**\n         * (ie. the parameter must have a type annotation), otherwise an error will be raised by the TypeScript compiler:\n         * ```ts\n         * import { test, type TestContext } from 'node:test';\n         *\n         * // The test function's context parameter must have a type annotation.\n         * test('example', (t: TestContext) => {\n         *   t.assert.deepStrictEqual(actual, expected);\n         * });\n         *\n         * // Omitting the type annotation will result in a compilation error.\n         * test('example', t => {\n         *   t.assert.deepStrictEqual(actual, expected); // Error: 't' needs an explicit type annotation.\n         * });\n         * ```\n         * @since v22.2.0, v20.15.0\n         */\n        readonly assert: TestContextAssert;\n        /**\n         * This function is used to create a hook running before subtest of the current test.\n         * @param fn The hook function. The first argument to this function is a `TestContext` object.\n         * If the hook uses callbacks, the callback function is passed as the second argument.\n         * @param options Configuration options for the hook.\n         * @since v20.1.0, v18.17.0\n         */\n        before(fn?: TestContextHookFn, options?: HookOptions): void;\n        /**\n         * This function is used to create a hook running before each subtest of the current test.\n         * @param fn The hook function. The first argument to this function is a `TestContext` object.\n         * If the hook uses callbacks, the callback function is passed as the second argument.\n         * @param options Configuration options for the hook.\n         * @since v18.8.0\n         */\n        beforeEach(fn?: TestContextHookFn, options?: HookOptions): void;\n        /**\n         * This function is used to create a hook that runs after the current test finishes.\n         * @param fn The hook function. The first argument to this function is a `TestContext` object.\n         * If the hook uses callbacks, the callback function is passed as the second argument.\n         * @param options Configuration options for the hook.\n         * @since v18.13.0\n         */\n        after(fn?: TestContextHookFn, options?: HookOptions): void;\n        /**\n         * This function is used to create a hook running after each subtest of the current test.\n         * @param fn The hook function. The first argument to this function is a `TestContext` object.\n         * If the hook uses callbacks, the callback function is passed as the second argument.\n         * @param options Configuration options for the hook.\n         * @since v18.8.0\n         */\n        afterEach(fn?: TestContextHookFn, options?: HookOptions): void;\n        /**\n         * This function is used to write diagnostics to the output. Any diagnostic\n         * information is included at the end of the test's results. This function does\n         * not return a value.\n         *\n         * ```js\n         * test('top level test', (t) => {\n         *   t.diagnostic('A diagnostic message');\n         * });\n         * ```\n         * @since v18.0.0, v16.17.0\n         * @param message Message to be reported.\n         */\n        diagnostic(message: string): void;\n        /**\n         * The absolute path of the test file that created the current test. If a test file imports\n         * additional modules that generate tests, the imported tests will return the path of the root test file.\n         * @since v22.6.0\n         */\n        readonly filePath: string | undefined;\n        /**\n         * The name of the test and each of its ancestors, separated by `>`.\n         * @since v22.3.0\n         */\n        readonly fullName: string;\n        /**\n         * The name of the test.\n         * @since v18.8.0, v16.18.0\n         */\n        readonly name: string;\n        /**\n         * This function is used to set the number of assertions and subtests that are expected to run\n         * within the test. If the number of assertions and subtests that run does not match the\n         * expected count, the test will fail.\n         *\n         * > Note: To make sure assertions are tracked, `t.assert` must be used instead of `assert` directly.\n         *\n         * ```js\n         * test('top level test', (t) => {\n         *   t.plan(2);\n         *   t.assert.ok('some relevant assertion here');\n         *   t.test('subtest', () => {});\n         * });\n         * ```\n         *\n         * When working with asynchronous code, the `plan` function can be used to ensure that the\n         * correct number of assertions are run:\n         *\n         * ```js\n         * test('planning with streams', (t, done) => {\n         *   function* generate() {\n         *     yield 'a';\n         *     yield 'b';\n         *     yield 'c';\n         *   }\n         *   const expected = ['a', 'b', 'c'];\n         *   t.plan(expected.length);\n         *   const stream = Readable.from(generate());\n         *   stream.on('data', (chunk) => {\n         *     t.assert.strictEqual(chunk, expected.shift());\n         *   });\n         *\n         *   stream.on('end', () => {\n         *     done();\n         *   });\n         * });\n         * ```\n         *\n         * When using the `wait` option, you can control how long the test will wait for the expected assertions.\n         * For example, setting a maximum wait time ensures that the test will wait for asynchronous assertions\n         * to complete within the specified timeframe:\n         *\n         * ```js\n         * test('plan with wait: 2000 waits for async assertions', (t) => {\n         *   t.plan(1, { wait: 2000 }); // Waits for up to 2 seconds for the assertion to complete.\n         *\n         *   const asyncActivity = () => {\n         *     setTimeout(() => {\n         *          *       t.assert.ok(true, 'Async assertion completed within the wait time');\n         *     }, 1000); // Completes after 1 second, within the 2-second wait time.\n         *   };\n         *\n         *   asyncActivity(); // The test will pass because the assertion is completed in time.\n         * });\n         * ```\n         *\n         * Note: If a `wait` timeout is specified, it begins counting down only after the test function finishes executing.\n         * @since v22.2.0\n         */\n        plan(count: number, options?: TestContextPlanOptions): void;\n        /**\n         * If `shouldRunOnlyTests` is truthy, the test context will only run tests that\n         * have the `only` option set. Otherwise, all tests are run. If Node.js was not\n         * started with the `--test-only` command-line option, this function is a\n         * no-op.\n         *\n         * ```js\n         * test('top level test', (t) => {\n         *   // The test context can be set to run subtests with the 'only' option.\n         *   t.runOnly(true);\n         *   return Promise.all([\n         *     t.test('this subtest is now skipped'),\n         *     t.test('this subtest is run', { only: true }),\n         *   ]);\n         * });\n         * ```\n         * @since v18.0.0, v16.17.0\n         * @param shouldRunOnlyTests Whether or not to run `only` tests.\n         */\n        runOnly(shouldRunOnlyTests: boolean): void;\n        /**\n         * ```js\n         * test('top level test', async (t) => {\n         *   await fetch('some/uri', { signal: t.signal });\n         * });\n         * ```\n         * @since v18.7.0, v16.17.0\n         */\n        readonly signal: AbortSignal;\n        /**\n         * This function causes the test's output to indicate the test as skipped. If `message` is provided, it is included in the output. Calling `skip()` does\n         * not terminate execution of the test function. This function does not return a\n         * value.\n         *\n         * ```js\n         * test('top level test', (t) => {\n         *   // Make sure to return here as well if the test contains additional logic.\n         *   t.skip('this is skipped');\n         * });\n         * ```\n         * @since v18.0.0, v16.17.0\n         * @param message Optional skip message.\n         */\n        skip(message?: string): void;\n        /**\n         * This function adds a `TODO` directive to the test's output. If `message` is\n         * provided, it is included in the output. Calling `todo()` does not terminate\n         * execution of the test function. This function does not return a value.\n         *\n         * ```js\n         * test('top level test', (t) => {\n         *   // This test is marked as `TODO`\n         *   t.todo('this is a todo');\n         * });\n         * ```\n         * @since v18.0.0, v16.17.0\n         * @param message Optional `TODO` message.\n         */\n        todo(message?: string): void;\n        /**\n         * This function is used to create subtests under the current test. This function behaves in\n         * the same fashion as the top level {@link test} function.\n         * @since v18.0.0\n         * @param name The name of the test, which is displayed when reporting test results.\n         * Defaults to the `name` property of `fn`, or `'<anonymous>'` if `fn` does not have a name.\n         * @param options Configuration options for the test.\n         * @param fn The function under test. This first argument to this function is a {@link TestContext} object.\n         * If the test uses callbacks, the callback function is passed as the second argument.\n         * @returns A {@link Promise} resolved with `undefined` once the test completes.\n         */\n        test: typeof test;\n        /**\n         * This method polls a `condition` function until that function either returns\n         * successfully or the operation times out.\n         * @since v22.14.0\n         * @param condition An assertion function that is invoked\n         * periodically until it completes successfully or the defined polling timeout\n         * elapses. Successful completion is defined as not throwing or rejecting. This\n         * function does not accept any arguments, and is allowed to return any value.\n         * @param options An optional configuration object for the polling operation.\n         * @returns Fulfilled with the value returned by `condition`.\n         */\n        waitFor<T>(condition: () => T, options?: TestContextWaitForOptions): Promise<Awaited<T>>;\n        /**\n         * Each test provides its own MockTracker instance.\n         */\n        readonly mock: MockTracker;\n    }\n    interface TestContextAssert extends\n        Pick<\n            typeof import(\"assert\"),\n            | \"deepEqual\"\n            | \"deepStrictEqual\"\n            | \"doesNotMatch\"\n            | \"doesNotReject\"\n            | \"doesNotThrow\"\n            | \"equal\"\n            | \"fail\"\n            | \"ifError\"\n            | \"match\"\n            | \"notDeepEqual\"\n            | \"notDeepStrictEqual\"\n            | \"notEqual\"\n            | \"notStrictEqual\"\n            | \"ok\"\n            | \"partialDeepStrictEqual\"\n            | \"rejects\"\n            | \"strictEqual\"\n            | \"throws\"\n        >\n    {\n        /**\n         * This function serializes `value` and writes it to the file specified by `path`.\n         *\n         * ```js\n         * test('snapshot test with default serialization', (t) => {\n         *   t.assert.fileSnapshot({ value1: 1, value2: 2 }, './snapshots/snapshot.json');\n         * });\n         * ```\n         *\n         * This function differs from `context.assert.snapshot()` in the following ways:\n         *\n         * * The snapshot file path is explicitly provided by the user.\n         * * Each snapshot file is limited to a single snapshot value.\n         * * No additional escaping is performed by the test runner.\n         *\n         * These differences allow snapshot files to better support features such as syntax\n         * highlighting.\n         * @since v22.14.0\n         * @param value A value to serialize to a string. If Node.js was started with\n         * the [`--test-update-snapshots`](https://nodejs.org/docs/latest-v22.x/api/cli.html#--test-update-snapshots)\n         * flag, the serialized value is written to\n         * `path`. Otherwise, the serialized value is compared to the contents of the\n         * existing snapshot file.\n         * @param path The file where the serialized `value` is written.\n         * @param options Optional configuration options.\n         */\n        fileSnapshot(value: any, path: string, options?: AssertSnapshotOptions): void;\n        /**\n         * This function implements assertions for snapshot testing.\n         * ```js\n         * test('snapshot test with default serialization', (t) => {\n         *   t.assert.snapshot({ value1: 1, value2: 2 });\n         * });\n         *\n         * test('snapshot test with custom serialization', (t) => {\n         *   t.assert.snapshot({ value3: 3, value4: 4 }, {\n         *     serializers: [(value) => JSON.stringify(value)]\n         *   });\n         * });\n         * ```\n         * @since v22.3.0\n         * @param value A value to serialize to a string. If Node.js was started with\n         * the [`--test-update-snapshots`](https://nodejs.org/docs/latest-v22.x/api/cli.html#--test-update-snapshots)\n         * flag, the serialized value is written to\n         * the snapshot file. Otherwise, the serialized value is compared to the\n         * corresponding value in the existing snapshot file.\n         */\n        snapshot(value: any, options?: AssertSnapshotOptions): void;\n        /**\n         * A custom assertion function registered with `assert.register()`.\n         */\n        [name: string]: (...args: any[]) => void;\n    }\n    interface AssertSnapshotOptions {\n        /**\n         * An array of synchronous functions used to serialize `value` into a string.\n         * `value` is passed as the only argument to the first serializer function.\n         * The return value of each serializer is passed as input to the next serializer.\n         * Once all serializers have run, the resulting value is coerced to a string.\n         *\n         * If no serializers are provided, the test runner's default serializers are used.\n         */\n        serializers?: ReadonlyArray<(value: any) => any> | undefined;\n    }\n    interface TestContextPlanOptions {\n        /**\n         * The wait time for the plan:\n         * * If `true`, the plan waits indefinitely for all assertions and subtests to run.\n         * * If `false`, the plan performs an immediate check after the test function completes,\n         * without waiting for any pending assertions or subtests.\n         * Any assertions or subtests that complete after this check will not be counted towards the plan.\n         * * If a number, it specifies the maximum wait time in milliseconds\n         * before timing out while waiting for expected assertions and subtests to be matched.\n         * If the timeout is reached, the test will fail.\n         * @default false\n         */\n        wait?: boolean | number | undefined;\n    }\n    interface TestContextWaitForOptions {\n        /**\n         * The number of milliseconds to wait after an unsuccessful\n         * invocation of `condition` before trying again.\n         * @default 50\n         */\n        interval?: number | undefined;\n        /**\n         * The poll timeout in milliseconds. If `condition` has not\n         * succeeded by the time this elapses, an error occurs.\n         * @default 1000\n         */\n        timeout?: number | undefined;\n    }\n\n    /**\n     * An instance of `SuiteContext` is passed to each suite function in order to\n     * interact with the test runner. However, the `SuiteContext` constructor is not\n     * exposed as part of the API.\n     * @since v18.7.0, v16.17.0\n     */\n    class SuiteContext {\n        /**\n         * The absolute path of the test file that created the current suite. If a test file imports\n         * additional modules that generate suites, the imported suites will return the path of the root test file.\n         * @since v22.6.0\n         */\n        readonly filePath: string | undefined;\n        /**\n         * The name of the suite.\n         * @since v18.8.0, v16.18.0\n         */\n        readonly name: string;\n        /**\n         * Can be used to abort test subtasks when the test has been aborted.\n         * @since v18.7.0, v16.17.0\n         */\n        readonly signal: AbortSignal;\n    }\n    interface TestOptions {\n        /**\n         * If a number is provided, then that many tests would run in parallel.\n         * If truthy, it would run (number of cpu cores - 1) tests in parallel.\n         * For subtests, it will be `Infinity` tests in parallel.\n         * If falsy, it would only run one test at a time.\n         * If unspecified, subtests inherit this value from their parent.\n         * @default false\n         */\n        concurrency?: number | boolean | undefined;\n        /**\n         * If truthy, and the test context is configured to run `only` tests, then this test will be\n         * run. Otherwise, the test is skipped.\n         * @default false\n         */\n        only?: boolean | undefined;\n        /**\n         * Allows aborting an in-progress test.\n         * @since v18.8.0\n         */\n        signal?: AbortSignal | undefined;\n        /**\n         * If truthy, the test is skipped. If a string is provided, that string is displayed in the\n         * test results as the reason for skipping the test.\n         * @default false\n         */\n        skip?: boolean | string | undefined;\n        /**\n         * A number of milliseconds the test will fail after. If unspecified, subtests inherit this\n         * value from their parent.\n         * @default Infinity\n         * @since v18.7.0\n         */\n        timeout?: number | undefined;\n        /**\n         * If truthy, the test marked as `TODO`. If a string is provided, that string is displayed in\n         * the test results as the reason why the test is `TODO`.\n         * @default false\n         */\n        todo?: boolean | string | undefined;\n        /**\n         * The number of assertions and subtests expected to be run in the test.\n         * If the number of assertions run in the test does not match the number\n         * specified in the plan, the test will fail.\n         * @default undefined\n         * @since v22.2.0\n         */\n        plan?: number | undefined;\n    }\n    /**\n     * This function creates a hook that runs before executing a suite.\n     *\n     * ```js\n     * describe('tests', async () => {\n     *   before(() => console.log('about to run some test'));\n     *   it('is a subtest', () => {\n     *     assert.ok('some relevant assertion here');\n     *   });\n     * });\n     * ```\n     * @since v18.8.0, v16.18.0\n     * @param fn The hook function. If the hook uses callbacks, the callback function is passed as the second argument.\n     * @param options Configuration options for the hook.\n     */\n    function before(fn?: HookFn, options?: HookOptions): void;\n    /**\n     * This function creates a hook that runs after executing a suite.\n     *\n     * ```js\n     * describe('tests', async () => {\n     *   after(() => console.log('finished running tests'));\n     *   it('is a subtest', () => {\n     *     assert.ok('some relevant assertion here');\n     *   });\n     * });\n     * ```\n     * @since v18.8.0, v16.18.0\n     * @param fn The hook function. If the hook uses callbacks, the callback function is passed as the second argument.\n     * @param options Configuration options for the hook.\n     */\n    function after(fn?: HookFn, options?: HookOptions): void;\n    /**\n     * This function creates a hook that runs before each test in the current suite.\n     *\n     * ```js\n     * describe('tests', async () => {\n     *   beforeEach(() => console.log('about to run a test'));\n     *   it('is a subtest', () => {\n     *     assert.ok('some relevant assertion here');\n     *   });\n     * });\n     * ```\n     * @since v18.8.0, v16.18.0\n     * @param fn The hook function. If the hook uses callbacks, the callback function is passed as the second argument.\n     * @param options Configuration options for the hook.\n     */\n    function beforeEach(fn?: HookFn, options?: HookOptions): void;\n    /**\n     * This function creates a hook that runs after each test in the current suite.\n     * The `afterEach()` hook is run even if the test fails.\n     *\n     * ```js\n     * describe('tests', async () => {\n     *   afterEach(() => console.log('finished running a test'));\n     *   it('is a subtest', () => {\n     *     assert.ok('some relevant assertion here');\n     *   });\n     * });\n     * ```\n     * @since v18.8.0, v16.18.0\n     * @param fn The hook function. If the hook uses callbacks, the callback function is passed as the second argument.\n     * @param options Configuration options for the hook.\n     */\n    function afterEach(fn?: HookFn, options?: HookOptions): void;\n    /**\n     * The hook function. The first argument is the context in which the hook is called.\n     * If the hook uses callbacks, the callback function is passed as the second argument.\n     */\n    type HookFn = (c: TestContext | SuiteContext, done: (result?: any) => void) => any;\n    /**\n     * The hook function. The first argument is a `TestContext` object.\n     * If the hook uses callbacks, the callback function is passed as the second argument.\n     */\n    type TestContextHookFn = (t: TestContext, done: (result?: any) => void) => any;\n    /**\n     * Configuration options for hooks.\n     * @since v18.8.0\n     */\n    interface HookOptions {\n        /**\n         * Allows aborting an in-progress hook.\n         */\n        signal?: AbortSignal | undefined;\n        /**\n         * A number of milliseconds the hook will fail after. If unspecified, subtests inherit this\n         * value from their parent.\n         * @default Infinity\n         */\n        timeout?: number | undefined;\n    }\n    interface MockFunctionOptions {\n        /**\n         * The number of times that the mock will use the behavior of `implementation`.\n         * Once the mock function has been called `times` times,\n         * it will automatically restore the behavior of `original`.\n         * This value must be an integer greater than zero.\n         * @default Infinity\n         */\n        times?: number | undefined;\n    }\n    interface MockMethodOptions extends MockFunctionOptions {\n        /**\n         * If `true`, `object[methodName]` is treated as a getter.\n         * This option cannot be used with the `setter` option.\n         */\n        getter?: boolean | undefined;\n        /**\n         * If `true`, `object[methodName]` is treated as a setter.\n         * This option cannot be used with the `getter` option.\n         */\n        setter?: boolean | undefined;\n    }\n    type Mock<F extends Function> = F & {\n        mock: MockFunctionContext<F>;\n    };\n    type NoOpFunction = (...args: any[]) => undefined;\n    type FunctionPropertyNames<T> = {\n        [K in keyof T]: T[K] extends Function ? K : never;\n    }[keyof T];\n    interface MockModuleOptions {\n        /**\n         * If false, each call to `require()` or `import()` generates a new mock module.\n         * If true, subsequent calls will return the same module mock, and the mock module is inserted into the CommonJS cache.\n         * @default false\n         */\n        cache?: boolean | undefined;\n        /**\n         * The value to use as the mocked module's default export.\n         *\n         * If this value is not provided, ESM mocks do not include a default export.\n         * If the mock is a CommonJS or builtin module, this setting is used as the value of `module.exports`.\n         * If this value is not provided, CJS and builtin mocks use an empty object as the value of `module.exports`.\n         */\n        defaultExport?: any;\n        /**\n         * An object whose keys and values are used to create the named exports of the mock module.\n         *\n         * If the mock is a CommonJS or builtin module, these values are copied onto `module.exports`.\n         * Therefore, if a mock is created with both named exports and a non-object default export,\n         * the mock will throw an exception when used as a CJS or builtin module.\n         */\n        namedExports?: object | undefined;\n    }\n    /**\n     * The `MockTracker` class is used to manage mocking functionality. The test runner\n     * module provides a top level `mock` export which is a `MockTracker` instance.\n     * Each test also provides its own `MockTracker` instance via the test context's `mock` property.\n     * @since v19.1.0, v18.13.0\n     */\n    class MockTracker {\n        /**\n         * This function is used to create a mock function.\n         *\n         * The following example creates a mock function that increments a counter by one\n         * on each invocation. The `times` option is used to modify the mock behavior such\n         * that the first two invocations add two to the counter instead of one.\n         *\n         * ```js\n         * test('mocks a counting function', (t) => {\n         *   let cnt = 0;\n         *\n         *   function addOne() {\n         *     cnt++;\n         *     return cnt;\n         *   }\n         *\n         *   function addTwo() {\n         *     cnt += 2;\n         *     return cnt;\n         *   }\n         *\n         *   const fn = t.mock.fn(addOne, addTwo, { times: 2 });\n         *\n         *   assert.strictEqual(fn(), 2);\n         *   assert.strictEqual(fn(), 4);\n         *   assert.strictEqual(fn(), 5);\n         *   assert.strictEqual(fn(), 6);\n         * });\n         * ```\n         * @since v19.1.0, v18.13.0\n         * @param original An optional function to create a mock on.\n         * @param implementation An optional function used as the mock implementation for `original`. This is useful for creating mocks that exhibit one behavior for a specified number of calls and\n         * then restore the behavior of `original`.\n         * @param options Optional configuration options for the mock function.\n         * @return The mocked function. The mocked function contains a special `mock` property, which is an instance of {@link MockFunctionContext}, and can be used for inspecting and changing the\n         * behavior of the mocked function.\n         */\n        fn<F extends Function = NoOpFunction>(original?: F, options?: MockFunctionOptions): Mock<F>;\n        fn<F extends Function = NoOpFunction, Implementation extends Function = F>(\n            original?: F,\n            implementation?: Implementation,\n            options?: MockFunctionOptions,\n        ): Mock<F | Implementation>;\n        /**\n         * This function is used to create a mock on an existing object method. The\n         * following example demonstrates how a mock is created on an existing object\n         * method.\n         *\n         * ```js\n         * test('spies on an object method', (t) => {\n         *   const number = {\n         *     value: 5,\n         *     subtract(a) {\n         *       return this.value - a;\n         *     },\n         *   };\n         *\n         *   t.mock.method(number, 'subtract');\n         *   assert.strictEqual(number.subtract.mock.calls.length, 0);\n         *   assert.strictEqual(number.subtract(3), 2);\n         *   assert.strictEqual(number.subtract.mock.calls.length, 1);\n         *\n         *   const call = number.subtract.mock.calls[0];\n         *\n         *   assert.deepStrictEqual(call.arguments, [3]);\n         *   assert.strictEqual(call.result, 2);\n         *   assert.strictEqual(call.error, undefined);\n         *   assert.strictEqual(call.target, undefined);\n         *   assert.strictEqual(call.this, number);\n         * });\n         * ```\n         * @since v19.1.0, v18.13.0\n         * @param object The object whose method is being mocked.\n         * @param methodName The identifier of the method on `object` to mock. If `object[methodName]` is not a function, an error is thrown.\n         * @param implementation An optional function used as the mock implementation for `object[methodName]`.\n         * @param options Optional configuration options for the mock method.\n         * @return The mocked method. The mocked method contains a special `mock` property, which is an instance of {@link MockFunctionContext}, and can be used for inspecting and changing the\n         * behavior of the mocked method.\n         */\n        method<\n            MockedObject extends object,\n            MethodName extends FunctionPropertyNames<MockedObject>,\n        >(\n            object: MockedObject,\n            methodName: MethodName,\n            options?: MockFunctionOptions,\n        ): MockedObject[MethodName] extends Function ? Mock<MockedObject[MethodName]>\n            : never;\n        method<\n            MockedObject extends object,\n            MethodName extends FunctionPropertyNames<MockedObject>,\n            Implementation extends Function,\n        >(\n            object: MockedObject,\n            methodName: MethodName,\n            implementation: Implementation,\n            options?: MockFunctionOptions,\n        ): MockedObject[MethodName] extends Function ? Mock<MockedObject[MethodName] | Implementation>\n            : never;\n        method<MockedObject extends object>(\n            object: MockedObject,\n            methodName: keyof MockedObject,\n            options: MockMethodOptions,\n        ): Mock<Function>;\n        method<MockedObject extends object>(\n            object: MockedObject,\n            methodName: keyof MockedObject,\n            implementation: Function,\n            options: MockMethodOptions,\n        ): Mock<Function>;\n\n        /**\n         * This function is syntax sugar for `MockTracker.method` with `options.getter` set to `true`.\n         * @since v19.3.0, v18.13.0\n         */\n        getter<\n            MockedObject extends object,\n            MethodName extends keyof MockedObject,\n        >(\n            object: MockedObject,\n            methodName: MethodName,\n            options?: MockFunctionOptions,\n        ): Mock<() => MockedObject[MethodName]>;\n        getter<\n            MockedObject extends object,\n            MethodName extends keyof MockedObject,\n            Implementation extends Function,\n        >(\n            object: MockedObject,\n            methodName: MethodName,\n            implementation?: Implementation,\n            options?: MockFunctionOptions,\n        ): Mock<(() => MockedObject[MethodName]) | Implementation>;\n        /**\n         * This function is syntax sugar for `MockTracker.method` with `options.setter` set to `true`.\n         * @since v19.3.0, v18.13.0\n         */\n        setter<\n            MockedObject extends object,\n            MethodName extends keyof MockedObject,\n        >(\n            object: MockedObject,\n            methodName: MethodName,\n            options?: MockFunctionOptions,\n        ): Mock<(value: MockedObject[MethodName]) => void>;\n        setter<\n            MockedObject extends object,\n            MethodName extends keyof MockedObject,\n            Implementation extends Function,\n        >(\n            object: MockedObject,\n            methodName: MethodName,\n            implementation?: Implementation,\n            options?: MockFunctionOptions,\n        ): Mock<((value: MockedObject[MethodName]) => void) | Implementation>;\n\n        /**\n         * This function is used to mock the exports of ECMAScript modules, CommonJS modules, and Node.js builtin modules.\n         * Any references to the original module prior to mocking are not impacted.\n         *\n         * Only available through the [--experimental-test-module-mocks](https://nodejs.org/api/cli.html#--experimental-test-module-mocks) flag.\n         * @since v22.3.0\n         * @experimental\n         * @param specifier A string identifying the module to mock.\n         * @param options Optional configuration options for the mock module.\n         */\n        module(specifier: string, options?: MockModuleOptions): MockModuleContext;\n\n        /**\n         * This function restores the default behavior of all mocks that were previously\n         * created by this `MockTracker` and disassociates the mocks from the `MockTracker` instance. Once disassociated, the mocks can still be used, but the `MockTracker` instance can no longer be\n         * used to reset their behavior or\n         * otherwise interact with them.\n         *\n         * After each test completes, this function is called on the test context's `MockTracker`. If the global `MockTracker` is used extensively, calling this\n         * function manually is recommended.\n         * @since v19.1.0, v18.13.0\n         */\n        reset(): void;\n        /**\n         * This function restores the default behavior of all mocks that were previously\n         * created by this `MockTracker`. Unlike `mock.reset()`, `mock.restoreAll()` does\n         * not disassociate the mocks from the `MockTracker` instance.\n         * @since v19.1.0, v18.13.0\n         */\n        restoreAll(): void;\n\n        timers: MockTimers;\n    }\n    const mock: MockTracker;\n    interface MockFunctionCall<\n        F extends Function,\n        ReturnType = F extends (...args: any) => infer T ? T\n            : F extends abstract new(...args: any) => infer T ? T\n            : unknown,\n        Args = F extends (...args: infer Y) => any ? Y\n            : F extends abstract new(...args: infer Y) => any ? Y\n            : unknown[],\n    > {\n        /**\n         * An array of the arguments passed to the mock function.\n         */\n        arguments: Args;\n        /**\n         * If the mocked function threw then this property contains the thrown value.\n         */\n        error: unknown | undefined;\n        /**\n         * The value returned by the mocked function.\n         *\n         * If the mocked function threw, it will be `undefined`.\n         */\n        result: ReturnType | undefined;\n        /**\n         * An `Error` object whose stack can be used to determine the callsite of the mocked function invocation.\n         */\n        stack: Error;\n        /**\n         * If the mocked function is a constructor, this field contains the class being constructed.\n         * Otherwise this will be `undefined`.\n         */\n        target: F extends abstract new(...args: any) => any ? F : undefined;\n        /**\n         * The mocked function's `this` value.\n         */\n        this: unknown;\n    }\n    /**\n     * The `MockFunctionContext` class is used to inspect or manipulate the behavior of\n     * mocks created via the `MockTracker` APIs.\n     * @since v19.1.0, v18.13.0\n     */\n    class MockFunctionContext<F extends Function> {\n        /**\n         * A getter that returns a copy of the internal array used to track calls to the\n         * mock. Each entry in the array is an object with the following properties.\n         * @since v19.1.0, v18.13.0\n         */\n        readonly calls: Array<MockFunctionCall<F>>;\n        /**\n         * This function returns the number of times that this mock has been invoked. This\n         * function is more efficient than checking `ctx.calls.length` because `ctx.calls` is a getter that creates a copy of the internal call tracking array.\n         * @since v19.1.0, v18.13.0\n         * @return The number of times that this mock has been invoked.\n         */\n        callCount(): number;\n        /**\n         * This function is used to change the behavior of an existing mock.\n         *\n         * The following example creates a mock function using `t.mock.fn()`, calls the\n         * mock function, and then changes the mock implementation to a different function.\n         *\n         * ```js\n         * test('changes a mock behavior', (t) => {\n         *   let cnt = 0;\n         *\n         *   function addOne() {\n         *     cnt++;\n         *     return cnt;\n         *   }\n         *\n         *   function addTwo() {\n         *     cnt += 2;\n         *     return cnt;\n         *   }\n         *\n         *   const fn = t.mock.fn(addOne);\n         *\n         *   assert.strictEqual(fn(), 1);\n         *   fn.mock.mockImplementation(addTwo);\n         *   assert.strictEqual(fn(), 3);\n         *   assert.strictEqual(fn(), 5);\n         * });\n         * ```\n         * @since v19.1.0, v18.13.0\n         * @param implementation The function to be used as the mock's new implementation.\n         */\n        mockImplementation(implementation: F): void;\n        /**\n         * This function is used to change the behavior of an existing mock for a single\n         * invocation. Once invocation `onCall` has occurred, the mock will revert to\n         * whatever behavior it would have used had `mockImplementationOnce()` not been\n         * called.\n         *\n         * The following example creates a mock function using `t.mock.fn()`, calls the\n         * mock function, changes the mock implementation to a different function for the\n         * next invocation, and then resumes its previous behavior.\n         *\n         * ```js\n         * test('changes a mock behavior once', (t) => {\n         *   let cnt = 0;\n         *\n         *   function addOne() {\n         *     cnt++;\n         *     return cnt;\n         *   }\n         *\n         *   function addTwo() {\n         *     cnt += 2;\n         *     return cnt;\n         *   }\n         *\n         *   const fn = t.mock.fn(addOne);\n         *\n         *   assert.strictEqual(fn(), 1);\n         *   fn.mock.mockImplementationOnce(addTwo);\n         *   assert.strictEqual(fn(), 3);\n         *   assert.strictEqual(fn(), 4);\n         * });\n         * ```\n         * @since v19.1.0, v18.13.0\n         * @param implementation The function to be used as the mock's implementation for the invocation number specified by `onCall`.\n         * @param onCall The invocation number that will use `implementation`. If the specified invocation has already occurred then an exception is thrown.\n         */\n        mockImplementationOnce(implementation: F, onCall?: number): void;\n        /**\n         * Resets the call history of the mock function.\n         * @since v19.3.0, v18.13.0\n         */\n        resetCalls(): void;\n        /**\n         * Resets the implementation of the mock function to its original behavior. The\n         * mock can still be used after calling this function.\n         * @since v19.1.0, v18.13.0\n         */\n        restore(): void;\n    }\n    /**\n     * @since v22.3.0\n     * @experimental\n     */\n    class MockModuleContext {\n        /**\n         * Resets the implementation of the mock module.\n         * @since v22.3.0\n         */\n        restore(): void;\n    }\n\n    type Timer = \"setInterval\" | \"setTimeout\" | \"setImmediate\" | \"Date\";\n    interface MockTimersOptions {\n        apis: Timer[];\n        now?: number | Date | undefined;\n    }\n    /**\n     * Mocking timers is a technique commonly used in software testing to simulate and\n     * control the behavior of timers, such as `setInterval` and `setTimeout`,\n     * without actually waiting for the specified time intervals.\n     *\n     * The MockTimers API also allows for mocking of the `Date` constructor and\n     * `setImmediate`/`clearImmediate` functions.\n     *\n     * The `MockTracker` provides a top-level `timers` export\n     * which is a `MockTimers` instance.\n     * @since v20.4.0\n     * @experimental\n     */\n    class MockTimers {\n        /**\n         * Enables timer mocking for the specified timers.\n         *\n         * **Note:** When you enable mocking for a specific timer, its associated\n         * clear function will also be implicitly mocked.\n         *\n         * **Note:** Mocking `Date` will affect the behavior of the mocked timers\n         * as they use the same internal clock.\n         *\n         * Example usage without setting initial time:\n         *\n         * ```js\n         * import { mock } from 'node:test';\n         * mock.timers.enable({ apis: ['setInterval', 'Date'], now: 1234 });\n         * ```\n         *\n         * The above example enables mocking for the `Date` constructor, `setInterval` timer and\n         * implicitly mocks the `clearInterval` function. Only the `Date` constructor from `globalThis`,\n         * `setInterval` and `clearInterval` functions from `node:timers`, `node:timers/promises`, and `globalThis` will be mocked.\n         *\n         * Example usage with initial time set\n         *\n         * ```js\n         * import { mock } from 'node:test';\n         * mock.timers.enable({ apis: ['Date'], now: 1000 });\n         * ```\n         *\n         * Example usage with initial Date object as time set\n         *\n         * ```js\n         * import { mock } from 'node:test';\n         * mock.timers.enable({ apis: ['Date'], now: new Date() });\n         * ```\n         *\n         * Alternatively, if you call `mock.timers.enable()` without any parameters:\n         *\n         * All timers (`'setInterval'`, `'clearInterval'`, `'Date'`, `'setImmediate'`, `'clearImmediate'`, `'setTimeout'`, and `'clearTimeout'`)\n         * will be mocked.\n         *\n         * The `setInterval`, `clearInterval`, `setTimeout`, and `clearTimeout` functions from `node:timers`, `node:timers/promises`,\n         * and `globalThis` will be mocked.\n         * The `Date` constructor from `globalThis` will be mocked.\n         *\n         * If there is no initial epoch set, the initial date will be based on 0 in the Unix epoch. This is `January 1st, 1970, 00:00:00 UTC`. You can\n         * set an initial date by passing a now property to the `.enable()` method. This value will be used as the initial date for the mocked Date\n         * object. It can either be a positive integer, or another Date object.\n         * @since v20.4.0\n         */\n        enable(options?: MockTimersOptions): void;\n        /**\n         * You can use the `.setTime()` method to manually move the mocked date to another time. This method only accepts a positive integer.\n         * Note: This method will execute any mocked timers that are in the past from the new time.\n         * In the below example we are setting a new time for the mocked date.\n         * ```js\n         * import assert from 'node:assert';\n         * import { test } from 'node:test';\n         * test('sets the time of a date object', (context) => {\n         *   // Optionally choose what to mock\n         *   context.mock.timers.enable({ apis: ['Date'], now: 100 });\n         *   assert.strictEqual(Date.now(), 100);\n         *   // Advance in time will also advance the date\n         *   context.mock.timers.setTime(1000);\n         *   context.mock.timers.tick(200);\n         *   assert.strictEqual(Date.now(), 1200);\n         * });\n         * ```\n         */\n        setTime(time: number): void;\n        /**\n         * This function restores the default behavior of all mocks that were previously\n         * created by this `MockTimers` instance and disassociates the mocks\n         * from the `MockTracker` instance.\n         *\n         * **Note:** After each test completes, this function is called on\n         * the test context's `MockTracker`.\n         *\n         * ```js\n         * import { mock } from 'node:test';\n         * mock.timers.reset();\n         * ```\n         * @since v20.4.0\n         */\n        reset(): void;\n        /**\n         * Advances time for all mocked timers.\n         *\n         * **Note:** This diverges from how `setTimeout` in Node.js behaves and accepts\n         * only positive numbers. In Node.js, `setTimeout` with negative numbers is\n         * only supported for web compatibility reasons.\n         *\n         * The following example mocks a `setTimeout` function and\n         * by using `.tick` advances in\n         * time triggering all pending timers.\n         *\n         * ```js\n         * import assert from 'node:assert';\n         * import { test } from 'node:test';\n         *\n         * test('mocks setTimeout to be executed synchronously without having to actually wait for it', (context) => {\n         *   const fn = context.mock.fn();\n         *\n         *   context.mock.timers.enable({ apis: ['setTimeout'] });\n         *\n         *   setTimeout(fn, 9999);\n         *\n         *   assert.strictEqual(fn.mock.callCount(), 0);\n         *\n         *   // Advance in time\n         *   context.mock.timers.tick(9999);\n         *\n         *   assert.strictEqual(fn.mock.callCount(), 1);\n         * });\n         * ```\n         *\n         * Alternativelly, the `.tick` function can be called many times\n         *\n         * ```js\n         * import assert from 'node:assert';\n         * import { test } from 'node:test';\n         *\n         * test('mocks setTimeout to be executed synchronously without having to actually wait for it', (context) => {\n         *   const fn = context.mock.fn();\n         *   context.mock.timers.enable({ apis: ['setTimeout'] });\n         *   const nineSecs = 9000;\n         *   setTimeout(fn, nineSecs);\n         *\n         *   const twoSeconds = 3000;\n         *   context.mock.timers.tick(twoSeconds);\n         *   context.mock.timers.tick(twoSeconds);\n         *   context.mock.timers.tick(twoSeconds);\n         *\n         *   assert.strictEqual(fn.mock.callCount(), 1);\n         * });\n         * ```\n         *\n         * Advancing time using `.tick` will also advance the time for any `Date` object\n         * created after the mock was enabled (if `Date` was also set to be mocked).\n         *\n         * ```js\n         * import assert from 'node:assert';\n         * import { test } from 'node:test';\n         *\n         * test('mocks setTimeout to be executed synchronously without having to actually wait for it', (context) => {\n         *   const fn = context.mock.fn();\n         *\n         *   context.mock.timers.enable({ apis: ['setTimeout', 'Date'] });\n         *   setTimeout(fn, 9999);\n         *\n         *   assert.strictEqual(fn.mock.callCount(), 0);\n         *   assert.strictEqual(Date.now(), 0);\n         *\n         *   // Advance in time\n         *   context.mock.timers.tick(9999);\n         *   assert.strictEqual(fn.mock.callCount(), 1);\n         *   assert.strictEqual(Date.now(), 9999);\n         * });\n         * ```\n         * @since v20.4.0\n         */\n        tick(milliseconds: number): void;\n        /**\n         * Triggers all pending mocked timers immediately. If the `Date` object is also\n         * mocked, it will also advance the `Date` object to the furthest timer's time.\n         *\n         * The example below triggers all pending timers immediately,\n         * causing them to execute without any delay.\n         *\n         * ```js\n         * import assert from 'node:assert';\n         * import { test } from 'node:test';\n         *\n         * test('runAll functions following the given order', (context) => {\n         *   context.mock.timers.enable({ apis: ['setTimeout', 'Date'] });\n         *   const results = [];\n         *   setTimeout(() => results.push(1), 9999);\n         *\n         *   // Notice that if both timers have the same timeout,\n         *   // the order of execution is guaranteed\n         *   setTimeout(() => results.push(3), 8888);\n         *   setTimeout(() => results.push(2), 8888);\n         *\n         *   assert.deepStrictEqual(results, []);\n         *\n         *   context.mock.timers.runAll();\n         *   assert.deepStrictEqual(results, [3, 2, 1]);\n         *   // The Date object is also advanced to the furthest timer's time\n         *   assert.strictEqual(Date.now(), 9999);\n         * });\n         * ```\n         *\n         * **Note:** The `runAll()` function is specifically designed for\n         * triggering timers in the context of timer mocking.\n         * It does not have any effect on real-time system\n         * clocks or actual timers outside of the mocking environment.\n         * @since v20.4.0\n         */\n        runAll(): void;\n        /**\n         * Calls {@link MockTimers.reset()}.\n         */\n        [Symbol.dispose](): void;\n    }\n    /**\n     * An object whose methods are used to configure available assertions on the\n     * `TestContext` objects in the current process. The methods from `node:assert`\n     * and snapshot testing functions are available by default.\n     *\n     * It is possible to apply the same configuration to all files by placing common\n     * configuration code in a module\n     * preloaded with `--require` or `--import`.\n     * @since v22.14.0\n     */\n    namespace assert {\n        /**\n         * Defines a new assertion function with the provided name and function. If an\n         * assertion already exists with the same name, it is overwritten.\n         * @since v22.14.0\n         */\n        function register(name: string, fn: (this: TestContext, ...args: any[]) => void): void;\n    }\n    /**\n     * @since v22.3.0\n     */\n    namespace snapshot {\n        /**\n         * This function is used to customize the default serialization mechanism used by the test runner.\n         *\n         * By default, the test runner performs serialization by calling `JSON.stringify(value, null, 2)` on the provided value.\n         * `JSON.stringify()` does have limitations regarding circular structures and supported data types.\n         * If a more robust serialization mechanism is required, this function should be used to specify a list of custom serializers.\n         *\n         * Serializers are called in order, with the output of the previous serializer passed as input to the next.\n         * The final result must be a string value.\n         * @since v22.3.0\n         * @param serializers An array of synchronous functions used as the default serializers for snapshot tests.\n         */\n        function setDefaultSnapshotSerializers(serializers: ReadonlyArray<(value: any) => any>): void;\n        /**\n         * This function is used to set a custom resolver for the location of the snapshot file used for snapshot testing.\n         * By default, the snapshot filename is the same as the entry point filename with `.snapshot` appended.\n         * @since v22.3.0\n         * @param fn A function used to compute the location of the snapshot file.\n         * The function receives the path of the test file as its only argument. If the\n         * test is not associated with a file (for example in the REPL), the input is\n         * undefined. `fn()` must return a string specifying the location of the snapshot file.\n         */\n        function setResolveSnapshotPath(fn: (path: string | undefined) => string): void;\n    }\n    export {\n        after,\n        afterEach,\n        assert,\n        before,\n        beforeEach,\n        describe,\n        it,\n        Mock,\n        mock,\n        only,\n        run,\n        skip,\n        snapshot,\n        suite,\n        SuiteContext,\n        test,\n        test as default,\n        TestContext,\n        todo,\n    };\n}\n\ninterface TestError extends Error {\n    cause: Error;\n}\ninterface TestLocationInfo {\n    /**\n     * The column number where the test is defined, or\n     * `undefined` if the test was run through the REPL.\n     */\n    column?: number;\n    /**\n     * The path of the test file, `undefined` if test was run through the REPL.\n     */\n    file?: string;\n    /**\n     * The line number where the test is defined, or `undefined` if the test was run through the REPL.\n     */\n    line?: number;\n}\ninterface DiagnosticData extends TestLocationInfo {\n    /**\n     * The diagnostic message.\n     */\n    message: string;\n    /**\n     * The nesting level of the test.\n     */\n    nesting: number;\n}\ninterface TestCoverage {\n    /**\n     * An object containing the coverage report.\n     */\n    summary: {\n        /**\n         * An array of coverage reports for individual files.\n         */\n        files: Array<{\n            /**\n             * The absolute path of the file.\n             */\n            path: string;\n            /**\n             * The total number of lines.\n             */\n            totalLineCount: number;\n            /**\n             * The total number of branches.\n             */\n            totalBranchCount: number;\n            /**\n             * The total number of functions.\n             */\n            totalFunctionCount: number;\n            /**\n             * The number of covered lines.\n             */\n            coveredLineCount: number;\n            /**\n             * The number of covered branches.\n             */\n            coveredBranchCount: number;\n            /**\n             * The number of covered functions.\n             */\n            coveredFunctionCount: number;\n            /**\n             * The percentage of lines covered.\n             */\n            coveredLinePercent: number;\n            /**\n             * The percentage of branches covered.\n             */\n            coveredBranchPercent: number;\n            /**\n             * The percentage of functions covered.\n             */\n            coveredFunctionPercent: number;\n            /**\n             * An array of functions representing function coverage.\n             */\n            functions: Array<{\n                /**\n                 * The name of the function.\n                 */\n                name: string;\n                /**\n                 * The line number where the function is defined.\n                 */\n                line: number;\n                /**\n                 * The number of times the function was called.\n                 */\n                count: number;\n            }>;\n            /**\n             * An array of branches representing branch coverage.\n             */\n            branches: Array<{\n                /**\n                 * The line number where the branch is defined.\n                 */\n                line: number;\n                /**\n                 * The number of times the branch was taken.\n                 */\n                count: number;\n            }>;\n            /**\n             * An array of lines representing line numbers and the number of times they were covered.\n             */\n            lines: Array<{\n                /**\n                 * The line number.\n                 */\n                line: number;\n                /**\n                 * The number of times the line was covered.\n                 */\n                count: number;\n            }>;\n        }>;\n        /**\n         * An object containing whether or not the coverage for\n         * each coverage type.\n         * @since v22.9.0\n         */\n        thresholds: {\n            /**\n             * The function coverage threshold.\n             */\n            function: number;\n            /**\n             * The branch coverage threshold.\n             */\n            branch: number;\n            /**\n             * The line coverage threshold.\n             */\n            line: number;\n        };\n        /**\n         * An object containing a summary of coverage for all files.\n         */\n        totals: {\n            /**\n             * The total number of lines.\n             */\n            totalLineCount: number;\n            /**\n             * The total number of branches.\n             */\n            totalBranchCount: number;\n            /**\n             * The total number of functions.\n             */\n            totalFunctionCount: number;\n            /**\n             * The number of covered lines.\n             */\n            coveredLineCount: number;\n            /**\n             * The number of covered branches.\n             */\n            coveredBranchCount: number;\n            /**\n             * The number of covered functions.\n             */\n            coveredFunctionCount: number;\n            /**\n             * The percentage of lines covered.\n             */\n            coveredLinePercent: number;\n            /**\n             * The percentage of branches covered.\n             */\n            coveredBranchPercent: number;\n            /**\n             * The percentage of functions covered.\n             */\n            coveredFunctionPercent: number;\n        };\n        /**\n         * The working directory when code coverage began. This\n         * is useful for displaying relative path names in case\n         * the tests changed the working directory of the Node.js process.\n         */\n        workingDirectory: string;\n    };\n    /**\n     * The nesting level of the test.\n     */\n    nesting: number;\n}\ninterface TestComplete extends TestLocationInfo {\n    /**\n     * Additional execution metadata.\n     */\n    details: {\n        /**\n         * Whether the test passed or not.\n         */\n        passed: boolean;\n        /**\n         * The duration of the test in milliseconds.\n         */\n        duration_ms: number;\n        /**\n         * An error wrapping the error thrown by the test if it did not pass.\n         */\n        error?: TestError;\n        /**\n         * The type of the test, used to denote whether this is a suite.\n         */\n        type?: \"suite\";\n    };\n    /**\n     * The test name.\n     */\n    name: string;\n    /**\n     * The nesting level of the test.\n     */\n    nesting: number;\n    /**\n     * The ordinal number of the test.\n     */\n    testNumber: number;\n    /**\n     * Present if `context.todo` is called.\n     */\n    todo?: string | boolean;\n    /**\n     * Present if `context.skip` is called.\n     */\n    skip?: string | boolean;\n}\ninterface TestDequeue extends TestLocationInfo {\n    /**\n     * The test name.\n     */\n    name: string;\n    /**\n     * The nesting level of the test.\n     */\n    nesting: number;\n    /**\n     * The test type. Either `'suite'` or `'test'`.\n     * @since v22.15.0\n     */\n    type: \"suite\" | \"test\";\n}\ninterface TestEnqueue extends TestLocationInfo {\n    /**\n     * The test name.\n     */\n    name: string;\n    /**\n     * The nesting level of the test.\n     */\n    nesting: number;\n    /**\n     * The test type. Either `'suite'` or `'test'`.\n     * @since v22.15.0\n     */\n    type: \"suite\" | \"test\";\n}\ninterface TestFail extends TestLocationInfo {\n    /**\n     * Additional execution metadata.\n     */\n    details: {\n        /**\n         * The duration of the test in milliseconds.\n         */\n        duration_ms: number;\n        /**\n         * An error wrapping the error thrown by the test.\n         */\n        error: TestError;\n        /**\n         * The type of the test, used to denote whether this is a suite.\n         * @since v20.0.0, v19.9.0, v18.17.0\n         */\n        type?: \"suite\";\n    };\n    /**\n     * The test name.\n     */\n    name: string;\n    /**\n     * The nesting level of the test.\n     */\n    nesting: number;\n    /**\n     * The ordinal number of the test.\n     */\n    testNumber: number;\n    /**\n     * Present if `context.todo` is called.\n     */\n    todo?: string | boolean;\n    /**\n     * Present if `context.skip` is called.\n     */\n    skip?: string | boolean;\n}\ninterface TestPass extends TestLocationInfo {\n    /**\n     * Additional execution metadata.\n     */\n    details: {\n        /**\n         * The duration of the test in milliseconds.\n         */\n        duration_ms: number;\n        /**\n         * The type of the test, used to denote whether this is a suite.\n         * @since 20.0.0, 19.9.0, 18.17.0\n         */\n        type?: \"suite\";\n    };\n    /**\n     * The test name.\n     */\n    name: string;\n    /**\n     * The nesting level of the test.\n     */\n    nesting: number;\n    /**\n     * The ordinal number of the test.\n     */\n    testNumber: number;\n    /**\n     * Present if `context.todo` is called.\n     */\n    todo?: string | boolean;\n    /**\n     * Present if `context.skip` is called.\n     */\n    skip?: string | boolean;\n}\ninterface TestPlan extends TestLocationInfo {\n    /**\n     * The nesting level of the test.\n     */\n    nesting: number;\n    /**\n     * The number of subtests that have ran.\n     */\n    count: number;\n}\ninterface TestStart extends TestLocationInfo {\n    /**\n     * The test name.\n     */\n    name: string;\n    /**\n     * The nesting level of the test.\n     */\n    nesting: number;\n}\ninterface TestStderr {\n    /**\n     * The path of the test file.\n     */\n    file: string;\n    /**\n     * The message written to `stderr`.\n     */\n    message: string;\n}\ninterface TestStdout {\n    /**\n     * The path of the test file.\n     */\n    file: string;\n    /**\n     * The message written to `stdout`.\n     */\n    message: string;\n}\ninterface TestSummary {\n    /**\n     * An object containing the counts of various test results.\n     */\n    counts: {\n        /**\n         * The total number of cancelled tests.\n         */\n        cancelled: number;\n        /**\n         * The total number of passed tests.\n         */\n        passed: number;\n        /**\n         * The total number of skipped tests.\n         */\n        skipped: number;\n        /**\n         * The total number of suites run.\n         */\n        suites: number;\n        /**\n         * The total number of tests run, excluding suites.\n         */\n        tests: number;\n        /**\n         * The total number of TODO tests.\n         */\n        todo: number;\n        /**\n         * The total number of top level tests and suites.\n         */\n        topLevel: number;\n    };\n    /**\n     * The duration of the test run in milliseconds.\n     */\n    duration_ms: number;\n    /**\n     * The path of the test file that generated the\n     * summary. If the summary corresponds to multiple files, this value is\n     * `undefined`.\n     */\n    file: string | undefined;\n    /**\n     * Indicates whether or not the test run is considered\n     * successful or not. If any error condition occurs, such as a failing test or\n     * unmet coverage threshold, this value will be set to `false`.\n     */\n    success: boolean;\n}\n\n/**\n * The `node:test/reporters` module exposes the builtin-reporters for `node:test`.\n * To access it:\n *\n * ```js\n * import test from 'node:test/reporters';\n * ```\n *\n * This module is only available under the `node:` scheme. The following will not\n * work:\n *\n * ```js\n * import test from 'node:test/reporters';\n * ```\n * @since v19.9.0\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/test/reporters.js)\n */\ndeclare module \"node:test/reporters\" {\n    import { Transform, TransformOptions } from \"node:stream\";\n\n    type TestEvent =\n        | { type: \"test:coverage\"; data: TestCoverage }\n        | { type: \"test:complete\"; data: TestComplete }\n        | { type: \"test:dequeue\"; data: TestDequeue }\n        | { type: \"test:diagnostic\"; data: DiagnosticData }\n        | { type: \"test:enqueue\"; data: TestEnqueue }\n        | { type: \"test:fail\"; data: TestFail }\n        | { type: \"test:pass\"; data: TestPass }\n        | { type: \"test:plan\"; data: TestPlan }\n        | { type: \"test:start\"; data: TestStart }\n        | { type: \"test:stderr\"; data: TestStderr }\n        | { type: \"test:stdout\"; data: TestStdout }\n        | { type: \"test:summary\"; data: TestSummary }\n        | { type: \"test:watch:drained\"; data: undefined };\n    type TestEventGenerator = AsyncGenerator<TestEvent, void>;\n\n    interface ReporterConstructorWrapper<T extends new(...args: any[]) => Transform> {\n        new(...args: ConstructorParameters<T>): InstanceType<T>;\n        (...args: ConstructorParameters<T>): InstanceType<T>;\n    }\n\n    /**\n     * The `dot` reporter outputs the test results in a compact format,\n     * where each passing test is represented by a `.`,\n     * and each failing test is represented by a `X`.\n     * @since v20.0.0\n     */\n    function dot(source: TestEventGenerator): AsyncGenerator<\"\\n\" | \".\" | \"X\", void>;\n    /**\n     * The `tap` reporter outputs the test results in the [TAP](https://testanything.org/) format.\n     * @since v20.0.0\n     */\n    function tap(source: TestEventGenerator): AsyncGenerator<string, void>;\n    class SpecReporter extends Transform {\n        constructor();\n    }\n    /**\n     * The `spec` reporter outputs the test results in a human-readable format.\n     * @since v20.0.0\n     */\n    const spec: ReporterConstructorWrapper<typeof SpecReporter>;\n    /**\n     * The `junit` reporter outputs test results in a jUnit XML format.\n     * @since v21.0.0\n     */\n    function junit(source: TestEventGenerator): AsyncGenerator<string, void>;\n    class LcovReporter extends Transform {\n        constructor(opts?: Omit<TransformOptions, \"writableObjectMode\">);\n    }\n    /**\n     * The `lcov` reporter outputs test coverage when used with the\n     * [`--experimental-test-coverage`](https://nodejs.org/docs/latest-v22.x/api/cli.html#--experimental-test-coverage) flag.\n     * @since v22.0.0\n     */\n    const lcov: LcovReporter;\n\n    export { dot, junit, lcov, spec, tap, TestEvent };\n}\n",
  '@types/node/timers.d.ts':
    '/**\n * The `timer` module exposes a global API for scheduling functions to\n * be called at some future period of time. Because the timer functions are\n * globals, there is no need to import `node:timers` to use the API.\n *\n * The timer functions within Node.js implement a similar API as the timers API\n * provided by Web Browsers but use a different internal implementation that is\n * built around the Node.js [Event Loop](https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#setimmediate-vs-settimeout).\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/timers.js)\n */\ndeclare module "timers" {\n    import { Abortable } from "node:events";\n    import * as promises from "node:timers/promises";\n    export interface TimerOptions extends Abortable {\n        /**\n         * Set to `false` to indicate that the scheduled `Timeout`\n         * should not require the Node.js event loop to remain active.\n         * @default true\n         */\n        ref?: boolean | undefined;\n    }\n    global {\n        namespace NodeJS {\n            /**\n             * This object is created internally and is returned from `setImmediate()`. It\n             * can be passed to `clearImmediate()` in order to cancel the scheduled\n             * actions.\n             *\n             * By default, when an immediate is scheduled, the Node.js event loop will continue\n             * running as long as the immediate is active. The `Immediate` object returned by\n             * `setImmediate()` exports both `immediate.ref()` and `immediate.unref()`\n             * functions that can be used to control this default behavior.\n             */\n            interface Immediate extends RefCounted, Disposable {\n                /**\n                 * If true, the `Immediate` object will keep the Node.js event loop active.\n                 * @since v11.0.0\n                 */\n                hasRef(): boolean;\n                /**\n                 * When called, requests that the Node.js event loop _not_ exit so long as the\n                 * `Immediate` is active. Calling `immediate.ref()` multiple times will have no\n                 * effect.\n                 *\n                 * By default, all `Immediate` objects are "ref\'ed", making it normally unnecessary\n                 * to call `immediate.ref()` unless `immediate.unref()` had been called previously.\n                 * @since v9.7.0\n                 * @returns a reference to `immediate`\n                 */\n                ref(): this;\n                /**\n                 * When called, the active `Immediate` object will not require the Node.js event\n                 * loop to remain active. If there is no other activity keeping the event loop\n                 * running, the process may exit before the `Immediate` object\'s callback is\n                 * invoked. Calling `immediate.unref()` multiple times will have no effect.\n                 * @since v9.7.0\n                 * @returns a reference to `immediate`\n                 */\n                unref(): this;\n                /**\n                 * Cancels the immediate. This is similar to calling `clearImmediate()`.\n                 * @since v20.5.0, v18.18.0\n                 * @experimental\n                 */\n                [Symbol.dispose](): void;\n                _onImmediate(...args: any[]): void;\n            }\n            // Legacy interface used in Node.js v9 and prior\n            // TODO: remove in a future major version bump\n            /** @deprecated Use `NodeJS.Timeout` instead. */\n            interface Timer extends RefCounted {\n                hasRef(): boolean;\n                refresh(): this;\n                [Symbol.toPrimitive](): number;\n            }\n            /**\n             * This object is created internally and is returned from `setTimeout()` and\n             * `setInterval()`. It can be passed to either `clearTimeout()` or\n             * `clearInterval()` in order to cancel the scheduled actions.\n             *\n             * By default, when a timer is scheduled using either `setTimeout()` or\n             * `setInterval()`, the Node.js event loop will continue running as long as the\n             * timer is active. Each of the `Timeout` objects returned by these functions\n             * export both `timeout.ref()` and `timeout.unref()` functions that can be used to\n             * control this default behavior.\n             */\n            interface Timeout extends RefCounted, Disposable, Timer {\n                /**\n                 * Cancels the timeout.\n                 * @since v0.9.1\n                 * @legacy Use `clearTimeout()` instead.\n                 * @returns a reference to `timeout`\n                 */\n                close(): this;\n                /**\n                 * If true, the `Timeout` object will keep the Node.js event loop active.\n                 * @since v11.0.0\n                 */\n                hasRef(): boolean;\n                /**\n                 * When called, requests that the Node.js event loop _not_ exit so long as the\n                 * `Timeout` is active. Calling `timeout.ref()` multiple times will have no effect.\n                 *\n                 * By default, all `Timeout` objects are "ref\'ed", making it normally unnecessary\n                 * to call `timeout.ref()` unless `timeout.unref()` had been called previously.\n                 * @since v0.9.1\n                 * @returns a reference to `timeout`\n                 */\n                ref(): this;\n                /**\n                 * Sets the timer\'s start time to the current time, and reschedules the timer to\n                 * call its callback at the previously specified duration adjusted to the current\n                 * time. This is useful for refreshing a timer without allocating a new\n                 * JavaScript object.\n                 *\n                 * Using this on a timer that has already called its callback will reactivate the\n                 * timer.\n                 * @since v10.2.0\n                 * @returns a reference to `timeout`\n                 */\n                refresh(): this;\n                /**\n                 * When called, the active `Timeout` object will not require the Node.js event loop\n                 * to remain active. If there is no other activity keeping the event loop running,\n                 * the process may exit before the `Timeout` object\'s callback is invoked. Calling\n                 * `timeout.unref()` multiple times will have no effect.\n                 * @since v0.9.1\n                 * @returns a reference to `timeout`\n                 */\n                unref(): this;\n                /**\n                 * Coerce a `Timeout` to a primitive. The primitive can be used to\n                 * clear the `Timeout`. The primitive can only be used in the\n                 * same thread where the timeout was created. Therefore, to use it\n                 * across `worker_threads` it must first be passed to the correct\n                 * thread. This allows enhanced compatibility with browser\n                 * `setTimeout()` and `setInterval()` implementations.\n                 * @since v14.9.0, v12.19.0\n                 */\n                [Symbol.toPrimitive](): number;\n                /**\n                 * Cancels the timeout.\n                 * @since v20.5.0, v18.18.0\n                 * @experimental\n                 */\n                [Symbol.dispose](): void;\n                _onTimeout(...args: any[]): void;\n            }\n        }\n        /**\n         * Schedules the "immediate" execution of the `callback` after I/O events\'\n         * callbacks.\n         *\n         * When multiple calls to `setImmediate()` are made, the `callback` functions are\n         * queued for execution in the order in which they are created. The entire callback\n         * queue is processed every event loop iteration. If an immediate timer is queued\n         * from inside an executing callback, that timer will not be triggered until the\n         * next event loop iteration.\n         *\n         * If `callback` is not a function, a `TypeError` will be thrown.\n         *\n         * This method has a custom variant for promises that is available using\n         * `timersPromises.setImmediate()`.\n         * @since v0.9.1\n         * @param callback The function to call at the end of this turn of\n         * the Node.js [Event Loop](https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#setimmediate-vs-settimeout)\n         * @param args Optional arguments to pass when the `callback` is called.\n         * @returns for use with `clearImmediate()`\n         */\n        function setImmediate<TArgs extends any[]>(\n            callback: (...args: TArgs) => void,\n            ...args: TArgs\n        ): NodeJS.Immediate;\n        // Allow a single void-accepting argument to be optional in arguments lists.\n        // Allows usage such as `new Promise(resolve => setTimeout(resolve, ms))` (#54258)\n        // eslint-disable-next-line @typescript-eslint/no-invalid-void-type\n        function setImmediate(callback: (_: void) => void): NodeJS.Immediate;\n        namespace setImmediate {\n            import __promisify__ = promises.setImmediate;\n            export { __promisify__ };\n        }\n        /**\n         * Schedules repeated execution of `callback` every `delay` milliseconds.\n         *\n         * When `delay` is larger than `2147483647` or less than `1` or `NaN`, the `delay`\n         * will be set to `1`. Non-integer delays are truncated to an integer.\n         *\n         * If `callback` is not a function, a `TypeError` will be thrown.\n         *\n         * This method has a custom variant for promises that is available using\n         * `timersPromises.setInterval()`.\n         * @since v0.0.1\n         * @param callback The function to call when the timer elapses.\n         * @param delay The number of milliseconds to wait before calling the\n         * `callback`. **Default:** `1`.\n         * @param args Optional arguments to pass when the `callback` is called.\n         * @returns for use with `clearInterval()`\n         */\n        function setInterval<TArgs extends any[]>(\n            callback: (...args: TArgs) => void,\n            delay?: number,\n            ...args: TArgs\n        ): NodeJS.Timeout;\n        // Allow a single void-accepting argument to be optional in arguments lists.\n        // Allows usage such as `new Promise(resolve => setTimeout(resolve, ms))` (#54258)\n        // eslint-disable-next-line @typescript-eslint/no-invalid-void-type\n        function setInterval(callback: (_: void) => void, delay?: number): NodeJS.Timeout;\n        /**\n         * Schedules execution of a one-time `callback` after `delay` milliseconds.\n         *\n         * The `callback` will likely not be invoked in precisely `delay` milliseconds.\n         * Node.js makes no guarantees about the exact timing of when callbacks will fire,\n         * nor of their ordering. The callback will be called as close as possible to the\n         * time specified.\n         *\n         * When `delay` is larger than `2147483647` or less than `1` or `NaN`, the `delay`\n         * will be set to `1`. Non-integer delays are truncated to an integer.\n         *\n         * If `callback` is not a function, a `TypeError` will be thrown.\n         *\n         * This method has a custom variant for promises that is available using\n         * `timersPromises.setTimeout()`.\n         * @since v0.0.1\n         * @param callback The function to call when the timer elapses.\n         * @param delay The number of milliseconds to wait before calling the\n         * `callback`. **Default:** `1`.\n         * @param args Optional arguments to pass when the `callback` is called.\n         * @returns for use with `clearTimeout()`\n         */\n        function setTimeout<TArgs extends any[]>(\n            callback: (...args: TArgs) => void,\n            delay?: number,\n            ...args: TArgs\n        ): NodeJS.Timeout;\n        // Allow a single void-accepting argument to be optional in arguments lists.\n        // Allows usage such as `new Promise(resolve => setTimeout(resolve, ms))` (#54258)\n        // eslint-disable-next-line @typescript-eslint/no-invalid-void-type\n        function setTimeout(callback: (_: void) => void, delay?: number): NodeJS.Timeout;\n        namespace setTimeout {\n            import __promisify__ = promises.setTimeout;\n            export { __promisify__ };\n        }\n        /**\n         * Cancels an `Immediate` object created by `setImmediate()`.\n         * @since v0.9.1\n         * @param immediate An `Immediate` object as returned by `setImmediate()`.\n         */\n        function clearImmediate(immediate: NodeJS.Immediate | undefined): void;\n        /**\n         * Cancels a `Timeout` object created by `setInterval()`.\n         * @since v0.0.1\n         * @param timeout A `Timeout` object as returned by `setInterval()`\n         * or the primitive of the `Timeout` object as a string or a number.\n         */\n        function clearInterval(timeout: NodeJS.Timeout | string | number | undefined): void;\n        /**\n         * Cancels a `Timeout` object created by `setTimeout()`.\n         * @since v0.0.1\n         * @param timeout A `Timeout` object as returned by `setTimeout()`\n         * or the primitive of the `Timeout` object as a string or a number.\n         */\n        function clearTimeout(timeout: NodeJS.Timeout | string | number | undefined): void;\n        /**\n         * The `queueMicrotask()` method queues a microtask to invoke `callback`. If\n         * `callback` throws an exception, the `process` object `\'uncaughtException\'`\n         * event will be emitted.\n         *\n         * The microtask queue is managed by V8 and may be used in a similar manner to\n         * the `process.nextTick()` queue, which is managed by Node.js. The\n         * `process.nextTick()` queue is always processed before the microtask queue\n         * within each turn of the Node.js event loop.\n         * @since v11.0.0\n         * @param callback Function to be queued.\n         */\n        function queueMicrotask(callback: () => void): void;\n    }\n    import clearImmediate = globalThis.clearImmediate;\n    import clearInterval = globalThis.clearInterval;\n    import clearTimeout = globalThis.clearTimeout;\n    import setImmediate = globalThis.setImmediate;\n    import setInterval = globalThis.setInterval;\n    import setTimeout = globalThis.setTimeout;\n    export { clearImmediate, clearInterval, clearTimeout, promises, setImmediate, setInterval, setTimeout };\n}\ndeclare module "node:timers" {\n    export * from "timers";\n}\n',
  '@types/node/timers/promises.d.ts':
    "/**\n * The `timers/promises` API provides an alternative set of timer functions\n * that return `Promise` objects. The API is accessible via\n * `require('node:timers/promises')`.\n *\n * ```js\n * import {\n *   setTimeout,\n *   setImmediate,\n *   setInterval,\n * } from 'node:timers/promises';\n * ```\n * @since v15.0.0\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/timers/promises.js)\n */\ndeclare module \"timers/promises\" {\n    import { TimerOptions } from \"node:timers\";\n    /**\n     * ```js\n     * import {\n     *   setTimeout,\n     * } from 'node:timers/promises';\n     *\n     * const res = await setTimeout(100, 'result');\n     *\n     * console.log(res);  // Prints 'result'\n     * ```\n     * @since v15.0.0\n     * @param delay The number of milliseconds to wait before fulfilling the\n     * promise. **Default:** `1`.\n     * @param value A value with which the promise is fulfilled.\n     */\n    function setTimeout<T = void>(delay?: number, value?: T, options?: TimerOptions): Promise<T>;\n    /**\n     * ```js\n     * import {\n     *   setImmediate,\n     * } from 'node:timers/promises';\n     *\n     * const res = await setImmediate('result');\n     *\n     * console.log(res);  // Prints 'result'\n     * ```\n     * @since v15.0.0\n     * @param value A value with which the promise is fulfilled.\n     */\n    function setImmediate<T = void>(value?: T, options?: TimerOptions): Promise<T>;\n    /**\n     * Returns an async iterator that generates values in an interval of `delay` ms.\n     * If `ref` is `true`, you need to call `next()` of async iterator explicitly\n     * or implicitly to keep the event loop alive.\n     *\n     * ```js\n     * import {\n     *   setInterval,\n     * } from 'node:timers/promises';\n     *\n     * const interval = 100;\n     * for await (const startTime of setInterval(interval, Date.now())) {\n     *   const now = Date.now();\n     *   console.log(now);\n     *   if ((now - startTime) > 1000)\n     *     break;\n     * }\n     * console.log(Date.now());\n     * ```\n     * @since v15.9.0\n     * @param delay The number of milliseconds to wait between iterations.\n     * **Default:** `1`.\n     * @param value A value with which the iterator returns.\n     */\n    function setInterval<T = void>(delay?: number, value?: T, options?: TimerOptions): NodeJS.AsyncIterator<T>;\n    interface Scheduler {\n        /**\n         * An experimental API defined by the [Scheduling APIs](https://github.com/WICG/scheduling-apis) draft specification\n         * being developed as a standard Web Platform API.\n         *\n         * Calling `timersPromises.scheduler.wait(delay, options)` is roughly equivalent\n         * to calling `timersPromises.setTimeout(delay, undefined, options)` except that\n         * the `ref` option is not supported.\n         *\n         * ```js\n         * import { scheduler } from 'node:timers/promises';\n         *\n         * await scheduler.wait(1000); // Wait one second before continuing\n         * ```\n         * @since v17.3.0, v16.14.0\n         * @experimental\n         * @param delay The number of milliseconds to wait before resolving the\n         * promise.\n         */\n        wait(delay: number, options?: { signal?: AbortSignal }): Promise<void>;\n        /**\n         * An experimental API defined by the [Scheduling APIs](https://github.com/WICG/scheduling-apis) draft specification\n         * being developed as a standard Web Platform API.\n         *\n         * Calling `timersPromises.scheduler.yield()` is equivalent to calling\n         * `timersPromises.setImmediate()` with no arguments.\n         * @since v17.3.0, v16.14.0\n         * @experimental\n         */\n        yield(): Promise<void>;\n    }\n    const scheduler: Scheduler;\n}\ndeclare module \"node:timers/promises\" {\n    export * from \"timers/promises\";\n}\n",
  '@types/node/tls.d.ts':
    "/**\n * The `node:tls` module provides an implementation of the Transport Layer Security\n * (TLS) and Secure Socket Layer (SSL) protocols that is built on top of OpenSSL.\n * The module can be accessed using:\n *\n * ```js\n * import tls from 'node:tls';\n * ```\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/tls.js)\n */\ndeclare module \"tls\" {\n    import { X509Certificate } from \"node:crypto\";\n    import * as net from \"node:net\";\n    import * as stream from \"stream\";\n    const CLIENT_RENEG_LIMIT: number;\n    const CLIENT_RENEG_WINDOW: number;\n    interface Certificate {\n        /**\n         * Country code.\n         */\n        C: string;\n        /**\n         * Street.\n         */\n        ST: string;\n        /**\n         * Locality.\n         */\n        L: string;\n        /**\n         * Organization.\n         */\n        O: string;\n        /**\n         * Organizational unit.\n         */\n        OU: string;\n        /**\n         * Common name.\n         */\n        CN: string;\n    }\n    interface PeerCertificate {\n        /**\n         * `true` if a Certificate Authority (CA), `false` otherwise.\n         * @since v18.13.0\n         */\n        ca: boolean;\n        /**\n         * The DER encoded X.509 certificate data.\n         */\n        raw: Buffer;\n        /**\n         * The certificate subject.\n         */\n        subject: Certificate;\n        /**\n         * The certificate issuer, described in the same terms as the `subject`.\n         */\n        issuer: Certificate;\n        /**\n         * The date-time the certificate is valid from.\n         */\n        valid_from: string;\n        /**\n         * The date-time the certificate is valid to.\n         */\n        valid_to: string;\n        /**\n         * The certificate serial number, as a hex string.\n         */\n        serialNumber: string;\n        /**\n         * The SHA-1 digest of the DER encoded certificate.\n         * It is returned as a `:` separated hexadecimal string.\n         */\n        fingerprint: string;\n        /**\n         * The SHA-256 digest of the DER encoded certificate.\n         * It is returned as a `:` separated hexadecimal string.\n         */\n        fingerprint256: string;\n        /**\n         * The SHA-512 digest of the DER encoded certificate.\n         * It is returned as a `:` separated hexadecimal string.\n         */\n        fingerprint512: string;\n        /**\n         * The extended key usage, a set of OIDs.\n         */\n        ext_key_usage?: string[];\n        /**\n         * A string containing concatenated names for the subject,\n         * an alternative to the `subject` names.\n         */\n        subjectaltname?: string;\n        /**\n         * An array describing the AuthorityInfoAccess, used with OCSP.\n         */\n        infoAccess?: NodeJS.Dict<string[]>;\n        /**\n         * For RSA keys: The RSA bit size.\n         *\n         * For EC keys: The key size in bits.\n         */\n        bits?: number;\n        /**\n         * The RSA exponent, as a string in hexadecimal number notation.\n         */\n        exponent?: string;\n        /**\n         * The RSA modulus, as a hexadecimal string.\n         */\n        modulus?: string;\n        /**\n         * The public key.\n         */\n        pubkey?: Buffer;\n        /**\n         * The ASN.1 name of the OID of the elliptic curve.\n         * Well-known curves are identified by an OID.\n         * While it is unusual, it is possible that the curve\n         * is identified by its mathematical properties,\n         * in which case it will not have an OID.\n         */\n        asn1Curve?: string;\n        /**\n         * The NIST name for the elliptic curve, if it has one\n         * (not all well-known curves have been assigned names by NIST).\n         */\n        nistCurve?: string;\n    }\n    interface DetailedPeerCertificate extends PeerCertificate {\n        /**\n         * The issuer certificate object.\n         * For self-signed certificates, this may be a circular reference.\n         */\n        issuerCertificate: DetailedPeerCertificate;\n    }\n    interface CipherNameAndProtocol {\n        /**\n         * The cipher name.\n         */\n        name: string;\n        /**\n         * SSL/TLS protocol version.\n         */\n        version: string;\n        /**\n         * IETF name for the cipher suite.\n         */\n        standardName: string;\n    }\n    interface EphemeralKeyInfo {\n        /**\n         * The supported types are 'DH' and 'ECDH'.\n         */\n        type: string;\n        /**\n         * The name property is available only when type is 'ECDH'.\n         */\n        name?: string | undefined;\n        /**\n         * The size of parameter of an ephemeral key exchange.\n         */\n        size: number;\n    }\n    interface KeyObject {\n        /**\n         * Private keys in PEM format.\n         */\n        pem: string | Buffer;\n        /**\n         * Optional passphrase.\n         */\n        passphrase?: string | undefined;\n    }\n    interface PxfObject {\n        /**\n         * PFX or PKCS12 encoded private key and certificate chain.\n         */\n        buf: string | Buffer;\n        /**\n         * Optional passphrase.\n         */\n        passphrase?: string | undefined;\n    }\n    interface TLSSocketOptions extends SecureContextOptions, CommonConnectionOptions {\n        /**\n         * If true the TLS socket will be instantiated in server-mode.\n         * Defaults to false.\n         */\n        isServer?: boolean | undefined;\n        /**\n         * An optional net.Server instance.\n         */\n        server?: net.Server | undefined;\n        /**\n         * An optional Buffer instance containing a TLS session.\n         */\n        session?: Buffer | undefined;\n        /**\n         * If true, specifies that the OCSP status request extension will be\n         * added to the client hello and an 'OCSPResponse' event will be\n         * emitted on the socket before establishing a secure communication\n         */\n        requestOCSP?: boolean | undefined;\n    }\n    /**\n     * Performs transparent encryption of written data and all required TLS\n     * negotiation.\n     *\n     * Instances of `tls.TLSSocket` implement the duplex `Stream` interface.\n     *\n     * Methods that return TLS connection metadata (e.g.{@link TLSSocket.getPeerCertificate}) will only return data while the\n     * connection is open.\n     * @since v0.11.4\n     */\n    class TLSSocket extends net.Socket {\n        /**\n         * Construct a new tls.TLSSocket object from an existing TCP socket.\n         */\n        constructor(socket: net.Socket | stream.Duplex, options?: TLSSocketOptions);\n        /**\n         * This property is `true` if the peer certificate was signed by one of the CAs\n         * specified when creating the `tls.TLSSocket` instance, otherwise `false`.\n         * @since v0.11.4\n         */\n        authorized: boolean;\n        /**\n         * Returns the reason why the peer's certificate was not been verified. This\n         * property is set only when `tlsSocket.authorized === false`.\n         * @since v0.11.4\n         */\n        authorizationError: Error;\n        /**\n         * Always returns `true`. This may be used to distinguish TLS sockets from regular`net.Socket` instances.\n         * @since v0.11.4\n         */\n        encrypted: true;\n        /**\n         * String containing the selected ALPN protocol.\n         * Before a handshake has completed, this value is always null.\n         * When a handshake is completed but not ALPN protocol was selected, tlsSocket.alpnProtocol equals false.\n         */\n        alpnProtocol: string | false | null;\n        /**\n         * Returns an object representing the local certificate. The returned object has\n         * some properties corresponding to the fields of the certificate.\n         *\n         * See {@link TLSSocket.getPeerCertificate} for an example of the certificate\n         * structure.\n         *\n         * If there is no local certificate, an empty object will be returned. If the\n         * socket has been destroyed, `null` will be returned.\n         * @since v11.2.0\n         */\n        getCertificate(): PeerCertificate | object | null;\n        /**\n         * Returns an object containing information on the negotiated cipher suite.\n         *\n         * For example, a TLSv1.2 protocol with AES256-SHA cipher:\n         *\n         * ```json\n         * {\n         *     \"name\": \"AES256-SHA\",\n         *     \"standardName\": \"TLS_RSA_WITH_AES_256_CBC_SHA\",\n         *     \"version\": \"SSLv3\"\n         * }\n         * ```\n         *\n         * See [SSL\\_CIPHER\\_get\\_name](https://www.openssl.org/docs/man1.1.1/man3/SSL_CIPHER_get_name.html) for more information.\n         * @since v0.11.4\n         */\n        getCipher(): CipherNameAndProtocol;\n        /**\n         * Returns an object representing the type, name, and size of parameter of\n         * an ephemeral key exchange in `perfect forward secrecy` on a client\n         * connection. It returns an empty object when the key exchange is not\n         * ephemeral. As this is only supported on a client socket; `null` is returned\n         * if called on a server socket. The supported types are `'DH'` and `'ECDH'`. The `name` property is available only when type is `'ECDH'`.\n         *\n         * For example: `{ type: 'ECDH', name: 'prime256v1', size: 256 }`.\n         * @since v5.0.0\n         */\n        getEphemeralKeyInfo(): EphemeralKeyInfo | object | null;\n        /**\n         * As the `Finished` messages are message digests of the complete handshake\n         * (with a total of 192 bits for TLS 1.0 and more for SSL 3.0), they can\n         * be used for external authentication procedures when the authentication\n         * provided by SSL/TLS is not desired or is not enough.\n         *\n         * Corresponds to the `SSL_get_finished` routine in OpenSSL and may be used\n         * to implement the `tls-unique` channel binding from [RFC 5929](https://tools.ietf.org/html/rfc5929).\n         * @since v9.9.0\n         * @return The latest `Finished` message that has been sent to the socket as part of a SSL/TLS handshake, or `undefined` if no `Finished` message has been sent yet.\n         */\n        getFinished(): Buffer | undefined;\n        /**\n         * Returns an object representing the peer's certificate. If the peer does not\n         * provide a certificate, an empty object will be returned. If the socket has been\n         * destroyed, `null` will be returned.\n         *\n         * If the full certificate chain was requested, each certificate will include an`issuerCertificate` property containing an object representing its issuer's\n         * certificate.\n         * @since v0.11.4\n         * @param detailed Include the full certificate chain if `true`, otherwise include just the peer's certificate.\n         * @return A certificate object.\n         */\n        getPeerCertificate(detailed: true): DetailedPeerCertificate;\n        getPeerCertificate(detailed?: false): PeerCertificate;\n        getPeerCertificate(detailed?: boolean): PeerCertificate | DetailedPeerCertificate;\n        /**\n         * As the `Finished` messages are message digests of the complete handshake\n         * (with a total of 192 bits for TLS 1.0 and more for SSL 3.0), they can\n         * be used for external authentication procedures when the authentication\n         * provided by SSL/TLS is not desired or is not enough.\n         *\n         * Corresponds to the `SSL_get_peer_finished` routine in OpenSSL and may be used\n         * to implement the `tls-unique` channel binding from [RFC 5929](https://tools.ietf.org/html/rfc5929).\n         * @since v9.9.0\n         * @return The latest `Finished` message that is expected or has actually been received from the socket as part of a SSL/TLS handshake, or `undefined` if there is no `Finished` message so\n         * far.\n         */\n        getPeerFinished(): Buffer | undefined;\n        /**\n         * Returns a string containing the negotiated SSL/TLS protocol version of the\n         * current connection. The value `'unknown'` will be returned for connected\n         * sockets that have not completed the handshaking process. The value `null` will\n         * be returned for server sockets or disconnected client sockets.\n         *\n         * Protocol versions are:\n         *\n         * * `'SSLv3'`\n         * * `'TLSv1'`\n         * * `'TLSv1.1'`\n         * * `'TLSv1.2'`\n         * * `'TLSv1.3'`\n         *\n         * See the OpenSSL [`SSL_get_version`](https://www.openssl.org/docs/man1.1.1/man3/SSL_get_version.html) documentation for more information.\n         * @since v5.7.0\n         */\n        getProtocol(): string | null;\n        /**\n         * Returns the TLS session data or `undefined` if no session was\n         * negotiated. On the client, the data can be provided to the `session` option of {@link connect} to resume the connection. On the server, it may be useful\n         * for debugging.\n         *\n         * See `Session Resumption` for more information.\n         *\n         * Note: `getSession()` works only for TLSv1.2 and below. For TLSv1.3, applications\n         * must use the `'session'` event (it also works for TLSv1.2 and below).\n         * @since v0.11.4\n         */\n        getSession(): Buffer | undefined;\n        /**\n         * See [SSL\\_get\\_shared\\_sigalgs](https://www.openssl.org/docs/man1.1.1/man3/SSL_get_shared_sigalgs.html) for more information.\n         * @since v12.11.0\n         * @return List of signature algorithms shared between the server and the client in the order of decreasing preference.\n         */\n        getSharedSigalgs(): string[];\n        /**\n         * For a client, returns the TLS session ticket if one is available, or`undefined`. For a server, always returns `undefined`.\n         *\n         * It may be useful for debugging.\n         *\n         * See `Session Resumption` for more information.\n         * @since v0.11.4\n         */\n        getTLSTicket(): Buffer | undefined;\n        /**\n         * See `Session Resumption` for more information.\n         * @since v0.5.6\n         * @return `true` if the session was reused, `false` otherwise.\n         */\n        isSessionReused(): boolean;\n        /**\n         * The `tlsSocket.renegotiate()` method initiates a TLS renegotiation process.\n         * Upon completion, the `callback` function will be passed a single argument\n         * that is either an `Error` (if the request failed) or `null`.\n         *\n         * This method can be used to request a peer's certificate after the secure\n         * connection has been established.\n         *\n         * When running as the server, the socket will be destroyed with an error after `handshakeTimeout` timeout.\n         *\n         * For TLSv1.3, renegotiation cannot be initiated, it is not supported by the\n         * protocol.\n         * @since v0.11.8\n         * @param callback If `renegotiate()` returned `true`, callback is attached once to the `'secure'` event. If `renegotiate()` returned `false`, `callback` will be called in the next tick with\n         * an error, unless the `tlsSocket` has been destroyed, in which case `callback` will not be called at all.\n         * @return `true` if renegotiation was initiated, `false` otherwise.\n         */\n        renegotiate(\n            options: {\n                rejectUnauthorized?: boolean | undefined;\n                requestCert?: boolean | undefined;\n            },\n            callback: (err: Error | null) => void,\n        ): undefined | boolean;\n        /**\n         * The `tlsSocket.setKeyCert()` method sets the private key and certificate to use for the socket.\n         * This is mainly useful if you wish to select a server certificate from a TLS server's `ALPNCallback`.\n         * @since v22.5.0, v20.17.0\n         * @param context An object containing at least `key` and `cert` properties from the {@link createSecureContext()} `options`,\n         * or a TLS context object created with {@link createSecureContext()} itself.\n         */\n        setKeyCert(context: SecureContextOptions | SecureContext): void;\n        /**\n         * The `tlsSocket.setMaxSendFragment()` method sets the maximum TLS fragment size.\n         * Returns `true` if setting the limit succeeded; `false` otherwise.\n         *\n         * Smaller fragment sizes decrease the buffering latency on the client: larger\n         * fragments are buffered by the TLS layer until the entire fragment is received\n         * and its integrity is verified; large fragments can span multiple roundtrips\n         * and their processing can be delayed due to packet loss or reordering. However,\n         * smaller fragments add extra TLS framing bytes and CPU overhead, which may\n         * decrease overall server throughput.\n         * @since v0.11.11\n         * @param [size=16384] The maximum TLS fragment size. The maximum value is `16384`.\n         */\n        setMaxSendFragment(size: number): boolean;\n        /**\n         * Disables TLS renegotiation for this `TLSSocket` instance. Once called, attempts\n         * to renegotiate will trigger an `'error'` event on the `TLSSocket`.\n         * @since v8.4.0\n         */\n        disableRenegotiation(): void;\n        /**\n         * When enabled, TLS packet trace information is written to `stderr`. This can be\n         * used to debug TLS connection problems.\n         *\n         * The format of the output is identical to the output of`openssl s_client -trace` or `openssl s_server -trace`. While it is produced by\n         * OpenSSL's `SSL_trace()` function, the format is undocumented, can change\n         * without notice, and should not be relied on.\n         * @since v12.2.0\n         */\n        enableTrace(): void;\n        /**\n         * Returns the peer certificate as an `X509Certificate` object.\n         *\n         * If there is no peer certificate, or the socket has been destroyed,`undefined` will be returned.\n         * @since v15.9.0\n         */\n        getPeerX509Certificate(): X509Certificate | undefined;\n        /**\n         * Returns the local certificate as an `X509Certificate` object.\n         *\n         * If there is no local certificate, or the socket has been destroyed,`undefined` will be returned.\n         * @since v15.9.0\n         */\n        getX509Certificate(): X509Certificate | undefined;\n        /**\n         * Keying material is used for validations to prevent different kind of attacks in\n         * network protocols, for example in the specifications of IEEE 802.1X.\n         *\n         * Example\n         *\n         * ```js\n         * const keyingMaterial = tlsSocket.exportKeyingMaterial(\n         *   128,\n         *   'client finished');\n         *\n         * /*\n         *  Example return value of keyingMaterial:\n         *  <Buffer 76 26 af 99 c5 56 8e 42 09 91 ef 9f 93 cb ad 6c 7b 65 f8 53 f1 d8 d9\n         *     12 5a 33 b8 b5 25 df 7b 37 9f e0 e2 4f b8 67 83 a3 2f cd 5d 41 42 4c 91\n         *     74 ef 2c ... 78 more bytes>\n         *\n         * ```\n         *\n         * See the OpenSSL [`SSL_export_keying_material`](https://www.openssl.org/docs/man1.1.1/man3/SSL_export_keying_material.html) documentation for more\n         * information.\n         * @since v13.10.0, v12.17.0\n         * @param length number of bytes to retrieve from keying material\n         * @param label an application specific label, typically this will be a value from the [IANA Exporter Label\n         * Registry](https://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#exporter-labels).\n         * @param context Optionally provide a context.\n         * @return requested bytes of the keying material\n         */\n        exportKeyingMaterial(length: number, label: string, context: Buffer): Buffer;\n        addListener(event: string, listener: (...args: any[]) => void): this;\n        addListener(event: \"OCSPResponse\", listener: (response: Buffer) => void): this;\n        addListener(event: \"secureConnect\", listener: () => void): this;\n        addListener(event: \"session\", listener: (session: Buffer) => void): this;\n        addListener(event: \"keylog\", listener: (line: Buffer) => void): this;\n        emit(event: string | symbol, ...args: any[]): boolean;\n        emit(event: \"OCSPResponse\", response: Buffer): boolean;\n        emit(event: \"secureConnect\"): boolean;\n        emit(event: \"session\", session: Buffer): boolean;\n        emit(event: \"keylog\", line: Buffer): boolean;\n        on(event: string, listener: (...args: any[]) => void): this;\n        on(event: \"OCSPResponse\", listener: (response: Buffer) => void): this;\n        on(event: \"secureConnect\", listener: () => void): this;\n        on(event: \"session\", listener: (session: Buffer) => void): this;\n        on(event: \"keylog\", listener: (line: Buffer) => void): this;\n        once(event: string, listener: (...args: any[]) => void): this;\n        once(event: \"OCSPResponse\", listener: (response: Buffer) => void): this;\n        once(event: \"secureConnect\", listener: () => void): this;\n        once(event: \"session\", listener: (session: Buffer) => void): this;\n        once(event: \"keylog\", listener: (line: Buffer) => void): this;\n        prependListener(event: string, listener: (...args: any[]) => void): this;\n        prependListener(event: \"OCSPResponse\", listener: (response: Buffer) => void): this;\n        prependListener(event: \"secureConnect\", listener: () => void): this;\n        prependListener(event: \"session\", listener: (session: Buffer) => void): this;\n        prependListener(event: \"keylog\", listener: (line: Buffer) => void): this;\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\n        prependOnceListener(event: \"OCSPResponse\", listener: (response: Buffer) => void): this;\n        prependOnceListener(event: \"secureConnect\", listener: () => void): this;\n        prependOnceListener(event: \"session\", listener: (session: Buffer) => void): this;\n        prependOnceListener(event: \"keylog\", listener: (line: Buffer) => void): this;\n    }\n    interface CommonConnectionOptions {\n        /**\n         * An optional TLS context object from tls.createSecureContext()\n         */\n        secureContext?: SecureContext | undefined;\n        /**\n         * When enabled, TLS packet trace information is written to `stderr`. This can be\n         * used to debug TLS connection problems.\n         * @default false\n         */\n        enableTrace?: boolean | undefined;\n        /**\n         * If true the server will request a certificate from clients that\n         * connect and attempt to verify that certificate. Defaults to\n         * false.\n         */\n        requestCert?: boolean | undefined;\n        /**\n         * An array of strings or a Buffer naming possible ALPN protocols.\n         * (Protocols should be ordered by their priority.)\n         */\n        ALPNProtocols?: string[] | Uint8Array[] | Uint8Array | undefined;\n        /**\n         * SNICallback(servername, cb) <Function> A function that will be\n         * called if the client supports SNI TLS extension. Two arguments\n         * will be passed when called: servername and cb. SNICallback should\n         * invoke cb(null, ctx), where ctx is a SecureContext instance.\n         * (tls.createSecureContext(...) can be used to get a proper\n         * SecureContext.) If SNICallback wasn't provided the default callback\n         * with high-level API will be used (see below).\n         */\n        SNICallback?: ((servername: string, cb: (err: Error | null, ctx?: SecureContext) => void) => void) | undefined;\n        /**\n         * If true the server will reject any connection which is not\n         * authorized with the list of supplied CAs. This option only has an\n         * effect if requestCert is true.\n         * @default true\n         */\n        rejectUnauthorized?: boolean | undefined;\n    }\n    interface TlsOptions extends SecureContextOptions, CommonConnectionOptions, net.ServerOpts {\n        /**\n         * Abort the connection if the SSL/TLS handshake does not finish in the\n         * specified number of milliseconds. A 'tlsClientError' is emitted on\n         * the tls.Server object whenever a handshake times out. Default:\n         * 120000 (120 seconds).\n         */\n        handshakeTimeout?: number | undefined;\n        /**\n         * The number of seconds after which a TLS session created by the\n         * server will no longer be resumable. See Session Resumption for more\n         * information. Default: 300.\n         */\n        sessionTimeout?: number | undefined;\n        /**\n         * 48-bytes of cryptographically strong pseudo-random data.\n         */\n        ticketKeys?: Buffer | undefined;\n        /**\n         * @param socket\n         * @param identity identity parameter sent from the client.\n         * @return pre-shared key that must either be\n         * a buffer or `null` to stop the negotiation process. Returned PSK must be\n         * compatible with the selected cipher's digest.\n         *\n         * When negotiating TLS-PSK (pre-shared keys), this function is called\n         * with the identity provided by the client.\n         * If the return value is `null` the negotiation process will stop and an\n         * \"unknown_psk_identity\" alert message will be sent to the other party.\n         * If the server wishes to hide the fact that the PSK identity was not known,\n         * the callback must provide some random data as `psk` to make the connection\n         * fail with \"decrypt_error\" before negotiation is finished.\n         * PSK ciphers are disabled by default, and using TLS-PSK thus\n         * requires explicitly specifying a cipher suite with the `ciphers` option.\n         * More information can be found in the RFC 4279.\n         */\n        pskCallback?(socket: TLSSocket, identity: string): DataView | NodeJS.TypedArray | null;\n        /**\n         * hint to send to a client to help\n         * with selecting the identity during TLS-PSK negotiation. Will be ignored\n         * in TLS 1.3. Upon failing to set pskIdentityHint `tlsClientError` will be\n         * emitted with `ERR_TLS_PSK_SET_IDENTIY_HINT_FAILED` code.\n         */\n        pskIdentityHint?: string | undefined;\n    }\n    interface PSKCallbackNegotation {\n        psk: DataView | NodeJS.TypedArray;\n        identity: string;\n    }\n    interface ConnectionOptions extends SecureContextOptions, CommonConnectionOptions {\n        host?: string | undefined;\n        port?: number | undefined;\n        path?: string | undefined; // Creates unix socket connection to path. If this option is specified, `host` and `port` are ignored.\n        socket?: stream.Duplex | undefined; // Establish secure connection on a given socket rather than creating a new socket\n        checkServerIdentity?: typeof checkServerIdentity | undefined;\n        servername?: string | undefined; // SNI TLS Extension\n        session?: Buffer | undefined;\n        minDHSize?: number | undefined;\n        lookup?: net.LookupFunction | undefined;\n        timeout?: number | undefined;\n        /**\n         * When negotiating TLS-PSK (pre-shared keys), this function is called\n         * with optional identity `hint` provided by the server or `null`\n         * in case of TLS 1.3 where `hint` was removed.\n         * It will be necessary to provide a custom `tls.checkServerIdentity()`\n         * for the connection as the default one will try to check hostname/IP\n         * of the server against the certificate but that's not applicable for PSK\n         * because there won't be a certificate present.\n         * More information can be found in the RFC 4279.\n         *\n         * @param hint message sent from the server to help client\n         * decide which identity to use during negotiation.\n         * Always `null` if TLS 1.3 is used.\n         * @returns Return `null` to stop the negotiation process. `psk` must be\n         * compatible with the selected cipher's digest.\n         * `identity` must use UTF-8 encoding.\n         */\n        pskCallback?(hint: string | null): PSKCallbackNegotation | null;\n    }\n    /**\n     * Accepts encrypted connections using TLS or SSL.\n     * @since v0.3.2\n     */\n    class Server extends net.Server {\n        constructor(secureConnectionListener?: (socket: TLSSocket) => void);\n        constructor(options: TlsOptions, secureConnectionListener?: (socket: TLSSocket) => void);\n        /**\n         * The `server.addContext()` method adds a secure context that will be used if\n         * the client request's SNI name matches the supplied `hostname` (or wildcard).\n         *\n         * When there are multiple matching contexts, the most recently added one is\n         * used.\n         * @since v0.5.3\n         * @param hostname A SNI host name or wildcard (e.g. `'*'`)\n         * @param context An object containing any of the possible properties from the {@link createSecureContext} `options` arguments (e.g. `key`, `cert`, `ca`, etc), or a TLS context object created\n         * with {@link createSecureContext} itself.\n         */\n        addContext(hostname: string, context: SecureContextOptions | SecureContext): void;\n        /**\n         * Returns the session ticket keys.\n         *\n         * See `Session Resumption` for more information.\n         * @since v3.0.0\n         * @return A 48-byte buffer containing the session ticket keys.\n         */\n        getTicketKeys(): Buffer;\n        /**\n         * The `server.setSecureContext()` method replaces the secure context of an\n         * existing server. Existing connections to the server are not interrupted.\n         * @since v11.0.0\n         * @param options An object containing any of the possible properties from the {@link createSecureContext} `options` arguments (e.g. `key`, `cert`, `ca`, etc).\n         */\n        setSecureContext(options: SecureContextOptions): void;\n        /**\n         * Sets the session ticket keys.\n         *\n         * Changes to the ticket keys are effective only for future server connections.\n         * Existing or currently pending server connections will use the previous keys.\n         *\n         * See `Session Resumption` for more information.\n         * @since v3.0.0\n         * @param keys A 48-byte buffer containing the session ticket keys.\n         */\n        setTicketKeys(keys: Buffer): void;\n        /**\n         * events.EventEmitter\n         * 1. tlsClientError\n         * 2. newSession\n         * 3. OCSPRequest\n         * 4. resumeSession\n         * 5. secureConnection\n         * 6. keylog\n         */\n        addListener(event: string, listener: (...args: any[]) => void): this;\n        addListener(event: \"tlsClientError\", listener: (err: Error, tlsSocket: TLSSocket) => void): this;\n        addListener(\n            event: \"newSession\",\n            listener: (sessionId: Buffer, sessionData: Buffer, callback: () => void) => void,\n        ): this;\n        addListener(\n            event: \"OCSPRequest\",\n            listener: (\n                certificate: Buffer,\n                issuer: Buffer,\n                callback: (err: Error | null, resp: Buffer) => void,\n            ) => void,\n        ): this;\n        addListener(\n            event: \"resumeSession\",\n            listener: (sessionId: Buffer, callback: (err: Error | null, sessionData: Buffer | null) => void) => void,\n        ): this;\n        addListener(event: \"secureConnection\", listener: (tlsSocket: TLSSocket) => void): this;\n        addListener(event: \"keylog\", listener: (line: Buffer, tlsSocket: TLSSocket) => void): this;\n        emit(event: string | symbol, ...args: any[]): boolean;\n        emit(event: \"tlsClientError\", err: Error, tlsSocket: TLSSocket): boolean;\n        emit(event: \"newSession\", sessionId: Buffer, sessionData: Buffer, callback: () => void): boolean;\n        emit(\n            event: \"OCSPRequest\",\n            certificate: Buffer,\n            issuer: Buffer,\n            callback: (err: Error | null, resp: Buffer) => void,\n        ): boolean;\n        emit(\n            event: \"resumeSession\",\n            sessionId: Buffer,\n            callback: (err: Error | null, sessionData: Buffer | null) => void,\n        ): boolean;\n        emit(event: \"secureConnection\", tlsSocket: TLSSocket): boolean;\n        emit(event: \"keylog\", line: Buffer, tlsSocket: TLSSocket): boolean;\n        on(event: string, listener: (...args: any[]) => void): this;\n        on(event: \"tlsClientError\", listener: (err: Error, tlsSocket: TLSSocket) => void): this;\n        on(event: \"newSession\", listener: (sessionId: Buffer, sessionData: Buffer, callback: () => void) => void): this;\n        on(\n            event: \"OCSPRequest\",\n            listener: (\n                certificate: Buffer,\n                issuer: Buffer,\n                callback: (err: Error | null, resp: Buffer) => void,\n            ) => void,\n        ): this;\n        on(\n            event: \"resumeSession\",\n            listener: (sessionId: Buffer, callback: (err: Error | null, sessionData: Buffer | null) => void) => void,\n        ): this;\n        on(event: \"secureConnection\", listener: (tlsSocket: TLSSocket) => void): this;\n        on(event: \"keylog\", listener: (line: Buffer, tlsSocket: TLSSocket) => void): this;\n        once(event: string, listener: (...args: any[]) => void): this;\n        once(event: \"tlsClientError\", listener: (err: Error, tlsSocket: TLSSocket) => void): this;\n        once(\n            event: \"newSession\",\n            listener: (sessionId: Buffer, sessionData: Buffer, callback: () => void) => void,\n        ): this;\n        once(\n            event: \"OCSPRequest\",\n            listener: (\n                certificate: Buffer,\n                issuer: Buffer,\n                callback: (err: Error | null, resp: Buffer) => void,\n            ) => void,\n        ): this;\n        once(\n            event: \"resumeSession\",\n            listener: (sessionId: Buffer, callback: (err: Error | null, sessionData: Buffer | null) => void) => void,\n        ): this;\n        once(event: \"secureConnection\", listener: (tlsSocket: TLSSocket) => void): this;\n        once(event: \"keylog\", listener: (line: Buffer, tlsSocket: TLSSocket) => void): this;\n        prependListener(event: string, listener: (...args: any[]) => void): this;\n        prependListener(event: \"tlsClientError\", listener: (err: Error, tlsSocket: TLSSocket) => void): this;\n        prependListener(\n            event: \"newSession\",\n            listener: (sessionId: Buffer, sessionData: Buffer, callback: () => void) => void,\n        ): this;\n        prependListener(\n            event: \"OCSPRequest\",\n            listener: (\n                certificate: Buffer,\n                issuer: Buffer,\n                callback: (err: Error | null, resp: Buffer) => void,\n            ) => void,\n        ): this;\n        prependListener(\n            event: \"resumeSession\",\n            listener: (sessionId: Buffer, callback: (err: Error | null, sessionData: Buffer | null) => void) => void,\n        ): this;\n        prependListener(event: \"secureConnection\", listener: (tlsSocket: TLSSocket) => void): this;\n        prependListener(event: \"keylog\", listener: (line: Buffer, tlsSocket: TLSSocket) => void): this;\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\n        prependOnceListener(event: \"tlsClientError\", listener: (err: Error, tlsSocket: TLSSocket) => void): this;\n        prependOnceListener(\n            event: \"newSession\",\n            listener: (sessionId: Buffer, sessionData: Buffer, callback: () => void) => void,\n        ): this;\n        prependOnceListener(\n            event: \"OCSPRequest\",\n            listener: (\n                certificate: Buffer,\n                issuer: Buffer,\n                callback: (err: Error | null, resp: Buffer) => void,\n            ) => void,\n        ): this;\n        prependOnceListener(\n            event: \"resumeSession\",\n            listener: (sessionId: Buffer, callback: (err: Error | null, sessionData: Buffer | null) => void) => void,\n        ): this;\n        prependOnceListener(event: \"secureConnection\", listener: (tlsSocket: TLSSocket) => void): this;\n        prependOnceListener(event: \"keylog\", listener: (line: Buffer, tlsSocket: TLSSocket) => void): this;\n    }\n    /**\n     * @deprecated since v0.11.3 Use `tls.TLSSocket` instead.\n     */\n    interface SecurePair {\n        encrypted: TLSSocket;\n        cleartext: TLSSocket;\n    }\n    type SecureVersion = \"TLSv1.3\" | \"TLSv1.2\" | \"TLSv1.1\" | \"TLSv1\";\n    interface SecureContextOptions {\n        /**\n         * If set, this will be called when a client opens a connection using the ALPN extension.\n         * One argument will be passed to the callback: an object containing `servername` and `protocols` fields,\n         * respectively containing the server name from the SNI extension (if any) and an array of\n         * ALPN protocol name strings. The callback must return either one of the strings listed in `protocols`,\n         * which will be returned to the client as the selected ALPN protocol, or `undefined`,\n         * to reject the connection with a fatal alert. If a string is returned that does not match one of\n         * the client's ALPN protocols, an error will be thrown.\n         * This option cannot be used with the `ALPNProtocols` option, and setting both options will throw an error.\n         */\n        ALPNCallback?: ((arg: { servername: string; protocols: string[] }) => string | undefined) | undefined;\n        /**\n         * Treat intermediate (non-self-signed)\n         * certificates in the trust CA certificate list as trusted.\n         * @since v22.9.0, v20.18.0\n         */\n        allowPartialTrustChain?: boolean | undefined;\n        /**\n         * Optionally override the trusted CA certificates. Default is to trust\n         * the well-known CAs curated by Mozilla. Mozilla's CAs are completely\n         * replaced when CAs are explicitly specified using this option.\n         */\n        ca?: string | Buffer | Array<string | Buffer> | undefined;\n        /**\n         *  Cert chains in PEM format. One cert chain should be provided per\n         *  private key. Each cert chain should consist of the PEM formatted\n         *  certificate for a provided private key, followed by the PEM\n         *  formatted intermediate certificates (if any), in order, and not\n         *  including the root CA (the root CA must be pre-known to the peer,\n         *  see ca). When providing multiple cert chains, they do not have to\n         *  be in the same order as their private keys in key. If the\n         *  intermediate certificates are not provided, the peer will not be\n         *  able to validate the certificate, and the handshake will fail.\n         */\n        cert?: string | Buffer | Array<string | Buffer> | undefined;\n        /**\n         *  Colon-separated list of supported signature algorithms. The list\n         *  can contain digest algorithms (SHA256, MD5 etc.), public key\n         *  algorithms (RSA-PSS, ECDSA etc.), combination of both (e.g\n         *  'RSA+SHA384') or TLS v1.3 scheme names (e.g. rsa_pss_pss_sha512).\n         */\n        sigalgs?: string | undefined;\n        /**\n         * Cipher suite specification, replacing the default. For more\n         * information, see modifying the default cipher suite. Permitted\n         * ciphers can be obtained via tls.getCiphers(). Cipher names must be\n         * uppercased in order for OpenSSL to accept them.\n         */\n        ciphers?: string | undefined;\n        /**\n         * Name of an OpenSSL engine which can provide the client certificate.\n         * @deprecated\n         */\n        clientCertEngine?: string | undefined;\n        /**\n         * PEM formatted CRLs (Certificate Revocation Lists).\n         */\n        crl?: string | Buffer | Array<string | Buffer> | undefined;\n        /**\n         * `'auto'` or custom Diffie-Hellman parameters, required for non-ECDHE perfect forward secrecy.\n         * If omitted or invalid, the parameters are silently discarded and DHE ciphers will not be available.\n         * ECDHE-based perfect forward secrecy will still be available.\n         */\n        dhparam?: string | Buffer | undefined;\n        /**\n         * A string describing a named curve or a colon separated list of curve\n         * NIDs or names, for example P-521:P-384:P-256, to use for ECDH key\n         * agreement. Set to auto to select the curve automatically. Use\n         * crypto.getCurves() to obtain a list of available curve names. On\n         * recent releases, openssl ecparam -list_curves will also display the\n         * name and description of each available elliptic curve. Default:\n         * tls.DEFAULT_ECDH_CURVE.\n         */\n        ecdhCurve?: string | undefined;\n        /**\n         * Attempt to use the server's cipher suite preferences instead of the\n         * client's. When true, causes SSL_OP_CIPHER_SERVER_PREFERENCE to be\n         * set in secureOptions\n         */\n        honorCipherOrder?: boolean | undefined;\n        /**\n         * Private keys in PEM format. PEM allows the option of private keys\n         * being encrypted. Encrypted keys will be decrypted with\n         * options.passphrase. Multiple keys using different algorithms can be\n         * provided either as an array of unencrypted key strings or buffers,\n         * or an array of objects in the form {pem: <string|buffer>[,\n         * passphrase: <string>]}. The object form can only occur in an array.\n         * object.passphrase is optional. Encrypted keys will be decrypted with\n         * object.passphrase if provided, or options.passphrase if it is not.\n         */\n        key?: string | Buffer | Array<string | Buffer | KeyObject> | undefined;\n        /**\n         * Name of an OpenSSL engine to get private key from. Should be used\n         * together with privateKeyIdentifier.\n         * @deprecated\n         */\n        privateKeyEngine?: string | undefined;\n        /**\n         * Identifier of a private key managed by an OpenSSL engine. Should be\n         * used together with privateKeyEngine. Should not be set together with\n         * key, because both options define a private key in different ways.\n         * @deprecated\n         */\n        privateKeyIdentifier?: string | undefined;\n        /**\n         * Optionally set the maximum TLS version to allow. One\n         * of `'TLSv1.3'`, `'TLSv1.2'`, `'TLSv1.1'`, or `'TLSv1'`. Cannot be specified along with the\n         * `secureProtocol` option, use one or the other.\n         * **Default:** `'TLSv1.3'`, unless changed using CLI options. Using\n         * `--tls-max-v1.2` sets the default to `'TLSv1.2'`. Using `--tls-max-v1.3` sets the default to\n         * `'TLSv1.3'`. If multiple of the options are provided, the highest maximum is used.\n         */\n        maxVersion?: SecureVersion | undefined;\n        /**\n         * Optionally set the minimum TLS version to allow. One\n         * of `'TLSv1.3'`, `'TLSv1.2'`, `'TLSv1.1'`, or `'TLSv1'`. Cannot be specified along with the\n         * `secureProtocol` option, use one or the other.  It is not recommended to use\n         * less than TLSv1.2, but it may be required for interoperability.\n         * **Default:** `'TLSv1.2'`, unless changed using CLI options. Using\n         * `--tls-v1.0` sets the default to `'TLSv1'`. Using `--tls-v1.1` sets the default to\n         * `'TLSv1.1'`. Using `--tls-min-v1.3` sets the default to\n         * 'TLSv1.3'. If multiple of the options are provided, the lowest minimum is used.\n         */\n        minVersion?: SecureVersion | undefined;\n        /**\n         * Shared passphrase used for a single private key and/or a PFX.\n         */\n        passphrase?: string | undefined;\n        /**\n         * PFX or PKCS12 encoded private key and certificate chain. pfx is an\n         * alternative to providing key and cert individually. PFX is usually\n         * encrypted, if it is, passphrase will be used to decrypt it. Multiple\n         * PFX can be provided either as an array of unencrypted PFX buffers,\n         * or an array of objects in the form {buf: <string|buffer>[,\n         * passphrase: <string>]}. The object form can only occur in an array.\n         * object.passphrase is optional. Encrypted PFX will be decrypted with\n         * object.passphrase if provided, or options.passphrase if it is not.\n         */\n        pfx?: string | Buffer | Array<string | Buffer | PxfObject> | undefined;\n        /**\n         * Optionally affect the OpenSSL protocol behavior, which is not\n         * usually necessary. This should be used carefully if at all! Value is\n         * a numeric bitmask of the SSL_OP_* options from OpenSSL Options\n         */\n        secureOptions?: number | undefined; // Value is a numeric bitmask of the `SSL_OP_*` options\n        /**\n         * Legacy mechanism to select the TLS protocol version to use, it does\n         * not support independent control of the minimum and maximum version,\n         * and does not support limiting the protocol to TLSv1.3. Use\n         * minVersion and maxVersion instead. The possible values are listed as\n         * SSL_METHODS, use the function names as strings. For example, use\n         * 'TLSv1_1_method' to force TLS version 1.1, or 'TLS_method' to allow\n         * any TLS protocol version up to TLSv1.3. It is not recommended to use\n         * TLS versions less than 1.2, but it may be required for\n         * interoperability. Default: none, see minVersion.\n         */\n        secureProtocol?: string | undefined;\n        /**\n         * Opaque identifier used by servers to ensure session state is not\n         * shared between applications. Unused by clients.\n         */\n        sessionIdContext?: string | undefined;\n        /**\n         * 48-bytes of cryptographically strong pseudo-random data.\n         * See Session Resumption for more information.\n         */\n        ticketKeys?: Buffer | undefined;\n        /**\n         * The number of seconds after which a TLS session created by the\n         * server will no longer be resumable. See Session Resumption for more\n         * information. Default: 300.\n         */\n        sessionTimeout?: number | undefined;\n    }\n    interface SecureContext {\n        context: any;\n    }\n    /**\n     * Verifies the certificate `cert` is issued to `hostname`.\n     *\n     * Returns [Error](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error) object, populating it with `reason`, `host`, and `cert` on\n     * failure. On success, returns [undefined](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Undefined_type).\n     *\n     * This function is intended to be used in combination with the`checkServerIdentity` option that can be passed to {@link connect} and as\n     * such operates on a `certificate object`. For other purposes, consider using `x509.checkHost()` instead.\n     *\n     * This function can be overwritten by providing an alternative function as the `options.checkServerIdentity` option that is passed to `tls.connect()`. The\n     * overwriting function can call `tls.checkServerIdentity()` of course, to augment\n     * the checks done with additional verification.\n     *\n     * This function is only called if the certificate passed all other checks, such as\n     * being issued by trusted CA (`options.ca`).\n     *\n     * Earlier versions of Node.js incorrectly accepted certificates for a given`hostname` if a matching `uniformResourceIdentifier` subject alternative name\n     * was present (see [CVE-2021-44531](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-44531)). Applications that wish to accept`uniformResourceIdentifier` subject alternative names can use\n     * a custom `options.checkServerIdentity` function that implements the desired behavior.\n     * @since v0.8.4\n     * @param hostname The host name or IP address to verify the certificate against.\n     * @param cert A `certificate object` representing the peer's certificate.\n     */\n    function checkServerIdentity(hostname: string, cert: PeerCertificate): Error | undefined;\n    /**\n     * Creates a new {@link Server}. The `secureConnectionListener`, if provided, is\n     * automatically set as a listener for the `'secureConnection'` event.\n     *\n     * The `ticketKeys` options is automatically shared between `node:cluster` module\n     * workers.\n     *\n     * The following illustrates a simple echo server:\n     *\n     * ```js\n     * import tls from 'node:tls';\n     * import fs from 'node:fs';\n     *\n     * const options = {\n     *   key: fs.readFileSync('server-key.pem'),\n     *   cert: fs.readFileSync('server-cert.pem'),\n     *\n     *   // This is necessary only if using client certificate authentication.\n     *   requestCert: true,\n     *\n     *   // This is necessary only if the client uses a self-signed certificate.\n     *   ca: [ fs.readFileSync('client-cert.pem') ],\n     * };\n     *\n     * const server = tls.createServer(options, (socket) => {\n     *   console.log('server connected',\n     *               socket.authorized ? 'authorized' : 'unauthorized');\n     *   socket.write('welcome!\\n');\n     *   socket.setEncoding('utf8');\n     *   socket.pipe(socket);\n     * });\n     * server.listen(8000, () => {\n     *   console.log('server bound');\n     * });\n     * ```\n     *\n     * The server can be tested by connecting to it using the example client from {@link connect}.\n     * @since v0.3.2\n     */\n    function createServer(secureConnectionListener?: (socket: TLSSocket) => void): Server;\n    function createServer(options: TlsOptions, secureConnectionListener?: (socket: TLSSocket) => void): Server;\n    /**\n     * The `callback` function, if specified, will be added as a listener for the `'secureConnect'` event.\n     *\n     * `tls.connect()` returns a {@link TLSSocket} object.\n     *\n     * Unlike the `https` API, `tls.connect()` does not enable the\n     * SNI (Server Name Indication) extension by default, which may cause some\n     * servers to return an incorrect certificate or reject the connection\n     * altogether. To enable SNI, set the `servername` option in addition\n     * to `host`.\n     *\n     * The following illustrates a client for the echo server example from {@link createServer}:\n     *\n     * ```js\n     * // Assumes an echo server that is listening on port 8000.\n     * import tls from 'node:tls';\n     * import fs from 'node:fs';\n     *\n     * const options = {\n     *   // Necessary only if the server requires client certificate authentication.\n     *   key: fs.readFileSync('client-key.pem'),\n     *   cert: fs.readFileSync('client-cert.pem'),\n     *\n     *   // Necessary only if the server uses a self-signed certificate.\n     *   ca: [ fs.readFileSync('server-cert.pem') ],\n     *\n     *   // Necessary only if the server's cert isn't for \"localhost\".\n     *   checkServerIdentity: () => { return null; },\n     * };\n     *\n     * const socket = tls.connect(8000, options, () => {\n     *   console.log('client connected',\n     *               socket.authorized ? 'authorized' : 'unauthorized');\n     *   process.stdin.pipe(socket);\n     *   process.stdin.resume();\n     * });\n     * socket.setEncoding('utf8');\n     * socket.on('data', (data) => {\n     *   console.log(data);\n     * });\n     * socket.on('end', () => {\n     *   console.log('server ends connection');\n     * });\n     * ```\n     * @since v0.11.3\n     */\n    function connect(options: ConnectionOptions, secureConnectListener?: () => void): TLSSocket;\n    function connect(\n        port: number,\n        host?: string,\n        options?: ConnectionOptions,\n        secureConnectListener?: () => void,\n    ): TLSSocket;\n    function connect(port: number, options?: ConnectionOptions, secureConnectListener?: () => void): TLSSocket;\n    /**\n     * Creates a new secure pair object with two streams, one of which reads and writes\n     * the encrypted data and the other of which reads and writes the cleartext data.\n     * Generally, the encrypted stream is piped to/from an incoming encrypted data\n     * stream and the cleartext one is used as a replacement for the initial encrypted\n     * stream.\n     *\n     * `tls.createSecurePair()` returns a `tls.SecurePair` object with `cleartext` and `encrypted` stream properties.\n     *\n     * Using `cleartext` has the same API as {@link TLSSocket}.\n     *\n     * The `tls.createSecurePair()` method is now deprecated in favor of`tls.TLSSocket()`. For example, the code:\n     *\n     * ```js\n     * pair = tls.createSecurePair(// ... );\n     * pair.encrypted.pipe(socket);\n     * socket.pipe(pair.encrypted);\n     * ```\n     *\n     * can be replaced by:\n     *\n     * ```js\n     * secureSocket = tls.TLSSocket(socket, options);\n     * ```\n     *\n     * where `secureSocket` has the same API as `pair.cleartext`.\n     * @since v0.3.2\n     * @deprecated Since v0.11.3 - Use {@link TLSSocket} instead.\n     * @param context A secure context object as returned by `tls.createSecureContext()`\n     * @param isServer `true` to specify that this TLS connection should be opened as a server.\n     * @param requestCert `true` to specify whether a server should request a certificate from a connecting client. Only applies when `isServer` is `true`.\n     * @param rejectUnauthorized If not `false` a server automatically reject clients with invalid certificates. Only applies when `isServer` is `true`.\n     */\n    function createSecurePair(\n        context?: SecureContext,\n        isServer?: boolean,\n        requestCert?: boolean,\n        rejectUnauthorized?: boolean,\n    ): SecurePair;\n    /**\n     * `{@link createServer}` sets the default value of the `honorCipherOrder` option\n     * to `true`, other APIs that create secure contexts leave it unset.\n     *\n     * `{@link createServer}` uses a 128 bit truncated SHA1 hash value generated\n     * from `process.argv` as the default value of the `sessionIdContext` option, other\n     * APIs that create secure contexts have no default value.\n     *\n     * The `tls.createSecureContext()` method creates a `SecureContext` object. It is\n     * usable as an argument to several `tls` APIs, such as `server.addContext()`,\n     * but has no public methods. The {@link Server} constructor and the {@link createServer} method do not support the `secureContext` option.\n     *\n     * A key is _required_ for ciphers that use certificates. Either `key` or `pfx` can be used to provide it.\n     *\n     * If the `ca` option is not given, then Node.js will default to using [Mozilla's publicly trusted list of\n     * CAs](https://hg.mozilla.org/mozilla-central/raw-file/tip/security/nss/lib/ckfw/builtins/certdata.txt).\n     *\n     * Custom DHE parameters are discouraged in favor of the new `dhparam: 'auto' `option. When set to `'auto'`, well-known DHE parameters of sufficient strength\n     * will be selected automatically. Otherwise, if necessary, `openssl dhparam` can\n     * be used to create custom parameters. The key length must be greater than or\n     * equal to 1024 bits or else an error will be thrown. Although 1024 bits is\n     * permissible, use 2048 bits or larger for stronger security.\n     * @since v0.11.13\n     */\n    function createSecureContext(options?: SecureContextOptions): SecureContext;\n    /**\n     * Returns an array containing the CA certificates from various sources, depending on `type`:\n     *\n     * * `\"default\"`: return the CA certificates that will be used by the Node.js TLS clients by default.\n     *   * When `--use-bundled-ca` is enabled (default), or `--use-openssl-ca` is not enabled,\n     *     this would include CA certificates from the bundled Mozilla CA store.\n     *   * When `--use-system-ca` is enabled, this would also include certificates from the system's\n     *     trusted store.\n     *   * When `NODE_EXTRA_CA_CERTS` is used, this would also include certificates loaded from the specified\n     *     file.\n     * * `\"system\"`: return the CA certificates that are loaded from the system's trusted store, according\n     *   to rules set by `--use-system-ca`. This can be used to get the certificates from the system\n     *   when `--use-system-ca` is not enabled.\n     * * `\"bundled\"`: return the CA certificates from the bundled Mozilla CA store. This would be the same\n     *   as `tls.rootCertificates`.\n     * * `\"extra\"`: return the CA certificates loaded from `NODE_EXTRA_CA_CERTS`. It's an empty array if\n     *   `NODE_EXTRA_CA_CERTS` is not set.\n     * @since v22.15.0\n     * @param type The type of CA certificates that will be returned. Valid values\n     * are `\"default\"`, `\"system\"`, `\"bundled\"` and `\"extra\"`.\n     * **Default:** `\"default\"`.\n     * @returns An array of PEM-encoded certificates. The array may contain duplicates\n     * if the same certificate is repeatedly stored in multiple sources.\n     */\n    function getCACertificates(type?: \"default\" | \"system\" | \"bundled\" | \"extra\"): string[];\n    /**\n     * Returns an array with the names of the supported TLS ciphers. The names are\n     * lower-case for historical reasons, but must be uppercased to be used in\n     * the `ciphers` option of `{@link createSecureContext}`.\n     *\n     * Not all supported ciphers are enabled by default. See\n     * [Modifying the default TLS cipher suite](https://nodejs.org/docs/latest-v22.x/api/tls.html#modifying-the-default-tls-cipher-suite).\n     *\n     * Cipher names that start with `'tls_'` are for TLSv1.3, all the others are for\n     * TLSv1.2 and below.\n     *\n     * ```js\n     * console.log(tls.getCiphers()); // ['aes128-gcm-sha256', 'aes128-sha', ...]\n     * ```\n     * @since v0.10.2\n     */\n    function getCiphers(): string[];\n    /**\n     * The default curve name to use for ECDH key agreement in a tls server.\n     * The default value is `'auto'`. See `{@link createSecureContext()}` for further\n     * information.\n     * @since v0.11.13\n     */\n    let DEFAULT_ECDH_CURVE: string;\n    /**\n     * The default value of the `maxVersion` option of `{@link createSecureContext()}`.\n     * It can be assigned any of the supported TLS protocol versions,\n     * `'TLSv1.3'`, `'TLSv1.2'`, `'TLSv1.1'`, or `'TLSv1'`. **Default:** `'TLSv1.3'`, unless\n     * changed using CLI options. Using `--tls-max-v1.2` sets the default to `'TLSv1.2'`. Using\n     * `--tls-max-v1.3` sets the default to `'TLSv1.3'`. If multiple of the options\n     * are provided, the highest maximum is used.\n     * @since v11.4.0\n     */\n    let DEFAULT_MAX_VERSION: SecureVersion;\n    /**\n     * The default value of the `minVersion` option of `{@link createSecureContext()}`.\n     * It can be assigned any of the supported TLS protocol versions,\n     * `'TLSv1.3'`, `'TLSv1.2'`, `'TLSv1.1'`, or `'TLSv1'`. **Default:** `'TLSv1.2'`, unless\n     * changed using CLI options. Using `--tls-min-v1.0` sets the default to\n     * `'TLSv1'`. Using `--tls-min-v1.1` sets the default to `'TLSv1.1'`. Using\n     * `--tls-min-v1.3` sets the default to `'TLSv1.3'`. If multiple of the options\n     * are provided, the lowest minimum is used.\n     * @since v11.4.0\n     */\n    let DEFAULT_MIN_VERSION: SecureVersion;\n    /**\n     * The default value of the `ciphers` option of `{@link createSecureContext()}`.\n     * It can be assigned any of the supported OpenSSL ciphers.\n     * Defaults to the content of `crypto.constants.defaultCoreCipherList`, unless\n     * changed using CLI options using `--tls-default-ciphers`.\n     * @since v19.8.0\n     */\n    let DEFAULT_CIPHERS: string;\n    /**\n     * An immutable array of strings representing the root certificates (in PEM format)\n     * from the bundled Mozilla CA store as supplied by the current Node.js version.\n     *\n     * The bundled CA store, as supplied by Node.js, is a snapshot of Mozilla CA store\n     * that is fixed at release time. It is identical on all supported platforms.\n     * @since v12.3.0\n     */\n    const rootCertificates: readonly string[];\n}\ndeclare module \"node:tls\" {\n    export * from \"tls\";\n}\n",
  '@types/node/trace_events.d.ts':
    "/**\n * The `node:trace_events` module provides a mechanism to centralize tracing information\n * generated by V8, Node.js core, and userspace code.\n *\n * Tracing can be enabled with the `--trace-event-categories` command-line flag\n * or by using the `trace_events` module. The `--trace-event-categories` flag\n * accepts a list of comma-separated category names.\n *\n * The available categories are:\n *\n * * `node`: An empty placeholder.\n * * `node.async_hooks`: Enables capture of detailed [`async_hooks`](https://nodejs.org/docs/latest-v22.x/api/async_hooks.html) trace data.\n * The [`async_hooks`](https://nodejs.org/docs/latest-v22.x/api/async_hooks.html) events have a unique `asyncId` and a special `triggerId` `triggerAsyncId` property.\n * * `node.bootstrap`: Enables capture of Node.js bootstrap milestones.\n * * `node.console`: Enables capture of `console.time()` and `console.count()` output.\n * * `node.threadpoolwork.sync`: Enables capture of trace data for threadpool synchronous operations, such as `blob`, `zlib`, `crypto` and `node_api`.\n * * `node.threadpoolwork.async`: Enables capture of trace data for threadpool asynchronous operations, such as `blob`, `zlib`, `crypto` and `node_api`.\n * * `node.dns.native`: Enables capture of trace data for DNS queries.\n * * `node.net.native`: Enables capture of trace data for network.\n * * `node.environment`: Enables capture of Node.js Environment milestones.\n * * `node.fs.sync`: Enables capture of trace data for file system sync methods.\n * * `node.fs_dir.sync`: Enables capture of trace data for file system sync directory methods.\n * * `node.fs.async`: Enables capture of trace data for file system async methods.\n * * `node.fs_dir.async`: Enables capture of trace data for file system async directory methods.\n * * `node.perf`: Enables capture of [Performance API](https://nodejs.org/docs/latest-v22.x/api/perf_hooks.html) measurements.\n *    * `node.perf.usertiming`: Enables capture of only Performance API User Timing\n *    measures and marks.\n *    * `node.perf.timerify`: Enables capture of only Performance API timerify\n *    measurements.\n * * `node.promises.rejections`: Enables capture of trace data tracking the number\n * of unhandled Promise rejections and handled-after-rejections.\n * * `node.vm.script`: Enables capture of trace data for the `node:vm` module's `runInNewContext()`, `runInContext()`, and `runInThisContext()` methods.\n * * `v8`: The [V8](https://nodejs.org/docs/latest-v22.x/api/v8.html) events are GC, compiling, and execution related.\n * * `node.http`: Enables capture of trace data for http request / response.\n *\n * By default the `node`, `node.async_hooks`, and `v8` categories are enabled.\n *\n * ```bash\n * node --trace-event-categories v8,node,node.async_hooks server.js\n * ```\n *\n * Prior versions of Node.js required the use of the `--trace-events-enabled` flag to enable trace events. This requirement has been removed. However, the `--trace-events-enabled` flag _may_ still be\n * used and will enable the `node`, `node.async_hooks`, and `v8` trace event categories by default.\n *\n * ```bash\n * node --trace-events-enabled\n *\n * # is equivalent to\n *\n * node --trace-event-categories v8,node,node.async_hooks\n * ```\n *\n * Alternatively, trace events may be enabled using the `node:trace_events` module:\n *\n * ```js\n * import trace_events from 'node:trace_events';\n * const tracing = trace_events.createTracing({ categories: ['node.perf'] });\n * tracing.enable();  // Enable trace event capture for the 'node.perf' category\n *\n * // do work\n *\n * tracing.disable();  // Disable trace event capture for the 'node.perf' category\n * ```\n *\n * Running Node.js with tracing enabled will produce log files that can be opened\n * in the [`chrome://tracing`](https://www.chromium.org/developers/how-tos/trace-event-profiling-tool) tab of Chrome.\n *\n * The logging file is by default called `node_trace.${rotation}.log`, where `${rotation}` is an incrementing log-rotation id. The filepath pattern can\n * be specified with `--trace-event-file-pattern` that accepts a template\n * string that supports `${rotation}` and `${pid}`:\n *\n * ```bash\n * node --trace-event-categories v8 --trace-event-file-pattern '${pid}-${rotation}.log' server.js\n * ```\n *\n * To guarantee that the log file is properly generated after signal events like `SIGINT`, `SIGTERM`, or `SIGBREAK`, make sure to have the appropriate handlers\n * in your code, such as:\n *\n * ```js\n * process.on('SIGINT', function onSigint() {\n *   console.info('Received SIGINT.');\n *   process.exit(130);  // Or applicable exit code depending on OS and signal\n * });\n * ```\n *\n * The tracing system uses the same time source\n * as the one used by `process.hrtime()`.\n * However the trace-event timestamps are expressed in microseconds,\n * unlike `process.hrtime()` which returns nanoseconds.\n *\n * The features from this module are not available in [`Worker`](https://nodejs.org/docs/latest-v22.x/api/worker_threads.html#class-worker) threads.\n * @experimental\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/trace_events.js)\n */\ndeclare module \"trace_events\" {\n    /**\n     * The `Tracing` object is used to enable or disable tracing for sets of\n     * categories. Instances are created using the\n     * `trace_events.createTracing()` method.\n     *\n     * When created, the `Tracing` object is disabled. Calling the\n     * `tracing.enable()` method adds the categories to the set of enabled trace\n     * event categories. Calling `tracing.disable()` will remove the categories\n     * from the set of enabled trace event categories.\n     */\n    interface Tracing {\n        /**\n         * A comma-separated list of the trace event categories covered by this\n         * `Tracing` object.\n         * @since v10.0.0\n         */\n        readonly categories: string;\n        /**\n         * Disables this `Tracing` object.\n         *\n         * Only trace event categories _not_ covered by other enabled `Tracing`\n         * objects and _not_ specified by the `--trace-event-categories` flag\n         * will be disabled.\n         *\n         * ```js\n         * import trace_events from 'node:trace_events';\n         * const t1 = trace_events.createTracing({ categories: ['node', 'v8'] });\n         * const t2 = trace_events.createTracing({ categories: ['node.perf', 'node'] });\n         * t1.enable();\n         * t2.enable();\n         *\n         * // Prints 'node,node.perf,v8'\n         * console.log(trace_events.getEnabledCategories());\n         *\n         * t2.disable(); // Will only disable emission of the 'node.perf' category\n         *\n         * // Prints 'node,v8'\n         * console.log(trace_events.getEnabledCategories());\n         * ```\n         * @since v10.0.0\n         */\n        disable(): void;\n        /**\n         * Enables this `Tracing` object for the set of categories covered by\n         * the `Tracing` object.\n         * @since v10.0.0\n         */\n        enable(): void;\n        /**\n         * `true` only if the `Tracing` object has been enabled.\n         * @since v10.0.0\n         */\n        readonly enabled: boolean;\n    }\n    interface CreateTracingOptions {\n        /**\n         * An array of trace category names. Values included in the array are\n         * coerced to a string when possible. An error will be thrown if the\n         * value cannot be coerced.\n         */\n        categories: string[];\n    }\n    /**\n     * Creates and returns a `Tracing` object for the given set of `categories`.\n     *\n     * ```js\n     * import trace_events from 'node:trace_events';\n     * const categories = ['node.perf', 'node.async_hooks'];\n     * const tracing = trace_events.createTracing({ categories });\n     * tracing.enable();\n     * // do stuff\n     * tracing.disable();\n     * ```\n     * @since v10.0.0\n     */\n    function createTracing(options: CreateTracingOptions): Tracing;\n    /**\n     * Returns a comma-separated list of all currently-enabled trace event\n     * categories. The current set of enabled trace event categories is determined\n     * by the _union_ of all currently-enabled `Tracing` objects and any categories\n     * enabled using the `--trace-event-categories` flag.\n     *\n     * Given the file `test.js` below, the command `node --trace-event-categories node.perf test.js` will print `'node.async_hooks,node.perf'` to the console.\n     *\n     * ```js\n     * import trace_events from 'node:trace_events';\n     * const t1 = trace_events.createTracing({ categories: ['node.async_hooks'] });\n     * const t2 = trace_events.createTracing({ categories: ['node.perf'] });\n     * const t3 = trace_events.createTracing({ categories: ['v8'] });\n     *\n     * t1.enable();\n     * t2.enable();\n     *\n     * console.log(trace_events.getEnabledCategories());\n     * ```\n     * @since v10.0.0\n     */\n    function getEnabledCategories(): string | undefined;\n}\ndeclare module \"node:trace_events\" {\n    export * from \"trace_events\";\n}\n",
  '@types/node/tty.d.ts':
    '/**\n * The `node:tty` module provides the `tty.ReadStream` and `tty.WriteStream` classes. In most cases, it will not be necessary or possible to use this module\n * directly. However, it can be accessed using:\n *\n * ```js\n * import tty from \'node:tty\';\n * ```\n *\n * When Node.js detects that it is being run with a text terminal ("TTY")\n * attached, `process.stdin` will, by default, be initialized as an instance of `tty.ReadStream` and both `process.stdout` and `process.stderr` will, by\n * default, be instances of `tty.WriteStream`. The preferred method of determining\n * whether Node.js is being run within a TTY context is to check that the value of\n * the `process.stdout.isTTY` property is `true`:\n *\n * ```console\n * $ node -p -e "Boolean(process.stdout.isTTY)"\n * true\n * $ node -p -e "Boolean(process.stdout.isTTY)" | cat\n * false\n * ```\n *\n * In most cases, there should be little to no reason for an application to\n * manually create instances of the `tty.ReadStream` and `tty.WriteStream` classes.\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/tty.js)\n */\ndeclare module "tty" {\n    import * as net from "node:net";\n    /**\n     * The `tty.isatty()` method returns `true` if the given `fd` is associated with\n     * a TTY and `false` if it is not, including whenever `fd` is not a non-negative\n     * integer.\n     * @since v0.5.8\n     * @param fd A numeric file descriptor\n     */\n    function isatty(fd: number): boolean;\n    /**\n     * Represents the readable side of a TTY. In normal circumstances `process.stdin` will be the only `tty.ReadStream` instance in a Node.js\n     * process and there should be no reason to create additional instances.\n     * @since v0.5.8\n     */\n    class ReadStream extends net.Socket {\n        constructor(fd: number, options?: net.SocketConstructorOpts);\n        /**\n         * A `boolean` that is `true` if the TTY is currently configured to operate as a\n         * raw device.\n         *\n         * This flag is always `false` when a process starts, even if the terminal is\n         * operating in raw mode. Its value will change with subsequent calls to `setRawMode`.\n         * @since v0.7.7\n         */\n        isRaw: boolean;\n        /**\n         * Allows configuration of `tty.ReadStream` so that it operates as a raw device.\n         *\n         * When in raw mode, input is always available character-by-character, not\n         * including modifiers. Additionally, all special processing of characters by the\n         * terminal is disabled, including echoing input\n         * characters. Ctrl+C will no longer cause a `SIGINT` when\n         * in this mode.\n         * @since v0.7.7\n         * @param mode If `true`, configures the `tty.ReadStream` to operate as a raw device. If `false`, configures the `tty.ReadStream` to operate in its default mode. The `readStream.isRaw`\n         * property will be set to the resulting mode.\n         * @return The read stream instance.\n         */\n        setRawMode(mode: boolean): this;\n        /**\n         * A `boolean` that is always `true` for `tty.ReadStream` instances.\n         * @since v0.5.8\n         */\n        isTTY: boolean;\n    }\n    /**\n     * -1 - to the left from cursor\n     *  0 - the entire line\n     *  1 - to the right from cursor\n     */\n    type Direction = -1 | 0 | 1;\n    /**\n     * Represents the writable side of a TTY. In normal circumstances, `process.stdout` and `process.stderr` will be the only`tty.WriteStream` instances created for a Node.js process and there\n     * should be no reason to create additional instances.\n     * @since v0.5.8\n     */\n    class WriteStream extends net.Socket {\n        constructor(fd: number);\n        addListener(event: string, listener: (...args: any[]) => void): this;\n        addListener(event: "resize", listener: () => void): this;\n        emit(event: string | symbol, ...args: any[]): boolean;\n        emit(event: "resize"): boolean;\n        on(event: string, listener: (...args: any[]) => void): this;\n        on(event: "resize", listener: () => void): this;\n        once(event: string, listener: (...args: any[]) => void): this;\n        once(event: "resize", listener: () => void): this;\n        prependListener(event: string, listener: (...args: any[]) => void): this;\n        prependListener(event: "resize", listener: () => void): this;\n        prependOnceListener(event: string, listener: (...args: any[]) => void): this;\n        prependOnceListener(event: "resize", listener: () => void): this;\n        /**\n         * `writeStream.clearLine()` clears the current line of this `WriteStream` in a\n         * direction identified by `dir`.\n         * @since v0.7.7\n         * @param callback Invoked once the operation completes.\n         * @return `false` if the stream wishes for the calling code to wait for the `\'drain\'` event to be emitted before continuing to write additional data; otherwise `true`.\n         */\n        clearLine(dir: Direction, callback?: () => void): boolean;\n        /**\n         * `writeStream.clearScreenDown()` clears this `WriteStream` from the current\n         * cursor down.\n         * @since v0.7.7\n         * @param callback Invoked once the operation completes.\n         * @return `false` if the stream wishes for the calling code to wait for the `\'drain\'` event to be emitted before continuing to write additional data; otherwise `true`.\n         */\n        clearScreenDown(callback?: () => void): boolean;\n        /**\n         * `writeStream.cursorTo()` moves this `WriteStream`\'s cursor to the specified\n         * position.\n         * @since v0.7.7\n         * @param callback Invoked once the operation completes.\n         * @return `false` if the stream wishes for the calling code to wait for the `\'drain\'` event to be emitted before continuing to write additional data; otherwise `true`.\n         */\n        cursorTo(x: number, y?: number, callback?: () => void): boolean;\n        cursorTo(x: number, callback: () => void): boolean;\n        /**\n         * `writeStream.moveCursor()` moves this `WriteStream`\'s cursor _relative_ to its\n         * current position.\n         * @since v0.7.7\n         * @param callback Invoked once the operation completes.\n         * @return `false` if the stream wishes for the calling code to wait for the `\'drain\'` event to be emitted before continuing to write additional data; otherwise `true`.\n         */\n        moveCursor(dx: number, dy: number, callback?: () => void): boolean;\n        /**\n         * Returns:\n         *\n         * * `1` for 2,\n         * * `4` for 16,\n         * * `8` for 256,\n         * * `24` for 16,777,216 colors supported.\n         *\n         * Use this to determine what colors the terminal supports. Due to the nature of\n         * colors in terminals it is possible to either have false positives or false\n         * negatives. It depends on process information and the environment variables that\n         * may lie about what terminal is used.\n         * It is possible to pass in an `env` object to simulate the usage of a specific\n         * terminal. This can be useful to check how specific environment settings behave.\n         *\n         * To enforce a specific color support, use one of the below environment settings.\n         *\n         * * 2 colors: `FORCE_COLOR = 0` (Disables colors)\n         * * 16 colors: `FORCE_COLOR = 1`\n         * * 256 colors: `FORCE_COLOR = 2`\n         * * 16,777,216 colors: `FORCE_COLOR = 3`\n         *\n         * Disabling color support is also possible by using the `NO_COLOR` and `NODE_DISABLE_COLORS` environment variables.\n         * @since v9.9.0\n         * @param [env=process.env] An object containing the environment variables to check. This enables simulating the usage of a specific terminal.\n         */\n        getColorDepth(env?: object): number;\n        /**\n         * Returns `true` if the `writeStream` supports at least as many colors as provided\n         * in `count`. Minimum support is 2 (black and white).\n         *\n         * This has the same false positives and negatives as described in `writeStream.getColorDepth()`.\n         *\n         * ```js\n         * process.stdout.hasColors();\n         * // Returns true or false depending on if `stdout` supports at least 16 colors.\n         * process.stdout.hasColors(256);\n         * // Returns true or false depending on if `stdout` supports at least 256 colors.\n         * process.stdout.hasColors({ TMUX: \'1\' });\n         * // Returns true.\n         * process.stdout.hasColors(2 ** 24, { TMUX: \'1\' });\n         * // Returns false (the environment setting pretends to support 2 ** 8 colors).\n         * ```\n         * @since v11.13.0, v10.16.0\n         * @param [count=16] The number of colors that are requested (minimum 2).\n         * @param [env=process.env] An object containing the environment variables to check. This enables simulating the usage of a specific terminal.\n         */\n        hasColors(count?: number): boolean;\n        hasColors(env?: object): boolean;\n        hasColors(count: number, env?: object): boolean;\n        /**\n         * `writeStream.getWindowSize()` returns the size of the TTY\n         * corresponding to this `WriteStream`. The array is of the type `[numColumns, numRows]` where `numColumns` and `numRows` represent the number\n         * of columns and rows in the corresponding TTY.\n         * @since v0.7.7\n         */\n        getWindowSize(): [number, number];\n        /**\n         * A `number` specifying the number of columns the TTY currently has. This property\n         * is updated whenever the `\'resize\'` event is emitted.\n         * @since v0.7.7\n         */\n        columns: number;\n        /**\n         * A `number` specifying the number of rows the TTY currently has. This property\n         * is updated whenever the `\'resize\'` event is emitted.\n         * @since v0.7.7\n         */\n        rows: number;\n        /**\n         * A `boolean` that is always `true`.\n         * @since v0.5.8\n         */\n        isTTY: boolean;\n    }\n}\ndeclare module "node:tty" {\n    export * from "tty";\n}\n',
  '@types/node/url.d.ts':
    "/**\n * The `node:url` module provides utilities for URL resolution and parsing. It can\n * be accessed using:\n *\n * ```js\n * import url from 'node:url';\n * ```\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/url.js)\n */\ndeclare module \"url\" {\n    import { Blob as NodeBlob } from \"node:buffer\";\n    import { ClientRequestArgs } from \"node:http\";\n    import { ParsedUrlQuery, ParsedUrlQueryInput } from \"node:querystring\";\n    // Input to `url.format`\n    interface UrlObject {\n        auth?: string | null | undefined;\n        hash?: string | null | undefined;\n        host?: string | null | undefined;\n        hostname?: string | null | undefined;\n        href?: string | null | undefined;\n        pathname?: string | null | undefined;\n        protocol?: string | null | undefined;\n        search?: string | null | undefined;\n        slashes?: boolean | null | undefined;\n        port?: string | number | null | undefined;\n        query?: string | null | ParsedUrlQueryInput | undefined;\n    }\n    // Output of `url.parse`\n    interface Url {\n        auth: string | null;\n        hash: string | null;\n        host: string | null;\n        hostname: string | null;\n        href: string;\n        path: string | null;\n        pathname: string | null;\n        protocol: string | null;\n        search: string | null;\n        slashes: boolean | null;\n        port: string | null;\n        query: string | null | ParsedUrlQuery;\n    }\n    interface UrlWithParsedQuery extends Url {\n        query: ParsedUrlQuery;\n    }\n    interface UrlWithStringQuery extends Url {\n        query: string | null;\n    }\n    interface FileUrlToPathOptions {\n        /**\n         * `true` if the `path` should be return as a windows filepath, `false` for posix, and `undefined` for the system default.\n         * @default undefined\n         * @since v22.1.0\n         */\n        windows?: boolean | undefined;\n    }\n    interface PathToFileUrlOptions {\n        /**\n         * `true` if the `path` should be return as a windows filepath, `false` for posix, and `undefined` for the system default.\n         * @default undefined\n         * @since v22.1.0\n         */\n        windows?: boolean | undefined;\n    }\n    /**\n     * The `url.parse()` method takes a URL string, parses it, and returns a URL\n     * object.\n     *\n     * A `TypeError` is thrown if `urlString` is not a string.\n     *\n     * A `URIError` is thrown if the `auth` property is present but cannot be decoded.\n     *\n     * `url.parse()` uses a lenient, non-standard algorithm for parsing URL\n     * strings. It is prone to security issues such as [host name spoofing](https://hackerone.com/reports/678487) and incorrect handling of usernames and passwords. Do not use with untrusted\n     * input. CVEs are not issued for `url.parse()` vulnerabilities. Use the `WHATWG URL` API instead.\n     * @since v0.1.25\n     * @deprecated Use the WHATWG URL API instead.\n     * @param urlString The URL string to parse.\n     * @param [parseQueryString=false] If `true`, the `query` property will always be set to an object returned by the {@link querystring} module's `parse()` method. If `false`, the `query` property\n     * on the returned URL object will be an unparsed, undecoded string.\n     * @param [slashesDenoteHost=false] If `true`, the first token after the literal string `//` and preceding the next `/` will be interpreted as the `host`. For instance, given `//foo/bar`, the\n     * result would be `{host: 'foo', pathname: '/bar'}` rather than `{pathname: '//foo/bar'}`.\n     */\n    function parse(urlString: string): UrlWithStringQuery;\n    function parse(\n        urlString: string,\n        parseQueryString: false | undefined,\n        slashesDenoteHost?: boolean,\n    ): UrlWithStringQuery;\n    function parse(urlString: string, parseQueryString: true, slashesDenoteHost?: boolean): UrlWithParsedQuery;\n    function parse(urlString: string, parseQueryString: boolean, slashesDenoteHost?: boolean): Url;\n    /**\n     * The `url.format()` method returns a formatted URL string derived from `urlObject`.\n     *\n     * ```js\n     * import url from 'node:url';\n     * url.format({\n     *   protocol: 'https',\n     *   hostname: 'example.com',\n     *   pathname: '/some/path',\n     *   query: {\n     *     page: 1,\n     *     format: 'json',\n     *   },\n     * });\n     *\n     * // => 'https://example.com/some/path?page=1&#x26;format=json'\n     * ```\n     *\n     * If `urlObject` is not an object or a string, `url.format()` will throw a `TypeError`.\n     *\n     * The formatting process operates as follows:\n     *\n     * * A new empty string `result` is created.\n     * * If `urlObject.protocol` is a string, it is appended as-is to `result`.\n     * * Otherwise, if `urlObject.protocol` is not `undefined` and is not a string, an `Error` is thrown.\n     * * For all string values of `urlObject.protocol` that _do not end_ with an ASCII\n     * colon (`:`) character, the literal string `:` will be appended to `result`.\n     * * If either of the following conditions is true, then the literal string `//` will be appended to `result`:\n     *    * `urlObject.slashes` property is true;\n     *    * `urlObject.protocol` begins with `http`, `https`, `ftp`, `gopher`, or `file`;\n     * * If the value of the `urlObject.auth` property is truthy, and either `urlObject.host` or `urlObject.hostname` are not `undefined`, the value of `urlObject.auth` will be coerced into a string\n     * and appended to `result` followed by the literal string `@`.\n     * * If the `urlObject.host` property is `undefined` then:\n     *    * If the `urlObject.hostname` is a string, it is appended to `result`.\n     *    * Otherwise, if `urlObject.hostname` is not `undefined` and is not a string,\n     *    an `Error` is thrown.\n     *    * If the `urlObject.port` property value is truthy, and `urlObject.hostname` is not `undefined`:\n     *          * The literal string `:` is appended to `result`, and\n     *          * The value of `urlObject.port` is coerced to a string and appended to `result`.\n     * * Otherwise, if the `urlObject.host` property value is truthy, the value of `urlObject.host` is coerced to a string and appended to `result`.\n     * * If the `urlObject.pathname` property is a string that is not an empty string:\n     *    * If the `urlObject.pathname` _does not start_ with an ASCII forward slash\n     *    (`/`), then the literal string `'/'` is appended to `result`.\n     *    * The value of `urlObject.pathname` is appended to `result`.\n     * * Otherwise, if `urlObject.pathname` is not `undefined` and is not a string, an `Error` is thrown.\n     * * If the `urlObject.search` property is `undefined` and if the `urlObject.query`property is an `Object`, the literal string `?` is appended to `result` followed by the output of calling the\n     * `querystring` module's `stringify()` method passing the value of `urlObject.query`.\n     * * Otherwise, if `urlObject.search` is a string:\n     *    * If the value of `urlObject.search` _does not start_ with the ASCII question\n     *    mark (`?`) character, the literal string `?` is appended to `result`.\n     *    * The value of `urlObject.search` is appended to `result`.\n     * * Otherwise, if `urlObject.search` is not `undefined` and is not a string, an `Error` is thrown.\n     * * If the `urlObject.hash` property is a string:\n     *    * If the value of `urlObject.hash` _does not start_ with the ASCII hash (`#`)\n     *    character, the literal string `#` is appended to `result`.\n     *    * The value of `urlObject.hash` is appended to `result`.\n     * * Otherwise, if the `urlObject.hash` property is not `undefined` and is not a\n     * string, an `Error` is thrown.\n     * * `result` is returned.\n     * @since v0.1.25\n     * @legacy Use the WHATWG URL API instead.\n     * @param urlObject A URL object (as returned by `url.parse()` or constructed otherwise). If a string, it is converted to an object by passing it to `url.parse()`.\n     */\n    function format(urlObject: URL, options?: URLFormatOptions): string;\n    /**\n     * The `url.format()` method returns a formatted URL string derived from `urlObject`.\n     *\n     * ```js\n     * import url from 'node:url';\n     * url.format({\n     *   protocol: 'https',\n     *   hostname: 'example.com',\n     *   pathname: '/some/path',\n     *   query: {\n     *     page: 1,\n     *     format: 'json',\n     *   },\n     * });\n     *\n     * // => 'https://example.com/some/path?page=1&#x26;format=json'\n     * ```\n     *\n     * If `urlObject` is not an object or a string, `url.format()` will throw a `TypeError`.\n     *\n     * The formatting process operates as follows:\n     *\n     * * A new empty string `result` is created.\n     * * If `urlObject.protocol` is a string, it is appended as-is to `result`.\n     * * Otherwise, if `urlObject.protocol` is not `undefined` and is not a string, an `Error` is thrown.\n     * * For all string values of `urlObject.protocol` that _do not end_ with an ASCII\n     * colon (`:`) character, the literal string `:` will be appended to `result`.\n     * * If either of the following conditions is true, then the literal string `//` will be appended to `result`:\n     *    * `urlObject.slashes` property is true;\n     *    * `urlObject.protocol` begins with `http`, `https`, `ftp`, `gopher`, or `file`;\n     * * If the value of the `urlObject.auth` property is truthy, and either `urlObject.host` or `urlObject.hostname` are not `undefined`, the value of `urlObject.auth` will be coerced into a string\n     * and appended to `result` followed by the literal string `@`.\n     * * If the `urlObject.host` property is `undefined` then:\n     *    * If the `urlObject.hostname` is a string, it is appended to `result`.\n     *    * Otherwise, if `urlObject.hostname` is not `undefined` and is not a string,\n     *    an `Error` is thrown.\n     *    * If the `urlObject.port` property value is truthy, and `urlObject.hostname` is not `undefined`:\n     *          * The literal string `:` is appended to `result`, and\n     *          * The value of `urlObject.port` is coerced to a string and appended to `result`.\n     * * Otherwise, if the `urlObject.host` property value is truthy, the value of `urlObject.host` is coerced to a string and appended to `result`.\n     * * If the `urlObject.pathname` property is a string that is not an empty string:\n     *    * If the `urlObject.pathname` _does not start_ with an ASCII forward slash\n     *    (`/`), then the literal string `'/'` is appended to `result`.\n     *    * The value of `urlObject.pathname` is appended to `result`.\n     * * Otherwise, if `urlObject.pathname` is not `undefined` and is not a string, an `Error` is thrown.\n     * * If the `urlObject.search` property is `undefined` and if the `urlObject.query`property is an `Object`, the literal string `?` is appended to `result` followed by the output of calling the\n     * `querystring` module's `stringify()` method passing the value of `urlObject.query`.\n     * * Otherwise, if `urlObject.search` is a string:\n     *    * If the value of `urlObject.search` _does not start_ with the ASCII question\n     *    mark (`?`) character, the literal string `?` is appended to `result`.\n     *    * The value of `urlObject.search` is appended to `result`.\n     * * Otherwise, if `urlObject.search` is not `undefined` and is not a string, an `Error` is thrown.\n     * * If the `urlObject.hash` property is a string:\n     *    * If the value of `urlObject.hash` _does not start_ with the ASCII hash (`#`)\n     *    character, the literal string `#` is appended to `result`.\n     *    * The value of `urlObject.hash` is appended to `result`.\n     * * Otherwise, if the `urlObject.hash` property is not `undefined` and is not a\n     * string, an `Error` is thrown.\n     * * `result` is returned.\n     * @since v0.1.25\n     * @legacy Use the WHATWG URL API instead.\n     * @param urlObject A URL object (as returned by `url.parse()` or constructed otherwise). If a string, it is converted to an object by passing it to `url.parse()`.\n     */\n    function format(urlObject: UrlObject | string): string;\n    /**\n     * The `url.resolve()` method resolves a target URL relative to a base URL in a\n     * manner similar to that of a web browser resolving an anchor tag.\n     *\n     * ```js\n     * import url from 'node:url';\n     * url.resolve('/one/two/three', 'four');         // '/one/two/four'\n     * url.resolve('http://example.com/', '/one');    // 'http://example.com/one'\n     * url.resolve('http://example.com/one', '/two'); // 'http://example.com/two'\n     * ```\n     *\n     * To achieve the same result using the WHATWG URL API:\n     *\n     * ```js\n     * function resolve(from, to) {\n     *   const resolvedUrl = new URL(to, new URL(from, 'resolve://'));\n     *   if (resolvedUrl.protocol === 'resolve:') {\n     *     // `from` is a relative URL.\n     *     const { pathname, search, hash } = resolvedUrl;\n     *     return pathname + search + hash;\n     *   }\n     *   return resolvedUrl.toString();\n     * }\n     *\n     * resolve('/one/two/three', 'four');         // '/one/two/four'\n     * resolve('http://example.com/', '/one');    // 'http://example.com/one'\n     * resolve('http://example.com/one', '/two'); // 'http://example.com/two'\n     * ```\n     * @since v0.1.25\n     * @legacy Use the WHATWG URL API instead.\n     * @param from The base URL to use if `to` is a relative URL.\n     * @param to The target URL to resolve.\n     */\n    function resolve(from: string, to: string): string;\n    /**\n     * Returns the [Punycode](https://tools.ietf.org/html/rfc5891#section-4.4) ASCII serialization of the `domain`. If `domain` is an\n     * invalid domain, the empty string is returned.\n     *\n     * It performs the inverse operation to {@link domainToUnicode}.\n     *\n     * ```js\n     * import url from 'node:url';\n     *\n     * console.log(url.domainToASCII('español.com'));\n     * // Prints xn--espaol-zwa.com\n     * console.log(url.domainToASCII('中文.com'));\n     * // Prints xn--fiq228c.com\n     * console.log(url.domainToASCII('xn--iñvalid.com'));\n     * // Prints an empty string\n     * ```\n     * @since v7.4.0, v6.13.0\n     */\n    function domainToASCII(domain: string): string;\n    /**\n     * Returns the Unicode serialization of the `domain`. If `domain` is an invalid\n     * domain, the empty string is returned.\n     *\n     * It performs the inverse operation to {@link domainToASCII}.\n     *\n     * ```js\n     * import url from 'node:url';\n     *\n     * console.log(url.domainToUnicode('xn--espaol-zwa.com'));\n     * // Prints español.com\n     * console.log(url.domainToUnicode('xn--fiq228c.com'));\n     * // Prints 中文.com\n     * console.log(url.domainToUnicode('xn--iñvalid.com'));\n     * // Prints an empty string\n     * ```\n     * @since v7.4.0, v6.13.0\n     */\n    function domainToUnicode(domain: string): string;\n    /**\n     * This function ensures the correct decodings of percent-encoded characters as\n     * well as ensuring a cross-platform valid absolute path string.\n     *\n     * ```js\n     * import { fileURLToPath } from 'node:url';\n     *\n     * const __filename = fileURLToPath(import.meta.url);\n     *\n     * new URL('file:///C:/path/').pathname;      // Incorrect: /C:/path/\n     * fileURLToPath('file:///C:/path/');         // Correct:   C:\\path\\ (Windows)\n     *\n     * new URL('file://nas/foo.txt').pathname;    // Incorrect: /foo.txt\n     * fileURLToPath('file://nas/foo.txt');       // Correct:   \\\\nas\\foo.txt (Windows)\n     *\n     * new URL('file:///你好.txt').pathname;      // Incorrect: /%E4%BD%A0%E5%A5%BD.txt\n     * fileURLToPath('file:///你好.txt');         // Correct:   /你好.txt (POSIX)\n     *\n     * new URL('file:///hello world').pathname;   // Incorrect: /hello%20world\n     * fileURLToPath('file:///hello world');      // Correct:   /hello world (POSIX)\n     * ```\n     * @since v10.12.0\n     * @param url The file URL string or URL object to convert to a path.\n     * @return The fully-resolved platform-specific Node.js file path.\n     */\n    function fileURLToPath(url: string | URL, options?: FileUrlToPathOptions): string;\n    /**\n     * This function ensures that `path` is resolved absolutely, and that the URL\n     * control characters are correctly encoded when converting into a File URL.\n     *\n     * ```js\n     * import { pathToFileURL } from 'node:url';\n     *\n     * new URL('/foo#1', 'file:');           // Incorrect: file:///foo#1\n     * pathToFileURL('/foo#1');              // Correct:   file:///foo%231 (POSIX)\n     *\n     * new URL('/some/path%.c', 'file:');    // Incorrect: file:///some/path%.c\n     * pathToFileURL('/some/path%.c');       // Correct:   file:///some/path%25.c (POSIX)\n     * ```\n     * @since v10.12.0\n     * @param path The path to convert to a File URL.\n     * @return The file URL object.\n     */\n    function pathToFileURL(path: string, options?: PathToFileUrlOptions): URL;\n    /**\n     * This utility function converts a URL object into an ordinary options object as\n     * expected by the `http.request()` and `https.request()` APIs.\n     *\n     * ```js\n     * import { urlToHttpOptions } from 'node:url';\n     * const myURL = new URL('https://a:b@測試?abc#foo');\n     *\n     * console.log(urlToHttpOptions(myURL));\n     * /*\n     * {\n     *   protocol: 'https:',\n     *   hostname: 'xn--g6w251d',\n     *   hash: '#foo',\n     *   search: '?abc',\n     *   pathname: '/',\n     *   path: '/?abc',\n     *   href: 'https://a:b@xn--g6w251d/?abc#foo',\n     *   auth: 'a:b'\n     * }\n     *\n     * ```\n     * @since v15.7.0, v14.18.0\n     * @param url The `WHATWG URL` object to convert to an options object.\n     * @return Options object\n     */\n    function urlToHttpOptions(url: URL): ClientRequestArgs;\n    interface URLFormatOptions {\n        /**\n         * `true` if the serialized URL string should include the username and password, `false` otherwise.\n         * @default true\n         */\n        auth?: boolean | undefined;\n        /**\n         * `true` if the serialized URL string should include the fragment, `false` otherwise.\n         * @default true\n         */\n        fragment?: boolean | undefined;\n        /**\n         * `true` if the serialized URL string should include the search query, `false` otherwise.\n         * @default true\n         */\n        search?: boolean | undefined;\n        /**\n         * `true` if Unicode characters appearing in the host component of the URL string should be encoded directly as opposed to\n         * being Punycode encoded.\n         * @default false\n         */\n        unicode?: boolean | undefined;\n    }\n    /**\n     * Browser-compatible `URL` class, implemented by following the WHATWG URL\n     * Standard. [Examples of parsed URLs](https://url.spec.whatwg.org/#example-url-parsing) may be found in the Standard itself.\n     * The `URL` class is also available on the global object.\n     *\n     * In accordance with browser conventions, all properties of `URL` objects\n     * are implemented as getters and setters on the class prototype, rather than as\n     * data properties on the object itself. Thus, unlike `legacy urlObject`s,\n     * using the `delete` keyword on any properties of `URL` objects (e.g. `delete myURL.protocol`, `delete myURL.pathname`, etc) has no effect but will still\n     * return `true`.\n     * @since v7.0.0, v6.13.0\n     */\n    class URL {\n        /**\n         * Creates a `'blob:nodedata:...'` URL string that represents the given `Blob` object and can be used to retrieve the `Blob` later.\n         *\n         * ```js\n         * import {\n         *   Blob,\n         *   resolveObjectURL,\n         * } from 'node:buffer';\n         *\n         * const blob = new Blob(['hello']);\n         * const id = URL.createObjectURL(blob);\n         *\n         * // later...\n         *\n         * const otherBlob = resolveObjectURL(id);\n         * console.log(otherBlob.size);\n         * ```\n         *\n         * The data stored by the registered `Blob` will be retained in memory until `URL.revokeObjectURL()` is called to remove it.\n         *\n         * `Blob` objects are registered within the current thread. If using Worker\n         * Threads, `Blob` objects registered within one Worker will not be available\n         * to other workers or the main thread.\n         * @since v16.7.0\n         * @experimental\n         */\n        static createObjectURL(blob: NodeBlob): string;\n        /**\n         * Removes the stored `Blob` identified by the given ID. Attempting to revoke a\n         * ID that isn't registered will silently fail.\n         * @since v16.7.0\n         * @experimental\n         * @param id A `'blob:nodedata:...` URL string returned by a prior call to `URL.createObjectURL()`.\n         */\n        static revokeObjectURL(id: string): void;\n        /**\n         * Checks if an `input` relative to the `base` can be parsed to a `URL`.\n         *\n         * ```js\n         * const isValid = URL.canParse('/foo', 'https://example.org/'); // true\n         *\n         * const isNotValid = URL.canParse('/foo'); // false\n         * ```\n         * @since v19.9.0\n         * @param input The absolute or relative input URL to parse. If `input` is relative, then `base` is required. If `input` is absolute, the `base` is ignored. If `input` is not a string, it is\n         * `converted to a string` first.\n         * @param base The base URL to resolve against if the `input` is not absolute. If `base` is not a string, it is `converted to a string` first.\n         */\n        static canParse(input: string, base?: string): boolean;\n        /**\n         * Parses a string as a URL. If `base` is provided, it will be used as the base URL for the purpose of resolving non-absolute `input` URLs.\n         * Returns `null` if `input` is not a valid.\n         * @param input The absolute or relative input URL to parse. If `input` is relative, then `base` is required. If `input` is absolute, the `base` is ignored. If `input` is not a string, it is\n         * `converted to a string` first.\n         * @param base The base URL to resolve against if the `input` is not absolute. If `base` is not a string, it is `converted to a string` first.\n         * @since v22.1.0\n         */\n        static parse(input: string, base?: string): URL | null;\n        constructor(input: string | { toString: () => string }, base?: string | URL);\n        /**\n         * Gets and sets the fragment portion of the URL.\n         *\n         * ```js\n         * const myURL = new URL('https://example.org/foo#bar');\n         * console.log(myURL.hash);\n         * // Prints #bar\n         *\n         * myURL.hash = 'baz';\n         * console.log(myURL.href);\n         * // Prints https://example.org/foo#baz\n         * ```\n         *\n         * Invalid URL characters included in the value assigned to the `hash` property\n         * are `percent-encoded`. The selection of which characters to\n         * percent-encode may vary somewhat from what the {@link parse} and {@link format} methods would produce.\n         */\n        hash: string;\n        /**\n         * Gets and sets the host portion of the URL.\n         *\n         * ```js\n         * const myURL = new URL('https://example.org:81/foo');\n         * console.log(myURL.host);\n         * // Prints example.org:81\n         *\n         * myURL.host = 'example.com:82';\n         * console.log(myURL.href);\n         * // Prints https://example.com:82/foo\n         * ```\n         *\n         * Invalid host values assigned to the `host` property are ignored.\n         */\n        host: string;\n        /**\n         * Gets and sets the host name portion of the URL. The key difference between`url.host` and `url.hostname` is that `url.hostname` does _not_ include the\n         * port.\n         *\n         * ```js\n         * const myURL = new URL('https://example.org:81/foo');\n         * console.log(myURL.hostname);\n         * // Prints example.org\n         *\n         * // Setting the hostname does not change the port\n         * myURL.hostname = 'example.com';\n         * console.log(myURL.href);\n         * // Prints https://example.com:81/foo\n         *\n         * // Use myURL.host to change the hostname and port\n         * myURL.host = 'example.org:82';\n         * console.log(myURL.href);\n         * // Prints https://example.org:82/foo\n         * ```\n         *\n         * Invalid host name values assigned to the `hostname` property are ignored.\n         */\n        hostname: string;\n        /**\n         * Gets and sets the serialized URL.\n         *\n         * ```js\n         * const myURL = new URL('https://example.org/foo');\n         * console.log(myURL.href);\n         * // Prints https://example.org/foo\n         *\n         * myURL.href = 'https://example.com/bar';\n         * console.log(myURL.href);\n         * // Prints https://example.com/bar\n         * ```\n         *\n         * Getting the value of the `href` property is equivalent to calling {@link toString}.\n         *\n         * Setting the value of this property to a new value is equivalent to creating a\n         * new `URL` object using `new URL(value)`. Each of the `URL` object's properties will be modified.\n         *\n         * If the value assigned to the `href` property is not a valid URL, a `TypeError` will be thrown.\n         */\n        href: string;\n        /**\n         * Gets the read-only serialization of the URL's origin.\n         *\n         * ```js\n         * const myURL = new URL('https://example.org/foo/bar?baz');\n         * console.log(myURL.origin);\n         * // Prints https://example.org\n         * ```\n         *\n         * ```js\n         * const idnURL = new URL('https://測試');\n         * console.log(idnURL.origin);\n         * // Prints https://xn--g6w251d\n         *\n         * console.log(idnURL.hostname);\n         * // Prints xn--g6w251d\n         * ```\n         */\n        readonly origin: string;\n        /**\n         * Gets and sets the password portion of the URL.\n         *\n         * ```js\n         * const myURL = new URL('https://abc:xyz@example.com');\n         * console.log(myURL.password);\n         * // Prints xyz\n         *\n         * myURL.password = '123';\n         * console.log(myURL.href);\n         * // Prints https://abc:123@example.com/\n         * ```\n         *\n         * Invalid URL characters included in the value assigned to the `password` property\n         * are `percent-encoded`. The selection of which characters to\n         * percent-encode may vary somewhat from what the {@link parse} and {@link format} methods would produce.\n         */\n        password: string;\n        /**\n         * Gets and sets the path portion of the URL.\n         *\n         * ```js\n         * const myURL = new URL('https://example.org/abc/xyz?123');\n         * console.log(myURL.pathname);\n         * // Prints /abc/xyz\n         *\n         * myURL.pathname = '/abcdef';\n         * console.log(myURL.href);\n         * // Prints https://example.org/abcdef?123\n         * ```\n         *\n         * Invalid URL characters included in the value assigned to the `pathname` property are `percent-encoded`. The selection of which characters\n         * to percent-encode may vary somewhat from what the {@link parse} and {@link format} methods would produce.\n         */\n        pathname: string;\n        /**\n         * Gets and sets the port portion of the URL.\n         *\n         * The port value may be a number or a string containing a number in the range `0` to `65535` (inclusive). Setting the value to the default port of the `URL` objects given `protocol` will\n         * result in the `port` value becoming\n         * the empty string (`''`).\n         *\n         * The port value can be an empty string in which case the port depends on\n         * the protocol/scheme:\n         *\n         * <omitted>\n         *\n         * Upon assigning a value to the port, the value will first be converted to a\n         * string using `.toString()`.\n         *\n         * If that string is invalid but it begins with a number, the leading number is\n         * assigned to `port`.\n         * If the number lies outside the range denoted above, it is ignored.\n         *\n         * ```js\n         * const myURL = new URL('https://example.org:8888');\n         * console.log(myURL.port);\n         * // Prints 8888\n         *\n         * // Default ports are automatically transformed to the empty string\n         * // (HTTPS protocol's default port is 443)\n         * myURL.port = '443';\n         * console.log(myURL.port);\n         * // Prints the empty string\n         * console.log(myURL.href);\n         * // Prints https://example.org/\n         *\n         * myURL.port = 1234;\n         * console.log(myURL.port);\n         * // Prints 1234\n         * console.log(myURL.href);\n         * // Prints https://example.org:1234/\n         *\n         * // Completely invalid port strings are ignored\n         * myURL.port = 'abcd';\n         * console.log(myURL.port);\n         * // Prints 1234\n         *\n         * // Leading numbers are treated as a port number\n         * myURL.port = '5678abcd';\n         * console.log(myURL.port);\n         * // Prints 5678\n         *\n         * // Non-integers are truncated\n         * myURL.port = 1234.5678;\n         * console.log(myURL.port);\n         * // Prints 1234\n         *\n         * // Out-of-range numbers which are not represented in scientific notation\n         * // will be ignored.\n         * myURL.port = 1e10; // 10000000000, will be range-checked as described below\n         * console.log(myURL.port);\n         * // Prints 1234\n         * ```\n         *\n         * Numbers which contain a decimal point,\n         * such as floating-point numbers or numbers in scientific notation,\n         * are not an exception to this rule.\n         * Leading numbers up to the decimal point will be set as the URL's port,\n         * assuming they are valid:\n         *\n         * ```js\n         * myURL.port = 4.567e21;\n         * console.log(myURL.port);\n         * // Prints 4 (because it is the leading number in the string '4.567e21')\n         * ```\n         */\n        port: string;\n        /**\n         * Gets and sets the protocol portion of the URL.\n         *\n         * ```js\n         * const myURL = new URL('https://example.org');\n         * console.log(myURL.protocol);\n         * // Prints https:\n         *\n         * myURL.protocol = 'ftp';\n         * console.log(myURL.href);\n         * // Prints ftp://example.org/\n         * ```\n         *\n         * Invalid URL protocol values assigned to the `protocol` property are ignored.\n         */\n        protocol: string;\n        /**\n         * Gets and sets the serialized query portion of the URL.\n         *\n         * ```js\n         * const myURL = new URL('https://example.org/abc?123');\n         * console.log(myURL.search);\n         * // Prints ?123\n         *\n         * myURL.search = 'abc=xyz';\n         * console.log(myURL.href);\n         * // Prints https://example.org/abc?abc=xyz\n         * ```\n         *\n         * Any invalid URL characters appearing in the value assigned the `search` property will be `percent-encoded`. The selection of which\n         * characters to percent-encode may vary somewhat from what the {@link parse} and {@link format} methods would produce.\n         */\n        search: string;\n        /**\n         * Gets the `URLSearchParams` object representing the query parameters of the\n         * URL. This property is read-only but the `URLSearchParams` object it provides\n         * can be used to mutate the URL instance; to replace the entirety of query\n         * parameters of the URL, use the {@link search} setter. See `URLSearchParams` documentation for details.\n         *\n         * Use care when using `.searchParams` to modify the `URL` because,\n         * per the WHATWG specification, the `URLSearchParams` object uses\n         * different rules to determine which characters to percent-encode. For\n         * instance, the `URL` object will not percent encode the ASCII tilde (`~`)\n         * character, while `URLSearchParams` will always encode it:\n         *\n         * ```js\n         * const myURL = new URL('https://example.org/abc?foo=~bar');\n         *\n         * console.log(myURL.search);  // prints ?foo=~bar\n         *\n         * // Modify the URL via searchParams...\n         * myURL.searchParams.sort();\n         *\n         * console.log(myURL.search);  // prints ?foo=%7Ebar\n         * ```\n         */\n        readonly searchParams: URLSearchParams;\n        /**\n         * Gets and sets the username portion of the URL.\n         *\n         * ```js\n         * const myURL = new URL('https://abc:xyz@example.com');\n         * console.log(myURL.username);\n         * // Prints abc\n         *\n         * myURL.username = '123';\n         * console.log(myURL.href);\n         * // Prints https://123:xyz@example.com/\n         * ```\n         *\n         * Any invalid URL characters appearing in the value assigned the `username` property will be `percent-encoded`. The selection of which\n         * characters to percent-encode may vary somewhat from what the {@link parse} and {@link format} methods would produce.\n         */\n        username: string;\n        /**\n         * The `toString()` method on the `URL` object returns the serialized URL. The\n         * value returned is equivalent to that of {@link href} and {@link toJSON}.\n         */\n        toString(): string;\n        /**\n         * The `toJSON()` method on the `URL` object returns the serialized URL. The\n         * value returned is equivalent to that of {@link href} and {@link toString}.\n         *\n         * This method is automatically called when an `URL` object is serialized\n         * with [`JSON.stringify()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify).\n         *\n         * ```js\n         * const myURLs = [\n         *   new URL('https://www.example.com'),\n         *   new URL('https://test.example.org'),\n         * ];\n         * console.log(JSON.stringify(myURLs));\n         * // Prints [\"https://www.example.com/\",\"https://test.example.org/\"]\n         * ```\n         */\n        toJSON(): string;\n    }\n    interface URLSearchParamsIterator<T> extends NodeJS.Iterator<T, NodeJS.BuiltinIteratorReturn, unknown> {\n        [Symbol.iterator](): URLSearchParamsIterator<T>;\n    }\n    /**\n     * The `URLSearchParams` API provides read and write access to the query of a `URL`. The `URLSearchParams` class can also be used standalone with one of the\n     * four following constructors.\n     * The `URLSearchParams` class is also available on the global object.\n     *\n     * The WHATWG `URLSearchParams` interface and the `querystring` module have\n     * similar purpose, but the purpose of the `querystring` module is more\n     * general, as it allows the customization of delimiter characters (`&#x26;` and `=`).\n     * On the other hand, this API is designed purely for URL query strings.\n     *\n     * ```js\n     * const myURL = new URL('https://example.org/?abc=123');\n     * console.log(myURL.searchParams.get('abc'));\n     * // Prints 123\n     *\n     * myURL.searchParams.append('abc', 'xyz');\n     * console.log(myURL.href);\n     * // Prints https://example.org/?abc=123&#x26;abc=xyz\n     *\n     * myURL.searchParams.delete('abc');\n     * myURL.searchParams.set('a', 'b');\n     * console.log(myURL.href);\n     * // Prints https://example.org/?a=b\n     *\n     * const newSearchParams = new URLSearchParams(myURL.searchParams);\n     * // The above is equivalent to\n     * // const newSearchParams = new URLSearchParams(myURL.search);\n     *\n     * newSearchParams.append('a', 'c');\n     * console.log(myURL.href);\n     * // Prints https://example.org/?a=b\n     * console.log(newSearchParams.toString());\n     * // Prints a=b&#x26;a=c\n     *\n     * // newSearchParams.toString() is implicitly called\n     * myURL.search = newSearchParams;\n     * console.log(myURL.href);\n     * // Prints https://example.org/?a=b&#x26;a=c\n     * newSearchParams.delete('a');\n     * console.log(myURL.href);\n     * // Prints https://example.org/?a=b&#x26;a=c\n     * ```\n     * @since v7.5.0, v6.13.0\n     */\n    class URLSearchParams implements Iterable<[string, string]> {\n        constructor(\n            init?:\n                | URLSearchParams\n                | string\n                | Record<string, string | readonly string[]>\n                | Iterable<[string, string]>\n                | ReadonlyArray<[string, string]>,\n        );\n        /**\n         * Append a new name-value pair to the query string.\n         */\n        append(name: string, value: string): void;\n        /**\n         * If `value` is provided, removes all name-value pairs\n         * where name is `name` and value is `value`.\n         *\n         * If `value` is not provided, removes all name-value pairs whose name is `name`.\n         */\n        delete(name: string, value?: string): void;\n        /**\n         * Returns an ES6 `Iterator` over each of the name-value pairs in the query.\n         * Each item of the iterator is a JavaScript `Array`. The first item of the `Array` is the `name`, the second item of the `Array` is the `value`.\n         *\n         * Alias for `urlSearchParams[@@iterator]()`.\n         */\n        entries(): URLSearchParamsIterator<[string, string]>;\n        /**\n         * Iterates over each name-value pair in the query and invokes the given function.\n         *\n         * ```js\n         * const myURL = new URL('https://example.org/?a=b&#x26;c=d');\n         * myURL.searchParams.forEach((value, name, searchParams) => {\n         *   console.log(name, value, myURL.searchParams === searchParams);\n         * });\n         * // Prints:\n         * //   a b true\n         * //   c d true\n         * ```\n         * @param fn Invoked for each name-value pair in the query\n         * @param thisArg To be used as `this` value for when `fn` is called\n         */\n        forEach<TThis = this>(\n            fn: (this: TThis, value: string, name: string, searchParams: URLSearchParams) => void,\n            thisArg?: TThis,\n        ): void;\n        /**\n         * Returns the value of the first name-value pair whose name is `name`. If there\n         * are no such pairs, `null` is returned.\n         * @return or `null` if there is no name-value pair with the given `name`.\n         */\n        get(name: string): string | null;\n        /**\n         * Returns the values of all name-value pairs whose name is `name`. If there are\n         * no such pairs, an empty array is returned.\n         */\n        getAll(name: string): string[];\n        /**\n         * Checks if the `URLSearchParams` object contains key-value pair(s) based on `name` and an optional `value` argument.\n         *\n         * If `value` is provided, returns `true` when name-value pair with\n         * same `name` and `value` exists.\n         *\n         * If `value` is not provided, returns `true` if there is at least one name-value\n         * pair whose name is `name`.\n         */\n        has(name: string, value?: string): boolean;\n        /**\n         * Returns an ES6 `Iterator` over the names of each name-value pair.\n         *\n         * ```js\n         * const params = new URLSearchParams('foo=bar&#x26;foo=baz');\n         * for (const name of params.keys()) {\n         *   console.log(name);\n         * }\n         * // Prints:\n         * //   foo\n         * //   foo\n         * ```\n         */\n        keys(): URLSearchParamsIterator<string>;\n        /**\n         * Sets the value in the `URLSearchParams` object associated with `name` to `value`. If there are any pre-existing name-value pairs whose names are `name`,\n         * set the first such pair's value to `value` and remove all others. If not,\n         * append the name-value pair to the query string.\n         *\n         * ```js\n         * const params = new URLSearchParams();\n         * params.append('foo', 'bar');\n         * params.append('foo', 'baz');\n         * params.append('abc', 'def');\n         * console.log(params.toString());\n         * // Prints foo=bar&#x26;foo=baz&#x26;abc=def\n         *\n         * params.set('foo', 'def');\n         * params.set('xyz', 'opq');\n         * console.log(params.toString());\n         * // Prints foo=def&#x26;abc=def&#x26;xyz=opq\n         * ```\n         */\n        set(name: string, value: string): void;\n        /**\n         * The total number of parameter entries.\n         * @since v19.8.0\n         */\n        readonly size: number;\n        /**\n         * Sort all existing name-value pairs in-place by their names. Sorting is done\n         * with a [stable sorting algorithm](https://en.wikipedia.org/wiki/Sorting_algorithm#Stability), so relative order between name-value pairs\n         * with the same name is preserved.\n         *\n         * This method can be used, in particular, to increase cache hits.\n         *\n         * ```js\n         * const params = new URLSearchParams('query[]=abc&#x26;type=search&#x26;query[]=123');\n         * params.sort();\n         * console.log(params.toString());\n         * // Prints query%5B%5D=abc&#x26;query%5B%5D=123&#x26;type=search\n         * ```\n         * @since v7.7.0, v6.13.0\n         */\n        sort(): void;\n        /**\n         * Returns the search parameters serialized as a string, with characters\n         * percent-encoded where necessary.\n         */\n        toString(): string;\n        /**\n         * Returns an ES6 `Iterator` over the values of each name-value pair.\n         */\n        values(): URLSearchParamsIterator<string>;\n        [Symbol.iterator](): URLSearchParamsIterator<[string, string]>;\n    }\n    import { URL as _URL, URLSearchParams as _URLSearchParams } from \"url\";\n    global {\n        interface URLSearchParams extends _URLSearchParams {}\n        interface URL extends _URL {}\n        interface Global {\n            URL: typeof _URL;\n            URLSearchParams: typeof _URLSearchParams;\n        }\n        /**\n         * `URL` class is a global reference for `import { URL } from 'url'`\n         * https://nodejs.org/api/url.html#the-whatwg-url-api\n         * @since v10.0.0\n         */\n        var URL: typeof globalThis extends {\n            onmessage: any;\n            URL: infer T;\n        } ? T\n            : typeof _URL;\n        /**\n         * `URLSearchParams` class is a global reference for `import { URLSearchParams } from 'node:url'`\n         * https://nodejs.org/api/url.html#class-urlsearchparams\n         * @since v10.0.0\n         */\n        var URLSearchParams: typeof globalThis extends {\n            onmessage: any;\n            URLSearchParams: infer T;\n        } ? T\n            : typeof _URLSearchParams;\n    }\n}\ndeclare module \"node:url\" {\n    export * from \"url\";\n}\n",
  '@types/node/util.d.ts':
    "/**\n * The `node:util` module supports the needs of Node.js internal APIs. Many of the\n * utilities are useful for application and module developers as well. To access\n * it:\n *\n * ```js\n * import util from 'node:util';\n * ```\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/util.js)\n */\ndeclare module \"util\" {\n    import * as types from \"node:util/types\";\n    export interface InspectOptions {\n        /**\n         * If `true`, object's non-enumerable symbols and properties are included in the formatted result.\n         * `WeakMap` and `WeakSet` entries are also included as well as user defined prototype properties (excluding method properties).\n         * @default false\n         */\n        showHidden?: boolean | undefined;\n        /**\n         * Specifies the number of times to recurse while formatting object.\n         * This is useful for inspecting large objects.\n         * To recurse up to the maximum call stack size pass `Infinity` or `null`.\n         * @default 2\n         */\n        depth?: number | null | undefined;\n        /**\n         * If `true`, the output is styled with ANSI color codes. Colors are customizable.\n         */\n        colors?: boolean | undefined;\n        /**\n         * If `false`, `[util.inspect.custom](depth, opts, inspect)` functions are not invoked.\n         * @default true\n         */\n        customInspect?: boolean | undefined;\n        /**\n         * If `true`, `Proxy` inspection includes the target and handler objects.\n         * @default false\n         */\n        showProxy?: boolean | undefined;\n        /**\n         * Specifies the maximum number of `Array`, `TypedArray`, `WeakMap`, and `WeakSet` elements\n         * to include when formatting. Set to `null` or `Infinity` to show all elements.\n         * Set to `0` or negative to show no elements.\n         * @default 100\n         */\n        maxArrayLength?: number | null | undefined;\n        /**\n         * Specifies the maximum number of characters to\n         * include when formatting. Set to `null` or `Infinity` to show all elements.\n         * Set to `0` or negative to show no characters.\n         * @default 10000\n         */\n        maxStringLength?: number | null | undefined;\n        /**\n         * The length at which input values are split across multiple lines.\n         * Set to `Infinity` to format the input as a single line\n         * (in combination with `compact` set to `true` or any number >= `1`).\n         * @default 80\n         */\n        breakLength?: number | undefined;\n        /**\n         * Setting this to `false` causes each object key\n         * to be displayed on a new line. It will also add new lines to text that is\n         * longer than `breakLength`. If set to a number, the most `n` inner elements\n         * are united on a single line as long as all properties fit into\n         * `breakLength`. Short array elements are also grouped together. Note that no\n         * text will be reduced below 16 characters, no matter the `breakLength` size.\n         * For more information, see the example below.\n         * @default true\n         */\n        compact?: boolean | number | undefined;\n        /**\n         * If set to `true` or a function, all properties of an object, and `Set` and `Map`\n         * entries are sorted in the resulting string.\n         * If set to `true` the default sort is used.\n         * If set to a function, it is used as a compare function.\n         */\n        sorted?: boolean | ((a: string, b: string) => number) | undefined;\n        /**\n         * If set to `true`, getters are going to be\n         * inspected as well. If set to `'get'` only getters without setter are going\n         * to be inspected. If set to `'set'` only getters having a corresponding\n         * setter are going to be inspected. This might cause side effects depending on\n         * the getter function.\n         * @default false\n         */\n        getters?: \"get\" | \"set\" | boolean | undefined;\n        /**\n         * If set to `true`, an underscore is used to separate every three digits in all bigints and numbers.\n         * @default false\n         */\n        numericSeparator?: boolean | undefined;\n    }\n    export type Style =\n        | \"special\"\n        | \"number\"\n        | \"bigint\"\n        | \"boolean\"\n        | \"undefined\"\n        | \"null\"\n        | \"string\"\n        | \"symbol\"\n        | \"date\"\n        | \"regexp\"\n        | \"module\";\n    export type CustomInspectFunction = (depth: number, options: InspectOptionsStylized) => any; // TODO: , inspect: inspect\n    export interface InspectOptionsStylized extends InspectOptions {\n        stylize(text: string, styleType: Style): string;\n    }\n    export interface CallSiteObject {\n        /**\n         * Returns the name of the function associated with this call site.\n         */\n        functionName: string;\n        /**\n         * Returns the name of the resource that contains the script for the\n         * function for this call site.\n         */\n        scriptName: string;\n        /**\n         * Returns the unique id of the script, as in Chrome DevTools protocol\n         * [`Runtime.ScriptId`](https://chromedevtools.github.io/devtools-protocol/1-3/Runtime/#type-ScriptId).\n         * @since v22.14.0\n         */\n        scriptId: string;\n        /**\n         * Returns the number, 1-based, of the line for the associate function call.\n         */\n        lineNumber: number;\n        /**\n         * Returns the 1-based column offset on the line for the associated function call.\n         */\n        columnNumber: number;\n    }\n    export type DiffEntry = [operation: -1 | 0 | 1, value: string];\n    /**\n     * `util.diff()` compares two string or array values and returns an array of difference entries.\n     * It uses the Myers diff algorithm to compute minimal differences, which is the same algorithm\n     * used internally by assertion error messages.\n     *\n     * If the values are equal, an empty array is returned.\n     *\n     * ```js\n     * const { diff } = require('node:util');\n     *\n     * // Comparing strings\n     * const actualString = '12345678';\n     * const expectedString = '12!!5!7!';\n     * console.log(diff(actualString, expectedString));\n     * // [\n     * //   [0, '1'],\n     * //   [0, '2'],\n     * //   [1, '3'],\n     * //   [1, '4'],\n     * //   [-1, '!'],\n     * //   [-1, '!'],\n     * //   [0, '5'],\n     * //   [1, '6'],\n     * //   [-1, '!'],\n     * //   [0, '7'],\n     * //   [1, '8'],\n     * //   [-1, '!'],\n     * // ]\n     * // Comparing arrays\n     * const actualArray = ['1', '2', '3'];\n     * const expectedArray = ['1', '3', '4'];\n     * console.log(diff(actualArray, expectedArray));\n     * // [\n     * //   [0, '1'],\n     * //   [1, '2'],\n     * //   [0, '3'],\n     * //   [-1, '4'],\n     * // ]\n     * // Equal values return empty array\n     * console.log(diff('same', 'same'));\n     * // []\n     * ```\n     * @since v22.15.0\n     * @experimental\n     * @param actual The first value to compare\n     * @param expected The second value to compare\n     * @returns An array of difference entries. Each entry is an array with two elements:\n     * * Index 0: `number` Operation code: `-1` for delete, `0` for no-op/unchanged, `1` for insert\n     * * Index 1: `string` The value associated with the operation\n     */\n    export function diff(actual: string | readonly string[], expected: string | readonly string[]): DiffEntry[];\n    /**\n     * The `util.format()` method returns a formatted string using the first argument\n     * as a `printf`-like format string which can contain zero or more format\n     * specifiers. Each specifier is replaced with the converted value from the\n     * corresponding argument. Supported specifiers are:\n     *\n     * If a specifier does not have a corresponding argument, it is not replaced:\n     *\n     * ```js\n     * util.format('%s:%s', 'foo');\n     * // Returns: 'foo:%s'\n     * ```\n     *\n     * Values that are not part of the format string are formatted using `util.inspect()` if their type is not `string`.\n     *\n     * If there are more arguments passed to the `util.format()` method than the\n     * number of specifiers, the extra arguments are concatenated to the returned\n     * string, separated by spaces:\n     *\n     * ```js\n     * util.format('%s:%s', 'foo', 'bar', 'baz');\n     * // Returns: 'foo:bar baz'\n     * ```\n     *\n     * If the first argument does not contain a valid format specifier, `util.format()` returns a string that is the concatenation of all arguments separated by spaces:\n     *\n     * ```js\n     * util.format(1, 2, 3);\n     * // Returns: '1 2 3'\n     * ```\n     *\n     * If only one argument is passed to `util.format()`, it is returned as it is\n     * without any formatting:\n     *\n     * ```js\n     * util.format('%% %s');\n     * // Returns: '%% %s'\n     * ```\n     *\n     * `util.format()` is a synchronous method that is intended as a debugging tool.\n     * Some input values can have a significant performance overhead that can block the\n     * event loop. Use this function with care and never in a hot code path.\n     * @since v0.5.3\n     * @param format A `printf`-like format string.\n     */\n    export function format(format?: any, ...param: any[]): string;\n    /**\n     * This function is identical to {@link format}, except in that it takes\n     * an `inspectOptions` argument which specifies options that are passed along to {@link inspect}.\n     *\n     * ```js\n     * util.formatWithOptions({ colors: true }, 'See object %O', { foo: 42 });\n     * // Returns 'See object { foo: 42 }', where `42` is colored as a number\n     * // when printed to a terminal.\n     * ```\n     * @since v10.0.0\n     */\n    export function formatWithOptions(inspectOptions: InspectOptions, format?: any, ...param: any[]): string;\n    interface GetCallSitesOptions {\n        /**\n         * Reconstruct the original location in the stacktrace from the source-map.\n         * Enabled by default with the flag `--enable-source-maps`.\n         */\n        sourceMap?: boolean | undefined;\n    }\n    /**\n     * Returns an array of call site objects containing the stack of\n     * the caller function.\n     *\n     * ```js\n     * import { getCallSites } from 'node:util';\n     *\n     * function exampleFunction() {\n     *   const callSites = getCallSites();\n     *\n     *   console.log('Call Sites:');\n     *   callSites.forEach((callSite, index) => {\n     *     console.log(`CallSite ${index + 1}:`);\n     *     console.log(`Function Name: ${callSite.functionName}`);\n     *     console.log(`Script Name: ${callSite.scriptName}`);\n     *     console.log(`Line Number: ${callSite.lineNumber}`);\n     *     console.log(`Column Number: ${callSite.column}`);\n     *   });\n     *   // CallSite 1:\n     *   // Function Name: exampleFunction\n     *   // Script Name: /home/example.js\n     *   // Line Number: 5\n     *   // Column Number: 26\n     *\n     *   // CallSite 2:\n     *   // Function Name: anotherFunction\n     *   // Script Name: /home/example.js\n     *   // Line Number: 22\n     *   // Column Number: 3\n     *\n     *   // ...\n     * }\n     *\n     * // A function to simulate another stack layer\n     * function anotherFunction() {\n     *   exampleFunction();\n     * }\n     *\n     * anotherFunction();\n     * ```\n     *\n     * It is possible to reconstruct the original locations by setting the option `sourceMap` to `true`.\n     * If the source map is not available, the original location will be the same as the current location.\n     * When the `--enable-source-maps` flag is enabled, for example when using `--experimental-transform-types`,\n     * `sourceMap` will be true by default.\n     *\n     * ```ts\n     * import { getCallSites } from 'node:util';\n     *\n     * interface Foo {\n     *   foo: string;\n     * }\n     *\n     * const callSites = getCallSites({ sourceMap: true });\n     *\n     * // With sourceMap:\n     * // Function Name: ''\n     * // Script Name: example.js\n     * // Line Number: 7\n     * // Column Number: 26\n     *\n     * // Without sourceMap:\n     * // Function Name: ''\n     * // Script Name: example.js\n     * // Line Number: 2\n     * // Column Number: 26\n     * ```\n     * @param frameCount Number of frames to capture as call site objects.\n     * **Default:** `10`. Allowable range is between 1 and 200.\n     * @return An array of call site objects\n     * @since v22.9.0\n     */\n    export function getCallSites(frameCount?: number, options?: GetCallSitesOptions): CallSiteObject[];\n    export function getCallSites(options: GetCallSitesOptions): CallSiteObject[];\n    /**\n     * Returns the string name for a numeric error code that comes from a Node.js API.\n     * The mapping between error codes and error names is platform-dependent.\n     * See `Common System Errors` for the names of common errors.\n     *\n     * ```js\n     * fs.access('file/that/does/not/exist', (err) => {\n     *   const name = util.getSystemErrorName(err.errno);\n     *   console.error(name);  // ENOENT\n     * });\n     * ```\n     * @since v9.7.0\n     */\n    export function getSystemErrorName(err: number): string;\n    /**\n     * Returns a Map of all system error codes available from the Node.js API.\n     * The mapping between error codes and error names is platform-dependent.\n     * See `Common System Errors` for the names of common errors.\n     *\n     * ```js\n     * fs.access('file/that/does/not/exist', (err) => {\n     *   const errorMap = util.getSystemErrorMap();\n     *   const name = errorMap.get(err.errno);\n     *   console.error(name);  // ENOENT\n     * });\n     * ```\n     * @since v16.0.0, v14.17.0\n     */\n    export function getSystemErrorMap(): Map<number, [string, string]>;\n    /**\n     * Returns the string message for a numeric error code that comes from a Node.js\n     * API.\n     * The mapping between error codes and string messages is platform-dependent.\n     *\n     * ```js\n     * fs.access('file/that/does/not/exist', (err) => {\n     *   const message = util.getSystemErrorMessage(err.errno);\n     *   console.error(message);  // no such file or directory\n     * });\n     * ```\n     * @since v22.12.0\n     */\n    export function getSystemErrorMessage(err: number): string;\n    /**\n     * The `util.log()` method prints the given `string` to `stdout` with an included\n     * timestamp.\n     *\n     * ```js\n     * import util from 'node:util';\n     *\n     * util.log('Timestamped message.');\n     * ```\n     * @since v0.3.0\n     * @deprecated Since v6.0.0 - Use a third party module instead.\n     */\n    export function log(string: string): void;\n    /**\n     * Returns the `string` after replacing any surrogate code points\n     * (or equivalently, any unpaired surrogate code units) with the\n     * Unicode \"replacement character\" U+FFFD.\n     * @since v16.8.0, v14.18.0\n     */\n    export function toUSVString(string: string): string;\n    /**\n     * Creates and returns an `AbortController` instance whose `AbortSignal` is marked\n     * as transferable and can be used with `structuredClone()` or `postMessage()`.\n     * @since v18.11.0\n     * @returns A transferable AbortController\n     */\n    export function transferableAbortController(): AbortController;\n    /**\n     * Marks the given `AbortSignal` as transferable so that it can be used with`structuredClone()` and `postMessage()`.\n     *\n     * ```js\n     * const signal = transferableAbortSignal(AbortSignal.timeout(100));\n     * const channel = new MessageChannel();\n     * channel.port2.postMessage(signal, [signal]);\n     * ```\n     * @since v18.11.0\n     * @param signal The AbortSignal\n     * @returns The same AbortSignal\n     */\n    export function transferableAbortSignal(signal: AbortSignal): AbortSignal;\n    /**\n     * Listens to abort event on the provided `signal` and returns a promise that resolves when the `signal` is aborted.\n     * If `resource` is provided, it weakly references the operation's associated object,\n     * so if `resource` is garbage collected before the `signal` aborts,\n     * then returned promise shall remain pending.\n     * This prevents memory leaks in long-running or non-cancelable operations.\n     *\n     * ```js\n     * import { aborted } from 'node:util';\n     *\n     * // Obtain an object with an abortable signal, like a custom resource or operation.\n     * const dependent = obtainSomethingAbortable();\n     *\n     * // Pass `dependent` as the resource, indicating the promise should only resolve\n     * // if `dependent` is still in memory when the signal is aborted.\n     * aborted(dependent.signal, dependent).then(() => {\n     *   // This code runs when `dependent` is aborted.\n     *   console.log('Dependent resource was aborted.');\n     * });\n     *\n     * // Simulate an event that triggers the abort.\n     * dependent.on('event', () => {\n     *   dependent.abort(); // This will cause the `aborted` promise to resolve.\n     * });\n     * ```\n     * @since v19.7.0\n     * @experimental\n     * @param resource Any non-null object tied to the abortable operation and held weakly.\n     * If `resource` is garbage collected before the `signal` aborts, the promise remains pending,\n     * allowing Node.js to stop tracking it.\n     * This helps prevent memory leaks in long-running or non-cancelable operations.\n     */\n    export function aborted(signal: AbortSignal, resource: any): Promise<void>;\n    /**\n     * The `util.inspect()` method returns a string representation of `object` that is\n     * intended for debugging. The output of `util.inspect` may change at any time\n     * and should not be depended upon programmatically. Additional `options` may be\n     * passed that alter the result.\n     * `util.inspect()` will use the constructor's name and/or `@@toStringTag` to make\n     * an identifiable tag for an inspected value.\n     *\n     * ```js\n     * class Foo {\n     *   get [Symbol.toStringTag]() {\n     *     return 'bar';\n     *   }\n     * }\n     *\n     * class Bar {}\n     *\n     * const baz = Object.create(null, { [Symbol.toStringTag]: { value: 'foo' } });\n     *\n     * util.inspect(new Foo()); // 'Foo [bar] {}'\n     * util.inspect(new Bar()); // 'Bar {}'\n     * util.inspect(baz);       // '[foo] {}'\n     * ```\n     *\n     * Circular references point to their anchor by using a reference index:\n     *\n     * ```js\n     * import { inspect } from 'node:util';\n     *\n     * const obj = {};\n     * obj.a = [obj];\n     * obj.b = {};\n     * obj.b.inner = obj.b;\n     * obj.b.obj = obj;\n     *\n     * console.log(inspect(obj));\n     * // <ref *1> {\n     * //   a: [ [Circular *1] ],\n     * //   b: <ref *2> { inner: [Circular *2], obj: [Circular *1] }\n     * // }\n     * ```\n     *\n     * The following example inspects all properties of the `util` object:\n     *\n     * ```js\n     * import util from 'node:util';\n     *\n     * console.log(util.inspect(util, { showHidden: true, depth: null }));\n     * ```\n     *\n     * The following example highlights the effect of the `compact` option:\n     *\n     * ```js\n     * import { inspect } from 'node:util';\n     *\n     * const o = {\n     *   a: [1, 2, [[\n     *     'Lorem ipsum dolor sit amet,\\nconsectetur adipiscing elit, sed do ' +\n     *       'eiusmod \\ntempor incididunt ut labore et dolore magna aliqua.',\n     *     'test',\n     *     'foo']], 4],\n     *   b: new Map([['za', 1], ['zb', 'test']]),\n     * };\n     * console.log(inspect(o, { compact: true, depth: 5, breakLength: 80 }));\n     *\n     * // { a:\n     * //   [ 1,\n     * //     2,\n     * //     [ [ 'Lorem ipsum dolor sit amet,\\nconsectetur [...]', // A long line\n     * //           'test',\n     * //           'foo' ] ],\n     * //     4 ],\n     * //   b: Map(2) { 'za' => 1, 'zb' => 'test' } }\n     *\n     * // Setting `compact` to false or an integer creates more reader friendly output.\n     * console.log(inspect(o, { compact: false, depth: 5, breakLength: 80 }));\n     *\n     * // {\n     * //   a: [\n     * //     1,\n     * //     2,\n     * //     [\n     * //       [\n     * //         'Lorem ipsum dolor sit amet,\\n' +\n     * //           'consectetur adipiscing elit, sed do eiusmod \\n' +\n     * //           'tempor incididunt ut labore et dolore magna aliqua.',\n     * //         'test',\n     * //         'foo'\n     * //       ]\n     * //     ],\n     * //     4\n     * //   ],\n     * //   b: Map(2) {\n     * //     'za' => 1,\n     * //     'zb' => 'test'\n     * //   }\n     * // }\n     *\n     * // Setting `breakLength` to e.g. 150 will print the \"Lorem ipsum\" text in a\n     * // single line.\n     * ```\n     *\n     * The `showHidden` option allows `WeakMap` and `WeakSet` entries to be\n     * inspected. If there are more entries than `maxArrayLength`, there is no\n     * guarantee which entries are displayed. That means retrieving the same\n     * `WeakSet` entries twice may result in different output. Furthermore, entries\n     * with no remaining strong references may be garbage collected at any time.\n     *\n     * ```js\n     * import { inspect } from 'node:util';\n     *\n     * const obj = { a: 1 };\n     * const obj2 = { b: 2 };\n     * const weakSet = new WeakSet([obj, obj2]);\n     *\n     * console.log(inspect(weakSet, { showHidden: true }));\n     * // WeakSet { { a: 1 }, { b: 2 } }\n     * ```\n     *\n     * The `sorted` option ensures that an object's property insertion order does not\n     * impact the result of `util.inspect()`.\n     *\n     * ```js\n     * import { inspect } from 'node:util';\n     * import assert from 'node:assert';\n     *\n     * const o1 = {\n     *   b: [2, 3, 1],\n     *   a: '`a` comes before `b`',\n     *   c: new Set([2, 3, 1]),\n     * };\n     * console.log(inspect(o1, { sorted: true }));\n     * // { a: '`a` comes before `b`', b: [ 2, 3, 1 ], c: Set(3) { 1, 2, 3 } }\n     * console.log(inspect(o1, { sorted: (a, b) => b.localeCompare(a) }));\n     * // { c: Set(3) { 3, 2, 1 }, b: [ 2, 3, 1 ], a: '`a` comes before `b`' }\n     *\n     * const o2 = {\n     *   c: new Set([2, 1, 3]),\n     *   a: '`a` comes before `b`',\n     *   b: [2, 3, 1],\n     * };\n     * assert.strict.equal(\n     *   inspect(o1, { sorted: true }),\n     *   inspect(o2, { sorted: true }),\n     * );\n     * ```\n     *\n     * The `numericSeparator` option adds an underscore every three digits to all\n     * numbers.\n     *\n     * ```js\n     * import { inspect } from 'node:util';\n     *\n     * const thousand = 1000;\n     * const million = 1000000;\n     * const bigNumber = 123456789n;\n     * const bigDecimal = 1234.12345;\n     *\n     * console.log(inspect(thousand, { numericSeparator: true }));\n     * // 1_000\n     * console.log(inspect(million, { numericSeparator: true }));\n     * // 1_000_000\n     * console.log(inspect(bigNumber, { numericSeparator: true }));\n     * // 123_456_789n\n     * console.log(inspect(bigDecimal, { numericSeparator: true }));\n     * // 1_234.123_45\n     * ```\n     *\n     * `util.inspect()` is a synchronous method intended for debugging. Its maximum\n     * output length is approximately 128 MiB. Inputs that result in longer output will\n     * be truncated.\n     * @since v0.3.0\n     * @param object Any JavaScript primitive or `Object`.\n     * @return The representation of `object`.\n     */\n    export function inspect(object: any, showHidden?: boolean, depth?: number | null, color?: boolean): string;\n    export function inspect(object: any, options?: InspectOptions): string;\n    export namespace inspect {\n        let colors: NodeJS.Dict<[number, number]>;\n        let styles: {\n            [K in Style]: string;\n        };\n        let defaultOptions: InspectOptions;\n        /**\n         * Allows changing inspect settings from the repl.\n         */\n        let replDefaults: InspectOptions;\n        /**\n         * That can be used to declare custom inspect functions.\n         */\n        const custom: unique symbol;\n    }\n    /**\n     * Alias for [`Array.isArray()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray).\n     *\n     * Returns `true` if the given `object` is an `Array`. Otherwise, returns `false`.\n     *\n     * ```js\n     * import util from 'node:util';\n     *\n     * util.isArray([]);\n     * // Returns: true\n     * util.isArray(new Array());\n     * // Returns: true\n     * util.isArray({});\n     * // Returns: false\n     * ```\n     * @since v0.6.0\n     * @deprecated Since v4.0.0 - Use `isArray` instead.\n     */\n    export function isArray(object: unknown): object is unknown[];\n    /**\n     * Returns `true` if the given `object` is a `RegExp`. Otherwise, returns `false`.\n     *\n     * ```js\n     * import util from 'node:util';\n     *\n     * util.isRegExp(/some regexp/);\n     * // Returns: true\n     * util.isRegExp(new RegExp('another regexp'));\n     * // Returns: true\n     * util.isRegExp({});\n     * // Returns: false\n     * ```\n     * @since v0.6.0\n     * @deprecated Since v4.0.0 - Deprecated\n     */\n    export function isRegExp(object: unknown): object is RegExp;\n    /**\n     * Returns `true` if the given `object` is a `Date`. Otherwise, returns `false`.\n     *\n     * ```js\n     * import util from 'node:util';\n     *\n     * util.isDate(new Date());\n     * // Returns: true\n     * util.isDate(Date());\n     * // false (without 'new' returns a String)\n     * util.isDate({});\n     * // Returns: false\n     * ```\n     * @since v0.6.0\n     * @deprecated Since v4.0.0 - Use {@link types.isDate} instead.\n     */\n    export function isDate(object: unknown): object is Date;\n    /**\n     * Returns `true` if the given `object` is an `Error`. Otherwise, returns `false`.\n     *\n     * ```js\n     * import util from 'node:util';\n     *\n     * util.isError(new Error());\n     * // Returns: true\n     * util.isError(new TypeError());\n     * // Returns: true\n     * util.isError({ name: 'Error', message: 'an error occurred' });\n     * // Returns: false\n     * ```\n     *\n     * This method relies on `Object.prototype.toString()` behavior. It is\n     * possible to obtain an incorrect result when the `object` argument manipulates `@@toStringTag`.\n     *\n     * ```js\n     * import util from 'node:util';\n     * const obj = { name: 'Error', message: 'an error occurred' };\n     *\n     * util.isError(obj);\n     * // Returns: false\n     * obj[Symbol.toStringTag] = 'Error';\n     * util.isError(obj);\n     * // Returns: true\n     * ```\n     * @since v0.6.0\n     * @deprecated Since v4.0.0 - Use {@link types.isNativeError} instead.\n     */\n    export function isError(object: unknown): object is Error;\n    /**\n     * Usage of `util.inherits()` is discouraged. Please use the ES6 `class` and\n     * `extends` keywords to get language level inheritance support. Also note\n     * that the two styles are [semantically incompatible](https://github.com/nodejs/node/issues/4179).\n     *\n     * Inherit the prototype methods from one\n     * [constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor) into another. The\n     * prototype of `constructor` will be set to a new object created from\n     * `superConstructor`.\n     *\n     * This mainly adds some input validation on top of\n     * `Object.setPrototypeOf(constructor.prototype, superConstructor.prototype)`.\n     * As an additional convenience, `superConstructor` will be accessible\n     * through the `constructor.super_` property.\n     *\n     * ```js\n     * const util = require('node:util');\n     * const EventEmitter = require('node:events');\n     *\n     * function MyStream() {\n     *   EventEmitter.call(this);\n     * }\n     *\n     * util.inherits(MyStream, EventEmitter);\n     *\n     * MyStream.prototype.write = function(data) {\n     *   this.emit('data', data);\n     * };\n     *\n     * const stream = new MyStream();\n     *\n     * console.log(stream instanceof EventEmitter); // true\n     * console.log(MyStream.super_ === EventEmitter); // true\n     *\n     * stream.on('data', (data) => {\n     *   console.log(`Received data: \"${data}\"`);\n     * });\n     * stream.write('It works!'); // Received data: \"It works!\"\n     * ```\n     *\n     * ES6 example using `class` and `extends`:\n     *\n     * ```js\n     * import EventEmitter from 'node:events';\n     *\n     * class MyStream extends EventEmitter {\n     *   write(data) {\n     *     this.emit('data', data);\n     *   }\n     * }\n     *\n     * const stream = new MyStream();\n     *\n     * stream.on('data', (data) => {\n     *   console.log(`Received data: \"${data}\"`);\n     * });\n     * stream.write('With ES6');\n     * ```\n     * @since v0.3.0\n     * @legacy Use ES2015 class syntax and `extends` keyword instead.\n     */\n    export function inherits(constructor: unknown, superConstructor: unknown): void;\n    export type DebugLoggerFunction = (msg: string, ...param: unknown[]) => void;\n    export interface DebugLogger extends DebugLoggerFunction {\n        /**\n         * The `util.debuglog().enabled` getter is used to create a test that can be used\n         * in conditionals based on the existence of the `NODE_DEBUG` environment variable.\n         * If the `section` name appears within the value of that environment variable,\n         * then the returned value will be `true`. If not, then the returned value will be\n         * `false`.\n         *\n         * ```js\n         * import { debuglog } from 'node:util';\n         * const enabled = debuglog('foo').enabled;\n         * if (enabled) {\n         *   console.log('hello from foo [%d]', 123);\n         * }\n         * ```\n         *\n         * If this program is run with `NODE_DEBUG=foo` in the environment, then it will\n         * output something like:\n         *\n         * ```console\n         * hello from foo [123]\n         * ```\n         */\n        enabled: boolean;\n    }\n    /**\n     * The `util.debuglog()` method is used to create a function that conditionally\n     * writes debug messages to `stderr` based on the existence of the `NODE_DEBUG`\n     * environment variable. If the `section` name appears within the value of that\n     * environment variable, then the returned function operates similar to\n     * `console.error()`. If not, then the returned function is a no-op.\n     *\n     * ```js\n     * import { debuglog } from 'node:util';\n     * const log = debuglog('foo');\n     *\n     * log('hello from foo [%d]', 123);\n     * ```\n     *\n     * If this program is run with `NODE_DEBUG=foo` in the environment, then\n     * it will output something like:\n     *\n     * ```console\n     * FOO 3245: hello from foo [123]\n     * ```\n     *\n     * where `3245` is the process id. If it is not run with that\n     * environment variable set, then it will not print anything.\n     *\n     * The `section` supports wildcard also:\n     *\n     * ```js\n     * import { debuglog } from 'node:util';\n     * const log = debuglog('foo');\n     *\n     * log('hi there, it\\'s foo-bar [%d]', 2333);\n     * ```\n     *\n     * if it is run with `NODE_DEBUG=foo*` in the environment, then it will output\n     * something like:\n     *\n     * ```console\n     * FOO-BAR 3257: hi there, it's foo-bar [2333]\n     * ```\n     *\n     * Multiple comma-separated `section` names may be specified in the `NODE_DEBUG`\n     * environment variable: `NODE_DEBUG=fs,net,tls`.\n     *\n     * The optional `callback` argument can be used to replace the logging function\n     * with a different function that doesn't have any initialization or\n     * unnecessary wrapping.\n     *\n     * ```js\n     * import { debuglog } from 'node:util';\n     * let log = debuglog('internals', (debug) => {\n     *   // Replace with a logging function that optimizes out\n     *   // testing if the section is enabled\n     *   log = debug;\n     * });\n     * ```\n     * @since v0.11.3\n     * @param section A string identifying the portion of the application for which the `debuglog` function is being created.\n     * @param callback A callback invoked the first time the logging function is called with a function argument that is a more optimized logging function.\n     * @return The logging function\n     */\n    export function debuglog(section: string, callback?: (fn: DebugLoggerFunction) => void): DebugLogger;\n    export { debuglog as debug };\n    /**\n     * Returns `true` if the given `object` is a `Boolean`. Otherwise, returns `false`.\n     *\n     * ```js\n     * import util from 'node:util';\n     *\n     * util.isBoolean(1);\n     * // Returns: false\n     * util.isBoolean(0);\n     * // Returns: false\n     * util.isBoolean(false);\n     * // Returns: true\n     * ```\n     * @since v0.11.5\n     * @deprecated Since v4.0.0 - Use `typeof value === 'boolean'` instead.\n     */\n    export function isBoolean(object: unknown): object is boolean;\n    /**\n     * Returns `true` if the given `object` is a `Buffer`. Otherwise, returns `false`.\n     *\n     * ```js\n     * import util from 'node:util';\n     *\n     * util.isBuffer({ length: 0 });\n     * // Returns: false\n     * util.isBuffer([]);\n     * // Returns: false\n     * util.isBuffer(Buffer.from('hello world'));\n     * // Returns: true\n     * ```\n     * @since v0.11.5\n     * @deprecated Since v4.0.0 - Use `isBuffer` instead.\n     */\n    export function isBuffer(object: unknown): object is Buffer;\n    /**\n     * Returns `true` if the given `object` is a `Function`. Otherwise, returns `false`.\n     *\n     * ```js\n     * import util from 'node:util';\n     *\n     * function Foo() {}\n     * const Bar = () => {};\n     *\n     * util.isFunction({});\n     * // Returns: false\n     * util.isFunction(Foo);\n     * // Returns: true\n     * util.isFunction(Bar);\n     * // Returns: true\n     * ```\n     * @since v0.11.5\n     * @deprecated Since v4.0.0 - Use `typeof value === 'function'` instead.\n     */\n    export function isFunction(object: unknown): boolean;\n    /**\n     * Returns `true` if the given `object` is strictly `null`. Otherwise, returns`false`.\n     *\n     * ```js\n     * import util from 'node:util';\n     *\n     * util.isNull(0);\n     * // Returns: false\n     * util.isNull(undefined);\n     * // Returns: false\n     * util.isNull(null);\n     * // Returns: true\n     * ```\n     * @since v0.11.5\n     * @deprecated Since v4.0.0 - Use `value === null` instead.\n     */\n    export function isNull(object: unknown): object is null;\n    /**\n     * Returns `true` if the given `object` is `null` or `undefined`. Otherwise,\n     * returns `false`.\n     *\n     * ```js\n     * import util from 'node:util';\n     *\n     * util.isNullOrUndefined(0);\n     * // Returns: false\n     * util.isNullOrUndefined(undefined);\n     * // Returns: true\n     * util.isNullOrUndefined(null);\n     * // Returns: true\n     * ```\n     * @since v0.11.5\n     * @deprecated Since v4.0.0 - Use `value === undefined || value === null` instead.\n     */\n    export function isNullOrUndefined(object: unknown): object is null | undefined;\n    /**\n     * Returns `true` if the given `object` is a `Number`. Otherwise, returns `false`.\n     *\n     * ```js\n     * import util from 'node:util';\n     *\n     * util.isNumber(false);\n     * // Returns: false\n     * util.isNumber(Infinity);\n     * // Returns: true\n     * util.isNumber(0);\n     * // Returns: true\n     * util.isNumber(NaN);\n     * // Returns: true\n     * ```\n     * @since v0.11.5\n     * @deprecated Since v4.0.0 - Use `typeof value === 'number'` instead.\n     */\n    export function isNumber(object: unknown): object is number;\n    /**\n     * Returns `true` if the given `object` is strictly an `Object`**and** not a`Function` (even though functions are objects in JavaScript).\n     * Otherwise, returns `false`.\n     *\n     * ```js\n     * import util from 'node:util';\n     *\n     * util.isObject(5);\n     * // Returns: false\n     * util.isObject(null);\n     * // Returns: false\n     * util.isObject({});\n     * // Returns: true\n     * util.isObject(() => {});\n     * // Returns: false\n     * ```\n     * @since v0.11.5\n     * @deprecated Since v4.0.0 - Use `value !== null && typeof value === 'object'` instead.\n     */\n    export function isObject(object: unknown): boolean;\n    /**\n     * Returns `true` if the given `object` is a primitive type. Otherwise, returns`false`.\n     *\n     * ```js\n     * import util from 'node:util';\n     *\n     * util.isPrimitive(5);\n     * // Returns: true\n     * util.isPrimitive('foo');\n     * // Returns: true\n     * util.isPrimitive(false);\n     * // Returns: true\n     * util.isPrimitive(null);\n     * // Returns: true\n     * util.isPrimitive(undefined);\n     * // Returns: true\n     * util.isPrimitive({});\n     * // Returns: false\n     * util.isPrimitive(() => {});\n     * // Returns: false\n     * util.isPrimitive(/^$/);\n     * // Returns: false\n     * util.isPrimitive(new Date());\n     * // Returns: false\n     * ```\n     * @since v0.11.5\n     * @deprecated Since v4.0.0 - Use `(typeof value !== 'object' && typeof value !== 'function') || value === null` instead.\n     */\n    export function isPrimitive(object: unknown): boolean;\n    /**\n     * Returns `true` if the given `object` is a `string`. Otherwise, returns `false`.\n     *\n     * ```js\n     * import util from 'node:util';\n     *\n     * util.isString('');\n     * // Returns: true\n     * util.isString('foo');\n     * // Returns: true\n     * util.isString(String('foo'));\n     * // Returns: true\n     * util.isString(5);\n     * // Returns: false\n     * ```\n     * @since v0.11.5\n     * @deprecated Since v4.0.0 - Use `typeof value === 'string'` instead.\n     */\n    export function isString(object: unknown): object is string;\n    /**\n     * Returns `true` if the given `object` is a `Symbol`. Otherwise, returns `false`.\n     *\n     * ```js\n     * import util from 'node:util';\n     *\n     * util.isSymbol(5);\n     * // Returns: false\n     * util.isSymbol('foo');\n     * // Returns: false\n     * util.isSymbol(Symbol('foo'));\n     * // Returns: true\n     * ```\n     * @since v0.11.5\n     * @deprecated Since v4.0.0 - Use `typeof value === 'symbol'` instead.\n     */\n    export function isSymbol(object: unknown): object is symbol;\n    /**\n     * Returns `true` if the given `object` is `undefined`. Otherwise, returns `false`.\n     *\n     * ```js\n     * import util from 'node:util';\n     *\n     * const foo = undefined;\n     * util.isUndefined(5);\n     * // Returns: false\n     * util.isUndefined(foo);\n     * // Returns: true\n     * util.isUndefined(null);\n     * // Returns: false\n     * ```\n     * @since v0.11.5\n     * @deprecated Since v4.0.0 - Use `value === undefined` instead.\n     */\n    export function isUndefined(object: unknown): object is undefined;\n    /**\n     * The `util.deprecate()` method wraps `fn` (which may be a function or class) in\n     * such a way that it is marked as deprecated.\n     *\n     * ```js\n     * import { deprecate } from 'node:util';\n     *\n     * export const obsoleteFunction = deprecate(() => {\n     *   // Do something here.\n     * }, 'obsoleteFunction() is deprecated. Use newShinyFunction() instead.');\n     * ```\n     *\n     * When called, `util.deprecate()` will return a function that will emit a\n     * `DeprecationWarning` using the `'warning'` event. The warning will\n     * be emitted and printed to `stderr` the first time the returned function is\n     * called. After the warning is emitted, the wrapped function is called without\n     * emitting a warning.\n     *\n     * If the same optional `code` is supplied in multiple calls to `util.deprecate()`,\n     * the warning will be emitted only once for that `code`.\n     *\n     * ```js\n     * import { deprecate } from 'node:util';\n     *\n     * const fn1 = deprecate(\n     *   () => 'a value',\n     *   'deprecation message',\n     *   'DEP0001',\n     * );\n     * const fn2 = deprecate(\n     *   () => 'a  different value',\n     *   'other dep message',\n     *   'DEP0001',\n     * );\n     * fn1(); // Emits a deprecation warning with code DEP0001\n     * fn2(); // Does not emit a deprecation warning because it has the same code\n     * ```\n     *\n     * If either the `--no-deprecation` or `--no-warnings` command-line flags are\n     * used, or if the `process.noDeprecation` property is set to `true` _prior_ to\n     * the first deprecation warning, the `util.deprecate()` method does nothing.\n     *\n     * If the `--trace-deprecation` or `--trace-warnings` command-line flags are set,\n     * or the `process.traceDeprecation` property is set to `true`, a warning and a\n     * stack trace are printed to `stderr` the first time the deprecated function is\n     * called.\n     *\n     * If the `--throw-deprecation` command-line flag is set, or the\n     * `process.throwDeprecation` property is set to `true`, then an exception will be\n     * thrown when the deprecated function is called.\n     *\n     * The `--throw-deprecation` command-line flag and `process.throwDeprecation`\n     * property take precedence over `--trace-deprecation` and\n     * `process.traceDeprecation`.\n     * @since v0.8.0\n     * @param fn The function that is being deprecated.\n     * @param msg A warning message to display when the deprecated function is invoked.\n     * @param code A deprecation code. See the `list of deprecated APIs` for a list of codes.\n     * @return The deprecated function wrapped to emit a warning.\n     */\n    export function deprecate<T extends Function>(fn: T, msg: string, code?: string): T;\n    /**\n     * Returns `true` if there is deep strict equality between `val1` and `val2`.\n     * Otherwise, returns `false`.\n     *\n     * See `assert.deepStrictEqual()` for more information about deep strict\n     * equality.\n     * @since v9.0.0\n     */\n    export function isDeepStrictEqual(val1: unknown, val2: unknown): boolean;\n    /**\n     * Returns `str` with any ANSI escape codes removed.\n     *\n     * ```js\n     * console.log(util.stripVTControlCharacters('\\u001B[4mvalue\\u001B[0m'));\n     * // Prints \"value\"\n     * ```\n     * @since v16.11.0\n     */\n    export function stripVTControlCharacters(str: string): string;\n    /**\n     * Takes an `async` function (or a function that returns a `Promise`) and returns a\n     * function following the error-first callback style, i.e. taking\n     * an `(err, value) => ...` callback as the last argument. In the callback, the\n     * first argument will be the rejection reason (or `null` if the `Promise`\n     * resolved), and the second argument will be the resolved value.\n     *\n     * ```js\n     * import { callbackify } from 'node:util';\n     *\n     * async function fn() {\n     *   return 'hello world';\n     * }\n     * const callbackFunction = callbackify(fn);\n     *\n     * callbackFunction((err, ret) => {\n     *   if (err) throw err;\n     *   console.log(ret);\n     * });\n     * ```\n     *\n     * Will print:\n     *\n     * ```text\n     * hello world\n     * ```\n     *\n     * The callback is executed asynchronously, and will have a limited stack trace.\n     * If the callback throws, the process will emit an `'uncaughtException'`\n     * event, and if not handled will exit.\n     *\n     * Since `null` has a special meaning as the first argument to a callback, if a\n     * wrapped function rejects a `Promise` with a falsy value as a reason, the value\n     * is wrapped in an `Error` with the original value stored in a field named\n     * `reason`.\n     *\n     * ```js\n     * function fn() {\n     *   return Promise.reject(null);\n     * }\n     * const callbackFunction = util.callbackify(fn);\n     *\n     * callbackFunction((err, ret) => {\n     *   // When the Promise was rejected with `null` it is wrapped with an Error and\n     *   // the original value is stored in `reason`.\n     *   err && Object.hasOwn(err, 'reason') && err.reason === null;  // true\n     * });\n     * ```\n     * @since v8.2.0\n     * @param fn An `async` function\n     * @return a callback style function\n     */\n    export function callbackify(fn: () => Promise<void>): (callback: (err: NodeJS.ErrnoException) => void) => void;\n    export function callbackify<TResult>(\n        fn: () => Promise<TResult>,\n    ): (callback: (err: NodeJS.ErrnoException, result: TResult) => void) => void;\n    export function callbackify<T1>(\n        fn: (arg1: T1) => Promise<void>,\n    ): (arg1: T1, callback: (err: NodeJS.ErrnoException) => void) => void;\n    export function callbackify<T1, TResult>(\n        fn: (arg1: T1) => Promise<TResult>,\n    ): (arg1: T1, callback: (err: NodeJS.ErrnoException, result: TResult) => void) => void;\n    export function callbackify<T1, T2>(\n        fn: (arg1: T1, arg2: T2) => Promise<void>,\n    ): (arg1: T1, arg2: T2, callback: (err: NodeJS.ErrnoException) => void) => void;\n    export function callbackify<T1, T2, TResult>(\n        fn: (arg1: T1, arg2: T2) => Promise<TResult>,\n    ): (arg1: T1, arg2: T2, callback: (err: NodeJS.ErrnoException | null, result: TResult) => void) => void;\n    export function callbackify<T1, T2, T3>(\n        fn: (arg1: T1, arg2: T2, arg3: T3) => Promise<void>,\n    ): (arg1: T1, arg2: T2, arg3: T3, callback: (err: NodeJS.ErrnoException) => void) => void;\n    export function callbackify<T1, T2, T3, TResult>(\n        fn: (arg1: T1, arg2: T2, arg3: T3) => Promise<TResult>,\n    ): (arg1: T1, arg2: T2, arg3: T3, callback: (err: NodeJS.ErrnoException | null, result: TResult) => void) => void;\n    export function callbackify<T1, T2, T3, T4>(\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => Promise<void>,\n    ): (arg1: T1, arg2: T2, arg3: T3, arg4: T4, callback: (err: NodeJS.ErrnoException) => void) => void;\n    export function callbackify<T1, T2, T3, T4, TResult>(\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => Promise<TResult>,\n    ): (\n        arg1: T1,\n        arg2: T2,\n        arg3: T3,\n        arg4: T4,\n        callback: (err: NodeJS.ErrnoException | null, result: TResult) => void,\n    ) => void;\n    export function callbackify<T1, T2, T3, T4, T5>(\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => Promise<void>,\n    ): (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, callback: (err: NodeJS.ErrnoException) => void) => void;\n    export function callbackify<T1, T2, T3, T4, T5, TResult>(\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => Promise<TResult>,\n    ): (\n        arg1: T1,\n        arg2: T2,\n        arg3: T3,\n        arg4: T4,\n        arg5: T5,\n        callback: (err: NodeJS.ErrnoException | null, result: TResult) => void,\n    ) => void;\n    export function callbackify<T1, T2, T3, T4, T5, T6>(\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6) => Promise<void>,\n    ): (\n        arg1: T1,\n        arg2: T2,\n        arg3: T3,\n        arg4: T4,\n        arg5: T5,\n        arg6: T6,\n        callback: (err: NodeJS.ErrnoException) => void,\n    ) => void;\n    export function callbackify<T1, T2, T3, T4, T5, T6, TResult>(\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, arg6: T6) => Promise<TResult>,\n    ): (\n        arg1: T1,\n        arg2: T2,\n        arg3: T3,\n        arg4: T4,\n        arg5: T5,\n        arg6: T6,\n        callback: (err: NodeJS.ErrnoException | null, result: TResult) => void,\n    ) => void;\n    export interface CustomPromisifyLegacy<TCustom extends Function> extends Function {\n        __promisify__: TCustom;\n    }\n    export interface CustomPromisifySymbol<TCustom extends Function> extends Function {\n        [promisify.custom]: TCustom;\n    }\n    export type CustomPromisify<TCustom extends Function> =\n        | CustomPromisifySymbol<TCustom>\n        | CustomPromisifyLegacy<TCustom>;\n    /**\n     * Takes a function following the common error-first callback style, i.e. taking\n     * an `(err, value) => ...` callback as the last argument, and returns a version\n     * that returns promises.\n     *\n     * ```js\n     * import { promisify } from 'node:util';\n     * import { stat } from 'node:fs';\n     *\n     * const promisifiedStat = promisify(stat);\n     * promisifiedStat('.').then((stats) => {\n     *   // Do something with `stats`\n     * }).catch((error) => {\n     *   // Handle the error.\n     * });\n     * ```\n     *\n     * Or, equivalently using `async function`s:\n     *\n     * ```js\n     * import { promisify } from 'node:util';\n     * import { stat } from 'node:fs';\n     *\n     * const promisifiedStat = promisify(stat);\n     *\n     * async function callStat() {\n     *   const stats = await promisifiedStat('.');\n     *   console.log(`This directory is owned by ${stats.uid}`);\n     * }\n     *\n     * callStat();\n     * ```\n     *\n     * If there is an `original[util.promisify.custom]` property present, `promisify`\n     * will return its value, see [Custom promisified functions](https://nodejs.org/docs/latest-v22.x/api/util.html#custom-promisified-functions).\n     *\n     * `promisify()` assumes that `original` is a function taking a callback as its\n     * final argument in all cases. If `original` is not a function, `promisify()`\n     * will throw an error. If `original` is a function but its last argument is not\n     * an error-first callback, it will still be passed an error-first\n     * callback as its last argument.\n     *\n     * Using `promisify()` on class methods or other methods that use `this` may not\n     * work as expected unless handled specially:\n     *\n     * ```js\n     * import { promisify } from 'node:util';\n     *\n     * class Foo {\n     *   constructor() {\n     *     this.a = 42;\n     *   }\n     *\n     *   bar(callback) {\n     *     callback(null, this.a);\n     *   }\n     * }\n     *\n     * const foo = new Foo();\n     *\n     * const naiveBar = promisify(foo.bar);\n     * // TypeError: Cannot read properties of undefined (reading 'a')\n     * // naiveBar().then(a => console.log(a));\n     *\n     * naiveBar.call(foo).then((a) => console.log(a)); // '42'\n     *\n     * const bindBar = naiveBar.bind(foo);\n     * bindBar().then((a) => console.log(a)); // '42'\n     * ```\n     * @since v8.0.0\n     */\n    export function promisify<TCustom extends Function>(fn: CustomPromisify<TCustom>): TCustom;\n    export function promisify<TResult>(\n        fn: (callback: (err: any, result: TResult) => void) => void,\n    ): () => Promise<TResult>;\n    export function promisify(fn: (callback: (err?: any) => void) => void): () => Promise<void>;\n    export function promisify<T1, TResult>(\n        fn: (arg1: T1, callback: (err: any, result: TResult) => void) => void,\n    ): (arg1: T1) => Promise<TResult>;\n    export function promisify<T1>(fn: (arg1: T1, callback: (err?: any) => void) => void): (arg1: T1) => Promise<void>;\n    export function promisify<T1, T2, TResult>(\n        fn: (arg1: T1, arg2: T2, callback: (err: any, result: TResult) => void) => void,\n    ): (arg1: T1, arg2: T2) => Promise<TResult>;\n    export function promisify<T1, T2>(\n        fn: (arg1: T1, arg2: T2, callback: (err?: any) => void) => void,\n    ): (arg1: T1, arg2: T2) => Promise<void>;\n    export function promisify<T1, T2, T3, TResult>(\n        fn: (arg1: T1, arg2: T2, arg3: T3, callback: (err: any, result: TResult) => void) => void,\n    ): (arg1: T1, arg2: T2, arg3: T3) => Promise<TResult>;\n    export function promisify<T1, T2, T3>(\n        fn: (arg1: T1, arg2: T2, arg3: T3, callback: (err?: any) => void) => void,\n    ): (arg1: T1, arg2: T2, arg3: T3) => Promise<void>;\n    export function promisify<T1, T2, T3, T4, TResult>(\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, callback: (err: any, result: TResult) => void) => void,\n    ): (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => Promise<TResult>;\n    export function promisify<T1, T2, T3, T4>(\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, callback: (err?: any) => void) => void,\n    ): (arg1: T1, arg2: T2, arg3: T3, arg4: T4) => Promise<void>;\n    export function promisify<T1, T2, T3, T4, T5, TResult>(\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, callback: (err: any, result: TResult) => void) => void,\n    ): (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => Promise<TResult>;\n    export function promisify<T1, T2, T3, T4, T5>(\n        fn: (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5, callback: (err?: any) => void) => void,\n    ): (arg1: T1, arg2: T2, arg3: T3, arg4: T4, arg5: T5) => Promise<void>;\n    export function promisify(fn: Function): Function;\n    export namespace promisify {\n        /**\n         * That can be used to declare custom promisified variants of functions.\n         */\n        const custom: unique symbol;\n    }\n    /**\n     * Stability: 1.1 - Active development\n     * Given an example `.env` file:\n     *\n     * ```js\n     * import { parseEnv } from 'node:util';\n     *\n     * parseEnv('HELLO=world\\nHELLO=oh my\\n');\n     * // Returns: { HELLO: 'oh my' }\n     * ```\n     * @param content The raw contents of a `.env` file.\n     * @since v20.12.0\n     */\n    export function parseEnv(content: string): NodeJS.Dict<string>;\n    // https://nodejs.org/docs/latest/api/util.html#foreground-colors\n    type ForegroundColors =\n        | \"black\"\n        | \"blackBright\"\n        | \"blue\"\n        | \"blueBright\"\n        | \"cyan\"\n        | \"cyanBright\"\n        | \"gray\"\n        | \"green\"\n        | \"greenBright\"\n        | \"grey\"\n        | \"magenta\"\n        | \"magentaBright\"\n        | \"red\"\n        | \"redBright\"\n        | \"white\"\n        | \"whiteBright\"\n        | \"yellow\"\n        | \"yellowBright\";\n    // https://nodejs.org/docs/latest/api/util.html#background-colors\n    type BackgroundColors =\n        | \"bgBlack\"\n        | \"bgBlackBright\"\n        | \"bgBlue\"\n        | \"bgBlueBright\"\n        | \"bgCyan\"\n        | \"bgCyanBright\"\n        | \"bgGray\"\n        | \"bgGreen\"\n        | \"bgGreenBright\"\n        | \"bgGrey\"\n        | \"bgMagenta\"\n        | \"bgMagentaBright\"\n        | \"bgRed\"\n        | \"bgRedBright\"\n        | \"bgWhite\"\n        | \"bgWhiteBright\"\n        | \"bgYellow\"\n        | \"bgYellowBright\";\n    // https://nodejs.org/docs/latest/api/util.html#modifiers\n    type Modifiers =\n        | \"blink\"\n        | \"bold\"\n        | \"dim\"\n        | \"doubleunderline\"\n        | \"framed\"\n        | \"hidden\"\n        | \"inverse\"\n        | \"italic\"\n        | \"overlined\"\n        | \"reset\"\n        | \"strikethrough\"\n        | \"underline\";\n    export interface StyleTextOptions {\n        /**\n         * When true, `stream` is checked to see if it can handle colors.\n         * @default true\n         */\n        validateStream?: boolean | undefined;\n        /**\n         * A stream that will be validated if it can be colored.\n         * @default process.stdout\n         */\n        stream?: NodeJS.WritableStream | undefined;\n    }\n    /**\n     * This function returns a formatted text considering the `format` passed\n     * for printing in a terminal. It is aware of the terminal's capabilities\n     * and acts according to the configuration set via `NO_COLORS`,\n     * `NODE_DISABLE_COLORS` and `FORCE_COLOR` environment variables.\n     *\n     * ```js\n     * import { styleText } from 'node:util';\n     * import { stderr } from 'node:process';\n     *\n     * const successMessage = styleText('green', 'Success!');\n     * console.log(successMessage);\n     *\n     * const errorMessage = styleText(\n     *   'red',\n     *   'Error! Error!',\n     *   // Validate if process.stderr has TTY\n     *   { stream: stderr },\n     * );\n     * console.error(errorMessage);\n     * ```\n     *\n     * `util.inspect.colors` also provides text formats such as `italic`, and\n     * `underline` and you can combine both:\n     *\n     * ```js\n     * console.log(\n     *   util.styleText(['underline', 'italic'], 'My italic underlined message'),\n     * );\n     * ```\n     *\n     * When passing an array of formats, the order of the format applied\n     * is left to right so the following style might overwrite the previous one.\n     *\n     * ```js\n     * console.log(\n     *   util.styleText(['red', 'green'], 'text'), // green\n     * );\n     * ```\n     *\n     * The full list of formats can be found in [modifiers](https://nodejs.org/docs/latest-v22.x/api/util.html#modifiers).\n     * @param format A text format or an Array of text formats defined in `util.inspect.colors`.\n     * @param text The text to to be formatted.\n     * @since v20.12.0\n     */\n    export function styleText(\n        format:\n            | ForegroundColors\n            | BackgroundColors\n            | Modifiers\n            | Array<ForegroundColors | BackgroundColors | Modifiers>,\n        text: string,\n        options?: StyleTextOptions,\n    ): string;\n    /**\n     * An implementation of the [WHATWG Encoding Standard](https://encoding.spec.whatwg.org/) `TextDecoder` API.\n     *\n     * ```js\n     * const decoder = new TextDecoder();\n     * const u8arr = new Uint8Array([72, 101, 108, 108, 111]);\n     * console.log(decoder.decode(u8arr)); // Hello\n     * ```\n     * @since v8.3.0\n     */\n    export class TextDecoder {\n        /**\n         * The encoding supported by the `TextDecoder` instance.\n         */\n        readonly encoding: string;\n        /**\n         * The value will be `true` if decoding errors result in a `TypeError` being\n         * thrown.\n         */\n        readonly fatal: boolean;\n        /**\n         * The value will be `true` if the decoding result will include the byte order\n         * mark.\n         */\n        readonly ignoreBOM: boolean;\n        constructor(\n            encoding?: string,\n            options?: {\n                fatal?: boolean | undefined;\n                ignoreBOM?: boolean | undefined;\n            },\n        );\n        /**\n         * Decodes the `input` and returns a string. If `options.stream` is `true`, any\n         * incomplete byte sequences occurring at the end of the `input` are buffered\n         * internally and emitted after the next call to `textDecoder.decode()`.\n         *\n         * If `textDecoder.fatal` is `true`, decoding errors that occur will result in a `TypeError` being thrown.\n         * @param input An `ArrayBuffer`, `DataView`, or `TypedArray` instance containing the encoded data.\n         */\n        decode(\n            input?: NodeJS.ArrayBufferView | ArrayBuffer | null,\n            options?: {\n                stream?: boolean | undefined;\n            },\n        ): string;\n    }\n    export interface EncodeIntoResult {\n        /**\n         * The read Unicode code units of input.\n         */\n        read: number;\n        /**\n         * The written UTF-8 bytes of output.\n         */\n        written: number;\n    }\n    export { types };\n\n    //// TextEncoder/Decoder\n    /**\n     * An implementation of the [WHATWG Encoding Standard](https://encoding.spec.whatwg.org/) `TextEncoder` API. All\n     * instances of `TextEncoder` only support UTF-8 encoding.\n     *\n     * ```js\n     * const encoder = new TextEncoder();\n     * const uint8array = encoder.encode('this is some data');\n     * ```\n     *\n     * The `TextEncoder` class is also available on the global object.\n     * @since v8.3.0\n     */\n    export class TextEncoder {\n        /**\n         * The encoding supported by the `TextEncoder` instance. Always set to `'utf-8'`.\n         */\n        readonly encoding: string;\n        /**\n         * UTF-8 encodes the `input` string and returns a `Uint8Array` containing the\n         * encoded bytes.\n         * @param [input='an empty string'] The text to encode.\n         */\n        encode(input?: string): Uint8Array;\n        /**\n         * UTF-8 encodes the `src` string to the `dest` Uint8Array and returns an object\n         * containing the read Unicode code units and written UTF-8 bytes.\n         *\n         * ```js\n         * const encoder = new TextEncoder();\n         * const src = 'this is some data';\n         * const dest = new Uint8Array(10);\n         * const { read, written } = encoder.encodeInto(src, dest);\n         * ```\n         * @param src The text to encode.\n         * @param dest The array to hold the encode result.\n         */\n        encodeInto(src: string, dest: Uint8Array): EncodeIntoResult;\n    }\n    import { TextDecoder as _TextDecoder, TextEncoder as _TextEncoder } from \"util\";\n    global {\n        /**\n         * `TextDecoder` class is a global reference for `import { TextDecoder } from 'node:util'`\n         * https://nodejs.org/api/globals.html#textdecoder\n         * @since v11.0.0\n         */\n        var TextDecoder: typeof globalThis extends {\n            onmessage: any;\n            TextDecoder: infer TextDecoder;\n        } ? TextDecoder\n            : typeof _TextDecoder;\n        /**\n         * `TextEncoder` class is a global reference for `import { TextEncoder } from 'node:util'`\n         * https://nodejs.org/api/globals.html#textencoder\n         * @since v11.0.0\n         */\n        var TextEncoder: typeof globalThis extends {\n            onmessage: any;\n            TextEncoder: infer TextEncoder;\n        } ? TextEncoder\n            : typeof _TextEncoder;\n    }\n\n    //// parseArgs\n    /**\n     * Provides a higher level API for command-line argument parsing than interacting\n     * with `process.argv` directly. Takes a specification for the expected arguments\n     * and returns a structured object with the parsed options and positionals.\n     *\n     * ```js\n     * import { parseArgs } from 'node:util';\n     * const args = ['-f', '--bar', 'b'];\n     * const options = {\n     *   foo: {\n     *     type: 'boolean',\n     *     short: 'f',\n     *   },\n     *   bar: {\n     *     type: 'string',\n     *   },\n     * };\n     * const {\n     *   values,\n     *   positionals,\n     * } = parseArgs({ args, options });\n     * console.log(values, positionals);\n     * // Prints: [Object: null prototype] { foo: true, bar: 'b' } []\n     * ```\n     * @since v18.3.0, v16.17.0\n     * @param config Used to provide arguments for parsing and to configure the parser. `config` supports the following properties:\n     * @return The parsed command line arguments:\n     */\n    export function parseArgs<T extends ParseArgsConfig>(config?: T): ParsedResults<T>;\n\n    /**\n     * Type of argument used in {@link parseArgs}.\n     */\n    export type ParseArgsOptionsType = \"boolean\" | \"string\";\n\n    export interface ParseArgsOptionDescriptor {\n        /**\n         * Type of argument.\n         */\n        type: ParseArgsOptionsType;\n        /**\n         * Whether this option can be provided multiple times.\n         * If `true`, all values will be collected in an array.\n         * If `false`, values for the option are last-wins.\n         * @default false.\n         */\n        multiple?: boolean | undefined;\n        /**\n         * A single character alias for the option.\n         */\n        short?: string | undefined;\n        /**\n         * The default value to\n         * be used if (and only if) the option does not appear in the arguments to be\n         * parsed. It must be of the same type as the `type` property. When `multiple`\n         * is `true`, it must be an array.\n         * @since v18.11.0\n         */\n        default?: string | boolean | string[] | boolean[] | undefined;\n    }\n    export interface ParseArgsOptionsConfig {\n        [longOption: string]: ParseArgsOptionDescriptor;\n    }\n    export interface ParseArgsConfig {\n        /**\n         * Array of argument strings.\n         */\n        args?: string[] | undefined;\n        /**\n         * Used to describe arguments known to the parser.\n         */\n        options?: ParseArgsOptionsConfig | undefined;\n        /**\n         * Should an error be thrown when unknown arguments are encountered,\n         * or when arguments are passed that do not match the `type` configured in `options`.\n         * @default true\n         */\n        strict?: boolean | undefined;\n        /**\n         * Whether this command accepts positional arguments.\n         */\n        allowPositionals?: boolean | undefined;\n        /**\n         * If `true`, allows explicitly setting boolean options to `false` by prefixing the option name with `--no-`.\n         * @default false\n         * @since v22.4.0\n         */\n        allowNegative?: boolean | undefined;\n        /**\n         * Return the parsed tokens. This is useful for extending the built-in behavior,\n         * from adding additional checks through to reprocessing the tokens in different ways.\n         * @default false\n         */\n        tokens?: boolean | undefined;\n    }\n    /*\n    IfDefaultsTrue and IfDefaultsFalse are helpers to handle default values for missing boolean properties.\n    TypeScript does not have exact types for objects: https://github.com/microsoft/TypeScript/issues/12936\n    This means it is impossible to distinguish between \"field X is definitely not present\" and \"field X may or may not be present\".\n    But we expect users to generally provide their config inline or `as const`, which means TS will always know whether a given field is present.\n    So this helper treats \"not definitely present\" (i.e., not `extends boolean`) as being \"definitely not present\", i.e. it should have its default value.\n    This is technically incorrect but is a much nicer UX for the common case.\n    The IfDefaultsTrue version is for things which default to true; the IfDefaultsFalse version is for things which default to false.\n    */\n    type IfDefaultsTrue<T, IfTrue, IfFalse> = T extends true ? IfTrue\n        : T extends false ? IfFalse\n        : IfTrue;\n\n    // we put the `extends false` condition first here because `undefined` compares like `any` when `strictNullChecks: false`\n    type IfDefaultsFalse<T, IfTrue, IfFalse> = T extends false ? IfFalse\n        : T extends true ? IfTrue\n        : IfFalse;\n\n    type ExtractOptionValue<T extends ParseArgsConfig, O extends ParseArgsOptionDescriptor> = IfDefaultsTrue<\n        T[\"strict\"],\n        O[\"type\"] extends \"string\" ? string : O[\"type\"] extends \"boolean\" ? boolean : string | boolean,\n        string | boolean\n    >;\n\n    type ApplyOptionalModifiers<O extends ParseArgsOptionsConfig, V extends Record<keyof O, unknown>> = (\n        & { -readonly [LongOption in keyof O]?: V[LongOption] }\n        & { [LongOption in keyof O as O[LongOption][\"default\"] extends {} ? LongOption : never]: V[LongOption] }\n    ) extends infer P ? { [K in keyof P]: P[K] } : never; // resolve intersection to object\n\n    type ParsedValues<T extends ParseArgsConfig> =\n        & IfDefaultsTrue<T[\"strict\"], unknown, { [longOption: string]: undefined | string | boolean }>\n        & (T[\"options\"] extends ParseArgsOptionsConfig ? ApplyOptionalModifiers<\n                T[\"options\"],\n                {\n                    [LongOption in keyof T[\"options\"]]: IfDefaultsFalse<\n                        T[\"options\"][LongOption][\"multiple\"],\n                        Array<ExtractOptionValue<T, T[\"options\"][LongOption]>>,\n                        ExtractOptionValue<T, T[\"options\"][LongOption]>\n                    >;\n                }\n            >\n            : {});\n\n    type ParsedPositionals<T extends ParseArgsConfig> = IfDefaultsTrue<\n        T[\"strict\"],\n        IfDefaultsFalse<T[\"allowPositionals\"], string[], []>,\n        IfDefaultsTrue<T[\"allowPositionals\"], string[], []>\n    >;\n\n    type PreciseTokenForOptions<\n        K extends string,\n        O extends ParseArgsOptionDescriptor,\n    > = O[\"type\"] extends \"string\" ? {\n            kind: \"option\";\n            index: number;\n            name: K;\n            rawName: string;\n            value: string;\n            inlineValue: boolean;\n        }\n        : O[\"type\"] extends \"boolean\" ? {\n                kind: \"option\";\n                index: number;\n                name: K;\n                rawName: string;\n                value: undefined;\n                inlineValue: undefined;\n            }\n        : OptionToken & { name: K };\n\n    type TokenForOptions<\n        T extends ParseArgsConfig,\n        K extends keyof T[\"options\"] = keyof T[\"options\"],\n    > = K extends unknown\n        ? T[\"options\"] extends ParseArgsOptionsConfig ? PreciseTokenForOptions<K & string, T[\"options\"][K]>\n        : OptionToken\n        : never;\n\n    type ParsedOptionToken<T extends ParseArgsConfig> = IfDefaultsTrue<T[\"strict\"], TokenForOptions<T>, OptionToken>;\n\n    type ParsedPositionalToken<T extends ParseArgsConfig> = IfDefaultsTrue<\n        T[\"strict\"],\n        IfDefaultsFalse<T[\"allowPositionals\"], { kind: \"positional\"; index: number; value: string }, never>,\n        IfDefaultsTrue<T[\"allowPositionals\"], { kind: \"positional\"; index: number; value: string }, never>\n    >;\n\n    type ParsedTokens<T extends ParseArgsConfig> = Array<\n        ParsedOptionToken<T> | ParsedPositionalToken<T> | { kind: \"option-terminator\"; index: number }\n    >;\n\n    type PreciseParsedResults<T extends ParseArgsConfig> = IfDefaultsFalse<\n        T[\"tokens\"],\n        {\n            values: ParsedValues<T>;\n            positionals: ParsedPositionals<T>;\n            tokens: ParsedTokens<T>;\n        },\n        {\n            values: ParsedValues<T>;\n            positionals: ParsedPositionals<T>;\n        }\n    >;\n\n    type OptionToken =\n        | { kind: \"option\"; index: number; name: string; rawName: string; value: string; inlineValue: boolean }\n        | {\n            kind: \"option\";\n            index: number;\n            name: string;\n            rawName: string;\n            value: undefined;\n            inlineValue: undefined;\n        };\n\n    type Token =\n        | OptionToken\n        | { kind: \"positional\"; index: number; value: string }\n        | { kind: \"option-terminator\"; index: number };\n\n    // If ParseArgsConfig extends T, then the user passed config constructed elsewhere.\n    // So we can't rely on the `\"not definitely present\" implies \"definitely not present\"` assumption mentioned above.\n    type ParsedResults<T extends ParseArgsConfig> = ParseArgsConfig extends T ? {\n            values: {\n                [longOption: string]: undefined | string | boolean | Array<string | boolean>;\n            };\n            positionals: string[];\n            tokens?: Token[];\n        }\n        : PreciseParsedResults<T>;\n\n    /**\n     * An implementation of [the MIMEType class](https://bmeck.github.io/node-proposal-mime-api/).\n     *\n     * In accordance with browser conventions, all properties of `MIMEType` objects\n     * are implemented as getters and setters on the class prototype, rather than as\n     * data properties on the object itself.\n     *\n     * A MIME string is a structured string containing multiple meaningful\n     * components. When parsed, a `MIMEType` object is returned containing\n     * properties for each of these components.\n     * @since v19.1.0, v18.13.0\n     */\n    export class MIMEType {\n        /**\n         * Creates a new MIMEType object by parsing the input.\n         *\n         * A `TypeError` will be thrown if the `input` is not a valid MIME.\n         * Note that an effort will be made to coerce the given values into strings.\n         * @param input The input MIME to parse.\n         */\n        constructor(input: string | { toString: () => string });\n\n        /**\n         * Gets and sets the type portion of the MIME.\n         *\n         * ```js\n         * import { MIMEType } from 'node:util';\n         *\n         * const myMIME = new MIMEType('text/javascript');\n         * console.log(myMIME.type);\n         * // Prints: text\n         * myMIME.type = 'application';\n         * console.log(myMIME.type);\n         * // Prints: application\n         * console.log(String(myMIME));\n         * // Prints: application/javascript\n         * ```\n         */\n        type: string;\n        /**\n         * Gets and sets the subtype portion of the MIME.\n         *\n         * ```js\n         * import { MIMEType } from 'node:util';\n         *\n         * const myMIME = new MIMEType('text/ecmascript');\n         * console.log(myMIME.subtype);\n         * // Prints: ecmascript\n         * myMIME.subtype = 'javascript';\n         * console.log(myMIME.subtype);\n         * // Prints: javascript\n         * console.log(String(myMIME));\n         * // Prints: text/javascript\n         * ```\n         */\n        subtype: string;\n        /**\n         * Gets the essence of the MIME. This property is read only.\n         * Use `mime.type` or `mime.subtype` to alter the MIME.\n         *\n         * ```js\n         * import { MIMEType } from 'node:util';\n         *\n         * const myMIME = new MIMEType('text/javascript;key=value');\n         * console.log(myMIME.essence);\n         * // Prints: text/javascript\n         * myMIME.type = 'application';\n         * console.log(myMIME.essence);\n         * // Prints: application/javascript\n         * console.log(String(myMIME));\n         * // Prints: application/javascript;key=value\n         * ```\n         */\n        readonly essence: string;\n        /**\n         * Gets the `MIMEParams` object representing the\n         * parameters of the MIME. This property is read-only. See `MIMEParams` documentation for details.\n         */\n        readonly params: MIMEParams;\n        /**\n         * The `toString()` method on the `MIMEType` object returns the serialized MIME.\n         *\n         * Because of the need for standard compliance, this method does not allow users\n         * to customize the serialization process of the MIME.\n         */\n        toString(): string;\n    }\n    /**\n     * The `MIMEParams` API provides read and write access to the parameters of a `MIMEType`.\n     * @since v19.1.0, v18.13.0\n     */\n    export class MIMEParams {\n        /**\n         * Remove all name-value pairs whose name is `name`.\n         */\n        delete(name: string): void;\n        /**\n         * Returns an iterator over each of the name-value pairs in the parameters.\n         * Each item of the iterator is a JavaScript `Array`. The first item of the array\n         * is the `name`, the second item of the array is the `value`.\n         */\n        entries(): NodeJS.Iterator<[name: string, value: string]>;\n        /**\n         * Returns the value of the first name-value pair whose name is `name`. If there\n         * are no such pairs, `null` is returned.\n         * @return or `null` if there is no name-value pair with the given `name`.\n         */\n        get(name: string): string | null;\n        /**\n         * Returns `true` if there is at least one name-value pair whose name is `name`.\n         */\n        has(name: string): boolean;\n        /**\n         * Returns an iterator over the names of each name-value pair.\n         *\n         * ```js\n         * import { MIMEType } from 'node:util';\n         *\n         * const { params } = new MIMEType('text/plain;foo=0;bar=1');\n         * for (const name of params.keys()) {\n         *   console.log(name);\n         * }\n         * // Prints:\n         * //   foo\n         * //   bar\n         * ```\n         */\n        keys(): NodeJS.Iterator<string>;\n        /**\n         * Sets the value in the `MIMEParams` object associated with `name` to `value`. If there are any pre-existing name-value pairs whose names are `name`,\n         * set the first such pair's value to `value`.\n         *\n         * ```js\n         * import { MIMEType } from 'node:util';\n         *\n         * const { params } = new MIMEType('text/plain;foo=0;bar=1');\n         * params.set('foo', 'def');\n         * params.set('baz', 'xyz');\n         * console.log(params.toString());\n         * // Prints: foo=def;bar=1;baz=xyz\n         * ```\n         */\n        set(name: string, value: string): void;\n        /**\n         * Returns an iterator over the values of each name-value pair.\n         */\n        values(): NodeJS.Iterator<string>;\n        /**\n         * Returns an iterator over each of the name-value pairs in the parameters.\n         */\n        [Symbol.iterator](): NodeJS.Iterator<[name: string, value: string]>;\n    }\n}\ndeclare module \"util/types\" {\n    import { KeyObject, webcrypto } from \"node:crypto\";\n    /**\n     * Returns `true` if the value is a built-in [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) or\n     * [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer) instance.\n     *\n     * See also `util.types.isArrayBuffer()` and `util.types.isSharedArrayBuffer()`.\n     *\n     * ```js\n     * util.types.isAnyArrayBuffer(new ArrayBuffer());  // Returns true\n     * util.types.isAnyArrayBuffer(new SharedArrayBuffer());  // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isAnyArrayBuffer(object: unknown): object is ArrayBufferLike;\n    /**\n     * Returns `true` if the value is an `arguments` object.\n     *\n     * ```js\n     * function foo() {\n     *   util.types.isArgumentsObject(arguments);  // Returns true\n     * }\n     * ```\n     * @since v10.0.0\n     */\n    function isArgumentsObject(object: unknown): object is IArguments;\n    /**\n     * Returns `true` if the value is a built-in [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) instance.\n     * This does _not_ include [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer) instances. Usually, it is\n     * desirable to test for both; See `util.types.isAnyArrayBuffer()` for that.\n     *\n     * ```js\n     * util.types.isArrayBuffer(new ArrayBuffer());  // Returns true\n     * util.types.isArrayBuffer(new SharedArrayBuffer());  // Returns false\n     * ```\n     * @since v10.0.0\n     */\n    function isArrayBuffer(object: unknown): object is ArrayBuffer;\n    /**\n     * Returns `true` if the value is an instance of one of the [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) views, such as typed\n     * array objects or [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView). Equivalent to\n     * [`ArrayBuffer.isView()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/isView).\n     *\n     * ```js\n     * util.types.isArrayBufferView(new Int8Array());  // true\n     * util.types.isArrayBufferView(Buffer.from('hello world')); // true\n     * util.types.isArrayBufferView(new DataView(new ArrayBuffer(16)));  // true\n     * util.types.isArrayBufferView(new ArrayBuffer());  // false\n     * ```\n     * @since v10.0.0\n     */\n    function isArrayBufferView(object: unknown): object is NodeJS.ArrayBufferView;\n    /**\n     * Returns `true` if the value is an [async function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function).\n     * This only reports back what the JavaScript engine is seeing;\n     * in particular, the return value may not match the original source code if\n     * a transpilation tool was used.\n     *\n     * ```js\n     * util.types.isAsyncFunction(function foo() {});  // Returns false\n     * util.types.isAsyncFunction(async function foo() {});  // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isAsyncFunction(object: unknown): boolean;\n    /**\n     * Returns `true` if the value is a `BigInt64Array` instance.\n     *\n     * ```js\n     * util.types.isBigInt64Array(new BigInt64Array());   // Returns true\n     * util.types.isBigInt64Array(new BigUint64Array());  // Returns false\n     * ```\n     * @since v10.0.0\n     */\n    function isBigInt64Array(value: unknown): value is BigInt64Array;\n    /**\n     * Returns `true` if the value is a BigInt object, e.g. created\n     * by `Object(BigInt(123))`.\n     *\n     * ```js\n     * util.types.isBigIntObject(Object(BigInt(123)));   // Returns true\n     * util.types.isBigIntObject(BigInt(123));   // Returns false\n     * util.types.isBigIntObject(123);  // Returns false\n     * ```\n     * @since v10.4.0\n     */\n    function isBigIntObject(object: unknown): object is BigInt;\n    /**\n     * Returns `true` if the value is a `BigUint64Array` instance.\n     *\n     * ```js\n     * util.types.isBigUint64Array(new BigInt64Array());   // Returns false\n     * util.types.isBigUint64Array(new BigUint64Array());  // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isBigUint64Array(value: unknown): value is BigUint64Array;\n    /**\n     * Returns `true` if the value is a boolean object, e.g. created\n     * by `new Boolean()`.\n     *\n     * ```js\n     * util.types.isBooleanObject(false);  // Returns false\n     * util.types.isBooleanObject(true);   // Returns false\n     * util.types.isBooleanObject(new Boolean(false)); // Returns true\n     * util.types.isBooleanObject(new Boolean(true));  // Returns true\n     * util.types.isBooleanObject(Boolean(false)); // Returns false\n     * util.types.isBooleanObject(Boolean(true));  // Returns false\n     * ```\n     * @since v10.0.0\n     */\n    function isBooleanObject(object: unknown): object is Boolean;\n    /**\n     * Returns `true` if the value is any boxed primitive object, e.g. created\n     * by `new Boolean()`, `new String()` or `Object(Symbol())`.\n     *\n     * For example:\n     *\n     * ```js\n     * util.types.isBoxedPrimitive(false); // Returns false\n     * util.types.isBoxedPrimitive(new Boolean(false)); // Returns true\n     * util.types.isBoxedPrimitive(Symbol('foo')); // Returns false\n     * util.types.isBoxedPrimitive(Object(Symbol('foo'))); // Returns true\n     * util.types.isBoxedPrimitive(Object(BigInt(5))); // Returns true\n     * ```\n     * @since v10.11.0\n     */\n    function isBoxedPrimitive(object: unknown): object is String | Number | BigInt | Boolean | Symbol;\n    /**\n     * Returns `true` if the value is a built-in [`DataView`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView) instance.\n     *\n     * ```js\n     * const ab = new ArrayBuffer(20);\n     * util.types.isDataView(new DataView(ab));  // Returns true\n     * util.types.isDataView(new Float64Array());  // Returns false\n     * ```\n     *\n     * See also [`ArrayBuffer.isView()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/isView).\n     * @since v10.0.0\n     */\n    function isDataView(object: unknown): object is DataView;\n    /**\n     * Returns `true` if the value is a built-in [`Date`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) instance.\n     *\n     * ```js\n     * util.types.isDate(new Date());  // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isDate(object: unknown): object is Date;\n    /**\n     * Returns `true` if the value is a native `External` value.\n     *\n     * A native `External` value is a special type of object that contains a\n     * raw C++ pointer (`void*`) for access from native code, and has no other\n     * properties. Such objects are created either by Node.js internals or native\n     * addons. In JavaScript, they are\n     * [frozen](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze) objects with a\n     * `null` prototype.\n     *\n     * ```c\n     * #include <js_native_api.h>\n     * #include <stdlib.h>\n     * napi_value result;\n     * static napi_value MyNapi(napi_env env, napi_callback_info info) {\n     *   int* raw = (int*) malloc(1024);\n     *   napi_status status = napi_create_external(env, (void*) raw, NULL, NULL, &result);\n     *   if (status != napi_ok) {\n     *     napi_throw_error(env, NULL, \"napi_create_external failed\");\n     *     return NULL;\n     *   }\n     *   return result;\n     * }\n     * ...\n     * DECLARE_NAPI_PROPERTY(\"myNapi\", MyNapi)\n     * ...\n     * ```\n     *\n     * ```js\n     * import native from 'napi_addon.node';\n     * import { types } from 'node:util';\n     *\n     * const data = native.myNapi();\n     * types.isExternal(data); // returns true\n     * types.isExternal(0); // returns false\n     * types.isExternal(new String('foo')); // returns false\n     * ```\n     *\n     * For further information on `napi_create_external`, refer to\n     * [`napi_create_external()`](https://nodejs.org/docs/latest-v22.x/api/n-api.html#napi_create_external).\n     * @since v10.0.0\n     */\n    function isExternal(object: unknown): boolean;\n    /**\n     * Returns `true` if the value is a built-in [`Float32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array) instance.\n     *\n     * ```js\n     * util.types.isFloat32Array(new ArrayBuffer());  // Returns false\n     * util.types.isFloat32Array(new Float32Array());  // Returns true\n     * util.types.isFloat32Array(new Float64Array());  // Returns false\n     * ```\n     * @since v10.0.0\n     */\n    function isFloat32Array(object: unknown): object is Float32Array;\n    /**\n     * Returns `true` if the value is a built-in [`Float64Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array) instance.\n     *\n     * ```js\n     * util.types.isFloat64Array(new ArrayBuffer());  // Returns false\n     * util.types.isFloat64Array(new Uint8Array());  // Returns false\n     * util.types.isFloat64Array(new Float64Array());  // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isFloat64Array(object: unknown): object is Float64Array;\n    /**\n     * Returns `true` if the value is a generator function.\n     * This only reports back what the JavaScript engine is seeing;\n     * in particular, the return value may not match the original source code if\n     * a transpilation tool was used.\n     *\n     * ```js\n     * util.types.isGeneratorFunction(function foo() {});  // Returns false\n     * util.types.isGeneratorFunction(function* foo() {});  // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isGeneratorFunction(object: unknown): object is GeneratorFunction;\n    /**\n     * Returns `true` if the value is a generator object as returned from a\n     * built-in generator function.\n     * This only reports back what the JavaScript engine is seeing;\n     * in particular, the return value may not match the original source code if\n     * a transpilation tool was used.\n     *\n     * ```js\n     * function* foo() {}\n     * const generator = foo();\n     * util.types.isGeneratorObject(generator);  // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isGeneratorObject(object: unknown): object is Generator;\n    /**\n     * Returns `true` if the value is a built-in [`Int8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array) instance.\n     *\n     * ```js\n     * util.types.isInt8Array(new ArrayBuffer());  // Returns false\n     * util.types.isInt8Array(new Int8Array());  // Returns true\n     * util.types.isInt8Array(new Float64Array());  // Returns false\n     * ```\n     * @since v10.0.0\n     */\n    function isInt8Array(object: unknown): object is Int8Array;\n    /**\n     * Returns `true` if the value is a built-in [`Int16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array) instance.\n     *\n     * ```js\n     * util.types.isInt16Array(new ArrayBuffer());  // Returns false\n     * util.types.isInt16Array(new Int16Array());  // Returns true\n     * util.types.isInt16Array(new Float64Array());  // Returns false\n     * ```\n     * @since v10.0.0\n     */\n    function isInt16Array(object: unknown): object is Int16Array;\n    /**\n     * Returns `true` if the value is a built-in [`Int32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array) instance.\n     *\n     * ```js\n     * util.types.isInt32Array(new ArrayBuffer());  // Returns false\n     * util.types.isInt32Array(new Int32Array());  // Returns true\n     * util.types.isInt32Array(new Float64Array());  // Returns false\n     * ```\n     * @since v10.0.0\n     */\n    function isInt32Array(object: unknown): object is Int32Array;\n    /**\n     * Returns `true` if the value is a built-in [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) instance.\n     *\n     * ```js\n     * util.types.isMap(new Map());  // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isMap<T>(\n        object: T | {},\n    ): object is T extends ReadonlyMap<any, any> ? (unknown extends T ? never : ReadonlyMap<any, any>)\n        : Map<unknown, unknown>;\n    /**\n     * Returns `true` if the value is an iterator returned for a built-in [`Map`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map) instance.\n     *\n     * ```js\n     * const map = new Map();\n     * util.types.isMapIterator(map.keys());  // Returns true\n     * util.types.isMapIterator(map.values());  // Returns true\n     * util.types.isMapIterator(map.entries());  // Returns true\n     * util.types.isMapIterator(map[Symbol.iterator]());  // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isMapIterator(object: unknown): boolean;\n    /**\n     * Returns `true` if the value is an instance of a [Module Namespace Object](https://tc39.github.io/ecma262/#sec-module-namespace-exotic-objects).\n     *\n     * ```js\n     * import * as ns from './a.js';\n     *\n     * util.types.isModuleNamespaceObject(ns);  // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isModuleNamespaceObject(value: unknown): boolean;\n    /**\n     * Returns `true` if the value was returned by the constructor of a\n     * [built-in `Error` type](https://tc39.es/ecma262/#sec-error-objects).\n     *\n     * ```js\n     * console.log(util.types.isNativeError(new Error()));  // true\n     * console.log(util.types.isNativeError(new TypeError()));  // true\n     * console.log(util.types.isNativeError(new RangeError()));  // true\n     * ```\n     *\n     * Subclasses of the native error types are also native errors:\n     *\n     * ```js\n     * class MyError extends Error {}\n     * console.log(util.types.isNativeError(new MyError()));  // true\n     * ```\n     *\n     * A value being `instanceof` a native error class is not equivalent to `isNativeError()`\n     * returning `true` for that value. `isNativeError()` returns `true` for errors\n     * which come from a different [realm](https://tc39.es/ecma262/#realm) while `instanceof Error` returns `false`\n     * for these errors:\n     *\n     * ```js\n     * import { createContext, runInContext } from 'node:vm';\n     * import { types } from 'node:util';\n     *\n     * const context = createContext({});\n     * const myError = runInContext('new Error()', context);\n     * console.log(types.isNativeError(myError)); // true\n     * console.log(myError instanceof Error); // false\n     * ```\n     *\n     * Conversely, `isNativeError()` returns `false` for all objects which were not\n     * returned by the constructor of a native error. That includes values\n     * which are `instanceof` native errors:\n     *\n     * ```js\n     * const myError = { __proto__: Error.prototype };\n     * console.log(util.types.isNativeError(myError)); // false\n     * console.log(myError instanceof Error); // true\n     * ```\n     * @since v10.0.0\n     */\n    function isNativeError(object: unknown): object is Error;\n    /**\n     * Returns `true` if the value is a number object, e.g. created\n     * by `new Number()`.\n     *\n     * ```js\n     * util.types.isNumberObject(0);  // Returns false\n     * util.types.isNumberObject(new Number(0));   // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isNumberObject(object: unknown): object is Number;\n    /**\n     * Returns `true` if the value is a built-in [`Promise`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n     *\n     * ```js\n     * util.types.isPromise(Promise.resolve(42));  // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isPromise(object: unknown): object is Promise<unknown>;\n    /**\n     * Returns `true` if the value is a [`Proxy`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy) instance.\n     *\n     * ```js\n     * const target = {};\n     * const proxy = new Proxy(target, {});\n     * util.types.isProxy(target);  // Returns false\n     * util.types.isProxy(proxy);  // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isProxy(object: unknown): boolean;\n    /**\n     * Returns `true` if the value is a regular expression object.\n     *\n     * ```js\n     * util.types.isRegExp(/abc/);  // Returns true\n     * util.types.isRegExp(new RegExp('abc'));  // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isRegExp(object: unknown): object is RegExp;\n    /**\n     * Returns `true` if the value is a built-in [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) instance.\n     *\n     * ```js\n     * util.types.isSet(new Set());  // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isSet<T>(\n        object: T | {},\n    ): object is T extends ReadonlySet<any> ? (unknown extends T ? never : ReadonlySet<any>) : Set<unknown>;\n    /**\n     * Returns `true` if the value is an iterator returned for a built-in [`Set`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set) instance.\n     *\n     * ```js\n     * const set = new Set();\n     * util.types.isSetIterator(set.keys());  // Returns true\n     * util.types.isSetIterator(set.values());  // Returns true\n     * util.types.isSetIterator(set.entries());  // Returns true\n     * util.types.isSetIterator(set[Symbol.iterator]());  // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isSetIterator(object: unknown): boolean;\n    /**\n     * Returns `true` if the value is a built-in [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer) instance.\n     * This does _not_ include [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) instances. Usually, it is\n     * desirable to test for both; See `util.types.isAnyArrayBuffer()` for that.\n     *\n     * ```js\n     * util.types.isSharedArrayBuffer(new ArrayBuffer());  // Returns false\n     * util.types.isSharedArrayBuffer(new SharedArrayBuffer());  // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isSharedArrayBuffer(object: unknown): object is SharedArrayBuffer;\n    /**\n     * Returns `true` if the value is a string object, e.g. created\n     * by `new String()`.\n     *\n     * ```js\n     * util.types.isStringObject('foo');  // Returns false\n     * util.types.isStringObject(new String('foo'));   // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isStringObject(object: unknown): object is String;\n    /**\n     * Returns `true` if the value is a symbol object, created\n     * by calling `Object()` on a `Symbol` primitive.\n     *\n     * ```js\n     * const symbol = Symbol('foo');\n     * util.types.isSymbolObject(symbol);  // Returns false\n     * util.types.isSymbolObject(Object(symbol));   // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isSymbolObject(object: unknown): object is Symbol;\n    /**\n     * Returns `true` if the value is a built-in [`TypedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray) instance.\n     *\n     * ```js\n     * util.types.isTypedArray(new ArrayBuffer());  // Returns false\n     * util.types.isTypedArray(new Uint8Array());  // Returns true\n     * util.types.isTypedArray(new Float64Array());  // Returns true\n     * ```\n     *\n     * See also [`ArrayBuffer.isView()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/isView).\n     * @since v10.0.0\n     */\n    function isTypedArray(object: unknown): object is NodeJS.TypedArray;\n    /**\n     * Returns `true` if the value is a built-in [`Uint8Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) instance.\n     *\n     * ```js\n     * util.types.isUint8Array(new ArrayBuffer());  // Returns false\n     * util.types.isUint8Array(new Uint8Array());  // Returns true\n     * util.types.isUint8Array(new Float64Array());  // Returns false\n     * ```\n     * @since v10.0.0\n     */\n    function isUint8Array(object: unknown): object is Uint8Array;\n    /**\n     * Returns `true` if the value is a built-in [`Uint8ClampedArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray) instance.\n     *\n     * ```js\n     * util.types.isUint8ClampedArray(new ArrayBuffer());  // Returns false\n     * util.types.isUint8ClampedArray(new Uint8ClampedArray());  // Returns true\n     * util.types.isUint8ClampedArray(new Float64Array());  // Returns false\n     * ```\n     * @since v10.0.0\n     */\n    function isUint8ClampedArray(object: unknown): object is Uint8ClampedArray;\n    /**\n     * Returns `true` if the value is a built-in [`Uint16Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array) instance.\n     *\n     * ```js\n     * util.types.isUint16Array(new ArrayBuffer());  // Returns false\n     * util.types.isUint16Array(new Uint16Array());  // Returns true\n     * util.types.isUint16Array(new Float64Array());  // Returns false\n     * ```\n     * @since v10.0.0\n     */\n    function isUint16Array(object: unknown): object is Uint16Array;\n    /**\n     * Returns `true` if the value is a built-in [`Uint32Array`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array) instance.\n     *\n     * ```js\n     * util.types.isUint32Array(new ArrayBuffer());  // Returns false\n     * util.types.isUint32Array(new Uint32Array());  // Returns true\n     * util.types.isUint32Array(new Float64Array());  // Returns false\n     * ```\n     * @since v10.0.0\n     */\n    function isUint32Array(object: unknown): object is Uint32Array;\n    /**\n     * Returns `true` if the value is a built-in [`WeakMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap) instance.\n     *\n     * ```js\n     * util.types.isWeakMap(new WeakMap());  // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isWeakMap(object: unknown): object is WeakMap<object, unknown>;\n    /**\n     * Returns `true` if the value is a built-in [`WeakSet`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet) instance.\n     *\n     * ```js\n     * util.types.isWeakSet(new WeakSet());  // Returns true\n     * ```\n     * @since v10.0.0\n     */\n    function isWeakSet(object: unknown): object is WeakSet<object>;\n    /**\n     * Returns `true` if `value` is a `KeyObject`, `false` otherwise.\n     * @since v16.2.0\n     */\n    function isKeyObject(object: unknown): object is KeyObject;\n    /**\n     * Returns `true` if `value` is a `CryptoKey`, `false` otherwise.\n     * @since v16.2.0\n     */\n    function isCryptoKey(object: unknown): object is webcrypto.CryptoKey;\n}\ndeclare module \"node:util\" {\n    export * from \"util\";\n}\ndeclare module \"node:util/types\" {\n    export * from \"util/types\";\n}\n",
  '@types/node/v8.d.ts':
    '/**\n * The `node:v8` module exposes APIs that are specific to the version of [V8](https://developers.google.com/v8/) built into the Node.js binary. It can be accessed using:\n *\n * ```js\n * import v8 from \'node:v8\';\n * ```\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/v8.js)\n */\ndeclare module "v8" {\n    import { Readable } from "node:stream";\n    interface HeapSpaceInfo {\n        space_name: string;\n        space_size: number;\n        space_used_size: number;\n        space_available_size: number;\n        physical_space_size: number;\n    }\n    // ** Signifies if the --zap_code_space option is enabled or not.  1 == enabled, 0 == disabled. */\n    type DoesZapCodeSpaceFlag = 0 | 1;\n    interface HeapInfo {\n        total_heap_size: number;\n        total_heap_size_executable: number;\n        total_physical_size: number;\n        total_available_size: number;\n        used_heap_size: number;\n        heap_size_limit: number;\n        malloced_memory: number;\n        peak_malloced_memory: number;\n        does_zap_garbage: DoesZapCodeSpaceFlag;\n        number_of_native_contexts: number;\n        number_of_detached_contexts: number;\n        total_global_handles_size: number;\n        used_global_handles_size: number;\n        external_memory: number;\n    }\n    interface HeapCodeStatistics {\n        code_and_metadata_size: number;\n        bytecode_and_metadata_size: number;\n        external_script_source_size: number;\n    }\n    interface HeapSnapshotOptions {\n        /**\n         * If true, expose internals in the heap snapshot.\n         * @default false\n         */\n        exposeInternals?: boolean;\n        /**\n         * If true, expose numeric values in artificial fields.\n         * @default false\n         */\n        exposeNumericValues?: boolean;\n    }\n    /**\n     * Returns an integer representing a version tag derived from the V8 version,\n     * command-line flags, and detected CPU features. This is useful for determining\n     * whether a `vm.Script` `cachedData` buffer is compatible with this instance\n     * of V8.\n     *\n     * ```js\n     * console.log(v8.cachedDataVersionTag()); // 3947234607\n     * // The value returned by v8.cachedDataVersionTag() is derived from the V8\n     * // version, command-line flags, and detected CPU features. Test that the value\n     * // does indeed update when flags are toggled.\n     * v8.setFlagsFromString(\'--allow_natives_syntax\');\n     * console.log(v8.cachedDataVersionTag()); // 183726201\n     * ```\n     * @since v8.0.0\n     */\n    function cachedDataVersionTag(): number;\n    /**\n     * Returns an object with the following properties:\n     *\n     * `does_zap_garbage` is a 0/1 boolean, which signifies whether the `--zap_code_space` option is enabled or not. This makes V8 overwrite heap\n     * garbage with a bit pattern. The RSS footprint (resident set size) gets bigger\n     * because it continuously touches all heap pages and that makes them less likely\n     * to get swapped out by the operating system.\n     *\n     * `number_of_native_contexts` The value of native\\_context is the number of the\n     * top-level contexts currently active. Increase of this number over time indicates\n     * a memory leak.\n     *\n     * `number_of_detached_contexts` The value of detached\\_context is the number\n     * of contexts that were detached and not yet garbage collected. This number\n     * being non-zero indicates a potential memory leak.\n     *\n     * `total_global_handles_size` The value of total\\_global\\_handles\\_size is the\n     * total memory size of V8 global handles.\n     *\n     * `used_global_handles_size` The value of used\\_global\\_handles\\_size is the\n     * used memory size of V8 global handles.\n     *\n     * `external_memory` The value of external\\_memory is the memory size of array\n     * buffers and external strings.\n     *\n     * ```js\n     * {\n     *   total_heap_size: 7326976,\n     *   total_heap_size_executable: 4194304,\n     *   total_physical_size: 7326976,\n     *   total_available_size: 1152656,\n     *   used_heap_size: 3476208,\n     *   heap_size_limit: 1535115264,\n     *   malloced_memory: 16384,\n     *   peak_malloced_memory: 1127496,\n     *   does_zap_garbage: 0,\n     *   number_of_native_contexts: 1,\n     *   number_of_detached_contexts: 0,\n     *   total_global_handles_size: 8192,\n     *   used_global_handles_size: 3296,\n     *   external_memory: 318824\n     * }\n     * ```\n     * @since v1.0.0\n     */\n    function getHeapStatistics(): HeapInfo;\n    /**\n     * It returns an object with a structure similar to the\n     * [`cppgc::HeapStatistics`](https://v8docs.nodesource.com/node-22.4/d7/d51/heap-statistics_8h_source.html)\n     * object. See the [V8 documentation](https://v8docs.nodesource.com/node-22.4/df/d2f/structcppgc_1_1_heap_statistics.html)\n     * for more information about the properties of the object.\n     *\n     * ```js\n     * // Detailed\n     * ({\n     *   committed_size_bytes: 131072,\n     *   resident_size_bytes: 131072,\n     *   used_size_bytes: 152,\n     *   space_statistics: [\n     *     {\n     *       name: \'NormalPageSpace0\',\n     *       committed_size_bytes: 0,\n     *       resident_size_bytes: 0,\n     *       used_size_bytes: 0,\n     *       page_stats: [{}],\n     *       free_list_stats: {},\n     *     },\n     *     {\n     *       name: \'NormalPageSpace1\',\n     *       committed_size_bytes: 131072,\n     *       resident_size_bytes: 131072,\n     *       used_size_bytes: 152,\n     *       page_stats: [{}],\n     *       free_list_stats: {},\n     *     },\n     *     {\n     *       name: \'NormalPageSpace2\',\n     *       committed_size_bytes: 0,\n     *       resident_size_bytes: 0,\n     *       used_size_bytes: 0,\n     *       page_stats: [{}],\n     *       free_list_stats: {},\n     *     },\n     *     {\n     *       name: \'NormalPageSpace3\',\n     *       committed_size_bytes: 0,\n     *       resident_size_bytes: 0,\n     *       used_size_bytes: 0,\n     *       page_stats: [{}],\n     *       free_list_stats: {},\n     *     },\n     *     {\n     *       name: \'LargePageSpace\',\n     *       committed_size_bytes: 0,\n     *       resident_size_bytes: 0,\n     *       used_size_bytes: 0,\n     *       page_stats: [{}],\n     *       free_list_stats: {},\n     *     },\n     *   ],\n     *   type_names: [],\n     *   detail_level: \'detailed\',\n     * });\n     * ```\n     *\n     * ```js\n     * // Brief\n     * ({\n     *   committed_size_bytes: 131072,\n     *   resident_size_bytes: 131072,\n     *   used_size_bytes: 128864,\n     *   space_statistics: [],\n     *   type_names: [],\n     *   detail_level: \'brief\',\n     * });\n     * ```\n     * @since v22.15.0\n     * @param detailLevel **Default:** `\'detailed\'`. Specifies the level of detail in the returned statistics.\n     * Accepted values are:\n     * * `\'brief\'`:  Brief statistics contain only the top-level\n     * allocated and used\n     * memory statistics for the entire heap.\n     * * `\'detailed\'`: Detailed statistics also contain a break\n     * down per space and page, as well as freelist statistics\n     * and object type histograms.\n     */\n    function getCppHeapStatistics(detailLevel?: "brief" | "detailed"): object;\n    /**\n     * Returns statistics about the V8 heap spaces, i.e. the segments which make up\n     * the V8 heap. Neither the ordering of heap spaces, nor the availability of a\n     * heap space can be guaranteed as the statistics are provided via the\n     * V8 [`GetHeapSpaceStatistics`](https://v8docs.nodesource.com/node-13.2/d5/dda/classv8_1_1_isolate.html#ac673576f24fdc7a33378f8f57e1d13a4) function and may change from one V8 version to the\n     * next.\n     *\n     * The value returned is an array of objects containing the following properties:\n     *\n     * ```json\n     * [\n     *   {\n     *     "space_name": "new_space",\n     *     "space_size": 2063872,\n     *     "space_used_size": 951112,\n     *     "space_available_size": 80824,\n     *     "physical_space_size": 2063872\n     *   },\n     *   {\n     *     "space_name": "old_space",\n     *     "space_size": 3090560,\n     *     "space_used_size": 2493792,\n     *     "space_available_size": 0,\n     *     "physical_space_size": 3090560\n     *   },\n     *   {\n     *     "space_name": "code_space",\n     *     "space_size": 1260160,\n     *     "space_used_size": 644256,\n     *     "space_available_size": 960,\n     *     "physical_space_size": 1260160\n     *   },\n     *   {\n     *     "space_name": "map_space",\n     *     "space_size": 1094160,\n     *     "space_used_size": 201608,\n     *     "space_available_size": 0,\n     *     "physical_space_size": 1094160\n     *   },\n     *   {\n     *     "space_name": "large_object_space",\n     *     "space_size": 0,\n     *     "space_used_size": 0,\n     *     "space_available_size": 1490980608,\n     *     "physical_space_size": 0\n     *   }\n     * ]\n     * ```\n     * @since v6.0.0\n     */\n    function getHeapSpaceStatistics(): HeapSpaceInfo[];\n    /**\n     * The `v8.setFlagsFromString()` method can be used to programmatically set\n     * V8 command-line flags. This method should be used with care. Changing settings\n     * after the VM has started may result in unpredictable behavior, including\n     * crashes and data loss; or it may simply do nothing.\n     *\n     * The V8 options available for a version of Node.js may be determined by running `node --v8-options`.\n     *\n     * Usage:\n     *\n     * ```js\n     * // Print GC events to stdout for one minute.\n     * import v8 from \'node:v8\';\n     * v8.setFlagsFromString(\'--trace_gc\');\n     * setTimeout(() => { v8.setFlagsFromString(\'--notrace_gc\'); }, 60e3);\n     * ```\n     * @since v1.0.0\n     */\n    function setFlagsFromString(flags: string): void;\n    /**\n     * This is similar to the [`queryObjects()` console API](https://developer.chrome.com/docs/devtools/console/utilities#queryObjects-function)\n     * provided by the Chromium DevTools console. It can be used to search for objects that have the matching constructor on its prototype chain\n     * in the heap after a full garbage collection, which can be useful for memory leak regression tests. To avoid surprising results, users should\n     * avoid using this API on constructors whose implementation they don\'t control, or on constructors that can be invoked by other parties in the\n     * application.\n     *\n     * To avoid accidental leaks, this API does not return raw references to the objects found. By default, it returns the count of the objects\n     * found. If `options.format` is `\'summary\'`, it returns an array containing brief string representations for each object. The visibility provided\n     * in this API is similar to what the heap snapshot provides, while users can save the cost of serialization and parsing and directly filter the\n     * target objects during the search.\n     *\n     * Only objects created in the current execution context are included in the results.\n     *\n     * ```js\n     * import { queryObjects } from \'node:v8\';\n     * class A { foo = \'bar\'; }\n     * console.log(queryObjects(A)); // 0\n     * const a = new A();\n     * console.log(queryObjects(A)); // 1\n     * // [ "A { foo: \'bar\' }" ]\n     * console.log(queryObjects(A, { format: \'summary\' }));\n     *\n     * class B extends A { bar = \'qux\'; }\n     * const b = new B();\n     * console.log(queryObjects(B)); // 1\n     * // [ "B { foo: \'bar\', bar: \'qux\' }" ]\n     * console.log(queryObjects(B, { format: \'summary\' }));\n     *\n     * // Note that, when there are child classes inheriting from a constructor,\n     * // the constructor also shows up in the prototype chain of the child\n     * // classes\'s prototoype, so the child classes\'s prototoype would also be\n     * // included in the result.\n     * console.log(queryObjects(A));  // 3\n     * // [ "B { foo: \'bar\', bar: \'qux\' }", \'A {}\', "A { foo: \'bar\' }" ]\n     * console.log(queryObjects(A, { format: \'summary\' }));\n     * ```\n     * @param ctor The constructor that can be used to search on the prototype chain in order to filter target objects in the heap.\n     * @since v20.13.0\n     * @experimental\n     */\n    function queryObjects(ctor: Function): number | string[];\n    function queryObjects(ctor: Function, options: { format: "count" }): number;\n    function queryObjects(ctor: Function, options: { format: "summary" }): string[];\n    /**\n     * Generates a snapshot of the current V8 heap and returns a Readable\n     * Stream that may be used to read the JSON serialized representation.\n     * This JSON stream format is intended to be used with tools such as\n     * Chrome DevTools. The JSON schema is undocumented and specific to the\n     * V8 engine. Therefore, the schema may change from one version of V8 to the next.\n     *\n     * Creating a heap snapshot requires memory about twice the size of the heap at\n     * the time the snapshot is created. This results in the risk of OOM killers\n     * terminating the process.\n     *\n     * Generating a snapshot is a synchronous operation which blocks the event loop\n     * for a duration depending on the heap size.\n     *\n     * ```js\n     * // Print heap snapshot to the console\n     * import v8 from \'node:v8\';\n     * const stream = v8.getHeapSnapshot();\n     * stream.pipe(process.stdout);\n     * ```\n     * @since v11.13.0\n     * @return A Readable containing the V8 heap snapshot.\n     */\n    function getHeapSnapshot(options?: HeapSnapshotOptions): Readable;\n    /**\n     * Generates a snapshot of the current V8 heap and writes it to a JSON\n     * file. This file is intended to be used with tools such as Chrome\n     * DevTools. The JSON schema is undocumented and specific to the V8\n     * engine, and may change from one version of V8 to the next.\n     *\n     * A heap snapshot is specific to a single V8 isolate. When using `worker threads`, a heap snapshot generated from the main thread will\n     * not contain any information about the workers, and vice versa.\n     *\n     * Creating a heap snapshot requires memory about twice the size of the heap at\n     * the time the snapshot is created. This results in the risk of OOM killers\n     * terminating the process.\n     *\n     * Generating a snapshot is a synchronous operation which blocks the event loop\n     * for a duration depending on the heap size.\n     *\n     * ```js\n     * import { writeHeapSnapshot } from \'node:v8\';\n     * import {\n     *   Worker,\n     *   isMainThread,\n     *   parentPort,\n     * } from \'node:worker_threads\';\n     *\n     * if (isMainThread) {\n     *   const worker = new Worker(__filename);\n     *\n     *   worker.once(\'message\', (filename) => {\n     *     console.log(`worker heapdump: ${filename}`);\n     *     // Now get a heapdump for the main thread.\n     *     console.log(`main thread heapdump: ${writeHeapSnapshot()}`);\n     *   });\n     *\n     *   // Tell the worker to create a heapdump.\n     *   worker.postMessage(\'heapdump\');\n     * } else {\n     *   parentPort.once(\'message\', (message) => {\n     *     if (message === \'heapdump\') {\n     *       // Generate a heapdump for the worker\n     *       // and return the filename to the parent.\n     *       parentPort.postMessage(writeHeapSnapshot());\n     *     }\n     *   });\n     * }\n     * ```\n     * @since v11.13.0\n     * @param filename The file path where the V8 heap snapshot is to be saved. If not specified, a file name with the pattern `\'Heap-${yyyymmdd}-${hhmmss}-${pid}-${thread_id}.heapsnapshot\'` will be\n     * generated, where `{pid}` will be the PID of the Node.js process, `{thread_id}` will be `0` when `writeHeapSnapshot()` is called from the main Node.js thread or the id of a\n     * worker thread.\n     * @return The filename where the snapshot was saved.\n     */\n    function writeHeapSnapshot(filename?: string, options?: HeapSnapshotOptions): string;\n    /**\n     * Get statistics about code and its metadata in the heap, see\n     * V8 [`GetHeapCodeAndMetadataStatistics`](https://v8docs.nodesource.com/node-13.2/d5/dda/classv8_1_1_isolate.html#a6079122af17612ef54ef3348ce170866) API. Returns an object with the\n     * following properties:\n     *\n     * ```js\n     * {\n     *   code_and_metadata_size: 212208,\n     *   bytecode_and_metadata_size: 161368,\n     *   external_script_source_size: 1410794,\n     *   cpu_profiler_metadata_size: 0,\n     * }\n     * ```\n     * @since v12.8.0\n     */\n    function getHeapCodeStatistics(): HeapCodeStatistics;\n    /**\n     * @since v8.0.0\n     */\n    class Serializer {\n        /**\n         * Writes out a header, which includes the serialization format version.\n         */\n        writeHeader(): void;\n        /**\n         * Serializes a JavaScript value and adds the serialized representation to the\n         * internal buffer.\n         *\n         * This throws an error if `value` cannot be serialized.\n         */\n        writeValue(val: any): boolean;\n        /**\n         * Returns the stored internal buffer. This serializer should not be used once\n         * the buffer is released. Calling this method results in undefined behavior\n         * if a previous write has failed.\n         */\n        releaseBuffer(): Buffer;\n        /**\n         * Marks an `ArrayBuffer` as having its contents transferred out of band.\n         * Pass the corresponding `ArrayBuffer` in the deserializing context to `deserializer.transferArrayBuffer()`.\n         * @param id A 32-bit unsigned integer.\n         * @param arrayBuffer An `ArrayBuffer` instance.\n         */\n        transferArrayBuffer(id: number, arrayBuffer: ArrayBuffer): void;\n        /**\n         * Write a raw 32-bit unsigned integer.\n         * For use inside of a custom `serializer._writeHostObject()`.\n         */\n        writeUint32(value: number): void;\n        /**\n         * Write a raw 64-bit unsigned integer, split into high and low 32-bit parts.\n         * For use inside of a custom `serializer._writeHostObject()`.\n         */\n        writeUint64(hi: number, lo: number): void;\n        /**\n         * Write a JS `number` value.\n         * For use inside of a custom `serializer._writeHostObject()`.\n         */\n        writeDouble(value: number): void;\n        /**\n         * Write raw bytes into the serializer\'s internal buffer. The deserializer\n         * will require a way to compute the length of the buffer.\n         * For use inside of a custom `serializer._writeHostObject()`.\n         */\n        writeRawBytes(buffer: NodeJS.TypedArray): void;\n    }\n    /**\n     * A subclass of `Serializer` that serializes `TypedArray`(in particular `Buffer`) and `DataView` objects as host objects, and only\n     * stores the part of their underlying `ArrayBuffer`s that they are referring to.\n     * @since v8.0.0\n     */\n    class DefaultSerializer extends Serializer {}\n    /**\n     * @since v8.0.0\n     */\n    class Deserializer {\n        constructor(data: NodeJS.TypedArray);\n        /**\n         * Reads and validates a header (including the format version).\n         * May, for example, reject an invalid or unsupported wire format. In that case,\n         * an `Error` is thrown.\n         */\n        readHeader(): boolean;\n        /**\n         * Deserializes a JavaScript value from the buffer and returns it.\n         */\n        readValue(): any;\n        /**\n         * Marks an `ArrayBuffer` as having its contents transferred out of band.\n         * Pass the corresponding `ArrayBuffer` in the serializing context to `serializer.transferArrayBuffer()` (or return the `id` from `serializer._getSharedArrayBufferId()` in the case of\n         * `SharedArrayBuffer`s).\n         * @param id A 32-bit unsigned integer.\n         * @param arrayBuffer An `ArrayBuffer` instance.\n         */\n        transferArrayBuffer(id: number, arrayBuffer: ArrayBuffer): void;\n        /**\n         * Reads the underlying wire format version. Likely mostly to be useful to\n         * legacy code reading old wire format versions. May not be called before `.readHeader()`.\n         */\n        getWireFormatVersion(): number;\n        /**\n         * Read a raw 32-bit unsigned integer and return it.\n         * For use inside of a custom `deserializer._readHostObject()`.\n         */\n        readUint32(): number;\n        /**\n         * Read a raw 64-bit unsigned integer and return it as an array `[hi, lo]` with two 32-bit unsigned integer entries.\n         * For use inside of a custom `deserializer._readHostObject()`.\n         */\n        readUint64(): [number, number];\n        /**\n         * Read a JS `number` value.\n         * For use inside of a custom `deserializer._readHostObject()`.\n         */\n        readDouble(): number;\n        /**\n         * Read raw bytes from the deserializer\'s internal buffer. The `length` parameter\n         * must correspond to the length of the buffer that was passed to `serializer.writeRawBytes()`.\n         * For use inside of a custom `deserializer._readHostObject()`.\n         */\n        readRawBytes(length: number): Buffer;\n    }\n    /**\n     * A subclass of `Deserializer` corresponding to the format written by `DefaultSerializer`.\n     * @since v8.0.0\n     */\n    class DefaultDeserializer extends Deserializer {}\n    /**\n     * Uses a `DefaultSerializer` to serialize `value` into a buffer.\n     *\n     * `ERR_BUFFER_TOO_LARGE` will be thrown when trying to\n     * serialize a huge object which requires buffer\n     * larger than `buffer.constants.MAX_LENGTH`.\n     * @since v8.0.0\n     */\n    function serialize(value: any): Buffer;\n    /**\n     * Uses a `DefaultDeserializer` with default options to read a JS value\n     * from a buffer.\n     * @since v8.0.0\n     * @param buffer A buffer returned by {@link serialize}.\n     */\n    function deserialize(buffer: NodeJS.ArrayBufferView): any;\n    /**\n     * The `v8.takeCoverage()` method allows the user to write the coverage started by `NODE_V8_COVERAGE` to disk on demand. This method can be invoked multiple\n     * times during the lifetime of the process. Each time the execution counter will\n     * be reset and a new coverage report will be written to the directory specified\n     * by `NODE_V8_COVERAGE`.\n     *\n     * When the process is about to exit, one last coverage will still be written to\n     * disk unless {@link stopCoverage} is invoked before the process exits.\n     * @since v15.1.0, v14.18.0, v12.22.0\n     */\n    function takeCoverage(): void;\n    /**\n     * The `v8.stopCoverage()` method allows the user to stop the coverage collection\n     * started by `NODE_V8_COVERAGE`, so that V8 can release the execution count\n     * records and optimize code. This can be used in conjunction with {@link takeCoverage} if the user wants to collect the coverage on demand.\n     * @since v15.1.0, v14.18.0, v12.22.0\n     */\n    function stopCoverage(): void;\n    /**\n     * The API is a no-op if `--heapsnapshot-near-heap-limit` is already set from the command line or the API is called more than once.\n     * `limit` must be a positive integer. See [`--heapsnapshot-near-heap-limit`](https://nodejs.org/docs/latest-v22.x/api/cli.html#--heapsnapshot-near-heap-limitmax_count) for more information.\n     * @experimental\n     * @since v18.10.0, v16.18.0\n     */\n    function setHeapSnapshotNearHeapLimit(limit: number): void;\n    /**\n     * This API collects GC data in current thread.\n     * @since v19.6.0, v18.15.0\n     */\n    class GCProfiler {\n        /**\n         * Start collecting GC data.\n         * @since v19.6.0, v18.15.0\n         */\n        start(): void;\n        /**\n         * Stop collecting GC data and return an object. The content of object\n         * is as follows.\n         *\n         * ```json\n         * {\n         *   "version": 1,\n         *   "startTime": 1674059033862,\n         *   "statistics": [\n         *     {\n         *       "gcType": "Scavenge",\n         *       "beforeGC": {\n         *         "heapStatistics": {\n         *           "totalHeapSize": 5005312,\n         *           "totalHeapSizeExecutable": 524288,\n         *           "totalPhysicalSize": 5226496,\n         *           "totalAvailableSize": 4341325216,\n         *           "totalGlobalHandlesSize": 8192,\n         *           "usedGlobalHandlesSize": 2112,\n         *           "usedHeapSize": 4883840,\n         *           "heapSizeLimit": 4345298944,\n         *           "mallocedMemory": 254128,\n         *           "externalMemory": 225138,\n         *           "peakMallocedMemory": 181760\n         *         },\n         *         "heapSpaceStatistics": [\n         *           {\n         *             "spaceName": "read_only_space",\n         *             "spaceSize": 0,\n         *             "spaceUsedSize": 0,\n         *             "spaceAvailableSize": 0,\n         *             "physicalSpaceSize": 0\n         *           }\n         *         ]\n         *       },\n         *       "cost": 1574.14,\n         *       "afterGC": {\n         *         "heapStatistics": {\n         *           "totalHeapSize": 6053888,\n         *           "totalHeapSizeExecutable": 524288,\n         *           "totalPhysicalSize": 5500928,\n         *           "totalAvailableSize": 4341101384,\n         *           "totalGlobalHandlesSize": 8192,\n         *           "usedGlobalHandlesSize": 2112,\n         *           "usedHeapSize": 4059096,\n         *           "heapSizeLimit": 4345298944,\n         *           "mallocedMemory": 254128,\n         *           "externalMemory": 225138,\n         *           "peakMallocedMemory": 181760\n         *         },\n         *         "heapSpaceStatistics": [\n         *           {\n         *             "spaceName": "read_only_space",\n         *             "spaceSize": 0,\n         *             "spaceUsedSize": 0,\n         *             "spaceAvailableSize": 0,\n         *             "physicalSpaceSize": 0\n         *           }\n         *         ]\n         *       }\n         *     }\n         *   ],\n         *   "endTime": 1674059036865\n         * }\n         * ```\n         *\n         * Here\'s an example.\n         *\n         * ```js\n         * import { GCProfiler } from \'node:v8\';\n         * const profiler = new GCProfiler();\n         * profiler.start();\n         * setTimeout(() => {\n         *   console.log(profiler.stop());\n         * }, 1000);\n         * ```\n         * @since v19.6.0, v18.15.0\n         */\n        stop(): GCProfilerResult;\n    }\n    interface GCProfilerResult {\n        version: number;\n        startTime: number;\n        endTime: number;\n        statistics: Array<{\n            gcType: string;\n            cost: number;\n            beforeGC: {\n                heapStatistics: HeapStatistics;\n                heapSpaceStatistics: HeapSpaceStatistics[];\n            };\n            afterGC: {\n                heapStatistics: HeapStatistics;\n                heapSpaceStatistics: HeapSpaceStatistics[];\n            };\n        }>;\n    }\n    interface HeapStatistics {\n        totalHeapSize: number;\n        totalHeapSizeExecutable: number;\n        totalPhysicalSize: number;\n        totalAvailableSize: number;\n        totalGlobalHandlesSize: number;\n        usedGlobalHandlesSize: number;\n        usedHeapSize: number;\n        heapSizeLimit: number;\n        mallocedMemory: number;\n        externalMemory: number;\n        peakMallocedMemory: number;\n    }\n    interface HeapSpaceStatistics {\n        spaceName: string;\n        spaceSize: number;\n        spaceUsedSize: number;\n        spaceAvailableSize: number;\n        physicalSpaceSize: number;\n    }\n    /**\n     * Called when a promise is constructed. This does not mean that corresponding before/after events will occur, only that the possibility exists. This will\n     * happen if a promise is created without ever getting a continuation.\n     * @since v17.1.0, v16.14.0\n     * @param promise The promise being created.\n     * @param parent The promise continued from, if applicable.\n     */\n    interface Init {\n        (promise: Promise<unknown>, parent: Promise<unknown>): void;\n    }\n    /**\n     * Called before a promise continuation executes. This can be in the form of `then()`, `catch()`, or `finally()` handlers or an await resuming.\n     *\n     * The before callback will be called 0 to N times. The before callback will typically be called 0 times if no continuation was ever made for the promise.\n     * The before callback may be called many times in the case where many continuations have been made from the same promise.\n     * @since v17.1.0, v16.14.0\n     */\n    interface Before {\n        (promise: Promise<unknown>): void;\n    }\n    /**\n     * Called immediately after a promise continuation executes. This may be after a `then()`, `catch()`, or `finally()` handler or before an await after another await.\n     * @since v17.1.0, v16.14.0\n     */\n    interface After {\n        (promise: Promise<unknown>): void;\n    }\n    /**\n     * Called when the promise receives a resolution or rejection value. This may occur synchronously in the case of {@link Promise.resolve()} or\n     * {@link Promise.reject()}.\n     * @since v17.1.0, v16.14.0\n     */\n    interface Settled {\n        (promise: Promise<unknown>): void;\n    }\n    /**\n     * Key events in the lifetime of a promise have been categorized into four areas: creation of a promise, before/after a continuation handler is called or\n     * around an await, and when the promise resolves or rejects.\n     *\n     * Because promises are asynchronous resources whose lifecycle is tracked via the promise hooks mechanism, the `init()`, `before()`, `after()`, and\n     * `settled()` callbacks must not be async functions as they create more promises which would produce an infinite loop.\n     * @since v17.1.0, v16.14.0\n     */\n    interface HookCallbacks {\n        init?: Init;\n        before?: Before;\n        after?: After;\n        settled?: Settled;\n    }\n    interface PromiseHooks {\n        /**\n         * The `init` hook must be a plain function. Providing an async function will throw as it would produce an infinite microtask loop.\n         * @since v17.1.0, v16.14.0\n         * @param init The {@link Init | `init` callback} to call when a promise is created.\n         * @return Call to stop the hook.\n         */\n        onInit: (init: Init) => Function;\n        /**\n         * The `settled` hook must be a plain function. Providing an async function will throw as it would produce an infinite microtask loop.\n         * @since v17.1.0, v16.14.0\n         * @param settled The {@link Settled | `settled` callback} to call when a promise is created.\n         * @return Call to stop the hook.\n         */\n        onSettled: (settled: Settled) => Function;\n        /**\n         * The `before` hook must be a plain function. Providing an async function will throw as it would produce an infinite microtask loop.\n         * @since v17.1.0, v16.14.0\n         * @param before The {@link Before | `before` callback} to call before a promise continuation executes.\n         * @return Call to stop the hook.\n         */\n        onBefore: (before: Before) => Function;\n        /**\n         * The `after` hook must be a plain function. Providing an async function will throw as it would produce an infinite microtask loop.\n         * @since v17.1.0, v16.14.0\n         * @param after The {@link After | `after` callback} to call after a promise continuation executes.\n         * @return Call to stop the hook.\n         */\n        onAfter: (after: After) => Function;\n        /**\n         * Registers functions to be called for different lifetime events of each promise.\n         * The callbacks `init()`/`before()`/`after()`/`settled()` are called for the respective events during a promise\'s lifetime.\n         * All callbacks are optional. For example, if only promise creation needs to be tracked, then only the init callback needs to be passed.\n         * The hook callbacks must be plain functions. Providing async functions will throw as it would produce an infinite microtask loop.\n         * @since v17.1.0, v16.14.0\n         * @param callbacks The {@link HookCallbacks | Hook Callbacks} to register\n         * @return Used for disabling hooks\n         */\n        createHook: (callbacks: HookCallbacks) => Function;\n    }\n    /**\n     * The `promiseHooks` interface can be used to track promise lifecycle events.\n     * @since v17.1.0, v16.14.0\n     */\n    const promiseHooks: PromiseHooks;\n    type StartupSnapshotCallbackFn = (args: any) => any;\n    interface StartupSnapshot {\n        /**\n         * Add a callback that will be called when the Node.js instance is about to get serialized into a snapshot and exit.\n         * This can be used to release resources that should not or cannot be serialized or to convert user data into a form more suitable for serialization.\n         * @since v18.6.0, v16.17.0\n         */\n        addSerializeCallback(callback: StartupSnapshotCallbackFn, data?: any): void;\n        /**\n         * Add a callback that will be called when the Node.js instance is deserialized from a snapshot.\n         * The `callback` and the `data` (if provided) will be serialized into the snapshot, they can be used to re-initialize the state of the application or\n         * to re-acquire resources that the application needs when the application is restarted from the snapshot.\n         * @since v18.6.0, v16.17.0\n         */\n        addDeserializeCallback(callback: StartupSnapshotCallbackFn, data?: any): void;\n        /**\n         * This sets the entry point of the Node.js application when it is deserialized from a snapshot. This can be called only once in the snapshot building script.\n         * If called, the deserialized application no longer needs an additional entry point script to start up and will simply invoke the callback along with the deserialized\n         * data (if provided), otherwise an entry point script still needs to be provided to the deserialized application.\n         * @since v18.6.0, v16.17.0\n         */\n        setDeserializeMainFunction(callback: StartupSnapshotCallbackFn, data?: any): void;\n        /**\n         * Returns true if the Node.js instance is run to build a snapshot.\n         * @since v18.6.0, v16.17.0\n         */\n        isBuildingSnapshot(): boolean;\n    }\n    /**\n     * The `v8.startupSnapshot` interface can be used to add serialization and deserialization hooks for custom startup snapshots.\n     *\n     * ```bash\n     * $ node --snapshot-blob snapshot.blob --build-snapshot entry.js\n     * # This launches a process with the snapshot\n     * $ node --snapshot-blob snapshot.blob\n     * ```\n     *\n     * In the example above, `entry.js` can use methods from the `v8.startupSnapshot` interface to specify how to save information for custom objects\n     * in the snapshot during serialization and how the information can be used to synchronize these objects during deserialization of the snapshot.\n     * For example, if the `entry.js` contains the following script:\n     *\n     * ```js\n     * \'use strict\';\n     *\n     * import fs from \'node:fs\';\n     * import zlib from \'node:zlib\';\n     * import path from \'node:path\';\n     * import assert from \'node:assert\';\n     *\n     * import v8 from \'node:v8\';\n     *\n     * class BookShelf {\n     *   storage = new Map();\n     *\n     *   // Reading a series of files from directory and store them into storage.\n     *   constructor(directory, books) {\n     *     for (const book of books) {\n     *       this.storage.set(book, fs.readFileSync(path.join(directory, book)));\n     *     }\n     *   }\n     *\n     *   static compressAll(shelf) {\n     *     for (const [ book, content ] of shelf.storage) {\n     *       shelf.storage.set(book, zlib.gzipSync(content));\n     *     }\n     *   }\n     *\n     *   static decompressAll(shelf) {\n     *     for (const [ book, content ] of shelf.storage) {\n     *       shelf.storage.set(book, zlib.gunzipSync(content));\n     *     }\n     *   }\n     * }\n     *\n     * // __dirname here is where the snapshot script is placed\n     * // during snapshot building time.\n     * const shelf = new BookShelf(__dirname, [\n     *   \'book1.en_US.txt\',\n     *   \'book1.es_ES.txt\',\n     *   \'book2.zh_CN.txt\',\n     * ]);\n     *\n     * assert(v8.startupSnapshot.isBuildingSnapshot());\n     * // On snapshot serialization, compress the books to reduce size.\n     * v8.startupSnapshot.addSerializeCallback(BookShelf.compressAll, shelf);\n     * // On snapshot deserialization, decompress the books.\n     * v8.startupSnapshot.addDeserializeCallback(BookShelf.decompressAll, shelf);\n     * v8.startupSnapshot.setDeserializeMainFunction((shelf) => {\n     *   // process.env and process.argv are refreshed during snapshot\n     *   // deserialization.\n     *   const lang = process.env.BOOK_LANG || \'en_US\';\n     *   const book = process.argv[1];\n     *   const name = `${book}.${lang}.txt`;\n     *   console.log(shelf.storage.get(name));\n     * }, shelf);\n     * ```\n     *\n     * The resulted binary will get print the data deserialized from the snapshot during start up, using the refreshed `process.env` and `process.argv` of the launched process:\n     *\n     * ```bash\n     * $ BOOK_LANG=es_ES node --snapshot-blob snapshot.blob book1\n     * # Prints content of book1.es_ES.txt deserialized from the snapshot.\n     * ```\n     *\n     * Currently the application deserialized from a user-land snapshot cannot be snapshotted again, so these APIs are only available to applications that are not deserialized from a user-land snapshot.\n     *\n     * @experimental\n     * @since v18.6.0, v16.17.0\n     */\n    const startupSnapshot: StartupSnapshot;\n}\ndeclare module "node:v8" {\n    export * from "v8";\n}\n',
  '@types/node/vm.d.ts':
    "/**\n * The `node:vm` module enables compiling and running code within V8 Virtual\n * Machine contexts.\n *\n * **The `node:vm` module is not a security**\n * **mechanism. Do not use it to run untrusted code.**\n *\n * JavaScript code can be compiled and run immediately or\n * compiled, saved, and run later.\n *\n * A common use case is to run the code in a different V8 Context. This means\n * invoked code has a different global object than the invoking code.\n *\n * One can provide the context by `contextifying` an\n * object. The invoked code treats any property in the context like a\n * global variable. Any changes to global variables caused by the invoked\n * code are reflected in the context object.\n *\n * ```js\n * import vm from 'node:vm';\n *\n * const x = 1;\n *\n * const context = { x: 2 };\n * vm.createContext(context); // Contextify the object.\n *\n * const code = 'x += 40; var y = 17;';\n * // `x` and `y` are global variables in the context.\n * // Initially, x has the value 2 because that is the value of context.x.\n * vm.runInContext(code, context);\n *\n * console.log(context.x); // 42\n * console.log(context.y); // 17\n *\n * console.log(x); // 1; y is not defined.\n * ```\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/vm.js)\n */\ndeclare module \"vm\" {\n    import { ImportAttributes } from \"node:module\";\n    interface Context extends NodeJS.Dict<any> {}\n    interface BaseOptions {\n        /**\n         * Specifies the filename used in stack traces produced by this script.\n         * @default ''\n         */\n        filename?: string | undefined;\n        /**\n         * Specifies the line number offset that is displayed in stack traces produced by this script.\n         * @default 0\n         */\n        lineOffset?: number | undefined;\n        /**\n         * Specifies the column number offset that is displayed in stack traces produced by this script.\n         * @default 0\n         */\n        columnOffset?: number | undefined;\n    }\n    type DynamicModuleLoader<T> = (\n        specifier: string,\n        referrer: T,\n        importAttributes: ImportAttributes,\n    ) => Module | Promise<Module>;\n    interface ScriptOptions extends BaseOptions {\n        /**\n         * Provides an optional data with V8's code cache data for the supplied source.\n         */\n        cachedData?: Buffer | NodeJS.ArrayBufferView | undefined;\n        /** @deprecated in favor of `script.createCachedData()` */\n        produceCachedData?: boolean | undefined;\n        /**\n         * Used to specify how the modules should be loaded during the evaluation of this script when `import()` is called. This option is\n         * part of the experimental modules API. We do not recommend using it in a production environment. For detailed information, see\n         * [Support of dynamic `import()` in compilation APIs](https://nodejs.org/docs/latest-v22.x/api/vm.html#support-of-dynamic-import-in-compilation-apis).\n         */\n        importModuleDynamically?:\n            | DynamicModuleLoader<Script>\n            | typeof constants.USE_MAIN_CONTEXT_DEFAULT_LOADER\n            | undefined;\n    }\n    interface RunningScriptOptions extends BaseOptions {\n        /**\n         * When `true`, if an `Error` occurs while compiling the `code`, the line of code causing the error is attached to the stack trace.\n         * @default true\n         */\n        displayErrors?: boolean | undefined;\n        /**\n         * Specifies the number of milliseconds to execute code before terminating execution.\n         * If execution is terminated, an `Error` will be thrown. This value must be a strictly positive integer.\n         */\n        timeout?: number | undefined;\n        /**\n         * If `true`, the execution will be terminated when `SIGINT` (Ctrl+C) is received.\n         * Existing handlers for the event that have been attached via `process.on('SIGINT')` will be disabled during script execution, but will continue to work after that.\n         * If execution is terminated, an `Error` will be thrown.\n         * @default false\n         */\n        breakOnSigint?: boolean | undefined;\n    }\n    interface RunningScriptInNewContextOptions extends RunningScriptOptions {\n        /**\n         * Human-readable name of the newly created context.\n         */\n        contextName?: CreateContextOptions[\"name\"];\n        /**\n         * Origin corresponding to the newly created context for display purposes. The origin should be formatted like a URL,\n         * but with only the scheme, host, and port (if necessary), like the value of the `url.origin` property of a `URL` object.\n         * Most notably, this string should omit the trailing slash, as that denotes a path.\n         */\n        contextOrigin?: CreateContextOptions[\"origin\"];\n        contextCodeGeneration?: CreateContextOptions[\"codeGeneration\"];\n        /**\n         * If set to `afterEvaluate`, microtasks will be run immediately after the script has run.\n         */\n        microtaskMode?: CreateContextOptions[\"microtaskMode\"];\n    }\n    interface RunningCodeOptions extends RunningScriptOptions {\n        /**\n         * Provides an optional data with V8's code cache data for the supplied source.\n         */\n        cachedData?: ScriptOptions[\"cachedData\"] | undefined;\n        /**\n         * Used to specify how the modules should be loaded during the evaluation of this script when `import()` is called. This option is\n         * part of the experimental modules API. We do not recommend using it in a production environment. For detailed information, see\n         * [Support of dynamic `import()` in compilation APIs](https://nodejs.org/docs/latest-v22.x/api/vm.html#support-of-dynamic-import-in-compilation-apis).\n         */\n        importModuleDynamically?:\n            | DynamicModuleLoader<Script>\n            | typeof constants.USE_MAIN_CONTEXT_DEFAULT_LOADER\n            | undefined;\n    }\n    interface RunningCodeInNewContextOptions extends RunningScriptInNewContextOptions {\n        /**\n         * Provides an optional data with V8's code cache data for the supplied source.\n         */\n        cachedData?: ScriptOptions[\"cachedData\"] | undefined;\n        /**\n         * Used to specify how the modules should be loaded during the evaluation of this script when `import()` is called. This option is\n         * part of the experimental modules API. We do not recommend using it in a production environment. For detailed information, see\n         * [Support of dynamic `import()` in compilation APIs](https://nodejs.org/docs/latest-v22.x/api/vm.html#support-of-dynamic-import-in-compilation-apis).\n         */\n        importModuleDynamically?:\n            | DynamicModuleLoader<Script>\n            | typeof constants.USE_MAIN_CONTEXT_DEFAULT_LOADER\n            | undefined;\n    }\n    interface CompileFunctionOptions extends BaseOptions {\n        /**\n         * Provides an optional data with V8's code cache data for the supplied source.\n         */\n        cachedData?: ScriptOptions[\"cachedData\"] | undefined;\n        /**\n         * Specifies whether to produce new cache data.\n         * @default false\n         */\n        produceCachedData?: boolean | undefined;\n        /**\n         * The sandbox/context in which the said function should be compiled in.\n         */\n        parsingContext?: Context | undefined;\n        /**\n         * An array containing a collection of context extensions (objects wrapping the current scope) to be applied while compiling\n         */\n        contextExtensions?: Object[] | undefined;\n        /**\n         * Used to specify how the modules should be loaded during the evaluation of this script when `import()` is called. This option is\n         * part of the experimental modules API. We do not recommend using it in a production environment. For detailed information, see\n         * [Support of dynamic `import()` in compilation APIs](https://nodejs.org/docs/latest-v22.x/api/vm.html#support-of-dynamic-import-in-compilation-apis).\n         */\n        importModuleDynamically?:\n            | DynamicModuleLoader<ReturnType<typeof compileFunction>>\n            | typeof constants.USE_MAIN_CONTEXT_DEFAULT_LOADER\n            | undefined;\n    }\n    interface CreateContextOptions {\n        /**\n         * Human-readable name of the newly created context.\n         * @default 'VM Context i' Where i is an ascending numerical index of the created context.\n         */\n        name?: string | undefined;\n        /**\n         * Corresponds to the newly created context for display purposes.\n         * The origin should be formatted like a `URL`, but with only the scheme, host, and port (if necessary),\n         * like the value of the `url.origin` property of a URL object.\n         * Most notably, this string should omit the trailing slash, as that denotes a path.\n         * @default ''\n         */\n        origin?: string | undefined;\n        codeGeneration?:\n            | {\n                /**\n                 * If set to false any calls to eval or function constructors (Function, GeneratorFunction, etc)\n                 * will throw an EvalError.\n                 * @default true\n                 */\n                strings?: boolean | undefined;\n                /**\n                 * If set to false any attempt to compile a WebAssembly module will throw a WebAssembly.CompileError.\n                 * @default true\n                 */\n                wasm?: boolean | undefined;\n            }\n            | undefined;\n        /**\n         * If set to `afterEvaluate`, microtasks will be run immediately after the script has run.\n         */\n        microtaskMode?: \"afterEvaluate\" | undefined;\n        /**\n         * Used to specify how the modules should be loaded during the evaluation of this script when `import()` is called. This option is\n         * part of the experimental modules API. We do not recommend using it in a production environment. For detailed information, see\n         * [Support of dynamic `import()` in compilation APIs](https://nodejs.org/docs/latest-v22.x/api/vm.html#support-of-dynamic-import-in-compilation-apis).\n         */\n        importModuleDynamically?:\n            | DynamicModuleLoader<Context>\n            | typeof constants.USE_MAIN_CONTEXT_DEFAULT_LOADER\n            | undefined;\n    }\n    type MeasureMemoryMode = \"summary\" | \"detailed\";\n    interface MeasureMemoryOptions {\n        /**\n         * @default 'summary'\n         */\n        mode?: MeasureMemoryMode | undefined;\n        /**\n         * @default 'default'\n         */\n        execution?: \"default\" | \"eager\" | undefined;\n    }\n    interface MemoryMeasurement {\n        total: {\n            jsMemoryEstimate: number;\n            jsMemoryRange: [number, number];\n        };\n    }\n    /**\n     * Instances of the `vm.Script` class contain precompiled scripts that can be\n     * executed in specific contexts.\n     * @since v0.3.1\n     */\n    class Script {\n        constructor(code: string, options?: ScriptOptions | string);\n        /**\n         * Runs the compiled code contained by the `vm.Script` object within the given `contextifiedObject` and returns the result. Running code does not have access\n         * to local scope.\n         *\n         * The following example compiles code that increments a global variable, sets\n         * the value of another global variable, then execute the code multiple times.\n         * The globals are contained in the `context` object.\n         *\n         * ```js\n         * import vm from 'node:vm';\n         *\n         * const context = {\n         *   animal: 'cat',\n         *   count: 2,\n         * };\n         *\n         * const script = new vm.Script('count += 1; name = \"kitty\";');\n         *\n         * vm.createContext(context);\n         * for (let i = 0; i < 10; ++i) {\n         *   script.runInContext(context);\n         * }\n         *\n         * console.log(context);\n         * // Prints: { animal: 'cat', count: 12, name: 'kitty' }\n         * ```\n         *\n         * Using the `timeout` or `breakOnSigint` options will result in new event loops\n         * and corresponding threads being started, which have a non-zero performance\n         * overhead.\n         * @since v0.3.1\n         * @param contextifiedObject A `contextified` object as returned by the `vm.createContext()` method.\n         * @return the result of the very last statement executed in the script.\n         */\n        runInContext(contextifiedObject: Context, options?: RunningScriptOptions): any;\n        /**\n         * This method is a shortcut to `script.runInContext(vm.createContext(options), options)`.\n         * It does several things at once:\n         *\n         * 1. Creates a new context.\n         * 2. If `contextObject` is an object, contextifies it with the new context.\n         *    If  `contextObject` is undefined, creates a new object and contextifies it.\n         *    If `contextObject` is `vm.constants.DONT_CONTEXTIFY`, don't contextify anything.\n         * 3. Runs the compiled code contained by the `vm.Script` object within the created context. The code\n         *    does not have access to the scope in which this method is called.\n         * 4. Returns the result.\n         *\n         * The following example compiles code that sets a global variable, then executes\n         * the code multiple times in different contexts. The globals are set on and\n         * contained within each individual `context`.\n         *\n         * ```js\n         * const vm = require('node:vm');\n         *\n         * const script = new vm.Script('globalVar = \"set\"');\n         *\n         * const contexts = [{}, {}, {}];\n         * contexts.forEach((context) => {\n         *   script.runInNewContext(context);\n         * });\n         *\n         * console.log(contexts);\n         * // Prints: [{ globalVar: 'set' }, { globalVar: 'set' }, { globalVar: 'set' }]\n         *\n         * // This would throw if the context is created from a contextified object.\n         * // vm.constants.DONT_CONTEXTIFY allows creating contexts with ordinary\n         * // global objects that can be frozen.\n         * const freezeScript = new vm.Script('Object.freeze(globalThis); globalThis;');\n         * const frozenContext = freezeScript.runInNewContext(vm.constants.DONT_CONTEXTIFY);\n         * ```\n         * @since v0.3.1\n         * @param contextObject Either `vm.constants.DONT_CONTEXTIFY` or an object that will be contextified.\n         * If `undefined`, an empty contextified object will be created for backwards compatibility.\n         * @return the result of the very last statement executed in the script.\n         */\n        runInNewContext(\n            contextObject?: Context | typeof constants.DONT_CONTEXTIFY,\n            options?: RunningScriptInNewContextOptions,\n        ): any;\n        /**\n         * Runs the compiled code contained by the `vm.Script` within the context of the\n         * current `global` object. Running code does not have access to local scope, but _does_ have access to the current `global` object.\n         *\n         * The following example compiles code that increments a `global` variable then\n         * executes that code multiple times:\n         *\n         * ```js\n         * import vm from 'node:vm';\n         *\n         * global.globalVar = 0;\n         *\n         * const script = new vm.Script('globalVar += 1', { filename: 'myfile.vm' });\n         *\n         * for (let i = 0; i < 1000; ++i) {\n         *   script.runInThisContext();\n         * }\n         *\n         * console.log(globalVar);\n         *\n         * // 1000\n         * ```\n         * @since v0.3.1\n         * @return the result of the very last statement executed in the script.\n         */\n        runInThisContext(options?: RunningScriptOptions): any;\n        /**\n         * Creates a code cache that can be used with the `Script` constructor's `cachedData` option. Returns a `Buffer`. This method may be called at any\n         * time and any number of times.\n         *\n         * The code cache of the `Script` doesn't contain any JavaScript observable\n         * states. The code cache is safe to be saved along side the script source and\n         * used to construct new `Script` instances multiple times.\n         *\n         * Functions in the `Script` source can be marked as lazily compiled and they are\n         * not compiled at construction of the `Script`. These functions are going to be\n         * compiled when they are invoked the first time. The code cache serializes the\n         * metadata that V8 currently knows about the `Script` that it can use to speed up\n         * future compilations.\n         *\n         * ```js\n         * const script = new vm.Script(`\n         * function add(a, b) {\n         *   return a + b;\n         * }\n         *\n         * const x = add(1, 2);\n         * `);\n         *\n         * const cacheWithoutAdd = script.createCachedData();\n         * // In `cacheWithoutAdd` the function `add()` is marked for full compilation\n         * // upon invocation.\n         *\n         * script.runInThisContext();\n         *\n         * const cacheWithAdd = script.createCachedData();\n         * // `cacheWithAdd` contains fully compiled function `add()`.\n         * ```\n         * @since v10.6.0\n         */\n        createCachedData(): Buffer;\n        /** @deprecated in favor of `script.createCachedData()` */\n        cachedDataProduced?: boolean | undefined;\n        /**\n         * When `cachedData` is supplied to create the `vm.Script`, this value will be set\n         * to either `true` or `false` depending on acceptance of the data by V8.\n         * Otherwise the value is `undefined`.\n         * @since v5.7.0\n         */\n        cachedDataRejected?: boolean | undefined;\n        cachedData?: Buffer | undefined;\n        /**\n         * When the script is compiled from a source that contains a source map magic\n         * comment, this property will be set to the URL of the source map.\n         *\n         * ```js\n         * import vm from 'node:vm';\n         *\n         * const script = new vm.Script(`\n         * function myFunc() {}\n         * //# sourceMappingURL=sourcemap.json\n         * `);\n         *\n         * console.log(script.sourceMapURL);\n         * // Prints: sourcemap.json\n         * ```\n         * @since v19.1.0, v18.13.0\n         */\n        sourceMapURL?: string | undefined;\n    }\n    /**\n     * If the given `contextObject` is an object, the `vm.createContext()` method will\n     * [prepare that object](https://nodejs.org/docs/latest-v22.x/api/vm.html#what-does-it-mean-to-contextify-an-object)\n     * and return a reference to it so that it can be used in calls to {@link runInContext} or\n     * [`script.runInContext()`](https://nodejs.org/docs/latest-v22.x/api/vm.html#scriptrunincontextcontextifiedobject-options).\n     * Inside such scripts, the global object will be wrapped by the `contextObject`, retaining all of its\n     * existing properties but also having the built-in objects and functions any standard\n     * [global object](https://es5.github.io/#x15.1) has. Outside of scripts run by the vm module, global\n     * variables will remain unchanged.\n     *\n     * ```js\n     * const vm = require('node:vm');\n     *\n     * global.globalVar = 3;\n     *\n     * const context = { globalVar: 1 };\n     * vm.createContext(context);\n     *\n     * vm.runInContext('globalVar *= 2;', context);\n     *\n     * console.log(context);\n     * // Prints: { globalVar: 2 }\n     *\n     * console.log(global.globalVar);\n     * // Prints: 3\n     * ```\n     *\n     * If `contextObject` is omitted (or passed explicitly as `undefined`), a new,\n     * empty contextified object will be returned.\n     *\n     * When the global object in the newly created context is contextified, it has some quirks\n     * compared to ordinary global objects. For example, it cannot be frozen. To create a context\n     * without the contextifying quirks, pass `vm.constants.DONT_CONTEXTIFY` as the `contextObject`\n     * argument. See the documentation of `vm.constants.DONT_CONTEXTIFY` for details.\n     *\n     * The `vm.createContext()` method is primarily useful for creating a single\n     * context that can be used to run multiple scripts. For instance, if emulating a\n     * web browser, the method can be used to create a single context representing a\n     * window's global object, then run all `<script>` tags together within that\n     * context.\n     *\n     * The provided `name` and `origin` of the context are made visible through the\n     * Inspector API.\n     * @since v0.3.1\n     * @param contextObject Either `vm.constants.DONT_CONTEXTIFY` or an object that will be contextified.\n     * If `undefined`, an empty contextified object will be created for backwards compatibility.\n     * @return contextified object.\n     */\n    function createContext(\n        contextObject?: Context | typeof constants.DONT_CONTEXTIFY,\n        options?: CreateContextOptions,\n    ): Context;\n    /**\n     * Returns `true` if the given `object` object has been contextified using {@link createContext},\n     * or if it's the global object of a context created using `vm.constants.DONT_CONTEXTIFY`.\n     * @since v0.11.7\n     */\n    function isContext(sandbox: Context): boolean;\n    /**\n     * The `vm.runInContext()` method compiles `code`, runs it within the context of\n     * the `contextifiedObject`, then returns the result. Running code does not have\n     * access to the local scope. The `contextifiedObject` object _must_ have been\n     * previously `contextified` using the {@link createContext} method.\n     *\n     * If `options` is a string, then it specifies the filename.\n     *\n     * The following example compiles and executes different scripts using a single `contextified` object:\n     *\n     * ```js\n     * import vm from 'node:vm';\n     *\n     * const contextObject = { globalVar: 1 };\n     * vm.createContext(contextObject);\n     *\n     * for (let i = 0; i < 10; ++i) {\n     *   vm.runInContext('globalVar *= 2;', contextObject);\n     * }\n     * console.log(contextObject);\n     * // Prints: { globalVar: 1024 }\n     * ```\n     * @since v0.3.1\n     * @param code The JavaScript code to compile and run.\n     * @param contextifiedObject The `contextified` object that will be used as the `global` when the `code` is compiled and run.\n     * @return the result of the very last statement executed in the script.\n     */\n    function runInContext(code: string, contextifiedObject: Context, options?: RunningCodeOptions | string): any;\n    /**\n     * This method is a shortcut to\n     * `(new vm.Script(code, options)).runInContext(vm.createContext(options), options)`.\n     * If `options` is a string, then it specifies the filename.\n     *\n     * It does several things at once:\n     *\n     * 1. Creates a new context.\n     * 2. If `contextObject` is an object, contextifies it with the new context.\n     *    If  `contextObject` is undefined, creates a new object and contextifies it.\n     *    If `contextObject` is `vm.constants.DONT_CONTEXTIFY`, don't contextify anything.\n     * 3. Compiles the code as a`vm.Script`\n     * 4. Runs the compield code within the created context. The code does not have access to the scope in\n     *    which this method is called.\n     * 5. Returns the result.\n     *\n     * The following example compiles and executes code that increments a global\n     * variable and sets a new one. These globals are contained in the `contextObject`.\n     *\n     * ```js\n     * const vm = require('node:vm');\n     *\n     * const contextObject = {\n     *   animal: 'cat',\n     *   count: 2,\n     * };\n     *\n     * vm.runInNewContext('count += 1; name = \"kitty\"', contextObject);\n     * console.log(contextObject);\n     * // Prints: { animal: 'cat', count: 3, name: 'kitty' }\n     *\n     * // This would throw if the context is created from a contextified object.\n     * // vm.constants.DONT_CONTEXTIFY allows creating contexts with ordinary global objects that\n     * // can be frozen.\n     * const frozenContext = vm.runInNewContext('Object.freeze(globalThis); globalThis;', vm.constants.DONT_CONTEXTIFY);\n     * ```\n     * @since v0.3.1\n     * @param code The JavaScript code to compile and run.\n     * @param contextObject Either `vm.constants.DONT_CONTEXTIFY` or an object that will be contextified.\n     * If `undefined`, an empty contextified object will be created for backwards compatibility.\n     * @return the result of the very last statement executed in the script.\n     */\n    function runInNewContext(\n        code: string,\n        contextObject?: Context | typeof constants.DONT_CONTEXTIFY,\n        options?: RunningCodeInNewContextOptions | string,\n    ): any;\n    /**\n     * `vm.runInThisContext()` compiles `code`, runs it within the context of the\n     * current `global` and returns the result. Running code does not have access to\n     * local scope, but does have access to the current `global` object.\n     *\n     * If `options` is a string, then it specifies the filename.\n     *\n     * The following example illustrates using both `vm.runInThisContext()` and\n     * the JavaScript [`eval()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval) function to run the same code:\n     *\n     * ```js\n     * import vm from 'node:vm';\n     * let localVar = 'initial value';\n     *\n     * const vmResult = vm.runInThisContext('localVar = \"vm\";');\n     * console.log(`vmResult: '${vmResult}', localVar: '${localVar}'`);\n     * // Prints: vmResult: 'vm', localVar: 'initial value'\n     *\n     * const evalResult = eval('localVar = \"eval\";');\n     * console.log(`evalResult: '${evalResult}', localVar: '${localVar}'`);\n     * // Prints: evalResult: 'eval', localVar: 'eval'\n     * ```\n     *\n     * Because `vm.runInThisContext()` does not have access to the local scope, `localVar` is unchanged. In contrast,\n     * [`eval()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval) _does_ have access to the\n     * local scope, so the value `localVar` is changed. In this way `vm.runInThisContext()` is much like an [indirect `eval()` call](https://es5.github.io/#x10.4.2), e.g.`(0,eval)('code')`.\n     *\n     * ## Example: Running an HTTP server within a VM\n     *\n     * When using either `script.runInThisContext()` or {@link runInThisContext}, the code is executed within the current V8 global\n     * context. The code passed to this VM context will have its own isolated scope.\n     *\n     * In order to run a simple web server using the `node:http` module the code passed\n     * to the context must either import `node:http` on its own, or have a\n     * reference to the `node:http` module passed to it. For instance:\n     *\n     * ```js\n     * 'use strict';\n     * import vm from 'node:vm';\n     *\n     * const code = `\n     * ((require) => {\n     * const http = require('node:http');\n     *\n     *   http.createServer((request, response) => {\n     *     response.writeHead(200, { 'Content-Type': 'text/plain' });\n     *     response.end('Hello World\\\\n');\n     *   }).listen(8124);\n     *\n     *   console.log('Server running at http://127.0.0.1:8124/');\n     * })`;\n     *\n     * vm.runInThisContext(code)(require);\n     * ```\n     *\n     * The `require()` in the above case shares the state with the context it is\n     * passed from. This may introduce risks when untrusted code is executed, e.g.\n     * altering objects in the context in unwanted ways.\n     * @since v0.3.1\n     * @param code The JavaScript code to compile and run.\n     * @return the result of the very last statement executed in the script.\n     */\n    function runInThisContext(code: string, options?: RunningCodeOptions | string): any;\n    /**\n     * Compiles the given code into the provided context (if no context is\n     * supplied, the current context is used), and returns it wrapped inside a\n     * function with the given `params`.\n     * @since v10.10.0\n     * @param code The body of the function to compile.\n     * @param params An array of strings containing all parameters for the function.\n     */\n    function compileFunction(\n        code: string,\n        params?: readonly string[],\n        options?: CompileFunctionOptions,\n    ): Function & {\n        cachedData?: Script[\"cachedData\"] | undefined;\n        cachedDataProduced?: Script[\"cachedDataProduced\"] | undefined;\n        cachedDataRejected?: Script[\"cachedDataRejected\"] | undefined;\n    };\n    /**\n     * Measure the memory known to V8 and used by all contexts known to the\n     * current V8 isolate, or the main context.\n     *\n     * The format of the object that the returned Promise may resolve with is\n     * specific to the V8 engine and may change from one version of V8 to the next.\n     *\n     * The returned result is different from the statistics returned by `v8.getHeapSpaceStatistics()` in that `vm.measureMemory()` measure the\n     * memory reachable by each V8 specific contexts in the current instance of\n     * the V8 engine, while the result of `v8.getHeapSpaceStatistics()` measure\n     * the memory occupied by each heap space in the current V8 instance.\n     *\n     * ```js\n     * import vm from 'node:vm';\n     * // Measure the memory used by the main context.\n     * vm.measureMemory({ mode: 'summary' })\n     *   // This is the same as vm.measureMemory()\n     *   .then((result) => {\n     *     // The current format is:\n     *     // {\n     *     //   total: {\n     *     //      jsMemoryEstimate: 2418479, jsMemoryRange: [ 2418479, 2745799 ]\n     *     //    }\n     *     // }\n     *     console.log(result);\n     *   });\n     *\n     * const context = vm.createContext({ a: 1 });\n     * vm.measureMemory({ mode: 'detailed', execution: 'eager' })\n     *   .then((result) => {\n     *     // Reference the context here so that it won't be GC'ed\n     *     // until the measurement is complete.\n     *     console.log(context.a);\n     *     // {\n     *     //   total: {\n     *     //     jsMemoryEstimate: 2574732,\n     *     //     jsMemoryRange: [ 2574732, 2904372 ]\n     *     //   },\n     *     //   current: {\n     *     //     jsMemoryEstimate: 2438996,\n     *     //     jsMemoryRange: [ 2438996, 2768636 ]\n     *     //   },\n     *     //   other: [\n     *     //     {\n     *     //       jsMemoryEstimate: 135736,\n     *     //       jsMemoryRange: [ 135736, 465376 ]\n     *     //     }\n     *     //   ]\n     *     // }\n     *     console.log(result);\n     *   });\n     * ```\n     * @since v13.10.0\n     * @experimental\n     */\n    function measureMemory(options?: MeasureMemoryOptions): Promise<MemoryMeasurement>;\n    interface ModuleEvaluateOptions {\n        timeout?: RunningScriptOptions[\"timeout\"] | undefined;\n        breakOnSigint?: RunningScriptOptions[\"breakOnSigint\"] | undefined;\n    }\n    type ModuleLinker = (\n        specifier: string,\n        referencingModule: Module,\n        extra: {\n            attributes: ImportAttributes;\n        },\n    ) => Module | Promise<Module>;\n    type ModuleStatus = \"unlinked\" | \"linking\" | \"linked\" | \"evaluating\" | \"evaluated\" | \"errored\";\n    /**\n     * This feature is only available with the `--experimental-vm-modules` command\n     * flag enabled.\n     *\n     * The `vm.Module` class provides a low-level interface for using\n     * ECMAScript modules in VM contexts. It is the counterpart of the `vm.Script` class that closely mirrors [Module Record](https://262.ecma-international.org/14.0/#sec-abstract-module-records) s as\n     * defined in the ECMAScript\n     * specification.\n     *\n     * Unlike `vm.Script` however, every `vm.Module` object is bound to a context from\n     * its creation. Operations on `vm.Module` objects are intrinsically asynchronous,\n     * in contrast with the synchronous nature of `vm.Script` objects. The use of\n     * 'async' functions can help with manipulating `vm.Module` objects.\n     *\n     * Using a `vm.Module` object requires three distinct steps: creation/parsing,\n     * linking, and evaluation. These three steps are illustrated in the following\n     * example.\n     *\n     * This implementation lies at a lower level than the `ECMAScript Module\n     * loader`. There is also no way to interact with the Loader yet, though\n     * support is planned.\n     *\n     * ```js\n     * import vm from 'node:vm';\n     *\n     * const contextifiedObject = vm.createContext({\n     *   secret: 42,\n     *   print: console.log,\n     * });\n     *\n     * // Step 1\n     * //\n     * // Create a Module by constructing a new `vm.SourceTextModule` object. This\n     * // parses the provided source text, throwing a `SyntaxError` if anything goes\n     * // wrong. By default, a Module is created in the top context. But here, we\n     * // specify `contextifiedObject` as the context this Module belongs to.\n     * //\n     * // Here, we attempt to obtain the default export from the module \"foo\", and\n     * // put it into local binding \"secret\".\n     *\n     * const bar = new vm.SourceTextModule(`\n     *   import s from 'foo';\n     *   s;\n     *   print(s);\n     * `, { context: contextifiedObject });\n     *\n     * // Step 2\n     * //\n     * // \"Link\" the imported dependencies of this Module to it.\n     * //\n     * // The provided linking callback (the \"linker\") accepts two arguments: the\n     * // parent module (`bar` in this case) and the string that is the specifier of\n     * // the imported module. The callback is expected to return a Module that\n     * // corresponds to the provided specifier, with certain requirements documented\n     * // in `module.link()`.\n     * //\n     * // If linking has not started for the returned Module, the same linker\n     * // callback will be called on the returned Module.\n     * //\n     * // Even top-level Modules without dependencies must be explicitly linked. The\n     * // callback provided would never be called, however.\n     * //\n     * // The link() method returns a Promise that will be resolved when all the\n     * // Promises returned by the linker resolve.\n     * //\n     * // Note: This is a contrived example in that the linker function creates a new\n     * // \"foo\" module every time it is called. In a full-fledged module system, a\n     * // cache would probably be used to avoid duplicated modules.\n     *\n     * async function linker(specifier, referencingModule) {\n     *   if (specifier === 'foo') {\n     *     return new vm.SourceTextModule(`\n     *       // The \"secret\" variable refers to the global variable we added to\n     *       // \"contextifiedObject\" when creating the context.\n     *       export default secret;\n     *     `, { context: referencingModule.context });\n     *\n     *     // Using `contextifiedObject` instead of `referencingModule.context`\n     *     // here would work as well.\n     *   }\n     *   throw new Error(`Unable to resolve dependency: ${specifier}`);\n     * }\n     * await bar.link(linker);\n     *\n     * // Step 3\n     * //\n     * // Evaluate the Module. The evaluate() method returns a promise which will\n     * // resolve after the module has finished evaluating.\n     *\n     * // Prints 42.\n     * await bar.evaluate();\n     * ```\n     * @since v13.0.0, v12.16.0\n     * @experimental\n     */\n    class Module {\n        /**\n         * The specifiers of all dependencies of this module. The returned array is frozen\n         * to disallow any changes to it.\n         *\n         * Corresponds to the `[[RequestedModules]]` field of [Cyclic Module Record](https://tc39.es/ecma262/#sec-cyclic-module-records) s in\n         * the ECMAScript specification.\n         */\n        dependencySpecifiers: readonly string[];\n        /**\n         * If the `module.status` is `'errored'`, this property contains the exception\n         * thrown by the module during evaluation. If the status is anything else,\n         * accessing this property will result in a thrown exception.\n         *\n         * The value `undefined` cannot be used for cases where there is not a thrown\n         * exception due to possible ambiguity with `throw undefined;`.\n         *\n         * Corresponds to the `[[EvaluationError]]` field of [Cyclic Module Record](https://tc39.es/ecma262/#sec-cyclic-module-records) s\n         * in the ECMAScript specification.\n         */\n        error: any;\n        /**\n         * The identifier of the current module, as set in the constructor.\n         */\n        identifier: string;\n        context: Context;\n        /**\n         * The namespace object of the module. This is only available after linking\n         * (`module.link()`) has completed.\n         *\n         * Corresponds to the [GetModuleNamespace](https://tc39.es/ecma262/#sec-getmodulenamespace) abstract operation in the ECMAScript\n         * specification.\n         */\n        namespace: Object;\n        /**\n         * The current status of the module. Will be one of:\n         *\n         * * `'unlinked'`: `module.link()` has not yet been called.\n         * * `'linking'`: `module.link()` has been called, but not all Promises returned\n         * by the linker function have been resolved yet.\n         * * `'linked'`: The module has been linked successfully, and all of its\n         * dependencies are linked, but `module.evaluate()` has not yet been called.\n         * * `'evaluating'`: The module is being evaluated through a `module.evaluate()` on\n         * itself or a parent module.\n         * * `'evaluated'`: The module has been successfully evaluated.\n         * * `'errored'`: The module has been evaluated, but an exception was thrown.\n         *\n         * Other than `'errored'`, this status string corresponds to the specification's [Cyclic Module Record](https://tc39.es/ecma262/#sec-cyclic-module-records)'s `[[Status]]` field. `'errored'`\n         * corresponds to `'evaluated'` in the specification, but with `[[EvaluationError]]` set to a\n         * value that is not `undefined`.\n         */\n        status: ModuleStatus;\n        /**\n         * Evaluate the module.\n         *\n         * This must be called after the module has been linked; otherwise it will reject.\n         * It could be called also when the module has already been evaluated, in which\n         * case it will either do nothing if the initial evaluation ended in success\n         * (`module.status` is `'evaluated'`) or it will re-throw the exception that the\n         * initial evaluation resulted in (`module.status` is `'errored'`).\n         *\n         * This method cannot be called while the module is being evaluated\n         * (`module.status` is `'evaluating'`).\n         *\n         * Corresponds to the [Evaluate() concrete method](https://tc39.es/ecma262/#sec-moduleevaluation) field of [Cyclic Module Record](https://tc39.es/ecma262/#sec-cyclic-module-records) s in the\n         * ECMAScript specification.\n         * @return Fulfills with `undefined` upon success.\n         */\n        evaluate(options?: ModuleEvaluateOptions): Promise<void>;\n        /**\n         * Link module dependencies. This method must be called before evaluation, and\n         * can only be called once per module.\n         *\n         * The function is expected to return a `Module` object or a `Promise` that\n         * eventually resolves to a `Module` object. The returned `Module` must satisfy the\n         * following two invariants:\n         *\n         * * It must belong to the same context as the parent `Module`.\n         * * Its `status` must not be `'errored'`.\n         *\n         * If the returned `Module`'s `status` is `'unlinked'`, this method will be\n         * recursively called on the returned `Module` with the same provided `linker` function.\n         *\n         * `link()` returns a `Promise` that will either get resolved when all linking\n         * instances resolve to a valid `Module`, or rejected if the linker function either\n         * throws an exception or returns an invalid `Module`.\n         *\n         * The linker function roughly corresponds to the implementation-defined [HostResolveImportedModule](https://tc39.es/ecma262/#sec-hostresolveimportedmodule) abstract operation in the\n         * ECMAScript\n         * specification, with a few key differences:\n         *\n         * * The linker function is allowed to be asynchronous while [HostResolveImportedModule](https://tc39.es/ecma262/#sec-hostresolveimportedmodule) is synchronous.\n         *\n         * The actual [HostResolveImportedModule](https://tc39.es/ecma262/#sec-hostresolveimportedmodule) implementation used during module\n         * linking is one that returns the modules linked during linking. Since at\n         * that point all modules would have been fully linked already, the [HostResolveImportedModule](https://tc39.es/ecma262/#sec-hostresolveimportedmodule) implementation is fully synchronous per\n         * specification.\n         *\n         * Corresponds to the [Link() concrete method](https://tc39.es/ecma262/#sec-moduledeclarationlinking) field of [Cyclic Module Record](https://tc39.es/ecma262/#sec-cyclic-module-records) s in\n         * the ECMAScript specification.\n         */\n        link(linker: ModuleLinker): Promise<void>;\n    }\n    interface SourceTextModuleOptions {\n        /**\n         * String used in stack traces.\n         * @default 'vm:module(i)' where i is a context-specific ascending index.\n         */\n        identifier?: string | undefined;\n        /**\n         * Provides an optional data with V8's code cache data for the supplied source.\n         */\n        cachedData?: ScriptOptions[\"cachedData\"] | undefined;\n        context?: Context | undefined;\n        lineOffset?: BaseOptions[\"lineOffset\"] | undefined;\n        columnOffset?: BaseOptions[\"columnOffset\"] | undefined;\n        /**\n         * Called during evaluation of this module to initialize the `import.meta`.\n         */\n        initializeImportMeta?: ((meta: ImportMeta, module: SourceTextModule) => void) | undefined;\n        /**\n         * Used to specify how the modules should be loaded during the evaluation of this script when `import()` is called. This option is\n         * part of the experimental modules API. We do not recommend using it in a production environment. For detailed information, see\n         * [Support of dynamic `import()` in compilation APIs](https://nodejs.org/docs/latest-v22.x/api/vm.html#support-of-dynamic-import-in-compilation-apis).\n         */\n        importModuleDynamically?: DynamicModuleLoader<SourceTextModule> | undefined;\n    }\n    /**\n     * This feature is only available with the `--experimental-vm-modules` command\n     * flag enabled.\n     *\n     * The `vm.SourceTextModule` class provides the [Source Text Module Record](https://tc39.es/ecma262/#sec-source-text-module-records) as\n     * defined in the ECMAScript specification.\n     * @since v9.6.0\n     * @experimental\n     */\n    class SourceTextModule extends Module {\n        /**\n         * Creates a new `SourceTextModule` instance.\n         * @param code JavaScript Module code to parse\n         */\n        constructor(code: string, options?: SourceTextModuleOptions);\n    }\n    interface SyntheticModuleOptions {\n        /**\n         * String used in stack traces.\n         * @default 'vm:module(i)' where i is a context-specific ascending index.\n         */\n        identifier?: string | undefined;\n        /**\n         * The contextified object as returned by the `vm.createContext()` method, to compile and evaluate this module in.\n         */\n        context?: Context | undefined;\n    }\n    /**\n     * This feature is only available with the `--experimental-vm-modules` command\n     * flag enabled.\n     *\n     * The `vm.SyntheticModule` class provides the [Synthetic Module Record](https://heycam.github.io/webidl/#synthetic-module-records) as\n     * defined in the WebIDL specification. The purpose of synthetic modules is to\n     * provide a generic interface for exposing non-JavaScript sources to ECMAScript\n     * module graphs.\n     *\n     * ```js\n     * import vm from 'node:vm';\n     *\n     * const source = '{ \"a\": 1 }';\n     * const module = new vm.SyntheticModule(['default'], function() {\n     *   const obj = JSON.parse(source);\n     *   this.setExport('default', obj);\n     * });\n     *\n     * // Use `module` in linking...\n     * ```\n     * @since v13.0.0, v12.16.0\n     * @experimental\n     */\n    class SyntheticModule extends Module {\n        /**\n         * Creates a new `SyntheticModule` instance.\n         * @param exportNames Array of names that will be exported from the module.\n         * @param evaluateCallback Called when the module is evaluated.\n         */\n        constructor(\n            exportNames: string[],\n            evaluateCallback: (this: SyntheticModule) => void,\n            options?: SyntheticModuleOptions,\n        );\n        /**\n         * This method is used after the module is linked to set the values of exports. If\n         * it is called before the module is linked, an `ERR_VM_MODULE_STATUS` error\n         * will be thrown.\n         *\n         * ```js\n         * import vm from 'node:vm';\n         *\n         * const m = new vm.SyntheticModule(['x'], () => {\n         *   m.setExport('x', 1);\n         * });\n         *\n         * await m.link(() => {});\n         * await m.evaluate();\n         *\n         * assert.strictEqual(m.namespace.x, 1);\n         * ```\n         * @since v13.0.0, v12.16.0\n         * @param name Name of the export to set.\n         * @param value The value to set the export to.\n         */\n        setExport(name: string, value: any): void;\n    }\n    /**\n     * Returns an object containing commonly used constants for VM operations.\n     * @since v21.7.0, v20.12.0\n     */\n    namespace constants {\n        /**\n         * A constant that can be used as the `importModuleDynamically` option to `vm.Script`\n         * and `vm.compileFunction()` so that Node.js uses the default ESM loader from the main\n         * context to load the requested module.\n         *\n         * For detailed information, see [Support of dynamic `import()` in compilation APIs](https://nodejs.org/docs/latest-v22.x/api/vm.html#support-of-dynamic-import-in-compilation-apis).\n         * @since v21.7.0, v20.12.0\n         */\n        const USE_MAIN_CONTEXT_DEFAULT_LOADER: number;\n        /**\n         * This constant, when used as the `contextObject` argument in vm APIs, instructs Node.js to create\n         * a context without wrapping its global object with another object in a Node.js-specific manner.\n         * As a result, the `globalThis` value inside the new context would behave more closely to an ordinary\n         * one.\n         *\n         * When `vm.constants.DONT_CONTEXTIFY` is used as the `contextObject` argument to {@link createContext},\n         * the returned object is a proxy-like object to the global object in the newly created context with\n         * fewer Node.js-specific quirks. It is reference equal to the `globalThis` value in the new context,\n         * can be modified from outside the context, and can be used to access built-ins in the new context directly.\n         * @since v22.8.0\n         */\n        const DONT_CONTEXTIFY: number;\n    }\n}\ndeclare module \"node:vm\" {\n    export * from \"vm\";\n}\n",
  '@types/node/wasi.d.ts':
    "/**\n * **The `node:wasi` module does not currently provide the**\n * **comprehensive file system security properties provided by some WASI runtimes.**\n * **Full support for secure file system sandboxing may or may not be implemented in**\n * **future. In the mean time, do not rely on it to run untrusted code.**\n *\n * The WASI API provides an implementation of the [WebAssembly System Interface](https://wasi.dev/) specification. WASI gives WebAssembly applications access to the underlying\n * operating system via a collection of POSIX-like functions.\n *\n * ```js\n * import { readFile } from 'node:fs/promises';\n * import { WASI } from 'node:wasi';\n * import { argv, env } from 'node:process';\n *\n * const wasi = new WASI({\n *   version: 'preview1',\n *   args: argv,\n *   env,\n *   preopens: {\n *     '/local': '/some/real/path/that/wasm/can/access',\n *   },\n * });\n *\n * const wasm = await WebAssembly.compile(\n *   await readFile(new URL('./demo.wasm', import.meta.url)),\n * );\n * const instance = await WebAssembly.instantiate(wasm, wasi.getImportObject());\n *\n * wasi.start(instance);\n * ```\n *\n * To run the above example, create a new WebAssembly text format file named `demo.wat`:\n *\n * ```text\n * (module\n *     ;; Import the required fd_write WASI function which will write the given io vectors to stdout\n *     ;; The function signature for fd_write is:\n *     ;; (File Descriptor, *iovs, iovs_len, nwritten) -> Returns number of bytes written\n *     (import \"wasi_snapshot_preview1\" \"fd_write\" (func $fd_write (param i32 i32 i32 i32) (result i32)))\n *\n *     (memory 1)\n *     (export \"memory\" (memory 0))\n *\n *     ;; Write 'hello world\\n' to memory at an offset of 8 bytes\n *     ;; Note the trailing newline which is required for the text to appear\n *     (data (i32.const 8) \"hello world\\n\")\n *\n *     (func $main (export \"_start\")\n *         ;; Creating a new io vector within linear memory\n *         (i32.store (i32.const 0) (i32.const 8))  ;; iov.iov_base - This is a pointer to the start of the 'hello world\\n' string\n *         (i32.store (i32.const 4) (i32.const 12))  ;; iov.iov_len - The length of the 'hello world\\n' string\n *\n *         (call $fd_write\n *             (i32.const 1) ;; file_descriptor - 1 for stdout\n *             (i32.const 0) ;; *iovs - The pointer to the iov array, which is stored at memory location 0\n *             (i32.const 1) ;; iovs_len - We're printing 1 string stored in an iov - so one.\n *             (i32.const 20) ;; nwritten - A place in memory to store the number of bytes written\n *         )\n *         drop ;; Discard the number of bytes written from the top of the stack\n *     )\n * )\n * ```\n *\n * Use [wabt](https://github.com/WebAssembly/wabt) to compile `.wat` to `.wasm`\n *\n * ```bash\n * wat2wasm demo.wat\n * ```\n * @experimental\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/wasi.js)\n */\ndeclare module \"wasi\" {\n    interface WASIOptions {\n        /**\n         * An array of strings that the WebAssembly application will\n         * see as command line arguments. The first argument is the virtual path to the\n         * WASI command itself.\n         * @default []\n         */\n        args?: string[] | undefined;\n        /**\n         * An object similar to `process.env` that the WebAssembly\n         * application will see as its environment.\n         * @default {}\n         */\n        env?: object | undefined;\n        /**\n         * This object represents the WebAssembly application's\n         * sandbox directory structure. The string keys of `preopens` are treated as\n         * directories within the sandbox. The corresponding values in `preopens` are\n         * the real paths to those directories on the host machine.\n         */\n        preopens?: NodeJS.Dict<string> | undefined;\n        /**\n         * By default, when WASI applications call `__wasi_proc_exit()`\n         * `wasi.start()` will return with the exit code specified rather than terminatng the process.\n         * Setting this option to `false` will cause the Node.js process to exit with\n         * the specified exit code instead.\n         * @default true\n         */\n        returnOnExit?: boolean | undefined;\n        /**\n         * The file descriptor used as standard input in the WebAssembly application.\n         * @default 0\n         */\n        stdin?: number | undefined;\n        /**\n         * The file descriptor used as standard output in the WebAssembly application.\n         * @default 1\n         */\n        stdout?: number | undefined;\n        /**\n         * The file descriptor used as standard error in the WebAssembly application.\n         * @default 2\n         */\n        stderr?: number | undefined;\n        /**\n         * The version of WASI requested.\n         * Currently the only supported versions are `'unstable'` and `'preview1'`. This option is mandatory.\n         * @since v19.8.0\n         */\n        version: \"unstable\" | \"preview1\";\n    }\n    /**\n     * The `WASI` class provides the WASI system call API and additional convenience\n     * methods for working with WASI-based applications. Each `WASI` instance\n     * represents a distinct environment.\n     * @since v13.3.0, v12.16.0\n     */\n    class WASI {\n        constructor(options?: WASIOptions);\n        /**\n         * Return an import object that can be passed to `WebAssembly.instantiate()` if no other WASM imports are needed beyond those provided by WASI.\n         *\n         * If version `unstable` was passed into the constructor it will return:\n         *\n         * ```js\n         * { wasi_unstable: wasi.wasiImport }\n         * ```\n         *\n         * If version `preview1` was passed into the constructor or no version was specified it will return:\n         *\n         * ```js\n         * { wasi_snapshot_preview1: wasi.wasiImport }\n         * ```\n         * @since v19.8.0\n         */\n        getImportObject(): object;\n        /**\n         * Attempt to begin execution of `instance` as a WASI command by invoking its `_start()` export. If `instance` does not contain a `_start()` export, or if `instance` contains an `_initialize()`\n         * export, then an exception is thrown.\n         *\n         * `start()` requires that `instance` exports a [`WebAssembly.Memory`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory) named `memory`. If\n         * `instance` does not have a `memory` export an exception is thrown.\n         *\n         * If `start()` is called more than once, an exception is thrown.\n         * @since v13.3.0, v12.16.0\n         */\n        start(instance: object): number; // TODO: avoid DOM dependency until WASM moved to own lib.\n        /**\n         * Attempt to initialize `instance` as a WASI reactor by invoking its `_initialize()` export, if it is present. If `instance` contains a `_start()` export, then an exception is thrown.\n         *\n         * `initialize()` requires that `instance` exports a [`WebAssembly.Memory`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory) named `memory`.\n         * If `instance` does not have a `memory` export an exception is thrown.\n         *\n         * If `initialize()` is called more than once, an exception is thrown.\n         * @since v14.6.0, v12.19.0\n         */\n        initialize(instance: object): void; // TODO: avoid DOM dependency until WASM moved to own lib.\n        /**\n         * `wasiImport` is an object that implements the WASI system call API. This object\n         * should be passed as the `wasi_snapshot_preview1` import during the instantiation\n         * of a [`WebAssembly.Instance`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance).\n         * @since v13.3.0, v12.16.0\n         */\n        readonly wasiImport: NodeJS.Dict<any>; // TODO: Narrow to DOM types\n    }\n}\ndeclare module \"node:wasi\" {\n    export * from \"wasi\";\n}\n",
  '@types/node/worker_threads.d.ts':
    '/**\n * The `node:worker_threads` module enables the use of threads that execute\n * JavaScript in parallel. To access it:\n *\n * ```js\n * import worker from \'node:worker_threads\';\n * ```\n *\n * Workers (threads) are useful for performing CPU-intensive JavaScript operations.\n * They do not help much with I/O-intensive work. The Node.js built-in\n * asynchronous I/O operations are more efficient than Workers can be.\n *\n * Unlike `child_process` or `cluster`, `worker_threads` can share memory. They do\n * so by transferring `ArrayBuffer` instances or sharing `SharedArrayBuffer` instances.\n *\n * ```js\n * import {\n *   Worker, isMainThread, parentPort, workerData,\n * } from \'node:worker_threads\';\n * import { parse } from \'some-js-parsing-library\';\n *\n * if (isMainThread) {\n *   module.exports = function parseJSAsync(script) {\n *     return new Promise((resolve, reject) => {\n *       const worker = new Worker(__filename, {\n *         workerData: script,\n *       });\n *       worker.on(\'message\', resolve);\n *       worker.on(\'error\', reject);\n *       worker.on(\'exit\', (code) => {\n *         if (code !== 0)\n *           reject(new Error(`Worker stopped with exit code ${code}`));\n *       });\n *     });\n *   };\n * } else {\n *   const script = workerData;\n *   parentPort.postMessage(parse(script));\n * }\n * ```\n *\n * The above example spawns a Worker thread for each `parseJSAsync()` call. In\n * practice, use a pool of Workers for these kinds of tasks. Otherwise, the\n * overhead of creating Workers would likely exceed their benefit.\n *\n * When implementing a worker pool, use the `AsyncResource` API to inform\n * diagnostic tools (e.g. to provide asynchronous stack traces) about the\n * correlation between tasks and their outcomes. See `"Using AsyncResource for a Worker thread pool"` in the `async_hooks` documentation for an example implementation.\n *\n * Worker threads inherit non-process-specific options by default. Refer to `Worker constructor options` to know how to customize worker thread options,\n * specifically `argv` and `execArgv` options.\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/worker_threads.js)\n */\ndeclare module "worker_threads" {\n    import { Context } from "node:vm";\n    import { EventEmitter } from "node:events";\n    import { EventLoopUtilityFunction } from "node:perf_hooks";\n    import { FileHandle } from "node:fs/promises";\n    import { Readable, Writable } from "node:stream";\n    import { ReadableStream, TransformStream, WritableStream } from "node:stream/web";\n    import { URL } from "node:url";\n    const isInternalThread: boolean;\n    const isMainThread: boolean;\n    const parentPort: null | MessagePort;\n    const resourceLimits: ResourceLimits;\n    const SHARE_ENV: unique symbol;\n    const threadId: number;\n    const workerData: any;\n    /**\n     * Instances of the `worker.MessageChannel` class represent an asynchronous,\n     * two-way communications channel.\n     * The `MessageChannel` has no methods of its own. `new MessageChannel()` yields an object with `port1` and `port2` properties, which refer to linked `MessagePort` instances.\n     *\n     * ```js\n     * import { MessageChannel } from \'node:worker_threads\';\n     *\n     * const { port1, port2 } = new MessageChannel();\n     * port1.on(\'message\', (message) => console.log(\'received\', message));\n     * port2.postMessage({ foo: \'bar\' });\n     * // Prints: received { foo: \'bar\' } from the `port1.on(\'message\')` listener\n     * ```\n     * @since v10.5.0\n     */\n    class MessageChannel {\n        readonly port1: MessagePort;\n        readonly port2: MessagePort;\n    }\n    interface WorkerPerformance {\n        eventLoopUtilization: EventLoopUtilityFunction;\n    }\n    type Transferable =\n        | ArrayBuffer\n        | MessagePort\n        | AbortSignal\n        | FileHandle\n        | ReadableStream\n        | WritableStream\n        | TransformStream;\n    /** @deprecated Use `import { Transferable } from "node:worker_threads"` instead. */\n    type TransferListItem = Transferable;\n    /**\n     * Instances of the `worker.MessagePort` class represent one end of an\n     * asynchronous, two-way communications channel. It can be used to transfer\n     * structured data, memory regions and other `MessagePort`s between different `Worker`s.\n     *\n     * This implementation matches [browser `MessagePort`](https://developer.mozilla.org/en-US/docs/Web/API/MessagePort) s.\n     * @since v10.5.0\n     */\n    class MessagePort extends EventEmitter {\n        /**\n         * Disables further sending of messages on either side of the connection.\n         * This method can be called when no further communication will happen over this `MessagePort`.\n         *\n         * The `\'close\' event` is emitted on both `MessagePort` instances that\n         * are part of the channel.\n         * @since v10.5.0\n         */\n        close(): void;\n        /**\n         * Sends a JavaScript value to the receiving side of this channel. `value` is transferred in a way which is compatible with\n         * the [HTML structured clone algorithm](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Structured_clone_algorithm).\n         *\n         * In particular, the significant differences to `JSON` are:\n         *\n         * * `value` may contain circular references.\n         * * `value` may contain instances of builtin JS types such as `RegExp`s, `BigInt`s, `Map`s, `Set`s, etc.\n         * * `value` may contain typed arrays, both using `ArrayBuffer`s\n         * and `SharedArrayBuffer`s.\n         * * `value` may contain [`WebAssembly.Module`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module) instances.\n         * * `value` may not contain native (C++-backed) objects other than:\n         *\n         * ```js\n         * import { MessageChannel } from \'node:worker_threads\';\n         * const { port1, port2 } = new MessageChannel();\n         *\n         * port1.on(\'message\', (message) => console.log(message));\n         *\n         * const circularData = {};\n         * circularData.foo = circularData;\n         * // Prints: { foo: [Circular] }\n         * port2.postMessage(circularData);\n         * ```\n         *\n         * `transferList` may be a list of [`ArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer), `MessagePort`, and `FileHandle` objects.\n         * After transferring, they are not usable on the sending side of the channel\n         * anymore (even if they are not contained in `value`). Unlike with `child processes`, transferring handles such as network sockets is currently\n         * not supported.\n         *\n         * If `value` contains [`SharedArrayBuffer`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer) instances, those are accessible\n         * from either thread. They cannot be listed in `transferList`.\n         *\n         * `value` may still contain `ArrayBuffer` instances that are not in `transferList`; in that case, the underlying memory is copied rather than moved.\n         *\n         * ```js\n         * import { MessageChannel } from \'node:worker_threads\';\n         * const { port1, port2 } = new MessageChannel();\n         *\n         * port1.on(\'message\', (message) => console.log(message));\n         *\n         * const uint8Array = new Uint8Array([ 1, 2, 3, 4 ]);\n         * // This posts a copy of `uint8Array`:\n         * port2.postMessage(uint8Array);\n         * // This does not copy data, but renders `uint8Array` unusable:\n         * port2.postMessage(uint8Array, [ uint8Array.buffer ]);\n         *\n         * // The memory for the `sharedUint8Array` is accessible from both the\n         * // original and the copy received by `.on(\'message\')`:\n         * const sharedUint8Array = new Uint8Array(new SharedArrayBuffer(4));\n         * port2.postMessage(sharedUint8Array);\n         *\n         * // This transfers a freshly created message port to the receiver.\n         * // This can be used, for example, to create communication channels between\n         * // multiple `Worker` threads that are children of the same parent thread.\n         * const otherChannel = new MessageChannel();\n         * port2.postMessage({ port: otherChannel.port1 }, [ otherChannel.port1 ]);\n         * ```\n         *\n         * The message object is cloned immediately, and can be modified after\n         * posting without having side effects.\n         *\n         * For more information on the serialization and deserialization mechanisms\n         * behind this API, see the `serialization API of the node:v8 module`.\n         * @since v10.5.0\n         */\n        postMessage(value: any, transferList?: readonly Transferable[]): void;\n        /**\n         * Opposite of `unref()`. Calling `ref()` on a previously `unref()`ed port does _not_ let the program exit if it\'s the only active handle left (the default\n         * behavior). If the port is `ref()`ed, calling `ref()` again has no effect.\n         *\n         * If listeners are attached or removed using `.on(\'message\')`, the port\n         * is `ref()`ed and `unref()`ed automatically depending on whether\n         * listeners for the event exist.\n         * @since v10.5.0\n         */\n        ref(): void;\n        /**\n         * Calling `unref()` on a port allows the thread to exit if this is the only\n         * active handle in the event system. If the port is already `unref()`ed calling `unref()` again has no effect.\n         *\n         * If listeners are attached or removed using `.on(\'message\')`, the port is `ref()`ed and `unref()`ed automatically depending on whether\n         * listeners for the event exist.\n         * @since v10.5.0\n         */\n        unref(): void;\n        /**\n         * Starts receiving messages on this `MessagePort`. When using this port\n         * as an event emitter, this is called automatically once `\'message\'` listeners are attached.\n         *\n         * This method exists for parity with the Web `MessagePort` API. In Node.js,\n         * it is only useful for ignoring messages when no event listener is present.\n         * Node.js also diverges in its handling of `.onmessage`. Setting it\n         * automatically calls `.start()`, but unsetting it lets messages queue up\n         * until a new handler is set or the port is discarded.\n         * @since v10.5.0\n         */\n        start(): void;\n        addListener(event: "close", listener: () => void): this;\n        addListener(event: "message", listener: (value: any) => void): this;\n        addListener(event: "messageerror", listener: (error: Error) => void): this;\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\n        emit(event: "close"): boolean;\n        emit(event: "message", value: any): boolean;\n        emit(event: "messageerror", error: Error): boolean;\n        emit(event: string | symbol, ...args: any[]): boolean;\n        on(event: "close", listener: () => void): this;\n        on(event: "message", listener: (value: any) => void): this;\n        on(event: "messageerror", listener: (error: Error) => void): this;\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\n        once(event: "close", listener: () => void): this;\n        once(event: "message", listener: (value: any) => void): this;\n        once(event: "messageerror", listener: (error: Error) => void): this;\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\n        prependListener(event: "close", listener: () => void): this;\n        prependListener(event: "message", listener: (value: any) => void): this;\n        prependListener(event: "messageerror", listener: (error: Error) => void): this;\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\n        prependOnceListener(event: "close", listener: () => void): this;\n        prependOnceListener(event: "message", listener: (value: any) => void): this;\n        prependOnceListener(event: "messageerror", listener: (error: Error) => void): this;\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\n        removeListener(event: "close", listener: () => void): this;\n        removeListener(event: "message", listener: (value: any) => void): this;\n        removeListener(event: "messageerror", listener: (error: Error) => void): this;\n        removeListener(event: string | symbol, listener: (...args: any[]) => void): this;\n        off(event: "close", listener: () => void): this;\n        off(event: "message", listener: (value: any) => void): this;\n        off(event: "messageerror", listener: (error: Error) => void): this;\n        off(event: string | symbol, listener: (...args: any[]) => void): this;\n        addEventListener: EventTarget["addEventListener"];\n        dispatchEvent: EventTarget["dispatchEvent"];\n        removeEventListener: EventTarget["removeEventListener"];\n    }\n    interface WorkerOptions {\n        /**\n         * List of arguments which would be stringified and appended to\n         * `process.argv` in the worker. This is mostly similar to the `workerData`\n         * but the values will be available on the global `process.argv` as if they\n         * were passed as CLI options to the script.\n         */\n        argv?: any[] | undefined;\n        env?: NodeJS.Dict<string> | typeof SHARE_ENV | undefined;\n        eval?: boolean | undefined;\n        workerData?: any;\n        stdin?: boolean | undefined;\n        stdout?: boolean | undefined;\n        stderr?: boolean | undefined;\n        execArgv?: string[] | undefined;\n        resourceLimits?: ResourceLimits | undefined;\n        /**\n         * Additional data to send in the first worker message.\n         */\n        transferList?: Transferable[] | undefined;\n        /**\n         * @default true\n         */\n        trackUnmanagedFds?: boolean | undefined;\n        /**\n         * An optional `name` to be appended to the worker title\n         * for debugging/identification purposes, making the final title as\n         * `[worker ${id}] ${name}`.\n         */\n        name?: string | undefined;\n    }\n    interface ResourceLimits {\n        /**\n         * The maximum size of a heap space for recently created objects.\n         */\n        maxYoungGenerationSizeMb?: number | undefined;\n        /**\n         * The maximum size of the main heap in MB.\n         */\n        maxOldGenerationSizeMb?: number | undefined;\n        /**\n         * The size of a pre-allocated memory range used for generated code.\n         */\n        codeRangeSizeMb?: number | undefined;\n        /**\n         * The default maximum stack size for the thread. Small values may lead to unusable Worker instances.\n         * @default 4\n         */\n        stackSizeMb?: number | undefined;\n    }\n    /**\n     * The `Worker` class represents an independent JavaScript execution thread.\n     * Most Node.js APIs are available inside of it.\n     *\n     * Notable differences inside a Worker environment are:\n     *\n     * * The `process.stdin`, `process.stdout`, and `process.stderr` streams may be redirected by the parent thread.\n     * * The `import { isMainThread } from \'node:worker_threads\'` variable is set to `false`.\n     * * The `import { parentPort } from \'node:worker_threads\'` message port is available.\n     * * `process.exit()` does not stop the whole program, just the single thread,\n     * and `process.abort()` is not available.\n     * * `process.chdir()` and `process` methods that set group or user ids\n     * are not available.\n     * * `process.env` is a copy of the parent thread\'s environment variables,\n     * unless otherwise specified. Changes to one copy are not visible in other\n     * threads, and are not visible to native add-ons (unless `worker.SHARE_ENV` is passed as the `env` option to the `Worker` constructor). On Windows, unlike the main thread, a copy of the\n     * environment variables operates in a case-sensitive manner.\n     * * `process.title` cannot be modified.\n     * * Signals are not delivered through `process.on(\'...\')`.\n     * * Execution may stop at any point as a result of `worker.terminate()` being invoked.\n     * * IPC channels from parent processes are not accessible.\n     * * The `trace_events` module is not supported.\n     * * Native add-ons can only be loaded from multiple threads if they fulfill `certain conditions`.\n     *\n     * Creating `Worker` instances inside of other `Worker`s is possible.\n     *\n     * Like [Web Workers](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API) and the `node:cluster module`, two-way communication\n     * can be achieved through inter-thread message passing. Internally, a `Worker` has\n     * a built-in pair of `MessagePort` s that are already associated with each\n     * other when the `Worker` is created. While the `MessagePort` object on the parent\n     * side is not directly exposed, its functionalities are exposed through `worker.postMessage()` and the `worker.on(\'message\')` event\n     * on the `Worker` object for the parent thread.\n     *\n     * To create custom messaging channels (which is encouraged over using the default\n     * global channel because it facilitates separation of concerns), users can create\n     * a `MessageChannel` object on either thread and pass one of the`MessagePort`s on that `MessageChannel` to the other thread through a\n     * pre-existing channel, such as the global one.\n     *\n     * See `port.postMessage()` for more information on how messages are passed,\n     * and what kind of JavaScript values can be successfully transported through\n     * the thread barrier.\n     *\n     * ```js\n     * import assert from \'node:assert\';\n     * import {\n     *   Worker, MessageChannel, MessagePort, isMainThread, parentPort,\n     * } from \'node:worker_threads\';\n     * if (isMainThread) {\n     *   const worker = new Worker(__filename);\n     *   const subChannel = new MessageChannel();\n     *   worker.postMessage({ hereIsYourPort: subChannel.port1 }, [subChannel.port1]);\n     *   subChannel.port2.on(\'message\', (value) => {\n     *     console.log(\'received:\', value);\n     *   });\n     * } else {\n     *   parentPort.once(\'message\', (value) => {\n     *     assert(value.hereIsYourPort instanceof MessagePort);\n     *     value.hereIsYourPort.postMessage(\'the worker is sending this\');\n     *     value.hereIsYourPort.close();\n     *   });\n     * }\n     * ```\n     * @since v10.5.0\n     */\n    class Worker extends EventEmitter {\n        /**\n         * If `stdin: true` was passed to the `Worker` constructor, this is a\n         * writable stream. The data written to this stream will be made available in\n         * the worker thread as `process.stdin`.\n         * @since v10.5.0\n         */\n        readonly stdin: Writable | null;\n        /**\n         * This is a readable stream which contains data written to `process.stdout` inside the worker thread. If `stdout: true` was not passed to the `Worker` constructor, then data is piped to the\n         * parent thread\'s `process.stdout` stream.\n         * @since v10.5.0\n         */\n        readonly stdout: Readable;\n        /**\n         * This is a readable stream which contains data written to `process.stderr` inside the worker thread. If `stderr: true` was not passed to the `Worker` constructor, then data is piped to the\n         * parent thread\'s `process.stderr` stream.\n         * @since v10.5.0\n         */\n        readonly stderr: Readable;\n        /**\n         * An integer identifier for the referenced thread. Inside the worker thread,\n         * it is available as `import { threadId } from \'node:worker_threads\'`.\n         * This value is unique for each `Worker` instance inside a single process.\n         * @since v10.5.0\n         */\n        readonly threadId: number;\n        /**\n         * Provides the set of JS engine resource constraints for this Worker thread.\n         * If the `resourceLimits` option was passed to the `Worker` constructor,\n         * this matches its values.\n         *\n         * If the worker has stopped, the return value is an empty object.\n         * @since v13.2.0, v12.16.0\n         */\n        readonly resourceLimits?: ResourceLimits | undefined;\n        /**\n         * An object that can be used to query performance information from a worker\n         * instance. Similar to `perf_hooks.performance`.\n         * @since v15.1.0, v14.17.0, v12.22.0\n         */\n        readonly performance: WorkerPerformance;\n        /**\n         * @param filename  The path to the Worker’s main script or module.\n         *                  Must be either an absolute path or a relative path (i.e. relative to the current working directory) starting with ./ or ../,\n         *                  or a WHATWG URL object using file: protocol. If options.eval is true, this is a string containing JavaScript code rather than a path.\n         */\n        constructor(filename: string | URL, options?: WorkerOptions);\n        /**\n         * Send a message to the worker that is received via `require(\'node:worker_threads\').parentPort.on(\'message\')`.\n         * See `port.postMessage()` for more details.\n         * @since v10.5.0\n         */\n        postMessage(value: any, transferList?: readonly Transferable[]): void;\n        /**\n         * Sends a value to another worker, identified by its thread ID.\n         * @param threadId The target thread ID. If the thread ID is invalid, a `ERR_WORKER_MESSAGING_FAILED` error will be thrown.\n         * If the target thread ID is the current thread ID, a `ERR_WORKER_MESSAGING_SAME_THREAD` error will be thrown.\n         * @param value The value to send.\n         * @param transferList If one or more `MessagePort`-like objects are passed in value, a `transferList` is required for those items\n         * or `ERR_MISSING_MESSAGE_PORT_IN_TRANSFER_LIST` is thrown. See `port.postMessage()` for more information.\n         * @param timeout Time to wait for the message to be delivered in milliseconds. By default it\'s `undefined`, which means wait forever.\n         * If the operation times out, a `ERR_WORKER_MESSAGING_TIMEOUT` error is thrown.\n         * @since v22.5.0\n         */\n        postMessageToThread(threadId: number, value: any, timeout?: number): Promise<void>;\n        postMessageToThread(\n            threadId: number,\n            value: any,\n            transferList: readonly Transferable[],\n            timeout?: number,\n        ): Promise<void>;\n        /**\n         * Opposite of `unref()`, calling `ref()` on a previously `unref()`ed worker does _not_ let the program exit if it\'s the only active handle left (the default\n         * behavior). If the worker is `ref()`ed, calling `ref()` again has\n         * no effect.\n         * @since v10.5.0\n         */\n        ref(): void;\n        /**\n         * Calling `unref()` on a worker allows the thread to exit if this is the only\n         * active handle in the event system. If the worker is already `unref()`ed calling `unref()` again has no effect.\n         * @since v10.5.0\n         */\n        unref(): void;\n        /**\n         * Stop all JavaScript execution in the worker thread as soon as possible.\n         * Returns a Promise for the exit code that is fulfilled when the `\'exit\' event` is emitted.\n         * @since v10.5.0\n         */\n        terminate(): Promise<number>;\n        /**\n         * Returns a readable stream for a V8 snapshot of the current state of the Worker.\n         * See `v8.getHeapSnapshot()` for more details.\n         *\n         * If the Worker thread is no longer running, which may occur before the `\'exit\' event` is emitted, the returned `Promise` is rejected\n         * immediately with an `ERR_WORKER_NOT_RUNNING` error.\n         * @since v13.9.0, v12.17.0\n         * @return A promise for a Readable Stream containing a V8 heap snapshot\n         */\n        getHeapSnapshot(): Promise<Readable>;\n        addListener(event: "error", listener: (err: Error) => void): this;\n        addListener(event: "exit", listener: (exitCode: number) => void): this;\n        addListener(event: "message", listener: (value: any) => void): this;\n        addListener(event: "messageerror", listener: (error: Error) => void): this;\n        addListener(event: "online", listener: () => void): this;\n        addListener(event: string | symbol, listener: (...args: any[]) => void): this;\n        emit(event: "error", err: Error): boolean;\n        emit(event: "exit", exitCode: number): boolean;\n        emit(event: "message", value: any): boolean;\n        emit(event: "messageerror", error: Error): boolean;\n        emit(event: "online"): boolean;\n        emit(event: string | symbol, ...args: any[]): boolean;\n        on(event: "error", listener: (err: Error) => void): this;\n        on(event: "exit", listener: (exitCode: number) => void): this;\n        on(event: "message", listener: (value: any) => void): this;\n        on(event: "messageerror", listener: (error: Error) => void): this;\n        on(event: "online", listener: () => void): this;\n        on(event: string | symbol, listener: (...args: any[]) => void): this;\n        once(event: "error", listener: (err: Error) => void): this;\n        once(event: "exit", listener: (exitCode: number) => void): this;\n        once(event: "message", listener: (value: any) => void): this;\n        once(event: "messageerror", listener: (error: Error) => void): this;\n        once(event: "online", listener: () => void): this;\n        once(event: string | symbol, listener: (...args: any[]) => void): this;\n        prependListener(event: "error", listener: (err: Error) => void): this;\n        prependListener(event: "exit", listener: (exitCode: number) => void): this;\n        prependListener(event: "message", listener: (value: any) => void): this;\n        prependListener(event: "messageerror", listener: (error: Error) => void): this;\n        prependListener(event: "online", listener: () => void): this;\n        prependListener(event: string | symbol, listener: (...args: any[]) => void): this;\n        prependOnceListener(event: "error", listener: (err: Error) => void): this;\n        prependOnceListener(event: "exit", listener: (exitCode: number) => void): this;\n        prependOnceListener(event: "message", listener: (value: any) => void): this;\n        prependOnceListener(event: "messageerror", listener: (error: Error) => void): this;\n        prependOnceListener(event: "online", listener: () => void): this;\n        prependOnceListener(event: string | symbol, listener: (...args: any[]) => void): this;\n        removeListener(event: "error", listener: (err: Error) => void): this;\n        removeListener(event: "exit", listener: (exitCode: number) => void): this;\n        removeListener(event: "message", listener: (value: any) => void): this;\n        removeListener(event: "messageerror", listener: (error: Error) => void): this;\n        removeListener(event: "online", listener: () => void): this;\n        removeListener(event: string | symbol, listener: (...args: any[]) => void): this;\n        off(event: "error", listener: (err: Error) => void): this;\n        off(event: "exit", listener: (exitCode: number) => void): this;\n        off(event: "message", listener: (value: any) => void): this;\n        off(event: "messageerror", listener: (error: Error) => void): this;\n        off(event: "online", listener: () => void): this;\n        off(event: string | symbol, listener: (...args: any[]) => void): this;\n    }\n    interface BroadcastChannel extends NodeJS.RefCounted {}\n    /**\n     * Instances of `BroadcastChannel` allow asynchronous one-to-many communication\n     * with all other `BroadcastChannel` instances bound to the same channel name.\n     *\n     * ```js\n     * \'use strict\';\n     *\n     * import {\n     *   isMainThread,\n     *   BroadcastChannel,\n     *   Worker,\n     * } from \'node:worker_threads\';\n     *\n     * const bc = new BroadcastChannel(\'hello\');\n     *\n     * if (isMainThread) {\n     *   let c = 0;\n     *   bc.onmessage = (event) => {\n     *     console.log(event.data);\n     *     if (++c === 10) bc.close();\n     *   };\n     *   for (let n = 0; n < 10; n++)\n     *     new Worker(__filename);\n     * } else {\n     *   bc.postMessage(\'hello from every worker\');\n     *   bc.close();\n     * }\n     * ```\n     * @since v15.4.0\n     */\n    class BroadcastChannel {\n        readonly name: string;\n        /**\n         * Invoked with a single \\`MessageEvent\\` argument when a message is received.\n         * @since v15.4.0\n         */\n        onmessage: (message: unknown) => void;\n        /**\n         * Invoked with a received message cannot be deserialized.\n         * @since v15.4.0\n         */\n        onmessageerror: (message: unknown) => void;\n        constructor(name: string);\n        /**\n         * Closes the `BroadcastChannel` connection.\n         * @since v15.4.0\n         */\n        close(): void;\n        /**\n         * @since v15.4.0\n         * @param message Any cloneable JavaScript value.\n         */\n        postMessage(message: unknown): void;\n    }\n    /**\n     * Mark an object as not transferable. If `object` occurs in the transfer list of\n     * a `port.postMessage()` call, it is ignored.\n     *\n     * In particular, this makes sense for objects that can be cloned, rather than\n     * transferred, and which are used by other objects on the sending side.\n     * For example, Node.js marks the `ArrayBuffer`s it uses for its `Buffer pool` with this.\n     *\n     * This operation cannot be undone.\n     *\n     * ```js\n     * import { MessageChannel, markAsUntransferable } from \'node:worker_threads\';\n     *\n     * const pooledBuffer = new ArrayBuffer(8);\n     * const typedArray1 = new Uint8Array(pooledBuffer);\n     * const typedArray2 = new Float64Array(pooledBuffer);\n     *\n     * markAsUntransferable(pooledBuffer);\n     *\n     * const { port1 } = new MessageChannel();\n     * port1.postMessage(typedArray1, [ typedArray1.buffer ]);\n     *\n     * // The following line prints the contents of typedArray1 -- it still owns\n     * // its memory and has been cloned, not transferred. Without\n     * // `markAsUntransferable()`, this would print an empty Uint8Array.\n     * // typedArray2 is intact as well.\n     * console.log(typedArray1);\n     * console.log(typedArray2);\n     * ```\n     *\n     * There is no equivalent to this API in browsers.\n     * @since v14.5.0, v12.19.0\n     */\n    function markAsUntransferable(object: object): void;\n    /**\n     * Check if an object is marked as not transferable with\n     * {@link markAsUntransferable}.\n     * @since v21.0.0\n     */\n    function isMarkedAsUntransferable(object: object): boolean;\n    /**\n     * Mark an object as not cloneable. If `object` is used as `message` in\n     * a `port.postMessage()` call, an error is thrown. This is a no-op if `object` is a\n     * primitive value.\n     *\n     * This has no effect on `ArrayBuffer`, or any `Buffer` like objects.\n     *\n     * This operation cannot be undone.\n     *\n     * ```js\n     * const { markAsUncloneable } = require(\'node:worker_threads\');\n     *\n     * const anyObject = { foo: \'bar\' };\n     * markAsUncloneable(anyObject);\n     * const { port1 } = new MessageChannel();\n     * try {\n     *   // This will throw an error, because anyObject is not cloneable.\n     *   port1.postMessage(anyObject)\n     * } catch (error) {\n     *   // error.name === \'DataCloneError\'\n     * }\n     * ```\n     *\n     * There is no equivalent to this API in browsers.\n     * @since v22.10.0\n     */\n    function markAsUncloneable(object: object): void;\n    /**\n     * Transfer a `MessagePort` to a different `vm` Context. The original `port` object is rendered unusable, and the returned `MessagePort` instance\n     * takes its place.\n     *\n     * The returned `MessagePort` is an object in the target context and\n     * inherits from its global `Object` class. Objects passed to the [`port.onmessage()`](https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessage) listener are also created in the\n     * target context\n     * and inherit from its global `Object` class.\n     *\n     * However, the created `MessagePort` no longer inherits from [`EventTarget`](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget), and only\n     * [`port.onmessage()`](https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessage) can be used to receive\n     * events using it.\n     * @since v11.13.0\n     * @param port The message port to transfer.\n     * @param contextifiedSandbox A `contextified` object as returned by the `vm.createContext()` method.\n     */\n    function moveMessagePortToContext(port: MessagePort, contextifiedSandbox: Context): MessagePort;\n    /**\n     * Receive a single message from a given `MessagePort`. If no message is available,`undefined` is returned, otherwise an object with a single `message` property\n     * that contains the message payload, corresponding to the oldest message in the `MessagePort`\'s queue.\n     *\n     * ```js\n     * import { MessageChannel, receiveMessageOnPort } from \'node:worker_threads\';\n     * const { port1, port2 } = new MessageChannel();\n     * port1.postMessage({ hello: \'world\' });\n     *\n     * console.log(receiveMessageOnPort(port2));\n     * // Prints: { message: { hello: \'world\' } }\n     * console.log(receiveMessageOnPort(port2));\n     * // Prints: undefined\n     * ```\n     *\n     * When this function is used, no `\'message\'` event is emitted and the `onmessage` listener is not invoked.\n     * @since v12.3.0\n     */\n    function receiveMessageOnPort(port: MessagePort):\n        | {\n            message: any;\n        }\n        | undefined;\n    type Serializable = string | object | number | boolean | bigint;\n    /**\n     * Within a worker thread, `worker.getEnvironmentData()` returns a clone\n     * of data passed to the spawning thread\'s `worker.setEnvironmentData()`.\n     * Every new `Worker` receives its own copy of the environment data\n     * automatically.\n     *\n     * ```js\n     * import {\n     *   Worker,\n     *   isMainThread,\n     *   setEnvironmentData,\n     *   getEnvironmentData,\n     * } from \'node:worker_threads\';\n     *\n     * if (isMainThread) {\n     *   setEnvironmentData(\'Hello\', \'World!\');\n     *   const worker = new Worker(__filename);\n     * } else {\n     *   console.log(getEnvironmentData(\'Hello\'));  // Prints \'World!\'.\n     * }\n     * ```\n     * @since v15.12.0, v14.18.0\n     * @param key Any arbitrary, cloneable JavaScript value that can be used as a {Map} key.\n     */\n    function getEnvironmentData(key: Serializable): Serializable;\n    /**\n     * The `worker.setEnvironmentData()` API sets the content of `worker.getEnvironmentData()` in the current thread and all new `Worker` instances spawned from the current context.\n     * @since v15.12.0, v14.18.0\n     * @param key Any arbitrary, cloneable JavaScript value that can be used as a {Map} key.\n     * @param value Any arbitrary, cloneable JavaScript value that will be cloned and passed automatically to all new `Worker` instances. If `value` is passed as `undefined`, any previously set value\n     * for the `key` will be deleted.\n     */\n    function setEnvironmentData(key: Serializable, value?: Serializable): void;\n\n    import {\n        BroadcastChannel as _BroadcastChannel,\n        MessageChannel as _MessageChannel,\n        MessagePort as _MessagePort,\n    } from "worker_threads";\n    global {\n        function structuredClone<T>(\n            value: T,\n            options?: { transfer?: Transferable[] },\n        ): T;\n        /**\n         * `BroadcastChannel` class is a global reference for `import { BroadcastChannel } from \'worker_threads\'`\n         * https://nodejs.org/api/globals.html#broadcastchannel\n         * @since v18.0.0\n         */\n        var BroadcastChannel: typeof globalThis extends {\n            onmessage: any;\n            BroadcastChannel: infer T;\n        } ? T\n            : typeof _BroadcastChannel;\n        /**\n         * `MessageChannel` class is a global reference for `import { MessageChannel } from \'worker_threads\'`\n         * https://nodejs.org/api/globals.html#messagechannel\n         * @since v15.0.0\n         */\n        var MessageChannel: typeof globalThis extends {\n            onmessage: any;\n            MessageChannel: infer T;\n        } ? T\n            : typeof _MessageChannel;\n        /**\n         * `MessagePort` class is a global reference for `import { MessagePort } from \'worker_threads\'`\n         * https://nodejs.org/api/globals.html#messageport\n         * @since v15.0.0\n         */\n        var MessagePort: typeof globalThis extends {\n            onmessage: any;\n            MessagePort: infer T;\n        } ? T\n            : typeof _MessagePort;\n    }\n}\ndeclare module "node:worker_threads" {\n    export * from "worker_threads";\n}\n',
  '@types/node/zlib.d.ts':
    "/**\n * The `node:zlib` module provides compression functionality implemented using\n * Gzip, Deflate/Inflate, and Brotli.\n *\n * To access it:\n *\n * ```js\n * import zlib from 'node:zlib';\n * ```\n *\n * Compression and decompression are built around the Node.js\n * [Streams API](https://nodejs.org/docs/latest-v22.x/api/stream.html).\n *\n * Compressing or decompressing a stream (such as a file) can be accomplished by\n * piping the source stream through a `zlib` `Transform` stream into a destination\n * stream:\n *\n * ```js\n * import { createGzip } from 'node:zlib';\n * import { pipeline } from 'node:stream';\n * import {\n *   createReadStream,\n *   createWriteStream,\n * } from 'node:fs';\n *\n * const gzip = createGzip();\n * const source = createReadStream('input.txt');\n * const destination = createWriteStream('input.txt.gz');\n *\n * pipeline(source, gzip, destination, (err) => {\n *   if (err) {\n *     console.error('An error occurred:', err);\n *     process.exitCode = 1;\n *   }\n * });\n *\n * // Or, Promisified\n *\n * import { promisify } from 'node:util';\n * const pipe = promisify(pipeline);\n *\n * async function do_gzip(input, output) {\n *   const gzip = createGzip();\n *   const source = createReadStream(input);\n *   const destination = createWriteStream(output);\n *   await pipe(source, gzip, destination);\n * }\n *\n * do_gzip('input.txt', 'input.txt.gz')\n *   .catch((err) => {\n *     console.error('An error occurred:', err);\n *     process.exitCode = 1;\n *   });\n * ```\n *\n * It is also possible to compress or decompress data in a single step:\n *\n * ```js\n * import { deflate, unzip } from 'node:zlib';\n *\n * const input = '.................................';\n * deflate(input, (err, buffer) => {\n *   if (err) {\n *     console.error('An error occurred:', err);\n *     process.exitCode = 1;\n *   }\n *   console.log(buffer.toString('base64'));\n * });\n *\n * const buffer = Buffer.from('eJzT0yMAAGTvBe8=', 'base64');\n * unzip(buffer, (err, buffer) => {\n *   if (err) {\n *     console.error('An error occurred:', err);\n *     process.exitCode = 1;\n *   }\n *   console.log(buffer.toString());\n * });\n *\n * // Or, Promisified\n *\n * import { promisify } from 'node:util';\n * const do_unzip = promisify(unzip);\n *\n * do_unzip(buffer)\n *   .then((buf) => console.log(buf.toString()))\n *   .catch((err) => {\n *     console.error('An error occurred:', err);\n *     process.exitCode = 1;\n *   });\n * ```\n * @since v0.5.8\n * @see [source](https://github.com/nodejs/node/blob/v22.x/lib/zlib.js)\n */\ndeclare module \"zlib\" {\n    import * as stream from \"node:stream\";\n    interface ZlibOptions {\n        /**\n         * @default constants.Z_NO_FLUSH\n         */\n        flush?: number | undefined;\n        /**\n         * @default constants.Z_FINISH\n         */\n        finishFlush?: number | undefined;\n        /**\n         * @default 16*1024\n         */\n        chunkSize?: number | undefined;\n        windowBits?: number | undefined;\n        level?: number | undefined; // compression only\n        memLevel?: number | undefined; // compression only\n        strategy?: number | undefined; // compression only\n        dictionary?: NodeJS.ArrayBufferView | ArrayBuffer | undefined; // deflate/inflate only, empty dictionary by default\n        /**\n         * If `true`, returns an object with `buffer` and `engine`.\n         */\n        info?: boolean | undefined;\n        /**\n         * Limits output size when using convenience methods.\n         * @default buffer.kMaxLength\n         */\n        maxOutputLength?: number | undefined;\n    }\n    interface BrotliOptions {\n        /**\n         * @default constants.BROTLI_OPERATION_PROCESS\n         */\n        flush?: number | undefined;\n        /**\n         * @default constants.BROTLI_OPERATION_FINISH\n         */\n        finishFlush?: number | undefined;\n        /**\n         * @default 16*1024\n         */\n        chunkSize?: number | undefined;\n        params?:\n            | {\n                /**\n                 * Each key is a `constants.BROTLI_*` constant.\n                 */\n                [key: number]: boolean | number;\n            }\n            | undefined;\n        /**\n         * Limits output size when using [convenience methods](https://nodejs.org/docs/latest-v22.x/api/zlib.html#convenience-methods).\n         * @default buffer.kMaxLength\n         */\n        maxOutputLength?: number | undefined;\n    }\n    interface ZstdOptions {\n        /**\n         * @default constants.ZSTD_e_continue\n         */\n        flush?: number | undefined;\n        /**\n         * @default constants.ZSTD_e_end\n         */\n        finishFlush?: number | undefined;\n        /**\n         * @default 16 * 1024\n         */\n        chunkSize?: number | undefined;\n        /**\n         * Key-value object containing indexed\n         * [Zstd parameters](https://nodejs.org/docs/latest-v22.x/api/zlib.html#zstd-constants).\n         */\n        params?: { [key: number]: number | boolean } | undefined;\n        /**\n         * Limits output size when using\n         * [convenience methods](https://nodejs.org/docs/latest-v22.x/api/zlib.html#convenience-methods).\n         * @default buffer.kMaxLength\n         */\n        maxOutputLength?: number | undefined;\n    }\n    interface Zlib {\n        /** @deprecated Use bytesWritten instead. */\n        readonly bytesRead: number;\n        readonly bytesWritten: number;\n        shell?: boolean | string | undefined;\n        close(callback?: () => void): void;\n        flush(kind?: number, callback?: () => void): void;\n        flush(callback?: () => void): void;\n    }\n    interface ZlibParams {\n        params(level: number, strategy: number, callback: () => void): void;\n    }\n    interface ZlibReset {\n        reset(): void;\n    }\n    interface BrotliCompress extends stream.Transform, Zlib {}\n    interface BrotliDecompress extends stream.Transform, Zlib {}\n    interface Gzip extends stream.Transform, Zlib {}\n    interface Gunzip extends stream.Transform, Zlib {}\n    interface Deflate extends stream.Transform, Zlib, ZlibReset, ZlibParams {}\n    interface Inflate extends stream.Transform, Zlib, ZlibReset {}\n    interface DeflateRaw extends stream.Transform, Zlib, ZlibReset, ZlibParams {}\n    interface InflateRaw extends stream.Transform, Zlib, ZlibReset {}\n    interface Unzip extends stream.Transform, Zlib {}\n    /**\n     * @since v22.15.0\n     * @experimental\n     */\n    interface ZstdCompress extends stream.Transform, Zlib {}\n    /**\n     * @since v22.15.0\n     * @experimental\n     */\n    interface ZstdDecompress extends stream.Transform, Zlib {}\n    /**\n     * Computes a 32-bit [Cyclic Redundancy Check](https://en.wikipedia.org/wiki/Cyclic_redundancy_check) checksum of `data`.\n     * If `value` is specified, it is used as the starting value of the checksum, otherwise, 0 is used as the starting value.\n     * @param data When `data` is a string, it will be encoded as UTF-8 before being used for computation.\n     * @param value An optional starting value. It must be a 32-bit unsigned integer. @default 0\n     * @returns A 32-bit unsigned integer containing the checksum.\n     * @since v22.2.0\n     */\n    function crc32(data: string | Buffer | NodeJS.ArrayBufferView, value?: number): number;\n    /**\n     * Creates and returns a new `BrotliCompress` object.\n     * @since v11.7.0, v10.16.0\n     */\n    function createBrotliCompress(options?: BrotliOptions): BrotliCompress;\n    /**\n     * Creates and returns a new `BrotliDecompress` object.\n     * @since v11.7.0, v10.16.0\n     */\n    function createBrotliDecompress(options?: BrotliOptions): BrotliDecompress;\n    /**\n     * Creates and returns a new `Gzip` object.\n     * See `example`.\n     * @since v0.5.8\n     */\n    function createGzip(options?: ZlibOptions): Gzip;\n    /**\n     * Creates and returns a new `Gunzip` object.\n     * @since v0.5.8\n     */\n    function createGunzip(options?: ZlibOptions): Gunzip;\n    /**\n     * Creates and returns a new `Deflate` object.\n     * @since v0.5.8\n     */\n    function createDeflate(options?: ZlibOptions): Deflate;\n    /**\n     * Creates and returns a new `Inflate` object.\n     * @since v0.5.8\n     */\n    function createInflate(options?: ZlibOptions): Inflate;\n    /**\n     * Creates and returns a new `DeflateRaw` object.\n     *\n     * An upgrade of zlib from 1.2.8 to 1.2.11 changed behavior when `windowBits` is set to 8 for raw deflate streams. zlib would automatically set `windowBits` to 9 if was initially set to 8. Newer\n     * versions of zlib will throw an exception,\n     * so Node.js restored the original behavior of upgrading a value of 8 to 9,\n     * since passing `windowBits = 9` to zlib actually results in a compressed stream\n     * that effectively uses an 8-bit window only.\n     * @since v0.5.8\n     */\n    function createDeflateRaw(options?: ZlibOptions): DeflateRaw;\n    /**\n     * Creates and returns a new `InflateRaw` object.\n     * @since v0.5.8\n     */\n    function createInflateRaw(options?: ZlibOptions): InflateRaw;\n    /**\n     * Creates and returns a new `Unzip` object.\n     * @since v0.5.8\n     */\n    function createUnzip(options?: ZlibOptions): Unzip;\n    /**\n     * Creates and returns a new `ZstdCompress` object.\n     * @since v22.15.0\n     */\n    function createZstdCompress(options?: ZstdOptions): ZstdCompress;\n    /**\n     * Creates and returns a new `ZstdDecompress` object.\n     * @since v22.15.0\n     */\n    function createZstdDecompress(options?: ZstdOptions): ZstdDecompress;\n    type InputType = string | ArrayBuffer | NodeJS.ArrayBufferView;\n    type CompressCallback = (error: Error | null, result: Buffer) => void;\n    /**\n     * @since v11.7.0, v10.16.0\n     */\n    function brotliCompress(buf: InputType, options: BrotliOptions, callback: CompressCallback): void;\n    function brotliCompress(buf: InputType, callback: CompressCallback): void;\n    namespace brotliCompress {\n        function __promisify__(buffer: InputType, options?: BrotliOptions): Promise<Buffer>;\n    }\n    /**\n     * Compress a chunk of data with `BrotliCompress`.\n     * @since v11.7.0, v10.16.0\n     */\n    function brotliCompressSync(buf: InputType, options?: BrotliOptions): Buffer;\n    /**\n     * @since v11.7.0, v10.16.0\n     */\n    function brotliDecompress(buf: InputType, options: BrotliOptions, callback: CompressCallback): void;\n    function brotliDecompress(buf: InputType, callback: CompressCallback): void;\n    namespace brotliDecompress {\n        function __promisify__(buffer: InputType, options?: BrotliOptions): Promise<Buffer>;\n    }\n    /**\n     * Decompress a chunk of data with `BrotliDecompress`.\n     * @since v11.7.0, v10.16.0\n     */\n    function brotliDecompressSync(buf: InputType, options?: BrotliOptions): Buffer;\n    /**\n     * @since v0.6.0\n     */\n    function deflate(buf: InputType, callback: CompressCallback): void;\n    function deflate(buf: InputType, options: ZlibOptions, callback: CompressCallback): void;\n    namespace deflate {\n        function __promisify__(buffer: InputType, options?: ZlibOptions): Promise<Buffer>;\n    }\n    /**\n     * Compress a chunk of data with `Deflate`.\n     * @since v0.11.12\n     */\n    function deflateSync(buf: InputType, options?: ZlibOptions): Buffer;\n    /**\n     * @since v0.6.0\n     */\n    function deflateRaw(buf: InputType, callback: CompressCallback): void;\n    function deflateRaw(buf: InputType, options: ZlibOptions, callback: CompressCallback): void;\n    namespace deflateRaw {\n        function __promisify__(buffer: InputType, options?: ZlibOptions): Promise<Buffer>;\n    }\n    /**\n     * Compress a chunk of data with `DeflateRaw`.\n     * @since v0.11.12\n     */\n    function deflateRawSync(buf: InputType, options?: ZlibOptions): Buffer;\n    /**\n     * @since v0.6.0\n     */\n    function gzip(buf: InputType, callback: CompressCallback): void;\n    function gzip(buf: InputType, options: ZlibOptions, callback: CompressCallback): void;\n    namespace gzip {\n        function __promisify__(buffer: InputType, options?: ZlibOptions): Promise<Buffer>;\n    }\n    /**\n     * Compress a chunk of data with `Gzip`.\n     * @since v0.11.12\n     */\n    function gzipSync(buf: InputType, options?: ZlibOptions): Buffer;\n    /**\n     * @since v0.6.0\n     */\n    function gunzip(buf: InputType, callback: CompressCallback): void;\n    function gunzip(buf: InputType, options: ZlibOptions, callback: CompressCallback): void;\n    namespace gunzip {\n        function __promisify__(buffer: InputType, options?: ZlibOptions): Promise<Buffer>;\n    }\n    /**\n     * Decompress a chunk of data with `Gunzip`.\n     * @since v0.11.12\n     */\n    function gunzipSync(buf: InputType, options?: ZlibOptions): Buffer;\n    /**\n     * @since v0.6.0\n     */\n    function inflate(buf: InputType, callback: CompressCallback): void;\n    function inflate(buf: InputType, options: ZlibOptions, callback: CompressCallback): void;\n    namespace inflate {\n        function __promisify__(buffer: InputType, options?: ZlibOptions): Promise<Buffer>;\n    }\n    /**\n     * Decompress a chunk of data with `Inflate`.\n     * @since v0.11.12\n     */\n    function inflateSync(buf: InputType, options?: ZlibOptions): Buffer;\n    /**\n     * @since v0.6.0\n     */\n    function inflateRaw(buf: InputType, callback: CompressCallback): void;\n    function inflateRaw(buf: InputType, options: ZlibOptions, callback: CompressCallback): void;\n    namespace inflateRaw {\n        function __promisify__(buffer: InputType, options?: ZlibOptions): Promise<Buffer>;\n    }\n    /**\n     * Decompress a chunk of data with `InflateRaw`.\n     * @since v0.11.12\n     */\n    function inflateRawSync(buf: InputType, options?: ZlibOptions): Buffer;\n    /**\n     * @since v0.6.0\n     */\n    function unzip(buf: InputType, callback: CompressCallback): void;\n    function unzip(buf: InputType, options: ZlibOptions, callback: CompressCallback): void;\n    namespace unzip {\n        function __promisify__(buffer: InputType, options?: ZlibOptions): Promise<Buffer>;\n    }\n    /**\n     * Decompress a chunk of data with `Unzip`.\n     * @since v0.11.12\n     */\n    function unzipSync(buf: InputType, options?: ZlibOptions): Buffer;\n    /**\n     * @since v22.15.0\n     * @experimental\n     */\n    function zstdCompress(buf: InputType, callback: CompressCallback): void;\n    function zstdCompress(buf: InputType, options: ZstdOptions, callback: CompressCallback): void;\n    namespace zstdCompress {\n        function __promisify__(buffer: InputType, options?: ZstdOptions): Promise<Buffer>;\n    }\n    /**\n     * Compress a chunk of data with `ZstdCompress`.\n     * @since v22.15.0\n     * @experimental\n     */\n    function zstdCompressSync(buf: InputType, options?: ZstdOptions): Buffer;\n    /**\n     * @since v22.15.0\n     * @experimental\n     */\n    function zstdDecompress(buf: InputType, callback: CompressCallback): void;\n    function zstdDecompress(buf: InputType, options: ZstdOptions, callback: CompressCallback): void;\n    namespace zstdDecompress {\n        function __promisify__(buffer: InputType, options?: ZstdOptions): Promise<Buffer>;\n    }\n    /**\n     * Decompress a chunk of data with `ZstdDecompress`.\n     * @since v22.15.0\n     * @experimental\n     */\n    function zstdDecompressSync(buf: InputType, options?: ZstdOptions): Buffer;\n    namespace constants {\n        const BROTLI_DECODE: number;\n        const BROTLI_DECODER_ERROR_ALLOC_BLOCK_TYPE_TREES: number;\n        const BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MAP: number;\n        const BROTLI_DECODER_ERROR_ALLOC_CONTEXT_MODES: number;\n        const BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_1: number;\n        const BROTLI_DECODER_ERROR_ALLOC_RING_BUFFER_2: number;\n        const BROTLI_DECODER_ERROR_ALLOC_TREE_GROUPS: number;\n        const BROTLI_DECODER_ERROR_DICTIONARY_NOT_SET: number;\n        const BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_1: number;\n        const BROTLI_DECODER_ERROR_FORMAT_BLOCK_LENGTH_2: number;\n        const BROTLI_DECODER_ERROR_FORMAT_CL_SPACE: number;\n        const BROTLI_DECODER_ERROR_FORMAT_CONTEXT_MAP_REPEAT: number;\n        const BROTLI_DECODER_ERROR_FORMAT_DICTIONARY: number;\n        const BROTLI_DECODER_ERROR_FORMAT_DISTANCE: number;\n        const BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_META_NIBBLE: number;\n        const BROTLI_DECODER_ERROR_FORMAT_EXUBERANT_NIBBLE: number;\n        const BROTLI_DECODER_ERROR_FORMAT_HUFFMAN_SPACE: number;\n        const BROTLI_DECODER_ERROR_FORMAT_PADDING_1: number;\n        const BROTLI_DECODER_ERROR_FORMAT_PADDING_2: number;\n        const BROTLI_DECODER_ERROR_FORMAT_RESERVED: number;\n        const BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_ALPHABET: number;\n        const BROTLI_DECODER_ERROR_FORMAT_SIMPLE_HUFFMAN_SAME: number;\n        const BROTLI_DECODER_ERROR_FORMAT_TRANSFORM: number;\n        const BROTLI_DECODER_ERROR_FORMAT_WINDOW_BITS: number;\n        const BROTLI_DECODER_ERROR_INVALID_ARGUMENTS: number;\n        const BROTLI_DECODER_ERROR_UNREACHABLE: number;\n        const BROTLI_DECODER_NEEDS_MORE_INPUT: number;\n        const BROTLI_DECODER_NEEDS_MORE_OUTPUT: number;\n        const BROTLI_DECODER_NO_ERROR: number;\n        const BROTLI_DECODER_PARAM_DISABLE_RING_BUFFER_REALLOCATION: number;\n        const BROTLI_DECODER_PARAM_LARGE_WINDOW: number;\n        const BROTLI_DECODER_RESULT_ERROR: number;\n        const BROTLI_DECODER_RESULT_NEEDS_MORE_INPUT: number;\n        const BROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT: number;\n        const BROTLI_DECODER_RESULT_SUCCESS: number;\n        const BROTLI_DECODER_SUCCESS: number;\n        const BROTLI_DEFAULT_MODE: number;\n        const BROTLI_DEFAULT_QUALITY: number;\n        const BROTLI_DEFAULT_WINDOW: number;\n        const BROTLI_ENCODE: number;\n        const BROTLI_LARGE_MAX_WINDOW_BITS: number;\n        const BROTLI_MAX_INPUT_BLOCK_BITS: number;\n        const BROTLI_MAX_QUALITY: number;\n        const BROTLI_MAX_WINDOW_BITS: number;\n        const BROTLI_MIN_INPUT_BLOCK_BITS: number;\n        const BROTLI_MIN_QUALITY: number;\n        const BROTLI_MIN_WINDOW_BITS: number;\n        const BROTLI_MODE_FONT: number;\n        const BROTLI_MODE_GENERIC: number;\n        const BROTLI_MODE_TEXT: number;\n        const BROTLI_OPERATION_EMIT_METADATA: number;\n        const BROTLI_OPERATION_FINISH: number;\n        const BROTLI_OPERATION_FLUSH: number;\n        const BROTLI_OPERATION_PROCESS: number;\n        const BROTLI_PARAM_DISABLE_LITERAL_CONTEXT_MODELING: number;\n        const BROTLI_PARAM_LARGE_WINDOW: number;\n        const BROTLI_PARAM_LGBLOCK: number;\n        const BROTLI_PARAM_LGWIN: number;\n        const BROTLI_PARAM_MODE: number;\n        const BROTLI_PARAM_NDIRECT: number;\n        const BROTLI_PARAM_NPOSTFIX: number;\n        const BROTLI_PARAM_QUALITY: number;\n        const BROTLI_PARAM_SIZE_HINT: number;\n        const DEFLATE: number;\n        const DEFLATERAW: number;\n        const GUNZIP: number;\n        const GZIP: number;\n        const INFLATE: number;\n        const INFLATERAW: number;\n        const UNZIP: number;\n        const ZLIB_VERNUM: number;\n        const ZSTD_CLEVEL_DEFAULT: number;\n        const ZSTD_COMPRESS: number;\n        const ZSTD_DECOMPRESS: number;\n        const ZSTD_btlazy2: number;\n        const ZSTD_btopt: number;\n        const ZSTD_btultra: number;\n        const ZSTD_btultra2: number;\n        const ZSTD_c_chainLog: number;\n        const ZSTD_c_checksumFlag: number;\n        const ZSTD_c_compressionLevel: number;\n        const ZSTD_c_contentSizeFlag: number;\n        const ZSTD_c_dictIDFlag: number;\n        const ZSTD_c_enableLongDistanceMatching: number;\n        const ZSTD_c_hashLog: number;\n        const ZSTD_c_jobSize: number;\n        const ZSTD_c_ldmBucketSizeLog: number;\n        const ZSTD_c_ldmHashLog: number;\n        const ZSTD_c_ldmHashRateLog: number;\n        const ZSTD_c_ldmMinMatch: number;\n        const ZSTD_c_minMatch: number;\n        const ZSTD_c_nbWorkers: number;\n        const ZSTD_c_overlapLog: number;\n        const ZSTD_c_searchLog: number;\n        const ZSTD_c_strategy: number;\n        const ZSTD_c_targetLength: number;\n        const ZSTD_c_windowLog: number;\n        const ZSTD_d_windowLogMax: number;\n        const ZSTD_dfast: number;\n        const ZSTD_e_continue: number;\n        const ZSTD_e_end: number;\n        const ZSTD_e_flush: number;\n        const ZSTD_error_GENERIC: number;\n        const ZSTD_error_checksum_wrong: number;\n        const ZSTD_error_corruption_detected: number;\n        const ZSTD_error_dictionaryCreation_failed: number;\n        const ZSTD_error_dictionary_corrupted: number;\n        const ZSTD_error_dictionary_wrong: number;\n        const ZSTD_error_dstBuffer_null: number;\n        const ZSTD_error_dstSize_tooSmall: number;\n        const ZSTD_error_frameParameter_unsupported: number;\n        const ZSTD_error_frameParameter_windowTooLarge: number;\n        const ZSTD_error_init_missing: number;\n        const ZSTD_error_literals_headerWrong: number;\n        const ZSTD_error_maxSymbolValue_tooLarge: number;\n        const ZSTD_error_maxSymbolValue_tooSmall: number;\n        const ZSTD_error_memory_allocation: number;\n        const ZSTD_error_noForwardProgress_destFull: number;\n        const ZSTD_error_noForwardProgress_inputEmpty: number;\n        const ZSTD_error_no_error: number;\n        const ZSTD_error_parameter_combination_unsupported: number;\n        const ZSTD_error_parameter_outOfBound: number;\n        const ZSTD_error_parameter_unsupported: number;\n        const ZSTD_error_prefix_unknown: number;\n        const ZSTD_error_srcSize_wrong: number;\n        const ZSTD_error_stabilityCondition_notRespected: number;\n        const ZSTD_error_stage_wrong: number;\n        const ZSTD_error_tableLog_tooLarge: number;\n        const ZSTD_error_version_unsupported: number;\n        const ZSTD_error_workSpace_tooSmall: number;\n        const ZSTD_fast: number;\n        const ZSTD_greedy: number;\n        const ZSTD_lazy: number;\n        const ZSTD_lazy2: number;\n        const Z_BEST_COMPRESSION: number;\n        const Z_BEST_SPEED: number;\n        const Z_BLOCK: number;\n        const Z_BUF_ERROR: number;\n        const Z_DATA_ERROR: number;\n        const Z_DEFAULT_CHUNK: number;\n        const Z_DEFAULT_COMPRESSION: number;\n        const Z_DEFAULT_LEVEL: number;\n        const Z_DEFAULT_MEMLEVEL: number;\n        const Z_DEFAULT_STRATEGY: number;\n        const Z_DEFAULT_WINDOWBITS: number;\n        const Z_ERRNO: number;\n        const Z_FILTERED: number;\n        const Z_FINISH: number;\n        const Z_FIXED: number;\n        const Z_FULL_FLUSH: number;\n        const Z_HUFFMAN_ONLY: number;\n        const Z_MAX_CHUNK: number;\n        const Z_MAX_LEVEL: number;\n        const Z_MAX_MEMLEVEL: number;\n        const Z_MAX_WINDOWBITS: number;\n        const Z_MEM_ERROR: number;\n        const Z_MIN_CHUNK: number;\n        const Z_MIN_LEVEL: number;\n        const Z_MIN_MEMLEVEL: number;\n        const Z_MIN_WINDOWBITS: number;\n        const Z_NEED_DICT: number;\n        const Z_NO_COMPRESSION: number;\n        const Z_NO_FLUSH: number;\n        const Z_OK: number;\n        const Z_PARTIAL_FLUSH: number;\n        const Z_RLE: number;\n        const Z_STREAM_END: number;\n        const Z_STREAM_ERROR: number;\n        const Z_SYNC_FLUSH: number;\n        const Z_VERSION_ERROR: number;\n    }\n    // Allowed flush values.\n    /** @deprecated Use `constants.Z_NO_FLUSH` */\n    const Z_NO_FLUSH: number;\n    /** @deprecated Use `constants.Z_PARTIAL_FLUSH` */\n    const Z_PARTIAL_FLUSH: number;\n    /** @deprecated Use `constants.Z_SYNC_FLUSH` */\n    const Z_SYNC_FLUSH: number;\n    /** @deprecated Use `constants.Z_FULL_FLUSH` */\n    const Z_FULL_FLUSH: number;\n    /** @deprecated Use `constants.Z_FINISH` */\n    const Z_FINISH: number;\n    /** @deprecated Use `constants.Z_BLOCK` */\n    const Z_BLOCK: number;\n    /** @deprecated Use `constants.Z_TREES` */\n    const Z_TREES: number;\n    // Return codes for the compression/decompression functions.\n    // Negative values are errors, positive values are used for special but normal events.\n    /** @deprecated Use `constants.Z_OK` */\n    const Z_OK: number;\n    /** @deprecated Use `constants.Z_STREAM_END` */\n    const Z_STREAM_END: number;\n    /** @deprecated Use `constants.Z_NEED_DICT` */\n    const Z_NEED_DICT: number;\n    /** @deprecated Use `constants.Z_ERRNO` */\n    const Z_ERRNO: number;\n    /** @deprecated Use `constants.Z_STREAM_ERROR` */\n    const Z_STREAM_ERROR: number;\n    /** @deprecated Use `constants.Z_DATA_ERROR` */\n    const Z_DATA_ERROR: number;\n    /** @deprecated Use `constants.Z_MEM_ERROR` */\n    const Z_MEM_ERROR: number;\n    /** @deprecated Use `constants.Z_BUF_ERROR` */\n    const Z_BUF_ERROR: number;\n    /** @deprecated Use `constants.Z_VERSION_ERROR` */\n    const Z_VERSION_ERROR: number;\n    // Compression levels.\n    /** @deprecated Use `constants.Z_NO_COMPRESSION` */\n    const Z_NO_COMPRESSION: number;\n    /** @deprecated Use `constants.Z_BEST_SPEED` */\n    const Z_BEST_SPEED: number;\n    /** @deprecated Use `constants.Z_BEST_COMPRESSION` */\n    const Z_BEST_COMPRESSION: number;\n    /** @deprecated Use `constants.Z_DEFAULT_COMPRESSION` */\n    const Z_DEFAULT_COMPRESSION: number;\n    // Compression strategy.\n    /** @deprecated Use `constants.Z_FILTERED` */\n    const Z_FILTERED: number;\n    /** @deprecated Use `constants.Z_HUFFMAN_ONLY` */\n    const Z_HUFFMAN_ONLY: number;\n    /** @deprecated Use `constants.Z_RLE` */\n    const Z_RLE: number;\n    /** @deprecated Use `constants.Z_FIXED` */\n    const Z_FIXED: number;\n    /** @deprecated Use `constants.Z_DEFAULT_STRATEGY` */\n    const Z_DEFAULT_STRATEGY: number;\n    /** @deprecated */\n    const Z_BINARY: number;\n    /** @deprecated */\n    const Z_TEXT: number;\n    /** @deprecated */\n    const Z_ASCII: number;\n    /** @deprecated  */\n    const Z_UNKNOWN: number;\n    /** @deprecated */\n    const Z_DEFLATED: number;\n}\ndeclare module \"node:zlib\" {\n    export * from \"zlib\";\n}\n",
  'assert/package.json':
    '{\n  "name": "assert",\n  "description": "The node.js assert module, re-packaged for web browsers.",\n  "version": "1.5.0",\n  "dependencies": {\n    "object-assign": "^4.1.1",\n    "util": "0.10.3"\n  },\n  "devDependencies": {\n    "mocha": "~1.21.4",\n    "zuul": "~3.10.0",\n    "zuul-ngrok": "^4.0.0"\n  },\n  "homepage": "https://github.com/browserify/commonjs-assert",\n  "keywords": [\n    "assert",\n    "browser"\n  ],\n  "license": "MIT",\n  "main": "./assert.js",\n  "repository": {\n    "type": "git",\n    "url": "git://github.com/browserify/commonjs-assert.git"\n  },\n  "scripts": {\n    "browser-local": "zuul --no-coverage --local 8000 -- test.js",\n    "test": "npm run test-node && npm run test-browser",\n    "test-browser": "zuul -- test.js",\n    "test-native": "TEST_NATIVE=true mocha --ui qunit test.js",\n    "test-node": "mocha --ui qunit test.js"\n  }\n}\n',
  'assert/assert.js': true,
  'buffer/package.json':
    '{\n  "name": "buffer",\n  "description": "Node.js Buffer API, for the browser",\n  "version": "5.7.1",\n  "author": {\n    "name": "Feross Aboukhadijeh",\n    "email": "feross@feross.org",\n    "url": "https://feross.org"\n  },\n  "bugs": {\n    "url": "https://github.com/feross/buffer/issues"\n  },\n  "contributors": [\n    "Romain Beauxis <toots@rastageeks.org>",\n    "James Halliday <mail@substack.net>"\n  ],\n  "dependencies": {\n    "base64-js": "^1.3.1",\n    "ieee754": "^1.1.13"\n  },\n  "devDependencies": {\n    "airtap": "^3.0.0",\n    "benchmark": "^2.1.4",\n    "browserify": "^17.0.0",\n    "concat-stream": "^2.0.0",\n    "hyperquest": "^2.1.3",\n    "is-buffer": "^2.0.4",\n    "is-nan": "^1.3.0",\n    "split": "^1.0.1",\n    "standard": "*",\n    "tape": "^5.0.1",\n    "through2": "^4.0.2",\n    "uglify-js": "^3.11.3"\n  },\n  "homepage": "https://github.com/feross/buffer",\n  "jspm": {\n    "map": {\n      "./index.js": {\n        "node": "@node/buffer"\n      }\n    }\n  },\n  "keywords": [\n    "arraybuffer",\n    "browser",\n    "browserify",\n    "buffer",\n    "compatible",\n    "dataview",\n    "uint8array"\n  ],\n  "license": "MIT",\n  "main": "index.js",\n  "types": "index.d.ts",\n  "repository": {\n    "type": "git",\n    "url": "git://github.com/feross/buffer.git"\n  },\n  "scripts": {\n    "perf": "browserify --debug perf/bracket-notation.js > perf/bundle.js && open perf/index.html",\n    "perf-node": "node perf/bracket-notation.js && node perf/concat.js && node perf/copy-big.js && node perf/copy.js && node perf/new-big.js && node perf/new.js && node perf/readDoubleBE.js && node perf/readFloatBE.js && node perf/readUInt32LE.js && node perf/slice.js && node perf/writeFloatBE.js",\n    "size": "browserify -r ./ | uglifyjs -c -m | gzip | wc -c",\n    "test": "standard && node ./bin/test.js",\n    "test-browser-es5": "airtap -- test/*.js",\n    "test-browser-es5-local": "airtap --local -- test/*.js",\n    "test-browser-es6": "airtap -- test/*.js test/node/*.js",\n    "test-browser-es6-local": "airtap --local -- test/*.js test/node/*.js",\n    "test-node": "tape test/*.js test/node/*.js",\n    "update-authors": "./bin/update-authors.sh"\n  },\n  "standard": {\n    "ignore": [\n      "test/node/**/*.js",\n      "test/common.js",\n      "test/_polyfill.js",\n      "perf/**/*.js"\n    ],\n    "globals": [\n      "SharedArrayBuffer"\n    ]\n  },\n  "funding": [\n    {\n      "type": "github",\n      "url": "https://github.com/sponsors/feross"\n    },\n    {\n      "type": "patreon",\n      "url": "https://www.patreon.com/feross"\n    },\n    {\n      "type": "consulting",\n      "url": "https://feross.org/support"\n    }\n  ]\n}\n',
  'buffer/index.d.ts':
    "export class Buffer extends Uint8Array {\n    length: number\n    write(string: string, offset?: number, length?: number, encoding?: string): number;\n    toString(encoding?: string, start?: number, end?: number): string;\n    toJSON(): { type: 'Buffer', data: any[] };\n    equals(otherBuffer: Buffer): boolean;\n    compare(otherBuffer: Buffer, targetStart?: number, targetEnd?: number, sourceStart?: number, sourceEnd?: number): number;\n    copy(targetBuffer: Buffer, targetStart?: number, sourceStart?: number, sourceEnd?: number): number;\n    slice(start?: number, end?: number): Buffer;\n    writeUIntLE(value: number, offset: number, byteLength: number, noAssert?: boolean): number;\n    writeUIntBE(value: number, offset: number, byteLength: number, noAssert?: boolean): number;\n    writeIntLE(value: number, offset: number, byteLength: number, noAssert?: boolean): number;\n    writeIntBE(value: number, offset: number, byteLength: number, noAssert?: boolean): number;\n    readUIntLE(offset: number, byteLength: number, noAssert?: boolean): number;\n    readUIntBE(offset: number, byteLength: number, noAssert?: boolean): number;\n    readIntLE(offset: number, byteLength: number, noAssert?: boolean): number;\n    readIntBE(offset: number, byteLength: number, noAssert?: boolean): number;\n    readUInt8(offset: number, noAssert?: boolean): number;\n    readUInt16LE(offset: number, noAssert?: boolean): number;\n    readUInt16BE(offset: number, noAssert?: boolean): number;\n    readUInt32LE(offset: number, noAssert?: boolean): number;\n    readUInt32BE(offset: number, noAssert?: boolean): number;\n    readInt8(offset: number, noAssert?: boolean): number;\n    readInt16LE(offset: number, noAssert?: boolean): number;\n    readInt16BE(offset: number, noAssert?: boolean): number;\n    readInt32LE(offset: number, noAssert?: boolean): number;\n    readInt32BE(offset: number, noAssert?: boolean): number;\n    readFloatLE(offset: number, noAssert?: boolean): number;\n    readFloatBE(offset: number, noAssert?: boolean): number;\n    readDoubleLE(offset: number, noAssert?: boolean): number;\n    readDoubleBE(offset: number, noAssert?: boolean): number;\n    reverse(): this;\n    swap16(): Buffer;\n    swap32(): Buffer;\n    swap64(): Buffer;\n    writeUInt8(value: number, offset: number, noAssert?: boolean): number;\n    writeUInt16LE(value: number, offset: number, noAssert?: boolean): number;\n    writeUInt16BE(value: number, offset: number, noAssert?: boolean): number;\n    writeUInt32LE(value: number, offset: number, noAssert?: boolean): number;\n    writeUInt32BE(value: number, offset: number, noAssert?: boolean): number;\n    writeInt8(value: number, offset: number, noAssert?: boolean): number;\n    writeInt16LE(value: number, offset: number, noAssert?: boolean): number;\n    writeInt16BE(value: number, offset: number, noAssert?: boolean): number;\n    writeInt32LE(value: number, offset: number, noAssert?: boolean): number;\n    writeInt32BE(value: number, offset: number, noAssert?: boolean): number;\n    writeFloatLE(value: number, offset: number, noAssert?: boolean): number;\n    writeFloatBE(value: number, offset: number, noAssert?: boolean): number;\n    writeDoubleLE(value: number, offset: number, noAssert?: boolean): number;\n    writeDoubleBE(value: number, offset: number, noAssert?: boolean): number;\n    fill(value: any, offset?: number, end?: number): this;\n    indexOf(value: string | number | Buffer, byteOffset?: number, encoding?: string): number;\n    lastIndexOf(value: string | number | Buffer, byteOffset?: number, encoding?: string): number;\n    includes(value: string | number | Buffer, byteOffset?: number, encoding?: string): boolean;\n\n    /**\n     * Allocates a new buffer containing the given {str}.\n     *\n     * @param str String to store in buffer.\n     * @param encoding encoding to use, optional.  Default is 'utf8'\n     */\n    constructor (str: string, encoding?: string);\n    /**\n     * Allocates a new buffer of {size} octets.\n     *\n     * @param size count of octets to allocate.\n     */\n    constructor (size: number);\n    /**\n     * Allocates a new buffer containing the given {array} of octets.\n     *\n     * @param array The octets to store.\n     */\n    constructor (array: Uint8Array);\n    /**\n     * Produces a Buffer backed by the same allocated memory as\n     * the given {ArrayBuffer}.\n     *\n     *\n     * @param arrayBuffer The ArrayBuffer with which to share memory.\n     */\n    constructor (arrayBuffer: ArrayBuffer);\n    /**\n     * Allocates a new buffer containing the given {array} of octets.\n     *\n     * @param array The octets to store.\n     */\n    constructor (array: any[]);\n    /**\n     * Copies the passed {buffer} data onto a new {Buffer} instance.\n     *\n     * @param buffer The buffer to copy.\n     */\n    constructor (buffer: Buffer);\n    prototype: Buffer;\n    /**\n     * Allocates a new Buffer using an {array} of octets.\n     *\n     * @param array\n     */\n    static from(array: any[]): Buffer;\n    /**\n     * When passed a reference to the .buffer property of a TypedArray instance,\n     * the newly created Buffer will share the same allocated memory as the TypedArray.\n     * The optional {byteOffset} and {length} arguments specify a memory range\n     * within the {arrayBuffer} that will be shared by the Buffer.\n     *\n     * @param arrayBuffer The .buffer property of a TypedArray or a new ArrayBuffer()\n     * @param byteOffset\n     * @param length\n     */\n    static from(arrayBuffer: ArrayBuffer, byteOffset?: number, length?: number): Buffer;\n    /**\n     * Copies the passed {buffer} data onto a new Buffer instance.\n     *\n     * @param buffer\n     */\n    static from(buffer: Buffer | Uint8Array): Buffer;\n    /**\n     * Creates a new Buffer containing the given JavaScript string {str}.\n     * If provided, the {encoding} parameter identifies the character encoding.\n     * If not provided, {encoding} defaults to 'utf8'.\n     *\n     * @param str\n     */\n    static from(str: string, encoding?: string): Buffer;\n    /**\n     * Returns true if {obj} is a Buffer\n     *\n     * @param obj object to test.\n     */\n    static isBuffer(obj: any): obj is Buffer;\n    /**\n     * Returns true if {encoding} is a valid encoding argument.\n     * Valid string encodings in Node 0.12: 'ascii'|'utf8'|'utf16le'|'ucs2'(alias of 'utf16le')|'base64'|'binary'(deprecated)|'hex'\n     *\n     * @param encoding string to test.\n     */\n    static isEncoding(encoding: string): boolean;\n    /**\n     * Gives the actual byte length of a string. encoding defaults to 'utf8'.\n     * This is not the same as String.prototype.length since that returns the number of characters in a string.\n     *\n     * @param string string to test.\n     * @param encoding encoding used to evaluate (defaults to 'utf8')\n     */\n    static byteLength(string: string, encoding?: string): number;\n    /**\n     * Returns a buffer which is the result of concatenating all the buffers in the list together.\n     *\n     * If the list has no items, or if the totalLength is 0, then it returns a zero-length buffer.\n     * If the list has exactly one item, then the first item of the list is returned.\n     * If the list has more than one item, then a new Buffer is created.\n     *\n     * @param list An array of Buffer objects to concatenate\n     * @param totalLength Total length of the buffers when concatenated.\n     *   If totalLength is not provided, it is read from the buffers in the list. However, this adds an additional loop to the function, so it is faster to provide the length explicitly.\n     */\n    static concat(list: Buffer[], totalLength?: number): Buffer;\n    /**\n     * The same as buf1.compare(buf2).\n     */\n    static compare(buf1: Buffer, buf2: Buffer): number;\n    /**\n     * Allocates a new buffer of {size} octets.\n     *\n     * @param size count of octets to allocate.\n     * @param fill if specified, buffer will be initialized by calling buf.fill(fill).\n     *    If parameter is omitted, buffer will be filled with zeros.\n     * @param encoding encoding used for call to buf.fill while initializing\n     */\n    static alloc(size: number, fill?: string | Buffer | number, encoding?: string): Buffer;\n    /**\n     * Allocates a new buffer of {size} octets, leaving memory not initialized, so the contents\n     * of the newly created Buffer are unknown and may contain sensitive data.\n     *\n     * @param size count of octets to allocate\n     */\n    static allocUnsafe(size: number): Buffer;\n    /**\n     * Allocates a new non-pooled buffer of {size} octets, leaving memory not initialized, so the contents\n     * of the newly created Buffer are unknown and may contain sensitive data.\n     *\n     * @param size count of octets to allocate\n     */\n    static allocUnsafeSlow(size: number): Buffer;\n}\n",
  'events/package.json':
    '{\n  "name": "events",\n  "version": "3.3.0",\n  "description": "Node\'s event emitter for all engines.",\n  "keywords": [\n    "events",\n    "eventEmitter",\n    "eventDispatcher",\n    "listeners"\n  ],\n  "author": "Irakli Gozalishvili <rfobic@gmail.com> (http://jeditoolkit.com)",\n  "repository": {\n    "type": "git",\n    "url": "git://github.com/Gozala/events.git",\n    "web": "https://github.com/Gozala/events"\n  },\n  "bugs": {\n    "url": "http://github.com/Gozala/events/issues/"\n  },\n  "main": "./events.js",\n  "engines": {\n    "node": ">=0.8.x"\n  },\n  "devDependencies": {\n    "airtap": "^1.0.0",\n    "functions-have-names": "^1.2.1",\n    "has": "^1.0.3",\n    "has-symbols": "^1.0.1",\n    "isarray": "^2.0.5",\n    "tape": "^5.0.0"\n  },\n  "scripts": {\n    "test": "node tests/index.js",\n    "test:browsers": "airtap -- tests/index.js"\n  },\n  "license": "MIT"\n}\n',
  'punycode/package.json':
    '{\n  "name": "punycode",\n  "version": "2.3.1",\n  "description": "A robust Punycode converter that fully complies to RFC 3492 and RFC 5891, and works on nearly all JavaScript platforms.",\n  "homepage": "https://mths.be/punycode",\n  "main": "punycode.js",\n  "jsnext:main": "punycode.es6.js",\n  "module": "punycode.es6.js",\n  "engines": {\n    "node": ">=6"\n  },\n  "keywords": [\n    "punycode",\n    "unicode",\n    "idn",\n    "idna",\n    "dns",\n    "url",\n    "domain"\n  ],\n  "license": "MIT",\n  "author": {\n    "name": "Mathias Bynens",\n    "url": "https://mathiasbynens.be/"\n  },\n  "contributors": [\n    {\n      "name": "Mathias Bynens",\n      "url": "https://mathiasbynens.be/"\n    }\n  ],\n  "repository": {\n    "type": "git",\n    "url": "https://github.com/mathiasbynens/punycode.js.git"\n  },\n  "bugs": "https://github.com/mathiasbynens/punycode.js/issues",\n  "files": [\n    "LICENSE-MIT.txt",\n    "punycode.js",\n    "punycode.es6.js"\n  ],\n  "scripts": {\n    "test": "mocha tests",\n    "build": "node scripts/prepublish.js"\n  },\n  "devDependencies": {\n    "codecov": "^3.8.3",\n    "nyc": "^15.1.0",\n    "mocha": "^10.2.0"\n  },\n  "jspm": {\n    "map": {\n      "./punycode.js": {\n        "node": "@node/punycode"\n      }\n    }\n  }\n}\n',
  'punycode/punycode.js': true,
  'querystring/package.json':
    '{\n  "name": "querystring",\n  "id": "querystring",\n  "version": "0.2.0",\n  "description": "Node\'s querystring module for all engines.",\n  "keywords": [ "commonjs", "query", "querystring" ],\n  "author": "Irakli Gozalishvili <rfobic@gmail.com>",\n  "repository": {\n    "type": "git",\n    "url": "git://github.com/Gozala/querystring.git",\n    "web": "https://github.com/Gozala/querystring"\n  },\n  "bugs": {\n    "url": "http://github.com/Gozala/querystring/issues/"\n  },\n  "devDependencies": {\n    "test": "~0.x.0",\n    "phantomify": "~0.x.0",\n    "retape": "~0.x.0",\n    "tape": "~0.1.5"\n  },\n  "engines": {\n    "node": ">=0.4.x"\n  },\n  "scripts": {\n    "test": "npm run test-node && npm run test-browser && npm run test-tap",\n    "test-browser": "node ./node_modules/phantomify/bin/cmd.js ./test/common-index.js",\n    "test-node": "node ./test/common-index.js",\n    "test-tap": "node ./test/tap-index.js"\n  },\n  "testling": {\n    "files": "test/tap-index.js",\n    "browsers": {\n      "iexplore": [\n        9,\n        10\n      ],\n      "chrome": [\n        16,\n        20,\n        25,\n        "canary"\n      ],\n      "firefox": [\n        10,\n        15,\n        16,\n        17,\n        18,\n        "nightly"\n      ],\n      "safari": [\n        5,\n        6\n      ],\n      "opera": [\n        12\n      ]\n    }\n  },\n  "licenses": [{\n    "type" : "MIT",\n    "url" : "https://github.com/Gozala/enchain/License.md"\n  }]\n}\n',
  'querystring/index.js': true,
  'string_decoder/package.json':
    '{\n  "name": "string_decoder",\n  "version": "1.1.1",\n  "description": "The string_decoder module from Node core",\n  "main": "lib/string_decoder.js",\n  "dependencies": {\n    "safe-buffer": "~5.1.0"\n  },\n  "devDependencies": {\n    "babel-polyfill": "^6.23.0",\n    "core-util-is": "^1.0.2",\n    "inherits": "^2.0.3",\n    "tap": "~0.4.8"\n  },\n  "scripts": {\n    "test": "tap test/parallel/*.js && node test/verify-dependencies",\n    "ci": "tap test/parallel/*.js test/ours/*.js --tap | tee test.tap && node test/verify-dependencies.js"\n  },\n  "repository": {\n    "type": "git",\n    "url": "git://github.com/nodejs/string_decoder.git"\n  },\n  "homepage": "https://github.com/nodejs/string_decoder",\n  "keywords": [\n    "string",\n    "decoder",\n    "browser",\n    "browserify"\n  ],\n  "license": "MIT"\n}\n',
  'string_decoder/lib/string_decoder.js': true,
  'typescript/package.json':
    '{\n    "name": "typescript",\n    "author": "Microsoft Corp.",\n    "homepage": "https://www.typescriptlang.org/",\n    "version": "5.8.3",\n    "license": "Apache-2.0",\n    "description": "TypeScript is a language for application scale JavaScript development",\n    "keywords": [\n        "TypeScript",\n        "Microsoft",\n        "compiler",\n        "language",\n        "javascript"\n    ],\n    "bugs": {\n        "url": "https://github.com/microsoft/TypeScript/issues"\n    },\n    "repository": {\n        "type": "git",\n        "url": "https://github.com/microsoft/TypeScript.git"\n    },\n    "main": "./lib/typescript.js",\n    "typings": "./lib/typescript.d.ts",\n    "bin": {\n        "tsc": "./bin/tsc",\n        "tsserver": "./bin/tsserver"\n    },\n    "engines": {\n        "node": ">=14.17"\n    },\n    "files": [\n        "bin",\n        "lib",\n        "!lib/enu",\n        "LICENSE.txt",\n        "README.md",\n        "SECURITY.md",\n        "ThirdPartyNoticeText.txt",\n        "!**/.gitattributes"\n    ],\n    "devDependencies": {\n        "@dprint/formatter": "^0.4.1",\n        "@dprint/typescript": "0.93.3",\n        "@esfx/canceltoken": "^1.0.0",\n        "@eslint/js": "^9.17.0",\n        "@octokit/rest": "^21.0.2",\n        "@types/chai": "^4.3.20",\n        "@types/diff": "^5.2.3",\n        "@types/minimist": "^1.2.5",\n        "@types/mocha": "^10.0.10",\n        "@types/ms": "^0.7.34",\n        "@types/node": "latest",\n        "@types/source-map-support": "^0.5.10",\n        "@types/which": "^3.0.4",\n        "@typescript-eslint/rule-tester": "^8.18.1",\n        "@typescript-eslint/type-utils": "^8.18.1",\n        "@typescript-eslint/utils": "^8.18.1",\n        "azure-devops-node-api": "^14.1.0",\n        "c8": "^10.1.3",\n        "chai": "^4.5.0",\n        "chalk": "^4.1.2",\n        "chokidar": "^3.6.0",\n        "diff": "^5.2.0",\n        "dprint": "^0.47.6",\n        "esbuild": "^0.24.0",\n        "eslint": "^9.17.0",\n        "eslint-formatter-autolinkable-stylish": "^1.4.0",\n        "eslint-plugin-regexp": "^2.7.0",\n        "fast-xml-parser": "^4.5.1",\n        "glob": "^10.4.5",\n        "globals": "^15.13.0",\n        "hereby": "^1.10.0",\n        "jsonc-parser": "^3.3.1",\n        "knip": "^5.41.0",\n        "minimist": "^1.2.8",\n        "mocha": "^10.8.2",\n        "mocha-fivemat-progress-reporter": "^0.1.0",\n        "monocart-coverage-reports": "^2.11.4",\n        "ms": "^2.1.3",\n        "playwright": "^1.49.1",\n        "source-map-support": "^0.5.21",\n        "tslib": "^2.8.1",\n        "typescript": "^5.7.2",\n        "typescript-eslint": "^8.18.1",\n        "which": "^3.0.1"\n    },\n    "overrides": {\n        "typescript@*": "$typescript"\n    },\n    "scripts": {\n        "test": "hereby runtests-parallel --light=false",\n        "test:eslint-rules": "hereby run-eslint-rules-tests",\n        "build": "npm run build:compiler && npm run build:tests",\n        "build:compiler": "hereby local",\n        "build:tests": "hereby tests",\n        "build:tests:notypecheck": "hereby tests --no-typecheck",\n        "clean": "hereby clean",\n        "gulp": "hereby",\n        "lint": "hereby lint",\n        "knip": "hereby knip",\n        "format": "dprint fmt",\n        "setup-hooks": "node scripts/link-hooks.mjs"\n    },\n    "browser": {\n        "fs": false,\n        "os": false,\n        "path": false,\n        "crypto": false,\n        "buffer": false,\n        "source-map-support": false,\n        "inspector": false,\n        "perf_hooks": false\n    },\n    "packageManager": "npm@8.19.4",\n    "volta": {\n        "node": "20.1.0",\n        "npm": "8.19.4"\n    },\n    "gitHead": "68cead182cc24afdc3f1ce7c8ff5853aba14b65a"\n}\n',
  'typescript/lib/lib.decorators.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/**\n * The decorator context types provided to class element decorators.\n */\ntype ClassMemberDecoratorContext =\n    | ClassMethodDecoratorContext\n    | ClassGetterDecoratorContext\n    | ClassSetterDecoratorContext\n    | ClassFieldDecoratorContext\n    | ClassAccessorDecoratorContext;\n\n/**\n * The decorator context types provided to any decorator.\n */\ntype DecoratorContext =\n    | ClassDecoratorContext\n    | ClassMemberDecoratorContext;\n\ntype DecoratorMetadataObject = Record<PropertyKey, unknown> & object;\n\ntype DecoratorMetadata = typeof globalThis extends { Symbol: { readonly metadata: symbol; }; } ? DecoratorMetadataObject : DecoratorMetadataObject | undefined;\n\n/**\n * Context provided to a class decorator.\n * @template Class The type of the decorated class associated with this context.\n */\ninterface ClassDecoratorContext<\n    Class extends abstract new (...args: any) => any = abstract new (...args: any) => any,\n> {\n    /** The kind of element that was decorated. */\n    readonly kind: "class";\n\n    /** The name of the decorated class. */\n    readonly name: string | undefined;\n\n    /**\n     * Adds a callback to be invoked after the class definition has been finalized.\n     *\n     * @example\n     * ```ts\n     * function customElement(name: string): ClassDecoratorFunction {\n     *   return (target, context) => {\n     *     context.addInitializer(function () {\n     *       customElements.define(name, this);\n     *     });\n     *   }\n     * }\n     *\n     * @customElement("my-element")\n     * class MyElement {}\n     * ```\n     */\n    addInitializer(initializer: (this: Class) => void): void;\n\n    readonly metadata: DecoratorMetadata;\n}\n\n/**\n * Context provided to a class method decorator.\n * @template This The type on which the class element will be defined. For a static class element, this will be\n * the type of the constructor. For a non-static class element, this will be the type of the instance.\n * @template Value The type of the decorated class method.\n */\ninterface ClassMethodDecoratorContext<\n    This = unknown,\n    Value extends (this: This, ...args: any) => any = (this: This, ...args: any) => any,\n> {\n    /** The kind of class element that was decorated. */\n    readonly kind: "method";\n\n    /** The name of the decorated class element. */\n    readonly name: string | symbol;\n\n    /** A value indicating whether the class element is a static (`true`) or instance (`false`) element. */\n    readonly static: boolean;\n\n    /** A value indicating whether the class element has a private name. */\n    readonly private: boolean;\n\n    /** An object that can be used to access the current value of the class element at runtime. */\n    readonly access: {\n        /**\n         * Determines whether an object has a property with the same name as the decorated element.\n         */\n        has(object: This): boolean;\n        /**\n         * Gets the current value of the method from the provided object.\n         *\n         * @example\n         * let fn = context.access.get(instance);\n         */\n        get(object: This): Value;\n    };\n\n    /**\n     * Adds a callback to be invoked either after static methods are defined but before\n     * static initializers are run (when decorating a `static` element), or before instance\n     * initializers are run (when decorating a non-`static` element).\n     *\n     * @example\n     * ```ts\n     * const bound: ClassMethodDecoratorFunction = (value, context) {\n     *   if (context.private) throw new TypeError("Not supported on private methods.");\n     *   context.addInitializer(function () {\n     *     this[context.name] = this[context.name].bind(this);\n     *   });\n     * }\n     *\n     * class C {\n     *   message = "Hello";\n     *\n     *   @bound\n     *   m() {\n     *     console.log(this.message);\n     *   }\n     * }\n     * ```\n     */\n    addInitializer(initializer: (this: This) => void): void;\n\n    readonly metadata: DecoratorMetadata;\n}\n\n/**\n * Context provided to a class getter decorator.\n * @template This The type on which the class element will be defined. For a static class element, this will be\n * the type of the constructor. For a non-static class element, this will be the type of the instance.\n * @template Value The property type of the decorated class getter.\n */\ninterface ClassGetterDecoratorContext<\n    This = unknown,\n    Value = unknown,\n> {\n    /** The kind of class element that was decorated. */\n    readonly kind: "getter";\n\n    /** The name of the decorated class element. */\n    readonly name: string | symbol;\n\n    /** A value indicating whether the class element is a static (`true`) or instance (`false`) element. */\n    readonly static: boolean;\n\n    /** A value indicating whether the class element has a private name. */\n    readonly private: boolean;\n\n    /** An object that can be used to access the current value of the class element at runtime. */\n    readonly access: {\n        /**\n         * Determines whether an object has a property with the same name as the decorated element.\n         */\n        has(object: This): boolean;\n        /**\n         * Invokes the getter on the provided object.\n         *\n         * @example\n         * let value = context.access.get(instance);\n         */\n        get(object: This): Value;\n    };\n\n    /**\n     * Adds a callback to be invoked either after static methods are defined but before\n     * static initializers are run (when decorating a `static` element), or before instance\n     * initializers are run (when decorating a non-`static` element).\n     */\n    addInitializer(initializer: (this: This) => void): void;\n\n    readonly metadata: DecoratorMetadata;\n}\n\n/**\n * Context provided to a class setter decorator.\n * @template This The type on which the class element will be defined. For a static class element, this will be\n * the type of the constructor. For a non-static class element, this will be the type of the instance.\n * @template Value The type of the decorated class setter.\n */\ninterface ClassSetterDecoratorContext<\n    This = unknown,\n    Value = unknown,\n> {\n    /** The kind of class element that was decorated. */\n    readonly kind: "setter";\n\n    /** The name of the decorated class element. */\n    readonly name: string | symbol;\n\n    /** A value indicating whether the class element is a static (`true`) or instance (`false`) element. */\n    readonly static: boolean;\n\n    /** A value indicating whether the class element has a private name. */\n    readonly private: boolean;\n\n    /** An object that can be used to access the current value of the class element at runtime. */\n    readonly access: {\n        /**\n         * Determines whether an object has a property with the same name as the decorated element.\n         */\n        has(object: This): boolean;\n        /**\n         * Invokes the setter on the provided object.\n         *\n         * @example\n         * context.access.set(instance, value);\n         */\n        set(object: This, value: Value): void;\n    };\n\n    /**\n     * Adds a callback to be invoked either after static methods are defined but before\n     * static initializers are run (when decorating a `static` element), or before instance\n     * initializers are run (when decorating a non-`static` element).\n     */\n    addInitializer(initializer: (this: This) => void): void;\n\n    readonly metadata: DecoratorMetadata;\n}\n\n/**\n * Context provided to a class `accessor` field decorator.\n * @template This The type on which the class element will be defined. For a static class element, this will be\n * the type of the constructor. For a non-static class element, this will be the type of the instance.\n * @template Value The type of decorated class field.\n */\ninterface ClassAccessorDecoratorContext<\n    This = unknown,\n    Value = unknown,\n> {\n    /** The kind of class element that was decorated. */\n    readonly kind: "accessor";\n\n    /** The name of the decorated class element. */\n    readonly name: string | symbol;\n\n    /** A value indicating whether the class element is a static (`true`) or instance (`false`) element. */\n    readonly static: boolean;\n\n    /** A value indicating whether the class element has a private name. */\n    readonly private: boolean;\n\n    /** An object that can be used to access the current value of the class element at runtime. */\n    readonly access: {\n        /**\n         * Determines whether an object has a property with the same name as the decorated element.\n         */\n        has(object: This): boolean;\n\n        /**\n         * Invokes the getter on the provided object.\n         *\n         * @example\n         * let value = context.access.get(instance);\n         */\n        get(object: This): Value;\n\n        /**\n         * Invokes the setter on the provided object.\n         *\n         * @example\n         * context.access.set(instance, value);\n         */\n        set(object: This, value: Value): void;\n    };\n\n    /**\n     * Adds a callback to be invoked immediately after the auto `accessor` being\n     * decorated is initialized (regardless if the `accessor` is `static` or not).\n     */\n    addInitializer(initializer: (this: This) => void): void;\n\n    readonly metadata: DecoratorMetadata;\n}\n\n/**\n * Describes the target provided to class `accessor` field decorators.\n * @template This The `this` type to which the target applies.\n * @template Value The property type for the class `accessor` field.\n */\ninterface ClassAccessorDecoratorTarget<This, Value> {\n    /**\n     * Invokes the getter that was defined prior to decorator application.\n     *\n     * @example\n     * let value = target.get.call(instance);\n     */\n    get(this: This): Value;\n\n    /**\n     * Invokes the setter that was defined prior to decorator application.\n     *\n     * @example\n     * target.set.call(instance, value);\n     */\n    set(this: This, value: Value): void;\n}\n\n/**\n * Describes the allowed return value from a class `accessor` field decorator.\n * @template This The `this` type to which the target applies.\n * @template Value The property type for the class `accessor` field.\n */\ninterface ClassAccessorDecoratorResult<This, Value> {\n    /**\n     * An optional replacement getter function. If not provided, the existing getter function is used instead.\n     */\n    get?(this: This): Value;\n\n    /**\n     * An optional replacement setter function. If not provided, the existing setter function is used instead.\n     */\n    set?(this: This, value: Value): void;\n\n    /**\n     * An optional initializer mutator that is invoked when the underlying field initializer is evaluated.\n     * @param value The incoming initializer value.\n     * @returns The replacement initializer value.\n     */\n    init?(this: This, value: Value): Value;\n}\n\n/**\n * Context provided to a class field decorator.\n * @template This The type on which the class element will be defined. For a static class element, this will be\n * the type of the constructor. For a non-static class element, this will be the type of the instance.\n * @template Value The type of the decorated class field.\n */\ninterface ClassFieldDecoratorContext<\n    This = unknown,\n    Value = unknown,\n> {\n    /** The kind of class element that was decorated. */\n    readonly kind: "field";\n\n    /** The name of the decorated class element. */\n    readonly name: string | symbol;\n\n    /** A value indicating whether the class element is a static (`true`) or instance (`false`) element. */\n    readonly static: boolean;\n\n    /** A value indicating whether the class element has a private name. */\n    readonly private: boolean;\n\n    /** An object that can be used to access the current value of the class element at runtime. */\n    readonly access: {\n        /**\n         * Determines whether an object has a property with the same name as the decorated element.\n         */\n        has(object: This): boolean;\n\n        /**\n         * Gets the value of the field on the provided object.\n         */\n        get(object: This): Value;\n\n        /**\n         * Sets the value of the field on the provided object.\n         */\n        set(object: This, value: Value): void;\n    };\n\n    /**\n     * Adds a callback to be invoked immediately after the field being decorated\n     * is initialized (regardless if the field is `static` or not).\n     */\n    addInitializer(initializer: (this: This) => void): void;\n\n    readonly metadata: DecoratorMetadata;\n}\n',
  'typescript/lib/lib.decorators.legacy.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ndeclare type ClassDecorator = <TFunction extends Function>(target: TFunction) => TFunction | void;\ndeclare type PropertyDecorator = (target: Object, propertyKey: string | symbol) => void;\ndeclare type MethodDecorator = <T>(target: Object, propertyKey: string | symbol, descriptor: TypedPropertyDescriptor<T>) => TypedPropertyDescriptor<T> | void;\ndeclare type ParameterDecorator = (target: Object, propertyKey: string | symbol | undefined, parameterIndex: number) => void;\n',
  'typescript/lib/lib.es2015.collection.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ninterface Map<K, V> {\n    clear(): void;\n    /**\n     * @returns true if an element in the Map existed and has been removed, or false if the element does not exist.\n     */\n    delete(key: K): boolean;\n    /**\n     * Executes a provided function once per each key/value pair in the Map, in insertion order.\n     */\n    forEach(callbackfn: (value: V, key: K, map: Map<K, V>) => void, thisArg?: any): void;\n    /**\n     * Returns a specified element from the Map object. If the value that is associated to the provided key is an object, then you will get a reference to that object and any change made to that object will effectively modify it inside the Map.\n     * @returns Returns the element associated with the specified key. If no element is associated with the specified key, undefined is returned.\n     */\n    get(key: K): V | undefined;\n    /**\n     * @returns boolean indicating whether an element with the specified key exists or not.\n     */\n    has(key: K): boolean;\n    /**\n     * Adds a new element with a specified key and value to the Map. If an element with the same key already exists, the element will be updated.\n     */\n    set(key: K, value: V): this;\n    /**\n     * @returns the number of elements in the Map.\n     */\n    readonly size: number;\n}\n\ninterface MapConstructor {\n    new (): Map<any, any>;\n    new <K, V>(entries?: readonly (readonly [K, V])[] | null): Map<K, V>;\n    readonly prototype: Map<any, any>;\n}\ndeclare var Map: MapConstructor;\n\ninterface ReadonlyMap<K, V> {\n    forEach(callbackfn: (value: V, key: K, map: ReadonlyMap<K, V>) => void, thisArg?: any): void;\n    get(key: K): V | undefined;\n    has(key: K): boolean;\n    readonly size: number;\n}\n\ninterface WeakMap<K extends WeakKey, V> {\n    /**\n     * Removes the specified element from the WeakMap.\n     * @returns true if the element was successfully removed, or false if it was not present.\n     */\n    delete(key: K): boolean;\n    /**\n     * @returns a specified element.\n     */\n    get(key: K): V | undefined;\n    /**\n     * @returns a boolean indicating whether an element with the specified key exists or not.\n     */\n    has(key: K): boolean;\n    /**\n     * Adds a new element with a specified key and value.\n     * @param key Must be an object or symbol.\n     */\n    set(key: K, value: V): this;\n}\n\ninterface WeakMapConstructor {\n    new <K extends WeakKey = WeakKey, V = any>(entries?: readonly (readonly [K, V])[] | null): WeakMap<K, V>;\n    readonly prototype: WeakMap<WeakKey, any>;\n}\ndeclare var WeakMap: WeakMapConstructor;\n\ninterface Set<T> {\n    /**\n     * Appends a new element with a specified value to the end of the Set.\n     */\n    add(value: T): this;\n\n    clear(): void;\n    /**\n     * Removes a specified value from the Set.\n     * @returns Returns true if an element in the Set existed and has been removed, or false if the element does not exist.\n     */\n    delete(value: T): boolean;\n    /**\n     * Executes a provided function once per each value in the Set object, in insertion order.\n     */\n    forEach(callbackfn: (value: T, value2: T, set: Set<T>) => void, thisArg?: any): void;\n    /**\n     * @returns a boolean indicating whether an element with the specified value exists in the Set or not.\n     */\n    has(value: T): boolean;\n    /**\n     * @returns the number of (unique) elements in Set.\n     */\n    readonly size: number;\n}\n\ninterface SetConstructor {\n    new <T = any>(values?: readonly T[] | null): Set<T>;\n    readonly prototype: Set<any>;\n}\ndeclare var Set: SetConstructor;\n\ninterface ReadonlySet<T> {\n    forEach(callbackfn: (value: T, value2: T, set: ReadonlySet<T>) => void, thisArg?: any): void;\n    has(value: T): boolean;\n    readonly size: number;\n}\n\ninterface WeakSet<T extends WeakKey> {\n    /**\n     * Appends a new value to the end of the WeakSet.\n     */\n    add(value: T): this;\n    /**\n     * Removes the specified element from the WeakSet.\n     * @returns Returns true if the element existed and has been removed, or false if the element does not exist.\n     */\n    delete(value: T): boolean;\n    /**\n     * @returns a boolean indicating whether a value exists in the WeakSet or not.\n     */\n    has(value: T): boolean;\n}\n\ninterface WeakSetConstructor {\n    new <T extends WeakKey = WeakKey>(values?: readonly T[] | null): WeakSet<T>;\n    readonly prototype: WeakSet<WeakKey>;\n}\ndeclare var WeakSet: WeakSetConstructor;\n',
  'typescript/lib/lib.es2015.core.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ninterface Array<T> {\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find<S extends T>(predicate: (value: T, index: number, obj: T[]) => value is S, thisArg?: any): S | undefined;\n    find(predicate: (value: T, index: number, obj: T[]) => unknown, thisArg?: any): T | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: T, index: number, obj: T[]) => unknown, thisArg?: any): number;\n\n    /**\n     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: T, start?: number, end?: number): this;\n\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n\n    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions & Intl.DateTimeFormatOptions): string;\n}\n\ninterface ArrayConstructor {\n    /**\n     * Creates an array from an array-like object.\n     * @param arrayLike An array-like object to convert to an array.\n     */\n    from<T>(arrayLike: ArrayLike<T>): T[];\n\n    /**\n     * Creates an array from an iterable object.\n     * @param arrayLike An array-like object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of \'this\' used to invoke the mapfn.\n     */\n    from<T, U>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): U[];\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of<T>(...items: T[]): T[];\n}\n\ninterface DateConstructor {\n    new (value: number | string | Date): Date;\n}\n\ninterface Function {\n    /**\n     * Returns the name of the function. Function names are read-only and can not be changed.\n     */\n    readonly name: string;\n}\n\ninterface Math {\n    /**\n     * Returns the number of leading zero bits in the 32-bit binary representation of a number.\n     * @param x A numeric expression.\n     */\n    clz32(x: number): number;\n\n    /**\n     * Returns the result of 32-bit multiplication of two numbers.\n     * @param x First number\n     * @param y Second number\n     */\n    imul(x: number, y: number): number;\n\n    /**\n     * Returns the sign of the x, indicating whether x is positive, negative or zero.\n     * @param x The numeric expression to test\n     */\n    sign(x: number): number;\n\n    /**\n     * Returns the base 10 logarithm of a number.\n     * @param x A numeric expression.\n     */\n    log10(x: number): number;\n\n    /**\n     * Returns the base 2 logarithm of a number.\n     * @param x A numeric expression.\n     */\n    log2(x: number): number;\n\n    /**\n     * Returns the natural logarithm of 1 + x.\n     * @param x A numeric expression.\n     */\n    log1p(x: number): number;\n\n    /**\n     * Returns the result of (e^x - 1), which is an implementation-dependent approximation to\n     * subtracting 1 from the exponential function of x (e raised to the power of x, where e\n     * is the base of the natural logarithms).\n     * @param x A numeric expression.\n     */\n    expm1(x: number): number;\n\n    /**\n     * Returns the hyperbolic cosine of a number.\n     * @param x A numeric expression that contains an angle measured in radians.\n     */\n    cosh(x: number): number;\n\n    /**\n     * Returns the hyperbolic sine of a number.\n     * @param x A numeric expression that contains an angle measured in radians.\n     */\n    sinh(x: number): number;\n\n    /**\n     * Returns the hyperbolic tangent of a number.\n     * @param x A numeric expression that contains an angle measured in radians.\n     */\n    tanh(x: number): number;\n\n    /**\n     * Returns the inverse hyperbolic cosine of a number.\n     * @param x A numeric expression that contains an angle measured in radians.\n     */\n    acosh(x: number): number;\n\n    /**\n     * Returns the inverse hyperbolic sine of a number.\n     * @param x A numeric expression that contains an angle measured in radians.\n     */\n    asinh(x: number): number;\n\n    /**\n     * Returns the inverse hyperbolic tangent of a number.\n     * @param x A numeric expression that contains an angle measured in radians.\n     */\n    atanh(x: number): number;\n\n    /**\n     * Returns the square root of the sum of squares of its arguments.\n     * @param values Values to compute the square root for.\n     *     If no arguments are passed, the result is +0.\n     *     If there is only one argument, the result is the absolute value.\n     *     If any argument is +Infinity or -Infinity, the result is +Infinity.\n     *     If any argument is NaN, the result is NaN.\n     *     If all arguments are either +0 or −0, the result is +0.\n     */\n    hypot(...values: number[]): number;\n\n    /**\n     * Returns the integral part of the a numeric expression, x, removing any fractional digits.\n     * If x is already an integer, the result is x.\n     * @param x A numeric expression.\n     */\n    trunc(x: number): number;\n\n    /**\n     * Returns the nearest single precision float representation of a number.\n     * @param x A numeric expression.\n     */\n    fround(x: number): number;\n\n    /**\n     * Returns an implementation-dependent approximation to the cube root of number.\n     * @param x A numeric expression.\n     */\n    cbrt(x: number): number;\n}\n\ninterface NumberConstructor {\n    /**\n     * The value of Number.EPSILON is the difference between 1 and the smallest value greater than 1\n     * that is representable as a Number value, which is approximately:\n     * 2.2204460492503130808472633361816 x 10‍−‍16.\n     */\n    readonly EPSILON: number;\n\n    /**\n     * Returns true if passed value is finite.\n     * Unlike the global isFinite, Number.isFinite doesn\'t forcibly convert the parameter to a\n     * number. Only finite values of the type number, result in true.\n     * @param number A numeric value.\n     */\n    isFinite(number: unknown): boolean;\n\n    /**\n     * Returns true if the value passed is an integer, false otherwise.\n     * @param number A numeric value.\n     */\n    isInteger(number: unknown): boolean;\n\n    /**\n     * Returns a Boolean value that indicates whether a value is the reserved value NaN (not a\n     * number). Unlike the global isNaN(), Number.isNaN() doesn\'t forcefully convert the parameter\n     * to a number. Only values of the type number, that are also NaN, result in true.\n     * @param number A numeric value.\n     */\n    isNaN(number: unknown): boolean;\n\n    /**\n     * Returns true if the value passed is a safe integer.\n     * @param number A numeric value.\n     */\n    isSafeInteger(number: unknown): boolean;\n\n    /**\n     * The value of the largest integer n such that n and n + 1 are both exactly representable as\n     * a Number value.\n     * The value of Number.MAX_SAFE_INTEGER is 9007199254740991 2^53 − 1.\n     */\n    readonly MAX_SAFE_INTEGER: number;\n\n    /**\n     * The value of the smallest integer n such that n and n − 1 are both exactly representable as\n     * a Number value.\n     * The value of Number.MIN_SAFE_INTEGER is −9007199254740991 (−(2^53 − 1)).\n     */\n    readonly MIN_SAFE_INTEGER: number;\n\n    /**\n     * Converts a string to a floating-point number.\n     * @param string A string that contains a floating-point number.\n     */\n    parseFloat(string: string): number;\n\n    /**\n     * Converts A string to an integer.\n     * @param string A string to convert into a number.\n     * @param radix A value between 2 and 36 that specifies the base of the number in `string`.\n     * If this argument is not supplied, strings with a prefix of \'0x\' are considered hexadecimal.\n     * All other strings are considered decimal.\n     */\n    parseInt(string: string, radix?: number): number;\n}\n\ninterface ObjectConstructor {\n    /**\n     * Copy the values of all of the enumerable own properties from one or more source objects to a\n     * target object. Returns the target object.\n     * @param target The target object to copy to.\n     * @param source The source object from which to copy properties.\n     */\n    assign<T extends {}, U>(target: T, source: U): T & U;\n\n    /**\n     * Copy the values of all of the enumerable own properties from one or more source objects to a\n     * target object. Returns the target object.\n     * @param target The target object to copy to.\n     * @param source1 The first source object from which to copy properties.\n     * @param source2 The second source object from which to copy properties.\n     */\n    assign<T extends {}, U, V>(target: T, source1: U, source2: V): T & U & V;\n\n    /**\n     * Copy the values of all of the enumerable own properties from one or more source objects to a\n     * target object. Returns the target object.\n     * @param target The target object to copy to.\n     * @param source1 The first source object from which to copy properties.\n     * @param source2 The second source object from which to copy properties.\n     * @param source3 The third source object from which to copy properties.\n     */\n    assign<T extends {}, U, V, W>(target: T, source1: U, source2: V, source3: W): T & U & V & W;\n\n    /**\n     * Copy the values of all of the enumerable own properties from one or more source objects to a\n     * target object. Returns the target object.\n     * @param target The target object to copy to.\n     * @param sources One or more source objects from which to copy properties\n     */\n    assign(target: object, ...sources: any[]): any;\n\n    /**\n     * Returns an array of all symbol properties found directly on object o.\n     * @param o Object to retrieve the symbols from.\n     */\n    getOwnPropertySymbols(o: any): symbol[];\n\n    /**\n     * Returns the names of the enumerable string properties and methods of an object.\n     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\n     */\n    keys(o: {}): string[];\n\n    /**\n     * Returns true if the values are the same value, false otherwise.\n     * @param value1 The first value.\n     * @param value2 The second value.\n     */\n    is(value1: any, value2: any): boolean;\n\n    /**\n     * Sets the prototype of a specified object o to object proto or null. Returns the object o.\n     * @param o The object to change its prototype.\n     * @param proto The value of the new prototype or null.\n     */\n    setPrototypeOf(o: any, proto: object | null): any;\n}\n\ninterface ReadonlyArray<T> {\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find<S extends T>(predicate: (value: T, index: number, obj: readonly T[]) => value is S, thisArg?: any): S | undefined;\n    find(predicate: (value: T, index: number, obj: readonly T[]) => unknown, thisArg?: any): T | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: T, index: number, obj: readonly T[]) => unknown, thisArg?: any): number;\n\n    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions & Intl.DateTimeFormatOptions): string;\n}\n\ninterface RegExp {\n    /**\n     * Returns a string indicating the flags of the regular expression in question. This field is read-only.\n     * The characters in this string are sequenced and concatenated in the following order:\n     *\n     *    - "g" for global\n     *    - "i" for ignoreCase\n     *    - "m" for multiline\n     *    - "u" for unicode\n     *    - "y" for sticky\n     *\n     * If no flags are set, the value is the empty string.\n     */\n    readonly flags: string;\n\n    /**\n     * Returns a Boolean value indicating the state of the sticky flag (y) used with a regular\n     * expression. Default is false. Read-only.\n     */\n    readonly sticky: boolean;\n\n    /**\n     * Returns a Boolean value indicating the state of the Unicode flag (u) used with a regular\n     * expression. Default is false. Read-only.\n     */\n    readonly unicode: boolean;\n}\n\ninterface RegExpConstructor {\n    new (pattern: RegExp | string, flags?: string): RegExp;\n    (pattern: RegExp | string, flags?: string): RegExp;\n}\n\ninterface String {\n    /**\n     * Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\n     * value of the UTF-16 encoded code point starting at the string element at position pos in\n     * the String resulting from converting this object to a String.\n     * If there is no element at that position, the result is undefined.\n     * If a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos.\n     */\n    codePointAt(pos: number): number | undefined;\n\n    /**\n     * Returns true if searchString appears as a substring of the result of converting this\n     * object to a String, at one or more positions that are\n     * greater than or equal to position; otherwise, returns false.\n     * @param searchString search string\n     * @param position If position is undefined, 0 is assumed, so as to search all of the String.\n     */\n    includes(searchString: string, position?: number): boolean;\n\n    /**\n     * Returns true if the sequence of elements of searchString converted to a String is the\n     * same as the corresponding elements of this object (converted to a String) starting at\n     * endPosition – length(this). Otherwise returns false.\n     */\n    endsWith(searchString: string, endPosition?: number): boolean;\n\n    /**\n     * Returns the String value result of normalizing the string into the normalization form\n     * named by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n     * @param form Applicable values: "NFC", "NFD", "NFKC", or "NFKD", If not specified default\n     * is "NFC"\n     */\n    normalize(form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;\n\n    /**\n     * Returns the String value result of normalizing the string into the normalization form\n     * named by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms.\n     * @param form Applicable values: "NFC", "NFD", "NFKC", or "NFKD", If not specified default\n     * is "NFC"\n     */\n    normalize(form?: string): string;\n\n    /**\n     * Returns a String value that is made from count copies appended together. If count is 0,\n     * the empty string is returned.\n     * @param count number of copies to append\n     */\n    repeat(count: number): string;\n\n    /**\n     * Returns true if the sequence of elements of searchString converted to a String is the\n     * same as the corresponding elements of this object (converted to a String) starting at\n     * position. Otherwise returns false.\n     */\n    startsWith(searchString: string, position?: number): boolean;\n\n    /**\n     * Returns an `<a>` HTML anchor element and sets the name attribute to the text value\n     * @deprecated A legacy feature for browser compatibility\n     * @param name\n     */\n    anchor(name: string): string;\n\n    /**\n     * Returns a `<big>` HTML element\n     * @deprecated A legacy feature for browser compatibility\n     */\n    big(): string;\n\n    /**\n     * Returns a `<blink>` HTML element\n     * @deprecated A legacy feature for browser compatibility\n     */\n    blink(): string;\n\n    /**\n     * Returns a `<b>` HTML element\n     * @deprecated A legacy feature for browser compatibility\n     */\n    bold(): string;\n\n    /**\n     * Returns a `<tt>` HTML element\n     * @deprecated A legacy feature for browser compatibility\n     */\n    fixed(): string;\n\n    /**\n     * Returns a `<font>` HTML element and sets the color attribute value\n     * @deprecated A legacy feature for browser compatibility\n     */\n    fontcolor(color: string): string;\n\n    /**\n     * Returns a `<font>` HTML element and sets the size attribute value\n     * @deprecated A legacy feature for browser compatibility\n     */\n    fontsize(size: number): string;\n\n    /**\n     * Returns a `<font>` HTML element and sets the size attribute value\n     * @deprecated A legacy feature for browser compatibility\n     */\n    fontsize(size: string): string;\n\n    /**\n     * Returns an `<i>` HTML element\n     * @deprecated A legacy feature for browser compatibility\n     */\n    italics(): string;\n\n    /**\n     * Returns an `<a>` HTML element and sets the href attribute value\n     * @deprecated A legacy feature for browser compatibility\n     */\n    link(url: string): string;\n\n    /**\n     * Returns a `<small>` HTML element\n     * @deprecated A legacy feature for browser compatibility\n     */\n    small(): string;\n\n    /**\n     * Returns a `<strike>` HTML element\n     * @deprecated A legacy feature for browser compatibility\n     */\n    strike(): string;\n\n    /**\n     * Returns a `<sub>` HTML element\n     * @deprecated A legacy feature for browser compatibility\n     */\n    sub(): string;\n\n    /**\n     * Returns a `<sup>` HTML element\n     * @deprecated A legacy feature for browser compatibility\n     */\n    sup(): string;\n}\n\ninterface StringConstructor {\n    /**\n     * Return the String value whose elements are, in order, the elements in the List elements.\n     * If length is 0, the empty string is returned.\n     */\n    fromCodePoint(...codePoints: number[]): string;\n\n    /**\n     * String.raw is usually used as a tag function of a Tagged Template String. When called as\n     * such, the first argument will be a well formed template call site object and the rest\n     * parameter will contain the substitution values. It can also be called directly, for example,\n     * to interleave strings and values from your own tag function, and in this case the only thing\n     * it needs from the first argument is the raw property.\n     * @param template A well-formed template string call site representation.\n     * @param substitutions A set of substitution values.\n     */\n    raw(template: { raw: readonly string[] | ArrayLike<string>; }, ...substitutions: any[]): string;\n}\n\ninterface Int8Array<TArrayBuffer extends ArrayBufferLike> {\n    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;\n}\n\ninterface Uint8Array<TArrayBuffer extends ArrayBufferLike> {\n    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;\n}\n\ninterface Uint8ClampedArray<TArrayBuffer extends ArrayBufferLike> {\n    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;\n}\n\ninterface Int16Array<TArrayBuffer extends ArrayBufferLike> {\n    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;\n}\n\ninterface Uint16Array<TArrayBuffer extends ArrayBufferLike> {\n    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;\n}\n\ninterface Int32Array<TArrayBuffer extends ArrayBufferLike> {\n    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;\n}\n\ninterface Uint32Array<TArrayBuffer extends ArrayBufferLike> {\n    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;\n}\n\ninterface Float32Array<TArrayBuffer extends ArrayBufferLike> {\n    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;\n}\n\ninterface Float64Array<TArrayBuffer extends ArrayBufferLike> {\n    toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions): string;\n}\n',
  'typescript/lib/lib.es2015.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es5" />\n/// <reference lib="es2015.core" />\n/// <reference lib="es2015.collection" />\n/// <reference lib="es2015.iterable" />\n/// <reference lib="es2015.generator" />\n/// <reference lib="es2015.promise" />\n/// <reference lib="es2015.proxy" />\n/// <reference lib="es2015.reflect" />\n/// <reference lib="es2015.symbol" />\n/// <reference lib="es2015.symbol.wellknown" />\n',
  'typescript/lib/lib.es2015.generator.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2015.iterable" />\n\ninterface Generator<T = unknown, TReturn = any, TNext = any> extends IteratorObject<T, TReturn, TNext> {\n    // NOTE: \'next\' is defined using a tuple to ensure we report the correct assignability errors in all places.\n    next(...[value]: [] | [TNext]): IteratorResult<T, TReturn>;\n    return(value: TReturn): IteratorResult<T, TReturn>;\n    throw(e: any): IteratorResult<T, TReturn>;\n    [Symbol.iterator](): Generator<T, TReturn, TNext>;\n}\n\ninterface GeneratorFunction {\n    /**\n     * Creates a new Generator object.\n     * @param args A list of arguments the function accepts.\n     */\n    new (...args: any[]): Generator;\n    /**\n     * Creates a new Generator object.\n     * @param args A list of arguments the function accepts.\n     */\n    (...args: any[]): Generator;\n    /**\n     * The length of the arguments.\n     */\n    readonly length: number;\n    /**\n     * Returns the name of the function.\n     */\n    readonly name: string;\n    /**\n     * A reference to the prototype.\n     */\n    readonly prototype: Generator;\n}\n\ninterface GeneratorFunctionConstructor {\n    /**\n     * Creates a new Generator function.\n     * @param args A list of arguments the function accepts.\n     */\n    new (...args: string[]): GeneratorFunction;\n    /**\n     * Creates a new Generator function.\n     * @param args A list of arguments the function accepts.\n     */\n    (...args: string[]): GeneratorFunction;\n    /**\n     * The length of the arguments.\n     */\n    readonly length: number;\n    /**\n     * Returns the name of the function.\n     */\n    readonly name: string;\n    /**\n     * A reference to the prototype.\n     */\n    readonly prototype: GeneratorFunction;\n}\n',
  'typescript/lib/lib.es2015.iterable.d.ts':
    "/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib=\"true\"/>\n\n/// <reference lib=\"es2015.symbol\" />\n\ninterface SymbolConstructor {\n    /**\n     * A method that returns the default iterator for an object. Called by the semantics of the\n     * for-of statement.\n     */\n    readonly iterator: unique symbol;\n}\n\ninterface IteratorYieldResult<TYield> {\n    done?: false;\n    value: TYield;\n}\n\ninterface IteratorReturnResult<TReturn> {\n    done: true;\n    value: TReturn;\n}\n\ntype IteratorResult<T, TReturn = any> = IteratorYieldResult<T> | IteratorReturnResult<TReturn>;\n\ninterface Iterator<T, TReturn = any, TNext = any> {\n    // NOTE: 'next' is defined using a tuple to ensure we report the correct assignability errors in all places.\n    next(...[value]: [] | [TNext]): IteratorResult<T, TReturn>;\n    return?(value?: TReturn): IteratorResult<T, TReturn>;\n    throw?(e?: any): IteratorResult<T, TReturn>;\n}\n\ninterface Iterable<T, TReturn = any, TNext = any> {\n    [Symbol.iterator](): Iterator<T, TReturn, TNext>;\n}\n\n/**\n * Describes a user-defined {@link Iterator} that is also iterable.\n */\ninterface IterableIterator<T, TReturn = any, TNext = any> extends Iterator<T, TReturn, TNext> {\n    [Symbol.iterator](): IterableIterator<T, TReturn, TNext>;\n}\n\n/**\n * Describes an {@link Iterator} produced by the runtime that inherits from the intrinsic `Iterator.prototype`.\n */\ninterface IteratorObject<T, TReturn = unknown, TNext = unknown> extends Iterator<T, TReturn, TNext> {\n    [Symbol.iterator](): IteratorObject<T, TReturn, TNext>;\n}\n\n/**\n * Defines the `TReturn` type used for built-in iterators produced by `Array`, `Map`, `Set`, and others.\n * This is `undefined` when `strictBuiltInIteratorReturn` is `true`; otherwise, this is `any`.\n */\ntype BuiltinIteratorReturn = intrinsic;\n\ninterface ArrayIterator<T> extends IteratorObject<T, BuiltinIteratorReturn, unknown> {\n    [Symbol.iterator](): ArrayIterator<T>;\n}\n\ninterface Array<T> {\n    /** Iterator */\n    [Symbol.iterator](): ArrayIterator<T>;\n\n    /**\n     * Returns an iterable of key, value pairs for every entry in the array\n     */\n    entries(): ArrayIterator<[number, T]>;\n\n    /**\n     * Returns an iterable of keys in the array\n     */\n    keys(): ArrayIterator<number>;\n\n    /**\n     * Returns an iterable of values in the array\n     */\n    values(): ArrayIterator<T>;\n}\n\ninterface ArrayConstructor {\n    /**\n     * Creates an array from an iterable object.\n     * @param iterable An iterable object to convert to an array.\n     */\n    from<T>(iterable: Iterable<T> | ArrayLike<T>): T[];\n\n    /**\n     * Creates an array from an iterable object.\n     * @param iterable An iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from<T, U>(iterable: Iterable<T> | ArrayLike<T>, mapfn: (v: T, k: number) => U, thisArg?: any): U[];\n}\n\ninterface ReadonlyArray<T> {\n    /** Iterator of values in the array. */\n    [Symbol.iterator](): ArrayIterator<T>;\n\n    /**\n     * Returns an iterable of key, value pairs for every entry in the array\n     */\n    entries(): ArrayIterator<[number, T]>;\n\n    /**\n     * Returns an iterable of keys in the array\n     */\n    keys(): ArrayIterator<number>;\n\n    /**\n     * Returns an iterable of values in the array\n     */\n    values(): ArrayIterator<T>;\n}\n\ninterface IArguments {\n    /** Iterator */\n    [Symbol.iterator](): ArrayIterator<any>;\n}\n\ninterface MapIterator<T> extends IteratorObject<T, BuiltinIteratorReturn, unknown> {\n    [Symbol.iterator](): MapIterator<T>;\n}\n\ninterface Map<K, V> {\n    /** Returns an iterable of entries in the map. */\n    [Symbol.iterator](): MapIterator<[K, V]>;\n\n    /**\n     * Returns an iterable of key, value pairs for every entry in the map.\n     */\n    entries(): MapIterator<[K, V]>;\n\n    /**\n     * Returns an iterable of keys in the map\n     */\n    keys(): MapIterator<K>;\n\n    /**\n     * Returns an iterable of values in the map\n     */\n    values(): MapIterator<V>;\n}\n\ninterface ReadonlyMap<K, V> {\n    /** Returns an iterable of entries in the map. */\n    [Symbol.iterator](): MapIterator<[K, V]>;\n\n    /**\n     * Returns an iterable of key, value pairs for every entry in the map.\n     */\n    entries(): MapIterator<[K, V]>;\n\n    /**\n     * Returns an iterable of keys in the map\n     */\n    keys(): MapIterator<K>;\n\n    /**\n     * Returns an iterable of values in the map\n     */\n    values(): MapIterator<V>;\n}\n\ninterface MapConstructor {\n    new (): Map<any, any>;\n    new <K, V>(iterable?: Iterable<readonly [K, V]> | null): Map<K, V>;\n}\n\ninterface WeakMap<K extends WeakKey, V> {}\n\ninterface WeakMapConstructor {\n    new <K extends WeakKey, V>(iterable: Iterable<readonly [K, V]>): WeakMap<K, V>;\n}\n\ninterface SetIterator<T> extends IteratorObject<T, BuiltinIteratorReturn, unknown> {\n    [Symbol.iterator](): SetIterator<T>;\n}\n\ninterface Set<T> {\n    /** Iterates over values in the set. */\n    [Symbol.iterator](): SetIterator<T>;\n\n    /**\n     * Returns an iterable of [v,v] pairs for every value `v` in the set.\n     */\n    entries(): SetIterator<[T, T]>;\n\n    /**\n     * Despite its name, returns an iterable of the values in the set.\n     */\n    keys(): SetIterator<T>;\n\n    /**\n     * Returns an iterable of values in the set.\n     */\n    values(): SetIterator<T>;\n}\n\ninterface ReadonlySet<T> {\n    /** Iterates over values in the set. */\n    [Symbol.iterator](): SetIterator<T>;\n\n    /**\n     * Returns an iterable of [v,v] pairs for every value `v` in the set.\n     */\n    entries(): SetIterator<[T, T]>;\n\n    /**\n     * Despite its name, returns an iterable of the values in the set.\n     */\n    keys(): SetIterator<T>;\n\n    /**\n     * Returns an iterable of values in the set.\n     */\n    values(): SetIterator<T>;\n}\n\ninterface SetConstructor {\n    new <T>(iterable?: Iterable<T> | null): Set<T>;\n}\n\ninterface WeakSet<T extends WeakKey> {}\n\ninterface WeakSetConstructor {\n    new <T extends WeakKey = WeakKey>(iterable: Iterable<T>): WeakSet<T>;\n}\n\ninterface Promise<T> {}\n\ninterface PromiseConstructor {\n    /**\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\n     * resolve, or rejected when any Promise is rejected.\n     * @param values An iterable of Promises.\n     * @returns A new Promise.\n     */\n    all<T>(values: Iterable<T | PromiseLike<T>>): Promise<Awaited<T>[]>;\n\n    /**\n     * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\n     * or rejected.\n     * @param values An iterable of Promises.\n     * @returns A new Promise.\n     */\n    race<T>(values: Iterable<T | PromiseLike<T>>): Promise<Awaited<T>>;\n}\n\ninterface StringIterator<T> extends IteratorObject<T, BuiltinIteratorReturn, unknown> {\n    [Symbol.iterator](): StringIterator<T>;\n}\n\ninterface String {\n    /** Iterator */\n    [Symbol.iterator](): StringIterator<string>;\n}\n\ninterface Int8Array<TArrayBuffer extends ArrayBufferLike> {\n    [Symbol.iterator](): ArrayIterator<number>;\n\n    /**\n     * Returns an array of key, value pairs for every entry in the array\n     */\n    entries(): ArrayIterator<[number, number]>;\n\n    /**\n     * Returns an list of keys in the array\n     */\n    keys(): ArrayIterator<number>;\n\n    /**\n     * Returns an list of values in the array\n     */\n    values(): ArrayIterator<number>;\n}\n\ninterface Int8ArrayConstructor {\n    new (elements: Iterable<number>): Int8Array<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param elements An iterable object to convert to an array.\n     */\n    from(elements: Iterable<number>): Int8Array<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param elements An iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from<T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>;\n}\n\ninterface Uint8Array<TArrayBuffer extends ArrayBufferLike> {\n    [Symbol.iterator](): ArrayIterator<number>;\n\n    /**\n     * Returns an array of key, value pairs for every entry in the array\n     */\n    entries(): ArrayIterator<[number, number]>;\n\n    /**\n     * Returns an list of keys in the array\n     */\n    keys(): ArrayIterator<number>;\n\n    /**\n     * Returns an list of values in the array\n     */\n    values(): ArrayIterator<number>;\n}\n\ninterface Uint8ArrayConstructor {\n    new (elements: Iterable<number>): Uint8Array<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param elements An iterable object to convert to an array.\n     */\n    from(elements: Iterable<number>): Uint8Array<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param elements An iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from<T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>;\n}\n\ninterface Uint8ClampedArray<TArrayBuffer extends ArrayBufferLike> {\n    [Symbol.iterator](): ArrayIterator<number>;\n\n    /**\n     * Returns an array of key, value pairs for every entry in the array\n     */\n    entries(): ArrayIterator<[number, number]>;\n\n    /**\n     * Returns an list of keys in the array\n     */\n    keys(): ArrayIterator<number>;\n\n    /**\n     * Returns an list of values in the array\n     */\n    values(): ArrayIterator<number>;\n}\n\ninterface Uint8ClampedArrayConstructor {\n    new (elements: Iterable<number>): Uint8ClampedArray<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param elements An iterable object to convert to an array.\n     */\n    from(elements: Iterable<number>): Uint8ClampedArray<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param elements An iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from<T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>;\n}\n\ninterface Int16Array<TArrayBuffer extends ArrayBufferLike> {\n    [Symbol.iterator](): ArrayIterator<number>;\n    /**\n     * Returns an array of key, value pairs for every entry in the array\n     */\n    entries(): ArrayIterator<[number, number]>;\n\n    /**\n     * Returns an list of keys in the array\n     */\n    keys(): ArrayIterator<number>;\n\n    /**\n     * Returns an list of values in the array\n     */\n    values(): ArrayIterator<number>;\n}\n\ninterface Int16ArrayConstructor {\n    new (elements: Iterable<number>): Int16Array<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param elements An iterable object to convert to an array.\n     */\n    from(elements: Iterable<number>): Int16Array<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param elements An iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from<T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>;\n}\n\ninterface Uint16Array<TArrayBuffer extends ArrayBufferLike> {\n    [Symbol.iterator](): ArrayIterator<number>;\n\n    /**\n     * Returns an array of key, value pairs for every entry in the array\n     */\n    entries(): ArrayIterator<[number, number]>;\n\n    /**\n     * Returns an list of keys in the array\n     */\n    keys(): ArrayIterator<number>;\n\n    /**\n     * Returns an list of values in the array\n     */\n    values(): ArrayIterator<number>;\n}\n\ninterface Uint16ArrayConstructor {\n    new (elements: Iterable<number>): Uint16Array<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param elements An iterable object to convert to an array.\n     */\n    from(elements: Iterable<number>): Uint16Array<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param elements An iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from<T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>;\n}\n\ninterface Int32Array<TArrayBuffer extends ArrayBufferLike> {\n    [Symbol.iterator](): ArrayIterator<number>;\n\n    /**\n     * Returns an array of key, value pairs for every entry in the array\n     */\n    entries(): ArrayIterator<[number, number]>;\n\n    /**\n     * Returns an list of keys in the array\n     */\n    keys(): ArrayIterator<number>;\n\n    /**\n     * Returns an list of values in the array\n     */\n    values(): ArrayIterator<number>;\n}\n\ninterface Int32ArrayConstructor {\n    new (elements: Iterable<number>): Int32Array<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param elements An iterable object to convert to an array.\n     */\n    from(elements: Iterable<number>): Int32Array<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param elements An iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from<T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>;\n}\n\ninterface Uint32Array<TArrayBuffer extends ArrayBufferLike> {\n    [Symbol.iterator](): ArrayIterator<number>;\n\n    /**\n     * Returns an array of key, value pairs for every entry in the array\n     */\n    entries(): ArrayIterator<[number, number]>;\n\n    /**\n     * Returns an list of keys in the array\n     */\n    keys(): ArrayIterator<number>;\n\n    /**\n     * Returns an list of values in the array\n     */\n    values(): ArrayIterator<number>;\n}\n\ninterface Uint32ArrayConstructor {\n    new (elements: Iterable<number>): Uint32Array<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param elements An iterable object to convert to an array.\n     */\n    from(elements: Iterable<number>): Uint32Array<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param elements An iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from<T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>;\n}\n\ninterface Float32Array<TArrayBuffer extends ArrayBufferLike> {\n    [Symbol.iterator](): ArrayIterator<number>;\n\n    /**\n     * Returns an array of key, value pairs for every entry in the array\n     */\n    entries(): ArrayIterator<[number, number]>;\n\n    /**\n     * Returns an list of keys in the array\n     */\n    keys(): ArrayIterator<number>;\n\n    /**\n     * Returns an list of values in the array\n     */\n    values(): ArrayIterator<number>;\n}\n\ninterface Float32ArrayConstructor {\n    new (elements: Iterable<number>): Float32Array<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param elements An iterable object to convert to an array.\n     */\n    from(elements: Iterable<number>): Float32Array<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param elements An iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from<T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>;\n}\n\ninterface Float64Array<TArrayBuffer extends ArrayBufferLike> {\n    [Symbol.iterator](): ArrayIterator<number>;\n\n    /**\n     * Returns an array of key, value pairs for every entry in the array\n     */\n    entries(): ArrayIterator<[number, number]>;\n\n    /**\n     * Returns an list of keys in the array\n     */\n    keys(): ArrayIterator<number>;\n\n    /**\n     * Returns an list of values in the array\n     */\n    values(): ArrayIterator<number>;\n}\n\ninterface Float64ArrayConstructor {\n    new (elements: Iterable<number>): Float64Array<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param elements An iterable object to convert to an array.\n     */\n    from(elements: Iterable<number>): Float64Array<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param elements An iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of 'this' used to invoke the mapfn.\n     */\n    from<T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>;\n}\n",
  'typescript/lib/lib.es2015.promise.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ninterface PromiseConstructor {\n    /**\n     * A reference to the prototype.\n     */\n    readonly prototype: Promise<any>;\n\n    /**\n     * Creates a new Promise.\n     * @param executor A callback used to initialize the promise. This callback is passed two arguments:\n     * a resolve callback used to resolve the promise with a value or the result of another promise,\n     * and a reject callback used to reject the promise with a provided reason or error.\n     */\n    new <T>(executor: (resolve: (value: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void): Promise<T>;\n\n    /**\n     * Creates a Promise that is resolved with an array of results when all of the provided Promises\n     * resolve, or rejected when any Promise is rejected.\n     * @param values An array of Promises.\n     * @returns A new Promise.\n     */\n    all<T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: Awaited<T[P]>; }>;\n\n    // see: lib.es2015.iterable.d.ts\n    // all<T>(values: Iterable<T | PromiseLike<T>>): Promise<Awaited<T>[]>;\n\n    /**\n     * Creates a Promise that is resolved or rejected when any of the provided Promises are resolved\n     * or rejected.\n     * @param values An array of Promises.\n     * @returns A new Promise.\n     */\n    race<T extends readonly unknown[] | []>(values: T): Promise<Awaited<T[number]>>;\n\n    // see: lib.es2015.iterable.d.ts\n    // race<T>(values: Iterable<T | PromiseLike<T>>): Promise<Awaited<T>>;\n\n    /**\n     * Creates a new rejected promise for the provided reason.\n     * @param reason The reason the promise was rejected.\n     * @returns A new rejected Promise.\n     */\n    reject<T = never>(reason?: any): Promise<T>;\n\n    /**\n     * Creates a new resolved promise.\n     * @returns A resolved promise.\n     */\n    resolve(): Promise<void>;\n    /**\n     * Creates a new resolved promise for the provided value.\n     * @param value A promise.\n     * @returns A promise whose internal state matches the provided promise.\n     */\n    resolve<T>(value: T): Promise<Awaited<T>>;\n    /**\n     * Creates a new resolved promise for the provided value.\n     * @param value A promise.\n     * @returns A promise whose internal state matches the provided promise.\n     */\n    resolve<T>(value: T | PromiseLike<T>): Promise<Awaited<T>>;\n}\n\ndeclare var Promise: PromiseConstructor;\n',
  'typescript/lib/lib.es2015.proxy.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ninterface ProxyHandler<T extends object> {\n    /**\n     * A trap method for a function call.\n     * @param target The original callable object which is being proxied.\n     */\n    apply?(target: T, thisArg: any, argArray: any[]): any;\n\n    /**\n     * A trap for the `new` operator.\n     * @param target The original object which is being proxied.\n     * @param newTarget The constructor that was originally called.\n     */\n    construct?(target: T, argArray: any[], newTarget: Function): object;\n\n    /**\n     * A trap for `Object.defineProperty()`.\n     * @param target The original object which is being proxied.\n     * @returns A `Boolean` indicating whether or not the property has been defined.\n     */\n    defineProperty?(target: T, property: string | symbol, attributes: PropertyDescriptor): boolean;\n\n    /**\n     * A trap for the `delete` operator.\n     * @param target The original object which is being proxied.\n     * @param p The name or `Symbol` of the property to delete.\n     * @returns A `Boolean` indicating whether or not the property was deleted.\n     */\n    deleteProperty?(target: T, p: string | symbol): boolean;\n\n    /**\n     * A trap for getting a property value.\n     * @param target The original object which is being proxied.\n     * @param p The name or `Symbol` of the property to get.\n     * @param receiver The proxy or an object that inherits from the proxy.\n     */\n    get?(target: T, p: string | symbol, receiver: any): any;\n\n    /**\n     * A trap for `Object.getOwnPropertyDescriptor()`.\n     * @param target The original object which is being proxied.\n     * @param p The name of the property whose description should be retrieved.\n     */\n    getOwnPropertyDescriptor?(target: T, p: string | symbol): PropertyDescriptor | undefined;\n\n    /**\n     * A trap for the `[[GetPrototypeOf]]` internal method.\n     * @param target The original object which is being proxied.\n     */\n    getPrototypeOf?(target: T): object | null;\n\n    /**\n     * A trap for the `in` operator.\n     * @param target The original object which is being proxied.\n     * @param p The name or `Symbol` of the property to check for existence.\n     */\n    has?(target: T, p: string | symbol): boolean;\n\n    /**\n     * A trap for `Object.isExtensible()`.\n     * @param target The original object which is being proxied.\n     */\n    isExtensible?(target: T): boolean;\n\n    /**\n     * A trap for `Reflect.ownKeys()`.\n     * @param target The original object which is being proxied.\n     */\n    ownKeys?(target: T): ArrayLike<string | symbol>;\n\n    /**\n     * A trap for `Object.preventExtensions()`.\n     * @param target The original object which is being proxied.\n     */\n    preventExtensions?(target: T): boolean;\n\n    /**\n     * A trap for setting a property value.\n     * @param target The original object which is being proxied.\n     * @param p The name or `Symbol` of the property to set.\n     * @param receiver The object to which the assignment was originally directed.\n     * @returns A `Boolean` indicating whether or not the property was set.\n     */\n    set?(target: T, p: string | symbol, newValue: any, receiver: any): boolean;\n\n    /**\n     * A trap for `Object.setPrototypeOf()`.\n     * @param target The original object which is being proxied.\n     * @param newPrototype The object\'s new prototype or `null`.\n     */\n    setPrototypeOf?(target: T, v: object | null): boolean;\n}\n\ninterface ProxyConstructor {\n    /**\n     * Creates a revocable Proxy object.\n     * @param target A target object to wrap with Proxy.\n     * @param handler An object whose properties define the behavior of Proxy when an operation is attempted on it.\n     */\n    revocable<T extends object>(target: T, handler: ProxyHandler<T>): { proxy: T; revoke: () => void; };\n\n    /**\n     * Creates a Proxy object. The Proxy object allows you to create an object that can be used in place of the\n     * original object, but which may redefine fundamental Object operations like getting, setting, and defining\n     * properties. Proxy objects are commonly used to log property accesses, validate, format, or sanitize inputs.\n     * @param target A target object to wrap with Proxy.\n     * @param handler An object whose properties define the behavior of Proxy when an operation is attempted on it.\n     */\n    new <T extends object>(target: T, handler: ProxyHandler<T>): T;\n}\ndeclare var Proxy: ProxyConstructor;\n',
  'typescript/lib/lib.es2015.reflect.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ndeclare namespace Reflect {\n    /**\n     * Calls the function with the specified object as the this value\n     * and the elements of specified array as the arguments.\n     * @param target The function to call.\n     * @param thisArgument The object to be used as the this object.\n     * @param argumentsList An array of argument values to be passed to the function.\n     */\n    function apply<T, A extends readonly any[], R>(\n        target: (this: T, ...args: A) => R,\n        thisArgument: T,\n        argumentsList: Readonly<A>,\n    ): R;\n    function apply(target: Function, thisArgument: any, argumentsList: ArrayLike<any>): any;\n\n    /**\n     * Constructs the target with the elements of specified array as the arguments\n     * and the specified constructor as the `new.target` value.\n     * @param target The constructor to invoke.\n     * @param argumentsList An array of argument values to be passed to the constructor.\n     * @param newTarget The constructor to be used as the `new.target` object.\n     */\n    function construct<A extends readonly any[], R>(\n        target: new (...args: A) => R,\n        argumentsList: Readonly<A>,\n        newTarget?: new (...args: any) => any,\n    ): R;\n    function construct(target: Function, argumentsList: ArrayLike<any>, newTarget?: Function): any;\n\n    /**\n     * Adds a property to an object, or modifies attributes of an existing property.\n     * @param target Object on which to add or modify the property. This can be a native JavaScript object\n     *        (that is, a user-defined object or a built in object) or a DOM object.\n     * @param propertyKey The property name.\n     * @param attributes Descriptor for the property. It can be for a data property or an accessor property.\n     */\n    function defineProperty(target: object, propertyKey: PropertyKey, attributes: PropertyDescriptor & ThisType<any>): boolean;\n\n    /**\n     * Removes a property from an object, equivalent to `delete target[propertyKey]`,\n     * except it won\'t throw if `target[propertyKey]` is non-configurable.\n     * @param target Object from which to remove the own property.\n     * @param propertyKey The property name.\n     */\n    function deleteProperty(target: object, propertyKey: PropertyKey): boolean;\n\n    /**\n     * Gets the property of target, equivalent to `target[propertyKey]` when `receiver === target`.\n     * @param target Object that contains the property on itself or in its prototype chain.\n     * @param propertyKey The property name.\n     * @param receiver The reference to use as the `this` value in the getter function,\n     *        if `target[propertyKey]` is an accessor property.\n     */\n    function get<T extends object, P extends PropertyKey>(\n        target: T,\n        propertyKey: P,\n        receiver?: unknown,\n    ): P extends keyof T ? T[P] : any;\n\n    /**\n     * Gets the own property descriptor of the specified object.\n     * An own property descriptor is one that is defined directly on the object and is not inherited from the object\'s prototype.\n     * @param target Object that contains the property.\n     * @param propertyKey The property name.\n     */\n    function getOwnPropertyDescriptor<T extends object, P extends PropertyKey>(\n        target: T,\n        propertyKey: P,\n    ): TypedPropertyDescriptor<P extends keyof T ? T[P] : any> | undefined;\n\n    /**\n     * Returns the prototype of an object.\n     * @param target The object that references the prototype.\n     */\n    function getPrototypeOf(target: object): object | null;\n\n    /**\n     * Equivalent to `propertyKey in target`.\n     * @param target Object that contains the property on itself or in its prototype chain.\n     * @param propertyKey Name of the property.\n     */\n    function has(target: object, propertyKey: PropertyKey): boolean;\n\n    /**\n     * Returns a value that indicates whether new properties can be added to an object.\n     * @param target Object to test.\n     */\n    function isExtensible(target: object): boolean;\n\n    /**\n     * Returns the string and symbol keys of the own properties of an object. The own properties of an object\n     * are those that are defined directly on that object, and are not inherited from the object\'s prototype.\n     * @param target Object that contains the own properties.\n     */\n    function ownKeys(target: object): (string | symbol)[];\n\n    /**\n     * Prevents the addition of new properties to an object.\n     * @param target Object to make non-extensible.\n     * @return Whether the object has been made non-extensible.\n     */\n    function preventExtensions(target: object): boolean;\n\n    /**\n     * Sets the property of target, equivalent to `target[propertyKey] = value` when `receiver === target`.\n     * @param target Object that contains the property on itself or in its prototype chain.\n     * @param propertyKey Name of the property.\n     * @param receiver The reference to use as the `this` value in the setter function,\n     *        if `target[propertyKey]` is an accessor property.\n     */\n    function set<T extends object, P extends PropertyKey>(\n        target: T,\n        propertyKey: P,\n        value: P extends keyof T ? T[P] : any,\n        receiver?: any,\n    ): boolean;\n    function set(target: object, propertyKey: PropertyKey, value: any, receiver?: any): boolean;\n\n    /**\n     * Sets the prototype of a specified object o to object proto or null.\n     * @param target The object to change its prototype.\n     * @param proto The value of the new prototype or null.\n     * @return Whether setting the prototype was successful.\n     */\n    function setPrototypeOf(target: object, proto: object | null): boolean;\n}\n',
  'typescript/lib/lib.es2015.symbol.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ninterface SymbolConstructor {\n    /**\n     * A reference to the prototype.\n     */\n    readonly prototype: Symbol;\n\n    /**\n     * Returns a new unique Symbol value.\n     * @param  description Description of the new Symbol object.\n     */\n    (description?: string | number): symbol;\n\n    /**\n     * Returns a Symbol object from the global symbol registry matching the given key if found.\n     * Otherwise, returns a new symbol with this key.\n     * @param key key to search for.\n     */\n    for(key: string): symbol;\n\n    /**\n     * Returns a key from the global symbol registry matching the given Symbol if found.\n     * Otherwise, returns a undefined.\n     * @param sym Symbol to find the key for.\n     */\n    keyFor(sym: symbol): string | undefined;\n}\n\ndeclare var Symbol: SymbolConstructor;\n',
  'typescript/lib/lib.es2015.symbol.wellknown.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2015.symbol" />\n\ninterface SymbolConstructor {\n    /**\n     * A method that determines if a constructor object recognizes an object as one of the\n     * constructor’s instances. Called by the semantics of the instanceof operator.\n     */\n    readonly hasInstance: unique symbol;\n\n    /**\n     * A Boolean value that if true indicates that an object should flatten to its array elements\n     * by Array.prototype.concat.\n     */\n    readonly isConcatSpreadable: unique symbol;\n\n    /**\n     * A regular expression method that matches the regular expression against a string. Called\n     * by the String.prototype.match method.\n     */\n    readonly match: unique symbol;\n\n    /**\n     * A regular expression method that replaces matched substrings of a string. Called by the\n     * String.prototype.replace method.\n     */\n    readonly replace: unique symbol;\n\n    /**\n     * A regular expression method that returns the index within a string that matches the\n     * regular expression. Called by the String.prototype.search method.\n     */\n    readonly search: unique symbol;\n\n    /**\n     * A function valued property that is the constructor function that is used to create\n     * derived objects.\n     */\n    readonly species: unique symbol;\n\n    /**\n     * A regular expression method that splits a string at the indices that match the regular\n     * expression. Called by the String.prototype.split method.\n     */\n    readonly split: unique symbol;\n\n    /**\n     * A method that converts an object to a corresponding primitive value.\n     * Called by the ToPrimitive abstract operation.\n     */\n    readonly toPrimitive: unique symbol;\n\n    /**\n     * A String value that is used in the creation of the default string description of an object.\n     * Called by the built-in method Object.prototype.toString.\n     */\n    readonly toStringTag: unique symbol;\n\n    /**\n     * An Object whose truthy properties are properties that are excluded from the \'with\'\n     * environment bindings of the associated objects.\n     */\n    readonly unscopables: unique symbol;\n}\n\ninterface Symbol {\n    /**\n     * Converts a Symbol object to a symbol.\n     */\n    [Symbol.toPrimitive](hint: string): symbol;\n\n    readonly [Symbol.toStringTag]: string;\n}\n\ninterface Array<T> {\n    /**\n     * Is an object whose properties have the value \'true\'\n     * when they will be absent when used in a \'with\' statement.\n     */\n    readonly [Symbol.unscopables]: {\n        [K in keyof any[]]?: boolean;\n    };\n}\n\ninterface ReadonlyArray<T> {\n    /**\n     * Is an object whose properties have the value \'true\'\n     * when they will be absent when used in a \'with\' statement.\n     */\n    readonly [Symbol.unscopables]: {\n        [K in keyof readonly any[]]?: boolean;\n    };\n}\n\ninterface Date {\n    /**\n     * Converts a Date object to a string.\n     */\n    [Symbol.toPrimitive](hint: "default"): string;\n    /**\n     * Converts a Date object to a string.\n     */\n    [Symbol.toPrimitive](hint: "string"): string;\n    /**\n     * Converts a Date object to a number.\n     */\n    [Symbol.toPrimitive](hint: "number"): number;\n    /**\n     * Converts a Date object to a string or number.\n     *\n     * @param hint The strings "number", "string", or "default" to specify what primitive to return.\n     *\n     * @throws {TypeError} If \'hint\' was given something other than "number", "string", or "default".\n     * @returns A number if \'hint\' was "number", a string if \'hint\' was "string" or "default".\n     */\n    [Symbol.toPrimitive](hint: string): string | number;\n}\n\ninterface Map<K, V> {\n    readonly [Symbol.toStringTag]: string;\n}\n\ninterface WeakMap<K extends WeakKey, V> {\n    readonly [Symbol.toStringTag]: string;\n}\n\ninterface Set<T> {\n    readonly [Symbol.toStringTag]: string;\n}\n\ninterface WeakSet<T extends WeakKey> {\n    readonly [Symbol.toStringTag]: string;\n}\n\ninterface JSON {\n    readonly [Symbol.toStringTag]: string;\n}\n\ninterface Function {\n    /**\n     * Determines whether the given value inherits from this function if this function was used\n     * as a constructor function.\n     *\n     * A constructor function can control which objects are recognized as its instances by\n     * \'instanceof\' by overriding this method.\n     */\n    [Symbol.hasInstance](value: any): boolean;\n}\n\ninterface GeneratorFunction {\n    readonly [Symbol.toStringTag]: string;\n}\n\ninterface Math {\n    readonly [Symbol.toStringTag]: string;\n}\n\ninterface Promise<T> {\n    readonly [Symbol.toStringTag]: string;\n}\n\ninterface PromiseConstructor {\n    readonly [Symbol.species]: PromiseConstructor;\n}\n\ninterface RegExp {\n    /**\n     * Matches a string with this regular expression, and returns an array containing the results of\n     * that search.\n     * @param string A string to search within.\n     */\n    [Symbol.match](string: string): RegExpMatchArray | null;\n\n    /**\n     * Replaces text in a string, using this regular expression.\n     * @param string A String object or string literal whose contents matching against\n     *               this regular expression will be replaced\n     * @param replaceValue A String object or string literal containing the text to replace for every\n     *                     successful match of this regular expression.\n     */\n    [Symbol.replace](string: string, replaceValue: string): string;\n\n    /**\n     * Replaces text in a string, using this regular expression.\n     * @param string A String object or string literal whose contents matching against\n     *               this regular expression will be replaced\n     * @param replacer A function that returns the replacement text.\n     */\n    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;\n\n    /**\n     * Finds the position beginning first substring match in a regular expression search\n     * using this regular expression.\n     *\n     * @param string The string to search within.\n     */\n    [Symbol.search](string: string): number;\n\n    /**\n     * Returns an array of substrings that were delimited by strings in the original input that\n     * match against this regular expression.\n     *\n     * If the regular expression contains capturing parentheses, then each time this\n     * regular expression matches, the results (including any undefined results) of the\n     * capturing parentheses are spliced.\n     *\n     * @param string string value to split\n     * @param limit if not undefined, the output array is truncated so that it contains no more\n     * than \'limit\' elements.\n     */\n    [Symbol.split](string: string, limit?: number): string[];\n}\n\ninterface RegExpConstructor {\n    readonly [Symbol.species]: RegExpConstructor;\n}\n\ninterface String {\n    /**\n     * Matches a string or an object that supports being matched against, and returns an array\n     * containing the results of that search, or null if no matches are found.\n     * @param matcher An object that supports being matched against.\n     */\n    match(matcher: { [Symbol.match](string: string): RegExpMatchArray | null; }): RegExpMatchArray | null;\n\n    /**\n     * Passes a string and {@linkcode replaceValue} to the `[Symbol.replace]` method on {@linkcode searchValue}. This method is expected to implement its own replacement algorithm.\n     * @param searchValue An object that supports searching for and replacing matches within a string.\n     * @param replaceValue The replacement text.\n     */\n    replace(searchValue: { [Symbol.replace](string: string, replaceValue: string): string; }, replaceValue: string): string;\n\n    /**\n     * Replaces text in a string, using an object that supports replacement within a string.\n     * @param searchValue A object can search for and replace matches within a string.\n     * @param replacer A function that returns the replacement text.\n     */\n    replace(searchValue: { [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string; }, replacer: (substring: string, ...args: any[]) => string): string;\n\n    /**\n     * Finds the first substring match in a regular expression search.\n     * @param searcher An object which supports searching within a string.\n     */\n    search(searcher: { [Symbol.search](string: string): number; }): number;\n\n    /**\n     * Split a string into substrings using the specified separator and return them as an array.\n     * @param splitter An object that can split a string.\n     * @param limit A value used to limit the number of elements returned in the array.\n     */\n    split(splitter: { [Symbol.split](string: string, limit?: number): string[]; }, limit?: number): string[];\n}\n\ninterface ArrayBuffer {\n    readonly [Symbol.toStringTag]: string;\n}\n\ninterface DataView<TArrayBuffer extends ArrayBufferLike> {\n    readonly [Symbol.toStringTag]: string;\n}\n\ninterface Int8Array<TArrayBuffer extends ArrayBufferLike> {\n    readonly [Symbol.toStringTag]: "Int8Array";\n}\n\ninterface Uint8Array<TArrayBuffer extends ArrayBufferLike> {\n    readonly [Symbol.toStringTag]: "Uint8Array";\n}\n\ninterface Uint8ClampedArray<TArrayBuffer extends ArrayBufferLike> {\n    readonly [Symbol.toStringTag]: "Uint8ClampedArray";\n}\n\ninterface Int16Array<TArrayBuffer extends ArrayBufferLike> {\n    readonly [Symbol.toStringTag]: "Int16Array";\n}\n\ninterface Uint16Array<TArrayBuffer extends ArrayBufferLike> {\n    readonly [Symbol.toStringTag]: "Uint16Array";\n}\n\ninterface Int32Array<TArrayBuffer extends ArrayBufferLike> {\n    readonly [Symbol.toStringTag]: "Int32Array";\n}\n\ninterface Uint32Array<TArrayBuffer extends ArrayBufferLike> {\n    readonly [Symbol.toStringTag]: "Uint32Array";\n}\n\ninterface Float32Array<TArrayBuffer extends ArrayBufferLike> {\n    readonly [Symbol.toStringTag]: "Float32Array";\n}\n\ninterface Float64Array<TArrayBuffer extends ArrayBufferLike> {\n    readonly [Symbol.toStringTag]: "Float64Array";\n}\n\ninterface ArrayConstructor {\n    readonly [Symbol.species]: ArrayConstructor;\n}\ninterface MapConstructor {\n    readonly [Symbol.species]: MapConstructor;\n}\ninterface SetConstructor {\n    readonly [Symbol.species]: SetConstructor;\n}\ninterface ArrayBufferConstructor {\n    readonly [Symbol.species]: ArrayBufferConstructor;\n}\n',
  'typescript/lib/lib.es2016.array.include.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ninterface Array<T> {\n    /**\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\n     * @param searchElement The element to search for.\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\n     */\n    includes(searchElement: T, fromIndex?: number): boolean;\n}\n\ninterface ReadonlyArray<T> {\n    /**\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\n     * @param searchElement The element to search for.\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\n     */\n    includes(searchElement: T, fromIndex?: number): boolean;\n}\n\ninterface Int8Array<TArrayBuffer extends ArrayBufferLike> {\n    /**\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\n     * @param searchElement The element to search for.\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\n     */\n    includes(searchElement: number, fromIndex?: number): boolean;\n}\n\ninterface Uint8Array<TArrayBuffer extends ArrayBufferLike> {\n    /**\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\n     * @param searchElement The element to search for.\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\n     */\n    includes(searchElement: number, fromIndex?: number): boolean;\n}\n\ninterface Uint8ClampedArray<TArrayBuffer extends ArrayBufferLike> {\n    /**\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\n     * @param searchElement The element to search for.\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\n     */\n    includes(searchElement: number, fromIndex?: number): boolean;\n}\n\ninterface Int16Array<TArrayBuffer extends ArrayBufferLike> {\n    /**\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\n     * @param searchElement The element to search for.\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\n     */\n    includes(searchElement: number, fromIndex?: number): boolean;\n}\n\ninterface Uint16Array<TArrayBuffer extends ArrayBufferLike> {\n    /**\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\n     * @param searchElement The element to search for.\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\n     */\n    includes(searchElement: number, fromIndex?: number): boolean;\n}\n\ninterface Int32Array<TArrayBuffer extends ArrayBufferLike> {\n    /**\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\n     * @param searchElement The element to search for.\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\n     */\n    includes(searchElement: number, fromIndex?: number): boolean;\n}\n\ninterface Uint32Array<TArrayBuffer extends ArrayBufferLike> {\n    /**\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\n     * @param searchElement The element to search for.\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\n     */\n    includes(searchElement: number, fromIndex?: number): boolean;\n}\n\ninterface Float32Array<TArrayBuffer extends ArrayBufferLike> {\n    /**\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\n     * @param searchElement The element to search for.\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\n     */\n    includes(searchElement: number, fromIndex?: number): boolean;\n}\n\ninterface Float64Array<TArrayBuffer extends ArrayBufferLike> {\n    /**\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\n     * @param searchElement The element to search for.\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\n     */\n    includes(searchElement: number, fromIndex?: number): boolean;\n}\n',
  'typescript/lib/lib.es2016.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2015" />\n/// <reference lib="es2016.array.include" />\n/// <reference lib="es2016.intl" />\n',
  'typescript/lib/lib.es2016.intl.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ndeclare namespace Intl {\n    /**\n     * The `Intl.getCanonicalLocales()` method returns an array containing\n     * the canonical locale names. Duplicates will be omitted and elements\n     * will be validated as structurally valid language tags.\n     *\n     * [MDN](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/getCanonicalLocales)\n     *\n     * @param locale A list of String values for which to get the canonical locale names\n     * @returns An array containing the canonical and validated locale names.\n     */\n    function getCanonicalLocales(locale?: string | readonly string[]): string[];\n}\n',
  'typescript/lib/lib.es2017.arraybuffer.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ninterface ArrayBufferConstructor {\n    new (): ArrayBuffer;\n}\n',
  'typescript/lib/lib.es2017.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2016" />\n/// <reference lib="es2017.arraybuffer" />\n/// <reference lib="es2017.date" />\n/// <reference lib="es2017.intl" />\n/// <reference lib="es2017.object" />\n/// <reference lib="es2017.sharedmemory" />\n/// <reference lib="es2017.string" />\n/// <reference lib="es2017.typedarrays" />\n',
  'typescript/lib/lib.es2017.date.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ninterface DateConstructor {\n    /**\n     * Returns the number of milliseconds between midnight, January 1, 1970 Universal Coordinated Time (UTC) (or GMT) and the specified date.\n     * @param year The full year designation is required for cross-century date accuracy. If year is between 0 and 99 is used, then year is assumed to be 1900 + year.\n     * @param monthIndex The month as a number between 0 and 11 (January to December).\n     * @param date The date as a number between 1 and 31.\n     * @param hours Must be supplied if minutes is supplied. A number from 0 to 23 (midnight to 11pm) that specifies the hour.\n     * @param minutes Must be supplied if seconds is supplied. A number from 0 to 59 that specifies the minutes.\n     * @param seconds Must be supplied if milliseconds is supplied. A number from 0 to 59 that specifies the seconds.\n     * @param ms A number from 0 to 999 that specifies the milliseconds.\n     */\n    UTC(year: number, monthIndex?: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): number;\n}\n',
  'typescript/lib/lib.es2017.intl.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ndeclare namespace Intl {\n    interface DateTimeFormatPartTypesRegistry {\n        day: any;\n        dayPeriod: any;\n        era: any;\n        hour: any;\n        literal: any;\n        minute: any;\n        month: any;\n        second: any;\n        timeZoneName: any;\n        weekday: any;\n        year: any;\n    }\n\n    type DateTimeFormatPartTypes = keyof DateTimeFormatPartTypesRegistry;\n\n    interface DateTimeFormatPart {\n        type: DateTimeFormatPartTypes;\n        value: string;\n    }\n\n    interface DateTimeFormat {\n        formatToParts(date?: Date | number): DateTimeFormatPart[];\n    }\n}\n',
  'typescript/lib/lib.es2017.object.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ninterface ObjectConstructor {\n    /**\n     * Returns an array of values of the enumerable own properties of an object\n     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\n     */\n    values<T>(o: { [s: string]: T; } | ArrayLike<T>): T[];\n\n    /**\n     * Returns an array of values of the enumerable own properties of an object\n     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\n     */\n    values(o: {}): any[];\n\n    /**\n     * Returns an array of key/values of the enumerable own properties of an object\n     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\n     */\n    entries<T>(o: { [s: string]: T; } | ArrayLike<T>): [string, T][];\n\n    /**\n     * Returns an array of key/values of the enumerable own properties of an object\n     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\n     */\n    entries(o: {}): [string, any][];\n\n    /**\n     * Returns an object containing all own property descriptors of an object\n     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\n     */\n    getOwnPropertyDescriptors<T>(o: T): { [P in keyof T]: TypedPropertyDescriptor<T[P]>; } & { [x: string]: PropertyDescriptor; };\n}\n',
  'typescript/lib/lib.es2017.sharedmemory.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2015.symbol" />\n/// <reference lib="es2015.symbol.wellknown" />\n\ninterface SharedArrayBuffer {\n    /**\n     * Read-only. The length of the ArrayBuffer (in bytes).\n     */\n    readonly byteLength: number;\n\n    /**\n     * Returns a section of an SharedArrayBuffer.\n     */\n    slice(begin?: number, end?: number): SharedArrayBuffer;\n    readonly [Symbol.species]: SharedArrayBuffer;\n    readonly [Symbol.toStringTag]: "SharedArrayBuffer";\n}\n\ninterface SharedArrayBufferConstructor {\n    readonly prototype: SharedArrayBuffer;\n    new (byteLength?: number): SharedArrayBuffer;\n}\ndeclare var SharedArrayBuffer: SharedArrayBufferConstructor;\n\ninterface ArrayBufferTypes {\n    SharedArrayBuffer: SharedArrayBuffer;\n}\n\ninterface Atomics {\n    /**\n     * Adds a value to the value at the given position in the array, returning the original value.\n     * Until this atomic operation completes, any other read or write operation against the array\n     * will block.\n     */\n    add(typedArray: Int8Array<ArrayBufferLike> | Uint8Array<ArrayBufferLike> | Int16Array<ArrayBufferLike> | Uint16Array<ArrayBufferLike> | Int32Array<ArrayBufferLike> | Uint32Array<ArrayBufferLike>, index: number, value: number): number;\n\n    /**\n     * Stores the bitwise AND of a value with the value at the given position in the array,\n     * returning the original value. Until this atomic operation completes, any other read or\n     * write operation against the array will block.\n     */\n    and(typedArray: Int8Array<ArrayBufferLike> | Uint8Array<ArrayBufferLike> | Int16Array<ArrayBufferLike> | Uint16Array<ArrayBufferLike> | Int32Array<ArrayBufferLike> | Uint32Array<ArrayBufferLike>, index: number, value: number): number;\n\n    /**\n     * Replaces the value at the given position in the array if the original value equals the given\n     * expected value, returning the original value. Until this atomic operation completes, any\n     * other read or write operation against the array will block.\n     */\n    compareExchange(typedArray: Int8Array<ArrayBufferLike> | Uint8Array<ArrayBufferLike> | Int16Array<ArrayBufferLike> | Uint16Array<ArrayBufferLike> | Int32Array<ArrayBufferLike> | Uint32Array<ArrayBufferLike>, index: number, expectedValue: number, replacementValue: number): number;\n\n    /**\n     * Replaces the value at the given position in the array, returning the original value. Until\n     * this atomic operation completes, any other read or write operation against the array will\n     * block.\n     */\n    exchange(typedArray: Int8Array<ArrayBufferLike> | Uint8Array<ArrayBufferLike> | Int16Array<ArrayBufferLike> | Uint16Array<ArrayBufferLike> | Int32Array<ArrayBufferLike> | Uint32Array<ArrayBufferLike>, index: number, value: number): number;\n\n    /**\n     * Returns a value indicating whether high-performance algorithms can use atomic operations\n     * (`true`) or must use locks (`false`) for the given number of bytes-per-element of a typed\n     * array.\n     */\n    isLockFree(size: number): boolean;\n\n    /**\n     * Returns the value at the given position in the array. Until this atomic operation completes,\n     * any other read or write operation against the array will block.\n     */\n    load(typedArray: Int8Array<ArrayBufferLike> | Uint8Array<ArrayBufferLike> | Int16Array<ArrayBufferLike> | Uint16Array<ArrayBufferLike> | Int32Array<ArrayBufferLike> | Uint32Array<ArrayBufferLike>, index: number): number;\n\n    /**\n     * Stores the bitwise OR of a value with the value at the given position in the array,\n     * returning the original value. Until this atomic operation completes, any other read or write\n     * operation against the array will block.\n     */\n    or(typedArray: Int8Array<ArrayBufferLike> | Uint8Array<ArrayBufferLike> | Int16Array<ArrayBufferLike> | Uint16Array<ArrayBufferLike> | Int32Array<ArrayBufferLike> | Uint32Array<ArrayBufferLike>, index: number, value: number): number;\n\n    /**\n     * Stores a value at the given position in the array, returning the new value. Until this\n     * atomic operation completes, any other read or write operation against the array will block.\n     */\n    store(typedArray: Int8Array<ArrayBufferLike> | Uint8Array<ArrayBufferLike> | Int16Array<ArrayBufferLike> | Uint16Array<ArrayBufferLike> | Int32Array<ArrayBufferLike> | Uint32Array<ArrayBufferLike>, index: number, value: number): number;\n\n    /**\n     * Subtracts a value from the value at the given position in the array, returning the original\n     * value. Until this atomic operation completes, any other read or write operation against the\n     * array will block.\n     */\n    sub(typedArray: Int8Array<ArrayBufferLike> | Uint8Array<ArrayBufferLike> | Int16Array<ArrayBufferLike> | Uint16Array<ArrayBufferLike> | Int32Array<ArrayBufferLike> | Uint32Array<ArrayBufferLike>, index: number, value: number): number;\n\n    /**\n     * If the value at the given position in the array is equal to the provided value, the current\n     * agent is put to sleep causing execution to suspend until the timeout expires (returning\n     * `"timed-out"`) or until the agent is awoken (returning `"ok"`); otherwise, returns\n     * `"not-equal"`.\n     */\n    wait(typedArray: Int32Array<ArrayBufferLike>, index: number, value: number, timeout?: number): "ok" | "not-equal" | "timed-out";\n\n    /**\n     * Wakes up sleeping agents that are waiting on the given index of the array, returning the\n     * number of agents that were awoken.\n     * @param typedArray A shared Int32Array<ArrayBufferLike>.\n     * @param index The position in the typedArray to wake up on.\n     * @param count The number of sleeping agents to notify. Defaults to +Infinity.\n     */\n    notify(typedArray: Int32Array<ArrayBufferLike>, index: number, count?: number): number;\n\n    /**\n     * Stores the bitwise XOR of a value with the value at the given position in the array,\n     * returning the original value. Until this atomic operation completes, any other read or write\n     * operation against the array will block.\n     */\n    xor(typedArray: Int8Array<ArrayBufferLike> | Uint8Array<ArrayBufferLike> | Int16Array<ArrayBufferLike> | Uint16Array<ArrayBufferLike> | Int32Array<ArrayBufferLike> | Uint32Array<ArrayBufferLike>, index: number, value: number): number;\n\n    readonly [Symbol.toStringTag]: "Atomics";\n}\n\ndeclare var Atomics: Atomics;\n',
  'typescript/lib/lib.es2017.string.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ninterface String {\n    /**\n     * Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\n     * The padding is applied from the start (left) of the current string.\n     *\n     * @param maxLength The length of the resulting string once the current string has been padded.\n     *        If this parameter is smaller than the current string\'s length, the current string will be returned as it is.\n     *\n     * @param fillString The string to pad the current string with.\n     *        If this string is too long, it will be truncated and the left-most part will be applied.\n     *        The default value for this parameter is " " (U+0020).\n     */\n    padStart(maxLength: number, fillString?: string): string;\n\n    /**\n     * Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\n     * The padding is applied from the end (right) of the current string.\n     *\n     * @param maxLength The length of the resulting string once the current string has been padded.\n     *        If this parameter is smaller than the current string\'s length, the current string will be returned as it is.\n     *\n     * @param fillString The string to pad the current string with.\n     *        If this string is too long, it will be truncated and the left-most part will be applied.\n     *        The default value for this parameter is " " (U+0020).\n     */\n    padEnd(maxLength: number, fillString?: string): string;\n}\n',
  'typescript/lib/lib.es2017.typedarrays.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ninterface Int8ArrayConstructor {\n    new (): Int8Array<ArrayBuffer>;\n}\n\ninterface Uint8ArrayConstructor {\n    new (): Uint8Array<ArrayBuffer>;\n}\n\ninterface Uint8ClampedArrayConstructor {\n    new (): Uint8ClampedArray<ArrayBuffer>;\n}\n\ninterface Int16ArrayConstructor {\n    new (): Int16Array<ArrayBuffer>;\n}\n\ninterface Uint16ArrayConstructor {\n    new (): Uint16Array<ArrayBuffer>;\n}\n\ninterface Int32ArrayConstructor {\n    new (): Int32Array<ArrayBuffer>;\n}\n\ninterface Uint32ArrayConstructor {\n    new (): Uint32Array<ArrayBuffer>;\n}\n\ninterface Float32ArrayConstructor {\n    new (): Float32Array<ArrayBuffer>;\n}\n\ninterface Float64ArrayConstructor {\n    new (): Float64Array<ArrayBuffer>;\n}\n',
  'typescript/lib/lib.es2018.asyncgenerator.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2018.asynciterable" />\n\ninterface AsyncGenerator<T = unknown, TReturn = any, TNext = any> extends AsyncIteratorObject<T, TReturn, TNext> {\n    // NOTE: \'next\' is defined using a tuple to ensure we report the correct assignability errors in all places.\n    next(...[value]: [] | [TNext]): Promise<IteratorResult<T, TReturn>>;\n    return(value: TReturn | PromiseLike<TReturn>): Promise<IteratorResult<T, TReturn>>;\n    throw(e: any): Promise<IteratorResult<T, TReturn>>;\n    [Symbol.asyncIterator](): AsyncGenerator<T, TReturn, TNext>;\n}\n\ninterface AsyncGeneratorFunction {\n    /**\n     * Creates a new AsyncGenerator object.\n     * @param args A list of arguments the function accepts.\n     */\n    new (...args: any[]): AsyncGenerator;\n    /**\n     * Creates a new AsyncGenerator object.\n     * @param args A list of arguments the function accepts.\n     */\n    (...args: any[]): AsyncGenerator;\n    /**\n     * The length of the arguments.\n     */\n    readonly length: number;\n    /**\n     * Returns the name of the function.\n     */\n    readonly name: string;\n    /**\n     * A reference to the prototype.\n     */\n    readonly prototype: AsyncGenerator;\n}\n\ninterface AsyncGeneratorFunctionConstructor {\n    /**\n     * Creates a new AsyncGenerator function.\n     * @param args A list of arguments the function accepts.\n     */\n    new (...args: string[]): AsyncGeneratorFunction;\n    /**\n     * Creates a new AsyncGenerator function.\n     * @param args A list of arguments the function accepts.\n     */\n    (...args: string[]): AsyncGeneratorFunction;\n    /**\n     * The length of the arguments.\n     */\n    readonly length: number;\n    /**\n     * Returns the name of the function.\n     */\n    readonly name: string;\n    /**\n     * A reference to the prototype.\n     */\n    readonly prototype: AsyncGeneratorFunction;\n}\n',
  'typescript/lib/lib.es2018.asynciterable.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2015.symbol" />\n/// <reference lib="es2015.iterable" />\n\ninterface SymbolConstructor {\n    /**\n     * A method that returns the default async iterator for an object. Called by the semantics of\n     * the for-await-of statement.\n     */\n    readonly asyncIterator: unique symbol;\n}\n\ninterface AsyncIterator<T, TReturn = any, TNext = any> {\n    // NOTE: \'next\' is defined using a tuple to ensure we report the correct assignability errors in all places.\n    next(...[value]: [] | [TNext]): Promise<IteratorResult<T, TReturn>>;\n    return?(value?: TReturn | PromiseLike<TReturn>): Promise<IteratorResult<T, TReturn>>;\n    throw?(e?: any): Promise<IteratorResult<T, TReturn>>;\n}\n\ninterface AsyncIterable<T, TReturn = any, TNext = any> {\n    [Symbol.asyncIterator](): AsyncIterator<T, TReturn, TNext>;\n}\n\n/**\n * Describes a user-defined {@link AsyncIterator} that is also async iterable.\n */\ninterface AsyncIterableIterator<T, TReturn = any, TNext = any> extends AsyncIterator<T, TReturn, TNext> {\n    [Symbol.asyncIterator](): AsyncIterableIterator<T, TReturn, TNext>;\n}\n\n/**\n * Describes an {@link AsyncIterator} produced by the runtime that inherits from the intrinsic `AsyncIterator.prototype`.\n */\ninterface AsyncIteratorObject<T, TReturn = unknown, TNext = unknown> extends AsyncIterator<T, TReturn, TNext> {\n    [Symbol.asyncIterator](): AsyncIteratorObject<T, TReturn, TNext>;\n}\n',
  'typescript/lib/lib.es2018.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2017" />\n/// <reference lib="es2018.asynciterable" />\n/// <reference lib="es2018.asyncgenerator" />\n/// <reference lib="es2018.promise" />\n/// <reference lib="es2018.regexp" />\n/// <reference lib="es2018.intl" />\n',
  'typescript/lib/lib.es2018.intl.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ndeclare namespace Intl {\n    // http://cldr.unicode.org/index/cldr-spec/plural-rules#TOC-Determining-Plural-Categories\n    type LDMLPluralRule = "zero" | "one" | "two" | "few" | "many" | "other";\n    type PluralRuleType = "cardinal" | "ordinal";\n\n    interface PluralRulesOptions {\n        localeMatcher?: "lookup" | "best fit" | undefined;\n        type?: PluralRuleType | undefined;\n        minimumIntegerDigits?: number | undefined;\n        minimumFractionDigits?: number | undefined;\n        maximumFractionDigits?: number | undefined;\n        minimumSignificantDigits?: number | undefined;\n        maximumSignificantDigits?: number | undefined;\n    }\n\n    interface ResolvedPluralRulesOptions {\n        locale: string;\n        pluralCategories: LDMLPluralRule[];\n        type: PluralRuleType;\n        minimumIntegerDigits: number;\n        minimumFractionDigits: number;\n        maximumFractionDigits: number;\n        minimumSignificantDigits?: number;\n        maximumSignificantDigits?: number;\n    }\n\n    interface PluralRules {\n        resolvedOptions(): ResolvedPluralRulesOptions;\n        select(n: number): LDMLPluralRule;\n    }\n\n    interface PluralRulesConstructor {\n        new (locales?: string | readonly string[], options?: PluralRulesOptions): PluralRules;\n        (locales?: string | readonly string[], options?: PluralRulesOptions): PluralRules;\n        supportedLocalesOf(locales: string | readonly string[], options?: { localeMatcher?: "lookup" | "best fit"; }): string[];\n    }\n\n    const PluralRules: PluralRulesConstructor;\n\n    interface NumberFormatPartTypeRegistry {\n        literal: never;\n        nan: never;\n        infinity: never;\n        percent: never;\n        integer: never;\n        group: never;\n        decimal: never;\n        fraction: never;\n        plusSign: never;\n        minusSign: never;\n        percentSign: never;\n        currency: never;\n    }\n\n    type NumberFormatPartTypes = keyof NumberFormatPartTypeRegistry;\n\n    interface NumberFormatPart {\n        type: NumberFormatPartTypes;\n        value: string;\n    }\n\n    interface NumberFormat {\n        formatToParts(number?: number | bigint): NumberFormatPart[];\n    }\n}\n',
  'typescript/lib/lib.es2018.promise.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/**\n * Represents the completion of an asynchronous operation\n */\ninterface Promise<T> {\n    /**\n     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The\n     * resolved value cannot be modified from the callback.\n     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).\n     * @returns A Promise for the completion of the callback.\n     */\n    finally(onfinally?: (() => void) | undefined | null): Promise<T>;\n}\n',
  'typescript/lib/lib.es2018.regexp.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ninterface RegExpMatchArray {\n    groups?: {\n        [key: string]: string;\n    };\n}\n\ninterface RegExpExecArray {\n    groups?: {\n        [key: string]: string;\n    };\n}\n\ninterface RegExp {\n    /**\n     * Returns a Boolean value indicating the state of the dotAll flag (s) used with a regular expression.\n     * Default is false. Read-only.\n     */\n    readonly dotAll: boolean;\n}\n',
  'typescript/lib/lib.es2019.array.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ntype FlatArray<Arr, Depth extends number> = {\n    done: Arr;\n    recur: Arr extends ReadonlyArray<infer InnerArr> ? FlatArray<InnerArr, [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20][Depth]>\n        : Arr;\n}[Depth extends -1 ? "done" : "recur"];\n\ninterface ReadonlyArray<T> {\n    /**\n     * Calls a defined callback function on each element of an array. Then, flattens the result into\n     * a new array.\n     * This is identical to a map followed by flat with depth 1.\n     *\n     * @param callback A function that accepts up to three arguments. The flatMap method calls the\n     * callback function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callback function. If\n     * thisArg is omitted, undefined is used as the this value.\n     */\n    flatMap<U, This = undefined>(\n        callback: (this: This, value: T, index: number, array: T[]) => U | ReadonlyArray<U>,\n        thisArg?: This,\n    ): U[];\n\n    /**\n     * Returns a new array with all sub-array elements concatenated into it recursively up to the\n     * specified depth.\n     *\n     * @param depth The maximum recursion depth\n     */\n    flat<A, D extends number = 1>(\n        this: A,\n        depth?: D,\n    ): FlatArray<A, D>[];\n}\n\ninterface Array<T> {\n    /**\n     * Calls a defined callback function on each element of an array. Then, flattens the result into\n     * a new array.\n     * This is identical to a map followed by flat with depth 1.\n     *\n     * @param callback A function that accepts up to three arguments. The flatMap method calls the\n     * callback function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callback function. If\n     * thisArg is omitted, undefined is used as the this value.\n     */\n    flatMap<U, This = undefined>(\n        callback: (this: This, value: T, index: number, array: T[]) => U | ReadonlyArray<U>,\n        thisArg?: This,\n    ): U[];\n\n    /**\n     * Returns a new array with all sub-array elements concatenated into it recursively up to the\n     * specified depth.\n     *\n     * @param depth The maximum recursion depth\n     */\n    flat<A, D extends number = 1>(\n        this: A,\n        depth?: D,\n    ): FlatArray<A, D>[];\n}\n',
  'typescript/lib/lib.es2019.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2018" />\n/// <reference lib="es2019.array" />\n/// <reference lib="es2019.object" />\n/// <reference lib="es2019.string" />\n/// <reference lib="es2019.symbol" />\n/// <reference lib="es2019.intl" />\n',
  'typescript/lib/lib.es2019.intl.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ndeclare namespace Intl {\n    interface DateTimeFormatPartTypesRegistry {\n        unknown: never;\n    }\n}\n',
  'typescript/lib/lib.es2019.object.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2015.iterable" />\n\ninterface ObjectConstructor {\n    /**\n     * Returns an object created by key-value entries for properties and methods\n     * @param entries An iterable object that contains key-value entries for properties and methods.\n     */\n    fromEntries<T = any>(entries: Iterable<readonly [PropertyKey, T]>): { [k: string]: T; };\n\n    /**\n     * Returns an object created by key-value entries for properties and methods\n     * @param entries An iterable object that contains key-value entries for properties and methods.\n     */\n    fromEntries(entries: Iterable<readonly any[]>): any;\n}\n',
  'typescript/lib/lib.es2019.string.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ninterface String {\n    /** Removes the trailing white space and line terminator characters from a string. */\n    trimEnd(): string;\n\n    /** Removes the leading white space and line terminator characters from a string. */\n    trimStart(): string;\n\n    /**\n     * Removes the leading white space and line terminator characters from a string.\n     * @deprecated A legacy feature for browser compatibility. Use `trimStart` instead\n     */\n    trimLeft(): string;\n\n    /**\n     * Removes the trailing white space and line terminator characters from a string.\n     * @deprecated A legacy feature for browser compatibility. Use `trimEnd` instead\n     */\n    trimRight(): string;\n}\n',
  'typescript/lib/lib.es2019.symbol.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ninterface Symbol {\n    /**\n     * Expose the [[Description]] internal slot of a symbol directly.\n     */\n    readonly description: string | undefined;\n}\n',
  'typescript/lib/lib.es2020.bigint.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2020.intl" />\n\ninterface BigIntToLocaleStringOptions {\n    /**\n     * The locale matching algorithm to use.The default is "best fit". For information about this option, see the {@link https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation Intl page}.\n     */\n    localeMatcher?: string;\n    /**\n     * The formatting style to use , the default is "decimal".\n     */\n    style?: string;\n\n    numberingSystem?: string;\n    /**\n     * The unit to use in unit formatting, Possible values are core unit identifiers, defined in UTS #35, Part 2, Section 6. A subset of units from the full list was selected for use in ECMAScript. Pairs of simple units can be concatenated with "-per-" to make a compound unit. There is no default value; if the style is "unit", the unit property must be provided.\n     */\n    unit?: string;\n\n    /**\n     * The unit formatting style to use in unit formatting, the defaults is "short".\n     */\n    unitDisplay?: string;\n\n    /**\n     * The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as "USD" for the US dollar, "EUR" for the euro, or "CNY" for the Chinese RMB — see the Current currency & funds code list. There is no default value; if the style is "currency", the currency property must be provided. It is only used when [[Style]] has the value "currency".\n     */\n    currency?: string;\n\n    /**\n     * How to display the currency in currency formatting. It is only used when [[Style]] has the value "currency". The default is "symbol".\n     *\n     * "symbol" to use a localized currency symbol such as €,\n     *\n     * "code" to use the ISO currency code,\n     *\n     * "name" to use a localized currency name such as "dollar"\n     */\n    currencyDisplay?: string;\n\n    /**\n     * Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators. The default is true.\n     */\n    useGrouping?: boolean;\n\n    /**\n     * The minimum number of integer digits to use. Possible values are from 1 to 21; the default is 1.\n     */\n    minimumIntegerDigits?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21;\n\n    /**\n     * The minimum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number and percent formatting is 0; the default for currency formatting is the number of minor unit digits provided by the {@link http://www.currency-iso.org/en/home/tables/table-a1.html ISO 4217 currency codes list} (2 if the list doesn\'t provide that information).\n     */\n    minimumFractionDigits?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20;\n\n    /**\n     * The maximum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number formatting is the larger of minimumFractionDigits and 3; the default for currency formatting is the larger of minimumFractionDigits and the number of minor unit digits provided by the {@link http://www.currency-iso.org/en/home/tables/table-a1.html ISO 4217 currency codes list} (2 if the list doesn\'t provide that information); the default for percent formatting is the larger of minimumFractionDigits and 0.\n     */\n    maximumFractionDigits?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20;\n\n    /**\n     * The minimum number of significant digits to use. Possible values are from 1 to 21; the default is 1.\n     */\n    minimumSignificantDigits?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21;\n\n    /**\n     * The maximum number of significant digits to use. Possible values are from 1 to 21; the default is 21.\n     */\n    maximumSignificantDigits?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 | 18 | 19 | 20 | 21;\n\n    /**\n     * The formatting that should be displayed for the number, the defaults is "standard"\n     *\n     *     "standard" plain number formatting\n     *\n     *     "scientific" return the order-of-magnitude for formatted number.\n     *\n     *     "engineering" return the exponent of ten when divisible by three\n     *\n     *     "compact" string representing exponent, defaults is using the "short" form\n     */\n    notation?: string;\n\n    /**\n     * used only when notation is "compact"\n     */\n    compactDisplay?: string;\n}\n\ninterface BigInt {\n    /**\n     * Returns a string representation of an object.\n     * @param radix Specifies a radix for converting numeric values to strings.\n     */\n    toString(radix?: number): string;\n\n    /** Returns a string representation appropriate to the host environment\'s current locale. */\n    toLocaleString(locales?: Intl.LocalesArgument, options?: BigIntToLocaleStringOptions): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): bigint;\n\n    readonly [Symbol.toStringTag]: "BigInt";\n}\n\ninterface BigIntConstructor {\n    (value: bigint | boolean | number | string): bigint;\n    readonly prototype: BigInt;\n\n    /**\n     * Interprets the low bits of a BigInt as a 2\'s-complement signed integer.\n     * All higher bits are discarded.\n     * @param bits The number of low bits to use\n     * @param int The BigInt whose bits to extract\n     */\n    asIntN(bits: number, int: bigint): bigint;\n    /**\n     * Interprets the low bits of a BigInt as an unsigned integer.\n     * All higher bits are discarded.\n     * @param bits The number of low bits to use\n     * @param int The BigInt whose bits to extract\n     */\n    asUintN(bits: number, int: bigint): bigint;\n}\n\ndeclare var BigInt: BigIntConstructor;\n\n/**\n * A typed array of 64-bit signed integer values. The contents are initialized to 0. If the\n * requested number of bytes could not be allocated, an exception is raised.\n */\ninterface BigInt64Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {\n    /** The size in bytes of each element in the array. */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /** The ArrayBuffer instance referenced by the array. */\n    readonly buffer: TArrayBuffer;\n\n    /** The length in bytes of the array. */\n    readonly byteLength: number;\n\n    /** The offset in bytes of the array. */\n    readonly byteOffset: number;\n\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n\n    /** Yields index, value pairs for every entry in the array. */\n    entries(): ArrayIterator<[number, bigint]>;\n\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns false,\n     * or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: bigint, index: number, array: BigInt64Array<TArrayBuffer>) => boolean, thisArg?: any): boolean;\n\n    /**\n     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: bigint, start?: number, end?: number): this;\n\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls\n     * the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: bigint, index: number, array: BigInt64Array<TArrayBuffer>) => any, thisArg?: any): BigInt64Array<ArrayBuffer>;\n\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find(predicate: (value: bigint, index: number, array: BigInt64Array<TArrayBuffer>) => boolean, thisArg?: any): bigint | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: bigint, index: number, array: BigInt64Array<TArrayBuffer>) => boolean, thisArg?: any): number;\n\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn A function that accepts up to three arguments. forEach calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: bigint, index: number, array: BigInt64Array<TArrayBuffer>) => void, thisArg?: any): void;\n\n    /**\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\n     * @param searchElement The element to search for.\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\n     */\n    includes(searchElement: bigint, fromIndex?: number): boolean;\n\n    /**\n     * Returns the index of the first occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    indexOf(searchElement: bigint, fromIndex?: number): number;\n\n    /**\n     * Adds all the elements of an array separated by the specified separator string.\n     * @param separator A string used to separate one element of an array from the next in the\n     * resulting String. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n\n    /** Yields each index in the array. */\n    keys(): ArrayIterator<number>;\n\n    /**\n     * Returns the index of the last occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    lastIndexOf(searchElement: bigint, fromIndex?: number): number;\n\n    /** The length of the array. */\n    readonly length: number;\n\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that\n     * contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    map(callbackfn: (value: bigint, index: number, array: BigInt64Array<TArrayBuffer>) => bigint, thisArg?: any): BigInt64Array<ArrayBuffer>;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: bigint, currentValue: bigint, currentIndex: number, array: BigInt64Array<TArrayBuffer>) => bigint): bigint;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: bigint, currentIndex: number, array: BigInt64Array<TArrayBuffer>) => U, initialValue: U): U;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an\n     * argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: bigint, currentValue: bigint, currentIndex: number, array: BigInt64Array<TArrayBuffer>) => bigint): bigint;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: bigint, currentIndex: number, array: BigInt64Array<TArrayBuffer>) => U, initialValue: U): U;\n\n    /** Reverses the elements in the array. */\n    reverse(): this;\n\n    /**\n     * Sets a value or an array of values.\n     * @param array A typed or untyped array of values to set.\n     * @param offset The index in the current array at which the values are to be written.\n     */\n    set(array: ArrayLike<bigint>, offset?: number): void;\n\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array.\n     */\n    slice(start?: number, end?: number): BigInt64Array<ArrayBuffer>;\n\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls the\n     * predicate function for each element in the array until the predicate returns true, or until\n     * the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: bigint, index: number, array: BigInt64Array<TArrayBuffer>) => boolean, thisArg?: any): boolean;\n\n    /**\n     * Sorts the array.\n     * @param compareFn The function used to determine the order of the elements. If omitted, the elements are sorted in ascending order.\n     */\n    sort(compareFn?: (a: bigint, b: bigint) => number | bigint): this;\n\n    /**\n     * Gets a new BigInt64Array view of the ArrayBuffer store for this array, referencing the elements\n     * at begin, inclusive, up to end, exclusive.\n     * @param begin The index of the beginning of the array.\n     * @param end The index of the end of the array.\n     */\n    subarray(begin?: number, end?: number): BigInt64Array<TArrayBuffer>;\n\n    /** Converts the array to a string by using the current locale. */\n    toLocaleString(locales?: string | string[], options?: Intl.NumberFormatOptions): string;\n\n    /** Returns a string representation of the array. */\n    toString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): BigInt64Array<TArrayBuffer>;\n\n    /** Yields each value in the array. */\n    values(): ArrayIterator<bigint>;\n\n    [Symbol.iterator](): ArrayIterator<bigint>;\n\n    readonly [Symbol.toStringTag]: "BigInt64Array";\n\n    [index: number]: bigint;\n}\ninterface BigInt64ArrayConstructor {\n    readonly prototype: BigInt64Array<ArrayBufferLike>;\n    new (length?: number): BigInt64Array<ArrayBuffer>;\n    new (array: ArrayLike<bigint> | Iterable<bigint>): BigInt64Array<ArrayBuffer>;\n    new <TArrayBuffer extends ArrayBufferLike = ArrayBuffer>(buffer: TArrayBuffer, byteOffset?: number, length?: number): BigInt64Array<TArrayBuffer>;\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): BigInt64Array<ArrayBuffer>;\n    new (array: ArrayLike<bigint> | ArrayBuffer): BigInt64Array<ArrayBuffer>;\n\n    /** The size in bytes of each element in the array. */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of(...items: bigint[]): BigInt64Array<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like object to convert to an array.\n     */\n    from(arrayLike: ArrayLike<bigint>): BigInt64Array<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of \'this\' used to invoke the mapfn.\n     */\n    from<U>(arrayLike: ArrayLike<U>, mapfn: (v: U, k: number) => bigint, thisArg?: any): BigInt64Array<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param elements An iterable object to convert to an array.\n     */\n    from(elements: Iterable<bigint>): BigInt64Array<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param elements An iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of \'this\' used to invoke the mapfn.\n     */\n    from<T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => bigint, thisArg?: any): BigInt64Array<ArrayBuffer>;\n}\ndeclare var BigInt64Array: BigInt64ArrayConstructor;\n\n/**\n * A typed array of 64-bit unsigned integer values. The contents are initialized to 0. If the\n * requested number of bytes could not be allocated, an exception is raised.\n */\ninterface BigUint64Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {\n    /** The size in bytes of each element in the array. */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /** The ArrayBuffer instance referenced by the array. */\n    readonly buffer: TArrayBuffer;\n\n    /** The length in bytes of the array. */\n    readonly byteLength: number;\n\n    /** The offset in bytes of the array. */\n    readonly byteOffset: number;\n\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n\n    /** Yields index, value pairs for every entry in the array. */\n    entries(): ArrayIterator<[number, bigint]>;\n\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns false,\n     * or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: bigint, index: number, array: BigUint64Array<TArrayBuffer>) => boolean, thisArg?: any): boolean;\n\n    /**\n     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: bigint, start?: number, end?: number): this;\n\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls\n     * the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: bigint, index: number, array: BigUint64Array<TArrayBuffer>) => any, thisArg?: any): BigUint64Array<ArrayBuffer>;\n\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find(predicate: (value: bigint, index: number, array: BigUint64Array<TArrayBuffer>) => boolean, thisArg?: any): bigint | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: bigint, index: number, array: BigUint64Array<TArrayBuffer>) => boolean, thisArg?: any): number;\n\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn A function that accepts up to three arguments. forEach calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: bigint, index: number, array: BigUint64Array<TArrayBuffer>) => void, thisArg?: any): void;\n\n    /**\n     * Determines whether an array includes a certain element, returning true or false as appropriate.\n     * @param searchElement The element to search for.\n     * @param fromIndex The position in this array at which to begin searching for searchElement.\n     */\n    includes(searchElement: bigint, fromIndex?: number): boolean;\n\n    /**\n     * Returns the index of the first occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    indexOf(searchElement: bigint, fromIndex?: number): number;\n\n    /**\n     * Adds all the elements of an array separated by the specified separator string.\n     * @param separator A string used to separate one element of an array from the next in the\n     * resulting String. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n\n    /** Yields each index in the array. */\n    keys(): ArrayIterator<number>;\n\n    /**\n     * Returns the index of the last occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    lastIndexOf(searchElement: bigint, fromIndex?: number): number;\n\n    /** The length of the array. */\n    readonly length: number;\n\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that\n     * contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    map(callbackfn: (value: bigint, index: number, array: BigUint64Array<TArrayBuffer>) => bigint, thisArg?: any): BigUint64Array<ArrayBuffer>;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: bigint, currentValue: bigint, currentIndex: number, array: BigUint64Array<TArrayBuffer>) => bigint): bigint;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: bigint, currentIndex: number, array: BigUint64Array<TArrayBuffer>) => U, initialValue: U): U;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an\n     * argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: bigint, currentValue: bigint, currentIndex: number, array: BigUint64Array<TArrayBuffer>) => bigint): bigint;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: bigint, currentIndex: number, array: BigUint64Array<TArrayBuffer>) => U, initialValue: U): U;\n\n    /** Reverses the elements in the array. */\n    reverse(): this;\n\n    /**\n     * Sets a value or an array of values.\n     * @param array A typed or untyped array of values to set.\n     * @param offset The index in the current array at which the values are to be written.\n     */\n    set(array: ArrayLike<bigint>, offset?: number): void;\n\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array.\n     */\n    slice(start?: number, end?: number): BigUint64Array<ArrayBuffer>;\n\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls the\n     * predicate function for each element in the array until the predicate returns true, or until\n     * the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: bigint, index: number, array: BigUint64Array<TArrayBuffer>) => boolean, thisArg?: any): boolean;\n\n    /**\n     * Sorts the array.\n     * @param compareFn The function used to determine the order of the elements. If omitted, the elements are sorted in ascending order.\n     */\n    sort(compareFn?: (a: bigint, b: bigint) => number | bigint): this;\n\n    /**\n     * Gets a new BigUint64Array view of the ArrayBuffer store for this array, referencing the elements\n     * at begin, inclusive, up to end, exclusive.\n     * @param begin The index of the beginning of the array.\n     * @param end The index of the end of the array.\n     */\n    subarray(begin?: number, end?: number): BigUint64Array<TArrayBuffer>;\n\n    /** Converts the array to a string by using the current locale. */\n    toLocaleString(locales?: string | string[], options?: Intl.NumberFormatOptions): string;\n\n    /** Returns a string representation of the array. */\n    toString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): BigUint64Array<TArrayBuffer>;\n\n    /** Yields each value in the array. */\n    values(): ArrayIterator<bigint>;\n\n    [Symbol.iterator](): ArrayIterator<bigint>;\n\n    readonly [Symbol.toStringTag]: "BigUint64Array";\n\n    [index: number]: bigint;\n}\ninterface BigUint64ArrayConstructor {\n    readonly prototype: BigUint64Array<ArrayBufferLike>;\n    new (length?: number): BigUint64Array<ArrayBuffer>;\n    new (array: ArrayLike<bigint> | Iterable<bigint>): BigUint64Array<ArrayBuffer>;\n    new <TArrayBuffer extends ArrayBufferLike = ArrayBuffer>(buffer: TArrayBuffer, byteOffset?: number, length?: number): BigUint64Array<TArrayBuffer>;\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): BigUint64Array<ArrayBuffer>;\n    new (array: ArrayLike<bigint> | ArrayBuffer): BigUint64Array<ArrayBuffer>;\n\n    /** The size in bytes of each element in the array. */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of(...items: bigint[]): BigUint64Array<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like object to convert to an array.\n     */\n    from(arrayLike: ArrayLike<bigint>): BigUint64Array<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of \'this\' used to invoke the mapfn.\n     */\n    from<U>(arrayLike: ArrayLike<U>, mapfn: (v: U, k: number) => bigint, thisArg?: any): BigUint64Array<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param elements An iterable object to convert to an array.\n     */\n    from(elements: Iterable<bigint>): BigUint64Array<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param elements An iterable object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of \'this\' used to invoke the mapfn.\n     */\n    from<T>(elements: Iterable<T>, mapfn?: (v: T, k: number) => bigint, thisArg?: any): BigUint64Array<ArrayBuffer>;\n}\ndeclare var BigUint64Array: BigUint64ArrayConstructor;\n\ninterface DataView<TArrayBuffer extends ArrayBufferLike> {\n    /**\n     * Gets the BigInt64 value at the specified byte offset from the start of the view. There is\n     * no alignment constraint; multi-byte values may be fetched from any offset.\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\n     * @param littleEndian If false or undefined, a big-endian value should be read.\n     */\n    getBigInt64(byteOffset: number, littleEndian?: boolean): bigint;\n\n    /**\n     * Gets the BigUint64 value at the specified byte offset from the start of the view. There is\n     * no alignment constraint; multi-byte values may be fetched from any offset.\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\n     * @param littleEndian If false or undefined, a big-endian value should be read.\n     */\n    getBigUint64(byteOffset: number, littleEndian?: boolean): bigint;\n\n    /**\n     * Stores a BigInt64 value at the specified byte offset from the start of the view.\n     * @param byteOffset The place in the buffer at which the value should be set.\n     * @param value The value to set.\n     * @param littleEndian If false or undefined, a big-endian value should be written.\n     */\n    setBigInt64(byteOffset: number, value: bigint, littleEndian?: boolean): void;\n\n    /**\n     * Stores a BigUint64 value at the specified byte offset from the start of the view.\n     * @param byteOffset The place in the buffer at which the value should be set.\n     * @param value The value to set.\n     * @param littleEndian If false or undefined, a big-endian value should be written.\n     */\n    setBigUint64(byteOffset: number, value: bigint, littleEndian?: boolean): void;\n}\n\ndeclare namespace Intl {\n    interface NumberFormat {\n        format(value: number | bigint): string;\n    }\n}\n',
  'typescript/lib/lib.es2020.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2019" />\n/// <reference lib="es2020.bigint" />\n/// <reference lib="es2020.date" />\n/// <reference lib="es2020.number" />\n/// <reference lib="es2020.promise" />\n/// <reference lib="es2020.sharedmemory" />\n/// <reference lib="es2020.string" />\n/// <reference lib="es2020.symbol.wellknown" />\n/// <reference lib="es2020.intl" />\n',
  'typescript/lib/lib.es2020.date.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2020.intl" />\n\ninterface Date {\n    /**\n     * Converts a date and time to a string by using the current or specified locale.\n     * @param locales A locale string, array of locale strings, Intl.Locale object, or array of Intl.Locale objects that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n     * @param options An object that contains one or more properties that specify comparison options.\n     */\n    toLocaleString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;\n\n    /**\n     * Converts a date to a string by using the current or specified locale.\n     * @param locales A locale string, array of locale strings, Intl.Locale object, or array of Intl.Locale objects that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n     * @param options An object that contains one or more properties that specify comparison options.\n     */\n    toLocaleDateString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;\n\n    /**\n     * Converts a time to a string by using the current or specified locale.\n     * @param locales A locale string, array of locale strings, Intl.Locale object, or array of Intl.Locale objects that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n     * @param options An object that contains one or more properties that specify comparison options.\n     */\n    toLocaleTimeString(locales?: Intl.LocalesArgument, options?: Intl.DateTimeFormatOptions): string;\n}\n',
  'typescript/lib/lib.es2020.intl.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2018.intl" />\ndeclare namespace Intl {\n    /**\n     * A string that is a valid [Unicode BCP 47 Locale Identifier](https://unicode.org/reports/tr35/#Unicode_locale_identifier).\n     *\n     * For example: "fa", "es-MX", "zh-Hant-TW".\n     *\n     * See [MDN - Intl - locales argument](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n     */\n    type UnicodeBCP47LocaleIdentifier = string;\n\n    /**\n     * Unit to use in the relative time internationalized message.\n     *\n     * [MDN](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/format#Parameters).\n     */\n    type RelativeTimeFormatUnit =\n        | "year"\n        | "years"\n        | "quarter"\n        | "quarters"\n        | "month"\n        | "months"\n        | "week"\n        | "weeks"\n        | "day"\n        | "days"\n        | "hour"\n        | "hours"\n        | "minute"\n        | "minutes"\n        | "second"\n        | "seconds";\n\n    /**\n     * Value of the `unit` property in objects returned by\n     * `Intl.RelativeTimeFormat.prototype.formatToParts()`. `formatToParts` and\n     * `format` methods accept either singular or plural unit names as input,\n     * but `formatToParts` only outputs singular (e.g. "day") not plural (e.g.\n     * "days").\n     *\n     * [MDN](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/formatToParts#Using_formatToParts).\n     */\n    type RelativeTimeFormatUnitSingular =\n        | "year"\n        | "quarter"\n        | "month"\n        | "week"\n        | "day"\n        | "hour"\n        | "minute"\n        | "second";\n\n    /**\n     * The locale matching algorithm to use.\n     *\n     * [MDN](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation).\n     */\n    type RelativeTimeFormatLocaleMatcher = "lookup" | "best fit";\n\n    /**\n     * The format of output message.\n     *\n     * [MDN](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/RelativeTimeFormat#Parameters).\n     */\n    type RelativeTimeFormatNumeric = "always" | "auto";\n\n    /**\n     * The length of the internationalized message.\n     *\n     * [MDN](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/RelativeTimeFormat#Parameters).\n     */\n    type RelativeTimeFormatStyle = "long" | "short" | "narrow";\n\n    /**\n     * The locale or locales to use\n     *\n     * See [MDN - Intl - locales argument](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).\n     */\n    type LocalesArgument = UnicodeBCP47LocaleIdentifier | Locale | readonly (UnicodeBCP47LocaleIdentifier | Locale)[] | undefined;\n\n    /**\n     * An object with some or all of properties of `options` parameter\n     * of `Intl.RelativeTimeFormat` constructor.\n     *\n     * [MDN](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/RelativeTimeFormat#Parameters).\n     */\n    interface RelativeTimeFormatOptions {\n        /** The locale matching algorithm to use. For information about this option, see [Intl page](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation). */\n        localeMatcher?: RelativeTimeFormatLocaleMatcher;\n        /** The format of output message. */\n        numeric?: RelativeTimeFormatNumeric;\n        /** The length of the internationalized message. */\n        style?: RelativeTimeFormatStyle;\n    }\n\n    /**\n     * An object with properties reflecting the locale\n     * and formatting options computed during initialization\n     * of the `Intl.RelativeTimeFormat` object\n     *\n     * [MDN](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/resolvedOptions#Description).\n     */\n    interface ResolvedRelativeTimeFormatOptions {\n        locale: UnicodeBCP47LocaleIdentifier;\n        style: RelativeTimeFormatStyle;\n        numeric: RelativeTimeFormatNumeric;\n        numberingSystem: string;\n    }\n\n    /**\n     * An object representing the relative time format in parts\n     * that can be used for custom locale-aware formatting.\n     *\n     * [MDN](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/formatToParts#Using_formatToParts).\n     */\n    type RelativeTimeFormatPart =\n        | {\n            type: "literal";\n            value: string;\n        }\n        | {\n            type: Exclude<NumberFormatPartTypes, "literal">;\n            value: string;\n            unit: RelativeTimeFormatUnitSingular;\n        };\n\n    interface RelativeTimeFormat {\n        /**\n         * Formats a value and a unit according to the locale\n         * and formatting options of the given\n         * [`Intl.RelativeTimeFormat`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/RelativeTimeFormat)\n         * object.\n         *\n         * While this method automatically provides the correct plural forms,\n         * the grammatical form is otherwise as neutral as possible.\n         *\n         * It is the caller\'s responsibility to handle cut-off logic\n         * such as deciding between displaying "in 7 days" or "in 1 week".\n         * This API does not support relative dates involving compound units.\n         * e.g "in 5 days and 4 hours".\n         *\n         * @param value -  Numeric value to use in the internationalized relative time message\n         *\n         * @param unit - [Unit](https://tc39.es/ecma402/#sec-singularrelativetimeunit) to use in the relative time internationalized message.\n         *\n         * @throws `RangeError` if `unit` was given something other than `unit` possible values\n         *\n         * @returns {string} Internationalized relative time message as string\n         *\n         * [MDN](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/format).\n         */\n        format(value: number, unit: RelativeTimeFormatUnit): string;\n\n        /**\n         *  Returns an array of objects representing the relative time format in parts that can be used for custom locale-aware formatting.\n         *\n         *  @param value - Numeric value to use in the internationalized relative time message\n         *\n         *  @param unit - [Unit](https://tc39.es/ecma402/#sec-singularrelativetimeunit) to use in the relative time internationalized message.\n         *\n         *  @throws `RangeError` if `unit` was given something other than `unit` possible values\n         *\n         *  [MDN](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/formatToParts).\n         */\n        formatToParts(value: number, unit: RelativeTimeFormatUnit): RelativeTimeFormatPart[];\n\n        /**\n         * Provides access to the locale and options computed during initialization of this `Intl.RelativeTimeFormat` object.\n         *\n         * [MDN](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/resolvedOptions).\n         */\n        resolvedOptions(): ResolvedRelativeTimeFormatOptions;\n    }\n\n    /**\n     * The [`Intl.RelativeTimeFormat`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/RelativeTimeFormat)\n     * object is a constructor for objects that enable language-sensitive relative time formatting.\n     *\n     * [Compatibility](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat#Browser_compatibility).\n     */\n    const RelativeTimeFormat: {\n        /**\n         * Creates [Intl.RelativeTimeFormat](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/RelativeTimeFormat) objects\n         *\n         * @param locales - A string with a [BCP 47 language tag](http://tools.ietf.org/html/rfc5646), or an array of such strings.\n         *  For the general form and interpretation of the locales argument,\n         *  see the [`Intl` page](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation).\n         *\n         * @param options - An [object](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/RelativeTimeFormat#Parameters)\n         *  with some or all of options of `RelativeTimeFormatOptions`.\n         *\n         * @returns [Intl.RelativeTimeFormat](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/RelativeTimeFormat) object.\n         *\n         * [MDN](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/RelativeTimeFormat).\n         */\n        new (\n            locales?: LocalesArgument,\n            options?: RelativeTimeFormatOptions,\n        ): RelativeTimeFormat;\n\n        /**\n         * Returns an array containing those of the provided locales\n         * that are supported in date and time formatting\n         * without having to fall back to the runtime\'s default locale.\n         *\n         * @param locales - A string with a [BCP 47 language tag](http://tools.ietf.org/html/rfc5646), or an array of such strings.\n         *  For the general form and interpretation of the locales argument,\n         *  see the [`Intl` page](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation).\n         *\n         * @param options - An [object](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/RelativeTimeFormat#Parameters)\n         *  with some or all of options of the formatting.\n         *\n         * @returns An array containing those of the provided locales\n         *  that are supported in date and time formatting\n         *  without having to fall back to the runtime\'s default locale.\n         *\n         * [MDN](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat/supportedLocalesOf).\n         */\n        supportedLocalesOf(\n            locales?: LocalesArgument,\n            options?: RelativeTimeFormatOptions,\n        ): UnicodeBCP47LocaleIdentifier[];\n    };\n\n    interface NumberFormatOptionsStyleRegistry {\n        unit: never;\n    }\n\n    interface NumberFormatOptionsCurrencyDisplayRegistry {\n        narrowSymbol: never;\n    }\n\n    interface NumberFormatOptionsSignDisplayRegistry {\n        auto: never;\n        never: never;\n        always: never;\n        exceptZero: never;\n    }\n\n    type NumberFormatOptionsSignDisplay = keyof NumberFormatOptionsSignDisplayRegistry;\n\n    interface NumberFormatOptions {\n        numberingSystem?: string | undefined;\n        compactDisplay?: "short" | "long" | undefined;\n        notation?: "standard" | "scientific" | "engineering" | "compact" | undefined;\n        signDisplay?: NumberFormatOptionsSignDisplay | undefined;\n        unit?: string | undefined;\n        unitDisplay?: "short" | "long" | "narrow" | undefined;\n        currencySign?: "standard" | "accounting" | undefined;\n    }\n\n    interface ResolvedNumberFormatOptions {\n        compactDisplay?: "short" | "long";\n        notation: "standard" | "scientific" | "engineering" | "compact";\n        signDisplay: NumberFormatOptionsSignDisplay;\n        unit?: string;\n        unitDisplay?: "short" | "long" | "narrow";\n        currencySign?: "standard" | "accounting";\n    }\n\n    interface NumberFormatPartTypeRegistry {\n        compact: never;\n        exponentInteger: never;\n        exponentMinusSign: never;\n        exponentSeparator: never;\n        unit: never;\n        unknown: never;\n    }\n\n    interface DateTimeFormatOptions {\n        calendar?: string | undefined;\n        dayPeriod?: "narrow" | "short" | "long" | undefined;\n        numberingSystem?: string | undefined;\n\n        dateStyle?: "full" | "long" | "medium" | "short" | undefined;\n        timeStyle?: "full" | "long" | "medium" | "short" | undefined;\n        hourCycle?: "h11" | "h12" | "h23" | "h24" | undefined;\n    }\n\n    type LocaleHourCycleKey = "h12" | "h23" | "h11" | "h24";\n    type LocaleCollationCaseFirst = "upper" | "lower" | "false";\n\n    interface LocaleOptions {\n        /** A string containing the language, and the script and region if available. */\n        baseName?: string;\n        /** The part of the Locale that indicates the locale\'s calendar era. */\n        calendar?: string;\n        /** Flag that defines whether case is taken into account for the locale\'s collation rules. */\n        caseFirst?: LocaleCollationCaseFirst;\n        /** The collation type used for sorting */\n        collation?: string;\n        /** The time keeping format convention used by the locale. */\n        hourCycle?: LocaleHourCycleKey;\n        /** The primary language subtag associated with the locale. */\n        language?: string;\n        /** The numeral system used by the locale. */\n        numberingSystem?: string;\n        /** Flag that defines whether the locale has special collation handling for numeric characters. */\n        numeric?: boolean;\n        /** The region of the world (usually a country) associated with the locale. Possible values are region codes as defined by ISO 3166-1. */\n        region?: string;\n        /** The script used for writing the particular language used in the locale. Possible values are script codes as defined by ISO 15924. */\n        script?: string;\n    }\n\n    interface Locale extends LocaleOptions {\n        /** A string containing the language, and the script and region if available. */\n        baseName: string;\n        /** The primary language subtag associated with the locale. */\n        language: string;\n        /** Gets the most likely values for the language, script, and region of the locale based on existing values. */\n        maximize(): Locale;\n        /** Attempts to remove information about the locale that would be added by calling `Locale.maximize()`. */\n        minimize(): Locale;\n        /** Returns the locale\'s full locale identifier string. */\n        toString(): UnicodeBCP47LocaleIdentifier;\n    }\n\n    /**\n     * Constructor creates [Intl.Locale](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale)\n     * objects\n     *\n     * @param tag - A string with a [BCP 47 language tag](http://tools.ietf.org/html/rfc5646).\n     *  For the general form and interpretation of the locales argument,\n     *  see the [`Intl` page](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation).\n     *\n     * @param options - An [object](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/Locale#Parameters) with some or all of options of the locale.\n     *\n     * @returns [Intl.Locale](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale) object.\n     *\n     * [MDN](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale).\n     */\n    const Locale: {\n        new (tag: UnicodeBCP47LocaleIdentifier | Locale, options?: LocaleOptions): Locale;\n    };\n\n    type DisplayNamesFallback =\n        | "code"\n        | "none";\n\n    type DisplayNamesType =\n        | "language"\n        | "region"\n        | "script"\n        | "calendar"\n        | "dateTimeField"\n        | "currency";\n\n    type DisplayNamesLanguageDisplay =\n        | "dialect"\n        | "standard";\n\n    interface DisplayNamesOptions {\n        localeMatcher?: RelativeTimeFormatLocaleMatcher;\n        style?: RelativeTimeFormatStyle;\n        type: DisplayNamesType;\n        languageDisplay?: DisplayNamesLanguageDisplay;\n        fallback?: DisplayNamesFallback;\n    }\n\n    interface ResolvedDisplayNamesOptions {\n        locale: UnicodeBCP47LocaleIdentifier;\n        style: RelativeTimeFormatStyle;\n        type: DisplayNamesType;\n        fallback: DisplayNamesFallback;\n        languageDisplay?: DisplayNamesLanguageDisplay;\n    }\n\n    interface DisplayNames {\n        /**\n         * Receives a code and returns a string based on the locale and options provided when instantiating\n         * [`Intl.DisplayNames()`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames)\n         *\n         * @param code The `code` to provide depends on the `type` passed to display name during creation:\n         *  - If the type is `"region"`, code should be either an [ISO-3166 two letters region code](https://www.iso.org/iso-3166-country-codes.html),\n         *    or a [three digits UN M49 Geographic Regions](https://unstats.un.org/unsd/methodology/m49/).\n         *  - If the type is `"script"`, code should be an [ISO-15924 four letters script code](https://unicode.org/iso15924/iso15924-codes.html).\n         *  - If the type is `"language"`, code should be a `languageCode` ["-" `scriptCode`] ["-" `regionCode` ] *("-" `variant` )\n         *    subsequence of the unicode_language_id grammar in [UTS 35\'s Unicode Language and Locale Identifiers grammar](https://unicode.org/reports/tr35/#Unicode_language_identifier).\n         *    `languageCode` is either a two letters ISO 639-1 language code or a three letters ISO 639-2 language code.\n         *  - If the type is `"currency"`, code should be a [3-letter ISO 4217 currency code](https://www.iso.org/iso-4217-currency-codes.html).\n         *\n         * [MDN](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames/of).\n         */\n        of(code: string): string | undefined;\n        /**\n         * Returns a new object with properties reflecting the locale and style formatting options computed during the construction of the current\n         * [`Intl/DisplayNames`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames) object.\n         *\n         * [MDN](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames/resolvedOptions).\n         */\n        resolvedOptions(): ResolvedDisplayNamesOptions;\n    }\n\n    /**\n     * The [`Intl.DisplayNames()`](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames)\n     * object enables the consistent translation of language, region and script display names.\n     *\n     * [Compatibility](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames#browser_compatibility).\n     */\n    const DisplayNames: {\n        prototype: DisplayNames;\n\n        /**\n         * @param locales A string with a BCP 47 language tag, or an array of such strings.\n         *   For the general form and interpretation of the `locales` argument, see the [Intl](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation)\n         *   page.\n         *\n         * @param options An object for setting up a display name.\n         *\n         * [MDN](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames/DisplayNames).\n         */\n        new (locales: LocalesArgument, options: DisplayNamesOptions): DisplayNames;\n\n        /**\n         * Returns an array containing those of the provided locales that are supported in display names without having to fall back to the runtime\'s default locale.\n         *\n         * @param locales A string with a BCP 47 language tag, or an array of such strings.\n         *   For the general form and interpretation of the `locales` argument, see the [Intl](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation)\n         *   page.\n         *\n         * @param options An object with a locale matcher.\n         *\n         * @returns An array of strings representing a subset of the given locale tags that are supported in display names without having to fall back to the runtime\'s default locale.\n         *\n         * [MDN](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames/supportedLocalesOf).\n         */\n        supportedLocalesOf(locales?: LocalesArgument, options?: { localeMatcher?: RelativeTimeFormatLocaleMatcher; }): UnicodeBCP47LocaleIdentifier[];\n    };\n\n    interface CollatorConstructor {\n        new (locales?: LocalesArgument, options?: CollatorOptions): Collator;\n        (locales?: LocalesArgument, options?: CollatorOptions): Collator;\n        supportedLocalesOf(locales: LocalesArgument, options?: CollatorOptions): string[];\n    }\n\n    interface DateTimeFormatConstructor {\n        new (locales?: LocalesArgument, options?: DateTimeFormatOptions): DateTimeFormat;\n        (locales?: LocalesArgument, options?: DateTimeFormatOptions): DateTimeFormat;\n        supportedLocalesOf(locales: LocalesArgument, options?: DateTimeFormatOptions): string[];\n    }\n\n    interface NumberFormatConstructor {\n        new (locales?: LocalesArgument, options?: NumberFormatOptions): NumberFormat;\n        (locales?: LocalesArgument, options?: NumberFormatOptions): NumberFormat;\n        supportedLocalesOf(locales: LocalesArgument, options?: NumberFormatOptions): string[];\n    }\n\n    interface PluralRulesConstructor {\n        new (locales?: LocalesArgument, options?: PluralRulesOptions): PluralRules;\n        (locales?: LocalesArgument, options?: PluralRulesOptions): PluralRules;\n\n        supportedLocalesOf(locales: LocalesArgument, options?: { localeMatcher?: "lookup" | "best fit"; }): string[];\n    }\n}\n',
  'typescript/lib/lib.es2020.number.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2020.intl" />\n\ninterface Number {\n    /**\n     * Converts a number to a string by using the current or specified locale.\n     * @param locales A locale string, array of locale strings, Intl.Locale object, or array of Intl.Locale objects that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n     * @param options An object that contains one or more properties that specify comparison options.\n     */\n    toLocaleString(locales?: Intl.LocalesArgument, options?: Intl.NumberFormatOptions): string;\n}\n',
  'typescript/lib/lib.es2020.promise.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\ninterface PromiseFulfilledResult<T> {\n    status: "fulfilled";\n    value: T;\n}\n\ninterface PromiseRejectedResult {\n    status: "rejected";\n    reason: any;\n}\n\ntype PromiseSettledResult<T> = PromiseFulfilledResult<T> | PromiseRejectedResult;\n\ninterface PromiseConstructor {\n    /**\n     * Creates a Promise that is resolved with an array of results when all\n     * of the provided Promises resolve or reject.\n     * @param values An array of Promises.\n     * @returns A new Promise.\n     */\n    allSettled<T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: PromiseSettledResult<Awaited<T[P]>>; }>;\n\n    /**\n     * Creates a Promise that is resolved with an array of results when all\n     * of the provided Promises resolve or reject.\n     * @param values An array of Promises.\n     * @returns A new Promise.\n     */\n    allSettled<T>(values: Iterable<T | PromiseLike<T>>): Promise<PromiseSettledResult<Awaited<T>>[]>;\n}\n',
  'typescript/lib/lib.es2020.sharedmemory.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2020.bigint" />\n\ninterface Atomics {\n    /**\n     * Adds a value to the value at the given position in the array, returning the original value.\n     * Until this atomic operation completes, any other read or write operation against the array\n     * will block.\n     */\n    add(typedArray: BigInt64Array<ArrayBufferLike> | BigUint64Array<ArrayBufferLike>, index: number, value: bigint): bigint;\n\n    /**\n     * Stores the bitwise AND of a value with the value at the given position in the array,\n     * returning the original value. Until this atomic operation completes, any other read or\n     * write operation against the array will block.\n     */\n    and(typedArray: BigInt64Array<ArrayBufferLike> | BigUint64Array<ArrayBufferLike>, index: number, value: bigint): bigint;\n\n    /**\n     * Replaces the value at the given position in the array if the original value equals the given\n     * expected value, returning the original value. Until this atomic operation completes, any\n     * other read or write operation against the array will block.\n     */\n    compareExchange(typedArray: BigInt64Array<ArrayBufferLike> | BigUint64Array<ArrayBufferLike>, index: number, expectedValue: bigint, replacementValue: bigint): bigint;\n\n    /**\n     * Replaces the value at the given position in the array, returning the original value. Until\n     * this atomic operation completes, any other read or write operation against the array will\n     * block.\n     */\n    exchange(typedArray: BigInt64Array<ArrayBufferLike> | BigUint64Array<ArrayBufferLike>, index: number, value: bigint): bigint;\n\n    /**\n     * Returns the value at the given position in the array. Until this atomic operation completes,\n     * any other read or write operation against the array will block.\n     */\n    load(typedArray: BigInt64Array<ArrayBufferLike> | BigUint64Array<ArrayBufferLike>, index: number): bigint;\n\n    /**\n     * Stores the bitwise OR of a value with the value at the given position in the array,\n     * returning the original value. Until this atomic operation completes, any other read or write\n     * operation against the array will block.\n     */\n    or(typedArray: BigInt64Array<ArrayBufferLike> | BigUint64Array<ArrayBufferLike>, index: number, value: bigint): bigint;\n\n    /**\n     * Stores a value at the given position in the array, returning the new value. Until this\n     * atomic operation completes, any other read or write operation against the array will block.\n     */\n    store(typedArray: BigInt64Array<ArrayBufferLike> | BigUint64Array<ArrayBufferLike>, index: number, value: bigint): bigint;\n\n    /**\n     * Subtracts a value from the value at the given position in the array, returning the original\n     * value. Until this atomic operation completes, any other read or write operation against the\n     * array will block.\n     */\n    sub(typedArray: BigInt64Array<ArrayBufferLike> | BigUint64Array<ArrayBufferLike>, index: number, value: bigint): bigint;\n\n    /**\n     * If the value at the given position in the array is equal to the provided value, the current\n     * agent is put to sleep causing execution to suspend until the timeout expires (returning\n     * `"timed-out"`) or until the agent is awoken (returning `"ok"`); otherwise, returns\n     * `"not-equal"`.\n     */\n    wait(typedArray: BigInt64Array<ArrayBufferLike>, index: number, value: bigint, timeout?: number): "ok" | "not-equal" | "timed-out";\n\n    /**\n     * Wakes up sleeping agents that are waiting on the given index of the array, returning the\n     * number of agents that were awoken.\n     * @param typedArray A shared BigInt64Array.\n     * @param index The position in the typedArray to wake up on.\n     * @param count The number of sleeping agents to notify. Defaults to +Infinity.\n     */\n    notify(typedArray: BigInt64Array<ArrayBufferLike>, index: number, count?: number): number;\n\n    /**\n     * Stores the bitwise XOR of a value with the value at the given position in the array,\n     * returning the original value. Until this atomic operation completes, any other read or write\n     * operation against the array will block.\n     */\n    xor(typedArray: BigInt64Array<ArrayBufferLike> | BigUint64Array<ArrayBufferLike>, index: number, value: bigint): bigint;\n}\n',
  'typescript/lib/lib.es2020.string.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2015.iterable" />\n/// <reference lib="es2020.intl" />\n/// <reference lib="es2020.symbol.wellknown" />\n\ninterface String {\n    /**\n     * Matches a string with a regular expression, and returns an iterable of matches\n     * containing the results of that search.\n     * @param regexp A variable name or string literal containing the regular expression pattern and flags.\n     */\n    matchAll(regexp: RegExp): RegExpStringIterator<RegExpExecArray>;\n\n    /** Converts all alphabetic characters to lowercase, taking into account the host environment\'s current locale. */\n    toLocaleLowerCase(locales?: Intl.LocalesArgument): string;\n\n    /** Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment\'s current locale. */\n    toLocaleUpperCase(locales?: Intl.LocalesArgument): string;\n\n    /**\n     * Determines whether two strings are equivalent in the current or specified locale.\n     * @param that String to compare to target string\n     * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n     * @param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.\n     */\n    localeCompare(that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;\n}\n',
  'typescript/lib/lib.es2020.symbol.wellknown.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="es2015.iterable" />\n/// <reference lib="es2015.symbol" />\n\ninterface SymbolConstructor {\n    /**\n     * A regular expression method that matches the regular expression against a string. Called\n     * by the String.prototype.matchAll method.\n     */\n    readonly matchAll: unique symbol;\n}\n\ninterface RegExpStringIterator<T> extends IteratorObject<T, BuiltinIteratorReturn, unknown> {\n    [Symbol.iterator](): RegExpStringIterator<T>;\n}\n\ninterface RegExp {\n    /**\n     * Matches a string with this regular expression, and returns an iterable of matches\n     * containing the results of that search.\n     * @param string A string to search within.\n     */\n    [Symbol.matchAll](str: string): RegExpStringIterator<RegExpMatchArray>;\n}\n',
  'typescript/lib/lib.es5.d.ts':
    '/*! *****************************************************************************\nCopyright (c) Microsoft Corporation. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the "License"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\n\n\n/// <reference no-default-lib="true"/>\n\n/// <reference lib="decorators" />\n/// <reference lib="decorators.legacy" />\n\n/////////////////////////////\n/// ECMAScript APIs\n/////////////////////////////\n\ndeclare var NaN: number;\ndeclare var Infinity: number;\n\n/**\n * Evaluates JavaScript code and executes it.\n * @param x A String value that contains valid JavaScript code.\n */\ndeclare function eval(x: string): any;\n\n/**\n * Converts a string to an integer.\n * @param string A string to convert into a number.\n * @param radix A value between 2 and 36 that specifies the base of the number in `string`.\n * If this argument is not supplied, strings with a prefix of \'0x\' are considered hexadecimal.\n * All other strings are considered decimal.\n */\ndeclare function parseInt(string: string, radix?: number): number;\n\n/**\n * Converts a string to a floating-point number.\n * @param string A string that contains a floating-point number.\n */\ndeclare function parseFloat(string: string): number;\n\n/**\n * Returns a Boolean value that indicates whether a value is the reserved value NaN (not a number).\n * @param number A numeric value.\n */\ndeclare function isNaN(number: number): boolean;\n\n/**\n * Determines whether a supplied number is finite.\n * @param number Any numeric value.\n */\ndeclare function isFinite(number: number): boolean;\n\n/**\n * Gets the unencoded version of an encoded Uniform Resource Identifier (URI).\n * @param encodedURI A value representing an encoded URI.\n */\ndeclare function decodeURI(encodedURI: string): string;\n\n/**\n * Gets the unencoded version of an encoded component of a Uniform Resource Identifier (URI).\n * @param encodedURIComponent A value representing an encoded URI component.\n */\ndeclare function decodeURIComponent(encodedURIComponent: string): string;\n\n/**\n * Encodes a text string as a valid Uniform Resource Identifier (URI)\n * @param uri A value representing an unencoded URI.\n */\ndeclare function encodeURI(uri: string): string;\n\n/**\n * Encodes a text string as a valid component of a Uniform Resource Identifier (URI).\n * @param uriComponent A value representing an unencoded URI component.\n */\ndeclare function encodeURIComponent(uriComponent: string | number | boolean): string;\n\n/**\n * Computes a new string in which certain characters have been replaced by a hexadecimal escape sequence.\n * @deprecated A legacy feature for browser compatibility\n * @param string A string value\n */\ndeclare function escape(string: string): string;\n\n/**\n * Computes a new string in which hexadecimal escape sequences are replaced with the character that it represents.\n * @deprecated A legacy feature for browser compatibility\n * @param string A string value\n */\ndeclare function unescape(string: string): string;\n\ninterface Symbol {\n    /** Returns a string representation of an object. */\n    toString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): symbol;\n}\n\ndeclare type PropertyKey = string | number | symbol;\n\ninterface PropertyDescriptor {\n    configurable?: boolean;\n    enumerable?: boolean;\n    value?: any;\n    writable?: boolean;\n    get?(): any;\n    set?(v: any): void;\n}\n\ninterface PropertyDescriptorMap {\n    [key: PropertyKey]: PropertyDescriptor;\n}\n\ninterface Object {\n    /** The initial value of Object.prototype.constructor is the standard built-in Object constructor. */\n    constructor: Function;\n\n    /** Returns a string representation of an object. */\n    toString(): string;\n\n    /** Returns a date converted to a string using the current locale. */\n    toLocaleString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): Object;\n\n    /**\n     * Determines whether an object has a property with the specified name.\n     * @param v A property name.\n     */\n    hasOwnProperty(v: PropertyKey): boolean;\n\n    /**\n     * Determines whether an object exists in another object\'s prototype chain.\n     * @param v Another object whose prototype chain is to be checked.\n     */\n    isPrototypeOf(v: Object): boolean;\n\n    /**\n     * Determines whether a specified property is enumerable.\n     * @param v A property name.\n     */\n    propertyIsEnumerable(v: PropertyKey): boolean;\n}\n\ninterface ObjectConstructor {\n    new (value?: any): Object;\n    (): any;\n    (value: any): any;\n\n    /** A reference to the prototype for a class of objects. */\n    readonly prototype: Object;\n\n    /**\n     * Returns the prototype of an object.\n     * @param o The object that references the prototype.\n     */\n    getPrototypeOf(o: any): any;\n\n    /**\n     * Gets the own property descriptor of the specified object.\n     * An own property descriptor is one that is defined directly on the object and is not inherited from the object\'s prototype.\n     * @param o Object that contains the property.\n     * @param p Name of the property.\n     */\n    getOwnPropertyDescriptor(o: any, p: PropertyKey): PropertyDescriptor | undefined;\n\n    /**\n     * Returns the names of the own properties of an object. The own properties of an object are those that are defined directly\n     * on that object, and are not inherited from the object\'s prototype. The properties of an object include both fields (objects) and functions.\n     * @param o Object that contains the own properties.\n     */\n    getOwnPropertyNames(o: any): string[];\n\n    /**\n     * Creates an object that has the specified prototype or that has null prototype.\n     * @param o Object to use as a prototype. May be null.\n     */\n    create(o: object | null): any;\n\n    /**\n     * Creates an object that has the specified prototype, and that optionally contains specified properties.\n     * @param o Object to use as a prototype. May be null\n     * @param properties JavaScript object that contains one or more property descriptors.\n     */\n    create(o: object | null, properties: PropertyDescriptorMap & ThisType<any>): any;\n\n    /**\n     * Adds a property to an object, or modifies attributes of an existing property.\n     * @param o Object on which to add or modify the property. This can be a native JavaScript object (that is, a user-defined object or a built in object) or a DOM object.\n     * @param p The property name.\n     * @param attributes Descriptor for the property. It can be for a data property or an accessor property.\n     */\n    defineProperty<T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>): T;\n\n    /**\n     * Adds one or more properties to an object, and/or modifies attributes of existing properties.\n     * @param o Object on which to add or modify the properties. This can be a native JavaScript object or a DOM object.\n     * @param properties JavaScript object that contains one or more descriptor objects. Each descriptor object describes a data property or an accessor property.\n     */\n    defineProperties<T>(o: T, properties: PropertyDescriptorMap & ThisType<any>): T;\n\n    /**\n     * Prevents the modification of attributes of existing properties, and prevents the addition of new properties.\n     * @param o Object on which to lock the attributes.\n     */\n    seal<T>(o: T): T;\n\n    /**\n     * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.\n     * @param f Object on which to lock the attributes.\n     */\n    freeze<T extends Function>(f: T): T;\n\n    /**\n     * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.\n     * @param o Object on which to lock the attributes.\n     */\n    freeze<T extends { [idx: string]: U | null | undefined | object; }, U extends string | bigint | number | boolean | symbol>(o: T): Readonly<T>;\n\n    /**\n     * Prevents the modification of existing property attributes and values, and prevents the addition of new properties.\n     * @param o Object on which to lock the attributes.\n     */\n    freeze<T>(o: T): Readonly<T>;\n\n    /**\n     * Prevents the addition of new properties to an object.\n     * @param o Object to make non-extensible.\n     */\n    preventExtensions<T>(o: T): T;\n\n    /**\n     * Returns true if existing property attributes cannot be modified in an object and new properties cannot be added to the object.\n     * @param o Object to test.\n     */\n    isSealed(o: any): boolean;\n\n    /**\n     * Returns true if existing property attributes and values cannot be modified in an object, and new properties cannot be added to the object.\n     * @param o Object to test.\n     */\n    isFrozen(o: any): boolean;\n\n    /**\n     * Returns a value that indicates whether new properties can be added to an object.\n     * @param o Object to test.\n     */\n    isExtensible(o: any): boolean;\n\n    /**\n     * Returns the names of the enumerable string properties and methods of an object.\n     * @param o Object that contains the properties and methods. This can be an object that you created or an existing Document Object Model (DOM) object.\n     */\n    keys(o: object): string[];\n}\n\n/**\n * Provides functionality common to all JavaScript objects.\n */\ndeclare var Object: ObjectConstructor;\n\n/**\n * Creates a new function.\n */\ninterface Function {\n    /**\n     * Calls the function, substituting the specified object for the this value of the function, and the specified array for the arguments of the function.\n     * @param thisArg The object to be used as the this object.\n     * @param argArray A set of arguments to be passed to the function.\n     */\n    apply(this: Function, thisArg: any, argArray?: any): any;\n\n    /**\n     * Calls a method of an object, substituting another object for the current object.\n     * @param thisArg The object to be used as the current object.\n     * @param argArray A list of arguments to be passed to the method.\n     */\n    call(this: Function, thisArg: any, ...argArray: any[]): any;\n\n    /**\n     * For a given function, creates a bound function that has the same body as the original function.\n     * The this object of the bound function is associated with the specified object, and has the specified initial parameters.\n     * @param thisArg An object to which the this keyword can refer inside the new function.\n     * @param argArray A list of arguments to be passed to the new function.\n     */\n    bind(this: Function, thisArg: any, ...argArray: any[]): any;\n\n    /** Returns a string representation of a function. */\n    toString(): string;\n\n    prototype: any;\n    readonly length: number;\n\n    // Non-standard extensions\n    arguments: any;\n    caller: Function;\n}\n\ninterface FunctionConstructor {\n    /**\n     * Creates a new function.\n     * @param args A list of arguments the function accepts.\n     */\n    new (...args: string[]): Function;\n    (...args: string[]): Function;\n    readonly prototype: Function;\n}\n\ndeclare var Function: FunctionConstructor;\n\n/**\n * Extracts the type of the \'this\' parameter of a function type, or \'unknown\' if the function type has no \'this\' parameter.\n */\ntype ThisParameterType<T> = T extends (this: infer U, ...args: never) => any ? U : unknown;\n\n/**\n * Removes the \'this\' parameter from a function type.\n */\ntype OmitThisParameter<T> = unknown extends ThisParameterType<T> ? T : T extends (...args: infer A) => infer R ? (...args: A) => R : T;\n\ninterface CallableFunction extends Function {\n    /**\n     * Calls the function with the specified object as the this value and the elements of specified array as the arguments.\n     * @param thisArg The object to be used as the this object.\n     */\n    apply<T, R>(this: (this: T) => R, thisArg: T): R;\n\n    /**\n     * Calls the function with the specified object as the this value and the elements of specified array as the arguments.\n     * @param thisArg The object to be used as the this object.\n     * @param args An array of argument values to be passed to the function.\n     */\n    apply<T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, args: A): R;\n\n    /**\n     * Calls the function with the specified object as the this value and the specified rest arguments as the arguments.\n     * @param thisArg The object to be used as the this object.\n     * @param args Argument values to be passed to the function.\n     */\n    call<T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, ...args: A): R;\n\n    /**\n     * For a given function, creates a bound function that has the same body as the original function.\n     * The this object of the bound function is associated with the specified object, and has the specified initial parameters.\n     * @param thisArg The object to be used as the this object.\n     */\n    bind<T>(this: T, thisArg: ThisParameterType<T>): OmitThisParameter<T>;\n\n    /**\n     * For a given function, creates a bound function that has the same body as the original function.\n     * The this object of the bound function is associated with the specified object, and has the specified initial parameters.\n     * @param thisArg The object to be used as the this object.\n     * @param args Arguments to bind to the parameters of the function.\n     */\n    bind<T, A extends any[], B extends any[], R>(this: (this: T, ...args: [...A, ...B]) => R, thisArg: T, ...args: A): (...args: B) => R;\n}\n\ninterface NewableFunction extends Function {\n    /**\n     * Calls the function with the specified object as the this value and the elements of specified array as the arguments.\n     * @param thisArg The object to be used as the this object.\n     */\n    apply<T>(this: new () => T, thisArg: T): void;\n    /**\n     * Calls the function with the specified object as the this value and the elements of specified array as the arguments.\n     * @param thisArg The object to be used as the this object.\n     * @param args An array of argument values to be passed to the function.\n     */\n    apply<T, A extends any[]>(this: new (...args: A) => T, thisArg: T, args: A): void;\n\n    /**\n     * Calls the function with the specified object as the this value and the specified rest arguments as the arguments.\n     * @param thisArg The object to be used as the this object.\n     * @param args Argument values to be passed to the function.\n     */\n    call<T, A extends any[]>(this: new (...args: A) => T, thisArg: T, ...args: A): void;\n\n    /**\n     * For a given function, creates a bound function that has the same body as the original function.\n     * The this object of the bound function is associated with the specified object, and has the specified initial parameters.\n     * @param thisArg The object to be used as the this object.\n     */\n    bind<T>(this: T, thisArg: any): T;\n\n    /**\n     * For a given function, creates a bound function that has the same body as the original function.\n     * The this object of the bound function is associated with the specified object, and has the specified initial parameters.\n     * @param thisArg The object to be used as the this object.\n     * @param args Arguments to bind to the parameters of the function.\n     */\n    bind<A extends any[], B extends any[], R>(this: new (...args: [...A, ...B]) => R, thisArg: any, ...args: A): new (...args: B) => R;\n}\n\ninterface IArguments {\n    [index: number]: any;\n    length: number;\n    callee: Function;\n}\n\ninterface String {\n    /** Returns a string representation of a string. */\n    toString(): string;\n\n    /**\n     * Returns the character at the specified index.\n     * @param pos The zero-based index of the desired character.\n     */\n    charAt(pos: number): string;\n\n    /**\n     * Returns the Unicode value of the character at the specified location.\n     * @param index The zero-based index of the desired character. If there is no character at the specified index, NaN is returned.\n     */\n    charCodeAt(index: number): number;\n\n    /**\n     * Returns a string that contains the concatenation of two or more strings.\n     * @param strings The strings to append to the end of the string.\n     */\n    concat(...strings: string[]): string;\n\n    /**\n     * Returns the position of the first occurrence of a substring.\n     * @param searchString The substring to search for in the string\n     * @param position The index at which to begin searching the String object. If omitted, search starts at the beginning of the string.\n     */\n    indexOf(searchString: string, position?: number): number;\n\n    /**\n     * Returns the last occurrence of a substring in the string.\n     * @param searchString The substring to search for.\n     * @param position The index at which to begin searching. If omitted, the search begins at the end of the string.\n     */\n    lastIndexOf(searchString: string, position?: number): number;\n\n    /**\n     * Determines whether two strings are equivalent in the current locale.\n     * @param that String to compare to target string\n     */\n    localeCompare(that: string): number;\n\n    /**\n     * Matches a string with a regular expression, and returns an array containing the results of that search.\n     * @param regexp A variable name or string literal containing the regular expression pattern and flags.\n     */\n    match(regexp: string | RegExp): RegExpMatchArray | null;\n\n    /**\n     * Replaces text in a string, using a regular expression or search string.\n     * @param searchValue A string or regular expression to search for.\n     * @param replaceValue A string containing the text to replace. When the {@linkcode searchValue} is a `RegExp`, all matches are replaced if the `g` flag is set (or only those matches at the beginning, if the `y` flag is also present). Otherwise, only the first match of {@linkcode searchValue} is replaced.\n     */\n    replace(searchValue: string | RegExp, replaceValue: string): string;\n\n    /**\n     * Replaces text in a string, using a regular expression or search string.\n     * @param searchValue A string to search for.\n     * @param replacer A function that returns the replacement text.\n     */\n    replace(searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;\n\n    /**\n     * Finds the first substring match in a regular expression search.\n     * @param regexp The regular expression pattern and applicable flags.\n     */\n    search(regexp: string | RegExp): number;\n\n    /**\n     * Returns a section of a string.\n     * @param start The index to the beginning of the specified portion of stringObj.\n     * @param end The index to the end of the specified portion of stringObj. The substring includes the characters up to, but not including, the character indicated by end.\n     * If this value is not specified, the substring continues to the end of stringObj.\n     */\n    slice(start?: number, end?: number): string;\n\n    /**\n     * Split a string into substrings using the specified separator and return them as an array.\n     * @param separator A string that identifies character or characters to use in separating the string. If omitted, a single-element array containing the entire string is returned.\n     * @param limit A value used to limit the number of elements returned in the array.\n     */\n    split(separator: string | RegExp, limit?: number): string[];\n\n    /**\n     * Returns the substring at the specified location within a String object.\n     * @param start The zero-based index number indicating the beginning of the substring.\n     * @param end Zero-based index number indicating the end of the substring. The substring includes the characters up to, but not including, the character indicated by end.\n     * If end is omitted, the characters from start through the end of the original string are returned.\n     */\n    substring(start: number, end?: number): string;\n\n    /** Converts all the alphabetic characters in a string to lowercase. */\n    toLowerCase(): string;\n\n    /** Converts all alphabetic characters to lowercase, taking into account the host environment\'s current locale. */\n    toLocaleLowerCase(locales?: string | string[]): string;\n\n    /** Converts all the alphabetic characters in a string to uppercase. */\n    toUpperCase(): string;\n\n    /** Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment\'s current locale. */\n    toLocaleUpperCase(locales?: string | string[]): string;\n\n    /** Removes the leading and trailing white space and line terminator characters from a string. */\n    trim(): string;\n\n    /** Returns the length of a String object. */\n    readonly length: number;\n\n    // IE extensions\n    /**\n     * Gets a substring beginning at the specified location and having the specified length.\n     * @deprecated A legacy feature for browser compatibility\n     * @param from The starting position of the desired substring. The index of the first character in the string is zero.\n     * @param length The number of characters to include in the returned substring.\n     */\n    substr(from: number, length?: number): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): string;\n\n    readonly [index: number]: string;\n}\n\ninterface StringConstructor {\n    new (value?: any): String;\n    (value?: any): string;\n    readonly prototype: String;\n    fromCharCode(...codes: number[]): string;\n}\n\n/**\n * Allows manipulation and formatting of text strings and determination and location of substrings within strings.\n */\ndeclare var String: StringConstructor;\n\ninterface Boolean {\n    /** Returns the primitive value of the specified object. */\n    valueOf(): boolean;\n}\n\ninterface BooleanConstructor {\n    new (value?: any): Boolean;\n    <T>(value?: T): boolean;\n    readonly prototype: Boolean;\n}\n\ndeclare var Boolean: BooleanConstructor;\n\ninterface Number {\n    /**\n     * Returns a string representation of an object.\n     * @param radix Specifies a radix for converting numeric values to strings. This value is only used for numbers.\n     */\n    toString(radix?: number): string;\n\n    /**\n     * Returns a string representing a number in fixed-point notation.\n     * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.\n     */\n    toFixed(fractionDigits?: number): string;\n\n    /**\n     * Returns a string containing a number represented in exponential notation.\n     * @param fractionDigits Number of digits after the decimal point. Must be in the range 0 - 20, inclusive.\n     */\n    toExponential(fractionDigits?: number): string;\n\n    /**\n     * Returns a string containing a number represented either in exponential or fixed-point notation with a specified number of digits.\n     * @param precision Number of significant digits. Must be in the range 1 - 21, inclusive.\n     */\n    toPrecision(precision?: number): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): number;\n}\n\ninterface NumberConstructor {\n    new (value?: any): Number;\n    (value?: any): number;\n    readonly prototype: Number;\n\n    /** The largest number that can be represented in JavaScript. Equal to approximately 1.79E+308. */\n    readonly MAX_VALUE: number;\n\n    /** The closest number to zero that can be represented in JavaScript. Equal to approximately 5.00E-324. */\n    readonly MIN_VALUE: number;\n\n    /**\n     * A value that is not a number.\n     * In equality comparisons, NaN does not equal any value, including itself. To test whether a value is equivalent to NaN, use the isNaN function.\n     */\n    readonly NaN: number;\n\n    /**\n     * A value that is less than the largest negative number that can be represented in JavaScript.\n     * JavaScript displays NEGATIVE_INFINITY values as -infinity.\n     */\n    readonly NEGATIVE_INFINITY: number;\n\n    /**\n     * A value greater than the largest number that can be represented in JavaScript.\n     * JavaScript displays POSITIVE_INFINITY values as infinity.\n     */\n    readonly POSITIVE_INFINITY: number;\n}\n\n/** An object that represents a number of any kind. All JavaScript numbers are 64-bit floating-point numbers. */\ndeclare var Number: NumberConstructor;\n\ninterface TemplateStringsArray extends ReadonlyArray<string> {\n    readonly raw: readonly string[];\n}\n\n/**\n * The type of `import.meta`.\n *\n * If you need to declare that a given property exists on `import.meta`,\n * this type may be augmented via interface merging.\n */\ninterface ImportMeta {\n}\n\n/**\n * The type for the optional second argument to `import()`.\n *\n * If your host environment supports additional options, this type may be\n * augmented via interface merging.\n */\ninterface ImportCallOptions {\n    /** @deprecated*/ assert?: ImportAssertions;\n    with?: ImportAttributes;\n}\n\n/**\n * The type for the `assert` property of the optional second argument to `import()`.\n * @deprecated\n */\ninterface ImportAssertions {\n    [key: string]: string;\n}\n\n/**\n * The type for the `with` property of the optional second argument to `import()`.\n */\ninterface ImportAttributes {\n    [key: string]: string;\n}\n\ninterface Math {\n    /** The mathematical constant e. This is Euler\'s number, the base of natural logarithms. */\n    readonly E: number;\n    /** The natural logarithm of 10. */\n    readonly LN10: number;\n    /** The natural logarithm of 2. */\n    readonly LN2: number;\n    /** The base-2 logarithm of e. */\n    readonly LOG2E: number;\n    /** The base-10 logarithm of e. */\n    readonly LOG10E: number;\n    /** Pi. This is the ratio of the circumference of a circle to its diameter. */\n    readonly PI: number;\n    /** The square root of 0.5, or, equivalently, one divided by the square root of 2. */\n    readonly SQRT1_2: number;\n    /** The square root of 2. */\n    readonly SQRT2: number;\n    /**\n     * Returns the absolute value of a number (the value without regard to whether it is positive or negative).\n     * For example, the absolute value of -5 is the same as the absolute value of 5.\n     * @param x A numeric expression for which the absolute value is needed.\n     */\n    abs(x: number): number;\n    /**\n     * Returns the arc cosine (or inverse cosine) of a number.\n     * @param x A numeric expression.\n     */\n    acos(x: number): number;\n    /**\n     * Returns the arcsine of a number.\n     * @param x A numeric expression.\n     */\n    asin(x: number): number;\n    /**\n     * Returns the arctangent of a number.\n     * @param x A numeric expression for which the arctangent is needed.\n     */\n    atan(x: number): number;\n    /**\n     * Returns the angle (in radians) between the X axis and the line going through both the origin and the given point.\n     * @param y A numeric expression representing the cartesian y-coordinate.\n     * @param x A numeric expression representing the cartesian x-coordinate.\n     */\n    atan2(y: number, x: number): number;\n    /**\n     * Returns the smallest integer greater than or equal to its numeric argument.\n     * @param x A numeric expression.\n     */\n    ceil(x: number): number;\n    /**\n     * Returns the cosine of a number.\n     * @param x A numeric expression that contains an angle measured in radians.\n     */\n    cos(x: number): number;\n    /**\n     * Returns e (the base of natural logarithms) raised to a power.\n     * @param x A numeric expression representing the power of e.\n     */\n    exp(x: number): number;\n    /**\n     * Returns the greatest integer less than or equal to its numeric argument.\n     * @param x A numeric expression.\n     */\n    floor(x: number): number;\n    /**\n     * Returns the natural logarithm (base e) of a number.\n     * @param x A numeric expression.\n     */\n    log(x: number): number;\n    /**\n     * Returns the larger of a set of supplied numeric expressions.\n     * @param values Numeric expressions to be evaluated.\n     */\n    max(...values: number[]): number;\n    /**\n     * Returns the smaller of a set of supplied numeric expressions.\n     * @param values Numeric expressions to be evaluated.\n     */\n    min(...values: number[]): number;\n    /**\n     * Returns the value of a base expression taken to a specified power.\n     * @param x The base value of the expression.\n     * @param y The exponent value of the expression.\n     */\n    pow(x: number, y: number): number;\n    /** Returns a pseudorandom number between 0 and 1. */\n    random(): number;\n    /**\n     * Returns a supplied numeric expression rounded to the nearest integer.\n     * @param x The value to be rounded to the nearest integer.\n     */\n    round(x: number): number;\n    /**\n     * Returns the sine of a number.\n     * @param x A numeric expression that contains an angle measured in radians.\n     */\n    sin(x: number): number;\n    /**\n     * Returns the square root of a number.\n     * @param x A numeric expression.\n     */\n    sqrt(x: number): number;\n    /**\n     * Returns the tangent of a number.\n     * @param x A numeric expression that contains an angle measured in radians.\n     */\n    tan(x: number): number;\n}\n/** An intrinsic object that provides basic mathematics functionality and constants. */\ndeclare var Math: Math;\n\n/** Enables basic storage and retrieval of dates and times. */\ninterface Date {\n    /** Returns a string representation of a date. The format of the string depends on the locale. */\n    toString(): string;\n    /** Returns a date as a string value. */\n    toDateString(): string;\n    /** Returns a time as a string value. */\n    toTimeString(): string;\n    /** Returns a value as a string value appropriate to the host environment\'s current locale. */\n    toLocaleString(): string;\n    /** Returns a date as a string value appropriate to the host environment\'s current locale. */\n    toLocaleDateString(): string;\n    /** Returns a time as a string value appropriate to the host environment\'s current locale. */\n    toLocaleTimeString(): string;\n    /** Returns the stored time value in milliseconds since midnight, January 1, 1970 UTC. */\n    valueOf(): number;\n    /** Returns the stored time value in milliseconds since midnight, January 1, 1970 UTC. */\n    getTime(): number;\n    /** Gets the year, using local time. */\n    getFullYear(): number;\n    /** Gets the year using Universal Coordinated Time (UTC). */\n    getUTCFullYear(): number;\n    /** Gets the month, using local time. */\n    getMonth(): number;\n    /** Gets the month of a Date object using Universal Coordinated Time (UTC). */\n    getUTCMonth(): number;\n    /** Gets the day-of-the-month, using local time. */\n    getDate(): number;\n    /** Gets the day-of-the-month, using Universal Coordinated Time (UTC). */\n    getUTCDate(): number;\n    /** Gets the day of the week, using local time. */\n    getDay(): number;\n    /** Gets the day of the week using Universal Coordinated Time (UTC). */\n    getUTCDay(): number;\n    /** Gets the hours in a date, using local time. */\n    getHours(): number;\n    /** Gets the hours value in a Date object using Universal Coordinated Time (UTC). */\n    getUTCHours(): number;\n    /** Gets the minutes of a Date object, using local time. */\n    getMinutes(): number;\n    /** Gets the minutes of a Date object using Universal Coordinated Time (UTC). */\n    getUTCMinutes(): number;\n    /** Gets the seconds of a Date object, using local time. */\n    getSeconds(): number;\n    /** Gets the seconds of a Date object using Universal Coordinated Time (UTC). */\n    getUTCSeconds(): number;\n    /** Gets the milliseconds of a Date, using local time. */\n    getMilliseconds(): number;\n    /** Gets the milliseconds of a Date object using Universal Coordinated Time (UTC). */\n    getUTCMilliseconds(): number;\n    /** Gets the difference in minutes between Universal Coordinated Time (UTC) and the time on the local computer. */\n    getTimezoneOffset(): number;\n    /**\n     * Sets the date and time value in the Date object.\n     * @param time A numeric value representing the number of elapsed milliseconds since midnight, January 1, 1970 GMT.\n     */\n    setTime(time: number): number;\n    /**\n     * Sets the milliseconds value in the Date object using local time.\n     * @param ms A numeric value equal to the millisecond value.\n     */\n    setMilliseconds(ms: number): number;\n    /**\n     * Sets the milliseconds value in the Date object using Universal Coordinated Time (UTC).\n     * @param ms A numeric value equal to the millisecond value.\n     */\n    setUTCMilliseconds(ms: number): number;\n\n    /**\n     * Sets the seconds value in the Date object using local time.\n     * @param sec A numeric value equal to the seconds value.\n     * @param ms A numeric value equal to the milliseconds value.\n     */\n    setSeconds(sec: number, ms?: number): number;\n    /**\n     * Sets the seconds value in the Date object using Universal Coordinated Time (UTC).\n     * @param sec A numeric value equal to the seconds value.\n     * @param ms A numeric value equal to the milliseconds value.\n     */\n    setUTCSeconds(sec: number, ms?: number): number;\n    /**\n     * Sets the minutes value in the Date object using local time.\n     * @param min A numeric value equal to the minutes value.\n     * @param sec A numeric value equal to the seconds value.\n     * @param ms A numeric value equal to the milliseconds value.\n     */\n    setMinutes(min: number, sec?: number, ms?: number): number;\n    /**\n     * Sets the minutes value in the Date object using Universal Coordinated Time (UTC).\n     * @param min A numeric value equal to the minutes value.\n     * @param sec A numeric value equal to the seconds value.\n     * @param ms A numeric value equal to the milliseconds value.\n     */\n    setUTCMinutes(min: number, sec?: number, ms?: number): number;\n    /**\n     * Sets the hour value in the Date object using local time.\n     * @param hours A numeric value equal to the hours value.\n     * @param min A numeric value equal to the minutes value.\n     * @param sec A numeric value equal to the seconds value.\n     * @param ms A numeric value equal to the milliseconds value.\n     */\n    setHours(hours: number, min?: number, sec?: number, ms?: number): number;\n    /**\n     * Sets the hours value in the Date object using Universal Coordinated Time (UTC).\n     * @param hours A numeric value equal to the hours value.\n     * @param min A numeric value equal to the minutes value.\n     * @param sec A numeric value equal to the seconds value.\n     * @param ms A numeric value equal to the milliseconds value.\n     */\n    setUTCHours(hours: number, min?: number, sec?: number, ms?: number): number;\n    /**\n     * Sets the numeric day-of-the-month value of the Date object using local time.\n     * @param date A numeric value equal to the day of the month.\n     */\n    setDate(date: number): number;\n    /**\n     * Sets the numeric day of the month in the Date object using Universal Coordinated Time (UTC).\n     * @param date A numeric value equal to the day of the month.\n     */\n    setUTCDate(date: number): number;\n    /**\n     * Sets the month value in the Date object using local time.\n     * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.\n     * @param date A numeric value representing the day of the month. If this value is not supplied, the value from a call to the getDate method is used.\n     */\n    setMonth(month: number, date?: number): number;\n    /**\n     * Sets the month value in the Date object using Universal Coordinated Time (UTC).\n     * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively.\n     * @param date A numeric value representing the day of the month. If it is not supplied, the value from a call to the getUTCDate method is used.\n     */\n    setUTCMonth(month: number, date?: number): number;\n    /**\n     * Sets the year of the Date object using local time.\n     * @param year A numeric value for the year.\n     * @param month A zero-based numeric value for the month (0 for January, 11 for December). Must be specified if numDate is specified.\n     * @param date A numeric value equal for the day of the month.\n     */\n    setFullYear(year: number, month?: number, date?: number): number;\n    /**\n     * Sets the year value in the Date object using Universal Coordinated Time (UTC).\n     * @param year A numeric value equal to the year.\n     * @param month A numeric value equal to the month. The value for January is 0, and other month values follow consecutively. Must be supplied if numDate is supplied.\n     * @param date A numeric value equal to the day of the month.\n     */\n    setUTCFullYear(year: number, month?: number, date?: number): number;\n    /** Returns a date converted to a string using Universal Coordinated Time (UTC). */\n    toUTCString(): string;\n    /** Returns a date as a string value in ISO format. */\n    toISOString(): string;\n    /** Used by the JSON.stringify method to enable the transformation of an object\'s data for JavaScript Object Notation (JSON) serialization. */\n    toJSON(key?: any): string;\n}\n\ninterface DateConstructor {\n    new (): Date;\n    new (value: number | string): Date;\n    /**\n     * Creates a new Date.\n     * @param year The full year designation is required for cross-century date accuracy. If year is between 0 and 99 is used, then year is assumed to be 1900 + year.\n     * @param monthIndex The month as a number between 0 and 11 (January to December).\n     * @param date The date as a number between 1 and 31.\n     * @param hours Must be supplied if minutes is supplied. A number from 0 to 23 (midnight to 11pm) that specifies the hour.\n     * @param minutes Must be supplied if seconds is supplied. A number from 0 to 59 that specifies the minutes.\n     * @param seconds Must be supplied if milliseconds is supplied. A number from 0 to 59 that specifies the seconds.\n     * @param ms A number from 0 to 999 that specifies the milliseconds.\n     */\n    new (year: number, monthIndex: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): Date;\n    (): string;\n    readonly prototype: Date;\n    /**\n     * Parses a string containing a date, and returns the number of milliseconds between that date and midnight, January 1, 1970.\n     * @param s A date string\n     */\n    parse(s: string): number;\n    /**\n     * Returns the number of milliseconds between midnight, January 1, 1970 Universal Coordinated Time (UTC) (or GMT) and the specified date.\n     * @param year The full year designation is required for cross-century date accuracy. If year is between 0 and 99 is used, then year is assumed to be 1900 + year.\n     * @param monthIndex The month as a number between 0 and 11 (January to December).\n     * @param date The date as a number between 1 and 31.\n     * @param hours Must be supplied if minutes is supplied. A number from 0 to 23 (midnight to 11pm) that specifies the hour.\n     * @param minutes Must be supplied if seconds is supplied. A number from 0 to 59 that specifies the minutes.\n     * @param seconds Must be supplied if milliseconds is supplied. A number from 0 to 59 that specifies the seconds.\n     * @param ms A number from 0 to 999 that specifies the milliseconds.\n     */\n    UTC(year: number, monthIndex: number, date?: number, hours?: number, minutes?: number, seconds?: number, ms?: number): number;\n    /** Returns the number of milliseconds elapsed since midnight, January 1, 1970 Universal Coordinated Time (UTC). */\n    now(): number;\n}\n\ndeclare var Date: DateConstructor;\n\ninterface RegExpMatchArray extends Array<string> {\n    /**\n     * The index of the search at which the result was found.\n     */\n    index?: number;\n    /**\n     * A copy of the search string.\n     */\n    input?: string;\n    /**\n     * The first match. This will always be present because `null` will be returned if there are no matches.\n     */\n    0: string;\n}\n\ninterface RegExpExecArray extends Array<string> {\n    /**\n     * The index of the search at which the result was found.\n     */\n    index: number;\n    /**\n     * A copy of the search string.\n     */\n    input: string;\n    /**\n     * The first match. This will always be present because `null` will be returned if there are no matches.\n     */\n    0: string;\n}\n\ninterface RegExp {\n    /**\n     * Executes a search on a string using a regular expression pattern, and returns an array containing the results of that search.\n     * @param string The String object or string literal on which to perform the search.\n     */\n    exec(string: string): RegExpExecArray | null;\n\n    /**\n     * Returns a Boolean value that indicates whether or not a pattern exists in a searched string.\n     * @param string String on which to perform the search.\n     */\n    test(string: string): boolean;\n\n    /** Returns a copy of the text of the regular expression pattern. Read-only. The regExp argument is a Regular expression object. It can be a variable name or a literal. */\n    readonly source: string;\n\n    /** Returns a Boolean value indicating the state of the global flag (g) used with a regular expression. Default is false. Read-only. */\n    readonly global: boolean;\n\n    /** Returns a Boolean value indicating the state of the ignoreCase flag (i) used with a regular expression. Default is false. Read-only. */\n    readonly ignoreCase: boolean;\n\n    /** Returns a Boolean value indicating the state of the multiline flag (m) used with a regular expression. Default is false. Read-only. */\n    readonly multiline: boolean;\n\n    lastIndex: number;\n\n    // Non-standard extensions\n    /** @deprecated A legacy feature for browser compatibility */\n    compile(pattern: string, flags?: string): this;\n}\n\ninterface RegExpConstructor {\n    new (pattern: RegExp | string): RegExp;\n    new (pattern: string, flags?: string): RegExp;\n    (pattern: RegExp | string): RegExp;\n    (pattern: string, flags?: string): RegExp;\n    readonly "prototype": RegExp;\n\n    // Non-standard extensions\n    /** @deprecated A legacy feature for browser compatibility */\n    "$1": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    "$2": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    "$3": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    "$4": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    "$5": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    "$6": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    "$7": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    "$8": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    "$9": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    "input": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    "$_": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    "lastMatch": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    "$&": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    "lastParen": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    "$+": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    "leftContext": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    "$`": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    "rightContext": string;\n    /** @deprecated A legacy feature for browser compatibility */\n    "$\'": string;\n}\n\ndeclare var RegExp: RegExpConstructor;\n\ninterface Error {\n    name: string;\n    message: string;\n    stack?: string;\n}\n\ninterface ErrorConstructor {\n    new (message?: string): Error;\n    (message?: string): Error;\n    readonly prototype: Error;\n}\n\ndeclare var Error: ErrorConstructor;\n\ninterface EvalError extends Error {\n}\n\ninterface EvalErrorConstructor extends ErrorConstructor {\n    new (message?: string): EvalError;\n    (message?: string): EvalError;\n    readonly prototype: EvalError;\n}\n\ndeclare var EvalError: EvalErrorConstructor;\n\ninterface RangeError extends Error {\n}\n\ninterface RangeErrorConstructor extends ErrorConstructor {\n    new (message?: string): RangeError;\n    (message?: string): RangeError;\n    readonly prototype: RangeError;\n}\n\ndeclare var RangeError: RangeErrorConstructor;\n\ninterface ReferenceError extends Error {\n}\n\ninterface ReferenceErrorConstructor extends ErrorConstructor {\n    new (message?: string): ReferenceError;\n    (message?: string): ReferenceError;\n    readonly prototype: ReferenceError;\n}\n\ndeclare var ReferenceError: ReferenceErrorConstructor;\n\ninterface SyntaxError extends Error {\n}\n\ninterface SyntaxErrorConstructor extends ErrorConstructor {\n    new (message?: string): SyntaxError;\n    (message?: string): SyntaxError;\n    readonly prototype: SyntaxError;\n}\n\ndeclare var SyntaxError: SyntaxErrorConstructor;\n\ninterface TypeError extends Error {\n}\n\ninterface TypeErrorConstructor extends ErrorConstructor {\n    new (message?: string): TypeError;\n    (message?: string): TypeError;\n    readonly prototype: TypeError;\n}\n\ndeclare var TypeError: TypeErrorConstructor;\n\ninterface URIError extends Error {\n}\n\ninterface URIErrorConstructor extends ErrorConstructor {\n    new (message?: string): URIError;\n    (message?: string): URIError;\n    readonly prototype: URIError;\n}\n\ndeclare var URIError: URIErrorConstructor;\n\ninterface JSON {\n    /**\n     * Converts a JavaScript Object Notation (JSON) string into an object.\n     * @param text A valid JSON string.\n     * @param reviver A function that transforms the results. This function is called for each member of the object.\n     * If a member contains nested objects, the nested objects are transformed before the parent object is.\n     */\n    parse(text: string, reviver?: (this: any, key: string, value: any) => any): any;\n    /**\n     * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\n     * @param value A JavaScript value, usually an object or array, to be converted.\n     * @param replacer A function that transforms the results.\n     * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\n     */\n    stringify(value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string;\n    /**\n     * Converts a JavaScript value to a JavaScript Object Notation (JSON) string.\n     * @param value A JavaScript value, usually an object or array, to be converted.\n     * @param replacer An array of strings and numbers that acts as an approved list for selecting the object properties that will be stringified.\n     * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\n     */\n    stringify(value: any, replacer?: (number | string)[] | null, space?: string | number): string;\n}\n\n/**\n * An intrinsic object that provides functions to convert JavaScript values to and from the JavaScript Object Notation (JSON) format.\n */\ndeclare var JSON: JSON;\n\n/////////////////////////////\n/// ECMAScript Array API (specially handled by compiler)\n/////////////////////////////\n\ninterface ReadonlyArray<T> {\n    /**\n     * Gets the length of the array. This is a number one higher than the highest element defined in an array.\n     */\n    readonly length: number;\n    /**\n     * Returns a string representation of an array.\n     */\n    toString(): string;\n    /**\n     * Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.\n     */\n    toLocaleString(): string;\n    /**\n     * Combines two or more arrays.\n     * @param items Additional items to add to the end of array1.\n     */\n    concat(...items: ConcatArray<T>[]): T[];\n    /**\n     * Combines two or more arrays.\n     * @param items Additional items to add to the end of array1.\n     */\n    concat(...items: (T | ConcatArray<T>)[]): T[];\n    /**\n     * Adds all the elements of an array separated by the specified separator string.\n     * @param separator A string used to separate one element of an array from the next in the resulting String. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index \'end\'.\n     */\n    slice(start?: number, end?: number): T[];\n    /**\n     * Returns the index of the first occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\n     */\n    indexOf(searchElement: T, fromIndex?: number): number;\n    /**\n     * Returns the index of the last occurrence of a specified value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at the last index in the array.\n     */\n    lastIndexOf(searchElement: T, fromIndex?: number): number;\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every<S extends T>(predicate: (value: T, index: number, array: readonly T[]) => value is S, thisArg?: any): this is readonly S[];\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: T, index: number, array: readonly T[]) => unknown, thisArg?: any): boolean;\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value true, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: T, index: number, array: readonly T[]) => unknown, thisArg?: any): boolean;\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: T, index: number, array: readonly T[]) => void, thisArg?: any): void;\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n     */\n    map<U>(callbackfn: (value: T, index: number, array: readonly T[]) => U, thisArg?: any): U[];\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\n     */\n    filter<S extends T>(predicate: (value: T, index: number, array: readonly T[]) => value is S, thisArg?: any): S[];\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: T, index: number, array: readonly T[]) => unknown, thisArg?: any): T[];\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: readonly T[]) => T): T;\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: readonly T[]) => T, initialValue: T): T;\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: readonly T[]) => U, initialValue: U): U;\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: readonly T[]) => T): T;\n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: readonly T[]) => T, initialValue: T): T;\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: readonly T[]) => U, initialValue: U): U;\n\n    readonly [n: number]: T;\n}\n\ninterface ConcatArray<T> {\n    readonly length: number;\n    readonly [n: number]: T;\n    join(separator?: string): string;\n    slice(start?: number, end?: number): T[];\n}\n\ninterface Array<T> {\n    /**\n     * Gets or sets the length of the array. This is a number one higher than the highest index in the array.\n     */\n    length: number;\n    /**\n     * Returns a string representation of an array.\n     */\n    toString(): string;\n    /**\n     * Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.\n     */\n    toLocaleString(): string;\n    /**\n     * Removes the last element from an array and returns it.\n     * If the array is empty, undefined is returned and the array is not modified.\n     */\n    pop(): T | undefined;\n    /**\n     * Appends new elements to the end of an array, and returns the new length of the array.\n     * @param items New elements to add to the array.\n     */\n    push(...items: T[]): number;\n    /**\n     * Combines two or more arrays.\n     * This method returns a new array without modifying any existing arrays.\n     * @param items Additional arrays and/or items to add to the end of the array.\n     */\n    concat(...items: ConcatArray<T>[]): T[];\n    /**\n     * Combines two or more arrays.\n     * This method returns a new array without modifying any existing arrays.\n     * @param items Additional arrays and/or items to add to the end of the array.\n     */\n    concat(...items: (T | ConcatArray<T>)[]): T[];\n    /**\n     * Adds all the elements of an array into a string, separated by the specified separator string.\n     * @param separator A string used to separate one element of the array from the next in the resulting string. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n    /**\n     * Reverses the elements in an array in place.\n     * This method mutates the array and returns a reference to the same array.\n     */\n    reverse(): T[];\n    /**\n     * Removes the first element from an array and returns it.\n     * If the array is empty, undefined is returned and the array is not modified.\n     */\n    shift(): T | undefined;\n    /**\n     * Returns a copy of a section of an array.\n     * For both start and end, a negative index can be used to indicate an offset from the end of the array.\n     * For example, -2 refers to the second to last element of the array.\n     * @param start The beginning index of the specified portion of the array.\n     * If start is undefined, then the slice begins at index 0.\n     * @param end The end index of the specified portion of the array. This is exclusive of the element at the index \'end\'.\n     * If end is undefined, then the slice extends to the end of the array.\n     */\n    slice(start?: number, end?: number): T[];\n    /**\n     * Sorts an array in place.\n     * This method mutates the array and returns a reference to the same array.\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\n     * a negative value if the first argument is less than the second argument, zero if they\'re equal, and a positive\n     * value otherwise. If omitted, the elements are sorted in ascending, UTF-16 code unit order.\n     * ```ts\n     * [11,2,22,1].sort((a, b) => a - b)\n     * ```\n     */\n    sort(compareFn?: (a: T, b: T) => number): this;\n    /**\n     * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n     * @param start The zero-based location in the array from which to start removing elements.\n     * @param deleteCount The number of elements to remove.\n     * @returns An array containing the elements that were deleted.\n     */\n    splice(start: number, deleteCount?: number): T[];\n    /**\n     * Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements.\n     * @param start The zero-based location in the array from which to start removing elements.\n     * @param deleteCount The number of elements to remove.\n     * @param items Elements to insert into the array in place of the deleted elements.\n     * @returns An array containing the elements that were deleted.\n     */\n    splice(start: number, deleteCount: number, ...items: T[]): T[];\n    /**\n     * Inserts new elements at the start of an array, and returns the new length of the array.\n     * @param items Elements to insert at the start of the array.\n     */\n    unshift(...items: T[]): number;\n    /**\n     * Returns the index of the first occurrence of a value in an array, or -1 if it is not present.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the search starts at index 0.\n     */\n    indexOf(searchElement: T, fromIndex?: number): number;\n    /**\n     * Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin searching backward. If fromIndex is omitted, the search starts at the last index in the array.\n     */\n    lastIndexOf(searchElement: T, fromIndex?: number): number;\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every<S extends T>(predicate: (value: T, index: number, array: T[]) => value is S, thisArg?: any): this is S[];\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): boolean;\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value true, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): boolean;\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: T, index: number, array: T[]) => void, thisArg?: any): void;\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.\n     */\n    map<U>(callbackfn: (value: T, index: number, array: T[]) => U, thisArg?: any): U[];\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\n     */\n    filter<S extends T>(predicate: (value: T, index: number, array: T[]) => value is S, thisArg?: any): S[];\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function. If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: T, index: number, array: T[]) => unknown, thisArg?: any): T[];\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T;\n    reduce(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T;\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T): T;\n    reduceRight(callbackfn: (previousValue: T, currentValue: T, currentIndex: number, array: T[]) => T, initialValue: T): T;\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: T, currentIndex: number, array: T[]) => U, initialValue: U): U;\n\n    [n: number]: T;\n}\n\ninterface ArrayConstructor {\n    new (arrayLength?: number): any[];\n    new <T>(arrayLength: number): T[];\n    new <T>(...items: T[]): T[];\n    (arrayLength?: number): any[];\n    <T>(arrayLength: number): T[];\n    <T>(...items: T[]): T[];\n    isArray(arg: any): arg is any[];\n    readonly prototype: any[];\n}\n\ndeclare var Array: ArrayConstructor;\n\ninterface TypedPropertyDescriptor<T> {\n    enumerable?: boolean;\n    configurable?: boolean;\n    writable?: boolean;\n    value?: T;\n    get?: () => T;\n    set?: (value: T) => void;\n}\n\ndeclare type PromiseConstructorLike = new <T>(executor: (resolve: (value: T | PromiseLike<T>) => void, reject: (reason?: any) => void) => void) => PromiseLike<T>;\n\ninterface PromiseLike<T> {\n    /**\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\n     * @param onfulfilled The callback to execute when the Promise is resolved.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of which ever callback is executed.\n     */\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): PromiseLike<TResult1 | TResult2>;\n}\n\n/**\n * Represents the completion of an asynchronous operation\n */\ninterface Promise<T> {\n    /**\n     * Attaches callbacks for the resolution and/or rejection of the Promise.\n     * @param onfulfilled The callback to execute when the Promise is resolved.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of which ever callback is executed.\n     */\n    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;\n\n    /**\n     * Attaches a callback for only the rejection of the Promise.\n     * @param onrejected The callback to execute when the Promise is rejected.\n     * @returns A Promise for the completion of the callback.\n     */\n    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;\n}\n\n/**\n * Recursively unwraps the "awaited type" of a type. Non-promise "thenables" should resolve to `never`. This emulates the behavior of `await`.\n */\ntype Awaited<T> = T extends null | undefined ? T : // special case for `null | undefined` when not in `--strictNullChecks` mode\n    T extends object & { then(onfulfilled: infer F, ...args: infer _): any; } ? // `await` only unwraps object types with a callable `then`. Non-object types are not unwrapped\n        F extends ((value: infer V, ...args: infer _) => any) ? // if the argument to `then` is callable, extracts the first argument\n            Awaited<V> : // recursively unwrap the value\n        never : // the argument to `then` was not callable\n    T; // non-object or non-thenable\n\ninterface ArrayLike<T> {\n    readonly length: number;\n    readonly [n: number]: T;\n}\n\n/**\n * Make all properties in T optional\n */\ntype Partial<T> = {\n    [P in keyof T]?: T[P];\n};\n\n/**\n * Make all properties in T required\n */\ntype Required<T> = {\n    [P in keyof T]-?: T[P];\n};\n\n/**\n * Make all properties in T readonly\n */\ntype Readonly<T> = {\n    readonly [P in keyof T]: T[P];\n};\n\n/**\n * From T, pick a set of properties whose keys are in the union K\n */\ntype Pick<T, K extends keyof T> = {\n    [P in K]: T[P];\n};\n\n/**\n * Construct a type with a set of properties K of type T\n */\ntype Record<K extends keyof any, T> = {\n    [P in K]: T;\n};\n\n/**\n * Exclude from T those types that are assignable to U\n */\ntype Exclude<T, U> = T extends U ? never : T;\n\n/**\n * Extract from T those types that are assignable to U\n */\ntype Extract<T, U> = T extends U ? T : never;\n\n/**\n * Construct a type with the properties of T except for those in type K.\n */\ntype Omit<T, K extends keyof any> = Pick<T, Exclude<keyof T, K>>;\n\n/**\n * Exclude null and undefined from T\n */\ntype NonNullable<T> = T & {};\n\n/**\n * Obtain the parameters of a function type in a tuple\n */\ntype Parameters<T extends (...args: any) => any> = T extends (...args: infer P) => any ? P : never;\n\n/**\n * Obtain the parameters of a constructor function type in a tuple\n */\ntype ConstructorParameters<T extends abstract new (...args: any) => any> = T extends abstract new (...args: infer P) => any ? P : never;\n\n/**\n * Obtain the return type of a function type\n */\ntype ReturnType<T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any;\n\n/**\n * Obtain the return type of a constructor function type\n */\ntype InstanceType<T extends abstract new (...args: any) => any> = T extends abstract new (...args: any) => infer R ? R : any;\n\n/**\n * Convert string literal type to uppercase\n */\ntype Uppercase<S extends string> = intrinsic;\n\n/**\n * Convert string literal type to lowercase\n */\ntype Lowercase<S extends string> = intrinsic;\n\n/**\n * Convert first character of string literal type to uppercase\n */\ntype Capitalize<S extends string> = intrinsic;\n\n/**\n * Convert first character of string literal type to lowercase\n */\ntype Uncapitalize<S extends string> = intrinsic;\n\n/**\n * Marker for non-inference type position\n */\ntype NoInfer<T> = intrinsic;\n\n/**\n * Marker for contextual \'this\' type\n */\ninterface ThisType<T> {}\n\n/**\n * Stores types to be used with WeakSet, WeakMap, WeakRef, and FinalizationRegistry\n */\ninterface WeakKeyTypes {\n    object: object;\n}\n\ntype WeakKey = WeakKeyTypes[keyof WeakKeyTypes];\n\n/**\n * Represents a raw buffer of binary data, which is used to store data for the\n * different typed arrays. ArrayBuffers cannot be read from or written to directly,\n * but can be passed to a typed array or DataView Object to interpret the raw\n * buffer as needed.\n */\ninterface ArrayBuffer {\n    /**\n     * Read-only. The length of the ArrayBuffer (in bytes).\n     */\n    readonly byteLength: number;\n\n    /**\n     * Returns a section of an ArrayBuffer.\n     */\n    slice(begin?: number, end?: number): ArrayBuffer;\n}\n\n/**\n * Allowed ArrayBuffer types for the buffer of an ArrayBufferView and related Typed Arrays.\n */\ninterface ArrayBufferTypes {\n    ArrayBuffer: ArrayBuffer;\n}\ntype ArrayBufferLike = ArrayBufferTypes[keyof ArrayBufferTypes];\n\ninterface ArrayBufferConstructor {\n    readonly prototype: ArrayBuffer;\n    new (byteLength: number): ArrayBuffer;\n    isView(arg: any): arg is ArrayBufferView;\n}\ndeclare var ArrayBuffer: ArrayBufferConstructor;\n\ninterface ArrayBufferView<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {\n    /**\n     * The ArrayBuffer instance referenced by the array.\n     */\n    readonly buffer: TArrayBuffer;\n\n    /**\n     * The length in bytes of the array.\n     */\n    readonly byteLength: number;\n\n    /**\n     * The offset in bytes of the array.\n     */\n    readonly byteOffset: number;\n}\n\ninterface DataView<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {\n    readonly buffer: TArrayBuffer;\n    readonly byteLength: number;\n    readonly byteOffset: number;\n    /**\n     * Gets the Float32 value at the specified byte offset from the start of the view. There is\n     * no alignment constraint; multi-byte values may be fetched from any offset.\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\n     * @param littleEndian If false or undefined, a big-endian value should be read.\n     */\n    getFloat32(byteOffset: number, littleEndian?: boolean): number;\n\n    /**\n     * Gets the Float64 value at the specified byte offset from the start of the view. There is\n     * no alignment constraint; multi-byte values may be fetched from any offset.\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\n     * @param littleEndian If false or undefined, a big-endian value should be read.\n     */\n    getFloat64(byteOffset: number, littleEndian?: boolean): number;\n\n    /**\n     * Gets the Int8 value at the specified byte offset from the start of the view. There is\n     * no alignment constraint; multi-byte values may be fetched from any offset.\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\n     */\n    getInt8(byteOffset: number): number;\n\n    /**\n     * Gets the Int16 value at the specified byte offset from the start of the view. There is\n     * no alignment constraint; multi-byte values may be fetched from any offset.\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\n     * @param littleEndian If false or undefined, a big-endian value should be read.\n     */\n    getInt16(byteOffset: number, littleEndian?: boolean): number;\n    /**\n     * Gets the Int32 value at the specified byte offset from the start of the view. There is\n     * no alignment constraint; multi-byte values may be fetched from any offset.\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\n     * @param littleEndian If false or undefined, a big-endian value should be read.\n     */\n    getInt32(byteOffset: number, littleEndian?: boolean): number;\n\n    /**\n     * Gets the Uint8 value at the specified byte offset from the start of the view. There is\n     * no alignment constraint; multi-byte values may be fetched from any offset.\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\n     */\n    getUint8(byteOffset: number): number;\n\n    /**\n     * Gets the Uint16 value at the specified byte offset from the start of the view. There is\n     * no alignment constraint; multi-byte values may be fetched from any offset.\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\n     * @param littleEndian If false or undefined, a big-endian value should be read.\n     */\n    getUint16(byteOffset: number, littleEndian?: boolean): number;\n\n    /**\n     * Gets the Uint32 value at the specified byte offset from the start of the view. There is\n     * no alignment constraint; multi-byte values may be fetched from any offset.\n     * @param byteOffset The place in the buffer at which the value should be retrieved.\n     * @param littleEndian If false or undefined, a big-endian value should be read.\n     */\n    getUint32(byteOffset: number, littleEndian?: boolean): number;\n\n    /**\n     * Stores an Float32 value at the specified byte offset from the start of the view.\n     * @param byteOffset The place in the buffer at which the value should be set.\n     * @param value The value to set.\n     * @param littleEndian If false or undefined, a big-endian value should be written.\n     */\n    setFloat32(byteOffset: number, value: number, littleEndian?: boolean): void;\n\n    /**\n     * Stores an Float64 value at the specified byte offset from the start of the view.\n     * @param byteOffset The place in the buffer at which the value should be set.\n     * @param value The value to set.\n     * @param littleEndian If false or undefined, a big-endian value should be written.\n     */\n    setFloat64(byteOffset: number, value: number, littleEndian?: boolean): void;\n\n    /**\n     * Stores an Int8 value at the specified byte offset from the start of the view.\n     * @param byteOffset The place in the buffer at which the value should be set.\n     * @param value The value to set.\n     */\n    setInt8(byteOffset: number, value: number): void;\n\n    /**\n     * Stores an Int16 value at the specified byte offset from the start of the view.\n     * @param byteOffset The place in the buffer at which the value should be set.\n     * @param value The value to set.\n     * @param littleEndian If false or undefined, a big-endian value should be written.\n     */\n    setInt16(byteOffset: number, value: number, littleEndian?: boolean): void;\n\n    /**\n     * Stores an Int32 value at the specified byte offset from the start of the view.\n     * @param byteOffset The place in the buffer at which the value should be set.\n     * @param value The value to set.\n     * @param littleEndian If false or undefined, a big-endian value should be written.\n     */\n    setInt32(byteOffset: number, value: number, littleEndian?: boolean): void;\n\n    /**\n     * Stores an Uint8 value at the specified byte offset from the start of the view.\n     * @param byteOffset The place in the buffer at which the value should be set.\n     * @param value The value to set.\n     */\n    setUint8(byteOffset: number, value: number): void;\n\n    /**\n     * Stores an Uint16 value at the specified byte offset from the start of the view.\n     * @param byteOffset The place in the buffer at which the value should be set.\n     * @param value The value to set.\n     * @param littleEndian If false or undefined, a big-endian value should be written.\n     */\n    setUint16(byteOffset: number, value: number, littleEndian?: boolean): void;\n\n    /**\n     * Stores an Uint32 value at the specified byte offset from the start of the view.\n     * @param byteOffset The place in the buffer at which the value should be set.\n     * @param value The value to set.\n     * @param littleEndian If false or undefined, a big-endian value should be written.\n     */\n    setUint32(byteOffset: number, value: number, littleEndian?: boolean): void;\n}\ninterface DataViewConstructor {\n    readonly prototype: DataView<ArrayBufferLike>;\n    new <TArrayBuffer extends ArrayBufferLike & { BYTES_PER_ELEMENT?: never; }>(buffer: TArrayBuffer, byteOffset?: number, byteLength?: number): DataView<TArrayBuffer>;\n}\ndeclare var DataView: DataViewConstructor;\n\n/**\n * A typed array of 8-bit integer values. The contents are initialized to 0. If the requested\n * number of bytes could not be allocated an exception is raised.\n */\ninterface Int8Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * The ArrayBuffer instance referenced by the array.\n     */\n    readonly buffer: TArrayBuffer;\n\n    /**\n     * The length in bytes of the array.\n     */\n    readonly byteLength: number;\n\n    /**\n     * The offset in bytes of the array.\n     */\n    readonly byteOffset: number;\n\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: number, index: number, array: this) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: number, start?: number, end?: number): this;\n\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls\n     * the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: number, index: number, array: this) => any, thisArg?: any): Int8Array<ArrayBuffer>;\n\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find(predicate: (value: number, index: number, obj: this) => boolean, thisArg?: any): number | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: number, index: number, obj: this) => boolean, thisArg?: any): number;\n\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn A function that accepts up to three arguments. forEach calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: number, index: number, array: this) => void, thisArg?: any): void;\n\n    /**\n     * Returns the index of the first occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    indexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * Adds all the elements of an array separated by the specified separator string.\n     * @param separator A string used to separate one element of an array from the next in the\n     * resulting String. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n\n    /**\n     * Returns the index of the last occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * The length of the array.\n     */\n    readonly length: number;\n\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that\n     * contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    map(callbackfn: (value: number, index: number, array: this) => number, thisArg?: any): Int8Array<ArrayBuffer>;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: this) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: this) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: this) => U, initialValue: U): U;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an\n     * argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: this) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: this) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: this) => U, initialValue: U): U;\n\n    /**\n     * Reverses the elements in an Array.\n     */\n    reverse(): this;\n\n    /**\n     * Sets a value or an array of values.\n     * @param array A typed or untyped array of values to set.\n     * @param offset The index in the current array at which the values are to be written.\n     */\n    set(array: ArrayLike<number>, offset?: number): void;\n\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index \'end\'.\n     */\n    slice(start?: number, end?: number): Int8Array<ArrayBuffer>;\n\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value true, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: number, index: number, array: this) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Sorts an array.\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\n     * a negative value if first argument is less than second argument, zero if they\'re equal and a positive\n     * value otherwise. If omitted, the elements are sorted in ascending order.\n     * ```ts\n     * [11,2,22,1].sort((a, b) => a - b)\n     * ```\n     */\n    sort(compareFn?: (a: number, b: number) => number): this;\n\n    /**\n     * Gets a new Int8Array view of the ArrayBuffer store for this array, referencing the elements\n     * at begin, inclusive, up to end, exclusive.\n     * @param begin The index of the beginning of the array.\n     * @param end The index of the end of the array.\n     */\n    subarray(begin?: number, end?: number): Int8Array<TArrayBuffer>;\n\n    /**\n     * Converts a number to a string by using the current locale.\n     */\n    toLocaleString(): string;\n\n    /**\n     * Returns a string representation of an array.\n     */\n    toString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): this;\n\n    [index: number]: number;\n}\ninterface Int8ArrayConstructor {\n    readonly prototype: Int8Array<ArrayBufferLike>;\n    new (length: number): Int8Array<ArrayBuffer>;\n    new (array: ArrayLike<number>): Int8Array<ArrayBuffer>;\n    new <TArrayBuffer extends ArrayBufferLike = ArrayBuffer>(buffer: TArrayBuffer, byteOffset?: number, length?: number): Int8Array<TArrayBuffer>;\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Int8Array<ArrayBuffer>;\n    new (array: ArrayLike<number> | ArrayBuffer): Int8Array<ArrayBuffer>;\n\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of(...items: number[]): Int8Array<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like object to convert to an array.\n     */\n    from(arrayLike: ArrayLike<number>): Int8Array<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of \'this\' used to invoke the mapfn.\n     */\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>;\n}\ndeclare var Int8Array: Int8ArrayConstructor;\n\n/**\n * A typed array of 8-bit unsigned integer values. The contents are initialized to 0. If the\n * requested number of bytes could not be allocated an exception is raised.\n */\ninterface Uint8Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * The ArrayBuffer instance referenced by the array.\n     */\n    readonly buffer: TArrayBuffer;\n\n    /**\n     * The length in bytes of the array.\n     */\n    readonly byteLength: number;\n\n    /**\n     * The offset in bytes of the array.\n     */\n    readonly byteOffset: number;\n\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: number, index: number, array: this) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: number, start?: number, end?: number): this;\n\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls\n     * the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: number, index: number, array: this) => any, thisArg?: any): Uint8Array<ArrayBuffer>;\n\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find(predicate: (value: number, index: number, obj: this) => boolean, thisArg?: any): number | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: number, index: number, obj: this) => boolean, thisArg?: any): number;\n\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn A function that accepts up to three arguments. forEach calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: number, index: number, array: this) => void, thisArg?: any): void;\n\n    /**\n     * Returns the index of the first occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    indexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * Adds all the elements of an array separated by the specified separator string.\n     * @param separator A string used to separate one element of an array from the next in the\n     * resulting String. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n\n    /**\n     * Returns the index of the last occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * The length of the array.\n     */\n    readonly length: number;\n\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that\n     * contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    map(callbackfn: (value: number, index: number, array: this) => number, thisArg?: any): Uint8Array<ArrayBuffer>;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: this) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: this) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: this) => U, initialValue: U): U;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an\n     * argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: this) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: this) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: this) => U, initialValue: U): U;\n\n    /**\n     * Reverses the elements in an Array.\n     */\n    reverse(): this;\n\n    /**\n     * Sets a value or an array of values.\n     * @param array A typed or untyped array of values to set.\n     * @param offset The index in the current array at which the values are to be written.\n     */\n    set(array: ArrayLike<number>, offset?: number): void;\n\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index \'end\'.\n     */\n    slice(start?: number, end?: number): Uint8Array<ArrayBuffer>;\n\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value true, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: number, index: number, array: this) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Sorts an array.\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\n     * a negative value if first argument is less than second argument, zero if they\'re equal and a positive\n     * value otherwise. If omitted, the elements are sorted in ascending order.\n     * ```ts\n     * [11,2,22,1].sort((a, b) => a - b)\n     * ```\n     */\n    sort(compareFn?: (a: number, b: number) => number): this;\n\n    /**\n     * Gets a new Uint8Array view of the ArrayBuffer store for this array, referencing the elements\n     * at begin, inclusive, up to end, exclusive.\n     * @param begin The index of the beginning of the array.\n     * @param end The index of the end of the array.\n     */\n    subarray(begin?: number, end?: number): Uint8Array<TArrayBuffer>;\n\n    /**\n     * Converts a number to a string by using the current locale.\n     */\n    toLocaleString(): string;\n\n    /**\n     * Returns a string representation of an array.\n     */\n    toString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): this;\n\n    [index: number]: number;\n}\ninterface Uint8ArrayConstructor {\n    readonly prototype: Uint8Array<ArrayBufferLike>;\n    new (length: number): Uint8Array<ArrayBuffer>;\n    new (array: ArrayLike<number>): Uint8Array<ArrayBuffer>;\n    new <TArrayBuffer extends ArrayBufferLike = ArrayBuffer>(buffer: TArrayBuffer, byteOffset?: number, length?: number): Uint8Array<TArrayBuffer>;\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Uint8Array<ArrayBuffer>;\n    new (array: ArrayLike<number> | ArrayBuffer): Uint8Array<ArrayBuffer>;\n\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of(...items: number[]): Uint8Array<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like object to convert to an array.\n     */\n    from(arrayLike: ArrayLike<number>): Uint8Array<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of \'this\' used to invoke the mapfn.\n     */\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>;\n}\ndeclare var Uint8Array: Uint8ArrayConstructor;\n\n/**\n * A typed array of 8-bit unsigned integer (clamped) values. The contents are initialized to 0.\n * If the requested number of bytes could not be allocated an exception is raised.\n */\ninterface Uint8ClampedArray<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * The ArrayBuffer instance referenced by the array.\n     */\n    readonly buffer: TArrayBuffer;\n\n    /**\n     * The length in bytes of the array.\n     */\n    readonly byteLength: number;\n\n    /**\n     * The offset in bytes of the array.\n     */\n    readonly byteOffset: number;\n\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: number, index: number, array: this) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: number, start?: number, end?: number): this;\n\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls\n     * the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: number, index: number, array: this) => any, thisArg?: any): Uint8ClampedArray<ArrayBuffer>;\n\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find(predicate: (value: number, index: number, obj: this) => boolean, thisArg?: any): number | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: number, index: number, obj: this) => boolean, thisArg?: any): number;\n\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn A function that accepts up to three arguments. forEach calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: number, index: number, array: this) => void, thisArg?: any): void;\n\n    /**\n     * Returns the index of the first occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    indexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * Adds all the elements of an array separated by the specified separator string.\n     * @param separator A string used to separate one element of an array from the next in the\n     * resulting String. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n\n    /**\n     * Returns the index of the last occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * The length of the array.\n     */\n    readonly length: number;\n\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that\n     * contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    map(callbackfn: (value: number, index: number, array: this) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: this) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: this) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: this) => U, initialValue: U): U;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an\n     * argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: this) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: this) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: this) => U, initialValue: U): U;\n\n    /**\n     * Reverses the elements in an Array.\n     */\n    reverse(): this;\n\n    /**\n     * Sets a value or an array of values.\n     * @param array A typed or untyped array of values to set.\n     * @param offset The index in the current array at which the values are to be written.\n     */\n    set(array: ArrayLike<number>, offset?: number): void;\n\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index \'end\'.\n     */\n    slice(start?: number, end?: number): Uint8ClampedArray<ArrayBuffer>;\n\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value true, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: number, index: number, array: this) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Sorts an array.\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\n     * a negative value if first argument is less than second argument, zero if they\'re equal and a positive\n     * value otherwise. If omitted, the elements are sorted in ascending order.\n     * ```ts\n     * [11,2,22,1].sort((a, b) => a - b)\n     * ```\n     */\n    sort(compareFn?: (a: number, b: number) => number): this;\n\n    /**\n     * Gets a new Uint8ClampedArray view of the ArrayBuffer store for this array, referencing the elements\n     * at begin, inclusive, up to end, exclusive.\n     * @param begin The index of the beginning of the array.\n     * @param end The index of the end of the array.\n     */\n    subarray(begin?: number, end?: number): Uint8ClampedArray<TArrayBuffer>;\n\n    /**\n     * Converts a number to a string by using the current locale.\n     */\n    toLocaleString(): string;\n\n    /**\n     * Returns a string representation of an array.\n     */\n    toString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): this;\n\n    [index: number]: number;\n}\ninterface Uint8ClampedArrayConstructor {\n    readonly prototype: Uint8ClampedArray<ArrayBufferLike>;\n    new (length: number): Uint8ClampedArray<ArrayBuffer>;\n    new (array: ArrayLike<number>): Uint8ClampedArray<ArrayBuffer>;\n    new <TArrayBuffer extends ArrayBufferLike = ArrayBuffer>(buffer: TArrayBuffer, byteOffset?: number, length?: number): Uint8ClampedArray<TArrayBuffer>;\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Uint8ClampedArray<ArrayBuffer>;\n    new (array: ArrayLike<number> | ArrayBuffer): Uint8ClampedArray<ArrayBuffer>;\n\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of(...items: number[]): Uint8ClampedArray<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like object to convert to an array.\n     */\n    from(arrayLike: ArrayLike<number>): Uint8ClampedArray<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of \'this\' used to invoke the mapfn.\n     */\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>;\n}\ndeclare var Uint8ClampedArray: Uint8ClampedArrayConstructor;\n\n/**\n * A typed array of 16-bit signed integer values. The contents are initialized to 0. If the\n * requested number of bytes could not be allocated an exception is raised.\n */\ninterface Int16Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * The ArrayBuffer instance referenced by the array.\n     */\n    readonly buffer: TArrayBuffer;\n\n    /**\n     * The length in bytes of the array.\n     */\n    readonly byteLength: number;\n\n    /**\n     * The offset in bytes of the array.\n     */\n    readonly byteOffset: number;\n\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: number, index: number, array: this) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: number, start?: number, end?: number): this;\n\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls\n     * the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: number, index: number, array: this) => any, thisArg?: any): Int16Array<ArrayBuffer>;\n\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find(predicate: (value: number, index: number, obj: this) => boolean, thisArg?: any): number | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: number, index: number, obj: this) => boolean, thisArg?: any): number;\n\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn A function that accepts up to three arguments. forEach calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: number, index: number, array: this) => void, thisArg?: any): void;\n    /**\n     * Returns the index of the first occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    indexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * Adds all the elements of an array separated by the specified separator string.\n     * @param separator A string used to separate one element of an array from the next in the\n     * resulting String. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n\n    /**\n     * Returns the index of the last occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * The length of the array.\n     */\n    readonly length: number;\n\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that\n     * contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    map(callbackfn: (value: number, index: number, array: this) => number, thisArg?: any): Int16Array<ArrayBuffer>;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: this) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: this) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: this) => U, initialValue: U): U;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an\n     * argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: this) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: this) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: this) => U, initialValue: U): U;\n\n    /**\n     * Reverses the elements in an Array.\n     */\n    reverse(): this;\n\n    /**\n     * Sets a value or an array of values.\n     * @param array A typed or untyped array of values to set.\n     * @param offset The index in the current array at which the values are to be written.\n     */\n    set(array: ArrayLike<number>, offset?: number): void;\n\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index \'end\'.\n     */\n    slice(start?: number, end?: number): Int16Array<ArrayBuffer>;\n\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value true, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: number, index: number, array: this) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Sorts an array.\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\n     * a negative value if first argument is less than second argument, zero if they\'re equal and a positive\n     * value otherwise. If omitted, the elements are sorted in ascending order.\n     * ```ts\n     * [11,2,22,1].sort((a, b) => a - b)\n     * ```\n     */\n    sort(compareFn?: (a: number, b: number) => number): this;\n\n    /**\n     * Gets a new Int16Array view of the ArrayBuffer store for this array, referencing the elements\n     * at begin, inclusive, up to end, exclusive.\n     * @param begin The index of the beginning of the array.\n     * @param end The index of the end of the array.\n     */\n    subarray(begin?: number, end?: number): Int16Array<TArrayBuffer>;\n\n    /**\n     * Converts a number to a string by using the current locale.\n     */\n    toLocaleString(): string;\n\n    /**\n     * Returns a string representation of an array.\n     */\n    toString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): this;\n\n    [index: number]: number;\n}\ninterface Int16ArrayConstructor {\n    readonly prototype: Int16Array<ArrayBufferLike>;\n    new (length: number): Int16Array<ArrayBuffer>;\n    new (array: ArrayLike<number>): Int16Array<ArrayBuffer>;\n    new <TArrayBuffer extends ArrayBufferLike = ArrayBuffer>(buffer: TArrayBuffer, byteOffset?: number, length?: number): Int16Array<TArrayBuffer>;\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Int16Array<ArrayBuffer>;\n    new (array: ArrayLike<number> | ArrayBuffer): Int16Array<ArrayBuffer>;\n\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of(...items: number[]): Int16Array<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like object to convert to an array.\n     */\n    from(arrayLike: ArrayLike<number>): Int16Array<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of \'this\' used to invoke the mapfn.\n     */\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>;\n}\ndeclare var Int16Array: Int16ArrayConstructor;\n\n/**\n * A typed array of 16-bit unsigned integer values. The contents are initialized to 0. If the\n * requested number of bytes could not be allocated an exception is raised.\n */\ninterface Uint16Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * The ArrayBuffer instance referenced by the array.\n     */\n    readonly buffer: TArrayBuffer;\n\n    /**\n     * The length in bytes of the array.\n     */\n    readonly byteLength: number;\n\n    /**\n     * The offset in bytes of the array.\n     */\n    readonly byteOffset: number;\n\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: number, index: number, array: this) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: number, start?: number, end?: number): this;\n\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls\n     * the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: number, index: number, array: this) => any, thisArg?: any): Uint16Array<ArrayBuffer>;\n\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find(predicate: (value: number, index: number, obj: this) => boolean, thisArg?: any): number | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: number, index: number, obj: this) => boolean, thisArg?: any): number;\n\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn A function that accepts up to three arguments. forEach calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: number, index: number, array: this) => void, thisArg?: any): void;\n\n    /**\n     * Returns the index of the first occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    indexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * Adds all the elements of an array separated by the specified separator string.\n     * @param separator A string used to separate one element of an array from the next in the\n     * resulting String. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n\n    /**\n     * Returns the index of the last occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * The length of the array.\n     */\n    readonly length: number;\n\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that\n     * contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    map(callbackfn: (value: number, index: number, array: this) => number, thisArg?: any): Uint16Array<ArrayBuffer>;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: this) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: this) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: this) => U, initialValue: U): U;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an\n     * argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: this) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: this) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: this) => U, initialValue: U): U;\n\n    /**\n     * Reverses the elements in an Array.\n     */\n    reverse(): this;\n\n    /**\n     * Sets a value or an array of values.\n     * @param array A typed or untyped array of values to set.\n     * @param offset The index in the current array at which the values are to be written.\n     */\n    set(array: ArrayLike<number>, offset?: number): void;\n\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index \'end\'.\n     */\n    slice(start?: number, end?: number): Uint16Array<ArrayBuffer>;\n\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value true, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: number, index: number, array: this) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Sorts an array.\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\n     * a negative value if first argument is less than second argument, zero if they\'re equal and a positive\n     * value otherwise. If omitted, the elements are sorted in ascending order.\n     * ```ts\n     * [11,2,22,1].sort((a, b) => a - b)\n     * ```\n     */\n    sort(compareFn?: (a: number, b: number) => number): this;\n\n    /**\n     * Gets a new Uint16Array view of the ArrayBuffer store for this array, referencing the elements\n     * at begin, inclusive, up to end, exclusive.\n     * @param begin The index of the beginning of the array.\n     * @param end The index of the end of the array.\n     */\n    subarray(begin?: number, end?: number): Uint16Array<TArrayBuffer>;\n\n    /**\n     * Converts a number to a string by using the current locale.\n     */\n    toLocaleString(): string;\n\n    /**\n     * Returns a string representation of an array.\n     */\n    toString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): this;\n\n    [index: number]: number;\n}\ninterface Uint16ArrayConstructor {\n    readonly prototype: Uint16Array<ArrayBufferLike>;\n    new (length: number): Uint16Array<ArrayBuffer>;\n    new (array: ArrayLike<number>): Uint16Array<ArrayBuffer>;\n    new <TArrayBuffer extends ArrayBufferLike = ArrayBuffer>(buffer: TArrayBuffer, byteOffset?: number, length?: number): Uint16Array<TArrayBuffer>;\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Uint16Array<ArrayBuffer>;\n    new (array: ArrayLike<number> | ArrayBuffer): Uint16Array<ArrayBuffer>;\n\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of(...items: number[]): Uint16Array<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like object to convert to an array.\n     */\n    from(arrayLike: ArrayLike<number>): Uint16Array<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of \'this\' used to invoke the mapfn.\n     */\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>;\n}\ndeclare var Uint16Array: Uint16ArrayConstructor;\n/**\n * A typed array of 32-bit signed integer values. The contents are initialized to 0. If the\n * requested number of bytes could not be allocated an exception is raised.\n */\ninterface Int32Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * The ArrayBuffer instance referenced by the array.\n     */\n    readonly buffer: TArrayBuffer;\n\n    /**\n     * The length in bytes of the array.\n     */\n    readonly byteLength: number;\n\n    /**\n     * The offset in bytes of the array.\n     */\n    readonly byteOffset: number;\n\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: number, index: number, array: this) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: number, start?: number, end?: number): this;\n\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls\n     * the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: number, index: number, array: this) => any, thisArg?: any): Int32Array<ArrayBuffer>;\n\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find(predicate: (value: number, index: number, obj: this) => boolean, thisArg?: any): number | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: number, index: number, obj: this) => boolean, thisArg?: any): number;\n\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn A function that accepts up to three arguments. forEach calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: number, index: number, array: this) => void, thisArg?: any): void;\n\n    /**\n     * Returns the index of the first occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    indexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * Adds all the elements of an array separated by the specified separator string.\n     * @param separator A string used to separate one element of an array from the next in the\n     * resulting String. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n\n    /**\n     * Returns the index of the last occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * The length of the array.\n     */\n    readonly length: number;\n\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that\n     * contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    map(callbackfn: (value: number, index: number, array: this) => number, thisArg?: any): Int32Array<ArrayBuffer>;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: this) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: this) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: this) => U, initialValue: U): U;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an\n     * argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: this) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: this) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: this) => U, initialValue: U): U;\n\n    /**\n     * Reverses the elements in an Array.\n     */\n    reverse(): this;\n\n    /**\n     * Sets a value or an array of values.\n     * @param array A typed or untyped array of values to set.\n     * @param offset The index in the current array at which the values are to be written.\n     */\n    set(array: ArrayLike<number>, offset?: number): void;\n\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index \'end\'.\n     */\n    slice(start?: number, end?: number): Int32Array<ArrayBuffer>;\n\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value true, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: number, index: number, array: this) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Sorts an array.\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\n     * a negative value if first argument is less than second argument, zero if they\'re equal and a positive\n     * value otherwise. If omitted, the elements are sorted in ascending order.\n     * ```ts\n     * [11,2,22,1].sort((a, b) => a - b)\n     * ```\n     */\n    sort(compareFn?: (a: number, b: number) => number): this;\n\n    /**\n     * Gets a new Int32Array view of the ArrayBuffer store for this array, referencing the elements\n     * at begin, inclusive, up to end, exclusive.\n     * @param begin The index of the beginning of the array.\n     * @param end The index of the end of the array.\n     */\n    subarray(begin?: number, end?: number): Int32Array<TArrayBuffer>;\n\n    /**\n     * Converts a number to a string by using the current locale.\n     */\n    toLocaleString(): string;\n\n    /**\n     * Returns a string representation of an array.\n     */\n    toString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): this;\n\n    [index: number]: number;\n}\ninterface Int32ArrayConstructor {\n    readonly prototype: Int32Array<ArrayBufferLike>;\n    new (length: number): Int32Array<ArrayBuffer>;\n    new (array: ArrayLike<number>): Int32Array<ArrayBuffer>;\n    new <TArrayBuffer extends ArrayBufferLike = ArrayBuffer>(buffer: TArrayBuffer, byteOffset?: number, length?: number): Int32Array<TArrayBuffer>;\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Int32Array<ArrayBuffer>;\n    new (array: ArrayLike<number> | ArrayBuffer): Int32Array<ArrayBuffer>;\n\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of(...items: number[]): Int32Array<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like object to convert to an array.\n     */\n    from(arrayLike: ArrayLike<number>): Int32Array<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of \'this\' used to invoke the mapfn.\n     */\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>;\n}\ndeclare var Int32Array: Int32ArrayConstructor;\n\n/**\n * A typed array of 32-bit unsigned integer values. The contents are initialized to 0. If the\n * requested number of bytes could not be allocated an exception is raised.\n */\ninterface Uint32Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * The ArrayBuffer instance referenced by the array.\n     */\n    readonly buffer: TArrayBuffer;\n\n    /**\n     * The length in bytes of the array.\n     */\n    readonly byteLength: number;\n\n    /**\n     * The offset in bytes of the array.\n     */\n    readonly byteOffset: number;\n\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: number, index: number, array: this) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: number, start?: number, end?: number): this;\n\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls\n     * the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: number, index: number, array: this) => any, thisArg?: any): Uint32Array<ArrayBuffer>;\n\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find(predicate: (value: number, index: number, obj: this) => boolean, thisArg?: any): number | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: number, index: number, obj: this) => boolean, thisArg?: any): number;\n\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn A function that accepts up to three arguments. forEach calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: number, index: number, array: this) => void, thisArg?: any): void;\n    /**\n     * Returns the index of the first occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    indexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * Adds all the elements of an array separated by the specified separator string.\n     * @param separator A string used to separate one element of an array from the next in the\n     * resulting String. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n\n    /**\n     * Returns the index of the last occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * The length of the array.\n     */\n    readonly length: number;\n\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that\n     * contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    map(callbackfn: (value: number, index: number, array: this) => number, thisArg?: any): Uint32Array<ArrayBuffer>;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: this) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: this) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: this) => U, initialValue: U): U;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an\n     * argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: this) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: this) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: this) => U, initialValue: U): U;\n\n    /**\n     * Reverses the elements in an Array.\n     */\n    reverse(): this;\n\n    /**\n     * Sets a value or an array of values.\n     * @param array A typed or untyped array of values to set.\n     * @param offset The index in the current array at which the values are to be written.\n     */\n    set(array: ArrayLike<number>, offset?: number): void;\n\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index \'end\'.\n     */\n    slice(start?: number, end?: number): Uint32Array<ArrayBuffer>;\n\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value true, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: number, index: number, array: this) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Sorts an array.\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\n     * a negative value if first argument is less than second argument, zero if they\'re equal and a positive\n     * value otherwise. If omitted, the elements are sorted in ascending order.\n     * ```ts\n     * [11,2,22,1].sort((a, b) => a - b)\n     * ```\n     */\n    sort(compareFn?: (a: number, b: number) => number): this;\n\n    /**\n     * Gets a new Uint32Array view of the ArrayBuffer store for this array, referencing the elements\n     * at begin, inclusive, up to end, exclusive.\n     * @param begin The index of the beginning of the array.\n     * @param end The index of the end of the array.\n     */\n    subarray(begin?: number, end?: number): Uint32Array<TArrayBuffer>;\n\n    /**\n     * Converts a number to a string by using the current locale.\n     */\n    toLocaleString(): string;\n\n    /**\n     * Returns a string representation of an array.\n     */\n    toString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): this;\n\n    [index: number]: number;\n}\ninterface Uint32ArrayConstructor {\n    readonly prototype: Uint32Array<ArrayBufferLike>;\n    new (length: number): Uint32Array<ArrayBuffer>;\n    new (array: ArrayLike<number>): Uint32Array<ArrayBuffer>;\n    new <TArrayBuffer extends ArrayBufferLike = ArrayBuffer>(buffer: TArrayBuffer, byteOffset?: number, length?: number): Uint32Array<TArrayBuffer>;\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Uint32Array<ArrayBuffer>;\n    new (array: ArrayLike<number> | ArrayBuffer): Uint32Array<ArrayBuffer>;\n\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of(...items: number[]): Uint32Array<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like object to convert to an array.\n     */\n    from(arrayLike: ArrayLike<number>): Uint32Array<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of \'this\' used to invoke the mapfn.\n     */\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>;\n}\ndeclare var Uint32Array: Uint32ArrayConstructor;\n\n/**\n * A typed array of 32-bit float values. The contents are initialized to 0. If the requested number\n * of bytes could not be allocated an exception is raised.\n */\ninterface Float32Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * The ArrayBuffer instance referenced by the array.\n     */\n    readonly buffer: TArrayBuffer;\n\n    /**\n     * The length in bytes of the array.\n     */\n    readonly byteLength: number;\n\n    /**\n     * The offset in bytes of the array.\n     */\n    readonly byteOffset: number;\n\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: number, index: number, array: this) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: number, start?: number, end?: number): this;\n\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls\n     * the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: number, index: number, array: this) => any, thisArg?: any): Float32Array<ArrayBuffer>;\n\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find(predicate: (value: number, index: number, obj: this) => boolean, thisArg?: any): number | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: number, index: number, obj: this) => boolean, thisArg?: any): number;\n\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn A function that accepts up to three arguments. forEach calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: number, index: number, array: this) => void, thisArg?: any): void;\n\n    /**\n     * Returns the index of the first occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    indexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * Adds all the elements of an array separated by the specified separator string.\n     * @param separator A string used to separate one element of an array from the next in the\n     * resulting String. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n\n    /**\n     * Returns the index of the last occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * The length of the array.\n     */\n    readonly length: number;\n\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that\n     * contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    map(callbackfn: (value: number, index: number, array: this) => number, thisArg?: any): Float32Array<ArrayBuffer>;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: this) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: this) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: this) => U, initialValue: U): U;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an\n     * argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: this) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: this) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: this) => U, initialValue: U): U;\n\n    /**\n     * Reverses the elements in an Array.\n     */\n    reverse(): this;\n\n    /**\n     * Sets a value or an array of values.\n     * @param array A typed or untyped array of values to set.\n     * @param offset The index in the current array at which the values are to be written.\n     */\n    set(array: ArrayLike<number>, offset?: number): void;\n\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index \'end\'.\n     */\n    slice(start?: number, end?: number): Float32Array<ArrayBuffer>;\n\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value true, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: number, index: number, array: this) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Sorts an array.\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\n     * a negative value if first argument is less than second argument, zero if they\'re equal and a positive\n     * value otherwise. If omitted, the elements are sorted in ascending order.\n     * ```ts\n     * [11,2,22,1].sort((a, b) => a - b)\n     * ```\n     */\n    sort(compareFn?: (a: number, b: number) => number): this;\n\n    /**\n     * Gets a new Float32Array view of the ArrayBuffer store for this array, referencing the elements\n     * at begin, inclusive, up to end, exclusive.\n     * @param begin The index of the beginning of the array.\n     * @param end The index of the end of the array.\n     */\n    subarray(begin?: number, end?: number): Float32Array<TArrayBuffer>;\n\n    /**\n     * Converts a number to a string by using the current locale.\n     */\n    toLocaleString(): string;\n\n    /**\n     * Returns a string representation of an array.\n     */\n    toString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): this;\n\n    [index: number]: number;\n}\ninterface Float32ArrayConstructor {\n    readonly prototype: Float32Array<ArrayBufferLike>;\n    new (length: number): Float32Array<ArrayBuffer>;\n    new (array: ArrayLike<number>): Float32Array<ArrayBuffer>;\n    new <TArrayBuffer extends ArrayBufferLike = ArrayBuffer>(buffer: TArrayBuffer, byteOffset?: number, length?: number): Float32Array<TArrayBuffer>;\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Float32Array<ArrayBuffer>;\n    new (array: ArrayLike<number> | ArrayBuffer): Float32Array<ArrayBuffer>;\n\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of(...items: number[]): Float32Array<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like object to convert to an array.\n     */\n    from(arrayLike: ArrayLike<number>): Float32Array<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of \'this\' used to invoke the mapfn.\n     */\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>;\n}\ndeclare var Float32Array: Float32ArrayConstructor;\n\n/**\n * A typed array of 64-bit float values. The contents are initialized to 0. If the requested\n * number of bytes could not be allocated an exception is raised.\n */\ninterface Float64Array<TArrayBuffer extends ArrayBufferLike = ArrayBufferLike> {\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * The ArrayBuffer instance referenced by the array.\n     */\n    readonly buffer: TArrayBuffer;\n\n    /**\n     * The length in bytes of the array.\n     */\n    readonly byteLength: number;\n\n    /**\n     * The offset in bytes of the array.\n     */\n    readonly byteOffset: number;\n\n    /**\n     * Returns the this object after copying a section of the array identified by start and end\n     * to the same array starting at position target\n     * @param target If target is negative, it is treated as length+target where length is the\n     * length of the array.\n     * @param start If start is negative, it is treated as length+start. If end is negative, it\n     * is treated as length+end.\n     * @param end If not specified, length of the this object is used as its default value.\n     */\n    copyWithin(target: number, start: number, end?: number): this;\n\n    /**\n     * Determines whether all the members of an array satisfy the specified test.\n     * @param predicate A function that accepts up to three arguments. The every method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value false, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    every(predicate: (value: number, index: number, array: this) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Changes all array elements from `start` to `end` index to a static `value` and returns the modified array\n     * @param value value to fill array section with\n     * @param start index to start filling the array at. If start is negative, it is treated as\n     * length+start where length is the length of the array.\n     * @param end index to stop filling the array at. If end is negative, it is treated as\n     * length+end.\n     */\n    fill(value: number, start?: number, end?: number): this;\n\n    /**\n     * Returns the elements of an array that meet the condition specified in a callback function.\n     * @param predicate A function that accepts up to three arguments. The filter method calls\n     * the predicate function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    filter(predicate: (value: number, index: number, array: this) => any, thisArg?: any): Float64Array<ArrayBuffer>;\n\n    /**\n     * Returns the value of the first element in the array where predicate is true, and undefined\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found, find\n     * immediately returns that element value. Otherwise, find returns undefined.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    find(predicate: (value: number, index: number, obj: this) => boolean, thisArg?: any): number | undefined;\n\n    /**\n     * Returns the index of the first element in the array where predicate is true, and -1\n     * otherwise.\n     * @param predicate find calls predicate once for each element of the array, in ascending\n     * order, until it finds one where predicate returns true. If such an element is found,\n     * findIndex immediately returns that element index. Otherwise, findIndex returns -1.\n     * @param thisArg If provided, it will be used as the this value for each invocation of\n     * predicate. If it is not provided, undefined is used instead.\n     */\n    findIndex(predicate: (value: number, index: number, obj: this) => boolean, thisArg?: any): number;\n\n    /**\n     * Performs the specified action for each element in an array.\n     * @param callbackfn A function that accepts up to three arguments. forEach calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    forEach(callbackfn: (value: number, index: number, array: this) => void, thisArg?: any): void;\n\n    /**\n     * Returns the index of the first occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    indexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * Adds all the elements of an array separated by the specified separator string.\n     * @param separator A string used to separate one element of an array from the next in the\n     * resulting String. If omitted, the array elements are separated with a comma.\n     */\n    join(separator?: string): string;\n\n    /**\n     * Returns the index of the last occurrence of a value in an array.\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The array index at which to begin the search. If fromIndex is omitted, the\n     * search starts at index 0.\n     */\n    lastIndexOf(searchElement: number, fromIndex?: number): number;\n\n    /**\n     * The length of the array.\n     */\n    readonly length: number;\n\n    /**\n     * Calls a defined callback function on each element of an array, and returns an array that\n     * contains the results.\n     * @param callbackfn A function that accepts up to three arguments. The map method calls the\n     * callbackfn function one time for each element in the array.\n     * @param thisArg An object to which the this keyword can refer in the callbackfn function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    map(callbackfn: (value: number, index: number, array: this) => number, thisArg?: any): Float64Array<ArrayBuffer>;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: this) => number): number;\n    reduce(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: this) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array. The return value of\n     * the callback function is the accumulated result, and is provided as an argument in the next\n     * call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduce method calls the\n     * callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduce<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: this) => U, initialValue: U): U;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an\n     * argument instead of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: this) => number): number;\n    reduceRight(callbackfn: (previousValue: number, currentValue: number, currentIndex: number, array: this) => number, initialValue: number): number;\n\n    /**\n     * Calls the specified callback function for all the elements in an array, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls\n     * the callbackfn function one time for each element in the array.\n     * @param initialValue If initialValue is specified, it is used as the initial value to start\n     * the accumulation. The first call to the callbackfn function provides this value as an argument\n     * instead of an array value.\n     */\n    reduceRight<U>(callbackfn: (previousValue: U, currentValue: number, currentIndex: number, array: this) => U, initialValue: U): U;\n\n    /**\n     * Reverses the elements in an Array.\n     */\n    reverse(): this;\n\n    /**\n     * Sets a value or an array of values.\n     * @param array A typed or untyped array of values to set.\n     * @param offset The index in the current array at which the values are to be written.\n     */\n    set(array: ArrayLike<number>, offset?: number): void;\n\n    /**\n     * Returns a section of an array.\n     * @param start The beginning of the specified portion of the array.\n     * @param end The end of the specified portion of the array. This is exclusive of the element at the index \'end\'.\n     */\n    slice(start?: number, end?: number): Float64Array<ArrayBuffer>;\n\n    /**\n     * Determines whether the specified callback function returns true for any element of an array.\n     * @param predicate A function that accepts up to three arguments. The some method calls\n     * the predicate function for each element in the array until the predicate returns a value\n     * which is coercible to the Boolean value true, or until the end of the array.\n     * @param thisArg An object to which the this keyword can refer in the predicate function.\n     * If thisArg is omitted, undefined is used as the this value.\n     */\n    some(predicate: (value: number, index: number, array: this) => unknown, thisArg?: any): boolean;\n\n    /**\n     * Sorts an array.\n     * @param compareFn Function used to determine the order of the elements. It is expected to return\n     * a negative value if first argument is less than second argument, zero if they\'re equal and a positive\n     * value otherwise. If omitted, the elements are sorted in ascending order.\n     * ```ts\n     * [11,2,22,1].sort((a, b) => a - b)\n     * ```\n     */\n    sort(compareFn?: (a: number, b: number) => number): this;\n\n    /**\n     * Gets a new Float64Array view of the ArrayBuffer store for this array, referencing the elements\n     * at begin, inclusive, up to end, exclusive.\n     * @param begin The index of the beginning of the array.\n     * @param end The index of the end of the array.\n     */\n    subarray(begin?: number, end?: number): Float64Array<TArrayBuffer>;\n\n    /**\n     * Converts a number to a string by using the current locale.\n     */\n    toLocaleString(): string;\n\n    /**\n     * Returns a string representation of an array.\n     */\n    toString(): string;\n\n    /** Returns the primitive value of the specified object. */\n    valueOf(): this;\n\n    [index: number]: number;\n}\ninterface Float64ArrayConstructor {\n    readonly prototype: Float64Array<ArrayBufferLike>;\n    new (length: number): Float64Array<ArrayBuffer>;\n    new (array: ArrayLike<number>): Float64Array<ArrayBuffer>;\n    new <TArrayBuffer extends ArrayBufferLike = ArrayBuffer>(buffer: TArrayBuffer, byteOffset?: number, length?: number): Float64Array<TArrayBuffer>;\n    new (buffer: ArrayBuffer, byteOffset?: number, length?: number): Float64Array<ArrayBuffer>;\n    new (array: ArrayLike<number> | ArrayBuffer): Float64Array<ArrayBuffer>;\n\n    /**\n     * The size in bytes of each element in the array.\n     */\n    readonly BYTES_PER_ELEMENT: number;\n\n    /**\n     * Returns a new array from a set of elements.\n     * @param items A set of elements to include in the new array object.\n     */\n    of(...items: number[]): Float64Array<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like object to convert to an array.\n     */\n    from(arrayLike: ArrayLike<number>): Float64Array<ArrayBuffer>;\n\n    /**\n     * Creates an array from an array-like or iterable object.\n     * @param arrayLike An array-like object to convert to an array.\n     * @param mapfn A mapping function to call on every element of the array.\n     * @param thisArg Value of \'this\' used to invoke the mapfn.\n     */\n    from<T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>;\n}\ndeclare var Float64Array: Float64ArrayConstructor;\n\n/////////////////////////////\n/// ECMAScript Internationalization API\n/////////////////////////////\n\ndeclare namespace Intl {\n    interface CollatorOptions {\n        usage?: "sort" | "search" | undefined;\n        localeMatcher?: "lookup" | "best fit" | undefined;\n        numeric?: boolean | undefined;\n        caseFirst?: "upper" | "lower" | "false" | undefined;\n        sensitivity?: "base" | "accent" | "case" | "variant" | undefined;\n        collation?: "big5han" | "compat" | "dict" | "direct" | "ducet" | "emoji" | "eor" | "gb2312" | "phonebk" | "phonetic" | "pinyin" | "reformed" | "searchjl" | "stroke" | "trad" | "unihan" | "zhuyin" | undefined;\n        ignorePunctuation?: boolean | undefined;\n    }\n\n    interface ResolvedCollatorOptions {\n        locale: string;\n        usage: string;\n        sensitivity: string;\n        ignorePunctuation: boolean;\n        collation: string;\n        caseFirst: string;\n        numeric: boolean;\n    }\n\n    interface Collator {\n        compare(x: string, y: string): number;\n        resolvedOptions(): ResolvedCollatorOptions;\n    }\n\n    interface CollatorConstructor {\n        new (locales?: string | string[], options?: CollatorOptions): Collator;\n        (locales?: string | string[], options?: CollatorOptions): Collator;\n        supportedLocalesOf(locales: string | string[], options?: CollatorOptions): string[];\n    }\n\n    var Collator: CollatorConstructor;\n\n    interface NumberFormatOptionsStyleRegistry {\n        decimal: never;\n        percent: never;\n        currency: never;\n    }\n\n    type NumberFormatOptionsStyle = keyof NumberFormatOptionsStyleRegistry;\n\n    interface NumberFormatOptionsCurrencyDisplayRegistry {\n        code: never;\n        symbol: never;\n        name: never;\n    }\n\n    type NumberFormatOptionsCurrencyDisplay = keyof NumberFormatOptionsCurrencyDisplayRegistry;\n\n    interface NumberFormatOptionsUseGroupingRegistry {}\n\n    type NumberFormatOptionsUseGrouping = {} extends NumberFormatOptionsUseGroupingRegistry ? boolean : keyof NumberFormatOptionsUseGroupingRegistry | "true" | "false" | boolean;\n    type ResolvedNumberFormatOptionsUseGrouping = {} extends NumberFormatOptionsUseGroupingRegistry ? boolean : keyof NumberFormatOptionsUseGroupingRegistry | false;\n\n    interface NumberFormatOptions {\n        localeMatcher?: "lookup" | "best fit" | undefined;\n        style?: NumberFormatOptionsStyle | undefined;\n        currency?: string | undefined;\n        currencyDisplay?: NumberFormatOptionsCurrencyDisplay | undefined;\n        useGrouping?: NumberFormatOptionsUseGrouping | undefined;\n        minimumIntegerDigits?: number | undefined;\n        minimumFractionDigits?: number | undefined;\n        maximumFractionDigits?: number | undefined;\n        minimumSignificantDigits?: number | undefined;\n        maximumSignificantDigits?: number | undefined;\n    }\n\n    interface ResolvedNumberFormatOptions {\n        locale: string;\n        numberingSystem: string;\n        style: NumberFormatOptionsStyle;\n        currency?: string;\n        currencyDisplay?: NumberFormatOptionsCurrencyDisplay;\n        minimumIntegerDigits: number;\n        minimumFractionDigits?: number;\n        maximumFractionDigits?: number;\n        minimumSignificantDigits?: number;\n        maximumSignificantDigits?: number;\n        useGrouping: ResolvedNumberFormatOptionsUseGrouping;\n    }\n\n    interface NumberFormat {\n        format(value: number): string;\n        resolvedOptions(): ResolvedNumberFormatOptions;\n    }\n\n    interface NumberFormatConstructor {\n        new (locales?: string | string[], options?: NumberFormatOptions): NumberFormat;\n        (locales?: string | string[], options?: NumberFormatOptions): NumberFormat;\n        supportedLocalesOf(locales: string | string[], options?: NumberFormatOptions): string[];\n        readonly prototype: NumberFormat;\n    }\n\n    var NumberFormat: NumberFormatConstructor;\n\n    interface DateTimeFormatOptions {\n        localeMatcher?: "best fit" | "lookup" | undefined;\n        weekday?: "long" | "short" | "narrow" | undefined;\n        era?: "long" | "short" | "narrow" | undefined;\n        year?: "numeric" | "2-digit" | undefined;\n        month?: "numeric" | "2-digit" | "long" | "short" | "narrow" | undefined;\n        day?: "numeric" | "2-digit" | undefined;\n        hour?: "numeric" | "2-digit" | undefined;\n        minute?: "numeric" | "2-digit" | undefined;\n        second?: "numeric" | "2-digit" | undefined;\n        timeZoneName?: "short" | "long" | "shortOffset" | "longOffset" | "shortGeneric" | "longGeneric" | undefined;\n        formatMatcher?: "best fit" | "basic" | undefined;\n        hour12?: boolean | undefined;\n        timeZone?: string | undefined;\n    }\n\n    interface ResolvedDateTimeFormatOptions {\n        locale: string;\n        calendar: string;\n        numberingSystem: string;\n        timeZone: string;\n        hour12?: boolean;\n        weekday?: string;\n        era?: string;\n        year?: string;\n        month?: string;\n        day?: string;\n        hour?: string;\n        minute?: string;\n        second?: string;\n        timeZoneName?: string;\n    }\n\n    interface DateTimeFormat {\n        format(date?: Date | number): string;\n        resolvedOptions(): ResolvedDateTimeFormatOptions;\n    }\n\n    interface DateTimeFormatConstructor {\n        new (locales?: string | string[], options?: DateTimeFormatOptions): DateTimeFormat;\n        (locales?: string | string[], options?: DateTimeFormatOptions): DateTimeFormat;\n        supportedLocalesOf(locales: string | string[], options?: DateTimeFormatOptions): string[];\n        readonly prototype: DateTimeFormat;\n    }\n\n    var DateTimeFormat: DateTimeFormatConstructor;\n}\n\ninterface String {\n    /**\n     * Determines whether two strings are equivalent in the current or specified locale.\n     * @param that String to compare to target string\n     * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used. This parameter must conform to BCP 47 standards; see the Intl.Collator object for details.\n     * @param options An object that contains one or more properties that specify comparison options. see the Intl.Collator object for details.\n     */\n    localeCompare(that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;\n}\n\ninterface Number {\n    /**\n     * Converts a number to a string by using the current or specified locale.\n     * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n     * @param options An object that contains one or more properties that specify comparison options.\n     */\n    toLocaleString(locales?: string | string[], options?: Intl.NumberFormatOptions): string;\n}\n\ninterface Date {\n    /**\n     * Converts a date and time to a string by using the current or specified locale.\n     * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n     * @param options An object that contains one or more properties that specify comparison options.\n     */\n    toLocaleString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;\n    /**\n     * Converts a date to a string by using the current or specified locale.\n     * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n     * @param options An object that contains one or more properties that specify comparison options.\n     */\n    toLocaleDateString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;\n\n    /**\n     * Converts a time to a string by using the current or specified locale.\n     * @param locales A locale string or array of locale strings that contain one or more language or locale tags. If you include more than one locale string, list them in descending order of priority so that the first entry is the preferred locale. If you omit this parameter, the default locale of the JavaScript runtime is used.\n     * @param options An object that contains one or more properties that specify comparison options.\n     */\n    toLocaleTimeString(locales?: string | string[], options?: Intl.DateTimeFormatOptions): string;\n}\n',
  'undici-types/package.json':
    '{\n  "name": "undici-types",\n  "version": "5.26.5",\n  "description": "A stand-alone types package for Undici",\n  "homepage": "https://undici.nodejs.org",\n  "bugs": {\n    "url": "https://github.com/nodejs/undici/issues"\n  },\n  "repository": {\n    "type": "git",\n    "url": "git+https://github.com/nodejs/undici.git"\n  },\n  "license": "MIT",\n  "types": "index.d.ts",\n  "files": [\n    "*.d.ts"\n  ],\n  "contributors": [\n    {\n      "name": "Daniele Belardi",\n      "url": "https://github.com/dnlup",\n      "author": true\n    },\n    {\n      "name": "Ethan Arrowood",\n      "url": "https://github.com/ethan-arrowood",\n      "author": true\n    },\n    {\n      "name": "Matteo Collina",\n      "url": "https://github.com/mcollina",\n      "author": true\n    },\n    {\n      "name": "Matthew Aitken",\n      "url": "https://github.com/KhafraDev",\n      "author": true\n    },\n    {\n      "name": "Robert Nagy",\n      "url": "https://github.com/ronag",\n      "author": true\n    },\n    {\n      "name": "Szymon Marczak",\n      "url": "https://github.com/szmarczak",\n      "author": true\n    },\n    {\n      "name": "Tomas Della Vedova",\n      "url": "https://github.com/delvedor",\n      "author": true\n    }\n  ]\n}',
  'undici-types/index.d.ts':
    "import Dispatcher from'./dispatcher'\nimport { setGlobalDispatcher, getGlobalDispatcher } from './global-dispatcher'\nimport { setGlobalOrigin, getGlobalOrigin } from './global-origin'\nimport Pool from'./pool'\nimport { RedirectHandler, DecoratorHandler } from './handlers'\n\nimport BalancedPool from './balanced-pool'\nimport Client from'./client'\nimport buildConnector from'./connector'\nimport errors from'./errors'\nimport Agent from'./agent'\nimport MockClient from'./mock-client'\nimport MockPool from'./mock-pool'\nimport MockAgent from'./mock-agent'\nimport mockErrors from'./mock-errors'\nimport ProxyAgent from'./proxy-agent'\nimport { request, pipeline, stream, connect, upgrade } from './api'\n\nexport * from './cookies'\nexport * from './fetch'\nexport * from './file'\nexport * from './filereader'\nexport * from './formdata'\nexport * from './diagnostics-channel'\nexport * from './websocket'\nexport * from './content-type'\nexport * from './cache'\nexport { Interceptable } from './mock-interceptor'\n\nexport { Dispatcher, BalancedPool, Pool, Client, buildConnector, errors, Agent, request, stream, pipeline, connect, upgrade, setGlobalDispatcher, getGlobalDispatcher, setGlobalOrigin, getGlobalOrigin, MockClient, MockPool, MockAgent, mockErrors, ProxyAgent, RedirectHandler, DecoratorHandler }\nexport default Undici\n\ndeclare namespace Undici {\n  var Dispatcher: typeof import('./dispatcher').default\n  var Pool: typeof import('./pool').default;\n  var RedirectHandler: typeof import ('./handlers').RedirectHandler\n  var DecoratorHandler: typeof import ('./handlers').DecoratorHandler\n  var createRedirectInterceptor: typeof import ('./interceptors').createRedirectInterceptor\n  var BalancedPool: typeof import('./balanced-pool').default;\n  var Client: typeof import('./client').default;\n  var buildConnector: typeof import('./connector').default;\n  var errors: typeof import('./errors').default;\n  var Agent: typeof import('./agent').default;\n  var setGlobalDispatcher: typeof import('./global-dispatcher').setGlobalDispatcher;\n  var getGlobalDispatcher: typeof import('./global-dispatcher').getGlobalDispatcher;\n  var request: typeof import('./api').request;\n  var stream: typeof import('./api').stream;\n  var pipeline: typeof import('./api').pipeline;\n  var connect: typeof import('./api').connect;\n  var upgrade: typeof import('./api').upgrade;\n  var MockClient: typeof import('./mock-client').default;\n  var MockPool: typeof import('./mock-pool').default;\n  var MockAgent: typeof import('./mock-agent').default;\n  var mockErrors: typeof import('./mock-errors').default;\n  var fetch: typeof import('./fetch').fetch;\n  var Headers: typeof import('./fetch').Headers;\n  var Response: typeof import('./fetch').Response;\n  var Request: typeof import('./fetch').Request;\n  var FormData: typeof import('./formdata').FormData;\n  var File: typeof import('./file').File;\n  var FileReader: typeof import('./filereader').FileReader;\n  var caches: typeof import('./cache').caches;\n}\n",
  'url/package.json':
    '{\n  "name": "url",\n  "description": "The core `url` packaged standalone for use with Browserify.",\n  "version": "0.10.3",\n  "dependencies": {\n    "punycode": "1.3.2",\n    "querystring": "0.2.0"\n  },\n  "main": "./url.js",\n  "devDependencies": {\n    "assert": "1.1.1",\n    "mocha": "1.18.2",\n    "zuul": "2.0.0"\n  },\n  "scripts": {\n    "test": "mocha --ui qunit test.js && zuul -- test.js",\n    "test-local": "zuul --local -- test.js"\n  },\n  "repository": {\n    "type": "git",\n    "url": "https://github.com/defunctzombie/node-url.git"\n  },\n  "license": "MIT"\n}\n',
  'url/url.js': true,
  'util/package.json':
    '{\n  "author": {\n    "name": "Joyent",\n    "url": "http://www.joyent.com"\n  },\n  "name": "util",\n  "description": "Node.JS util module",\n  "keywords": [\n    "util"\n  ],\n  "version": "0.10.3",\n  "homepage": "https://github.com/defunctzombie/node-util",\n  "repository": {\n    "type": "git",\n    "url": "git://github.com/defunctzombie/node-util"\n  },\n  "main": "./util.js",\n  "scripts": {\n    "test": "node test/node/*.js && zuul test/browser/*.js"\n  },\n  "dependencies": {\n    "inherits": "2.0.1"\n  },\n  "license": "MIT",\n  "devDependencies": {\n    "zuul": "~1.0.9"\n  },\n  "browser": {\n    "./support/isBuffer.js": "./support/isBufferBrowser.js"\n  }\n}\n',
  'util/util.js': true,
};
export default files;
