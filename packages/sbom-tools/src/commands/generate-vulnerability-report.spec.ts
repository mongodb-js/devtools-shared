import path from 'path';

import { generateVulnerabilityReport } from './generate-vulnerability-report';
import { withTempDir, importFixture } from '../../test/helpers';
import { expect } from 'chai';
import type { KnownSeverity } from '../snyk-vulnerability';
import { buildSnykVulnerability } from '../snyk-vulnerability';

async function runGenerateReport(
  structure: Record<string, string>,
  options: { failOn?: KnownSeverity } = {}
) {
  return withTempDir(structure, async (tempDir) => {
    let output = '';

    const error = await generateVulnerabilityReport({
      dependencyFiles: [path.resolve(tempDir, 'dependencies.json')],
      snykReports: [path.resolve(tempDir, 'snyk-report.json')],
      snykPolicyPath:
        '.snyk' in structure ? path.resolve(tempDir, '.snyk') : undefined,
      failOn: options.failOn,
      printResult: (result) => {
        output = result;
      },
    }).catch((err) => Promise.resolve(err));

    return { error, output };
  });
}

describe('generate-vulnerability-report', function () {
  it('reports an empty table if nothing matches', async function () {
    const { error, output } = await runGenerateReport({
      '.snyk': '',
      'dependencies.json': JSON.stringify([{ name: 'pkg1', version: '1.0.0' }]),
      'snyk-report.json': JSON.stringify({ vulnerabilities: [{}] }),
    });

    expect(error).to.be.undefined;
    expect(output).to.equal(`## Vulnerabilities Report (0 vulnerabilities)
| dep@version | id | score | fixed in | origin | ignored |
| ----------- | -- | ----- | -------- | ------ | ------- |
`);
  });

  it('reports an entry table if a vulnerability applies', async function () {
    const { error, output } = await runGenerateReport({
      '.snyk': '',
      'dependencies.json': JSON.stringify([{ name: 'pkg1', version: '1.0.0' }]),
      'snyk-report.json': JSON.stringify({
        vulnerabilities: [
          buildSnykVulnerability({
            id: 'v1',
            cves: ['CVE-1'],
            score: 0.1,
            vulnerableSemver: '<=2.0.0',
            fixedIn: ['2.0.0'],
            packageName: 'pkg1',
            packageVersion: '1.0.0',
          }),
        ],
      }),
    });

    expect(error).to.be.undefined;
    expect(output).to.equal(`## Vulnerabilities Report (1 vulnerabilities)
| dep@version | id | score | fixed in | origin | ignored |
| ----------- | -- | ----- | -------- | ------ | ------- |
| pkg1@1.0.0 | v1 | 0.1 (Low) | 2.0.0 | - |
`);
  });

  it('sorts vulnerabilities by severity', async function () {
    const { error, output } = await runGenerateReport({
      '.snyk': '',
      'dependencies.json': JSON.stringify([
        { name: 'pkg1', version: '1.0.0' },
        { name: 'pkg1', version: '1.5.0' },
        { name: 'pkg2', version: '1.0.0' },
      ]),
      'snyk-report.json': JSON.stringify({
        vulnerabilities: [
          buildSnykVulnerability({
            id: 'v1',
            cves: ['CVE-1'],
            score: 0.1,
            vulnerableSemver: '<=2.0.0',
            fixedIn: ['2.0.0'],
            packageName: 'pkg1',
            packageVersion: '1.0.0',
          }),
          buildSnykVulnerability({
            id: 'v2',
            cves: ['CVE-1'],
            score: 10,
            vulnerableSemver: '<=2.0.0',
            fixedIn: ['2.0.0'],
            packageName: 'pkg1',
            packageVersion: '1.5.0',
          }),
          buildSnykVulnerability({
            id: 'v1',
            cves: ['CVE-1'],
            score: 5,
            vulnerableSemver: '<=2.0.0',
            fixedIn: ['2.0.0'],
            packageName: 'pkg2',
            packageVersion: '1.0.0',
          }),
        ],
      }),
    });

    expect(error).to.be.undefined;
    expect(output).to.equal(`## Vulnerabilities Report (3 vulnerabilities)
| dep@version | id | score | fixed in | origin | ignored |
| ----------- | -- | ----- | -------- | ------ | ------- |
| pkg1@1.5.0 | v2 | 10 (Critical) | 2.0.0 | - |
| pkg2@1.0.0 | v1 | 5 (Medium) | 2.0.0 | - |
| pkg1@1.0.0 | v1 | 0.1 (Low) | 2.0.0 | - |
`);
  });

  it('fails if severity is >= failOn', async function () {
    const { error, output } = await runGenerateReport(
      {
        '.snyk': '',
        'dependencies.json': JSON.stringify([
          { name: 'pkg1', version: '1.0.0' },
        ]),
        'snyk-report.json': JSON.stringify({
          vulnerabilities: [
            buildSnykVulnerability({
              id: 'v1',
              cves: ['CVE-1'],
              score: 0.1,
              vulnerableSemver: '<=2.0.0',
              fixedIn: ['2.0.0'],
              packageName: 'pkg1',
              packageVersion: '1.0.0',
            }),
          ],
        }),
      },
      { failOn: 'low' }
    );

    expect(error?.message).to.equal(
      'Vulnerabilities check failed: found vulnerabilities >= "low"'
    );
    expect(output).to.equal(`## Vulnerabilities Report (1 vulnerabilities)
| dep@version | id | score | fixed in | origin | ignored |
| ----------- | -- | ----- | -------- | ------ | ------- |
| pkg1@1.0.0 | v1 | 0.1 (Low) | 2.0.0 | - |
`);
  });

  it('fails if severity unknown', async function () {
    const { error, output } = await runGenerateReport(
      {
        '.snyk': '',
        'dependencies.json': JSON.stringify([
          { name: 'pkg1', version: '1.0.0' },
        ]),
        'snyk-report.json': JSON.stringify({
          vulnerabilities: [
            buildSnykVulnerability({
              id: 'v1',
              cves: ['CVE-1'],
              score: undefined,
              vulnerableSemver: '<=2.0.0',
              fixedIn: ['2.0.0'],
              packageName: 'pkg1',
              packageVersion: '1.0.0',
            }),
          ],
        }),
      },
      { failOn: 'low' }
    );

    expect(error?.message).to.equal(
      'Vulnerabilities check failed: found vulnerabilities >= "low"'
    );
    expect(output).to.equal(`## Vulnerabilities Report (1 vulnerabilities)
| dep@version | id | score | fixed in | origin | ignored |
| ----------- | -- | ----- | -------- | ------ | ------- |
| pkg1@1.0.0 | v1 | ? (Unknown) | 2.0.0 | - |
`);
  });

  it('auto-ignores vulnerabilities without remediation', async function () {
    const { error, output } = await runGenerateReport(
      {
        '.snyk': '',
        'dependencies.json': JSON.stringify([
          { name: 'pkg1', version: '1.0.0' },
        ]),
        'snyk-report.json': JSON.stringify({
          vulnerabilities: [
            buildSnykVulnerability({
              id: 'v1',
              cves: ['CVE-1'],
              score: 10,
              vulnerableSemver: '<=2.0.0',
              fixedIn: [],
              packageName: 'pkg1',
              packageVersion: '1.0.0',
            }),
          ],
        }),
      },
      { failOn: 'low' }
    );

    expect(error?.message).to.be.undefined;
    expect(output).to.equal(`## Vulnerabilities Report (1 vulnerabilities)
| dep@version | id | score | fixed in | origin | ignored |
| ----------- | -- | ----- | -------- | ------ | ------- |
| pkg1@1.0.0 | v1 | 10 (Critical) | N/A | Reason: Remediation not available yet |
`);
  });

  it('allows to ignore vulnerabilities with a snyk policy', async function () {
    const { error, output } = await runGenerateReport(
      {
        '.snyk': `# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.
version: v1.25.0
# ignores vulnerabilities until expiry date; change duration by modifying expiry date
ignore:
  v1:
    - '*':
        reason: None Given
        expires: 3000-06-19T16:42:35.740Z
        created: 2023-05-20T16:42:35.746Z
patch: {}
`,
        'dependencies.json': JSON.stringify([
          { name: 'pkg1', version: '1.0.0' },
        ]),
        'snyk-report.json': JSON.stringify({
          vulnerabilities: [
            buildSnykVulnerability({
              id: 'v1',
              cves: ['CVE-1'],
              score: 10,
              vulnerableSemver: '<=2.0.0',
              fixedIn: ['2.0.0'],
              packageName: 'pkg1',
              packageVersion: '1.0.0',
            }),
          ],
        }),
      },
      { failOn: 'low' }
    );

    expect(error?.message).to.be.undefined;
    expect(output).to.equal(`## Vulnerabilities Report (1 vulnerabilities)
| dep@version | id | score | fixed in | origin | ignored |
| ----------- | -- | ----- | -------- | ------ | ------- |
| pkg1@1.0.0 | v1 | 10 (Critical) | 2.0.0 | Reason: None Given |
`);
  });

  it('allows to ignore unknown severity', async function () {
    const { error, output } = await runGenerateReport(
      {
        '.snyk': `# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.
version: v1.25.0
# ignores vulnerabilities until expiry date; change duration by modifying expiry date
ignore:
  v1:
    - '*':
        reason: None Given
        expires: 3000-06-19T16:42:35.740Z
        created: 2023-05-20T16:42:35.746Z
patch: {}
`,
        'dependencies.json': JSON.stringify([
          { name: 'pkg1', version: '1.0.0' },
        ]),
        'snyk-report.json': JSON.stringify({
          vulnerabilities: [
            buildSnykVulnerability({
              id: 'v1',
              cves: ['CVE-1'],
              score: undefined,
              vulnerableSemver: '<=2.0.0',
              fixedIn: ['2.0.0'],
              packageName: 'pkg1',
              packageVersion: '1.0.0',
            }),
          ],
        }),
      },
      { failOn: 'low' }
    );

    expect(error?.message).to.be.undefined;
    expect(output).to.equal(`## Vulnerabilities Report (1 vulnerabilities)
| dep@version | id | score | fixed in | origin | ignored |
| ----------- | -- | ----- | -------- | ------ | ------- |
| pkg1@1.0.0 | v1 | ? (Unknown) | 2.0.0 | Reason: None Given |
`);
  });

  it('fails with expired policies', async function () {
    const { error, output } = await runGenerateReport(
      {
        '.snyk': `# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.
version: v1.25.0
# ignores vulnerabilities until expiry date; change duration by modifying expiry date
ignore:
  v1:
    - '*':
        reason: None Given
        expires: 2022-06-19T16:42:35.740Z
        created: 2022-05-20T16:42:35.746Z
patch: {}
`,
        'dependencies.json': JSON.stringify([
          { name: 'pkg1', version: '1.0.0' },
        ]),
        'snyk-report.json': JSON.stringify({
          vulnerabilities: [
            buildSnykVulnerability({
              id: 'v1',
              cves: ['CVE-1'],
              score: 10,
              vulnerableSemver: '<=2.0.0',
              fixedIn: ['2.0.0'],
              packageName: 'pkg1',
              packageVersion: '1.0.0',
            }),
          ],
        }),
      },
      { failOn: 'low' }
    );

    expect(error?.message).to.equal(
      'Vulnerabilities check failed: found vulnerabilities >= "low"'
    );
    expect(output).to.equal(`## Vulnerabilities Report (1 vulnerabilities)
| dep@version | id | score | fixed in | origin | ignored |
| ----------- | -- | ----- | -------- | ------ | ------- |
| pkg1@1.0.0 | v1 | 10 (Critical) | 2.0.0 | Reason: None Given (Expired) |
`);
  });

  it('works with the result of scan-node-js', async function () {
    const { error, output } = await runGenerateReport(
      {
        '.snyk': '',
        'dependencies.json': JSON.stringify([
          { name: '.node.js', version: '16.19.1' },
        ]),
        'snyk-report.json': JSON.stringify(
          await importFixture('expect-unknown.json')
        ),
      },
      { failOn: 'low' }
    );

    expect(error?.message).to.equal(
      'Vulnerabilities check failed: found vulnerabilities >= "low"'
    );
    expect(output).to.equal(`## Vulnerabilities Report (3 vulnerabilities)
| dep@version | id | score | fixed in | origin | ignored |
| ----------- | -- | ----- | -------- | ------ | ------- |
| .node.js@16.19.1 | NSWG-COR-99 | ? (Unknown) | ^14.20.0, ^16.20.0, ^18.9.1 | - |
| .node.js@16.19.1 | NSWG-COR-98 | 7.3 (High) | ^14.20.0, ^16.20.0, ^18.5.0 | - |
| .node.js@16.19.1 | NSWG-COR-95 | 6.5 (Medium) | ^14.20.0, ^16.20.0, ^18.5.0 | - |
`);
  });
});
